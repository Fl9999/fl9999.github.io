<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AppScan v10.0.7.28135 安装破解</title>
    <url>/2207220210/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>HCL AppScan（原名IBM Security AppScan）是原IBM的Rational软件部门的一组网络安全测试和监控工具，2019年被HCL技术公司收购。AppScan旨在在开发过程中对Web应用程序的安全漏洞进行测试。  </p>
<span id="more"></span>

<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Windows Server 2016 Datacenter</li>
<li>AppScan v10.0.7.28135</li>
</ul>
<h3 id="AppScan-安装激活"><a href="#AppScan-安装激活" class="headerlink" title="AppScan 安装激活"></a>AppScan 安装激活</h3><p>下载链接<br><a href="https://www.yunzhongzhuan.com/#sharefile=H51riiWG_46315">www.ddosi.org下载入口</a></p>
<blockquote>
<p>解压密码:<a href="http://www.ddosi.org/">www.ddosi.org</a></p>
</blockquote>
<p><a href="https://s.csms.tech/file/HCL_AppScan_Standard_v10.0.7.28135.rar">其他下载地址</a></p>
<p>下载安装包后，点击文件 <code>Appscan_Setup_v10.0.7.28135.exe</code> 安装</p>
<p>安装完成后，复制Crack目录下的文件 <code>AppScanSDK.dll</code>,<code>HclLicenseProvider.dll</code> 到 APPscan安装目录(默认为 <code>C:\Program Files (x86)\HCL\AppScan Standard</code>) 进行替换，完成破解</p>
<p>成功破解后的截图如下</p>
<p><img src="https://i.csms.tech/img_17.png"> </p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.ddosi.org/appscan-2/">参考链接</a></p>
]]></content>
      <categories>
        <category>安全</category>
        <category>AppScan</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>AppScan</tag>
      </tags>
  </entry>
  <entry>
    <title>Django+uwsgi+nginx 配置示例</title>
    <url>/7d1a39d2/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>centos 7</li>
<li>Python 3.10</li>
<li>Django 4.0</li>
<li>uwsgi 2.0.20</li>
<li>nginx 1.20.1</li>
<li>venv<blockquote>
<p>示例中虚拟环境位于 <code>/opt/vb/</code>, Django工程目录位于 <code>/opt/vb/vb/</code> , 工程名称为vb</p>
</blockquote>
</li>
</ul>
<h3 id="uwsgi配置文件-uwsgi-ini-配置示例"><a href="#uwsgi配置文件-uwsgi-ini-配置示例" class="headerlink" title="uwsgi配置文件 (uwsgi.ini) 配置示例"></a>uwsgi配置文件 (uwsgi.ini) 配置示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket = 127.0.0.1:8081</span><br><span class="line">chdir = /opt/vb/vb</span><br><span class="line">wsgi-file = ./vb/wsgi.py</span><br><span class="line">master = true         //主进程</span><br><span class="line">vhost = true          //多站模式</span><br><span class="line">no-site = true        //多站模式时不设置入口模块和文件</span><br><span class="line">workers = 2           //子进程数</span><br><span class="line">reload-mercy = 10     </span><br><span class="line">vacuum = true         //退出、重启时清理文件</span><br><span class="line">max-requests = 1000   </span><br><span class="line">limit-as = 512</span><br><span class="line">buffer-size = 30000</span><br><span class="line">pidfile = uwsgi-8081.pid</span><br><span class="line">daemonize = uwsgi-8081.log</span><br><span class="line">pythonpath = /opt/vb/env/lib/python3.10/site-packages/</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="nginx-配置文件示例"><a href="#nginx-配置文件示例" class="headerlink" title="nginx 配置文件示例"></a>nginx 配置文件示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       server_name csms.tech;</span><br><span class="line"></span><br><span class="line">        location / &#123;            </span><br><span class="line">            include  uwsgi_params;</span><br><span class="line">            uwsgi_pass  127.0.0.1:8081;</span><br><span class="line">            uwsgi_param UWSGI_SCRIPT vb.wsgi;</span><br><span class="line">            uwsgi_param UWSGI_CHDIR /opt/vb/vb;       </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        location /static/ &#123;</span><br><span class="line">                alias /opt/vb/vb/staticCollects/;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log log/uwsgi.access.log main;</span><br><span class="line">        error_log log/uwsgi.error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="/d5da7d5e/" title="Django 常见错误">Django 常见错误</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>Django</tag>
        <tag>Uwsgi</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 常见错误</title>
    <url>/d5da7d5e/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>centos7</li>
<li>python3</li>
<li>Django 4</li>
</ul>
<h2 id="ModuleNotFoundError-No-module-named-‘MySQLdb’"><a href="#ModuleNotFoundError-No-module-named-‘MySQLdb’" class="headerlink" title="ModuleNotFoundError: No module named ‘MySQLdb’"></a>ModuleNotFoundError: No module named ‘MySQLdb’</h2><blockquote>
<p>ModuleNotFoundError: No module named ‘MySQLdb’<br>…<br>django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.</p>
</blockquote>
<p><strong>解决方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>

<p>编辑文件<code>./python36/lib/python3.6/site-packages/django/db/backends/mysql/__init__.py</code>, 输入以下内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql </span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>
<span id="more"></span>



<h2 id="django-core-exceptions-ImproperlyConfigured"><a href="#django-core-exceptions-ImproperlyConfigured" class="headerlink" title="django.core.exceptions.ImproperlyConfigured"></a>django.core.exceptions.ImproperlyConfigured</h2><p>使用以下命令启动服务时报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">django-admin runserver</span><br></pre></td></tr></table></figure>

<blockquote>
<p>django.core.exceptions.ImproperlyConfigured: Requested setting DEBUG, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings</p>
</blockquote>
<p><strong>解决方法</strong></p>
<p>使用命令<br><code>python3 manage.py runserver</code></p>
<h2 id="because-its-MIME-type-‘text-x2F-html’-is-not-a-supported-stylesheet-MIME-type"><a href="#because-its-MIME-type-‘text-x2F-html’-is-not-a-supported-stylesheet-MIME-type" class="headerlink" title="because its MIME type (‘text&#x2F;html’) is not a supported stylesheet MIME type"></a>because its MIME type (‘text&#x2F;html’) is not a supported stylesheet MIME type</h2><p>css 文件路径配置错误，访问文件 404</p>
<hr>
<h1 id="环境信息-1"><a href="#环境信息-1" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>centos7</li>
<li>python3.10</li>
<li>uwsgi 2.0.20</li>
<li>venv</li>
</ul>
<h2 id="ModuleNotFoundError-No-module-named-‘django’"><a href="#ModuleNotFoundError-No-module-named-‘django’" class="headerlink" title="ModuleNotFoundError: No module named ‘django’"></a>ModuleNotFoundError: No module named ‘django’</h2><p>uwsgi 启动后报错(查看 uwsgi 日志输出)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.wsgi <span class="keyword">import</span> get_wsgi_application  </span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;django&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方法</strong></p>
<p>uwsgi 配置文件(<code>uwsgi.ini</code> )中添加 python 路径, 在配置文件中添加如下配置：</p>
<figure class="highlight python"><figcaption><span>uwsgi.ini</span></figcaption><table><tr><td class="code"><pre><span class="line">pythonpath = /env/lib/python3<span class="number">.10</span>/site-packages/</span><br></pre></td></tr></table></figure>

<p>完整 uwsgi 配置文件示例(使用 python venv 模块创建虚拟环境情况下)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket = 127.0.0.1:8081</span><br><span class="line">chdir = /opt/vb/vb</span><br><span class="line">wsgi-file = ./vb/wsgi.py</span><br><span class="line">master = true         //主进程</span><br><span class="line">vhost = true          //多站模式</span><br><span class="line">no-site = true        //多站模式时不设置入口模块和文件</span><br><span class="line">workers = 2           //子进程数</span><br><span class="line">reload-mercy = 10     </span><br><span class="line">vacuum = true         //退出、重启时清理文件</span><br><span class="line">max-requests = 1000   </span><br><span class="line">limit-as = 512</span><br><span class="line">buffer-size = 30000</span><br><span class="line">pidfile = uwsgi-8081.pid</span><br><span class="line">daemonize = uwsgi-8081.log</span><br><span class="line">pythonpath = /opt/vb/env/lib/python3.10/site-packages/</span><br></pre></td></tr></table></figure>

<h2 id="unable-to-load-app-0"><a href="#unable-to-load-app-0" class="headerlink" title="unable to load app 0"></a>unable to load app 0</h2><p><code>uwsgi</code> 启动后报错(查看 <code>uwsgi</code> 日志输出)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unable to load app 0 (mountpoint=&#x27;|&#x27;) (callable not found or import error)  </span><br><span class="line">--- no python application found, check your startup logs for errors ---</span><br></pre></td></tr></table></figure>

<p><strong>解决方法</strong> </p>
<p><code>uwsgi</code> 配置文件(<code>uwsgi.ini</code> )中添加 <code>wsgi.py</code> 路径, 在配置文件中添加如下配置：</p>
<figure class="highlight shell"><figcaption><span>uwsgi.ini</span></figcaption><table><tr><td class="code"><pre><span class="line">wsgi-file = ./project/wsgi.py</span><br></pre></td></tr></table></figure>

<h2 id="django-db-utils-OperationalError"><a href="#django-db-utils-OperationalError" class="headerlink" title="django.db.utils.OperationalError"></a>django.db.utils.OperationalError</h2><p>项目根目录执行 <code>python manage.py  migrate</code> 时报错 <code>django.db.utils.OperationalError: (1366, &quot;Incorrect string value: &#39;\\xE6\\x9C\\x8D\\xE5\\x8A\\xA1...&#39; for column &#39;name&#39; at row 1&quot;)</code></p>
<p><strong>排查步骤</strong></p>
<ol>
<li><p>查看数据库编码设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show variables like <span class="string">&quot;%char%&quot;</span>;</span></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.01 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>修改数据库编码为 <code>utf8</code></p>
<p>修改数据库配置文件 <code>my.cnf</code>，添加以下配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure>
<p>重启数据库，检查编码设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show variables like <span class="string">&quot;%char%&quot;</span>;</span></span><br><span class="line"></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.05 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>重新执行 <code>python manage.py  migrate</code> 依旧返回同样的报错，检查之前创建的数据库编码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show create database mydb;</span></span><br><span class="line">+-----------------+----------------------------------------------------------------------------+</span><br><span class="line">| Database        | Create Database                                                            |</span><br><span class="line">+-----------------+----------------------------------------------------------------------------+</span><br><span class="line">| mydb | CREATE DATABASE `mydb` /*!40100 DEFAULT CHARACTER SET latin1 */ |</span><br><span class="line">+-----------------+----------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>编码显示为 <code>latin1</code>，删除数据库重新创建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">drop database mydb;</span></span><br><span class="line">Query OK, 12 rows affected (0.10 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create database mydb;</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show create database mydb;</span></span><br><span class="line">+-----------------+--------------------------------------------------------------------------+</span><br><span class="line">| Database        | Create Database                                                          |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------+</span><br><span class="line">| mydb | CREATE DATABASE `mydb` /*!40100 DEFAULT CHARACTER SET utf8 */ |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>新建的数据库编码为 <code>utf8</code>，重新执行 <code>python manage.py  makemigrations</code>，<code>python manage.py  migrate</code>，执行成功。删除数据库重建后，如若使用后台，需要为后台重新生成 superuser。</p>
</li>
</ol>
<hr>
<h1 id="环境信息-2"><a href="#环境信息-2" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3.11.2</li>
<li>Django&#x3D;&#x3D;4.1.7</li>
<li>mysqlclient&#x3D;&#x3D;2.1.1</li>
</ul>
<h2 id="django-db-utils-NotSupportedError-MariaDB-10-3-or-later-is-required-found-5-5-68"><a href="#django-db-utils-NotSupportedError-MariaDB-10-3-or-later-is-required-found-5-5-68" class="headerlink" title="django.db.utils.NotSupportedError: MariaDB 10.3 or later is required (found 5.5.68)"></a>django.db.utils.NotSupportedError: MariaDB 10.3 or later is required (found 5.5.68)</h2><p><strong>解决方法</strong>：</p>
<p>在 <code>/usr/local/lib/python3.11/site-packages/django/db/backends/base/base.py</code> 中搜索 <code>self.check_database_version_supported</code>，然后把这一行注释掉。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/self.check_database_version_supported/#self.check_database_version_supported/&#x27; /usr/local/lib/python3.11/site-packages/django/db/backends/base/base.py</span><br></pre></td></tr></table></figure>

<h2 id="Raised-by-django-contrib-admin-sites-catch-all-view"><a href="#Raised-by-django-contrib-admin-sites-catch-all-view" class="headerlink" title="Raised by: django.contrib.admin.sites.catch_all_view"></a>Raised by: django.contrib.admin.sites.catch_all_view</h2><p>在项目的入口 <code>urls.py</code> 文件中按照以下配置，应用 <code>cloud_client</code> 对应的 url （<code>/cloud_client/</code>）无法匹配到，抛出异常信息： <code>Raised by: django.contrib.admin.sites.catch_all_view</code></p>
<figure class="highlight python"><figcaption><span>urls.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">   path(<span class="string">&#x27;&#x27;</span>, admin.site.urls),</span><br><span class="line">   path(<span class="string">&#x27;cloud_client/&#x27;</span>, include(<span class="string">&#x27;cloud_client.urls&#x27;</span>)),</span><br><span class="line">    </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/68368142/catch-all-view-break-url-patterns-in-django">参考文章说明</a>，修改为以下配置后，应用相关的 url 访问正常，<strong>自定义的 URls 需要在 admin 的 URLs 之前。</strong> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Catch-all view break URL patterns in Django](https://stackoverflow.com/questions/68368142/catch-all-view-break-url-patterns-in-django)">[1]</span></a></sup></p>
<figure class="highlight python"><figcaption><span>urls.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">   </span><br><span class="line">   path(<span class="string">&#x27;cloud_client/&#x27;</span>, include(<span class="string">&#x27;cloud_client.urls&#x27;</span>)),</span><br><span class="line">   path(<span class="string">&#x27;&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="Key-‘id’-not-found-in-‘xxx’-Choices-are-xxx"><a href="#Key-‘id’-not-found-in-‘xxx’-Choices-are-xxx" class="headerlink" title="Key ‘id’ not found in ‘xxx’. Choices are: xxx"></a>Key ‘id’ not found in ‘xxx’. Choices are: xxx</h2><p>Django admin 后台中点击报错，错误原因为模型注册到后台时，<code>fields</code> 配置中包含了 <code>id</code> 字段，因为字段 <code>id</code> 设置的自增 ID 键，在数据库中对应的是 <code>AUTO_INCREMENT</code>，所以这个字段是不允许编辑的，而 <code>fields</code> 这个配置设置是可编辑字段，导致冲突，所以会报错。 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Django报错: Key 'id' not found in 'xxx'. Choices are: xxx](https://cloud.tencent.com/developer/article/1937434)
">[2]</span></a></sup></p>
<h2 id="Refused-to-execute-script-from-‘‘-because-its-MIME-type-‘text-x2F-html’-is-not-executable-and-strict-MIME-type-checking-is-enabled"><a href="#Refused-to-execute-script-from-‘‘-because-its-MIME-type-‘text-x2F-html’-is-not-executable-and-strict-MIME-type-checking-is-enabled" class="headerlink" title="Refused to execute script from ‘‘ because its MIME type (‘text&#x2F;html’) is not executable, and strict MIME type checking is enabled"></a>Refused to execute script from ‘<URL>‘ because its MIME type (‘text&#x2F;html’) is not executable, and strict MIME type checking is enabled</h2><p>Django 配置 <code>DEBUG = False</code> 后，页面访问异常<br><img src="https://i.csms.tech/img_132.png"></p>
<h2 id="Django-admin-静态资源-404"><a href="#Django-admin-静态资源-404" class="headerlink" title="Django admin 静态资源 404"></a>Django admin 静态资源 404</h2><p>请求中，admin 页面的所有资源显示 404</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;GET /static/admin/js/core.js HTTP/1.1&quot; 404 179</span><br></pre></td></tr></table></figure>
<p>原因是因为关闭了 <code>DEBUG</code> 模式（通过配置 <code>DEBUG = False</code>），所以导致找不到静态资源。生产环境中需要关闭 <code>DEBUG</code>，需要给 Django 的静态资源配置路由来解决。 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Django 静态资源404问题](https://blog.sanxi.info/archives/django-jing-tai-zi-yuan-404-wen-ti)">[3]</span></a></sup></p>
<h2 id="The-Cross-Origin-Opener-Policy-header-has-been-ignored"><a href="#The-Cross-Origin-Opener-Policy-header-has-been-ignored" class="headerlink" title="The Cross-Origin-Opener-Policy header has been ignored"></a>The Cross-Origin-Opener-Policy header has been ignored</h2><p>浏览器加载页面报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The Cross-Origin-Opener-Policy header has been ignored, because the URL&#x27;s origin was untrustworthy. It was defined either in the final response or a redirect. Please deliver the response using the HTTPS protocol. You can also use the &#x27;localhost&#x27; origin instead. See https://www.w3.org/TR/powerful-features/#potentially-trustworthy-origin and https://html.spec.whatwg.org/#the-cross-origin-opener-policy-header.</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_212.png"><br>Django 4 的安全机制。调试环境在配置文件 <code>settings.py</code> 中配置以下参数即可解决</p>
<figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">SECURE_CROSS_ORIGIN_OPENER_POLICY = &#x27;None&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="read-of-closed-file"><a href="#read-of-closed-file" class="headerlink" title="read of closed file"></a>read of closed file</h2><p>Django 中用户从 Web 页面中点击下载文件，Django 对文件压缩并返回给客户端。前端页面代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;% url &#x27;client:download_certificate&#x27; certificate_name=domain.Certificate_Name %&#125;&quot;&gt;Download Certificate&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中的 <code>domain.Certificate_Name</code> 是要传送给下载 url 的证书名称变量。</p>
</blockquote>
<p>url 如下：</p>
<figure class="highlight shell"><figcaption><span>urls.py</span></figcaption><table><tr><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from cloudclient import views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app_name = &#x27;client&#x27;</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;download_certificate/&lt;str:certificate_name&gt;/&#x27;, views.download_certificate, name=&#x27;download_certificate&#x27;),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>视图函数（<code>views.py</code>） 关键代码如下：</p>
<figure class="highlight shell"><figcaption><span>views.py</span></figcaption><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line">from django.http import FileResponse, Http404</span><br><span class="line">from django.contrib.auth.decorators import login_required</span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">def download_certificate(request, certificate_name):</span><br><span class="line">    certificate_dir = os.path.join(settings.BASE_DIR, f&#x27;data/letsencrypt/live/&#123;certificate_name&#125;&#x27;)</span><br><span class="line">    logging.info(f&quot;ssl download: &#123;certificate_dir&#125;&quot;)</span><br><span class="line">    certificate_zip = f&#x27;&#123;certificate_dir&#125;.zip&#x27;</span><br><span class="line"></span><br><span class="line">    if os.path.exists(certificate_zip):</span><br><span class="line">        os.remove(certificate_zip)</span><br><span class="line">        logging.info(f&quot;ssl certificate zip file &#123;certificate_zip&#125; exists. Delete it before compress&quot;)</span><br><span class="line"></span><br><span class="line">    # 压缩文件夹函数</span><br><span class="line">    zip_directory(certificate_dir, f&#x27;&#123;certificate_dir&#125;.zip&#x27;)</span><br><span class="line">    logging.info(f&quot;compress file &#123;certificate_zip&#125; END!&quot;)</span><br><span class="line"></span><br><span class="line">    if os.path.exists(certificate_zip):</span><br><span class="line">        # 打开文件并发送给用户</span><br><span class="line">        logging.info(f&quot;compress file &#123;certificate_zip&#125; EXISTS! Began send to client.&quot;)</span><br><span class="line">        with open(certificate_zip, &#x27;rb&#x27;) as f:</span><br><span class="line">            logging.info(f&quot;Open compressed certificate file &#123;certificate_zip&#125; and send to client&quot;)</span><br><span class="line">            response = FileResponse(f)</span><br><span class="line">            response[&#x27;Content-Disposition&#x27;] = f&#x27;attachment; filename=&#123;certificate_name&#125;.zip&#x27;</span><br><span class="line">            logging.info(f&quot;response info: &#123;str(response)&#125;&quot;)</span><br><span class="line">            return response</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line">        # 如果文件不存在，返回 404 错误</span><br><span class="line">        logging.error(f&quot;ssl download file: &#123;certificate_zip&#125; NOT exists!&quot;)</span><br><span class="line">        raise Http404(&quot;File not found&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用以上代码后，用户在 Web 页面中点击 <code>Download Certificate</code> 进行证书下载，Web 页面显示 <code>A server error occurred.  Please contact the administrator.</code>， 检查下载链接响应码为 500。</p>
<p>检查代码输出的日志信息，最后包含 <code>response info: &lt;FileResponse status_code=200, &quot;application/zip&quot;&gt;</code>，说明代码处理到此处无异常。</p>
<p>检查 Django 的终端输出日志，看到以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">response info: &lt;FileResponse status_code=200, &quot;application/zip&quot;&gt;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/usr/local/lib/python3.11/wsgiref/handlers.py&quot;, line 138, in run</span><br><span class="line">    self.finish_response()</span><br><span class="line">  File &quot;/usr/local/lib/python3.11/wsgiref/handlers.py&quot;, line 183, in finish_response</span><br><span class="line">    for data in self.result:</span><br><span class="line">  File &quot;/usr/local/lib/python3.11/wsgiref/util.py&quot;, line 24, in __next__</span><br><span class="line">    data = self.filelike.read(self.blksize)</span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">ValueError: read of closed file</span><br></pre></td></tr></table></figure>
<p>根据错误信息 <code>ValueError: read of closed file</code>，问题很可能出在文件处理逻辑上。错误发生在尝试从一个已经关闭的文件中读取数据，这通常发生在使用 <code>with</code> 语句打开文件后，文件自动关闭，但 Django 的 <code>FileResponse</code> 对象仍尝试从这个文件流中读取数据。</p>
<p>在 Django 中使用 <code>FileResponse</code> 返回一个文件给客户端时，需要确保文件在响应对象完成发送数据后再关闭。在上面的代码中，文件通过 <code>with</code> 语句打开，因此在 <code>with</code> 代码块结束时自动关闭了文件。这导致 FileResponse 在尝试访问已关闭的文件时失败。</p>
<p>为解决这个问题，可以修改文件打开的方式，确保文件在整个请求处理过程中保持开放。下面是修正后的代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">def ssl_download_certificate(request, certificate_name):</span><br><span class="line">    certificate_dir = os.path.join(settings.BASE_DIR, f&#x27;data/letsencrypt/live/&#123;certificate_name&#125;&#x27;)</span><br><span class="line">    logging.info(f&quot;ssl download: &#123;certificate_dir&#125;&quot;)</span><br><span class="line">    certificate_zip = f&#x27;&#123;certificate_dir&#125;.zip&#x27;</span><br><span class="line"></span><br><span class="line">    if os.path.exists(certificate_zip):</span><br><span class="line">        os.remove(certificate_zip)</span><br><span class="line">        logging.info(f&quot;ssl certificate zip file &#123;certificate_zip&#125; exists. Delete it before compress&quot;)</span><br><span class="line"></span><br><span class="line">    zip_directory(certificate_dir, f&#x27;&#123;certificate_dir&#125;.zip&#x27;)</span><br><span class="line">    logging.info(f&quot;compress file &#123;certificate_zip&#125; END!&quot;)</span><br><span class="line"></span><br><span class="line">    if os.path.exists(certificate_zip):</span><br><span class="line">        # 打开文件并发送给用户</span><br><span class="line">        logging.info(f&quot;compress file &#123;certificate_zip&#125; EXISTS! Began send to client.&quot;)</span><br><span class="line">        f = open(certificate_zip, &#x27;rb&#x27;)  # 打开文件，不立即关闭</span><br><span class="line">        logging.info(f&quot;Open compressed certificate file &#123;certificate_zip&#125; and send to client&quot;)</span><br><span class="line">        response = FileResponse(f, as_attachment=True, filename=f&quot;&#123;certificate_name&#125;.zip&quot;)</span><br><span class="line">        logging.info(f&quot;response info: &#123;str(response)&#125;&quot;)</span><br><span class="line">        return response</span><br><span class="line">        # with open(certificate_zip, &#x27;rb&#x27;) as f:</span><br><span class="line">        #     logging.info(f&quot;Open compressed certificate file &#123;certificate_zip&#125; and send to client&quot;)</span><br><span class="line">        #     response = FileResponse(f)</span><br><span class="line">        #     response[&#x27;Content-Disposition&#x27;] = f&#x27;attachment; filename=&#123;certificate_name&#125;.zip&#x27;</span><br><span class="line">        #     logging.info(f&quot;response info: &#123;str(response)&#125;&quot;)</span><br><span class="line">        #     return response</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line">        # 如果文件不存在，返回 404 错误</span><br><span class="line">        logging.error(f&quot;ssl download file: &#123;certificate_zip&#125; NOT exists!&quot;)</span><br><span class="line">        raise Http404(&quot;File not found&quot;)</span><br></pre></td></tr></table></figure>
<p>修改为以上代码后，文件下载正常。</p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://stackoverflow.com/questions/68368142/catch-all-view-break-url-patterns-in-django">Catch-all view break URL patterns in Django</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://cloud.tencent.com/developer/article/1937434">Django报错: Key 'id' not found in 'xxx'. Choices are: xxx</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.sanxi.info/archives/django-jing-tai-zi-yuan-404-wen-ti">Django 静态资源404问题</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 模板中循环嵌套</title>
    <url>/c97b0902/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>模板中需要循环中循环，<code>&#123;% for i in alist %&#125;</code>,假如i是个元组或列表，需要继续循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> alist %&#125;</span><br><span class="line">	&#123;% <span class="keyword">with</span> temp=I %&#125;</span><br><span class="line">		&#123;% <span class="keyword">for</span> k <span class="keyword">in</span> temp %&#125;</span><br><span class="line">		    …</span><br><span class="line">		&#123;% endfor %&#125;</span><br><span class="line">	&#123;% endwith %&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>
<p>或使用如下方式，data &#x3D; [[1,2],[3,4]]：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> l <span class="keyword">in</span> data%&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% <span class="keyword">for</span> temp <span class="keyword">in</span> l % &#125;</span><br><span class="line">		&#123;% <span class="keyword">if</span> forloop.first % &#125;</span><br><span class="line">			<span class="string">&#x27;&#123;&#123;temp&#125;&#125;&#x27;</span>,</span><br><span class="line">		&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">			&#123;&#123;temp&#125;&#125;</span><br><span class="line">		&#123;% endif %&#125;</span><br><span class="line">	&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django model 外键的反向引用</title>
    <url>/dcca5850/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">	question_text=models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">	pub_date=models.DateTimeField(<span class="string">&#x27;datepublished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	def__str__(self):</span><br><span class="line">		returnself.question_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">	question=models.ForeignKey(Question,on_delete=models.CASCADE)</span><br><span class="line">	choice_text=models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">	votes=models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	def__str__(self):</span><br><span class="line">		returnself.choice_text</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上例中，Choice引用了Question作为外键，在模板中通过Question对象获取所有引用了Question对象的Choice对象，可以使用以下方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">	&lt;li&gt;&#123;&#123;choice.choice_text&#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>

<p>使用question.choice_set.all的方式获取所有引用question对象的Choice对象实例</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Model</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile 简介</title>
    <url>/202208050928/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Dockerfile 是一个文本文件，其内包含了一条条的 <code>指令(Instruction)</code>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p>
<span id="more"></span>

<h1 id="docker-build-命令"><a href="#docker-build-命令" class="headerlink" title="docker build 命令"></a><code>docker build</code> 命令</h1><p><code>docker build</code> 命令使用 <code>Dockerfile</code> 进行镜像构建。其格式为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure>

<h2 id="docker-build-命令常用选项"><a href="#docker-build-命令常用选项" class="headerlink" title="docker build 命令常用选项"></a><code>docker build</code> 命令常用选项</h2><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-t, --tag</code></td>
<td>给新构建的镜像一个新的标签，格式为：<code>name:tag</code></td>
<td><code>docker build -t nginx:v3 .</code></td>
</tr>
<tr>
<td><code>-f, --file string </code></td>
<td><code>Dockerfile</code>的路径（文件名），默认为 <code>上下文（Context）目录/Dockerfile</code></td>
<td></td>
</tr>
</tbody></table>
<h2 id="上下文路径-格式"><a href="#上下文路径-格式" class="headerlink" title="上下文路径 格式"></a><code>上下文路径</code> 格式</h2><p>上下文路径可以是以下方式</p>
<ul>
<li><p>本地路径</p>
</li>
<li><p>用 <code>Git repo</code> 进行构建</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t hello-world https://github.com/docker-library/hello-world.git#master:amd64/hello-world</span><br></pre></td></tr></table></figure>

<p>  这行命令指定了构建所需的 Git repo，并且指定分支为 master，构建目录为 &#x2F;amd64&#x2F;hello-world&#x2F;，然后 Docker 就会自己去 git clone 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p>
</li>
<li><p>用给定的 <code>tar</code> 压缩包构建</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build http://server/context.tar.gz</span><br></pre></td></tr></table></figure>
<p>如果所给出的 URL 不是个 Git repo，而是个 tar 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。</p>
</li>
<li><p>从标准输入中读取 <code>Dockerfile</code> 进行构建</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build - &lt; Dockerfile</span><br></pre></td></tr></table></figure>
<p>或</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat Dockerfile | docker build -</span><br></pre></td></tr></table></figure>
<p>  如果标准输入传入的是文本文件，则将其视为 <code>Dockerfile</code>，并开始构建。这种形式由于直接从标准输入中读取 <code>Dockerfile</code> 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 <code>COPY</code> 进镜像之类的事情。  </p>
</li>
<li><p>从标准输入中读取上下文压缩包进行构建</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build - &lt; context.tar.gz</span><br></pre></td></tr></table></figure>
<p>如果发现标准输入的文件格式是 <code>gzip</code>、<code>bzip2</code> 以及 <code>xz</code> 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。</p>
</li>
</ul>
<h2 id="镜像构建上下文（Context）"><a href="#镜像构建上下文（Context）" class="headerlink" title="镜像构建上下文（Context）"></a>镜像构建上下文（Context）</h2><p>Docker 在运行时分为 <code>Docker 引擎</code>（也就是服务端守护进程）和<code>客户端工具</code>。Docker 的引擎提供了一组 <code>REST API</code>，被称为 <a href="https://docs.docker.com/engine/api/sdk/"><code>Docker Remote API</code></a>，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 <code>API</code> 与 <code>Docker 引擎</code> 交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 <code>docker</code> 功能，但实际上，一切都是使用的远程调用形式在服务端（<code>Docker 引擎</code>）完成。也因为这种 C&#x2F;S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用 Dockerfile 定制镜像](https://yeasy.gitbook.io/docker_practice/image/build)  ">[1]</span></a></sup></p>
<p>当我们进行镜像构建的时候，并非所有定制都会通过 <code>RUN</code> 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 <code>COPY</code> 指令、<code>ADD</code> 指令等。而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 <code>Docker 引擎</code> 中构建的。那么在这种客户端&#x2F;服务端的架构中，如何才能让服务端获得本地文件呢？</p>
<p>这就引入了 <code>上下文</code> 的概念。当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 <code>Docker 引擎</code>。这样 <code>Docker 引擎</code> 收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p>
<p>如果在 Dockerfile 中这么写：</p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">COPY ./package.json /app/</span><br></pre></td></tr></table></figure>

<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <code>上下文（context）</code> 目录下的 <code>package.json</code>。</p>
<p>因此，<code>COPY</code> 这类指令中的源文件的路径都是相对路径。</p>
<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 <code>Docker 引擎</code>，那么可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 <code>Docker 引擎</code> 的。</p>
<p>默认情况下，如果不额外指定 <code>Dockerfile</code> 的话，会将上下文目录下的名为 <code>Dockerfile</code> 的文件作为 <code>Dockerfile</code>。</p>
<p>这只是默认行为，实际上 <code>Dockerfile</code> 的文件名并不要求必须为 <code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为 <code>Dockerfile</code>。<br>当然，一般大家习惯性的会使用默认的文件名 <code>Dockerfile</code>，以及会将其置于镜像构建上下文目录中</p>
<h1 id="Dockerfile-指令详解"><a href="#Dockerfile-指令详解" class="headerlink" title="Dockerfile 指令详解"></a>Dockerfile 指令详解</h1><p><code>Dockerfile</code> 文件示例</p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>

<h2 id="FROM-指令"><a href="#FROM-指令" class="headerlink" title="FROM 指令"></a>FROM 指令</h2><p>定制镜像，一定要以一个镜像为基础，在其上进行定制。</p>
<p><code>FROM</code> 就是指定 <code>基础镜像</code>，因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是<strong>必备的指令</strong>，并且<strong>必须是第一条指令</strong>。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用 Dockerfile 定制镜像](https://yeasy.gitbook.io/docker_practice/image/build)  ">[1]</span></a></sup>  </p>
<p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 <code>scratch</code>。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">FROM scratch</span><br></pre></td></tr></table></figure>

<p>如果以 <code>scratch</code> 为基础镜像的话，意味着不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p>
<h2 id="RUN-指令"><a href="#RUN-指令" class="headerlink" title="RUN 指令"></a>RUN 指令</h2><p><code>RUN</code> 指令是用来执行命令行命令的。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用 Dockerfile 定制镜像](https://yeasy.gitbook.io/docker_practice/image/build)  ">[1]</span></a></sup> 其格式有两种：</p>
<ul>
<li>shell 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。<a href="#Dockerfile-%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3">上面</a>写的 <code>Dockerfile</code> 中的 <code>RUN</code> 指令就是这种格式。  </li>
<li>exec 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li>
</ul>
<blockquote>
<p><a href="#shell-%E6%A0%BC%E5%BC%8F%E5%92%8C-exec-%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E">shell 格式和 exec 格式说明</a></p>
</blockquote>
<p>既然 RUN 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：  </p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">FROM debian:stretch</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y gcc libc6-dev make wget</span><br><span class="line">RUN wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span><br><span class="line">RUN mkdir -p /usr/src/redis</span><br><span class="line">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span><br><span class="line">RUN make -C /usr/src/redis</span><br><span class="line">RUN make -C /usr/src/redis install</span><br></pre></td></tr></table></figure>

<p><code>Dockerfile</code> 中每一个指令都会建立一层，<code>RUN</code> 也不例外。每一个 <code>RUN</code> 的行为，就和我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，<code>commit</code> 这一层的修改，构成新的镜像。<br>每一个 RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。当前的 <code>RUN</code> 指令和前后的 <code>RUN</code> 指令是<strong>不存在环境变量的共享及关联的</strong></p>
<p>而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。</p>
<p><code>Union FS</code> 是有最大层数限制的，比如 <code>AUFS</code>，曾经是最大不得超过 42 层，现在是不得超过 127 层。</p>
<p>上面的 <code>Dockerfile</code> 正确的写法应该是这样：</p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">FROM debian:stretch</span><br><span class="line"></span><br><span class="line">RUN set -x; buildDeps=&#x27;gcc libc6-dev make wget&#x27; \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y $buildDeps \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot; \</span><br><span class="line">    &amp;&amp; mkdir -p /usr/src/redis \</span><br><span class="line">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis install \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    &amp;&amp; rm redis.tar.gz \</span><br><span class="line">    &amp;&amp; rm -r /usr/src/redis \</span><br><span class="line">    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</span><br></pre></td></tr></table></figure>

<p>首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 <code>RUN</code> 一一对应不同的命令，而是仅仅使用一个 <code>RUN</code> 指令，并使用 <code>&amp;&amp;</code> 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 <code>Dockerfile</code> 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。  </p>
<p>并且，这里为了格式化还进行了换行。<code>Dockerfile</code> 支持 <code>Shell</code> 类的行尾添加 <code>\</code> 的命令换行方式，以及行首 <code>#</code> 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。  </p>
<p>此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 apt 缓存文件。这是很重要的一步，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p>
<h2 id="COPY-复制文件指令"><a href="#COPY-复制文件指令" class="headerlink" title="COPY 复制文件指令"></a>COPY 复制文件指令</h2><p><code>COPY</code> 指令将构建上下文目录中的 <code>&lt;源路径&gt;</code> 的文件&#x2F;目录复制到新的一层镜像内的 <code>&lt;目标路径&gt;</code> 位置。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[COPY 复制文件](https://yeasy.gitbook.io/docker_practice/image/dockerfile/copy)">[2]</span></a></sup></p>
<p>命令格式：</p>
<ul>
<li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</code></li>
<li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li>
</ul>
<p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 <code>Go</code> 的 <a href="https://pkg.go.dev/path/filepath#Match"><code>filepath.Match</code></a> 规则，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">COPY hom* /mydir/</span><br><span class="line">COPY hom?.txt /mydir/</span><br></pre></td></tr></table></figure>

<p>如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。  </p>
<p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>
<p>使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。  </p>
<p><code>COPY</code> 指令其他选项：</p>
<style>
table th:nth-of-type(1){
width: 10%;
}
table th:nth-of-type(2){
width: 20%;
}
table th:nth-of-type(3){
width: 70%;
}
</style>

<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--from</code></td>
<td>从其他镜像或构件阶段拷贝文件</td>
<td><code>COPY --from=0 /go/app .</code>  多阶段构建 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Dockerfile 多阶段构建](https://yeasy.gitbook.io/docker_practice/image/multistage-builds)">[6]</span></a></sup> 中，从第1阶段的镜像中复制文件<br/><code>COPY --from=step1 /go/app .</code> 多阶段构建中，从名为 <code>step1</code> 的镜像中复制<br/></td>
</tr>
</tbody></table>
<h2 id="CMD-容器启动指令"><a href="#CMD-容器启动指令" class="headerlink" title="CMD 容器启动指令"></a>CMD 容器启动指令</h2><p>镜像启动时默认执行的指令，在启动容器时，容器后面跟其他指令，会替换默认指令</p>
<p><code>CMD</code> 指令<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[CMD 容器启动命令](https://yeasy.gitbook.io/docker_practice/image/dockerfile/cmd)">[3]</span></a></sup>的格式和 <code>RUN</code> 相似，也是两种格式：  </p>
<ul>
<li>shell 格式：<code>CMD &lt;命令&gt;</code>  </li>
<li>exec 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code>  </li>
<li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li>
</ul>
<blockquote>
<p><a href="#shell-%E6%A0%BC%E5%BC%8F%E5%92%8C-exec-%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E">shell 格式和 exec 格式说明</a></p>
</blockquote>
<p>如果使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。比如：</p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">CMD echo $HOME</span><br></pre></td></tr></table></figure>

<p>在实际执行中，会将其变更为：</p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</span><br></pre></td></tr></table></figure>

<p>其中主进程是 <code>sh</code> 。Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 <code>systemd</code> 去启动后台服务，容器内没有后台服务的概念。  </p>
<p>比如以下指令：</p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">CMD service nginx start</span><br></pre></td></tr></table></figure>

<p>容器执行后就会立即退出，对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p>
<p>而使用 <code>service nginx start</code> 或 <code>systemctl start nginx</code> 等类似命令，被理解为 <code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;systemctl start nginx&quot;]</code>，因此主进程实际上是 <code>sh</code>, 那么当 <code>systemctl start nginx</code> 命令结束后，<code>sh</code> 也就结束了，<code>sh</code> 作为主进程退出了，自然就会令容器退出。  </p>
<p>正确的做法是直接执行 <code>nginx</code> 可执行文件，并且要求以前台形式运行。比如：</p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>

<h2 id="ENTRYPOINT-容器启动程序指令"><a href="#ENTRYPOINT-容器启动程序指令" class="headerlink" title="ENTRYPOINT 容器启动程序指令"></a>ENTRYPOINT 容器启动程序指令</h2><p><code>ENTRYPOINT</code> 的格式和 <a href="#RUN-%E6%8C%87%E4%BB%A4"><code>RUN</code> 指令格式</a>一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。 <a href="#shell-%E6%A0%BC%E5%BC%8F%E5%92%8C-exec-%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E">shell 格式和 exec 格式说明</a>  </p>
<p><code>ENTRYPOINT</code> 的目的和 <a href="#CMD-%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E6%8C%87%E4%BB%A4"><code>CMD</code></a> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在容器启动时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <a href="https://csms.tech/202208041317/#运行镜像"><code>--entrypoint</code></a> 来指定。<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ENTRYPOINT 入口点 | ENTRYPOINT 和 CMD 的不同使用场景](https://yeasy.gitbook.io/docker_practice/image/dockerfile/entrypoint)">[4]</span></a></sup>  </p>
<p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> (包括 <code>Dockerfile</code> 和 <code>docker run</code> 中的 <code>CMD</code>)的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，即实际执行时，将变为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="ENV-设置环境变量指令"><a href="#ENV-设置环境变量指令" class="headerlink" title="ENV 设置环境变量指令"></a>ENV 设置环境变量指令</h2><p>设置环境变量，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p>
<p>当使用生成的镜像运行容器时，使用 <code>ENV</code> 设置的环境变量将持久存在于容器内。 你可以使用 <code>docker inspect</code> 查看这些值，并使用 <code>docker run --env &lt;key&gt;=&lt;value&gt;</code> 修改它们</p>
<blockquote>
<p>环境变量持久性可能会导致意想不到的副作用。 例如，设置 <code>ENV DEBIAN_FRONTEND=noninteractive</code> 会改变 <code>apt-get</code> 的行为，并可能让使用镜像的用户感到困惑。<br>如果只在构建过程中需要环境变量，而不是在最终镜像中使用，可以使用 <a href="#ARG-%E6%9E%84%E5%BB%BA%E5%8F%82%E6%95%B0"><code>ARG</code></a>，它不会在最终镜像中持久存在</p>
</blockquote>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">ENV VERSION=1.0 DEBUG=on \</span><br><span class="line">    NAME=&quot;Happy Feet&quot;</span><br></pre></td></tr></table></figure>

<p>调用方式：</p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">RUN echo $VERSION</span><br></pre></td></tr></table></figure>

<h2 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h2><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code>  </p>
<p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的是<strong>构建环境的环境变量，在将来容器运行时是不会存在</strong>这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。  </p>
<p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p>
<p><code>ARG</code> 指令有生效范围，如果在 <code>FROM</code> 指令之前指定，那么只能用于 <code>FROM</code> 指令中。  </p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">ARG DOCKER_USERNAME=library</span><br><span class="line"></span><br><span class="line">FROM $&#123;DOCKER_USERNAME&#125;/alpine</span><br><span class="line"></span><br><span class="line">RUN set -x ; echo $&#123;DOCKER_USERNAME&#125;</span><br></pre></td></tr></table></figure>
<p>使用上述 <code>Dockerfile</code> 会发现无法输出 <code>$&#123;DOCKER_USERNAME&#125;</code> 变量的值，要想正常输出，你必须在 <code>FROM</code> 之后再次指定 <code>ARG</code>  </p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只在 FROM 中生效</span></span><br><span class="line">ARG DOCKER_USERNAME=library</span><br><span class="line"></span><br><span class="line">FROM $&#123;DOCKER_USERNAME&#125;/alpine</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要想在 FROM 之后使用，必须再次指定</span></span><br><span class="line">ARG DOCKER_USERNAME=library</span><br><span class="line"></span><br><span class="line">RUN set -x ; echo $&#123;DOCKER_USERNAME&#125;</span><br></pre></td></tr></table></figure>

<h2 id="VOLUME-定义匿名卷指令"><a href="#VOLUME-定义匿名卷指令" class="headerlink" title="VOLUME 定义匿名卷指令"></a>VOLUME 定义匿名卷指令</h2><p>容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。  </p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">VOLUME /data</span><br></pre></td></tr></table></figure>

<p>这里的 <code>/data</code> 目录就会在容器运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行容器时可以覆盖这个挂载设置。比如：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure>

<p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。  </p>
<h2 id="EXPOSE-暴露端口指令"><a href="#EXPOSE-暴露端口指令" class="headerlink" title="EXPOSE 暴露端口指令"></a>EXPOSE 暴露端口指令</h2><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code>。</p>
<p><code>EXPOSE</code> 指令是声明容器运行时提供服务的端口，这<strong>只是一个声明</strong>，在容器运行时并<strong>不会因为这个声明，应用就会开启这个端口</strong>的服务。在 <code>Dockerfile</code> 中写入这样的声明有两个好处:</p>
<ul>
<li>一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；</li>
<li>另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</li>
</ul>
<p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>
<h2 id="WORKDIR-指定工作目录指令"><a href="#WORKDIR-指定工作目录指令" class="headerlink" title="WORKDIR 指定工作目录指令"></a>WORKDIR 指定工作目录指令</h2><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code>。  </p>
<p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），<strong>以后各层</strong>的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。  </p>
<p>如果 <code>WORKDIR</code> 指令使用的是<code>相对路径</code>，那么所切换的路径与之前的 <code>WORKDIR</code> 有关</p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line"></span><br><span class="line">RUN pwd</span><br></pre></td></tr></table></figure>

<p><code>RUN pwd</code> 的工作目录为 &#x2F;a&#x2F;b&#x2F;c。</p>
<h2 id="USER-指定当前用户指令"><a href="#USER-指定当前用户指令" class="headerlink" title="USER 指定当前用户指令"></a>USER 指定当前用户指令</h2><p>格式：<code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></p>
<p><code>USER</code> 指令和 <a href="#WORKDIR-%E6%8C%87%E5%AE%9A%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95%E6%8C%87%E4%BB%A4"><code>WORKDIR</code></a> 相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code> 是改变工作目录，<code>USER</code> 则是改变之后层的执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 这类命令的身份。 <code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p>
<h2 id="HEALTHCHECK-健康状态检查命令"><a href="#HEALTHCHECK-健康状态检查命令" class="headerlink" title="HEALTHCHECK 健康状态检查命令"></a>HEALTHCHECK 健康状态检查命令</h2><p>格式：<br><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[HEALTHCHECK 健康检查](https://yeasy.gitbook.io/docker_practice/image/dockerfile/healthcheck)">[5]</span></a></sup><br><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令  </p>
<p>HEALTHCHECK 支持下列选项：</p>
<style>
table th:nth-of-type(1){
width: 15%;
}
table th:nth-of-type(2){
width: 40%;
}
table th:nth-of-type(3){
width: 35%;
}
</style>

<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--interval=&lt;30s&gt;</code></td>
<td>两次健康检查的间隔，默认为 30 秒</td>
<td></td>
</tr>
<tr>
<td><code>--timeout=&lt;30s&gt;</code></td>
<td>健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</td>
<td></td>
</tr>
<tr>
<td><code>--retries=&lt;次数&gt;</code></td>
<td>当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</td>
<td></td>
</tr>
</tbody></table>
<p>当在一个镜像指定了 <code>HEALTHCHECK</code> 指令后，用其启动容器，初始状态会为 <code>starting</code>，在 <code>HEALTHCHECK</code> 指令检查成功后变为 <code>healthy</code>，如果连续一定次数失败，则会变为 <code>unhealthy</code>。  </p>
<p>和 <code>CMD</code>, <code>ENTRYPOINT</code> 一样，<code>HEALTHCHECK</code> 只可以出现一次，如果写了多个，只有最后一个生效。  </p>
<p>在 <code>HEALTHCHECK [选项] CMD</code> 后面的命令，格式和 <code>ENTRYPOINT</code> 一样，分为 <code>shell</code> 格式，和 <code>exec</code> 格式。命令的返回值决定了该次健康检查的成功与否：  </p>
<ul>
<li>0：成功；</li>
<li>1：失败；</li>
<li>2：保留，不要使用这个值。</li>
</ul>
<p>假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 <code>curl</code> 来帮助判断，其 <code>Dockerfile</code> 的 <code>HEALTHCHECK</code> 可以这么写：  </p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN yum install -y curl &amp;&amp; yum clean all</span><br><span class="line">HEALTHCHECK --interval=5s --timeout=3s CMD \</span><br><span class="line">  curl -fs http://localhost/ || exit 1</span><br></pre></td></tr></table></figure>

<h1 id="shell-格式和-exec-格式说明"><a href="#shell-格式和-exec-格式说明" class="headerlink" title="shell 格式和 exec 格式说明"></a>shell 格式和 exec 格式说明</h1><p>在 Dockerfile 中，<code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 指令都支持 <code>shell</code> 格式和 <code>exec</code> 两种格式，格式分别如下</p>
<ul>
<li>shell 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。<a href="#Dockerfile-%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3">上面</a>写的 <code>Dockerfile</code> 中的 <code>RUN</code> 指令就是这种格式。  </li>
<li>exec 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li>
</ul>
<p>此处演示两种格式的具体区别。</p>
<ol>
<li>使用以下内容的 Dockerfile 构建镜像并运行，使用 <code>shell</code> 格式，假设镜像名称为 <code>centos7:dockerfile-cmd-shell</code> <figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">FROM centos:centos7.9.2009</span><br><span class="line"></span><br><span class="line">CMD ping 127.0.0.1</span><br></pre></td></tr></table></figure></li>
<li>使用以下内容的 Dockerfile 构建镜像并运行，使用 <code>exec</code> 格式，假设镜像名称为 <code>centos7:dockerfile-cmd-exec</code> <figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">FROM centos:centos7.9.2009</span><br><span class="line"></span><br><span class="line">CMD [ &quot;ping&quot;,&quot;127.0.0.1&quot; ]</span><br></pre></td></tr></table></figure></li>
<li>运行以上 Dockerfile 构建出来的镜像，容器信息如下，镜像 <code>dockerfile-cmd-exec</code> 和 <code>dockerfile-cmd-shell</code> 分别使用 <code>exec</code> 格式和 <code>shell</code> 格式 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps</span> </span><br><span class="line">CONTAINER ID   IMAGE                          COMMAND                  CREATED          STATUS          PORTS                                 NAMES</span><br><span class="line">f2168d2dba94   centos7:dockerfile-cmd-exec    &quot;ping 127.0.0.1&quot;         5 minutes ago    Up 5 minutes                                          funny_rubin</span><br><span class="line">70738995509f   centos7:dockerfile-cmd-shell   &quot;/bin/sh -c &#x27;ping 12…&quot;   16 minutes ago   Up 16 minutes                                         magical_cannon</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>分别查看 2 个容器的 <code>docker inspect</code> 输出信息中的运行的进程信息 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker inspect f2168d2dba94</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;f2168d2dba94d549bf70185d9d41e52d482be6f56a7c0d392f625e3721d1c07e&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2023-05-12T03:15:15.860200728Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;ping&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;127.0.0.1&quot;</span><br><span class="line">        ],</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker inspect 70738995509f</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;70738995509f12b0f4099c765cea3d2655076865f2a380b9cb7b1763bac58808&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2023-05-12T03:05:10.112279195Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;ping 127.0.0.1&quot;</span><br><span class="line">        ],</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
由此可见，<code>shell</code> 格式的命令，在容器运行时会先启动 <code>shell</code>，然后在 <code>shell</code> 中执行命令。<code>exec</code> 格式则在容器启动时直接执行命令，未使用 <code>shell</code> 启动。</li>
</ol>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="http-server-gave-HTTP-response-to-HTTPS-client"><a href="#http-server-gave-HTTP-response-to-HTTPS-client" class="headerlink" title="http: server gave HTTP response to HTTPS client"></a>http: server gave HTTP response to HTTPS client</h2><p>在 Dockerfile 中使用私有仓库中的基础镜像，在构建镜像的过程中拉取镜像报错，关键 Dockerfile 内容如下</p>
<figure class="highlight shell"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">FROM 1.6.67.11:5000/comm/php:7.3.18-fpm-alpine3.16</span><br><span class="line">WORKDIR /home/www</span><br></pre></td></tr></table></figure>
<p>构建命令及报错如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker build -t <span class="built_in">comm</span>/vas-php:20231101135333 -f ./php/Dockerfile .</span></span><br><span class="line">[+] Building 0.4s (3/3) FINISHED                                                                                                                 </span><br><span class="line"> =&gt; [internal] load .dockerignore                                                                                                           0.3s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                                                                                             0.0s</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                                                                        0.4s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 1.47kB                                                                                                      0.0s</span><br><span class="line"> =&gt; ERROR [internal] load metadata for 1.6.67.11:5000/comm/php:7.3.18-fpm-alpine3.16                                                 0.0s</span><br><span class="line">------</span><br><span class="line"><span class="meta prompt_"> &gt; </span><span class="language-bash">[internal] load metadata <span class="keyword">for</span> 1.6.67.11:5000/comm/php:7.3.18-fpm-alpine3.16:</span></span><br><span class="line">------</span><br><span class="line">Dockerfile:1</span><br><span class="line">--------------------</span><br><span class="line">   1 | &gt;&gt;&gt; FROM 1.6.67.11:5000/comm/php:7.3.18-fpm-alpine3.16</span><br><span class="line">   2 |     WORKDIR /home/www</span><br><span class="line">   3 |     COPY ./php/www.conf /usr/local/etc/php-fpm.d/</span><br><span class="line">--------------------</span><br><span class="line">ERROR: failed to solve: 1.6.67.11:5000/comm/php:7.3.18-fpm-alpine3.16: failed to do request: Head &quot;https://1.6.67.11:5000/v2/comm/php/manifests/7.3.18-fpm-alpine3.16&quot;: http: server gave HTTP response to HTTPS client</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通常情况下，在镜像仓库不支持 HTTPS 的情况下，为了让 docker 客户端使用 HTTP 请求镜像仓库，需要在 docker 客户端的 docker 配置中配置以 HTTP 方式请求镜像仓库。要实现此配置，需要在（客户端） docker 服务配置文件 <code>/etc/docker/daemon.json</code>（如果不存在则创建）中配置以下内容</p>
<figure class="highlight shell"><figcaption><span>/etc/docker/daemon.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;1.6.67.11:5000&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置后，重启 docker 生效。在 Dockerfile 中使用私有镜像仓库的情况下，此配置可能不能解决本示例中遇到的问题。那么问题原因有可能是因为 <em><strong>新版本 Docker 的 <code>buildkit</code> 特性</strong></em>，在此种情况下，可以选用以下方法之一解决 <sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Docker repository server gave HTTP response to HTTPS client](https://stackoverflow.com/questions/49674004/docker-repository-server-gave-http-response-to-https-client)">[7]</span></a></sup></p>
<ul>
<li>禁用 <code>buildkit</code> 特性。可以通过以下 2 种方式实现<ol>
<li>使用环境变量禁用此特性，关键参数 <code>DOCKER_BUILDKIT=0</code>。具体执行方式如下 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DOCKER_BUILDKIT=0 docker build -t image_name .</span><br></pre></td></tr></table></figure></li>
<li>通过 docker 配置文件 <code>/etc/docker/daemon.json</code>，具体配置如下，注意其中的 <code>insecure-registries</code> 配置，<strong>无需指定协议</strong> <figure class="highlight shell"><figcaption><span>/etc/docker/daemon.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;features&quot;: &#123;</span><br><span class="line">    &quot;buildkit&quot;: false</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;insecure-registries&quot;: [</span><br><span class="line">    &quot;hostname:18443&quot;,</span><br><span class="line">    &quot;hostname:8083&quot;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>启用 <code>buildkit</code> 特性的情况下配置 <code>insecure-registries</code>。<em><strong>在启用 <code>buildkit</code> 特性的情况下，<code>insecure-registries</code> 中的镜像仓库地址指定协议</strong></em>  <figure class="highlight shell"><figcaption><span>/etc/docker/daemon.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;features&quot;: &#123;</span><br><span class="line">    &quot;buildkit&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;insecure-registries&quot;: [</span><br><span class="line">    &quot;http://hostname:18443&quot;,</span><br><span class="line">    &quot;http://hostname:8083&quot;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://yeasy.gitbook.io/docker_practice/">docker 从入门到实践</a>  </p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yeasy.gitbook.io/docker_practice/image/build">使用 Dockerfile 定制镜像</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile/copy">COPY 复制文件</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile/cmd">CMD 容器启动命令</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile/entrypoint">ENTRYPOINT 入口点 | ENTRYPOINT 和 CMD 的不同使用场景</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile/healthcheck">HEALTHCHECK 健康检查</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yeasy.gitbook.io/docker_practice/image/multistage-builds">Dockerfile 多阶段构建</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://stackoverflow.com/questions/49674004/docker-repository-server-gave-http-response-to-https-client">Docker repository server gave HTTP response to HTTPS client</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 安装部署及配置示例</title>
    <url>/202207241754/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Hexo 6.2.0</li>
<li>Next 8.12.2</li>
</ul>
<blockquote>
<p>Hexo 查看版本方式： <code>npm list</code><br>Next 版本信息可在文件 <code>themes/next/package.json </code> 中查看</p>
</blockquote>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装指定版本的-Hexo"><a href="#安装指定版本的-Hexo" class="headerlink" title="安装指定版本的 Hexo"></a>安装指定版本的 Hexo</h2><p>假如要安装 7.0.0 版本的 Hexo，参考以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli@7.0.0</span><br><span class="line"></span><br><span class="line">hexo init myblog --version 7.0.0</span><br></pre></td></tr></table></figure>

<h1 id="Hexo-常用配置"><a href="#Hexo-常用配置" class="headerlink" title="Hexo 常用配置"></a>Hexo 常用配置</h1><h2 id="首页按照更新时间排序"><a href="#首页按照更新时间排序" class="headerlink" title="首页按照更新时间排序"></a>首页按照更新时间排序</h2><p>更改主配置文件 <code>_config.yml</code> 中的以下部分(<code>index_generator.order_by</code>):  </p>
<figure class="highlight shell"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -updated</span><br></pre></td></tr></table></figure>

<h2 id="代码块不显示行号"><a href="#代码块不显示行号" class="headerlink" title="代码块不显示行号"></a>代码块不显示行号</h2><p>更改 <code>Hexo</code> 配置文件 <code>_config.yml</code>，修改以下配置</p>
<figure class="highlight shell"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: false </span><br></pre></td></tr></table></figure>

<p>将 <code>line_number</code> 值改为 <code>false</code></p>
<h2 id="配置站点地图"><a href="#配置站点地图" class="headerlink" title="配置站点地图"></a>配置站点地图</h2><p>通过设置站点地图( sitemap )，可以让搜索引擎获取你的页面信息，这样可以增加别人搜索到你的几率，具体配置参考官网步骤<br><a href="https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/Baidu-Google-%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/">官网说明</a></p>
<h1 id="Next-主题常用配置"><a href="#Next-主题常用配置" class="headerlink" title="Next 主题常用配置"></a>Next 主题常用配置</h1><h2 id="调整页面显示宽度"><a href="#调整页面显示宽度" class="headerlink" title="调整页面显示宽度"></a>调整页面显示宽度</h2><p>针对 Next 中的主题方案<code>Pisces</code>或<code>Gemini</code>, 更改 Next 主题中的文件 <code>themes/next/source/css/_variables/Pisces.styl</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[官网说明](https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/%E8%B0%83%E6%95%B4%E9%A1%B5%E9%9D%A2%E5%AE%BD%E5%BA%A6/)">[1]</span></a></sup> </p>
<figure class="highlight shell"><figcaption><span>Pisces.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">content-desktop-large        = 90em;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">content-desktop-largest      = 90%;</span></span><br></pre></td></tr></table></figure>

<h2 id="启用-gitalk-评论系统"><a href="#启用-gitalk-评论系统" class="headerlink" title="启用 gitalk 评论系统"></a>启用 gitalk 评论系统</h2><p>具体配置 <a href="https://www.cnblogs.com/qisi007/p/13731562.html">参考文章</a></p>
<h2 id="修改默认图标"><a href="#修改默认图标" class="headerlink" title="修改默认图标"></a>修改默认图标</h2><h3 id="修改菜单图标"><a href="#修改菜单图标" class="headerlink" title="修改菜单图标"></a>修改菜单图标</h3><p>修改默认的菜单图标为以下图标<br><img src="https://i.csms.tech/img_123.png"><br>Next 使用的图标来自 <code>Font Awesome</code>。</p>
<blockquote>
<p>Font Awesome 是一套绝佳的图标字体库和CSS框架。 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[fontawesome](https://fontawesome.com/start)">[3]</span></a></sup></p>
<p>Font Awesome 字体为您提供可缩放矢量图标,它可以被定制大小、颜色、阴影以及任何可以用CSS的样式。</p>
</blockquote>
<p>在主题配置文件 <code>_config.next.yml</code> 中，菜单配置由三部分构成: <code>菜单的显示名称： 菜单的访问链接 || 菜单使用的图标</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-earth-americas</span><br><span class="line">  categories: /categories/ || fa fa-folder-tree</span><br><span class="line">  tags: /tags/ || fa fa-tornado</span><br><span class="line">  archives: /archives/ || fa fa-rectangle-list </span><br></pre></td></tr></table></figure>
<p>要修改菜单的图标，可以在 <code>Font Awesome</code> 官网搜索到对应的图标，修改主题配置文件中的图标名称为如上所示。</p>
<blockquote>
<p><code>fa</code> : 使用此种图标，<code>菜单的显示名称</code> 和图标中间会包含空格，如 <code>fa fa-folder-tree</code></p>
<p><code>fa-solid</code> : 使用此种图标，<code>菜单的显示名称</code> 和图标中间<strong>不包含空格</strong>，如 <code>fa-solid fa-folder-tree</code></p>
<p>有些图标直接使用时，如 <code>fa-brands fa-docker</code> Docker 图标，菜单的显示名称会和图标紧贴在一起，中间无空格，可以再添加 <code>fa</code> 样式，使菜单名称和图标之间有空格，比如 <code>fa fa-brands fa-docker</code></p>
</blockquote>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/%E8%B0%83%E6%95%B4%E9%A1%B5%E9%9D%A2%E5%AE%BD%E5%BA%A6/">官网说明</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/ywang-wnlo/p/16110411.html">Next 主题配置记录</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://fontawesome.com/start">fontawesome</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://finisky.github.io/customizecategorybyextension/">Hexo添加自定义分类菜单项并定制页面布局(简洁版)</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo markdown常用语法</title>
    <url>/2215beeb/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="url-链接"><a href="#url-链接" class="headerlink" title="url 链接"></a>url 链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[这是一个链接](https://csms.tech [title])</span><br></pre></td></tr></table></figure>
<p><a href="https://csms.tech/">这是一个链接</a></p>
<h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图片名称](https://i.csms.tech/img_10.png [title])</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_10.png" alt="图片名称"></p>
<span id="more"></span>

<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;https://csms.tech&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://csms.tech/">https://csms.tech</a><br><a href="https://csms.tech/">https://csms.tech</a></p>
<h3 id="链接到文章内的标题"><a href="#链接到文章内的标题" class="headerlink" title="链接到文章内的标题"></a>链接到文章内的标题</h3><p><code>Hexo</code> 会自动为各个层级的标题添加锚点，锚点 id 为标题名称，如果标题名称中有 <strong><code>空格</code> <code>)</code> <code>(</code> <code>.</code> 会被替换成<code>-</code>，多个空格合并成一个</strong>。如果标题开头**中包含 <code>/</code>，会被替换成 <code>x2F-</code>**，如果标题中间出现 <code>/</code>，会被替换成 <code>-x2F-</code>。要查看标签的具体值，也可以通过查看网页源代码的方式查找对应 id 。使用示例如下</p>
<table>
<thead>
<tr>
<th>标题</th>
<th>锚点 id</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>### 三级标题</td>
<td><code>id=&quot;三级标题&quot;</code></td>
<td></td>
</tr>
<tr>
<td>### this is  title</td>
<td><code>id=&quot;this-is-title&quot;</code></td>
<td>多个空格会合并成一个</td>
</tr>
<tr>
<td>### &#x2F;home&#x2F;dir</td>
<td><code>id=&quot;x2F-home-x2F-dir&quot;</code></td>
<td></td>
</tr>
</tbody></table>
<p>在文章中要跳转到指定的锚点，可以使用以下方式：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[这是一个锚点](#this-is-title)</span><br></pre></td></tr></table></figure>

<h3 id="链接到本站其他文章的指定标题"><a href="#链接到本站其他文章的指定标题" class="headerlink" title="链接到本站其他文章的指定标题"></a>链接到本站其他文章的指定标题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[名称](https://csms.tech&#123;% post_path &#x27;文章文件名&#x27; %&#125;#id)</span><br></pre></td></tr></table></figure>
<p><code>&#123;% post_path 'Hexo-markdown-grammar' %&#125;</code> 的值为： <code>/2022/07/Hexo-markdown-grammar/</code><br><a href="https://csms.tech/2215beeb/#图片链接">跳转</a></p>
<h3 id="链接到标题之外的锚点"><a href="#链接到标题之外的锚点" class="headerlink" title="链接到标题之外的锚点"></a>链接到标题之外的锚点</h3><p>可以使用html标签先创建对应锚点，如<code>&lt;div id=&#39;1&#39;&gt;这是一个文章锚点&lt;/div&gt;</code></p>
<div id='1'>这是一个文章锚点</div>

<p><a href="#1">跳转到id&#x3D;1的锚点</a></p>
<h3 id="站内文章链接"><a href="#站内文章链接" class="headerlink" title="站内文章链接"></a>站内文章链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link &#x27;文章文件名&#x27; [&#x27;显示的名称, 默认为文章title&#x27;] %&#125;</span><br></pre></td></tr></table></figure>
<p>本篇文章 <a href="/2215beeb/" title="hexo markdown常用语法">hexo markdown常用语法</a></p>
<h3 id="note标签"><a href="#note标签" class="headerlink" title="note标签"></a>note标签</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;% note class %&#125;</span><br><span class="line">文本内容 (支持行内标签)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>支持的class包括：<code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code></p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight shell"><figcaption><span>代码块示例</span><a href="https://csms.tech">主页</a></figcaption><table><tr><td class="code"><pre><span class="line">```shell name url urlshowname</span><br><span class="line">log-bin=binlog</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| title1 | title2  | title3 |</span><br><span class="line">|:------|:-------:|-------:|</span><br><span class="line">| 第1列 |第2列     |第3列  |</span><br><span class="line">|左对齐| 居中对齐   | 右对齐|</span><br><span class="line">| 竖线 &amp;#124; |竖线 &amp;#x7C; |</span><br><span class="line">|Hexo中竖线使用 `\|`||</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">title1</th>
<th align="center">title2</th>
<th align="right">title3</th>
</tr>
</thead>
<tbody><tr>
<td align="left">第1列</td>
<td align="center">第2列</td>
<td align="right">第3列</td>
</tr>
<tr>
<td align="left">左对齐</td>
<td align="center">居中对齐</td>
<td align="right">右对齐</td>
</tr>
<tr>
<td align="left">竖线 <code>&amp;#124;</code></td>
<td align="center">竖线 <code>&amp;#x7C;</code></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">Hexo中竖线使用 <code>|</code></td>
<td align="center"></td>
<td align="right"></td>
</tr>
</tbody></table>
<blockquote>
<p>要在表格中使用<code>|</code>, 可用以下2中之一代替</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&amp;#124;</span><br><span class="line">&amp;#x7C;</span><br></pre></td></tr></table></figure>
<p>Hexo 表格中需要使用 <code>\|</code> 方式输出 <code>|</code></p>
</blockquote>
<p>设置表格宽度，在表格之前使用以下 <code>style</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>)&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">table th:nth-of-type(1)&#123;</span><br><span class="line">width: 10%;</span><br><span class="line">&#125;</span><br><span class="line">table th:nth-of-type(2)&#123;</span><br><span class="line">width: 70%;</span><br><span class="line">&#125;</span><br><span class="line">table th:nth-of-type(3)&#123;</span><br><span class="line">width: 20%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">| 选项      | 说明    |示例|</span><br><span class="line">|:--------|--------|---|</span><br><span class="line">|第一列：10%|第二列：70%|第三列：20%|</span><br></pre></td></tr></table></figure>

<p>以上输出显示效果如下：</p>
<style>
table th:nth-of-type(1){
width: 10%;
}
table th:nth-of-type(2){
width: 70%;
}
table th:nth-of-type(3){
width: 20%;
}
</style>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">第一列：10%</td>
<td>第二列：70%</td>
<td>第三列：20%</td>
</tr>
</tbody></table>
<blockquote>
<p>一个文档中出现多次，以最后一个 <code>style</code> 配置为最终效果</p>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://hexo.io/zh-cn/docs/writing">Hexo Markdown 语法手册</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>IBKR 使用</title>
    <url>/202402201708/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://www.interactivebrokers.com/cn/accounts/fees/pricing-interest-rates.php?lp=T">开户链接</a></p>
]]></content>
      <categories>
        <category>生活日常</category>
        <category>理财</category>
      </categories>
      <tags>
        <tag>生活日常</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 从库提升为主库，原来的其他从库成为新的主库的从库</title>
    <url>/b12589a5/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Mysql 5.7</li>
</ul>
<h3 id="场景说明"><a href="#场景说明" class="headerlink" title="场景说明"></a>场景说明</h3><p>Mysql 一主多从的情况下，主库宕机（或其他无法使用的情况），将其中一台从库提升为主库，同时将原来其他的从库配置为新的主库的从库。  </p>
<blockquote>
<p>主从恢复正常之前，数据库不应该有新的数据写入</p>
</blockquote>
<span id="more"></span>

<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="确保所有从库已经执行了relay-log中的全部更新"><a href="#确保所有从库已经执行了relay-log中的全部更新" class="headerlink" title="确保所有从库已经执行了relay log中的全部更新"></a>确保所有从库已经执行了relay log中的全部更新</h4><p>登录mysql从库，在每个从库上，执行<code>stop slave io_thread</code>,停止IO线程, 通过以下2个命令之一检查从库relay log的执行情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show processlist;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_6.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_7.png">  </p>
<p>当输出中<code>Slave_SQL_Running_State</code> 为 <code>Slave has read all relay log; waiting for more updates</code>，表示更新都执行完毕。  </p>
<blockquote>
<ul>
<li>正常情况下，此时在每个从库上面查看slave状态(<code>show slave status\G</code>), 每个从库读取的主库的<code>Master_Log_File</code>和<code>Read_Master_Log_Pos</code>都应该是一样的，意味着所有的从库都已经更新到了主库宕机时的状态。此种情况下，可随便选择从库作为新的主库。<br><img src="https://i.csms.tech/img_8.png"></li>
<li>如果，从库上面查看slave状态，各个从库读取的主库的<code>Master_Log_File</code>和<code>Read_Master_Log_Pos</code>不一致，说明主库宕机之前各个从库和主库的主从延迟情况可能不一，导致各个从库的状态不一致，此种情况下，从数据完整性的角度考虑，应该选择position最大的一个从库，作为新选定的主库。对其他从库，应该通过从binlog中读取缺失的数据，补足数据。或者直接通过<a href="/94ee2c23/" title="备份恢复">备份恢复</a>的方式，和新选定的主库，重新建立主从连接。</li>
</ul>
</blockquote>
<h4 id="更新新的主库的配置"><a href="#更新新的主库的配置" class="headerlink" title="更新新的主库的配置"></a>更新新的主库的配置</h4><p>在新选定的主库上，配置文件(默认<code>/etc/my.cnf</code>)中开启binlog，如已配置，跳过</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">log-bin=mysql-bin</span><br></pre></td></tr></table></figure>
<p>新选定的主库上，如果配置了readonly，在配置文件(默认<code>/etc/my.cnf</code>)中取消readonly配置</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">read_only=0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更改mysql配置文件后，重启mysql生效</p>
</blockquote>
<p>在新选定的主库上，执行以下命令，重置从库配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;  </span><br><span class="line">reset master;</span><br><span class="line">reset slave all;  </span><br></pre></td></tr></table></figure>
<p>在新选定的主库上，执行以下命令，创建具有同步权限的账号，如果已存在，跳过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to &#x27;repl&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>在新选定的主库上，执行以下命令，查看当前主库的master位置信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show master status\G</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_9.png"></p>
<blockquote>
<p>在主从重新建立之前，不应该有新的数据写入数据库，在此前提之下，多次查看master status，显示的<code>File</code>和<code>Position</code> 应该是确定不变的值，后续可根据此值，让其他从库和新选定的主库建立主从连接。  </p>
</blockquote>
<h4 id="建立新的主从"><a href="#建立新的主从" class="headerlink" title="建立新的主从"></a>建立新的主从</h4><p>在其他从库上，执行以下命令，和新选定的主库，建立主从连接，其中需要的<code>master_log_file</code>和<code>master_log_pos</code>从<a href="#%E6%9B%B4%E6%96%B0%E6%96%B0%E7%9A%84%E4%B8%BB%E5%BA%93%E7%9A%84%E9%85%8D%E7%BD%AE">上一步</a>中获得。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;123456&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000982&#x27;,master_log_pos=638932979;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>

<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Spinnaker 安装配置</title>
    <url>/202210121639/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos-7 3.10.0-1160</li>
<li>Docker Engine 19.03.15</li>
<li>Kubernetes 1.21.2</li>
</ul>
<blockquote>
<p><strong>本文档中涉及服务器的操作，都是在 Kubernetes 集群的 Master 节点上进行。如果在其他服务器启动 Halyard 容器，需要确保容器中可以访问到 Kubernetes 集群的 API Server</strong></p>
</blockquote>
<h1 id="安装部署步骤"><a href="#安装部署步骤" class="headerlink" title="安装部署步骤"></a>安装部署步骤</h1><h2 id="Install-Halyard-on-Docker-and-Choose-Cloud-Providers-Kubernetes"><a href="#Install-Halyard-on-Docker-and-Choose-Cloud-Providers-Kubernetes" class="headerlink" title="Install Halyard on Docker and Choose Cloud Providers - Kubernetes"></a>Install Halyard on Docker and Choose Cloud Providers - Kubernetes</h2><h3 id="宿主机准备容器数据目录"><a href="#宿主机准备容器数据目录" class="headerlink" title="宿主机准备容器数据目录"></a>宿主机准备容器数据目录</h3><p>宿主机创建 local Halyard config directory <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Install Halyard on Docker](https://spinnaker.io/docs/setup/install/halyard/#install-halyard-on-docker)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /root/spinnaker_data</span><br><span class="line">mkdir /root/spinnaker_data/.kube</span><br><span class="line">mkdir /root/spinnaker_data/.hal</span><br></pre></td></tr></table></figure>
<p>Spinnaker 的部署配置会写入容器目录 <code>/home/spinnaker/.hal</code>，将此配置映射到宿主机，可保证配置持久化。</p>
<p>拷贝 Kubernetes 集群管理配置文件到 <code>/root/spinnaker_data/.kube/config</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[You need a Kubernetes cluster and its credentials](https://spinnaker.io/docs/setup/install/providers/kubernetes/#you-need-a-kubernetes-cluster-and-its-credentials)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /etc/kubernetes/admin.conf /root/spinnaker_data/.kube/config</span><br><span class="line">chmod 777 /root/spinnaker_data/.kube/config</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="启动-Halyard-容器"><a href="#启动-Halyard-容器" class="headerlink" title="启动 Halyard 容器"></a>启动 Halyard 容器</h3><p>启动 Halyard 容器，并挂载 Halyard 本地配置目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run  \</span><br><span class="line">    --name halyard --rm \</span><br><span class="line">    -v /root/spinnaker_data/.hal:/home/spinnaker/.hal \</span><br><span class="line">    -v /root/spinnaker_data/.kube:/home/spinnaker/.kube \</span><br><span class="line">    -it \</span><br><span class="line">    us-docker.pkg.dev/spinnaker-community/docker/halyard:stable</span><br></pre></td></tr></table></figure>

<h3 id="配置-Spinnaker-关联-Kubernetes-集群"><a href="#配置-Spinnaker-关联-Kubernetes-集群" class="headerlink" title="配置 Spinnaker 关联 Kubernetes 集群"></a>配置 Spinnaker 关联 Kubernetes 集群</h3><h4 id="配置并验证-Halyard-容器可以和-kubernetes-Api-Server-通信"><a href="#配置并验证-Halyard-容器可以和-kubernetes-Api-Server-通信" class="headerlink" title="配置并验证 Halyard 容器可以和 kubernetes Api Server 通信"></a>配置并验证 Halyard 容器可以和 kubernetes Api Server 通信</h4><p>进入 Halyard 容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it halyard bash</span><br></pre></td></tr></table></figure>
<p>修改 <code>/home/spinnaker/.kube/config</code>，将配置中的 Kubernetes API Server 改为正确的 IP </p>
<figure class="highlight shell"><figcaption><span>/home/spinnaker/.kube/config</span></figcaption><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQk</span><br><span class="line">    server: https://10.150.0.21:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<p>进入 Halyard 容器，验证 Halyard 容器可以和 Kubernetes API Server 通信：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it halyard bash</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME                  STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k8s-master   Ready    control-plane,master   24h   v1.21.2</span><br><span class="line">k8s-work1    Ready    &lt;none&gt;                 24h   v1.21.2</span><br><span class="line">k8s-work2    Ready    &lt;none&gt;                 24h   v1.21.2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="启用-Cloud-Provider-kubernetes"><a href="#启用-Cloud-Provider-kubernetes" class="headerlink" title="启用 Cloud Provider : kubernetes"></a>启用 Cloud Provider : kubernetes</h4><p>在 Halyard 容器中，执行以下命令，启用 Cloud Provider : kubernetes <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Adding an account](https://spinnaker.io/docs/setup/install/providers/kubernetes-v2/#adding-an-account)">[3]</span></a></sup>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hal config provider kubernetes <span class="built_in">enable</span></span></span><br><span class="line">+ Get current deployment</span><br><span class="line">  Success</span><br><span class="line">+ Edit the kubernetes provider</span><br><span class="line">  Success</span><br><span class="line">Validation in default:</span><br><span class="line">- WARNING You have not yet selected a version of Spinnaker to</span><br><span class="line">  deploy.</span><br><span class="line">? Options include: </span><br><span class="line">  - 1.29.0</span><br><span class="line">  - 1.28.1</span><br><span class="line">  - 1.27.1</span><br><span class="line">  - 1.26.7</span><br><span class="line"></span><br><span class="line">Validation in default.provider.kubernetes:</span><br><span class="line">- WARNING Provider kubernetes is enabled, but no accounts have been</span><br><span class="line">  configured.</span><br><span class="line"></span><br><span class="line">+ Successfully enabled kubernetes</span><br></pre></td></tr></table></figure>
<h4 id="添加-kubernetes-账号"><a href="#添加-kubernetes-账号" class="headerlink" title="添加 kubernetes 账号"></a>添加 kubernetes 账号</h4><p>在 Halyard 容器中，执行以下命令，添加账号 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">CONTEXT=$(kubectl config current-context)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hal config provider kubernetes account add my-k8s-account --context <span class="variable">$CONTEXT</span></span></span><br><span class="line">+ Get current deployment</span><br><span class="line">  Success</span><br><span class="line">+ Add the my-k8s-account account</span><br><span class="line">  Success</span><br><span class="line">Validation in default:</span><br><span class="line">- WARNING You have not yet selected a version of Spinnaker to</span><br><span class="line">  deploy.</span><br><span class="line">? Options include: </span><br><span class="line">  - 1.29.0</span><br><span class="line">  - 1.28.1</span><br><span class="line">  - 1.27.1</span><br><span class="line">  - 1.26.7</span><br><span class="line"></span><br><span class="line">+ Successfully added account my-k8s-account for provider</span><br><span class="line">  kubernetes.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Choose-Environment"><a href="#Choose-Environment" class="headerlink" title="Choose Environment"></a>Choose Environment</h2><p>选择如何安装 Spinnaker，此处选择 <code>Distributed installation on Kubernetes</code> <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Choose your Environment](https://spinnaker.io/docs/setup/install/environment/)">[4]</span></a></sup></p>
<p>在 Halyard 容器中，执行以下命令，配置 <code>Distributed installation on Kubernetes</code>，其中 <code>--account-name</code> 的值为 <a href="#%E6%B7%BB%E5%8A%A0-kubernetes-%E8%B4%A6%E5%8F%B7">添加 kubernetes 账号</a> 中指定的名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hal config deploy edit --<span class="built_in">type</span> distributed --account-name my-k8s-account</span></span><br><span class="line"></span><br><span class="line">+ Get current deployment</span><br><span class="line">  Success</span><br><span class="line">+ Get the deployment environment</span><br><span class="line">  Success</span><br><span class="line">+ Edit the deployment environment</span><br><span class="line">  Success</span><br><span class="line">Validation in default:</span><br><span class="line">- WARNING You have not yet selected a version of Spinnaker to</span><br><span class="line">  deploy.</span><br><span class="line">? Options include: </span><br><span class="line">  - 1.29.0</span><br><span class="line">  - 1.28.1</span><br><span class="line">  - 1.27.1</span><br><span class="line">  - 1.26.7</span><br><span class="line"></span><br><span class="line">+ Successfully updated your deployment environment.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="External-Storage"><a href="#External-Storage" class="headerlink" title="External Storage"></a>External Storage</h2><p>外部存储用来持久化 Spinnaker 的配置数据 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[External Storage](https://spinnaker.io/docs/setup/install/storage/)">[5]</span></a></sup></p>
<p>在 Halyard 容器中，执行以下命令，配置 AWS S3 连接信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hal config storage s3 edit \</span></span><br><span class="line"><span class="language-bash">    --access-key-id <span class="variable">$YOUR_ACCESS_KEY_ID</span> \</span></span><br><span class="line"><span class="language-bash">    --secret-access-key \</span></span><br><span class="line"><span class="language-bash">    --region <span class="variable">$REGION</span> \</span></span><br><span class="line"><span class="language-bash">    --bucket <span class="variable">$BUCKET</span></span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your AWS Secret Key.: </span><br><span class="line">+ Get current deployment</span><br><span class="line">  Success</span><br><span class="line">+ Get persistent store</span><br><span class="line">  Success</span><br><span class="line">+ Edit persistent store</span><br><span class="line">  Success</span><br><span class="line">Validation in default.persistentStorage:</span><br><span class="line">- WARNING Your deployment will most likely fail until you configure</span><br><span class="line">  and enable a persistent store.</span><br><span class="line"></span><br><span class="line">Validation in default:</span><br><span class="line">- WARNING You have not yet selected a version of Spinnaker to</span><br><span class="line">  deploy.</span><br><span class="line">? Options include: </span><br><span class="line">  - 1.29.0</span><br><span class="line">  - 1.28.1</span><br><span class="line">  - 1.27.1</span><br><span class="line">  - 1.26.7</span><br><span class="line"></span><br><span class="line">+ Successfully edited persistent store &quot;s3&quot;.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在 Halyard 容器中，执行以下命令，配置存储源为 AWS S3</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hal config storage edit --<span class="built_in">type</span> s3</span></span><br><span class="line">+ Get current deployment</span><br><span class="line">  Success</span><br><span class="line">+ Get persistent storage settings</span><br><span class="line">  Success</span><br><span class="line">+ Edit persistent storage settings</span><br><span class="line">  Success</span><br><span class="line">Validation in default:</span><br><span class="line">- WARNING You have not yet selected a version of Spinnaker to</span><br><span class="line">  deploy.</span><br><span class="line">? Options include: </span><br><span class="line">  - 1.29.0</span><br><span class="line">  - 1.28.1</span><br><span class="line">  - 1.27.1</span><br><span class="line">  - 1.26.7</span><br><span class="line"></span><br><span class="line">+ Successfully edited persistent storage.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Deploy-Spinnaker"><a href="#Deploy-Spinnaker" class="headerlink" title="Deploy Spinnaker"></a>Deploy Spinnaker</h2><p>部署 Spinnaker，并连接 Deck <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Deploy Spinnaker and Connect to the UI](https://spinnaker.io/docs/setup/install/deploy/)">[6]</span></a></sup></p>
<h3 id="Deploy-Spinnaker-1"><a href="#Deploy-Spinnaker-1" class="headerlink" title="Deploy Spinnaker"></a>Deploy Spinnaker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看可用的版本</span><br><span class="line">$ hal version list</span><br><span class="line"></span><br><span class="line"># 指定要部署的版本</span><br><span class="line">$ hal config version edit --version 1.29.0</span><br><span class="line"></span><br><span class="line"># 执行部署</span><br><span class="line">$ hal deploy apply</span><br><span class="line"></span><br><span class="line">+ Get current deployment</span><br><span class="line">  Success</span><br><span class="line">+ Prep deployment</span><br><span class="line">  Success</span><br><span class="line">Validation in default.stats:</span><br><span class="line">- INFO Stats are currently ENABLED. Usage statistics are being</span><br><span class="line">  collected. Thank you! These stats inform improvements to the product, and that</span><br><span class="line">  helps the community. To disable, run `hal config stats disable`. To learn more</span><br><span class="line">  about what and how stats data is used, please see</span><br><span class="line">  https://spinnaker.io/docs/community/stay-informed/stats.</span><br><span class="line"></span><br><span class="line">Validation in default.security:</span><br><span class="line">- WARNING Your UI or API domain does not have override base URLs</span><br><span class="line">  set even though your Spinnaker deployment is a Distributed deployment on a</span><br><span class="line">  remote cloud provider. As a result, you will need to open SSH tunnels against</span><br><span class="line">  that deployment to access Spinnaker.</span><br><span class="line">? We recommend that you instead configure an authentication</span><br><span class="line">  mechanism (OAuth2, SAML2, or x509) to make it easier to access Spinnaker</span><br><span class="line">  securely, and then register the intended Domain and IP addresses that your</span><br><span class="line">  publicly facing services will be using.</span><br><span class="line"></span><br><span class="line">+ Preparation complete... deploying Spinnaker</span><br><span class="line">+ Get current deployment</span><br><span class="line">  Success</span><br><span class="line">- Apply deployment</span><br><span class="line">_ Apply deployment</span><br><span class="line">^ Apply deployment</span><br><span class="line">* Apply deployment</span><br><span class="line">_ Apply deployment</span><br><span class="line">+ Apply deployment</span><br><span class="line">  Success</span><br><span class="line">+ Deploy spin-redis</span><br><span class="line">  Success</span><br><span class="line">+ Deploy spin-clouddriver</span><br><span class="line">  Success</span><br><span class="line">+ Deploy spin-front50</span><br><span class="line">  Success</span><br><span class="line">+ Deploy spin-orca</span><br><span class="line">  Success</span><br><span class="line">+ Deploy spin-deck</span><br><span class="line">  Success</span><br><span class="line">+ Deploy spin-echo</span><br><span class="line">  Success</span><br><span class="line">+ Deploy spin-gate</span><br><span class="line">  Success</span><br><span class="line">+ Deploy spin-rosco</span><br><span class="line">  Success</span><br><span class="line">+ Run `hal deploy connect` to connect to Spinnaker.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用 kubernetes 做为 Cloud Provider，选择分布式部署后，会在 kubernetes 集群中创建命名空间：<code>spinnaker</code>，并创建相关的 <code>Deployment</code>，<code>Service</code> 等资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get deployment,services,pods -n spinnaker</span></span><br><span class="line">NAME                               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/spin-clouddriver   1/1     1            1           33m</span><br><span class="line">deployment.apps/spin-deck          1/1     1            1           33m</span><br><span class="line">deployment.apps/spin-echo          1/1     1            1           33m</span><br><span class="line">deployment.apps/spin-front50       1/1     1            1           33m</span><br><span class="line">deployment.apps/spin-gate          1/1     1            1           33m</span><br><span class="line">deployment.apps/spin-orca          1/1     1            1           33m</span><br><span class="line">deployment.apps/spin-redis         1/1     1            1           33m</span><br><span class="line">deployment.apps/spin-rosco         1/1     1            1           33m</span><br><span class="line"></span><br><span class="line">NAME                       TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service/spin-clouddriver   ClusterIP   10.103.217.2     &lt;none&gt;        7002/TCP   33m</span><br><span class="line">service/spin-deck          ClusterIP   10.100.138.37    &lt;none&gt;        9000/TCP   33m</span><br><span class="line">service/spin-echo          ClusterIP   10.109.141.10    &lt;none&gt;        8089/TCP   33m</span><br><span class="line">service/spin-front50       ClusterIP   10.97.63.108     &lt;none&gt;        8080/TCP   33m</span><br><span class="line">service/spin-gate          ClusterIP   10.107.160.202   &lt;none&gt;        8084/TCP   33m</span><br><span class="line">service/spin-orca          ClusterIP   10.101.53.110    &lt;none&gt;        8083/TCP   33m</span><br><span class="line">service/spin-redis         ClusterIP   10.97.51.27      &lt;none&gt;        6379/TCP   33m</span><br><span class="line">service/spin-rosco         ClusterIP   10.96.45.179     &lt;none&gt;        8087/TCP   33m</span><br><span class="line"></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/spin-clouddriver-7b8d55598c-cnzbz   1/1     Running   0          33m</span><br><span class="line">pod/spin-deck-64bb7f4b7-mpvpr           1/1     Running   0          33m</span><br><span class="line">pod/spin-echo-645cdd8749-l2krj          1/1     Running   0          33m</span><br><span class="line">pod/spin-front50-5d84b48775-7j462       1/1     Running   0          33m</span><br><span class="line">pod/spin-gate-64589485b-cxpkh           1/1     Running   0          33m</span><br><span class="line">pod/spin-orca-7f665ccdcb-4cnvg          1/1     Running   0          33m</span><br><span class="line">pod/spin-redis-55b7dd654c-q9d8k         1/1     Running   0          33m</span><br><span class="line">pod/spin-rosco-6458964f46-gsdqc         1/1     Running   0          33m</span><br></pre></td></tr></table></figure>

<h3 id="Connect-to-the-Spinnaker-UI"><a href="#Connect-to-the-Spinnaker-UI" class="headerlink" title="Connect to the Spinnaker UI"></a>Connect to the Spinnaker UI</h3><p>使用 kubernetes 做为 Cloud Provider，<strong>无需执行以下命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hal deploy connect</span><br></pre></td></tr></table></figure>
<p>为了连接 UI，需要在 kubernetes 集群中为 spin-deck 创建相应的 <code>Ingress</code> 资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: spinnaker-deck</span><br><span class="line">  namespace: spinnaker</span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">  - host: deck.my.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: spin-deck</span><br><span class="line">            port:</span><br><span class="line">              number: 9000</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br></pre></td></tr></table></figure>
<p>通过 Ingress 绑定的域名，可以访问到 Spinnaker UI，此时 Web UI 中会无法获取到资源，因为默认的 Gate Endpoint 为 <code>http://localhost:8084</code>，浏览器页面会报错 ： <code>Error fetching applications. Check that your gate endpoint is accessible. Further information on troubleshooting this error is available here</code>。因此需要执行以下命令配置 UI 和 Gate Api 的域名 <sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[I can’t load the Applications screen](https://spinnaker.io/docs/setup/install/faq/#i-cant-load-the-applications-screen)">[7]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hal config security ui edit --override-base-url http://deck.my.com</span><br><span class="line">hal config security api edit --override-base-url http://spin-gate.my.com</span><br></pre></td></tr></table></figure>
<p>执行以下命令，使配置生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hal deploy apply</span><br></pre></td></tr></table></figure>
<p>在 kubernetes 集群中为 spin-gate 创建相应的 <code>Ingress</code> 资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: spinnaker-gate</span><br><span class="line">  namespace: spinnaker</span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">  - host: spin-gate.my.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: spin-gate</span><br><span class="line">            port:</span><br><span class="line">              number: 8084</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br></pre></td></tr></table></figure>
<p>重新访问 Web UI，可以看到正确的内容<br><img src="https://i.csms.tech/img_63.png"></p>
<h1 id="Spinnaker-其他配置"><a href="#Spinnaker-其他配置" class="headerlink" title="Spinnaker 其他配置"></a>Spinnaker 其他配置</h1><h2 id="添加自建的私有-docker-镜像源"><a href="#添加自建的私有-docker-镜像源" class="headerlink" title="添加自建的私有 docker 镜像源"></a>添加自建的私有 docker 镜像源</h2><p>启用 <code>docker-registry</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hal config provider docker-registry <span class="built_in">enable</span></span></span><br><span class="line">+ Get current deployment</span><br><span class="line">  Success</span><br><span class="line">+ Edit the dockerRegistry provider</span><br><span class="line">  Success</span><br><span class="line">Validation in default.provider.dockerRegistry:</span><br><span class="line">- WARNING Provider dockerRegistry is enabled, but no accounts have</span><br><span class="line">  been configured.</span><br><span class="line"></span><br><span class="line">+ Successfully enabled dockerRegistry</span><br></pre></td></tr></table></figure>
<p>配置认证信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hal config provider docker-registry account add my-docker-registry \</span></span><br><span class="line"><span class="language-bash">                                --address http://54.236.1.2:5000 \</span></span><br><span class="line"><span class="language-bash">                                --username <span class="variable">$USER</span> \</span></span><br><span class="line"><span class="language-bash">                                --password <span class="variable">$PASSWD</span></span></span><br><span class="line"></span><br><span class="line">+ Get current deployment</span><br><span class="line">  Success</span><br><span class="line">+ Add the my-docker-registry account</span><br><span class="line">  Success</span><br><span class="line">+ Successfully added account my-docker-registry for provider</span><br><span class="line">  dockerRegistry.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="配置-Jenkins-信息"><a href="#配置-Jenkins-信息" class="headerlink" title="配置 Jenkins 信息"></a>配置 Jenkins 信息</h2><p>启用 Jenkins</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hal config ci jenkins enable</span><br></pre></td></tr></table></figure>
<p>配置 Jenkins 认证信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hal config ci jenkins master add my-jenkins-master-01 \ </span><br><span class="line">                 --address http://34.150.227.175:8080 \ </span><br><span class="line">                 --username admin \ </span><br><span class="line">                 --password 32366490694c4af4</span><br></pre></td></tr></table></figure>
<p>启用 csrf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hal config ci jenkins master edit my-jenkins-master-01 --csrf true</span><br></pre></td></tr></table></figure>

<h2 id="配置-LDAP-认证"><a href="#配置-LDAP-认证" class="headerlink" title="配置 LDAP 认证"></a>配置 LDAP 认证</h2><p>先配置 ldap 服务相关信息，再启用 ldap 认证，否则会报错： <code>! ERROR LDAP url missing.</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hal config security authn ldap edit \</span><br><span class="line">--user-search-base &#x27;dc=example,dc=org&#x27; \</span><br><span class="line">--url &#x27;ldap://10.4.7.12:389&#x27; \</span><br><span class="line">--user-search-filter &#x27;cn=&#123;0&#125;&#x27; \</span><br><span class="line">--manager-dn &#x27;cn=admin,dc=example,dc=org&#x27; \</span><br><span class="line">--manager-password &#x27;admin&#x27;</span><br></pre></td></tr></table></figure>

<p>启用 ldap 认证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hal config security authn ldap enable</span><br></pre></td></tr></table></figure>
<p>重新部署，以使配置生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hal deploy apply</span><br></pre></td></tr></table></figure>

<h2 id="使用-Nginx-反代-Spinnaker"><a href="#使用-Nginx-反代-Spinnaker" class="headerlink" title="使用 Nginx 反代 Spinnaker"></a>使用 Nginx 反代 Spinnaker</h2><p>Spinnaker 部署于 Kubernetes 集群中，为了让集群中的服务不直接接收外部流量，需要使用 Nginx 反代访问 Spinnaker 服务。本示例中 Spinnaker 为配置 https，为 http 服务。使用的 Nginx 配置如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream ingress-nginx-controller-https &#123;</span><br><span class="line">    server 172.31.22.9:443;</span><br><span class="line">    server 172.31.16.4:443;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream ingress-nginx-controller-http &#123;</span><br><span class="line">    server 172.31.22.9:80;</span><br><span class="line">    server 172.31.16.4:80;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用来对 用户 ip 进行映射，以便后面做访问控制</span></span><br><span class="line">map $clientRealIp $k8s_admin_access &#123;</span><br><span class="line">         default false;</span><br><span class="line">         include k8s_admin_access.list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name deck.test.com spin-gate.test.com;</span><br><span class="line">    access_log /home/logs/nginx/access/spinnaker.access.log main;</span><br><span class="line">    error_log /home/logs/nginx/error/spinnaker.error.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">                if ($k8s_admin_access = false) &#123;</span><br><span class="line">                    return 403;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://ingress-nginx-controller-http;     # 此处需要使用 http，不能使用 https</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="Spinnaker-无法自动读取到-Kubernetes-中的命名空间"><a href="#Spinnaker-无法自动读取到-Kubernetes-中的命名空间" class="headerlink" title="Spinnaker 无法自动读取到 Kubernetes 中的命名空间"></a>Spinnaker 无法自动读取到 Kubernetes 中的命名空间</h2><p>登陆 Spinnaker 后，查看 <code>Applications</code> 中的内容，无任何 <code>Applications</code> 显示，手动添加应用后，pipeline 部署失败，返回以下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Exception ( Deploy Manifest )</span><br><span class="line">deployKubernetesManifest.deployKubernetesManifest.deployment.Error reading kind [deployment]. Please check connectivity and access permissions to the cluster</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_108.png"></p>
<p>检查 <code>spin-clouddriver</code> 的日志，日志中显示无法连接到 <code>kube-api-server</code> ，解决 <code>spin-clouddriver</code> 到 <code>kube-api-server</code> 的通信异常，问题解决。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://spinnaker.io/docs/setup/install/">Install and Configure Spinnaker</a></p>
<p><a href="https://spinnaker.io/docs/setup/install/faq/">Halyard FAQ</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://spinnaker.io/docs/setup/install/halyard/#install-halyard-on-docker">Install Halyard on Docker</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://spinnaker.io/docs/setup/install/providers/kubernetes/#you-need-a-kubernetes-cluster-and-its-credentials">You need a Kubernetes cluster and its credentials</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://spinnaker.io/docs/setup/install/providers/kubernetes-v2/#adding-an-account">Adding an account</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://spinnaker.io/docs/setup/install/environment/">Choose your Environment</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://spinnaker.io/docs/setup/install/storage/">External Storage</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://spinnaker.io/docs/setup/install/deploy/">Deploy Spinnaker and Connect to the UI</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://spinnaker.io/docs/setup/install/faq/#i-cant-load-the-applications-screen">I can’t load the Applications screen</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Spinnaker</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP 协议</title>
    <url>/202211251549/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="TCP-协议抓包分析"><a href="#TCP-协议抓包分析" class="headerlink" title="TCP 协议抓包分析"></a>TCP 协议抓包分析</h1><h2 id="TCP-通信过程中-seq-和-ACK-值说明"><a href="#TCP-通信过程中-seq-和-ACK-值说明" class="headerlink" title="TCP 通信过程中 seq 和 ACK 值说明"></a>TCP 通信过程中 seq 和 ACK 值说明</h2><p><img src="https://i.csms.tech/img_96.png"></p>
<ul>
<li><p>TCP 连接通信过程中，client 和 server 端各自维护自己的 <code>seq</code>。后面一个数据包的 <code>seq</code> 是前面一个数据包的 <code>seq</code> 加上前面一个数据包的大小。表示发送的字节位置。 </p>
<p>  假如当前连接中，之前一个包 <code>seq = 100</code>，其发送数据包大小为 0，则当前要发送的数据包的 <code>seq = 0</code></p>
<p>  假如当前连接中，之前一个包 <code>seq = 100</code>，其发送数据包大小为 20，则当前要发送的数据包的 <code>seq = 120</code></p>
</li>
<li><p>TCP 连接通信过程中，client 和 server 端要发送给对方的包的 <code>ACK</code> 的值为：收到的包的 <code>seq</code> + 收到的包的 <code>Len</code>，此值告知发送方，接收方希望接收到的下一个包的序列号。</p>
<p>  假如接收方接收到了 <code>seq = 100</code> ，<code>Len = 0</code> 的包，接收方需要发送的 <code>ACK = 100 + 1</code></p>
<p>  假如接收方接收到了 <code>seq = 100</code> ，<code>Len = 20</code> 的包，接收方需要发送的 <code>ACK = 100 + 20</code></p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://xiaolincoding.com/network/3_tcp/tcp_tcpdump.html#%E6%98%BE%E5%BD%A2-%E4%B8%8D%E5%8F%AF%E8%A7%81-%E7%9A%84%E7%BD%91%E7%BB%9C%E5%8C%85">TCP 实战抓包分析</a></p>
<p><a href="https://www.cnblogs.com/163yun/p/9552368.html">wireshark抓包分析——TCP&#x2F;IP协议</a></p>
]]></content>
      <categories>
        <category>TCPIP</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>VB</title>
    <url>/202403041737/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>根据更新的比特币价格数据和计算，如果每年元旦买入BTC，次年元旦卖出，直到2024年，每年的投资回报率（ROI）如下：</p>
<ul>
<li>2013年买入，2014年卖出的ROI：约  <strong>5390.75%</strong></li>
<li>2014年买入，2015年卖出的ROI：约  <strong>-57.01%</strong></li>
<li>2015年买入，2016年卖出的ROI：约  <strong>37.21%</strong></li>
<li>2016年买入，2017年卖出的ROI：约  <strong>131.78%</strong></li>
<li>2017年买入，2018年卖出的ROI：约  <strong>1243.49%</strong></li>
<li>2018年买入，2019年卖出的ROI：约  <strong>-72.10%</strong></li>
<li>2019年买入，2020年卖出的ROI：约  <strong>92.07%</strong></li>
<li>2020年买入，2021年卖出的ROI：约  <strong>308.63%</strong></li>
<li>2021年买入，2022年卖出的ROI：约  <strong>62.51%</strong></li>
<li>2022年买入，2023年卖出的ROI：约  <strong>-58.27%</strong></li>
<li>2023年买入，2024年卖出的ROI：约  <strong>166.06%</strong></li>
</ul>
]]></content>
      <categories>
        <category>生活日常</category>
        <category>理财</category>
      </categories>
      <tags>
        <tag>生活日常</tag>
      </tags>
  </entry>
  <entry>
    <title>akamai cdn api 使用</title>
    <url>/202302011153/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://techdocs.akamai.com/developer/docs/make-your-first-api-call">Akamai CDN API 说明文档</a>，调用 API 之前需要先根据官方文档说明 <code>Create API Client</code></p>
<h1 id="Python-SDK-使用"><a href="#Python-SDK-使用" class="headerlink" title="Python SDK 使用"></a>Python SDK 使用</h1><p>根据官方文档说明安装 <code>edgegrid-python</code>，并配置 <code>Create API Client Key</code> 信息 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Create a basic API client](https://techdocs.akamai.com/developer/docs/make-your-first-api-call)">[1]</span></a></sup>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install edgegrid-python</span><br></pre></td></tr></table></figure>

<p><a href="https://techdocs.akamai.com/developer/docs/python">Python SDK 使用官方示例</a></p>
<p><a href="https://techdocs.akamai.com/home/page/apis">Akamai API 列表</a></p>
<h2 id="获取账号信息"><a href="#获取账号信息" class="headerlink" title="获取账号信息"></a>获取账号信息</h2><p>大多数 API 使用都需要提供 <code>groupId</code>，<code>accountId</code>，<code>contractIds</code>，通过以下接口获取这些信息 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[List groups](https://techdocs.akamai.com/property-mgr/reference/get-groups)">[2]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import requests</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from akamai.edgegrid import EdgeGridAuth, EdgeRc</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from urllib.parse import urljoin</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; edgerc = EdgeRc(<span class="string">&#x27;~/.edgerc&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; section = <span class="string">&#x27;default&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; baseurl = <span class="string">&#x27;https://%s&#x27;</span> % edgerc.get(section, <span class="string">&#x27;host&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s = requests.Session()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s.auth = EdgeGridAuth.from_edgerc(edgerc, section)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; result = s.get(urljoin(baseurl, <span class="string">&#x27;/papi/v1/groups&#x27;</span>))</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; result.json()</span></span><br><span class="line">&#123;&#x27;accountId&#x27;: &#x27;act_F-AC-488298736&#x27;, &#x27;accountName&#x27;: &#x27;Guangzhou kl Network Technology Co., Ltd&#x27;, &#x27;groups&#x27;: &#123;&#x27;items&#x27;: [&#123;&#x27;groupName&#x27;: &#x27;Guangzhou extreme-G-8HGkt-DSA&#x27;, &#x27;groupId&#x27;: &#x27;grp_186987767&#x27;, &#x27;contractIds&#x27;: [&#x27;ctr_G-3JDoujhh&#x27;]&#125;]&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果 <code>Property</code> 中存在分组，每个分组都有一个独立的 <code>groupId</code></p>
</blockquote>
<span id="more"></span>
<h2 id="获取-CPCode"><a href="#获取-CPCode" class="headerlink" title="获取 CPCode"></a>获取 CPCode</h2><p>通过以下接口及参数获取 CPCode <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[List CP codes](https://techdocs.akamai.com/property-mgr/reference/get-cpcodes)">[3]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import requests</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from akamai.edgegrid import EdgeGridAuth, EdgeRc</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from urllib.parse import urljoin</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; edgerc = EdgeRc(<span class="string">&#x27;~/.edgerc&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; section = <span class="string">&#x27;default&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; baseurl = <span class="string">&#x27;https://%s&#x27;</span> % edgerc.get(section, <span class="string">&#x27;host&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s = requests.Session()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s.auth = EdgeGridAuth.from_edgerc(edgerc, section)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; result = s.get(urljoin(baseurl, <span class="string">&#x27;/papi/v1/cpcodes&#x27;</span>), params=&#123;<span class="string">&#x27;contractId&#x27;</span>: <span class="string">&#x27;ctr_G-ctr_G-3JDoujhh&#x27;</span>, <span class="string">&#x27;groupId&#x27;</span>: <span class="string">&#x27;grp_186987767&#x27;</span>&#125;, headers=&#123;<span class="string">&#x27;PAPI-Use-Prefixes&#x27;</span>: <span class="string">&#x27;True&#x27;</span>&#125;)</span></span><br></pre></td></tr></table></figure>

<h2 id="获取指定-CPCode-的流量信息"><a href="#获取指定-CPCode-的流量信息" class="headerlink" title="获取指定 CPCode 的流量信息"></a>获取指定 CPCode 的流量信息</h2><p>此处主要演示获取指标 <code>edgeBytes</code> 的流量，具体 API 使用方式可参考官方文档 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[bytes-by-cpcode](https://techdocs.akamai.com/reporting/reference/bytes-by-cpcode)">[4]</span></a></sup></p>
<h3 id="查询所有-CPCode-的流量"><a href="#查询所有-CPCode-的流量" class="headerlink" title="查询所有 CPCode 的流量"></a>查询所有 CPCode 的流量</h3><figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import requests</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from akamai.edgegrid import EdgeGridAuth, EdgeRc</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from urllib.parse import urljoin</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; edgerc = EdgeRc(<span class="string">&#x27;~/.edgerc&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; section = <span class="string">&#x27;default&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; baseurl = <span class="string">&#x27;https://%s&#x27;</span> % edgerc.get(section, <span class="string">&#x27;host&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s = requests.Session()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s.auth = EdgeGridAuth.from_edgerc(edgerc, section)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; params = &#123;<span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;2022-12-31T00:00:00Z&#x27;</span>, <span class="string">&#x27;end&#x27;</span>: <span class="string">&#x27;2023-01-01T00:00:00Z&#x27;</span>, <span class="string">&#x27;allObjectIds&#x27;</span>: True, <span class="string">&#x27;metrics&#x27;</span>: <span class="string">&#x27;edgeBytes&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; result = s.get(urljoin(baseurl, <span class="string">&#x27;/reporting-api/v1/reports/bytes-by-cpcode/versions/1/report-data&#x27;</span>), params=params)</span></span><br></pre></td></tr></table></figure>

<h3 id="获取指定-CPCode-的流量信息-1"><a href="#获取指定-CPCode-的流量信息-1" class="headerlink" title="获取指定 CPCode 的流量信息"></a>获取指定 CPCode 的流量信息</h3><figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s = requests.Session()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s.auth = EdgeGridAuth.from_edgerc(edgerc, section)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; params = &#123;<span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;2022-12-01T00:00:00Z&#x27;</span>, <span class="string">&#x27;end&#x27;</span>: <span class="string">&#x27;2023-01-01T00:00:00Z&#x27;</span>, <span class="string">&#x27;objectIds&#x27;</span>: <span class="string">&#x27;1335489&#x27;</span>, <span class="string">&#x27;metrics&#x27;</span>: <span class="string">&#x27;edgeBytes&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; result = s.get(urljoin(baseurl, <span class="string">&#x27;/reporting-api/v1/reports/bytes-by-cpcode/versions/1/report-data&#x27;</span>), params=params)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="获取-property"><a href="#获取-property" class="headerlink" title="获取 property"></a>获取 property</h3><p>要获取 Property 信息，参考代码 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[List properties](https://techdocs.akamai.com/property-mgr/reference/get-properties)">[5]</span></a></sup></p>
<p>要获取指定 Property 信息，参考代码 <sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Get a property](https://techdocs.akamai.com/property-mgr/reference/get-property)">[7]</span></a></sup></p>
<h3 id="获取-Property-的-rule-信息"><a href="#获取-Property-的-rule-信息" class="headerlink" title="获取 Property 的 rule 信息"></a>获取 Property 的 rule 信息</h3><p>参考文档 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Get a property's rule tree](https://techdocs.akamai.com/property-mgr/reference/get-property-version-rules)">[6]</span></a></sup></p>
<h3 id="获取证书信息"><a href="#获取证书信息" class="headerlink" title="获取证书信息"></a>获取证书信息</h3><p><a href="https://techdocs.akamai.com/cps/reference/get-enrollments">API 参考文档</a></p>
<ul>
<li>需要传入 <code>contractId</code> 参数（<em><strong>注意事项: <a href="#%E8%8E%B7%E5%8F%96%E8%B4%A6%E5%8F%B7%E4%BF%A1%E6%81%AF">获取 contractId</a> 返回的 <code>contractId</code> 类似 <code>ctr_G-2PLTYIP</code>，在这里要改成 <code>G-2PLTYIP</code>，即去除前面的 <code>ctr_</code> 部分，否则会报 <code>type=Forbidden, title=Invalid Contract, detail=The current contract does not belong to ACG list., source=Contract ID: CTR_G-2PLTYIP</code> 错误</strong></em>）</li>
<li>以及指定 <code>header</code>。否则会报错： <code>&#123;&#39;type&#39;: &#39;https://akab-lnvqfow3zngi6lr7-3l3nwwj2hnx5xrk5.luna.akamaiapis.net/cps/v2/error-types/missing-accept-header&#39;, &#39;title&#39;: &#39;A valid HTTP Accept header is required.&#39;, &#39;instance&#39;: &#39;https://akab-lnvqfow3zngi6lr7-3l3nwwj2hnx5xrk5.luna.akamaiapis.net/cps/v2/error-types/missing-accept-header?id=039e80fc61084409b4ab2fcf572cc9ce&#39;&#125;</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = s.get(urljoin(baseurl, <span class="string">&#x27;/cps/v2/enrollments&#x27;</span>), </span><br><span class="line">               params = &#123;<span class="string">&#x27;contractId&#x27;</span>: <span class="string">&#x27;G-2PLTYIP&#x27;</span>&#125;, </span><br><span class="line">               headers = &#123;<span class="string">&quot;accept&quot;</span>: <span class="string">&quot;application/vnd.akamai.cps.enrollments.v11+json&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://techdocs.akamai.com/developer/docs/make-your-first-api-call">Create a basic API client</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://techdocs.akamai.com/property-mgr/reference/get-groups">List groups</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://techdocs.akamai.com/property-mgr/reference/get-cpcodes">List CP codes</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://techdocs.akamai.com/reporting/reference/bytes-by-cpcode">bytes-by-cpcode</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://techdocs.akamai.com/property-mgr/reference/get-properties">List properties</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://techdocs.akamai.com/property-mgr/reference/get-property-version-rules">Get a property's rule tree</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://techdocs.akamai.com/property-mgr/reference/get-property">Get a property</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>云平台</category>
        <category>Akamai</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>AlertManager 使用</title>
    <url>/202306141005/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>AlertManager 0.24.0</li>
</ul>
<h1 id="部署配置-AlertManager"><a href="#部署配置-AlertManager" class="headerlink" title="部署配置 AlertManager"></a>部署配置 AlertManager</h1><p>AlertManager 是一个专门用于实现告警的工具，可以实现接收 Prometheus 或其它应用发出的告警信息，并对这些告警信息进行 <strong>分组</strong>、<strong>抑制</strong> 以及 <strong>静默</strong> 等操作，然后通过 <strong>路由</strong> 的方式，根据不同的告警规则配置，分发到不同的告警路由策略中。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Kubernetes 部署告警工具 AlertManager](http://www.mydlq.club/article/123/)">[1]</span></a></sup></p>
<p>AlertManager 常用的功能主要有:</p>
<ul>
<li><strong>抑制</strong> - 抑制是一种机制，指的是当某一告警信息发送后，可以停止由此告警引发的其它告警，避免相同的告警信息重复发送。</li>
<li><strong>静默</strong> - 静默也是一种机制，指的是依据设置的标签，对告警行为进行静默处理。如果 AlertManager 接收到的告警符合静默配置，则 Alertmanager 就不会发送该告警通知。</li>
<li><strong>发送告警</strong> - 支持配置多种告警规则，可以根据不同的路由配置，采用不同的告警方式发送告警通知。</li>
<li><strong>告警分组</strong> - 分组机制可以将详细的告警信息合并成一个通知。在某些情况下，如系统宕机导致大量的告警被同时触发，在这种情况下分组机制可以将这些被触发的告警信息合并为一个告警通知，从而避免一次性发送大量且属于相同问题的告警，导致无法对问题进行快速定位。</li>
</ul>
<h2 id="部署-AlertManager"><a href="#部署-AlertManager" class="headerlink" title="部署 AlertManager"></a>部署 AlertManager</h2><p>本文部署配置基于 <a href="/202212141608/" title="K8S 上安装 Prometheus 并监控 K8S 集群">K8S 上安装 Prometheus 并监控 K8S 集群</a></p>
<p>在名为 <code>prometheus-server-conf</code> 的 <code>ConfigMap</code> 中为 AlertManager 创建配置文件 <code>alertmanager.yml</code>，并将其挂载到 AlertManager 容器中</p>
<figure class="highlight shell"><figcaption><span>alertmanager.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line"></span><br><span class="line">route:</span><br><span class="line">  group_by: [&#x27;alertname&#x27;]</span><br><span class="line">  group_wait: 10s</span><br><span class="line">  group_interval: 10s</span><br><span class="line">  repeat_interval: 5m</span><br><span class="line">  receiver: &#x27;web.hook&#x27;</span><br><span class="line">receivers:</span><br><span class="line">- name: &#x27;web.hook&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &#x27;http://localhost:8080/alert_manager_webhook&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line">inhibit_rules:</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: &#x27;critical&#x27;</span><br><span class="line">    target_match:</span><br><span class="line">      severity: &#x27;warning&#x27;</span><br><span class="line">    equal: [&#x27;alertname&#x27;, &#x27;dev&#x27;, &#x27;instance&#x27;]</span><br></pre></td></tr></table></figure>

<p>使用为 Prometheus 创建的 PVC 作为 AlertManager 的持久存储，参考以下配置部署 AlertManager</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-pod</span><br><span class="line">  namespace: prometheus</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus-server</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: prometheus-server</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus-server</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: prometheus</span><br><span class="line">          image: prom/prometheus</span><br><span class="line">          args:</span><br><span class="line">            - &quot;--storage.tsdb.retention.time=12h&quot;</span><br><span class="line">            - &quot;--config.file=/etc/prometheus/prometheus.yml&quot;</span><br><span class="line">            - &quot;--storage.tsdb.path=/prometheus/&quot;</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 9090</span><br><span class="line">          resources:</span><br><span class="line">            requests:</span><br><span class="line">              cpu: 500m</span><br><span class="line">              memory: 500M</span><br><span class="line">            limits:</span><br><span class="line">              cpu: 1</span><br><span class="line">              memory: 1Gi</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: prometheus-config-volume</span><br><span class="line">              mountPath: /etc/prometheus/</span><br><span class="line">            - name: prometheus-storage-volume</span><br><span class="line">              mountPath: /prometheus/</span><br><span class="line">              subPath: prometheus</span><br><span class="line">        - name: grafana</span><br><span class="line">          image: grafana/grafana</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 3000</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: prometheus-storage-volume</span><br><span class="line">              mountPath: /var/lib/grafana</span><br><span class="line">              subPath: grafana</span><br><span class="line">        - image: prom/alertmanager:v0.24.0</span><br><span class="line">          name: alert-manager</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 9093</span><br><span class="line">          args:</span><br><span class="line">            - &quot;--config.file=/etc/alertmanager/alertmanager.yml&quot;</span><br><span class="line">            - &quot;--web.external-url=http://alert-manager.example.com/&quot;</span><br><span class="line">            - &#x27;--cluster.advertise-address=0.0.0.0:9093&#x27;</span><br><span class="line">            - &quot;--storage.path=/alertmanager&quot;</span><br><span class="line">          resources:</span><br><span class="line">            limits:</span><br><span class="line">              cpu: 1000m</span><br><span class="line">              memory: 512Mi</span><br><span class="line">            requests:</span><br><span class="line">              cpu: 1000m</span><br><span class="line">              memory: 512Mi</span><br><span class="line">          readinessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /-/ready</span><br><span class="line">              port: 9093</span><br><span class="line">            initialDelaySeconds: 5</span><br><span class="line">            timeoutSeconds: 10</span><br><span class="line">          livenessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /-/healthy</span><br><span class="line">              port: 9093</span><br><span class="line">            initialDelaySeconds: 30</span><br><span class="line">            timeoutSeconds: 30</span><br><span class="line">          volumeMounts:</span><br><span class="line">          - name: prometheus-storage-volume</span><br><span class="line">            mountPath: /alertmanager </span><br><span class="line">            subPath: alertmanager</span><br><span class="line">          - name: prometheus-config-volume</span><br><span class="line">            mountPath: /etc/alertmanager</span><br><span class="line">      volumes:</span><br><span class="line">        - name: prometheus-config-volume</span><br><span class="line">          configMap:</span><br><span class="line">            defaultMode: 420</span><br><span class="line">            name: prometheus-server-conf</span><br><span class="line">  </span><br><span class="line">        - name: prometheus-storage-volume</span><br><span class="line">          persistentVolumeClaim:</span><br><span class="line">            claimName: prometheus-pvc</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-service</span><br><span class="line">  namespace: prometheus</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - name: prometheus-port</span><br><span class="line">      port: 8090</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: 9090</span><br><span class="line">    - name: grafana-port</span><br><span class="line">      port: 3000</span><br><span class="line">      targetPort: 3000</span><br><span class="line">    - name: alert-manager-port</span><br><span class="line">      port: 9093</span><br><span class="line">      targetPort: 9093</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus-server</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-ui</span><br><span class="line">  namespace: prometheus</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">  - host: prometheus.example.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: prometheus-service</span><br><span class="line">            port: </span><br><span class="line">              number: 8090</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line">  - host: grafana.example.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: prometheus-service</span><br><span class="line">            port:</span><br><span class="line">              number: 3000</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line">  - host: alert-manager.example.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: prometheus-service</span><br><span class="line">            port:</span><br><span class="line">              number: 9093</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br></pre></td></tr></table></figure>
<p>部署成功后，从 AlertManager 的域名访问，可以看到 AlertManager 的 web UI<br><img src="https://i.csms.tech/img_162.png"></p>
<span id="more"></span>

<h2 id="配置-Prometheus-关联-AlertManager"><a href="#配置-Prometheus-关联-AlertManager" class="headerlink" title="配置 Prometheus 关联 AlertManager"></a>配置 Prometheus 关联 AlertManager</h2><p>要使 Prometheus 能够通过 AlertManager 发送告警信息，需要在 Prometheus 中配置 AlertManager 相关的配置信息，Prometheus 涉及 AlertManager 的主要配置如下</p>
<figure class="highlight shell"><figcaption><span>prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: [&#x27;localhost:9093&#x27;]</span><br></pre></td></tr></table></figure>

<p>配置后，重启 Prometheus 使配置生效。可以从 AlertManager 的 UI 中查看到 Prometheus 中的告警信息<br><img src="https://i.csms.tech/img_163.png"></p>
<h1 id="AlertManager-配置概述"><a href="#AlertManager-配置概述" class="headerlink" title="AlertManager 配置概述"></a>AlertManager 配置概述</h1><p>Alertmanager 主要负责对 Prometheus 产生的告警进行统一处理，因此在 Alertmanager 配置中一般会包含以下几个主要部分： <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Alertmanager 配置概述](https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/alert-manager-config)
">[2]</span></a></sup></p>
<ul>
<li><strong>全局配置（<code>global</code>）</strong> - 用于定义一些全局的公共参数，如全局的 SMTP 配置，Slack 配置等内容；</li>
<li><strong>模板（<code>templates</code>）</strong> - 用于定义告警通知时的模板，如 HTML 模板，邮件模板等；</li>
<li><strong>告警路由（<code>route</code>）</strong> - 根据标签匹配，确定当前告警应该如何处理；</li>
<li><strong>接收人（<code>receivers</code>）</strong> - 接收人是一个抽象的概念，它可以是一个邮箱也可以是微信，Slack 或者 Webhook 等，接收人一般配合告警路由使用；</li>
<li><strong>抑制规则（<code>inhibit_rules</code>）</strong> - 合理设置抑制规则可以减少垃圾告警的产生</li>
</ul>
<p>其完整配置格式如下</p>
<figure class="highlight shell"><figcaption><span>alertmanager.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  [ resolve_timeout: &lt;duration&gt; | default = 5m ]</span><br><span class="line">  [ smtp_from: &lt;tmpl_string&gt; ] </span><br><span class="line">  [ smtp_smarthost: &lt;string&gt; ] </span><br><span class="line">  [ smtp_hello: &lt;string&gt; | default = &quot;localhost&quot; ]</span><br><span class="line">  [ smtp_auth_username: &lt;string&gt; ]</span><br><span class="line">  [ smtp_auth_password: &lt;secret&gt; ]</span><br><span class="line">  [ smtp_auth_identity: &lt;string&gt; ]</span><br><span class="line">  [ smtp_auth_secret: &lt;secret&gt; ]</span><br><span class="line">  [ smtp_require_tls: &lt;bool&gt; | default = true ]</span><br><span class="line">  [ slack_api_url: &lt;secret&gt; ]</span><br><span class="line">  [ victorops_api_key: &lt;secret&gt; ]</span><br><span class="line">  [ victorops_api_url: &lt;string&gt; | default = &quot;https://alert.victorops.com/integrations/generic/20131114/alert/&quot; ]</span><br><span class="line">  [ pagerduty_url: &lt;string&gt; | default = &quot;https://events.pagerduty.com/v2/enqueue&quot; ]</span><br><span class="line">  [ opsgenie_api_key: &lt;secret&gt; ]</span><br><span class="line">  [ opsgenie_api_url: &lt;string&gt; | default = &quot;https://api.opsgenie.com/&quot; ]</span><br><span class="line">  [ hipchat_api_url: &lt;string&gt; | default = &quot;https://api.hipchat.com/&quot; ]</span><br><span class="line">  [ hipchat_auth_token: &lt;secret&gt; ]</span><br><span class="line">  [ wechat_api_url: &lt;string&gt; | default = &quot;https://qyapi.weixin.qq.com/cgi-bin/&quot; ]</span><br><span class="line">  [ wechat_api_secret: &lt;secret&gt; ]</span><br><span class="line">  [ wechat_api_corp_id: &lt;string&gt; ]</span><br><span class="line">  [ http_config: &lt;http_config&gt; ]</span><br><span class="line"></span><br><span class="line">templates:</span><br><span class="line">  [ - &lt;filepath&gt; ... ]</span><br><span class="line"></span><br><span class="line">route: &lt;route&gt;</span><br><span class="line"></span><br><span class="line">receivers:</span><br><span class="line">  - &lt;receiver&gt; ...</span><br><span class="line"></span><br><span class="line">inhibit_rules:</span><br><span class="line">  [ - &lt;inhibit_rule&gt; ... ]</span><br></pre></td></tr></table></figure>
<h2 id="global-常用参数说明"><a href="#global-常用参数说明" class="headerlink" title="global 常用参数说明"></a>global 常用参数说明</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>resolve_timeout</code></td>
<td>当 AlertManager 持续多久未接收到告警后就标记告警状态为 <code>resolved</code><br/>默认为 5m</td>
<td></td>
</tr>
</tbody></table>
<h2 id="route-常用参数说明"><a href="#route-常用参数说明" class="headerlink" title="route 常用参数说明"></a>route 常用参数说明</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">route:</span><br><span class="line">      group_by: [<span class="string">&#x27;alertname&#x27;</span>, <span class="string">&#x27;cluster&#x27;</span>]</span><br><span class="line">      group_wait: 30s</span><br><span class="line"></span><br><span class="line">      group_interval: 30s</span><br><span class="line"></span><br><span class="line">      repeat_interval: 1h</span><br><span class="line"></span><br><span class="line">      receiver: default</span><br><span class="line"></span><br><span class="line">      routes:</span><br><span class="line">      - receiver: email</span><br><span class="line">        group_wait: 10s</span><br><span class="line">        <span class="keyword">match</span>:</span><br><span class="line">          team: node</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>group_by</code></td>
<td>接收到报警信息后按照标签重新分组的标签</td>
<td></td>
</tr>
<tr>
<td><code>repeat_interval: 1h</code></td>
<td>发送一个告警后多久再继续发送告警消息，默认 <code>4h</code></td>
<td></td>
</tr>
<tr>
<td><code>group_wait: 30s</code></td>
<td>当一个新的报警分组被创建后，需要等待至少 group_wait 时间来初始化通知，这种方式可以确保有足够的时间为同一分组获取多个警报，然后一起触发这个报警信息</td>
<td></td>
</tr>
<tr>
<td><code>group_interval: 30s</code></td>
<td>相同的 group 之间发送告警通知的时间间隔</td>
<td></td>
</tr>
<tr>
<td><code>receiver: default</code></td>
<td>默认的receiver：如果一个报警没有被一个route匹配，则发送给默认的接收器</td>
<td></td>
</tr>
<tr>
<td><code>routes</code></td>
<td>配置子路由，子路由会继承所有 <code>route</code> 中的配置 ，并且可以在每个子路由上进行覆盖。<br/>告警的路由选择由 <code>match</code> 指令计算</td>
<td></td>
</tr>
</tbody></table>
<h2 id="receivers-常用参数说明"><a href="#receivers-常用参数说明" class="headerlink" title="receivers 常用参数说明"></a>receivers 常用参数说明</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">receivers:</span><br><span class="line">- name: <span class="string">&#x27;web.hook&#x27;</span></span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: <span class="string">&#x27;http://172.31.2.6:65535/alert_manager_webhook&#x27;</span></span><br><span class="line">    send_resolved: true</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>send_resolved: true   </code></td>
<td>接受告警恢复的通知</td>
<td></td>
</tr>
</tbody></table>
<h2 id="AlertManager-配置示例"><a href="#AlertManager-配置示例" class="headerlink" title="AlertManager 配置示例"></a>AlertManager 配置示例</h2><p>本示例使用以下 配置</p>
<figure class="highlight shell"><figcaption><span>alertmanager.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line"></span><br><span class="line">route:</span><br><span class="line">  group_by: [&#x27;alertname&#x27;]</span><br><span class="line">  group_wait: 10s</span><br><span class="line">  group_interval: 10s</span><br><span class="line">  repeat_interval: 5m</span><br><span class="line">  receiver: &#x27;web.hook&#x27;</span><br><span class="line">receivers:</span><br><span class="line">- name: &#x27;web.hook&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &#x27;http://localhost:8080/alert_manager_webhook&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line">inhibit_rules:</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: &#x27;critical&#x27;</span><br><span class="line">    target_match:</span><br><span class="line">      severity: &#x27;warning&#x27;</span><br><span class="line">    equal: [&#x27;alertname&#x27;, &#x27;dev&#x27;, &#x27;instance&#x27;]</span><br></pre></td></tr></table></figure>

<p>webhook 代码使用 <a href="/202306011739/" title="Django 视图函数实现转发告警到 Telegram">Django 视图函数实现转发告警到 Telegram</a> ，主体代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> telegram</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">alert_message_template = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">报警项目: %s</span></span><br><span class="line"><span class="string">报警摘要：%s</span></span><br><span class="line"><span class="string">报警状态：%s</span></span><br><span class="line"><span class="string">报警内容：%s</span></span><br><span class="line"><span class="string">触发时间：%s</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">tg_chatgroup_id = -<span class="number">992711111</span></span><br><span class="line">tg_bot_token = <span class="string">&#x27;yEXcs2I&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alert_manager_webhook</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 从 AlertManager 接收回调告警数据，并将其转发到第三方 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    post_data = <span class="built_in">eval</span>(request.body)</span><br><span class="line">    <span class="built_in">print</span>(post_data)</span><br><span class="line">    status = post_data[<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> alert <span class="keyword">in</span> post_data[<span class="string">&#x27;alerts&#x27;</span>]:</span><br><span class="line">        alert_labels = alert[<span class="string">&#x27;labels&#x27;</span>]</span><br><span class="line">        alert_name = alert_labels[<span class="string">&#x27;alertname&#x27;</span>]</span><br><span class="line">        alert_job = alert_labels[<span class="string">&#x27;job&#x27;</span>]</span><br><span class="line">        alert_instance = alert_labels[<span class="string">&#x27;instance&#x27;</span>]</span><br><span class="line">        alert_status = alert[<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">        alert_startAs = alert[<span class="string">&#x27;startsAt&#x27;</span>]</span><br><span class="line">        alert_annotations = alert[<span class="string">&#x27;annotations&#x27;</span>]</span><br><span class="line">        alert_summary = alert_annotations[<span class="string">&#x27;summary&#x27;</span>]</span><br><span class="line">        alert_description = alert_annotations[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        alert_project = <span class="string">&#x27;%s-%s-%s&#x27;</span> %(alert_job, alert_name, alert_instance)</span><br><span class="line">        send_message_to_tg(chat_id=tg_chatgroup_id, text=alert_message_template %(alert_project, alert_summary, alert_status, alert_description, alert_startAs))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message_to_tg</span>(<span class="params">chat_id: <span class="built_in">int</span>, text: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 发送消息到 tg&#x27;&#x27;&#x27;</span></span><br><span class="line">    bot = telegram.Bot(token=tg_bot_token)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_telegram_message</span>():</span><br><span class="line">        response = <span class="keyword">await</span> bot.send_message(chat_id=chat_id, text=text)</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">    <span class="comment"># loop = asyncio.get_event_loop()</span></span><br><span class="line">    <span class="comment"># loop.run_until_complete(send_telegram_message()) </span></span><br><span class="line">    asyncio.run(send_telegram_message())</span><br></pre></td></tr></table></figure>

<h1 id="常用配置示例"><a href="#常用配置示例" class="headerlink" title="常用配置示例"></a>常用配置示例</h1><h2 id="配置告警静默"><a href="#配置告警静默" class="headerlink" title="配置告警静默"></a>配置告警静默</h2><p>有时候不需要发送告警消息，比如已经知道出现问题，正在解决过程中，此时不需要重复不断的发送告警消息，此时就可以使用 Alertmanager 的 <strong>告警静默(Silence)</strong> 功能暂时不发送告警消息</p>
<ol>
<li>在 Alertmanager 的 UI 界面中，选择 <code>Silences</code> 页面，点击 <code>New Silence</code>，并根据标签选择要配置 <strong>静默(Silence)</strong> 的告警<br> <img src="https://i.csms.tech/img_187.png"></li>
<li>配置告警静默的时常、标签选择要静默的告警，填写完必要信息后点击 <code>Create</code>，即可创建一条静默规则，在此静默规则配置的时间周期内，符合标签选择器的告警将不会再发送告警信息，直到过了静默期。<br> <img src="https://i.csms.tech/img_188.png"></li>
</ol>
<p>除了上述自定义标签选择器的方法外，还可以针对特定的告警(实例)内容配置静默，而不是向上面的示例中针对整个告警名称配置静默，要静默特定的告警，可以在 Alertmanager 的 <code>Alerts</code> 页面中特定告警的旁边点击 <strong>Silence</strong>，会自动跳转到 <code>Silences</code> 页面，针对此条告警的标签配置一条静默规则。<br><img src="https://i.csms.tech/img_189.png"></p>
<p><img src="https://i.csms.tech/img_190.png"></p>
<p>按照上述方法针对特定的告警(实例)配置静默规则后，此静默规则只会对此特点的告警(实例)生效，不会影响告警下面其他实例的告警。</p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.mydlq.club/article/123/">Kubernetes 部署告警工具 AlertManager</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/alert-manager-config">Alertmanager 配置概述</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>aliyun 相关配置</title>
    <url>/202305101732/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="cmd-工具"><a href="#cmd-工具" class="headerlink" title="cmd 工具"></a>cmd 工具</h1><h2 id="ossutil-工具"><a href="#ossutil-工具" class="headerlink" title="ossutil 工具"></a>ossutil 工具</h2><p><a href="https://help.aliyun.com/document_detail/44075.html?spm=a2c4g.120052.0.0.3b587786PQJ64i">阿里云云存储 OSS 相关工具汇总</a></p>
<p><a href="https://help.aliyun.com/document_detail/50452.htm?spm=a2c4g.44075.0.0.20d17d73gZwhGF#concept-cnr-3d4-vdb">ossutil 概述、安装、配置、常用命令</a></p>
<h3 id="列出-oss-中的所有对象"><a href="#列出-oss-中的所有对象" class="headerlink" title="列出 oss 中的所有对象"></a>列出 oss 中的所有对象</h3><p>命令格式 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[列举账号级别下的资源](https://help.aliyun.com/document_detail/120052.htm?spm=a2c4g.50452.0.0.70267a47ABgZAh#concept-303804)
">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ossutil64 ls oss://bucketname[/prefix] [-s] [-d] [--limited-num] [--marker] [--include] [--exclude]  [--version-id-marker] [--all-versions]</span><br></pre></td></tr></table></figure>

<h3 id="查看桶中资源总数及总的存储大小"><a href="#查看桶中资源总数及总的存储大小" class="headerlink" title="查看桶中资源总数及总的存储大小"></a>查看桶中资源总数及总的存储大小</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ossutil64 <span class="built_in">du</span> oss://test-bucket</span></span><br><span class="line">object count:417000     object sum size:73556695567</span><br></pre></td></tr></table></figure>

<h1 id="CDN-加速域名配置缓存共享"><a href="#CDN-加速域名配置缓存共享" class="headerlink" title="CDN 加速域名配置缓存共享"></a>CDN 加速域名配置缓存共享</h1><p><a href="https://s.csms.tech/file/dogjois.pdf">CDN 加速域名配置缓存共享参考文档</a></p>
<h2 id="CDN-加速域名配置缓存共享验证方法"><a href="#CDN-加速域名配置缓存共享验证方法" class="headerlink" title="CDN 加速域名配置缓存共享验证方法"></a>CDN 加速域名配置缓存共享验证方法</h2><p>比如 A 域名使用 B 域名的共享缓存，测试的时候先访问一条 B 域名中的新资源，使用 B 域名查看对应的缓存状态响应头，第一次访问应该是 <code>X-Cache: MISS</code>，重新访问一次，应该变成 <code>X-Cache: HIT</code>。接下来使用 A 域名访问，如果首次访问结果即为 <code>HIT</code>，说明共享缓存配置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v -I B/test.png</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: B</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 200 OK</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">&lt; Server: Tengine</span><br><span class="line">Server: Tengine</span><br><span class="line">&lt; Content-Type: binary/octet-stream</span><br><span class="line">Content-Type: binary/octet-stream</span><br><span class="line">...</span><br><span class="line">&lt; X-Cache: MISS TCP_MISS dirn:-2:-2</span><br><span class="line">X-Cache: MISS TCP_MISS dirn:-2:-2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v -I B/test.png</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: B</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 200 OK</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">&lt; Server: Tengine</span><br><span class="line">Server: Tengine</span><br><span class="line">&lt; Content-Type: binary/octet-stream</span><br><span class="line">Content-Type: binary/octet-stream</span><br><span class="line">...</span><br><span class="line">&lt; X-Cache: HIT TCP_MISS dirn:-2:-2</span><br><span class="line">X-Cache: HIT TCP_MISS dirn:-2:-2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v -I A/test.png</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: B</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 200 OK</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">&lt; Server: Tengine</span><br><span class="line">Server: Tengine</span><br><span class="line">&lt; Content-Type: binary/octet-stream</span><br><span class="line">Content-Type: binary/octet-stream</span><br><span class="line">...</span><br><span class="line">&lt; X-Cache: HIT TCP_MISS dirn:-2:-2</span><br><span class="line">X-Cache: HIT TCP_MISS dirn:-2:-2</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h1 id="ossfs-使用"><a href="#ossfs-使用" class="headerlink" title="ossfs 使用"></a>ossfs 使用</h1><p>使用阿里云的 ossfs 工具，可以将 OSS 云存储桶使用基于 FUSE 的形式挂载到本地服务器。</p>
<p><a href="https://github.com/aliyun/ossfs">ossfs 安装使用官方文档</a></p>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="fuse-device-not-found-try-‘modprobe-fuse’-first"><a href="#fuse-device-not-found-try-‘modprobe-fuse’-first" class="headerlink" title="fuse: device not found, try ‘modprobe fuse’ first"></a>fuse: device not found, try ‘modprobe fuse’ first</h3><p>需要先在系统安装 <code>fuse</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install fuse</span><br></pre></td></tr></table></figure>


<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://help.aliyun.com/document_detail/120052.htm?spm=a2c4g.50452.0.0.70267a47ABgZAh#concept-303804">列举账号级别下的资源</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://help.aliyun.com/document_detail/31837.html">OSS Region和Endpoint对照表</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>云平台</category>
        <category>Aliyun</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>Alpine linux apk 命令使用</title>
    <url>/202210201436/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="更新索引"><a href="#更新索引" class="headerlink" title="更新索引"></a>更新索引</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apk update</span></span><br><span class="line"></span><br><span class="line">fetch https://dl-cdn.alpinelinux.org/alpine/v3.14/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch https://dl-cdn.alpinelinux.org/alpine/v3.14/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://nl.alpinelinux.org/alpine/edge/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://nl.alpinelinux.org/alpine/edge/testing/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://nl.alpinelinux.org/alpine/edge/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">v3.14.8-65-g0f3285f2cf [https://dl-cdn.alpinelinux.org/alpine/v3.14/main]</span><br><span class="line">v3.14.8-66-ge9853dea68 [https://dl-cdn.alpinelinux.org/alpine/v3.14/community]</span><br><span class="line">v20220809-6223-gb7f2956912 [http://nl.alpinelinux.org/alpine/edge/main]</span><br><span class="line">v20220809-6223-gb7f2956912 [http://nl.alpinelinux.org/alpine/edge/testing]</span><br><span class="line">v20220809-6223-gb7f2956912 [http://nl.alpinelinux.org/alpine/edge/community]</span><br><span class="line">OK: 38705 distinct packages available</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从远程镜像源中更新本地镜像源索引，<code>update</code> 命令会从各个镜像源列表下载 <code>APKINDEX.tar.gz</code> 并存储到本地缓存，一般在 <code>/var/cache/apk/</code> (Alpine 在该目录下)</p>
<span id="more"></span>

<h2 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apk add vim openssh</span><br><span class="line"></span><br><span class="line">apk add --no-cache mysql-client</span><br><span class="line"></span><br><span class="line">apk add docker --update-cache \</span><br><span class="line">           --repository http://mirrors.ustc.edu.cn/alpine/v3.4/main/ --allow-untrusted</span><br></pre></td></tr></table></figure>

<p>安装指定版本软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apk add asterisk=1.6.0.21-r0</span><br><span class="line"></span><br><span class="line">apk add &#x27;asterisk&lt;1.6.1&#x27;</span><br><span class="line"></span><br><span class="line">apk add &#x27;asterisk&gt;1.6.1</span><br></pre></td></tr></table></figure>

<h2 id="卸载软件包"><a href="#卸载软件包" class="headerlink" title="卸载软件包"></a>卸载软件包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk del openssh openntp vim</span><br></pre></td></tr></table></figure>

<h2 id="搜索软件包"><a href="#搜索软件包" class="headerlink" title="搜索软件包"></a>搜索软件包</h2><p>搜索所有可用软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apk search</span><br><span class="line">apk search -v</span><br></pre></td></tr></table></figure>
<p>通过软件包名称搜索</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apk search -v &#x27;acf*&#x27;</span><br></pre></td></tr></table></figure>
<p>通过描述文件查找特定的软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apk search -v -d &#x27;docker&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="查看包信息"><a href="#查看包信息" class="headerlink" title="查看包信息"></a>查看包信息</h2><p>列出所有已安装的软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apk info </span><br></pre></td></tr></table></figure>
<p>显示完整的软件包信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apk info -a zlib</span><br></pre></td></tr></table></figure>
<p>显示指定文件属于的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apk info --who-owns /sbin/lbu</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>Alpine</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Alpine</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible playbooks 使用介绍</title>
    <url>/202405231459/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>ansible-core 2.16</li>
<li>Docker image python:3.12.3</li>
</ul>
<a href="/202308311109/" title="Ansible 安装部署参考">Ansible 安装部署参考</a>  

<a href="/202405241042/" title="Ansible templates 使用介绍">Ansible templates 使用介绍</a>  

<h1 id="Ansible-Playbook-语法"><a href="#Ansible-Playbook-语法" class="headerlink" title="Ansible Playbook 语法"></a>Ansible Playbook 语法</h1><p>Playbooks 使用 YAML 语法定义（描述）。一个 <code>playbook</code> 由一个或多个 <code>play</code> 依序组成。每个 <code>play</code> 运行一个或多个 <code>tasks</code>，每个 <code>task</code> 也成为一个 <code>module</code></p>
<p>Ansible playbook 示例：</p>
<figure class="highlight shell"><figcaption><span>playbook.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- name: Update web servers</span><br><span class="line">  hosts: webservers</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">  - name: Ensure apache is at the latest version</span><br><span class="line">    ansible.builtin.yum:</span><br><span class="line">      name: httpd</span><br><span class="line">      state: latest</span><br><span class="line"></span><br><span class="line">  - name: Write the apache config file</span><br><span class="line">    ansible.builtin.template:</span><br><span class="line">      src: /srv/httpd.j2</span><br><span class="line">      dest: /etc/httpd.conf</span><br><span class="line"></span><br><span class="line">- name: Update db servers</span><br><span class="line">  hosts: databases</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:</span><br><span class="line">    port: 8080</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">  - name: Ensure postgresql is at the latest version</span><br><span class="line">    ansible.builtin.yum:</span><br><span class="line">      name: postgresql</span><br><span class="line">      state: latest</span><br><span class="line"></span><br><span class="line">  - name: Ensure that postgresql is started</span><br><span class="line">    ansible.builtin.service:</span><br><span class="line">      name: postgresql</span><br><span class="line">      state: started</span><br><span class="line">      </span><br><span class="line">---</span><br><span class="line">- name: Install multiple packages</span><br><span class="line">  hosts: webservers</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Install packages</span><br><span class="line">      apt:</span><br><span class="line">        name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">        state: present</span><br><span class="line">      loop:</span><br><span class="line">        - nginx</span><br><span class="line">        - git</span><br><span class="line">        - curl      </span><br></pre></td></tr></table></figure>

<p>一个 Ansible playbook 由一个或多个 <code>plays</code> 组成，每个 <code>play</code> 包含以下部分：</p>
<ul>
<li><code>name</code> : 描述性的名称</li>
<li><code>hosts</code> : 指定目标主机</li>
<li><code>become</code> : 提升权限（默认是使用 <code>sudo</code> 提升到 <code>root</code> 用户）</li>
<li><code>remote_user</code> : 用于连接到远程主机的账户。(<strong>如果 Inventory 中定义了远程连接的用户，会覆盖此处的配置</strong>)</li>
<li><code>tasks</code> : 要执行的一系列任务列表</li>
<li><code>vars</code> : 用于定义变量，便于管理和重用</li>
<li><code>gather_facts</code> : 收集 <code>Facts</code>， 默认值为 <code>yes</code></li>
</ul>
<p><code>tasks</code> 是一个任务列表，每个任务执行特定的操作。任务包含以下元素：</p>
<ul>
<li><code>name</code> : 描述任务的目的。</li>
<li><code>module_name</code> : Ansible 模块名称，如 <code>apt</code>、<code>service</code> 等。</li>
<li><code>module_options</code> : 模块的参数，以键值对的形式提供。</li>
<li><code>when</code> : 条件语句，控制任务是否执行。</li>
<li><code>loop</code> : 循环执行任务</li>
</ul>
<p>执行以下命令运行 <code>playbook.yml</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook playbook.yml -f 10</span><br></pre></td></tr></table></figure>

<p>常用选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-f</code><br/><code>--forks</code></td>
<td>指定并发执行的数量，默认为 5</td>
<td></td>
</tr>
<tr>
<td><code>-v</code><br/><code>--verbose</code> <br/><code>-vvvvvv</code></td>
<td>打印 debug 信息，详细程度从 <code>-v</code> 到 <code>-vvvvvv</code></td>
<td></td>
</tr>
<tr>
<td><code>-C</code><br/><code>--check</code></td>
<td><code>Check mode</code>，不执行任何实际操作，而是对要执行的操作进行验证</td>
<td></td>
</tr>
<tr>
<td><code>-D</code><br/><code>--diff</code></td>
<td>- <strong>只使用 <code>--diff</code> 会执行 play 定义的实际操作</strong>，并对所有受影响的文件或者模板显示其变更前后的具体差异<br/>- <strong>和 <code>--check</code> 一起使用，不会执行 play 定义的实际操作，只显示变更前后的差异</strong>，可以在实际执行前，调试&#x2F;预览将要进行的变更，防止意外配置变更或文件修改<br/>主要用于文件或者模板的变更，对于其他类型的任务（如包安装、服务管理、修改主机名等），不会显示具体的差异（**配合 <code>--check</code> 使用时，结果会显示为 <code>skipping</code>，实际执行时结果为 <code>changed</code>**）。</td>
<td></td>
</tr>
<tr>
<td><code>--list-hosts</code></td>
<td>不执行任何实际操作，只列出符合 <code>pattern</code> 的目标主机</td>
<td></td>
</tr>
<tr>
<td><code>--list-tasks</code></td>
<td>不执行任何实际操作，只列出将要执行的 <code>task</code></td>
<td></td>
</tr>
<tr>
<td><code>--syntax-check</code></td>
<td>不执行任何实际操作，只检查 playbook 文件是否有语法错误</td>
<td></td>
</tr>
</tbody></table>
<h2 id="when-语句"><a href="#when-语句" class="headerlink" title="when 语句"></a>when 语句</h2><p>在 Ansible playbook 中，<code>when</code> 关键字用于条件执行任务。它允许你根据特定的条件来决定是否执行某个任务。这个功能非常强大，可以帮助你在不同的主机、不同的环境或不同的配置下灵活地执行任务。</p>
<p><code>when</code> 表达式基于 Jinja2 模板语言，其中的变量主要来自： <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Where to set variables](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html#where-to-set-variables)">[1]</span></a></sup></p>
<ul>
<li><code>inventory</code> 定义的 <a href="https://csms.tech/202308311109/#变量">主机变量或者组变量</a></li>
<li>目标主机的 <code>facts</code> </li>
<li>Playbook 中定义的变量</li>
<li>Playbook 中使用 <code>register</code> 注册的变量 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Registering variables](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html#registering-variables)">[3]</span></a></sup></li>
</ul>
<p><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html#where-to-set-variables"><strong>变量优先级</strong> 参考说明</a></p>
<p><strong><code>when</code> 关键字后面跟随一个条件表达式，当条件为真时，任务会执行；当条件为假时，任务会被跳过。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: Install nginx on Debian</span><br><span class="line">    apt:</span><br><span class="line">      name: nginx</span><br><span class="line">      state: present</span><br><span class="line">    when: ansible_facts[&#x27;os_family&#x27;] == &#x27;Debian&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>when</code> 关键字支持多种表达式，包括：</p>
<ul>
<li><p><strong>简单条件</strong>：</p>
<ul>
<li><p><strong>基于变量</strong> 的条件：<code>when: variable == &#39;value&#39;</code></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- name: Install nginx only if nginx_install is true</span><br><span class="line">  apt:</span><br><span class="line">    name: nginx</span><br><span class="line">    state: present</span><br><span class="line">  when: nginx_install</span><br></pre></td></tr></table></figure>
<p>  在这个示例中，<code>nginx_install</code> 是一个布尔变量。当 <code>nginx_install</code> 为真时，任务将执行。</p>
</li>
<li><p><strong>基于事实(facts)</strong> 的条件：<code>when: ansible_facts[&#39;os_family&#39;] == &#39;Debian&#39;</code></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- name: Install nginx on Debian systems</span><br><span class="line">  apt:</span><br><span class="line">    name: nginx</span><br><span class="line">    state: present</span><br><span class="line">  when: ansible_facts[&#x27;os_family&#x27;] == &#x27;Debian&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>逻辑操作</strong>：</p>
<ul>
<li><strong>与操作</strong>： <code>when: condition1 and condition2</code>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- name: Install nginx on Debian systems</span><br><span class="line">  apt:</span><br><span class="line">    name: nginx</span><br><span class="line">    state: present</span><br><span class="line">  when: ansible_facts[&#x27;os_family&#x27;] == &#x27;Debian&#x27; or ansible_facts[&#x27;os_family&#x27;] == &#x27;Ubuntu&#x27;</span><br></pre></td></tr></table></figure>
当使用多个条件时，也先当于 <code>and</code> 操作<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: Shut down CentOS 6 systems</span><br><span class="line">    ansible.builtin.command: /sbin/shutdown -t now</span><br><span class="line">    when:</span><br><span class="line">      - ansible_facts[&#x27;distribution&#x27;] == &quot;CentOS&quot;</span><br><span class="line">      - ansible_facts[&#x27;distribution_major_version&#x27;] == &quot;6&quot;</span><br></pre></td></tr></table></figure></li>
<li><strong>或操作</strong>：<code>when: condition1 or condition2</code></li>
<li><strong>非操作</strong>：<code>when: not condition</code></li>
</ul>
</li>
<li><p><strong>列表和字典操作</strong>：</p>
<ul>
<li><strong>列表包含</strong>：<code>when: &#39;item&#39; in mylist</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- name: Ensure package is installed if it is in the list</span><br><span class="line">  apt:</span><br><span class="line">    name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">    state: present</span><br><span class="line">  loop:</span><br><span class="line">    - nginx</span><br><span class="line">    - git</span><br><span class="line">  when: item in packages_to_install</span><br></pre></td></tr></table></figure></li>
<li><strong>字典键存在</strong>：<code>when: &#39;key&#39; in mydict</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- name: Run only if the key &#x27;run_task&#x27; is present in mydict and its value is true</span><br><span class="line">  debug:</span><br><span class="line">    msg: &quot;Running task&quot;</span><br><span class="line">  when: mydict.get(&#x27;run_task&#x27;, False)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
这个任务仅在 <code>mydict</code> 中存在键 <code>run_task</code> 且其值为真时执行。<blockquote>
<p><code>when: mydict.get(&#39;run_task&#39;, False)</code> 中 <code>False</code> 为默认值，如果 <code>mydict</code> 字典中不存在 <code>run_task</code> 键，<code>mydict.get(&#39;run_task&#39;, False)</code> 将返回 <code>False</code>。这种用法确保了在键不存在时，条件判断不会抛出错误。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>复杂条件</strong>：</p>
<ul>
<li><strong>组合多个条件</strong>：<code>when: (condition1 and condition2) or condition3</code></li>
</ul>
</li>
</ul>
<p>以下是一个完整的示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- name: Example playbook using when conditions</span><br><span class="line">  hosts: all</span><br><span class="line">  become: yes</span><br><span class="line"></span><br><span class="line">  vars:</span><br><span class="line">    nginx_install: true</span><br><span class="line">    packages_to_install:</span><br><span class="line">      - nginx</span><br><span class="line">      - git</span><br><span class="line">    mydict:</span><br><span class="line">      run_task: true</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: Install nginx only if nginx_install is true</span><br><span class="line">      apt:</span><br><span class="line">        name: nginx</span><br><span class="line">        state: present</span><br><span class="line">      when: nginx_install</span><br><span class="line"></span><br><span class="line">    - name: Install nginx on Debian or Ubuntu</span><br><span class="line">      apt:</span><br><span class="line">        name: nginx</span><br><span class="line">        state: present</span><br><span class="line">      when: ansible_facts[&#x27;os_family&#x27;] == &#x27;Debian&#x27; or ansible_facts[&#x27;os_family&#x27;] == &#x27;Ubuntu&#x27;</span><br><span class="line"></span><br><span class="line">    - name: Ensure package is installed if it is in the list</span><br><span class="line">      apt:</span><br><span class="line">        name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">        state: present</span><br><span class="line">      loop: &quot;&#123;&#123; packages_to_install &#125;&#125;&quot;</span><br><span class="line">      when: item in packages_to_install</span><br><span class="line"></span><br><span class="line">    - name: Run only if the key &#x27;run_task&#x27; is present in mydict and its value is true</span><br><span class="line">      debug:</span><br><span class="line">        msg: &quot;Running task&quot;</span><br><span class="line">      when: mydict.get(&#x27;run_task&#x27;, False)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="引用-Facts-变量值"><a href="#引用-Facts-变量值" class="headerlink" title="引用 Facts 变量值"></a>引用 Facts 变量值</h2><p>Ansible-playbook 运行过程中，默认会收集目标主机的 Facts 信息。可以在 Playbook 定义中引用这些值 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Discovering variables: facts and magic variables](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_vars_facts.html)">[2]</span></a></sup></p>
<p>原始的 <code>facts</code> 信息可以通过 <code>setup</code> 模块获取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible &lt;hostname&gt; -m ansible.builtin.setup</span><br></pre></td></tr></table></figure>

<p>要在 <code>playbook</code> 或者 <code>template</code> 中引用，可以参考以下方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; ansible_facts[&#x27;devices&#x27;][&#x27;xvda&#x27;][&#x27;model&#x27;] &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ansible_facts[&#x27;nodename&#x27;] &#125;&#125;</span><br></pre></td></tr></table></figure>


<h1 id="playbook-示例"><a href="#playbook-示例" class="headerlink" title="playbook 示例"></a>playbook 示例</h1><h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><p>以下示例展示修改主机名可使用的 <code>playbook</code>，主机名称修改为 Inventory 中主机的主机名（Alias）</p>
<p>假设 Inventory 文件内容如下：</p>
<figure class="highlight shell"><figcaption><span>/etc/ansible/inventory/hosts</span></figcaption><table><tr><td class="code"><pre><span class="line">test_target1:</span><br><span class="line">  hosts:</span><br><span class="line">    ansible-target-centos79-1:</span><br><span class="line">      ansible_host: ansible-target-centos79-1</span><br><span class="line">      ansible_user: root</span><br><span class="line">    ansible-target-centos79-2:</span><br><span class="line">      ansible_host: ansible-target-centos79-2</span><br><span class="line">      ansible_port: 22</span><br><span class="line">      ansible_user: root</span><br></pre></td></tr></table></figure>
<p>Playbook 内容如下</p>
<figure class="highlight shell"><figcaption><span>change_hostname.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- name: Change hostname based on inventory alias</span><br><span class="line">  hosts: test_target1</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Set hostname from alias</span><br><span class="line">      hostname:</span><br><span class="line">        name: &quot;&#123;&#123; inventory_hostname &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">    - name: Update /etc/hosts file with new hostname</span><br><span class="line">      lineinfile:</span><br><span class="line">        path: /etc/hosts</span><br><span class="line">        regexp: &#x27;^(127\.0\.1\.1\s+).*&#x27;</span><br><span class="line">        line: &quot;127.0.1.1 &#123;&#123; inventory_hostname &#125;&#125;&quot;</span><br><span class="line">        state: present</span><br><span class="line">      when: ansible_facts[&#x27;distribution&#x27;] == &#x27;Ubuntu&#x27;</span><br><span class="line"></span><br><span class="line">    - name: Update /etc/sysconfig/network with new hostname (CentOS/RedHat)</span><br><span class="line">      lineinfile:</span><br><span class="line">        path: /etc/sysconfig/network</span><br><span class="line">        regexp: &#x27;^HOSTNAME=.*&#x27;</span><br><span class="line">        line: &quot;HOSTNAME=&#123;&#123; inventory_hostname &#125;&#125;&quot;</span><br><span class="line">        state: present</span><br><span class="line">      when: ansible_facts[&#x27;distribution&#x27;] in [&#x27;CentOS&#x27;, &#x27;RedHat&#x27;]</span><br><span class="line"></span><br><span class="line">    - name: Set hostname using hostnamectl</span><br><span class="line">      command: &quot;hostnamectl set-hostname &#123;&#123; inventory_hostname &#125;&#125;&quot;</span><br><span class="line">      when: ansible_facts[&#x27;distribution&#x27;] in [&#x27;CentOS&#x27;, &#x27;RedHat&#x27;, &#x27;Ubuntu&#x27;]</span><br><span class="line"></span><br><span class="line">    - name: Reboot the system to apply changes</span><br><span class="line">      reboot:</span><br><span class="line">        msg: &quot;Rebooting to apply hostname changes&quot;</span><br><span class="line">        pre_reboot_delay: 5</span><br><span class="line">        post_reboot_delay: 30</span><br><span class="line">        reboot_timeout: 300</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>相关模板变量说明</p>
<table>
<thead>
<tr>
<th>模板变量</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>inventory_hostname</code></td>
<td>引用 Inventory 中的主机名称（Alias）</td>
<td><code>&#123;&#123; inventory_hostname &#125;&#125;</code></td>
</tr>
</tbody></table>
<p>相关模块使用参考</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>参考链接</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>hostname</code></td>
<td><a href="https://csms.tech/202308311109/#hostname"><code>hostname</code></a></td>
<td></td>
</tr>
<tr>
<td><code>lineinfile</code></td>
<td><a href="https://csms.tech/202308311109/#lineinfile"><code>lineinfile</code></a></td>
<td></td>
</tr>
<tr>
<td><code>reboot</code></td>
<td><a href="https://csms.tech/202308311109/#reboot"><code>reboot</code></a></td>
<td></td>
</tr>
<tr>
<td><code>command</code></td>
<td><a href="https://csms.tech/202308311109/#command"><code>command</code></a></td>
<td></td>
</tr>
</tbody></table>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html#ansible-playbooks">Ansible playbooks</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html#where-to-set-variables">Where to set variables</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_vars_facts.html">Discovering variables: facts and magic variables</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html#registering-variables">Registering variables</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible playbook 使用介绍</title>
    <url>/202309011341/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>ansible 2.9.27</li>
</ul>
<h1 id="Playbook-语法示例"><a href="#Playbook-语法示例" class="headerlink" title="Playbook 语法示例"></a>Playbook 语法示例</h1><p>ansible playbook 使用的是 YAML 格式的语法。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  vars:</span><br><span class="line">    http_port: 80</span><br><span class="line">    max_clients: 200</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ensure apache is at the latest version</span><br><span class="line">    yum: pkg=httpd state=latest</span><br><span class="line">  - name: write the apache config file</span><br><span class="line">    template: src=/srv/httpd.j2 dest=/etc/httpd.conf</span><br><span class="line">    notify:</span><br><span class="line">    - restart apache</span><br><span class="line">  - name: ensure apache is running</span><br><span class="line">    service: name=httpd state=started</span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart apache</span><br><span class="line">      service: name=httpd state=restarted</span><br></pre></td></tr></table></figure>
<p>playbook 由一个或多个 <code>play</code> 组成。它的内容是一个以 <code>play</code> 为元素的列表。以上示例仅包含一个 <code>play</code></p>
<p>每一个 <code>play</code> 中包含了一个 <code>tasks</code> 列表，<code>tasks</code> 列表中的每个 <code>task</code> 在其对应的 <code>hosts</code> 上 <em><strong>依次执行</strong></em>。<strong>即一个 <code>task</code> 执行完毕，下一个 <code>task</code> 才会执行</strong>。</p>
<p>在运行 playbook 的过程中，<strong>如果一个 <code>host</code> 执行 <code>task</code> 失败，这个 <code>host</code> 将从整个 playbook 中移除</strong>。如果发生执行失败的情况，需要修正 playbook 中的错误，重新执行。</p>
<span id="more"></span>
<h1 id="playbook-基础"><a href="#playbook-基础" class="headerlink" title="playbook 基础"></a>playbook 基础</h1><h2 id="主机与用户"><a href="#主机与用户" class="headerlink" title="主机与用户"></a>主机与用户</h2><p><code>play</code> 中一般都需要选择要操作的目标主机，也可能需要指明以哪个用户身份来执行 <code>tasks</code></p>
<ul>
<li><code>hosts</code> 一个或多个组或主机的 patterns，以 <code>,</code> 分割</li>
<li><code>remote_user</code> 用户名。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  remote_user: root</span><br></pre></td></tr></table></figure>

<p>在每一个 <code>task</code> 中，也可以定义自己的远程账号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: webservers</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: test connection</span><br><span class="line">      ping:</span><br><span class="line">      remote_user: user1</span><br></pre></td></tr></table></figure>

<h2 id="sudo-提权操作"><a href="#sudo-提权操作" class="headerlink" title="sudo 提权操作"></a>sudo 提权操作</h2><p>在需要提权操作的场景下，需要切换到更高权限的用户，可以使用 <code>become</code> 指令。<code>become</code> 可以在全局（<code>play</code>）级别使用或者 <code>task</code> 级别使用。</p>
<p>如果要提权到其他用户而非 <code>root</code>，可以使用指令 <code>become_user</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: master-nodes</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">    - name: ping</span><br><span class="line">      ping:</span><br><span class="line">     </span><br><span class="line">    - name: cat authorize</span><br><span class="line">      command: cat /root/.ssh/authorized_keys</span><br><span class="line">      become: yes</span><br><span class="line">      become_user: centos</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在 <code>task</code> 中可以使用变量。假设在 <code>vars</code> 那里定义了变量，可以这样使用它:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: webservers</span><br><span class="line">  vars:</span><br><span class="line">    http_port: 80</span><br><span class="line">    max_clients: 200</span><br><span class="line">  tasks:</span><br><span class="line">    - name: create a web for port &#123;&#123; http_port &#125;&#125;</span><br><span class="line">      template: src=somefile.j2 dest=/etc/httpd/conf.d/&#123;&#123; http_port &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>playbook 执行之前，默认会执行 <code>setup</code> 收集目标主机的 <code>facts</code> 信息，这是 <code>play</code> 中默认的第一个 <code>task</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible-playbook test.yml</span> </span><br><span class="line"></span><br><span class="line">PLAY [k8s-master-nodes] ******************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">ok: [k8s-master1]</span><br><span class="line"></span><br><span class="line">ok: [k8s-master3]</span><br><span class="line"></span><br><span class="line">ok: [k8s-master2]</span><br></pre></td></tr></table></figure>

<p>playbook 中的 <code>task</code> 可以使用 <code>facts</code> 中的变量的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible k8s-master-nodes[0] -m setup -a <span class="string">&quot;filter=ansible_distribution&quot;</span></span></span><br><span class="line"></span><br><span class="line">k8s-master1 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_distribution&quot;: &quot;CentOS Linux&quot;, </span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> test.yml</span></span><br><span class="line">---</span><br><span class="line">- hosts: k8s-master-nodes</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">become: <span class="built_in">yes</span></span></span><br><span class="line">  tasks:</span><br><span class="line">    - name: ping</span><br><span class="line">      ping:</span><br><span class="line">     </span><br><span class="line">    - name: test os distribution</span><br><span class="line">      debug:</span><br><span class="line">        msg: &quot;This is Centos&quot;</span><br><span class="line">      when: ansible_distribution == &quot;CentOS Linux&quot;</span><br><span class="line">	  </span><br><span class="line">	  </span><br><span class="line">	  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible-playbook test.yml</span> </span><br><span class="line"></span><br><span class="line">PLAY [k8s-master-nodes] ******************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">ok: [k8s-master1]</span><br><span class="line"></span><br><span class="line">ok: [k8s-master3]</span><br><span class="line"></span><br><span class="line">ok: [k8s-master2]</span><br><span class="line"></span><br><span class="line">TASK [ping] *************************************************************************************************************************************</span><br><span class="line">ok: [k8s-master2]</span><br><span class="line">ok: [k8s-master1]</span><br><span class="line">ok: [k8s-master3]</span><br><span class="line"></span><br><span class="line">TASK [test os distribution] *********************************************************************************************************************</span><br><span class="line">ok: [k8s-master1] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;This is Centos&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [k8s-master2] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;This is Centos&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [k8s-master3] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;This is Centos&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP **************************************************************************************************************************************</span><br><span class="line">k8s-master1            : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">k8s-master2            : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">k8s-master3            : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0	  </span><br></pre></td></tr></table></figure>

<h2 id="handlers"><a href="#handlers" class="headerlink" title="handlers"></a>handlers</h2><p><code>handlers</code> 中定义了在发生改动时执行的操作。</p>
<p>Handlers 也是一些 <code>task</code> 的列表，通过名字来引用，它们和一般的 <code>task</code> 并没有什么区别。Handlers 是由通知者进行 <code>notify</code>， 如果没有被 <code>notify</code>，handlers 不会执行。不管有多少个通知者进行了 <code>notify</code>，等到 play 中的所有 <code>task</code> 执行完成之后,handlers 也只会被执行一次。</p>
<p><em><strong>handlers 会按照声明的顺序执行</strong></em></p>
<p><strong>Handlers 最佳的应用场景是用来重启服务，或者触发系统重启操作</strong></p>
<h3 id="notify"><a href="#notify" class="headerlink" title="notify"></a>notify</h3><p>（当发生改动时）<code>notify</code> actions 会在 playbook 的每一个 <code>task</code> 结束时被触发，而且即使有多个不同的 <code>task</code> 通知改动的发生, <code>notify</code> actions 只会被触发一次。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- name: template configuration file</span><br><span class="line">  template: src=template.j2 dest=/etc/foo.conf</span><br><span class="line">  notify:</span><br><span class="line">     - restart memcached</span><br><span class="line">     - restart apache</span><br></pre></td></tr></table></figure>





<h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>palybook 中的每个 <code>task</code> 都是为了运行某个 <code>module</code>。在 <code>task</code> 中配置 <code>module</code>，是以 <code>module: options</code> 的格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: webservers</span><br><span class="line">  tasks:</span><br><span class="line">    - name: test connection</span><br><span class="line">      ping:</span><br><span class="line">    - name: make sure apache is running</span><br><span class="line">      service: name=httpd state=running</span><br><span class="line">    - name: disable selinux</span><br><span class="line">      shell: setenforce 0</span><br></pre></td></tr></table></figure>

<h1 id="ansible-playbook-常用模块参考"><a href="#ansible-playbook-常用模块参考" class="headerlink" title="ansible playbook 常用模块参考"></a>ansible playbook 常用模块参考</h1><h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><p><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/iptables_module.html">ansible iptables 模块官方文档</a></p>
<ul>
<li><code>iptables</code> 模块用于配置 Linux iptables 防火墙 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ansible iptables 模块官方文档](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/iptables_module.html)
">[1]</span></a></sup></li>
<li><em><strong><code>iptables</code> 模块只修改当前系统生效的 <code>iptables</code> 规则（动态），不会将规则写入 <code>iptables</code> 服务的配置文件以实现静态（持久）配置，它的行为和 <code>iptables</code> 命令相同</strong></em></li>
</ul>
<p><code>iptables</code> 模块参数参考 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ansible iptables 模块官方文档](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/iptables_module.html)
">[1]</span></a></sup></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>action </code></td>
<td>rule 是被 append 到最后还是插入到最前面。<br/><strong>默认 <code>append</code></strong><br/>如果 rule 已经存在，不会做变更</td>
<td></td>
</tr>
<tr>
<td><code>chain</code></td>
<td>要操作的 chain。<br/>可以是自定义的 chain 或者默认存在的 chain 如 <code>INPUT</code>, <code>FORWARD</code>, <code>OUTPUT</code>, <code>PREROUTING</code>, <code>POSTROUTING</code>, <code>SECMARK</code> or <code>CONNSECMARK</code></td>
<td></td>
</tr>
<tr>
<td><code>table </code></td>
<td>This option specifies the packet matching table which the command should operate on</td>
<td></td>
</tr>
<tr>
<td><code>chain_management </code></td>
<td>If <code>true</code> and <code>state</code> is <code>present</code>, the chain will be created if needed. <br/>If <code>true</code> and <code>state</code> is <code>absent</code>, the chain will be deleted if the only other parameter passed are <code>chain</code> and optionally <code>table</code>. 默认为 <code>false</code></td>
<td></td>
</tr>
<tr>
<td><code>comment </code></td>
<td>规则的注释说明</td>
<td></td>
</tr>
<tr>
<td><code>ctstate </code><br/><code>list / elements=string</code></td>
<td>A list of the connection states to match in the conntrack module.<br/>Possible values are <code>INVALID</code>, <code>NEW</code>, <code>ESTABLISHED</code>, <code>RELATED</code>, <code>UNTRACKED</code>, <code>SNAT</code>, <code>DNAT</code>.<br/>Default: <code>[]</code></td>
<td></td>
</tr>
<tr>
<td><code>source </code></td>
<td>Source specification</td>
<td></td>
</tr>
<tr>
<td><code>destination</code> <br/><code>string</code></td>
<td>Destination specification.<br/>Address can be either a network name, a hostname, a network IP address (with &#x2F;mask), or a plain IP address.<br/>Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea.<br/>The mask can be either a network mask or a plain number, specifying the number of 1’s at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A ! argument before the address specification inverts the sense of the address.</td>
<td></td>
</tr>
<tr>
<td><code>destination_port </code><br/><code>string</code></td>
<td>Destination port or port range specification</td>
<td></td>
</tr>
<tr>
<td><code>destination_ports </code><br/><code>list / elements=string</code></td>
<td>This specifies multiple destination port numbers or port ranges to match in the <code>multiport</code> module</td>
<td></td>
</tr>
<tr>
<td><code>dst_range </code><br/><code>string</code></td>
<td>Specifies the destination IP range to match in the iprange module.</td>
<td></td>
</tr>
<tr>
<td><code>source_port </code></td>
<td>Source port or port range specification.</td>
<td></td>
</tr>
<tr>
<td><code>flush</code><br/><code>boolean</code></td>
<td>Flushes the specified <code>table</code> and <code>chain</code> of all rules.<br/>If no <code>chain</code> is specified then the <strong>entire table is purged</strong>.<br/>       默认值 <code>false</code></td>
<td></td>
</tr>
<tr>
<td><code>jump </code></td>
<td>This specifies the target of the rule</td>
<td></td>
</tr>
<tr>
<td><code>protocol </code></td>
<td>The protocol of the rule or of the packet to check.<br/>The specified protocol can be one of <code>tcp</code>, <code>udp</code>, <code>udplite</code>, <code>icmp</code>, <code>ipv6-icmp</code> or <code>icmpv6</code>, <code>esp</code>, <code>ah</code>, <code>sctp</code> or the special keyword <code>all</code></td>
<td></td>
</tr>
<tr>
<td><code>rule_num </code></td>
<td>Insert the rule as the given rule number.<br/>This works only with <code>action=insert</code>.</td>
<td></td>
</tr>
</tbody></table>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#control-node-requirements">ansible 官方文档</a><br><a href="https://ansible-tran.readthedocs.io/en/latest/docs/intro_adhoc.html">Ansible中文权威指南</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/iptables_module.html">ansible iptables 模块官方文档</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible templates 使用介绍</title>
    <url>/202405241042/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>ansible-core 2.16</li>
<li>Docker image python:3.12.3</li>
</ul>
<a href="/202308311109/" title="Ansible 安装部署参考">Ansible 安装部署参考</a>

<a href="/202309011341/" title="Ansible playbook 使用介绍">Ansible playbook 使用介绍</a>

<p>Ansible 使用 Jinja2 模板语言对变量或者 Facts 进行模板化。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Templating (Jinja2)](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_templating.html#templating-jinja2)">[1]</span></a></sup></p>
<h1 id="模板数据处理"><a href="#模板数据处理" class="headerlink" title="模板数据处理"></a>模板数据处理</h1><h2 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h2><p>使用 <code>Filters</code> 可以进行数据转换（如 <code>JSON</code> –&gt; <code>YAML</code>）、URL 分割等操作。 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Using filters to manipulate data](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#using-filters-to-manipulate-data)">[2]</span></a></sup></p>
<h3 id="为变量提供默认值"><a href="#为变量提供默认值" class="headerlink" title="为变量提供默认值"></a>为变量提供默认值</h3><p>在模板中使用的变量未定义的情况下，可能会导致 Ansible 处理失败，为了以更优雅的方式处理此类问题，可以在模板中为变量提供 <strong>默认值</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; some_variable | default(5) &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>也可以在变量计算值为空或者 <code>false</code> 时使用默认值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; lookup(&#x27;env&#x27;, &#x27;MY_USER&#x27;) | default(&#x27;admin&#x27;, true) &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置变量为可选变量"><a href="#配置变量为可选变量" class="headerlink" title="配置变量为可选变量"></a>配置变量为可选变量</h3><p>默认情况下，Ansible Template 中所有的变量都必须有值，否则会抛出异常。假如需要在模板中的部分变量没有值或未定义的情况下也可以正常部署，可以将其配置为 <strong>可选(optional)</strong></p>
<p>要将变量配置为 **可选(optional)**，可以将其 <strong>默认值(default value)</strong> 设置为特殊变量 <strong><code>omit</code></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- name: Touch files with an optional mode</span><br><span class="line">  ansible.builtin.file:</span><br><span class="line">    dest: &quot;&#123;&#123; item.path &#125;&#125;&quot;</span><br><span class="line">    state: touch</span><br><span class="line">    mode: &quot;&#123;&#123; item.mode | default(omit) &#125;&#125;&quot;</span><br><span class="line">  loop:</span><br><span class="line">    - path: /tmp/foo</span><br><span class="line">    - path: /tmp/bar</span><br><span class="line">    - path: /tmp/baz</span><br><span class="line">      mode: &quot;0444&quot;</span><br></pre></td></tr></table></figure>

<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>如果需要对变量类型进行转换，可以参考以下方法 </p>
<h4 id="获取变量类型"><a href="#获取变量类型" class="headerlink" title="获取变量类型"></a>获取变量类型</h4><p><strong>2.3 以上版本中</strong>，可以使用 <code>type_debug</code> 显示变量类型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; myvar | type_debug &#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字典转换为列表"><a href="#字典转换为列表" class="headerlink" title="字典转换为列表"></a>字典转换为列表</h4><p>New in version 2.6.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; dict | dict2items &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>原始字典数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">  Application: payment</span><br><span class="line">  Environment: dev</span><br></pre></td></tr></table></figure>

<p>使用 <code>&#123;&#123; dict | dict2items &#125;&#125;</code> 转换后的列表数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- key: Application</span><br><span class="line">  value: payment</span><br><span class="line">- key: Environment</span><br><span class="line">  value: dev</span><br></pre></td></tr></table></figure>
<p>转换后的列表默认以关键字 <code>key</code> 指示之前的字典中的 <code>key</code> 值，以关键字 <code>value</code> 指示之前的字典中的 <code>value</code> 值。<em><strong>如果想要自定义 key 名称，<code>dict2items</code> 接受关键字参数 <code>key_name</code> 和 <code>value_name</code></strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Dictionary data (before applying the ansible.builtin.dict2items filter):</span></span><br><span class="line">files:</span><br><span class="line">  users: /etc/passwd</span><br><span class="line">  groups: /etc/group</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">applying the ansible.builtin.dict2items filter</span></span><br><span class="line">&#123;&#123; files | dict2items(key_name=&#x27;file&#x27;, value_name=&#x27;path&#x27;) &#125;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">List data (after applying the ansible.builtin.dict2items filter):</span></span><br><span class="line">- file: users</span><br><span class="line">  path: /etc/passwd</span><br><span class="line">- file: groups</span><br><span class="line">  path: /etc/group</span><br></pre></td></tr></table></figure>

<h4 id="列表转换为字典"><a href="#列表转换为字典" class="headerlink" title="列表转换为字典"></a>列表转换为字典</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; tags | items2dict &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>List data (before applying the <code>ansible.builtin.items2dict</code> filter):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - key: Application</span><br><span class="line">    value: payment</span><br><span class="line">  - key: Environment</span><br><span class="line">    value: dev</span><br></pre></td></tr></table></figure>

<p>Dictionary data (after applying the <code>ansible.builtin.items2dict</code> filter):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Application: payment</span><br><span class="line">Environment: dev</span><br></pre></td></tr></table></figure>

<p>假如 List Data 中的关键字不是 <code>key</code> 和 <code>value</code>，此时必须使用参数 <code>key_name</code> 和 <code>value_name</code> 指定</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; fruits | items2dict(key_name=&#x27;fruit&#x27;, value_name=&#x27;color&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>使用以下语法强制转换变量数据类型 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Forcing the data type](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#forcing-the-data-type)">[5]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">some_string_value | bool</span><br><span class="line"></span><br><span class="line">ansible_facts[&#x27;os_family&#x27;] == &quot;RedHat&quot; and ansible_facts[&#x27;lsb&#x27;][&#x27;major_release&#x27;] | int </span><br></pre></td></tr></table></figure>

<h4 id="YAML-和-JSON-数据转换"><a href="#YAML-和-JSON-数据转换" class="headerlink" title="YAML 和 JSON 数据转换"></a>YAML 和 JSON 数据转换</h4><p>可以使用以下语法将数据转换为 JSON 或者 YAML 格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; some_variable | to_json &#125;&#125;</span><br><span class="line">&#123;&#123; some_variable | to_yaml &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>可以使用以下语法将数据转换为方便人类阅读 JSON 或者 YAML 格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; some_variable | to_nice_json &#125;&#125;</span><br><span class="line">&#123;&#123; some_variable | to_nice_yaml &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>制定行首缩进程度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; some_variable | to_nice_json(indent=2) &#125;&#125;</span><br><span class="line">&#123;&#123; some_variable | to_nice_yaml(indent=8) &#125;&#125;</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_templating.html#templating-jinja2">Templating (Jinja2)</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_templating.html#templating-jinja2">Templating (Jinja2)</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#using-filters-to-manipulate-data">Using filters to manipulate data</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#making-variables-optional">Making variables optional</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#managing-data-types">Managing data types</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#forcing-the-data-type">Forcing the data type</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#formatting-data-yaml-and-json">Formatting data: YAML and JSON</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible 使用介绍</title>
    <url>/202308311109/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>ansible-core 2.16</li>
<li>Docker image python:3.12.3</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://docs.ansible.com/ansible/latest/reference_appendices/release_and_maintenance.html#ansible-core-target-node-python-support"><code>ansible-core</code> 版本及 Python 版本支持对应关系</a></p>
<table>
<thead>
<tr>
<th>ansible-core Version</th>
<th>Control Node Python</th>
<th>Target Python &#x2F; PowerShell</th>
</tr>
</thead>
<tbody><tr>
<td>2.16</td>
<td>Python 3.10 - 3.12</td>
<td>Python 2.7<br/>Python 3.6 - 3.12<br/>Powershell 3 - 5.1</td>
</tr>
</tbody></table>
<p>为了环境部署方便灵活，可以选择使用 <code>python:3.12.3</code> 的 Docker 镜像，以其为基础环境安装 <code>ansible-core 2.16</code> 或者直接使用 <code>ansible</code> 镜像启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker run --<span class="built_in">rm</span> -it python:3.12.3 bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /etc/os-release</span> </span><br><span class="line">PRETTY_NAME=&quot;Debian GNU/Linux 12 (bookworm)&quot;</span><br><span class="line">NAME=&quot;Debian GNU/Linux&quot;</span><br><span class="line">VERSION_ID=&quot;12&quot;</span><br><span class="line">VERSION=&quot;12 (bookworm)&quot;</span><br><span class="line">VERSION_CODENAME=bookworm</span><br><span class="line">ID=debian</span><br><span class="line">HOME_URL=&quot;https://www.debian.org/&quot;</span><br><span class="line">SUPPORT_URL=&quot;https://www.debian.org/support&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.debian.org/&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">python --version</span></span><br><span class="line">Python 3.12.3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pip install ansible</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pip list</span></span><br><span class="line">Package      Version</span><br><span class="line">------------ -------</span><br><span class="line">ansible      9.5.1</span><br><span class="line">ansible-core 2.16.6</span><br><span class="line">cffi         1.16.0</span><br><span class="line">cryptography 42.0.7</span><br><span class="line">Jinja2       3.1.4</span><br><span class="line">MarkupSafe   2.1.5</span><br><span class="line">packaging    24.0</span><br><span class="line">pip          24.0</span><br><span class="line">pycparser    2.22</span><br><span class="line">PyYAML       6.0.1</span><br><span class="line">resolvelib   1.0.1</span><br><span class="line">setuptools   69.5.1</span><br><span class="line">wheel        0.43.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible --version</span></span><br><span class="line">ansible [core 2.16.6]</span><br><span class="line">  config file = None</span><br><span class="line">  configured module search path = [&#x27;/root/.ansible/plugins/modules&#x27;, &#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class="line">  ansible python module location = /usr/local/lib/python3.12/site-packages/ansible</span><br><span class="line">  ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections</span><br><span class="line">  executable location = /usr/local/bin/ansible</span><br><span class="line">  python version = 3.12.3 (main, May 14 2024, 07:23:41) [GCC 12.2.0] (/usr/local/bin/python)</span><br><span class="line">  jinja version = 3.1.4</span><br><span class="line">  libyaml = True</span><br></pre></td></tr></table></figure>

<h1 id="Ansible-配置说明"><a href="#Ansible-配置说明" class="headerlink" title="Ansible 配置说明"></a>Ansible 配置说明</h1><p>Ansible 主配置文件为 <code>/etc/ansible/ansible.cfg</code>，<em><strong>其中的配置都可以被 <code>ansible-playbook</code> 或者命令行参数覆盖</strong></em>。</p>
<blockquote>
<p>ansible 默认会读取环境变量 <code>ANSIBLE_CONFIG</code> 指定的配置文件，当前路径下的 <code>ansible.cfg</code>，以及用户家目录下的 <code>.ansible.cfg</code>，以及 <code>/etc/ansible/ansible.cfg</code> 作为配置文件，已第一个找到的为准</p>
</blockquote>
<p>常用配置说明</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>inventory</code></td>
<td>指定 inventory （主机列表）文件的路径，默认为 <code>/etc/ansible/hosts</code></td>
<td></td>
</tr>
<tr>
<td><code>remote_user</code></td>
<td>（未指定用户时）连接远程主机时使用的用户</td>
<td></td>
</tr>
<tr>
<td><code>remote_port</code></td>
<td>连接远程主机时使用的(默认)端口</td>
<td></td>
</tr>
<tr>
<td><code>host_key_checking</code></td>
<td>默认启用。检查主机密钥可以防止服务器欺骗和中间人攻击。<br/>如果主机重新安装并且在 <code>know_hosts</code> 中拥有不同的密钥，ansible 会提示确认密钥。<br/>如果要禁用此行为，可以配置为 <code>False</code></td>
<td></td>
</tr>
<tr>
<td><code>ask_pass</code></td>
<td>默认为 False。当设置为 True 时，ansible 要求输入远端服务器的密码，即使配置了免密登录</td>
<td></td>
</tr>
<tr>
<td><code>log_path</code></td>
<td>日志文件，默认 <code>/var/log/ansible.log </code></td>
<td></td>
</tr>
<tr>
<td><code>pattern</code></td>
<td>当没有给出 <code>pattern</code> 时的默认 <code>pattern</code>，默认值是 <code>*</code> 即所有主机</td>
<td></td>
</tr>
</tbody></table>
<p>配置示例</p>
<figure class="highlight shell"><figcaption><span>/etc/ansible/ansible.cfg</span></figcaption><table><tr><td class="code"><pre><span class="line">[defaults]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认的 inventory 文件路径</span></span><br><span class="line">inventory = /etc/ansible/hosts</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭主机密钥检查，方便新主机的快速添加</span></span><br><span class="line">host_key_checking = False</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认的远程用户</span></span><br><span class="line">remote_user = ansible</span><br></pre></td></tr></table></figure>

<h1 id="Inventory-配置说明"><a href="#Inventory-配置说明" class="headerlink" title="Inventory 配置说明"></a>Inventory 配置说明</h1><p>默认的 inventory 配置文件路径为 <code>/etc/ansible/hosts</code>，主要用来配置 Managed Hosts 列表 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[How to build your inventory](https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#how-to-build-your-inventory)">[3]</span></a></sup></p>
<p>在命令行中，可以使用选项 <code>-i &lt;path&gt;</code> 指定不同的 <code>inventory</code> 或者可以在 <code>ansible</code> 配置文件 <code>ansible.cfg</code> 中使用指令 <code>inventory</code> 指定 <code>inventory</code> 文件位置。 </p>
<blockquote>
<p>命令行中可以使用 <code>-i &lt;path1&gt; -i &lt;path2&gt; ...</code> 指定多个 <code>inventory</code>  </p>
</blockquote>
<p><code>inventory</code> 文件支持多种格式，最常见的是 <code>INI</code> 和 <code>YAML</code> 格式。</p>
<ul>
<li>Ansible 默认创建了 2 个组：<ul>
<li><code>all</code> : 包含所有主机</li>
<li><code>ungrouped</code> : 包含所有不在其他组（<code>all</code> 除外）中的所有主机。<blockquote>
<p>任何一个主机都会至少在 2 个组中，要么 <strong>在 <code>all</code> 和某个组中</strong>，要么 <strong>在 <code>all</code> 和 <code>ungrouped</code> 组</strong>。</p>
</blockquote>
</li>
</ul>
</li>
<li><strong>一个主机可以包含在多个组中</strong></li>
<li><strong><code>parent/child</code> 组</strong>，<code>child</code> 组被包含在 <code>parent</code> 组中。<ul>
<li>INI 配置格式中，使用 <code>:children</code> 后缀配置 <code>parent</code></li>
<li>YAML 配置格式中，使用 <code>children:</code> 配置 <code>parent</code><blockquote>
<ul>
<li>任何在 <code>child</code> 组中的主机自动成为 <code>parent</code> 组中的一员</li>
<li>一个组可以包括多个 <code>parent</code> 和 <code>child</code> 组，<em><strong>但是不能形成循环关系</strong></em></li>
<li>一个主机可以在多个组中，但是在运行时，只能有一个实例存在，Ansible 会自动将属于多个组的主机合并。</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><strong>主机范围匹配</strong>。如果有格式相似的主机，可以通过<strong>范围格式</strong>使用一条指令来添加多台主机。<ul>
<li>INI 配置格式中，使用以下格式  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[webservers]</span><br><span class="line">www[01:50].example.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定步长增长</span></span></span><br><span class="line">www[01:50:2].example.com</span><br><span class="line">      </span><br><span class="line">db-[a:f].example.com</span><br></pre></td></tr></table></figure></li>
<li>YAML 配置格式中，使用以下格式  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">...</span></span><br><span class="line">  webservers:</span><br><span class="line">    hosts:</span><br><span class="line">      www[01:50].example.com:</span><br><span class="line">      </span><br><span class="line">      ## 指定步长增长</span><br><span class="line">      www[01:50:2].example.com:</span><br><span class="line">      db-[a:f].example.com:</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>范围格式</strong> 的第一项和最后一项也包括在内。即匹配 <code>www01</code> 和 <code>www50</code></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="Inventory-多配置文件支持"><a href="#Inventory-多配置文件支持" class="headerlink" title="Inventory 多配置文件支持"></a>Inventory 多配置文件支持</h2><p>在主机数量较多，或者组织结构较复杂的情况下，使用单个 Inventory 配置文件会导致主机管理较为复杂。将单个 Inventory 配置文件按照项目或者组织或其他规则进行分割会显著降低维护复杂度。</p>
<p>Inventory 多配置文件支持，可以使用以下方法之一</p>
<ul>
<li>按照项目或者组织或其他规则将主机分割到多个配置中，命令行中可以使用 <code>-i &lt;path1&gt; -i &lt;path2&gt; ...</code> 指定多个 <code>inventory</code></li>
<li>按照项目或者组织或其他规则将主机分割放置在多个文件中，并将所有文件统一放置在一个单独的目录中（如 <code>/etc/ansible/inventory/</code>），在命令行中使用选项 <code>-i /etc/ansible/inventory/</code> 或者在 Ansible 配置文件(<code>ansible.cfg</code>)中使用指令 <code>inventory</code> 配置目录。<blockquote>
<p><em><strong>注意事项</strong></em>： Ansible 使用字典顺序加载配置文件，如果在不同的配置文件中配置了 <code>parent groups</code> 和 <code>child groups</code>，那么定义 <code>child groups</code> 的配置要先用定义 <code>parent groups</code> 的文件加载，否则 Ansible 加载配置会报错： <code>Unable to parse /path/to/source_of_parent_groups as an inventory source</code> <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Managing inventory load order](https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#managing-inventory-load-order)">[4]</span></a></sup> </p>
</blockquote>
</li>
<li>使用 <code>group_vars</code> 和 <code>host_vars</code> 目录分别存储组变量和主机变量 <sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Organizing host and group variables](https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#organizing-host-and-group-variables)">[7]</span></a></sup><blockquote>
<p><em><strong>注意事项</strong></em>： 组变量和主机变量必须使用 YAML 格式，合法的文件扩展名包括： <code>.yaml</code>、<code>yml</code>、<code>.json</code> 或者无文件扩展名</p>
</blockquote>
</li>
</ul>
<h2 id="INI-格式的-Inventory"><a href="#INI-格式的-Inventory" class="headerlink" title="INI 格式的 Inventory"></a>INI 格式的 Inventory</h2><p>主机列表中的主机可以单独出现，也可以位于某个或者多个 <strong>组(<code>[]</code> 开头的行)中</strong></p>
<figure class="highlight shell"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="code"><pre><span class="line">ansible-demo1.local</span><br><span class="line">ansible-demo2.local</span><br><span class="line"></span><br><span class="line">[webserver]</span><br><span class="line">webserver1.local</span><br><span class="line">webserver2.local</span><br><span class="line"></span><br><span class="line">[nginxserver]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配多个主机：nginx1.local， nginx2.local， nginx3.local， nginx4.local</span></span><br><span class="line">nginx[1:4].local variable1=value1 variable2=value2</span><br><span class="line">nginx-bak.local ansible_ssh_host=10.10.0.1 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=PASSWORD</span><br><span class="line">127.0.0.1 http_port=80 maxRequestPerChild=808</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>连接主机使用的常用配置说明 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Connecting to hosts: behavioral inventory parameters](https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters)">[6]</span></a></sup></p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>ansible_host</code></td>
<td>远程主机地址</td>
<td></td>
</tr>
<tr>
<td><code>ansible_port</code></td>
<td>远程主机端口</td>
<td></td>
</tr>
<tr>
<td><code>ansible_user</code></td>
<td>连接远程主机的 ssh 用户<br/>Ansible 默认使用 control node 上执行 <code>ansible</code> 的用户名来连接远程主机 <sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Setting a remote user](https://docs.ansible.com/ansible/latest/inventory_guide/connection_details.html#setting-a-remote-user)">[9]</span></a></sup></td>
<td></td>
</tr>
<tr>
<td><code>ansible_password</code></td>
<td>连接远程主机的 ssh 用户密码，建议使用 key 连接</td>
<td></td>
</tr>
<tr>
<td><code>ansible_ssh_private_key_file</code></td>
<td>连接远程主机的 ssh 私钥文件路径</td>
<td></td>
</tr>
<tr>
<td><code>ansible_become</code> <br/> <code>ansible_sudo</code>   <br/> <code>ansible_su</code></td>
<td>用户权限提升</td>
<td></td>
</tr>
<tr>
<td><code>ansible_become_method</code></td>
<td>用户权限提升(escalation)的方式</td>
<td></td>
</tr>
<tr>
<td><code>ansible_become_user</code> <br/> <code>ansible_sudo_user</code>     <br/> <code>ansible_su_user</code></td>
<td>用户权限提升(escalation)后的用户</td>
<td></td>
</tr>
<tr>
<td><code>ansible_become_password</code> <br/> <code>ansible_sudo_password</code> <br/> <code>ansible_su_password</code></td>
<td><code>sudo</code> 密码(这种方式并不安全,强烈建议使用 <code>--ask-sudo-pass</code>)</td>
<td></td>
</tr>
<tr>
<td><code>ansible_become_exe</code><br/> <code>ansible_sudo_exe</code> <br/> <code>ansible_su_exe</code> <br/></td>
<td>设置用户权限提升(escalation)后的可执行文件</td>
<td></td>
</tr>
<tr>
<td><code>ansible_connection</code></td>
<td>与主机的连接类型.比如:<code>local</code>, <code>ssh</code> 或者 <code>paramiko</code><br/>Ansible 1.2 以前默认使用 <code>paramiko</code>。1.2 以后默认使用 <code>smart</code>,<code>smart</code> 方式会根据是否支持 <code>ControlPersist</code>, 来判断 <code>ssh</code> 方式是否可行.</td>
<td></td>
</tr>
<tr>
<td><code>ansible_shell_type</code></td>
<td>目标系统的 shell 类型.默认情况下,命令的执行使用 <code>sh</code> 语法,可设置为 <code>csh</code> 或 <code>fish</code>.</td>
<td></td>
</tr>
<tr>
<td><code>ansible_python_interpreter</code></td>
<td>目标主机的 python 路径<br/>系统中有多个 Python, 或者命令路径不是 <code>/usr/bin/python</code></td>
<td></td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>在 <code>inventory</code> 的配置中，可以添加变量，以在 playbook 中使用变量，实现对不同主机的个性化配置。变量分好几个层级：</p>
<ul>
<li>主机变量： 跟在主机后面直接设置，变量的作用域仅限于主机。<em><strong>由于对变量名没有限制，所以前面的那些 ansible 的配置如果打错字了也不会报错，ansible 会认为这是一个主机变量</strong></em> <figure class="highlight shell"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="code"><pre><span class="line">127.0.0.1 http_port=80 maxRequestPerChild=808</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>变量值中包含空格，需要用引号（单引号&#x2F;双引号）</strong></p>
</blockquote>
</li>
<li>组变量： 组变量需要新开一个 <code>section</code>， 配置在名为 <code>[组名:vars]</code> 的 <code>section</code> 中   <figure class="highlight shell"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="code"><pre><span class="line">[localloops]</span><br><span class="line">127.0.0.[1:5] ansible_connection=paramiko ansible_ssh_user=root</span><br><span class="line"></span><br><span class="line">[localloops:vars]</span><br><span class="line">http_port=8080</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为主机可以在多个组中定义，假如在多个组中定义的同一个主机的同名变量的值不一样，Ansible 使用以下优先级使用变量： <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[How variables are merged](https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#how-variables-are-merged)">[5]</span></a></sup></p>
<ul>
<li>host</li>
<li>child group</li>
<li>parent group</li>
<li>all group</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="使用主机别名"><a href="#使用主机别名" class="headerlink" title="使用主机别名"></a>使用主机别名</h4><p>在 Inventory 中定义主机时，可以使用主机别名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jumper ansible_port=5555 ansible_host=192.0.2.50</span><br></pre></td></tr></table></figure>

<h2 id="YAML-格式的-Inventory"><a href="#YAML-格式的-Inventory" class="headerlink" title="YAML 格式的 Inventory"></a>YAML 格式的 Inventory</h2><p>基本的 YAML 格式的 Inventory 文件内容如下 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[How to build your inventory](https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#how-to-build-your-inventory)">[3]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ungrouped:</span><br><span class="line">  hosts:</span><br><span class="line">    mail.example.com:</span><br><span class="line">webservers:</span><br><span class="line">  hosts:</span><br><span class="line">    foo.example.com:</span><br><span class="line">    bar.example.com:</span><br><span class="line">dbservers:</span><br><span class="line">  hosts:</span><br><span class="line">    one.example.com:</span><br><span class="line">    two.example.com:</span><br><span class="line">    three.example.com:</span><br><span class="line">east:</span><br><span class="line">  hosts:</span><br><span class="line">    foo.example.com:</span><br><span class="line">    one.example.com:</span><br><span class="line">    two.example.com:</span><br><span class="line">west:</span><br><span class="line">  hosts:</span><br><span class="line">    bar.example.com:</span><br><span class="line">    three.example.com:</span><br><span class="line">prod:</span><br><span class="line">  children:</span><br><span class="line">    east:</span><br><span class="line">test:</span><br><span class="line">  children:</span><br><span class="line">    west:</span><br></pre></td></tr></table></figure>

<h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><p>主机变量定义</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">atlanta:</span><br><span class="line">  hosts:</span><br><span class="line">    host1:</span><br><span class="line">      http_port: 80</span><br><span class="line">      maxRequestsPerChild: 808</span><br><span class="line">    host2:</span><br><span class="line">      http_port: 303</span><br><span class="line">      maxRequestsPerChild: 909</span><br></pre></td></tr></table></figure>
<p>组变量定义</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">atlanta:</span><br><span class="line">  hosts:</span><br><span class="line">    host1:</span><br><span class="line">    host2:</span><br><span class="line">  vars:</span><br><span class="line">    ntp_server: ntp.atlanta.example.com</span><br><span class="line">    proxy: proxy.atlanta.example.com</span><br></pre></td></tr></table></figure>

<h3 id="定义可以为所有主机共用的变量"><a href="#定义可以为所有主机共用的变量" class="headerlink" title="定义可以为所有主机共用的变量"></a>定义可以为所有主机共用的变量</h3><p>假如有些变量可以被所有主机或者大部分主机所使用（继承），可以将其定义在 <code>all</code> 组中，<code>all</code> 组是 Ansible 自动创建的，用于包含所有主机，因此在这个组中定义的变量会被所有主机继承。</p>
<figure class="highlight shell"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="code"><pre><span class="line">all:</span><br><span class="line">  vars:</span><br><span class="line">    ansible_user: admin</span><br><span class="line">    ansible_ssh_private_key_file: /path/to/private/key</span><br><span class="line">    example_variable: value</span><br><span class="line"></span><br><span class="line">ansible_controller_host:</span><br><span class="line">  hosts:</span><br><span class="line">    docker_host:</span><br><span class="line">      ansible_host: 127.17.0.1</span><br><span class="line"></span><br><span class="line">test_target1:</span><br><span class="line">  hosts:</span><br><span class="line">    ansible-target-centos79-1:</span><br><span class="line">      ansible_host: ansible-target-centos79-1</span><br><span class="line">    ansible-target-centos79-2:</span><br><span class="line">      ansible_host: ansible-target-centos79-2</span><br><span class="line">      ansible_port: 22</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>所有这些变量将适用于 <code>ansible_controller_host</code> 组和 <code>test_target1</code> 组中定义的所有主机，除非在特定主机或其他组中明确覆盖了这些变量。</p>
<p>在主机较多的场景下，需要将变量分离以方便管理维护，可以使用 <code>group_vars</code> 文件，在 Inventory 配置文件的同级目录下创建目录 <code>group_vars</code>，在其下创建文件 <code>all.yml</code></p>
<figure class="highlight shell"><figcaption><span>/etc/ansible/group_vars/all.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">ansible_user: admin</span><br><span class="line">ansible_ssh_private_key_file: /path/to/private/key</span><br><span class="line">example_variable: value</span><br></pre></td></tr></table></figure>

<p>Inventory 文件如下：</p>
<figure class="highlight shell"><figcaption><span>/etc/ansible/hosts</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ansible_controller_host:</span><br><span class="line">  hosts:</span><br><span class="line">    docker_host:</span><br><span class="line">      ansible_host: 127.17.0.1</span><br><span class="line"></span><br><span class="line">test_target1:</span><br><span class="line">  hosts:</span><br><span class="line">    ansible-target-centos79-1:</span><br><span class="line">      ansible_host: ansible-target-centos79-1</span><br><span class="line">    ansible-target-centos79-2:</span><br><span class="line">      ansible_host: ansible-target-centos79-2</span><br><span class="line">      ansible_port: 22</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="使用主机别名-1"><a href="#使用主机别名-1" class="headerlink" title="使用主机别名"></a>使用主机别名</h4><p>在 Inventory 中定义主机时，可以使用主机别名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">...</span></span><br><span class="line">  hosts:</span><br><span class="line">    jumper:</span><br><span class="line">      ansible_port: 5555</span><br><span class="line">      ansible_host: 192.0.2.50</span><br></pre></td></tr></table></figure>



<h1 id="ansible-使用"><a href="#ansible-使用" class="headerlink" title="ansible 使用"></a>ansible 使用</h1><p>在配置好 inventory 后，要使 ansible 可以连接到 Managed Host，需要使用密码或者 key 的方式进行认证，建议使用 Private Key 的方式进行认证。<a href="https://csms.tech/202208171033/#ssh-免密登陆">参考文档配置 ssh 公私钥免密码认证过程</a></p>
<p>配置完 hosts 之后，在命令行中可以调用一些命令来使用 ansible，如 <code>ansible all -m ping</code>。命令行的 ansible 工具大体格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible &lt;pattern&gt; -m &lt;module&gt; -a &lt;arguments&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Patterns"><a href="#Patterns" class="headerlink" title="Patterns"></a>Patterns</h2><p><code>pattern</code> 是一个标识，指定出了要操作的目标主机，常用的 <code>patterns</code> 如下 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Common patterns](https://docs.ansible.com/ansible/latest/inventory_guide/intro_patterns.html#common-patterns)">[8]</span></a></sup></p>
<table>
<thead>
<tr>
<th>描述</th>
<th>Pattern(s)</th>
<th>Targets</th>
</tr>
</thead>
<tbody><tr>
<td>所有主机</td>
<td><code>all</code><br/><code>*</code></td>
<td></td>
</tr>
<tr>
<td>一个主机</td>
<td><code>host1</code> <br/><code>ip/域名</code></td>
<td></td>
</tr>
<tr>
<td>多个主机</td>
<td><code>host1:host2</code><br/><code>host1,host2</code><br/><code>192.168.1.*</code> <br/><code>192.0.*</code><br/><code>*.example.com</code><br/><code>*.com</code></td>
<td>建议用 <code>,</code>，在主机或者组中有 <code>:</code> 字符时必须用 <code>,</code>     <br/><em><strong>如果主机名和组名冲突，则以先出现的为准。</strong></em></td>
</tr>
<tr>
<td>一个组</td>
<td><code>webservers</code></td>
<td></td>
</tr>
<tr>
<td>多个组</td>
<td><code>webservers:dbservers</code></td>
<td>取两个组的 <strong>并集</strong>   <br/><em><strong>如果主机名和组名冲突，则以先出现的为准。</strong></em></td>
</tr>
<tr>
<td>排除组</td>
<td><code>webservers:!atlanta</code></td>
<td>所有在 <code>webservers</code> 组中，但是不在 <code>atlanta</code> 组中</td>
</tr>
<tr>
<td>组的交集</td>
<td>webservers:&amp;staging</td>
<td>any hosts in webservers that are also in staging</td>
</tr>
<tr>
<td>slice（切片操作）</td>
<td><code>webservers[0]</code> 第一个主机<br/><code>webservers[-1]</code>  最后一个主机<br/><code>webservers[0:2]</code> 第 1 个到第 3 个（包含）<br/> <code>webservers[1:]</code>  第 2 个到最后一个<br/><code>webservers[:3]</code> 第一个到第 4 个</td>
<td></td>
</tr>
<tr>
<td>正则表达式匹配</td>
<td>&#96;~(web</td>
<td>db).*.example.com<code>以</code>~&#96; 开头的匹配表达式表示使用正则匹配</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li>可以混用： <code>one*.com:dbservers</code></li>
<li><strong>如果 Inventory 中使用了别名（alias），必须使用别名来匹配</strong>。YAML 格式中明确使用了别名。</li>
</ul>
</blockquote>
<p>ansible 命令常用选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-m, --module-name</code></td>
<td>指定模块<br/><strong>默认为 <code>command</code></strong></td>
<td><code>ansible all -m ping </code></td>
</tr>
<tr>
<td><code>--become-user &#39;BECOME_USER&#39;</code></td>
<td>作，默认为 <code>root</code> &lt;br&#x2F;切换到指定的用户执行操&gt;<strong>需要配合 <code>-b, --become</code> 选项使用</strong></td>
<td><code>ansible all -m command -a &quot;ls /root/&quot; -b --become-user root</code></td>
</tr>
<tr>
<td><code>-b, --become</code></td>
<td>提升权限到 <code>root</code> 权限，需要用户有 <code>sudo</code> 权限</td>
<td></td>
</tr>
<tr>
<td><code>--list-hosts</code></td>
<td>列出 <code>pattern</code> 匹配的主机列表，不执行其他任何操作</td>
<td><code>ansible --list-hosts</code></td>
</tr>
<tr>
<td><code>-C, --check</code></td>
<td><code>Check mode</code>，不执行任何实际操作，而是对要执行的操作进行验证</td>
<td></td>
</tr>
<tr>
<td><code>-k, --ask-pass</code></td>
<td>询问连接密码</td>
<td></td>
</tr>
<tr>
<td><code>-o, --one-line</code></td>
<td>输出到一行里面</td>
<td></td>
</tr>
<tr>
<td><code>-f ,--forks</code></td>
<td>指定并发执行的数量，默认为 5</td>
<td></td>
</tr>
</tbody></table>
<h1 id="ansible-doc-使用"><a href="#ansible-doc-使用" class="headerlink" title="ansible-doc 使用"></a>ansible-doc 使用</h1><p><code>ansible-doc</code> 命令提供 Ansible 安装的模块的简要文档（帮助）信息，其帮助示例中的代码可以直接复制粘贴到 Playbook 中使用。</p>
<h1 id="ansible-常用模块"><a href="#ansible-常用模块" class="headerlink" title="ansible 常用模块"></a>ansible 常用模块</h1><h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><p><code>command</code> 是 ansible 默认的模块。<em><strong>command 模块不支持 shell 变量,也不支持管道&#x2F;重定向 等 shell 相关的功能.如果你想使用 shell 相关的这些功能, 请使用 <code>shell</code> 模块.</strong></em> <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Parallelism and Shell Commands](https://ansible-tran.readthedocs.io/en/latest/docs/intro_adhoc.html)">[2]</span></a></sup></p>
<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p><code>shell</code> 模块启动一个 <code>shell</code> 然后执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ansible raleigh -m shell -a <span class="string">&#x27;echo $TERM&#x27;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 Ansible ad hoc 命令行接口时(与使用 Playbooks 的情况相反)，尤其要注意 shell 引号的规则。<em><strong>比如在上面的例子中，如果使用双引号 <code>&quot;echo $TERM&quot;</code>，会求出 <code>TERM</code> 变量在当前系统的值，而我们实际希望的是把这个命令传递</strong></em> <em>到其它机器执行。</em></p>
</blockquote>
<h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>用来测试到目标服务器的连通性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible all -m ping</span></span><br><span class="line">[WARNING]: Invalid characters were found in group names but not replaced, use -vvvv to see details</span><br><span class="line">k8s-master1 | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).&quot;, </span><br><span class="line">    &quot;unreachable&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">[WARNING]: Platform linux on host k8s-uat-master2 is using the discovered Python interpreter at /usr/bin/python, but future installation of</span><br><span class="line">another Python interpreter could change this. See https://docs.ansible.com/ansible/2.9/reference_appendices/interpreter_discovery.html for more</span><br><span class="line">information.</span><br><span class="line">k8s-master2 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>使用 <code>setup</code> 模块，ansible 可以收集各个 Managed Hosts 的 <code>facts</code>，其中包含了 Managed Hosts 的很多元数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible k8s-master-nodes[0] -m setup</span></span><br><span class="line"></span><br><span class="line">k8s-uat-master1 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_all_ipv4_addresses&quot;: [</span><br><span class="line">            &quot;10.244.0.1&quot;, </span><br><span class="line">            &quot;172.31.30.123&quot;, </span><br><span class="line">            &quot;10.244.0.0&quot;, </span><br><span class="line">            &quot;172.17.0.1&quot;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_all_ipv6_addresses&quot;: [</span><br><span class="line">            &quot;fe80::84d:ccff:fe5f:56c5&quot;, </span><br><span class="line">            &quot;fe80::3c4a:4bff:fe20:512&quot;, </span><br><span class="line">            &quot;fe80::836:c2ff:fefb:e925&quot;, </span><br><span class="line">            &quot;fe80::146d:22ff:fe20:cf86&quot;</span><br><span class="line">        ], </span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>配合 <code>setup</code> 模块的 <code>filter</code> 参数，可以从输出中过滤出各种信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible fm-k8s-uat-master-nodes[0] -m setup -a <span class="string">&quot;filter=ansible_default_ipv4&quot;</span></span></span><br><span class="line">k8s-master1 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_default_ipv4&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;172.31.30.123&quot;, </span><br><span class="line">            &quot;alias&quot;: &quot;eth0&quot;, </span><br><span class="line">            &quot;broadcast&quot;: &quot;172.31.31.255&quot;, </span><br><span class="line">            &quot;gateway&quot;: &quot;172.31.16.1&quot;, </span><br><span class="line">            &quot;interface&quot;: &quot;eth0&quot;, </span><br><span class="line">            &quot;macaddress&quot;: &quot;0a:36:c2:fb:e9:25&quot;, </span><br><span class="line">            &quot;mtu&quot;: 9001, </span><br><span class="line">            &quot;netmask&quot;: &quot;255.255.240.0&quot;, </span><br><span class="line">            &quot;network&quot;: &quot;172.31.16.0&quot;, </span><br><span class="line">            &quot;type&quot;: &quot;ether&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Playbook 中可以使用 <code>ansible_facts</code> 变量直接引用 <code>facts</code></p>
<h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><p>修改主机名，<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/hostname_module.html#ansible-builtin-hostname-module-manage-hostname">官方文档说明</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- name: Set a hostname</span><br><span class="line">  ansible.builtin.hostname:</span><br><span class="line">    name: web01</span><br><span class="line"></span><br><span class="line">- name: Set a hostname specifying strategy</span><br><span class="line">  ansible.builtin.hostname:</span><br><span class="line">    name: web01</span><br><span class="line">    use: systemd</span><br></pre></td></tr></table></figure>

<h2 id="lineinfile"><a href="#lineinfile" class="headerlink" title="lineinfile"></a>lineinfile</h2><p>此模块用了确定给定的 <strong>一行内容</strong> 是否在指定文件中，或者替换文件中存在的 <strong>一行</strong> 内容。<strong>仅在需要修改单行内容时使用此模块</strong> <sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ansible.builtin.lineinfile module – Manage lines in text files](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html#ansible-builtin-lineinfile-module-manage-lines-in-text-files) ">[10]</span></a></sup> </p>
<p>如果需要对多行文本或者是整块文本做修改，可以参考 <code>ansible.builtin.blockinfile</code>、<code>ansible.builtin.replace</code>、<code>ansible.builtin.copy</code> or <code>ansible.builtin.template</code> 等模块</p>
<h2 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h2><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p><code>ansible.builtin.service</code> 管理远程主机上的服务状态。 <sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ansible.builtin.service](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/service_module.html#ansible-collections-ansible-builtin-service-module)">[11]</span></a></sup></p>
<ul>
<li><code>ansible.builtin.service</code> 模块相当于是底层服务管理工具（<code>systemd</code>、<code>sysvini</code> 等）的一个代理。默认情况会使用 <code>ansible.builtin.setup</code> 中发现的服务管理工具来管理远程主机上的服务状态。也可以使用 <code>use</code> 参数手动指定。</li>
<li><code>ansible.builtin.service</code> 中的参数不一定适用于所有的底层服务管理工具（<code>systemd</code>、<code>sysvini</code> 等）</li>
</ul>
<p>常用参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>name</code><br/><strong>string &#x2F; required</strong></td>
<td>服务名称</td>
<td></td>
</tr>
<tr>
<td><code>enabled</code><br/><strong>boolean</strong></td>
<td>服务是否要开机启动，可选值包括<br/>- <code>false</code><br/>- <code>true</code></td>
<td></td>
</tr>
<tr>
<td><code>state</code><br/><strong>string</strong></td>
<td>期望的（desired）服务状态。可选值包括：<br/>- <code>started</code> &#x2F; <code>stopped</code> : 如果服务状态已满足，不执行任何操作<br/>- <code>restarted</code>: 重启<br/>- <code>reloaded</code></td>
<td></td>
</tr>
<tr>
<td><code>use</code><br/><strong>string</strong></td>
<td>默认情况下，系统使用 <code>ansible_service_mgr</code> 中的服务管理工具。如果此值为空，则使用传统的 <code>service</code> 模块（命令）</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>除了 <code>name</code> 为必须的参数，<code>enabled</code> 和 <code>state</code> 至少要有一个存在</p>
</blockquote>
<h2 id="systemd-service"><a href="#systemd-service" class="headerlink" title="systemd_service"></a>systemd_service</h2><p><code>ansible.builtin.systemd_service</code> 管理 <code>systemd</code> 系统上的服务</p>
<p><code>ansible.builtin.systemd</code> 和 <code>ansible.builtin.systemd_service</code> 相同</p>
<p>常用参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>name</code><br/><strong>string &#x2F; required</strong></td>
<td>服务名称</td>
<td></td>
</tr>
<tr>
<td><code>enabled</code><br/><strong>boolean</strong></td>
<td>服务是否要开机启动，可选值包括<br/>- <code>false</code><br/>- <code>true</code></td>
<td></td>
</tr>
<tr>
<td><code>state</code><br/><strong>string</strong></td>
<td>期望的（desired）服务状态。可选值包括：<br/>- <code>started</code> &#x2F; <code>stopped</code> : 如果服务状态已满足，不执行任何操作<br/>- <code>restarted</code>: 重启<br/>- <code>reloaded</code></td>
<td></td>
</tr>
<tr>
<td><code>daemon_reexec</code><br/><strong>boolean</strong><br/>aliases: <code>systemctl daemon-reexec</code></td>
<td>在执行任何操作前，先执行 <code>systemctl daemon-reexec</code> 。<br/>默认值为 <code>false</code></td>
<td></td>
</tr>
<tr>
<td><code>daemon_reload</code><br/><strong>boolean</strong><br/>aliases: <code>systemctl daemon-reload</code></td>
<td>执行 <code>systemctl daemon-reload</code>。 <br/>默认值为 <code>false </code></td>
<td></td>
</tr>
</tbody></table>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="Permission-denied"><a href="#Permission-denied" class="headerlink" title="Permission denied"></a>Permission denied</h2><p>在以普通用户 ssh 登陆远程主机（Managed Host）的情况下，执行某些操作可能因为普通用户权限不足导致操作失败</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible my-hosts -m <span class="built_in">command</span> -a <span class="string">&quot;cat /root/.ssh/authorized_keys&quot;</span></span> </span><br><span class="line">k8s-master2 | FAILED | rc=1 &gt;&gt;</span><br><span class="line">cat: /root/.ssh/authorized_keys: Permission deniednon-zero return code</span><br><span class="line"></span><br><span class="line">k8s-master1 | FAILED | rc=1 &gt;&gt;</span><br><span class="line">cat: /root/.ssh/authorized_keys: Permission deniednon-zero return code</span><br><span class="line"></span><br><span class="line">k8s-master3 | FAILED | rc=1 &gt;&gt;</span><br><span class="line">cat: /root/.ssh/authorized_keys: Permission deniednon-zero return code</span><br></pre></td></tr></table></figure>

<p>此种情况，可以使用以下方式解决。***前提是远程登陆使用的用户具有 <a href="!--swig%EF%BF%BC28--"><code>sudo</code> 权限</a>***。建议使用 <code>-b</code> 选项。</p>
<ul>
<li>使用 <code>sudo</code> 命令。如果用户没有 <code>sudo</code> 权限，ansible 会被阻塞，后台等待用户输入 <code>sudo</code> 密码，直到等待超时失败。具体报错参考以下示例中的 <code>k8s-master2</code> 输出<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible my-hosts -m <span class="built_in">command</span> -a <span class="string">&quot;sudo cat /root/.ssh/authorized_keys&quot;</span></span> </span><br><span class="line">k8s-master1 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command=&quot;echo &#x27;Please login as the user \&quot;centos\&quot; rather than the user \&quot;root\&quot;.&#x27;;echo;sleep 10&quot; ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCGKLNMv82MQJUuQ9aZPsDofBj96aQlS1kNV2doSwyLatgMNBZ6rzgQuNOJ2DH87IzD1mZ0wL7iApvk6gkxSxcz5tmbU8dfYOYJdlBlhxGk2Nkg2V3P9FPC0hBY73szEV+1DUoqwl+COAsAXO9Uiebr0faQvWOkVT7pypunnjPrBBUaaXn2IcoPIdXZfXVLjXH2JbWSHL5J+yIGHewSMzZ/Xx7u6hwxUP0QLFHrnhD0WDukoBjoUZ2sshMP+DHgoyWjCg+uVpmjJAksp80f34WfNku5Grt90kYEj+N+x2JQ1Y4aQIXASIwDshicbJIsl+RMIMmwe+TElUJ6g9aa0qCr op2-east1-1031</span><br><span class="line">k8s-master3 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command=&quot;echo &#x27;Please login as the user \&quot;centos\&quot; rather than the user \&quot;root\&quot;.&#x27;;echo;sleep 10&quot; ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCGKLNMv82MQJUuQ9aZPsDofBj96aQlS1kNV2doSwyLatgMNBZ6rzgQuNOJ2DH87IzD1mZ0wL7iApvk6gkxSxcz5tmbU8dfYOYJdlBlhxGk2Nkg2V3P9FPC0hBY73szEV+1DUoqwl+COAsAXO9Uiebr0faQvWOkVT7pypunnjPrBBUaaXn2IcoPIdXZfXVLjXH2JbWSHL5J+yIGHewSMzZ/Xx7u6hwxUP0QLFHrnhD0WDukoBjoUZ2sshMP+DHgoyWjCg+uVpmjJAksp80f34WfNku5Grt90kYEj+N+x2JQ1Y4aQIXASIwDshicbJIsl+RMIMmwe+TElUJ6g9aa0qCr op2-east1-1031</span><br><span class="line"></span><br><span class="line">k8s-master2 | FAILED! =&gt; &#123;</span><br><span class="line">  &quot;ansible_facts&quot;: &#123;</span><br><span class="line">      &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;changed&quot;: false, </span><br><span class="line">  &quot;module_stderr&quot;: &quot;Shared connection to 172.31.30.115 closed.\r\n&quot;, </span><br><span class="line">  &quot;module_stdout&quot;: &quot;[sudo] password for centos: \r\n\r\n&#123;\&quot;changed\&quot;: true, \&quot;end\&quot;: \&quot;2023-09-01 09:24:40.247480\&quot;, \&quot;stdout\&quot;: \&quot;\&quot;, \&quot;cmd\&quot;: [\&quot;sudo\&quot;, \&quot;cat\&quot;, \&quot;/root/.ssh/authorized_keys\&quot;], \&quot;failed\&quot;: true, \&quot;delta\&quot;: \&quot;0:05:02.696092\&quot;, \&quot;stderr\&quot;: \&quot;\\nWe trust you have received the usual lecture from the local System\\nAdministrator. It usually boils down to these three things:\\n\\n    #1) Respect the privacy of others.\\n    #2) Think before you type.\\n    #3) With great power comes great responsibility.\\n\\nsudo: timed out reading password\&quot;, \&quot;rc\&quot;: 1, \&quot;invocation\&quot;: &#123;\&quot;module_args\&quot;: &#123;\&quot;creates\&quot;: null, \&quot;executable\&quot;: null, \&quot;_uses_shell\&quot;: false, \&quot;strip_empty_ends\&quot;: true, \&quot;_raw_params\&quot;: \&quot;sudo cat /root/.ssh/authorized_keys\&quot;, \&quot;removes\&quot;: null, \&quot;argv\&quot;: null, \&quot;warn\&quot;: true, \&quot;chdir\&quot;: null, \&quot;stdin_add_newline\&quot;: true, \&quot;stdin\&quot;: null&#125;&#125;, \&quot;start\&quot;: \&quot;2023-09-01 09:19:37.551388\&quot;, \&quot;warnings\&quot;: [\&quot;Consider using &#x27;become&#x27;, &#x27;become_method&#x27;, and &#x27;become_user&#x27; rather than running sudo\&quot;], \&quot;msg\&quot;: \&quot;non-zero return code\&quot;&#125;\r\n&quot;, </span><br><span class="line">  &quot;msg&quot;: &quot;MODULE FAILURE\nSee stdout/stderr for the exact error&quot;, </span><br><span class="line">  &quot;rc&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用 <code>ansible -b</code> 选项。如果用户没有 <code>sudo</code> 权限， ansible 会因为没有输入 <code>sudo</code> 密码而执行失败，具体报错（<code>Missing sudo password</code>）参考以下示例中的 <code>k8s-master2</code> 输出<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible my-hosts -m <span class="built_in">command</span> -a <span class="string">&quot;cat /root/.ssh/authorized_keys&quot;</span> -b</span></span><br><span class="line">k8s-master2 | FAILED | rc=-1 &gt;&gt;</span><br><span class="line">Missing sudo password</span><br><span class="line"></span><br><span class="line">k8s-master1 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command=&quot;echo &#x27;Please login as the user \&quot;centos\&quot; rather than the user \&quot;root\&quot;.&#x27;;echo;sleep 10&quot; ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCGKLNMv82MQJUuQ9aZPsDofBj96aQlS1kNV2doSwyLatgMNBZ6rzgQuNOJ2DH87IzD1mZ0wL7iApvk6gkxSxcz5tmbU8dfYOYJdlBlhxGk2Nkg2V3P9FPC0hBY73szEV+1DUoqwl+COAsAXO9Uiebr0faQvWOkVT7pypunnjPrBBUaaXn2IcoPIdXZfXVLjXH2JbWSHL5J+yIGHewSMzZ/Xx7u6hwxUP0QLFHrnhD0WDukoBjoUZ2sshMP+DHgoyWjCg+uVpmjJAksp80f34WfNku5Grt90kYEj+N+x2JQ1Y4aQIXASIwDshicbJIsl+RMIMmwe+TElUJ6g9aa0qCr op2-east1-1031</span><br><span class="line">[WARNING]: Platform linux on host k8s-uat-master3 is using the discovered Python interpreter at /usr/bin/python, but future installation of</span><br><span class="line">another Python interpreter could change this. See https://docs.ansible.com/ansible/2.9/reference_appendices/interpreter_discovery.html for more</span><br><span class="line">information.</span><br><span class="line">k8s-master3 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command=&quot;echo &#x27;Please login as the user \&quot;centos\&quot; rather than the user \&quot;root\&quot;.&#x27;;echo;sleep 10&quot; ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCGKLNMv82MQJUuQ9aZPsDofBj96aQlS1kNV2doSwyLatgMNBZ6rzgQuNOJ2DH87IzD1mZ0wL7iApvk6gkxSxcz5tmbU8dfYOYJdlBlhxGk2Nkg2V3P9FPC0hBY73szEV+1DUoqwl+COAsAXO9Uiebr0faQvWOkVT7pypunnjPrBBUaaXn2IcoPIdXZfXVLjXH2JbWSHL5J+yIGHewSMzZ/Xx7u6hwxUP0QLFHrnhD0WDukoBjoUZ2sshMP+DHgoyWjCg+uVpmjJAksp80f34WfNku5Grt90kYEj+N+x2JQ1Y4aQIXASIwDshicbJIsl+RMIMmwe+TElUJ6g9aa0qCr op2-east1-1031</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Connection-timed-out"><a href="#Connection-timed-out" class="headerlink" title="Connection timed out"></a>Connection timed out</h2><p>使用以下 playbook 报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- name: manage Nginx Status</span><br><span class="line">  hosts: nginx</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">  - name: Ensure that nginx is started</span><br><span class="line">    ansible.builtin.service:</span><br><span class="line">      name: nginx  </span><br><span class="line">      enabled: false</span><br><span class="line">      state: stopped</span><br></pre></td></tr></table></figure>

<p>执行结果如下，报错： <code>&#123;&quot;changed&quot;: false, &quot;msg&quot;: &quot;Unable to disable service nginx: Failed to execute operation: Connection timed out\n&quot;&#125;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ansible-playbook -vv  --diff playbooks/playbook.yml</span></span><br><span class="line"></span><br><span class="line">PLAYBOOK: playbook.yml **************************************************************************************************************************************</span><br><span class="line">1 plays in playbooks/playbook.yml</span><br><span class="line"></span><br><span class="line">PLAY [manage Nginx Status] **********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **************************************************************************************************************************************</span><br><span class="line">task path: /etc/ansible/playbooks/playbook.yml:2</span><br><span class="line">ok: [nginx_2]</span><br><span class="line"></span><br><span class="line">TASK [Ensure that nginx is started] *************************************************************************************************************************</span><br><span class="line">task path: /etc/ansible/playbooks/playbook.yml:8</span><br><span class="line">fatal: [nginx_2]: FAILED! =&gt; &#123;&quot;changed&quot;: false, &quot;msg&quot;: &quot;Unable to disable service nginx: Failed to execute operation: Connection timed out\n&quot;&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP **************************************************************************************************************************************************</span><br><span class="line">nginx_2        : ok=1    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></table></figure>

<p><strong>问题原因</strong> 是此操作需要 <code>sudo</code> 权限来运行。参考以下内容，加入 <code>become: true</code> 指令即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- name: manage Nginx Status</span><br><span class="line">  hosts: nginx</span><br><span class="line">  become: true</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">  - name: Ensure that nginx is started</span><br><span class="line">    ansible.builtin.service:</span><br><span class="line">      name: nginx  </span><br><span class="line">      enabled: false</span><br><span class="line">      state: stopped</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#control-node-requirements">ansible 官方文档</a><br><a href="https://ansible-tran.readthedocs.io/en/latest/docs/intro_adhoc.html">Ansible中文权威指南</a><br><a href="https://docs.ansible.com/ansible/latest/collections/index_module.html">Index of all Modules</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/reference_appendices/release_and_maintenance.html#ansible-core-control-node-python-support">ansible-core control node Python support</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://ansible-tran.readthedocs.io/en/latest/docs/intro_adhoc.html">Parallelism and Shell Commands</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#how-to-build-your-inventory">How to build your inventory</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#managing-inventory-load-order">Managing inventory load order</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#how-variables-are-merged">How variables are merged</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters">Connecting to hosts: behavioral inventory parameters</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#organizing-host-and-group-variables">Organizing host and group variables</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_patterns.html#common-patterns">Common patterns</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/inventory_guide/connection_details.html#setting-a-remote-user">Setting a remote user</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html#ansible-builtin-lineinfile-module-manage-lines-in-text-files">ansible.builtin.lineinfile module – Manage lines in text files</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/service_module.html#ansible-collections-ansible-builtin-service-module">ansible.builtin.service</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Apollo 配置中心服务使用说明</title>
    <url>/202211021332/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 kernel 5.4</li>
<li>Apollo 2.0.1</li>
<li>Mysql 5.7</li>
<li>Java 1.8</li>
</ul>
<h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><h2 id="分布式部署"><a href="#分布式部署" class="headerlink" title="分布式部署"></a>分布式部署</h2><h3 id="部署服务器信息说明"><a href="#部署服务器信息说明" class="headerlink" title="部署服务器信息说明"></a>部署服务器信息说明</h3><table>
<thead>
<tr>
<th>环境</th>
<th>服务器</th>
<th>服务</th>
<th>端口</th>
</tr>
</thead>
<tbody><tr>
<td><code>pro</code></td>
<td>172.31.88.1</td>
<td>apollo-portal</td>
<td>8070</td>
</tr>
<tr>
<td><code>pro</code></td>
<td>172.31.88.1</td>
<td>数据库 ApolloPortalDB</td>
<td>3306</td>
</tr>
<tr>
<td><code>pro</code></td>
<td>172.31.88.1</td>
<td>apollo-configservice</td>
<td>8080</td>
</tr>
<tr>
<td><code>pro</code></td>
<td>172.31.88.1</td>
<td>apollo-adminservice</td>
<td>8090</td>
</tr>
<tr>
<td><code>pro</code></td>
<td>172.31.88.1</td>
<td>数据库ApolloConfigDB</td>
<td>3306</td>
</tr>
<tr>
<td><code>pro</code></td>
<td>172.31.82.2</td>
<td>apollo-configservice</td>
<td>8080</td>
</tr>
<tr>
<td><code>pro</code></td>
<td>172.31.82.2</td>
<td>apollo-adminservice</td>
<td>8090</td>
</tr>
<tr>
<td><code>uat</code></td>
<td>172.31.83.3</td>
<td>apollo-configservice</td>
<td>8080</td>
</tr>
<tr>
<td><code>uat</code></td>
<td>172.31.83.3</td>
<td>apollo-adminservice</td>
<td>8090</td>
</tr>
<tr>
<td><code>uat</code></td>
<td>172.31.83.3</td>
<td>数据库ApolloConfigDB</td>
<td>3306</td>
</tr>
</tbody></table>
<p>其中 <code>172.31.88.1</code>、<code>172.31.82.2</code> 为 <code>pro</code> 环境的高可用节点。<code>172.31.83.3</code> 为 <code>uat</code> 环境的单节点。</p>
<p><code>apollo-portal</code> 和 <code>ApolloPortalDB</code> 部署在 <code>pro</code> 环境，<code>uat</code> 环境共用 <code>apollo-portal</code> 和 <code>ApolloPortalDB</code>。</p>
<span id="more"></span>
<h3 id="安装-Java"><a href="#安装-Java" class="headerlink" title="安装 Java"></a>安装 Java</h3><p>在所有节点上安装 java-1.8.0</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk</span><br></pre></td></tr></table></figure>
<p>验证 java 安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">java -version</span></span><br><span class="line">openjdk version &quot;1.8.0_352&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_352-b08)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.352-b08, mixed mode)</span><br></pre></td></tr></table></figure>

<h3 id="下载-Apollo-源码包"><a href="#下载-Apollo-源码包" class="headerlink" title="下载 Apollo 源码包"></a>下载 Apollo 源码包</h3><p><a href="https://github.com/apolloconfig/apollo/releases/tag/v2.0.1">下载地址</a>，<code>apollo-portal</code> 只需要在 portal 服务器下载，<code>apollo-adminservice</code> 和 <code>apollo-configservice</code> 需要在所有节点上下载<br><img src="https://i.csms.tech/img_79.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/apolloconfig/apollo/releases/download/v2.0.1/apollo-adminservice-2.0.1-github.zip </span><br><span class="line">wget https://github.com/apolloconfig/apollo/releases/download/v2.0.1/apollo-configservice-2.0.1-github.zip</span><br><span class="line">wget https://github.com/apolloconfig/apollo/releases/download/v2.0.1/apollo-portal-2.0.1-github.zip</span><br></pre></td></tr></table></figure>

<p>解压源码包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip apollo-adminservice-2.0.1-github.zip -d apollo-adminservice-2.0.1</span><br><span class="line">unzip apollo-configservice-2.0.1-github.zip -d apollo-configservice-2.0.1</span><br><span class="line">unzip apollo-portal-2.0.1-github.zip -d apollo-portal-2.0.1</span><br></pre></td></tr></table></figure>


<h3 id="准备数据库"><a href="#准备数据库" class="headerlink" title="准备数据库"></a>准备数据库</h3><p>Apollo 服务端共需要两个数据库：<code>ApolloPortalDB</code> 和 <code>ApolloConfigDB</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[创建数据库](https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_21-%e5%88%9b%e5%bb%ba%e6%95%b0%e6%8d%ae%e5%ba%93)">[1]</span></a></sup></p>
<p>需要注意的是 <code>ApolloPortalDB</code> 只需要在 <code>pro</code> 环境部署一个即可，而 <code>ApolloConfigDB</code> 需要在每个环境部署一套，如 <code>fat</code>、<code>uat</code> 和 <code>pro</code> 分别部署 3 套 <code>ApolloConfigDB</code>。</p>
<p>在 <code>pro</code> 环境的数据库服务器上下载 <code>apolloportaldb.sql</code> 并导入数据库 </p>
<p>在 <code>pro</code> 环境的数据库服务器上下载 <code>apolloconfigdb.sql</code> 并导入数据库 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[apolloportaldb.sql](https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_21-%e5%88%9b%e5%bb%ba%e6%95%b0%e6%8d%ae%e5%ba%93)
">[2]</span></a></sup></p>
<p>在 <code>uat</code> 环境的数据库服务器上下载 <code>apolloconfigdb.sql</code> 并导入数据库</p>
<p>调整 <code>ApolloPortalDB.ServerConfig</code> 表的数据，<code>portal</code> 默认支持的环境是 <code>DEV</code>，若需要支持其它环境，需要修改 <code>apollo.portal.envs</code> 的值，默认值是 <code>DEV</code>，修改为以下值，表示支持 <code>UAT</code>、<code>PRO</code><br><img src="https://i.csms.tech/img_80.png"></p>
<p>因为 <code>PRO</code> 环境有多个节点，需要调整 <code>PRO</code> 环境的数据库表 <code>ApolloConfigDB.ServerConfig</code>，修改 <code>eureka.service.url</code> 的值为当前 <code>PRO</code> 环境的 <code>apollo-configservice</code> 的地址和端口，注意多个地址之间用英文逗号隔开。<br><img src="https://i.csms.tech/img_81.png"><br><code>UAT</code> 环境只有一个节点，<code>eureka.service.url</code> 使用默认的 <code>localhost</code> 即可。 </p>
<h3 id="部署-Apollo"><a href="#部署-Apollo" class="headerlink" title="部署 Apollo"></a>部署 Apollo</h3><h4 id="部署-apollo-configservice"><a href="#部署-apollo-configservice" class="headerlink" title="部署 apollo-configservice"></a>部署 apollo-configservice</h4><h5 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h5><p>修改各节点上的 <code>apollo-configservice-2.0.1/config/application-github.properties</code> 文件，修改其中的数据库连接为当前环境的数据库信息。</p>
<figure class="highlight shell"><figcaption><span>apollo-configservice-2.0.1/config/application-github.properties</span></figcaption><table><tr><td class="code"><pre><span class="line">spring.datasource.url = jdbc:mysql://apollo.mysql:3306/ApolloConfigDB?characterEncoding=utf8</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = WayWb+5Pw==</span><br></pre></td></tr></table></figure>

<h5 id="启动-apollo-configservice"><a href="#启动-apollo-configservice" class="headerlink" title="启动 apollo-configservice"></a>启动 apollo-configservice</h5><p>默认的启动端口是 <code>8080</code>，若要修改，则将 <code>scripts/startup.sh</code> 中的 <code>SERVER_PORT=$&#123;SERVER_PORT:=8080&#125;</code> 的 <code>8080</code> 改成指定的端口即可。</p>
<p>执行 <code>scripts/startup.sh</code> 启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./scripts/startup.sh</span></span><br><span class="line">Thu Nov  3 09:56:08 CST 2022 ==== Starting ==== </span><br><span class="line">Application is running as root (UID 0). This is considered insecure.</span><br><span class="line">Started [22197]</span><br><span class="line">Waiting for server startup...</span><br><span class="line">Thu Nov  3 09:56:23 CST 2022 Server started in 15 seconds!</span><br></pre></td></tr></table></figure>

<p>启动之后检查端口 <code>8080</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -anutp | grep LIST</span></span><br><span class="line">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      612/rpcbind         </span><br><span class="line">tcp        0      0 0.0.0.0:30000           0.0.0.0:*               LISTEN      2595/sshd           </span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      21960/mysqld        </span><br><span class="line">tcp6       0      0 :::111                  :::*                    LISTEN      612/rpcbind         </span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      22197/java          </span><br><span class="line">tcp6       0      0 :::30000                :::*                    LISTEN      2595/sshd</span><br></pre></td></tr></table></figure>

<h4 id="部署-apollo-adminservice"><a href="#部署-apollo-adminservice" class="headerlink" title="部署 apollo-adminservice"></a>部署 apollo-adminservice</h4><h5 id="配置数据库连接-1"><a href="#配置数据库连接-1" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h5><p>修改各节点上的 <code>apollo-adminservice-2.0.1/config/application-github.properties</code>，修改其中的数据库连接为当前环境的数据库信息。</p>
<figure class="highlight shell"><figcaption><span>apollo-adminservice-2.0.1/config/application-github.properties</span></figcaption><table><tr><td class="code"><pre><span class="line">spring.datasource.url = jdbc:mysql://apollo.mysql:3306/ApolloConfigDB?characterEncoding=utf8</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = 1roAYNg==</span><br></pre></td></tr></table></figure>
<h5 id="启动-apollo-adminservice"><a href="#启动-apollo-adminservice" class="headerlink" title="启动 apollo-adminservice"></a>启动 apollo-adminservice</h5><p>默认的启动端口是 <code>8090</code>，若要修改，则将 <code>scripts/startup.sh</code> 中的 <code>SERVER_PORT=$&#123;SERVER_PORT:=8090&#125;</code> 的 <code>8090</code> 改成指定的端口即可。</p>
<p>执行 <code>scripts/startup.sh</code> 启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./scripts/startup.sh</span></span><br><span class="line">Thu Nov  3 10:06:05 CST 2022 ==== Starting ==== </span><br><span class="line">Application is running as root (UID 0). This is considered insecure.</span><br><span class="line">Started [22818]</span><br><span class="line">Waiting for server startup...</span><br><span class="line">Thu Nov  3 10:06:21 CST 2022 Server started in 15 seconds!</span><br></pre></td></tr></table></figure>

<h4 id="部署-apollo-portal"><a href="#部署-apollo-portal" class="headerlink" title="部署 apollo-portal"></a>部署 apollo-portal</h4><h5 id="配置数据库连接-2"><a href="#配置数据库连接-2" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h5><p>修改 <code>apollo-portal</code> 节点上的 <code>apollo-portal-2.0.1/config/application-github.properties</code>，修改其中的数据库连接为 <code>ApolloPortalDB</code> 的数据库信息。</p>
<figure class="highlight shell"><figcaption><span>apollo-portal-2.0.1/config/application-github.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DataSource</span></span><br><span class="line">spring.datasource.url = jdbc:mysql://pro.env.apollo.mysql:3306/ApolloPortalDB?characterEncoding=utf8</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = WayWwRDNEb+5Pw==</span><br></pre></td></tr></table></figure>

<h5 id="配置-meta-service-信息"><a href="#配置-meta-service-信息" class="headerlink" title="配置 meta service 信息"></a>配置 meta service 信息</h5><p><code>meta service</code> 的地址和端口，默认就是 <code>apollo-configservice</code> 的地址和端口。</p>
<p>修改 <code>apollo-portal-2.0.1/config/apollo-env.properties</code>，填写当前的 <code>apollo-portal</code> 要管理的环境的 <code>apollo-configservice</code> 的地址和端口，多个地址之间用英文逗号隔开</p>
<figure class="highlight shell"><figcaption><span>apollo-portal-2.0.1/config/apollo-env.properties</span></figcaption><table><tr><td class="code"><pre><span class="line">pro.meta=http://172.31.81.1:8080,http://172.31.82.2:8080</span><br><span class="line">uat.meta=http://172.31.83.3:8080</span><br></pre></td></tr></table></figure>

<h5 id="启动-apollo-portal"><a href="#启动-apollo-portal" class="headerlink" title="启动 apollo-portal"></a>启动 apollo-portal</h5><p>默认的启动端口是 <code>8070</code> ，若要修改，则将 <code>scripts/startup.sh</code> 中的 <code>SERVER_PORT=$&#123;SERVER_PORT:=8070&#125;</code> 的 <code>8070</code> 改成指定的端口即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./scripts/startup.sh</span> </span><br><span class="line">Thu Nov  3 10:23:32 CST 2022 ==== Starting ==== </span><br><span class="line">Application is running as root (UID 0). This is considered insecure.</span><br><span class="line">Started [23044]</span><br><span class="line">Waiting for server startup...</span><br><span class="line">Thu Nov  3 10:23:47 CST 2022 Server started in 15 seconds!</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="部署后检查是否成功"><a href="#部署后检查是否成功" class="headerlink" title="部署后检查是否成功"></a>部署后检查是否成功</h3><h4 id="apollo-configservice-和-apollo-adminservice-检查"><a href="#apollo-configservice-和-apollo-adminservice-检查" class="headerlink" title="apollo-configservice 和 apollo-adminservice 检查"></a>apollo-configservice 和 apollo-adminservice 检查</h4><ol>
<li><p>在浏览器上登录当前环境的其中一个 <code>apollo-configservice</code> 的 <code>http://ip:port</code></p>
</li>
<li><p>查看该环境的 <code>apollo-configservice</code> 和 <code>apollo-adminservice</code> 的节点数是否正常。<br> 比如 <code>PRO</code> 环境有 2 个节点，输出中正常情况下会显示 2 个正常的节点<br> <img src="https://i.csms.tech/img_82.png"></p>
</li>
</ol>
<h4 id="apollo-portal-检查"><a href="#apollo-portal-检查" class="headerlink" title="apollo-portal 检查"></a>apollo-portal 检查</h4><ol>
<li>浏览器登录 <code>apollo-portal</code> 的 <code>http://ip:port</code>，默认账号 <code>apollo</code>，密码 <code>admin</code>。</li>
</ol>
<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="修改默认管理员-apollo-的密码"><a href="#修改默认管理员-apollo-的密码" class="headerlink" title="修改默认管理员 apollo 的密码"></a>修改默认管理员 apollo 的密码</h2><p>默认管理员 <code>apollo</code> 的密码为 <code>admin</code>，要修改此密码，在 <code>管理员工具</code> -&gt; <code>用户管理</code> 中输入用户名和密码，如果用户已存在，更新用户信息，用户不存在，则创建新用户。</p>
<h2 id="创建部门"><a href="#创建部门" class="headerlink" title="创建部门"></a>创建部门</h2><p>只有管理员才能创建部门，在 <code>管理员工具</code> -&gt; <code>系统参数</code> 中查询 <code>organizations</code>，会输出当前的部门信息<br><img src="https://i.csms.tech/img_83.png"><br>修改此参数并保存，即可更新部门信息。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.apolloconfig.com/#/zh/design/apollo-introduction">Apollo 配置中心介绍</a></p>
<p><a href="https://blog.csdn.net/werewolf2017/article/details/109120336">Apollo分布式配置中心集群部署</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_21-%e5%88%9b%e5%bb%ba%e6%95%b0%e6%8d%ae%e5%ba%93">创建数据库</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_21-%e5%88%9b%e5%bb%ba%e6%95%b0%e6%8d%ae%e5%ba%93">apolloportaldb.sql</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Apollo</tag>
      </tags>
  </entry>
  <entry>
    <title>awk 使用示例</title>
    <url>/202208031132/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>awk 是一种编程语言，用于在linux&#x2F;unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux&#x2F;unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。  </p>
<span id="more"></span>

<h3 id="awk-脚本基本结构"><a href="#awk-脚本基本结构" class="headerlink" title="awk 脚本基本结构"></a>awk 脚本基本结构</h3><p><code>awk &#39;BEGIN&#123; commands &#125; pattern&#123; commands &#125; END&#123; commands &#125;&#39;</code>  </p>
<p>一个awk脚本通常由：<strong>BEGIN语句块</strong>、<strong>能够使用模式匹配的通用语句块</strong>、<strong>END语句块</strong> 3部分组成，这三个部分是可选的。任意一个部分都可以不出现在脚本中，脚本通常是被放置在 <strong>单引号</strong> 中  </p>
<h3 id="awk-的工作原理"><a href="#awk-的工作原理" class="headerlink" title="awk 的工作原理"></a>awk 的工作原理</h3><ol>
<li>执行 <code>BEGIN&#123; commands &#125;</code> 语句块中的语句；  </li>
<li>从文件或标准输入(stdin)读取一行，然后执行 <code>pattern&#123; commands &#125;</code> 语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。  </li>
<li>当读至输入流末尾时，执行 <code>END&#123; commands &#125;</code> 语句块。</li>
</ol>
<p><code>BEGIN语句块</code> 在awk开始从输入流中读取行 <strong>之前</strong> 被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中  </p>
<p><code>END语句块</code> 在awk从输入流中读取完所有的行 <strong>之后</strong> 即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块。  </p>
<p><code>pattern语句块</code> 中的通用命令是最重要的部分，它也是可选的。如果没有提供<code>pattern语句块</code>，则默认执行 <code>&#123; print &#125;</code>，即打印每一个读取到的行，<strong>awk读取的每一行都会执行该语句块</strong>。 </p>
<h3 id="awk-内置变量（预定义变量）"><a href="#awk-内置变量（预定义变量）" class="headerlink" title="awk 内置变量（预定义变量）"></a>awk 内置变量（预定义变量）</h3><table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">说明</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$0</td>
<td align="left">当前行的整行内容</td>
<td align="left"><code>&#39;&#123;print $0&#125;&#39;</code> 打印出当前处理行的整行内容</td>
</tr>
<tr>
<td align="left">$n</td>
<td align="left">当前记录（行）的第n个字段</td>
<td align="left"><code>&#39;&#123;print $1&#125;&#39;</code> 打印出当前行的第1个字段</td>
</tr>
<tr>
<td align="left">NR</td>
<td align="left">当前处理行的行号（第多少行）</td>
<td align="left"><code>&#39;&#123;print NR,$1&#125;&#39; END&#123;print NR&#125;</code> 打印出当前处理行的行号和第1列，最后打印出总的行号</td>
</tr>
<tr>
<td align="left">FNR</td>
<td align="left">当前处理行在当前处理文件中的行号，只有1个输入文件时，NR&#x3D;FNR</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">NF</td>
<td align="left">当前行的字段数</td>
<td align="left"><code>&#39;&#123;print NF,$NF,$(NF-1)&#125;&#39;</code>  输出当前行的字段数，最后一个字段 ,倒数第2个字段</td>
</tr>
<tr>
<td align="left">FILENAME</td>
<td align="left">当前输入文件的文件名，<code>-</code>表示stdin</td>
<td align="left"><code>&#39;&#123;print FILENAME,FNR&#125;&#39;</code> 打印当前处理的文件名及当前行号</td>
</tr>
<tr>
<td align="left">FS</td>
<td align="left">输入字段分隔符，等同于选项 <code>-F</code> ,默认为空格</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">OFS</td>
<td align="left">输出字段的分隔符，默认为空格</td>
<td align="left"><code>&#39;BEGIN&#123;OFS=&quot;|&quot;&#125; &#123;print FILENAME,FS,NR,NF,$2,$NF&#125;&#39;</code> 输出结果将会以 <code>|</code> 分割</td>
</tr>
<tr>
<td align="left">RS</td>
<td align="left">输入记录分隔符（行分隔符），默认为换行</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ORS</td>
<td align="left">输出记录分隔符（行分隔符），默认为换行</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="awk-常用选项"><a href="#awk-常用选项" class="headerlink" title="awk 常用选项"></a>awk 常用选项</h3><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-F&quot;sep&quot;</code><br/><code>-F&quot;[,.]&quot;</code></td>
<td>等同于内置变量 <code>FS</code>，有2种格式：<br/><code>-F&quot;sep&quot;</code> 使用 <code>sep</code> 整体作为字段分隔符<br/> <code>-F[,.]</code>  <code>[]</code>其中的每个字符都可以作为分隔符<br/>等同于<code>BEGIN</code>预定义变量<code>FS</code></td>
<td></td>
</tr>
<tr>
<td><code>-v var=1</code></td>
<td>传递用户自定义变量给awk</td>
<td><code>awk -va=1 -vb=2 &#39;&#123;print a+b&#125;&#39;</code></td>
</tr>
</tbody></table>
<h3 id="awk-常用运算符"><a href="#awk-常用运算符" class="headerlink" title="awk 常用运算符"></a>awk 常用运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;<br/>+&#x3D;<br/> -&#x3D;<br/> *&#x3D;<br/> &#x2F;&#x3D;<br/> %&#x3D;<br/> ^&#x3D;<br/> **&#x3D;</td>
<td>赋值</td>
<td></td>
</tr>
<tr>
<td><code>~</code><br/><code>!~</code></td>
<td>匹配正则表达式<br/>不匹配正则表达式</td>
<td><code>awk &#39;$2 ~ /th/ &#123;print $2,$4&#125;&#39; log.txt</code> 第2列中包含’th’，则输出第2,4列<br/><code>awk &#39;BEGIN&#123;IGNORECASE=1&#125; /this/&#39; log.txt</code>    忽略大小写匹配 <br/><code>awk &#39;$2 !~ /th/ &#123;print $2,$4&#125;&#39; log.txt</code> 不匹配正则表达式</td>
</tr>
<tr>
<td>&lt; <br/>&lt;&#x3D;<br/> &gt;<br/> &gt;&#x3D;<br/> !&#x3D; <br/>&#x3D;&#x3D;</td>
<td>关系运算符</td>
<td><code>awk &#39;$1&gt;2&#39; log.txt</code>  第1列的值大于2，输出整行<br/><code>awk &#39;$1==2 &#123;print $1,$3&#125;&#39; log.txt</code> 第1列的值等于2，则输出第1,3列</td>
</tr>
<tr>
<td>+<br/>-<br/>*<br/>&#x2F;<br/>%<br/></td>
<td>加，减，乘，除与求余</td>
<td></td>
</tr>
<tr>
<td>+ <br/>- <br/>!</td>
<td>一元加，减和逻辑非</td>
<td></td>
</tr>
<tr>
<td>| |</td>
<td>逻辑或</td>
<td></td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>逻辑与</td>
<td><code>awk &#39;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; &#123;print $1,$2,$3&#125;&#39; log.txt </code>  第1列大于2，并且第2列等于”Are”,则输出第1,2,3列</td>
</tr>
</tbody></table>
<h3 id="awk-常用用法示例"><a href="#awk-常用用法示例" class="headerlink" title="awk 常用用法示例"></a>awk 常用用法示例</h3><h4 id="每一行中第个字段值累加"><a href="#每一行中第个字段值累加" class="headerlink" title="每一行中第个字段值累加"></a>每一行中第个字段值累加</h4><figure class="highlight shell"><figcaption><span>awk</span></figcaption><table><tr><td class="code"><pre><span class="line">seq 1 10 | awk &#x27;BEGIN&#123;sum=0;print &quot;第1列求和&quot;&#125;&#123;sum+=$1&#125;END&#123;print &quot;sum=&quot;sum&#125;&#x27;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第1列求和<br>sum&#x3D;55</p>
</blockquote>
<h4 id="判断2列的内容是否相同"><a href="#判断2列的内容是否相同" class="headerlink" title="判断2列的内容是否相同"></a>判断2列的内容是否相同</h4><figure class="highlight shell"><figcaption><span>awk</span></figcaption><table><tr><td class="code"><pre><span class="line">awk &#x27;&#123;if($1==$2)&#123;print $1&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="找出字段数-列数-大于3的行"><a href="#找出字段数-列数-大于3的行" class="headerlink" title="找出字段数(列数)大于3的行"></a>找出字段数(列数)大于3的行</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;NF&gt;3&#123;print $0&#125;&#x27;</span> </span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://wangchujiang.com/linux-command/c/awk.html">参考文章</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title>aws cli 命令用法</title>
    <url>/202301171752/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>aws-cli&#x2F;2.9.15</li>
</ul>
<p><a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/getting-started-install.html">aws cli 安装更新说明</a></p>
<p><a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-configure-quickstart.html">aws cli 基础配置及说明</a></p>
<h1 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h1><p>查看 <code>aws</code> 帮助信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aws help</span><br></pre></td></tr></table></figure>
<p>查看子命令帮助信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aws ec2 help</span><br></pre></td></tr></table></figure>

<p>配置认证信息时指定鉴权信息对应的 Profile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aws configure --profile source-account</span><br></pre></td></tr></table></figure>

<p><code>aws</code> 命令常用选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--region</code></td>
<td>指定区域，<a href="https://docs.aws.amazon.com/zh_cn/general/latest/gr/rande.html">aws 区域列表</a></td>
<td><code>aws --region ap-east-1 ec2 describe-instances</code></td>
</tr>
<tr>
<td><code>--profile</code></td>
<td>指定配置文件名称。<strong>当需要同时操作多个账号上面的 S3 目标时，可以为每个账号指定 profile 名称，在后续操作时使用选项 <code>--profile</code> 指定要使用的 Profile</strong></td>
<td></td>
</tr>
</tbody></table>
<span id="more"></span>
<h2 id="EC2"><a href="#EC2" class="headerlink" title="EC2"></a>EC2</h2><h3 id="获取实例信息"><a href="#获取实例信息" class="headerlink" title="获取实例信息"></a>获取实例信息</h3><p>此操作至少需要以下权限：</p>
<ul>
<li><code>EC2.DescribeInstances</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aws --region ap-east-1 ec2 describe-instances</span><br></pre></td></tr></table></figure>

<p>筛选输出，只获取 <code>instance-id</code>，使用 <code>--query</code> 选项可能造成部分机器无法被包含在输出中，导致统计机器缺失，最好使用 <code>aws --region ap-east-1 ec2 describe-instances</code> 获取指定区域的所有机器后手动进行筛选。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aws ec2 describe-instances --region ap-east-1 --query Reservations[*].Instances[*].InstanceId --output text</span><br></pre></td></tr></table></figure>

<p>通过选项 <code>--query</code> 可以对输出进行筛选，只输出指定内容。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[aws cli 输出结果筛选](https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-usage-filter.html)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">aws ec2 describe-instances --region ap-east-1 \</span></span><br><span class="line"><span class="language-bash">        --query Reservations[*].Instances[*].[InstanceId,InstanceType,KeyName,PublicIpAddress] --output text</span></span><br><span class="line">i-0904c5ba08     c5.large        t1  16.162.77.1</span><br><span class="line">i-09f7765e86     c5.large        t2  16.162.181.4</span><br><span class="line">i-0bc892a5b0     c5.xlarge       t3  16.162.229.5 </span><br></pre></td></tr></table></figure>

<p>通过选项 <code>--query</code> 获取实例 Name</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">aws ec2 describe-instances --region ap-east-1 \</span></span><br><span class="line"><span class="language-bash">             --query Reservations[*].Instances[*].[InstanceId,Tags[*],PublicIpAddress,BlockDeviceMappings[*].Ebs.VolumeId][0] --output json</span></span><br><span class="line">             </span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        &quot;i-0904c5ba087f0b07c&quot;,</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Key&quot;: &quot;name&quot;,</span><br><span class="line">                &quot;Value&quot;: &quot;t1&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Key&quot;: &quot;Name&quot;,</span><br><span class="line">                &quot;Value&quot;: &quot;test1&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;16.162.77.243&quot;,</span><br><span class="line">        [</span><br><span class="line">            &quot;vol-05940c72f51db924c&quot;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        &quot;i-09f7765e863bbc0f0&quot;,</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Key&quot;: &quot;Name&quot;,</span><br><span class="line">                &quot;Value&quot;: &quot;t2&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Key&quot;: &quot;luodiye1&quot;,</span><br><span class="line">                &quot;Value&quot;: &quot;test2&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;16.162.181.48&quot;,</span><br><span class="line">        [</span><br><span class="line">            &quot;vol-09ac77986ac07cbfb&quot;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">]         </span><br></pre></td></tr></table></figure>

<h3 id="获取-EC2-实例的存储-Volume-信息"><a href="#获取-EC2-实例的存储-Volume-信息" class="headerlink" title="获取 EC2 实例的存储 (Volume) 信息"></a>获取 EC2 实例的存储 (Volume) 信息</h3><p>此操作至少需要以下权限：</p>
<ul>
<li><code>EC2.DescribeInstances</code></li>
<li><code>EC2.DescribeVolumes</code></li>
</ul>
<p>根据已知的 <code>volume-id</code>，查询卷的详细信息，比如磁盘类型和大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">aws ec2 describe-volumes --region ap-east-1 \</span></span><br><span class="line"><span class="language-bash">          --volume-ids vol-03f727ba5534b23f1 \</span></span><br><span class="line"><span class="language-bash">          --query Volumes[*].[VolumeType,Size] --output text</span></span><br><span class="line">gp2     500</span><br></pre></td></tr></table></figure>
<h2 id="cloudwatch"><a href="#cloudwatch" class="headerlink" title="cloudwatch"></a>cloudwatch</h2><h3 id="获取指定实例的网卡流出流量"><a href="#获取指定实例的网卡流出流量" class="headerlink" title="获取指定实例的网卡流出流量"></a>获取指定实例的网卡流出流量</h3><p>此操作至少需要以下权限：</p>
<ul>
<li><code>Cloudwatch.CloudWatchReadOnlyAccess</code></li>
<li><code>EC2.DescribeInstances</code></li>
</ul>
<p>通过 cloudwatch 获取 ec2 实例的监控数据 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[aws cloudwatch 命令说明](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/get-metric-statistics.html)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">aws cloudwatch get-metric-statistics</span> </span><br><span class="line">               --metric-name NetworkOut \</span><br><span class="line">               --start-time &quot;2023-01-01T00:00:00.000Z&quot; \</span><br><span class="line">               --end-time &quot;2023-01-10T00:00:00.000Z&quot; \</span><br><span class="line">               --period 86400 \</span><br><span class="line">               --namespace AWS/EC2 \</span><br><span class="line">               --statistics Sum \</span><br><span class="line">               --dimensions Name=InstanceId,Value=i-0904c5ba087f0b07c \</span><br><span class="line">               --region ap-east-1 --output text</span><br><span class="line">NetworkOut</span><br><span class="line">DATAPOINTS      4437779515.0    2023-01-05T00:00:00+00:00       Bytes</span><br><span class="line">DATAPOINTS      4289284683.0    2023-01-08T00:00:00+00:00       Bytes</span><br><span class="line">DATAPOINTS      4771646359.0    2023-01-01T00:00:00+00:00       Bytes</span><br><span class="line">DATAPOINTS      4634477427.0    2023-01-04T00:00:00+00:00       Bytes</span><br><span class="line">DATAPOINTS      4794193904.0    2023-01-07T00:00:00+00:00       Bytes</span><br><span class="line">DATAPOINTS      4403050407.0    2023-01-03T00:00:00+00:00       Bytes</span><br><span class="line">DATAPOINTS      4802329953.0    2023-01-06T00:00:00+00:00       Bytes</span><br><span class="line">DATAPOINTS      4527451078.0    2023-01-09T00:00:00+00:00       Bytes</span><br><span class="line">DATAPOINTS      4179191429.0    2023-01-02T00:00:00+00:00       Bytes</span><br></pre></td></tr></table></figure>

<h3 id="获取-cloudFront-CDN-域名的流量信息"><a href="#获取-cloudFront-CDN-域名的流量信息" class="headerlink" title="获取 cloudFront (CDN) 域名的流量信息"></a>获取 cloudFront (CDN) 域名的流量信息</h3><p>此操作至少需要以下权限：</p>
<ul>
<li><code>Cloudwatch.CloudWatchReadOnlyAccess</code></li>
<li><code>CloudFrontReadOnlyAccess</code></li>
</ul>
<p>通过以下命令列出所有的 <code>distributions</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aws cloudfront list-distributions</span><br></pre></td></tr></table></figure>

<p>通过以下命令可查询指定的 CloudFront 中的 distribution 的流量统计信息，区域必须使用美国东部（弗吉尼亚北部）区域 (<code>us-east-1</code>)，<code>--dimensions Name=DistributionId,Value=E5MHZ8YUS8CUR Name=Region,Value=Global</code> 中同时需要指定 CloudFront 的 Region 为 <code>Global</code> <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用 CloudWatch API 获取指标](https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/programming-cloudwatch-metrics.html)">[3]</span></a></sup> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">aws cloudwatch get-metric-statistics --region us-east-1 --metric-name BytesDownloaded \</span></span><br><span class="line"><span class="language-bash">                                       --start-time 2023-01-01T00:00:00.000Z --end-time 2023-01-31T23:59:59.000Z --period 86400 \</span></span><br><span class="line"><span class="language-bash">                                       --namespace AWS/CloudFront --statistics Sum \ </span></span><br><span class="line">                                       --dimensions Name=DistributionId,Value=E5MHZ8YUS8CUR Name=Region,Value=Global \</span><br><span class="line">                                       --output json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;Label&quot;: &quot;BytesDownloaded&quot;,</span><br><span class="line">    &quot;Datapoints&quot;: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="s3"><a href="#s3" class="headerlink" title="s3"></a>s3</h2><p>查看 s3 命令用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">aws s3 <span class="built_in">help</span></span></span><br></pre></td></tr></table></figure>

<h3 id="不同区域的桶之间同步数据"><a href="#不同区域的桶之间同步数据" class="headerlink" title="不同区域的桶之间同步数据"></a>不同区域的桶之间同步数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">aws s3 <span class="built_in">sync</span> --source-region ap-southeast-1 --region us-west-1 s3://my-bucket1 s3://my-bucket</span></span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="Errno-2-No-such-file-or-directory-‘less’"><a href="#Errno-2-No-such-file-or-directory-‘less’" class="headerlink" title="[Errno 2] No such file or directory: ‘less’"></a>[Errno 2] No such file or directory: ‘less’</h2><p>使用命令报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">aws --region ap-east-1 ec2 describe-instances</span></span><br><span class="line"></span><br><span class="line">Unable to redirect output to pager. Received the following error when opening pager:</span><br><span class="line">[Errno 2] No such file or directory: &#x27;less&#x27;</span><br><span class="line"></span><br><span class="line">Learn more about configuring the output pager by running &quot;aws help config-vars&quot;.</span><br></pre></td></tr></table></figure>
<p><strong>错误原因</strong>:</p>
<p>系统未安装 <code>less</code> 命令，安装 <code>less</code> 命令 (<code>yum install -y less</code>) 后正常。</p>
<h2 id="An-error-occurred-InvalidClientTokenId-when-calling-the-GetMetricStatistics-operation-The-security-token-included-in-the-request-is-invalid"><a href="#An-error-occurred-InvalidClientTokenId-when-calling-the-GetMetricStatistics-operation-The-security-token-included-in-the-request-is-invalid" class="headerlink" title="An error occurred (InvalidClientTokenId) when calling the GetMetricStatistics operation: The security token included in the request is invalid."></a>An error occurred (InvalidClientTokenId) when calling the GetMetricStatistics operation: The security token included in the request is invalid.</h2><p>使用命令报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">aws cloudwatch get-metric-statistics --metric-name Requests --start-time <span class="string">&#x27;2022-12-01T00:00:00.000Z&#x27;</span> --end-time <span class="string">&#x27;2022-12-31T23:59:59.000Z&#x27;</span> --period 2678400 \</span></span><br><span class="line"><span class="language-bash">                                       --namespace AWS/CloudFront --statistics Sum --dimensions Name=DistributionId,Value=E15 --output json</span></span><br><span class="line">                                       </span><br><span class="line">An error occurred (InvalidClientTokenId) when calling the GetMetricStatistics operation: The security token included in the request is invalid.                           </span><br></pre></td></tr></table></figure>
<p><strong>错误原因</strong></p>
<p>通过 CloudWatch 调用 CloudFront 的统计数据时，区域必须指定为 <code>美国东部（弗吉尼亚北部）区域 (us-east-1)</code>，使用选项 <code>--region us-east-1</code></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/get-metric-statistics.html">aws cloudwatch 命令说明</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-usage-filter.html">aws cli 输出结果筛选</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/programming-cloudwatch-metrics.html">使用 CloudWatch API 获取指标</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>云平台</category>
        <category>Aws</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Aws</tag>
      </tags>
  </entry>
  <entry>
    <title>aws python sdk 常用操作</title>
    <url>/202207251345/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>centos 7</li>
<li>Python3.10</li>
<li>boto3 1.23.2 <blockquote>
<p>(<code>pip3 install boto3</code>)</p>
</blockquote>
</li>
</ul>
<span id="more"></span>

<h1 id="S3-相关操作"><a href="#S3-相关操作" class="headerlink" title="S3 相关操作"></a>S3 相关操作</h1><h2 id="获取-s3-中文件大小"><a href="#获取-s3-中文件大小" class="headerlink" title="获取 s3 中文件大小"></a>获取 s3 中文件大小</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> boto3.session <span class="keyword">import</span> Session</span><br><span class="line"></span><br><span class="line">ak = <span class="string">&#x27;XXXXXXX&#x27;</span></span><br><span class="line">sk = <span class="string">&#x27;XXXXXXXXXX&#x27;</span></span><br><span class="line">region = <span class="string">&#x27;us-west-1&#x27;</span></span><br><span class="line">bucketName = <span class="string">&#x27;testBucket&#x27;</span></span><br><span class="line"></span><br><span class="line">session = Session(aws_access_key_id=ak, aws_secret_access_key=sk, region_name=region)</span><br><span class="line">s3 = session.resource(<span class="string">&#x27;s3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bucket = s3.Bucket(bucketName)</span><br><span class="line">obj = bucket.objects.<span class="built_in">filter</span>(Prefix=<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line">    <span class="keyword">if</span> i.size:</span><br><span class="line">        <span class="keyword">return</span> i.size</span><br></pre></td></tr></table></figure>

<h1 id="EC2-相关操作"><a href="#EC2-相关操作" class="headerlink" title="EC2 相关操作"></a>EC2 相关操作</h1><h2 id="获取-EC2-instances"><a href="#获取-EC2-instances" class="headerlink" title="获取 EC2 instances"></a>获取 EC2 instances</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">import boto3</span><br><span class="line"></span><br><span class="line">client = boto3.client(&#x27;ec2&#x27;,region_name=&#x27;ap-east-1&#x27;,aws_access_key_id=&#x27;AK&#x27;,aws_secret_access_key=&#x27;ty&#x27;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有 Instances</span></span><br><span class="line">client.describe_instances()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>云平台</category>
        <category>Aws</category>
      </categories>
      <tags>
        <tag>云平台</tag>
        <tag>Aws</tag>
      </tags>
  </entry>
  <entry>
    <title>aws 云平台常见操作</title>
    <url>/202302230924/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="S3"><a href="#S3" class="headerlink" title="S3"></a>S3</h1><h2 id="s3-配置跨域"><a href="#s3-配置跨域" class="headerlink" title="s3 配置跨域"></a>s3 配置跨域</h2><p>当使用 aws 的 cloudfront 或其他第三方 cdn （如 cdn77）为域名加速，资源是回源到 aws s3 的情况下，一般都需要配置 <strong>允许跨域</strong>，此种情况需要在 aws s3 存储桶中配置允许跨域 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[CORS 配置](https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/userguide/ManageCorsUsing.html#cors-example-1)">[1]</span></a></sup></p>
<p>配置步骤如下：</p>
<ol>
<li><p>定位到目标 s3 桶，进入 <code>权限</code> 管理页面</p>
</li>
<li><p>找到 <code>CORS</code> 配置，配置以下 JSON 格式内容，允许所有源的跨域</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line"> &#123;</span><br><span class="line">     &quot;AllowedHeaders&quot;: [</span><br><span class="line">         &quot;*&quot;</span><br><span class="line">     ],</span><br><span class="line">     &quot;AllowedMethods&quot;: [</span><br><span class="line">         &quot;POST&quot;,</span><br><span class="line">         &quot;GET&quot;</span><br><span class="line">     ],</span><br><span class="line">     &quot;AllowedOrigins&quot;: [</span><br><span class="line">         &quot;*&quot;</span><br><span class="line">     ],</span><br><span class="line">     &quot;ExposeHeaders&quot;: []</span><br><span class="line"> &#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>
<p> <img src="https://i.csms.tech/img_126.png"></p>
</li>
<li><p>Cloudfront 中，回源到此 S3 的加速域名配置中，<code>行为</code> 按照下图配置，主要为开启 <code>OPTIONS</code> 缓存，并在响应标头策略中选择： <code>CORS-with-preflight-and-SecurityHeadersPolicy</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[将 CloudFront 配置为遵守 CORS 设置](https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors)">[2]</span></a></sup><br><img src="https://i.csms.tech/img_127.png"><br>此配置为可选配置，可以解决客户端偶尔会遇到的因跨域问题而导致的资源获取失败问题。</p>
<span id="more"></span></li>
</ol>
<h2 id="存储桶同步数据"><a href="#存储桶同步数据" class="headerlink" title="存储桶同步数据"></a>存储桶同步数据</h2><p><a href="https://www.amazonaws.cn/solutions/data-transfer-hub/?nc1=h_ls">Data Transfer Hub 数据在线传输解决方案</a> 。</p>
<ol>
<li>海外账号选择 <a href="https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/create/template?stackName=DataTransferHub&templateURL=https://solutions-reference.s3.amazonaws.com/data-transfer-hub/latest/DataTransferHub-cognito.template"><code>从亚马逊云科技海外区域控制台中启动方案</code></a></li>
<li>弹出页面中点击下一步，在 <code>指定堆栈详细信息</code> 页面配置 <code>堆栈名称</code> 以及 <code>AdminEmail</code>（<strong>后面登陆 Potal 需要发送到邮箱的初始密码，要确保邮箱可登录</strong>）<br> <img src="https://i.csms.tech/img_149.png"></li>
<li>后面步骤使用默认选项，一直下一步，直到点击 <code>提交</code></li>
<li>等待 5-10 分钟后，全部资源创建完成，点击刚刚创建的堆栈的  <code>输出</code> 页面，其中有 <code>数据在线传输</code> 配置的 Potal 链接(<code>PortalUrl</code>)，点击此 url，使用堆栈配置的邮箱中的密码登陆，第一次登陆后需要改密码。<br> <img src="https://i.csms.tech/img_150.png"></li>
<li>登陆后，创建迁移任务。任务创建并运行后，可以在监控页面看到迁移时的相关监控数据</li>
</ol>
<blockquote>
<p>如果同步目标存储桶中的数据量太大，建议关闭 <code>是否需要数据比对</code> 选项，开启此选项，执行真正的数据同步前，需要完成对目标存储桶中数据的扫描，数据量越大，耗时越久</p>
<p><img src="https://i.csms.tech/img_151.png"><br>此同步工具会产生费用</p>
</blockquote>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/userguide/ManageCorsUsing.html#cors-example-1">CORS 配置</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors">将 CloudFront 配置为遵守 CORS 设置</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>云平台</category>
        <category>Aws</category>
      </categories>
      <tags>
        <tag>Aws</tag>
      </tags>
  </entry>
  <entry>
    <title>Awvs 破解版14.6.211213163 安装破解</title>
    <url>/2207221019/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Acunetix Web Vulnerability Scanner（简称AWVS）是一款知名的网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞。  </p>
<span id="more"></span>

<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Windows Server 2016 Datacenter</li>
<li>14.6.211213163</li>
</ul>
<h3 id="AWVS-安装激活"><a href="#AWVS-安装激活" class="headerlink" title="AWVS 安装激活"></a>AWVS 安装激活</h3><p>官方版本需要License才能下载，可通过如下链接下载破解版及补丁<br><a href="https://yzzpan.com/#sharefile=Nh2pQnaW_22930">www.ddosi.org下载入口</a><br><a href="https://yzzpan.com/#sharefile=DXt5k9dh_22034">www.ddosi.org破解工具下载入口</a></p>
<blockquote>
<p>解压密码均为: <a href="http://www.ddosi.org/">www.ddosi.org</a></p>
</blockquote>
<p><a href="https://s.csms.tech/file/acunetix_14.6.211213163.exe.rar">其他下载地址</a><br><a href="https://s.csms.tech/file/awvs_crack.rar">其他下载地址-破解工具</a> </p>
<p>下载后，双击文件 <code>acunetix_14.6.211213163.exe</code> 进行安装，按照提示，一直点击<code>下一步</code>，直到安装完成。<br>安装完成，打开登录后，处于未激活状态，显示如下图：<br><img src="https://i.csms.tech/img_14.png">  </p>
<p>复制 <code>awvs_crack</code> 目录下的文件 <code>license_info.json</code> 和 <code>wa_data.dat</code> </p>
<p><img src="https://i.csms.tech/img_15.png"> </p>
<p>覆盖目录 <code>C:\ProgramData\Acunetix\shared\license</code> 下的文件</p>
<p>修改hosts文件(<code>C:\Windows\System32\drivers\etc</code>), 添加以下内容：</p>
<figure class="highlight plaintext"><figcaption><span>C:\Windows\System32\drivers\etc</span></figcaption><table><tr><td class="code"><pre><span class="line">127.0.0.1 updates.acunetix.com</span><br><span class="line">127.0.0.1 erp.acunetix.com</span><br></pre></td></tr></table></figure>

<p>返回页面刷新，即可激活成功<br><img src="https://i.csms.tech/img_16.png"> </p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.ddosi.org/awvs-14-6/">Awvs破解版14.6.211213163|可扫Log4j RCE漏洞</a><br><a href="https://www.ddosi.org/awvs-14-5-2/">Awvs破解版14.5.211115146 Windows+Linux+Mac cracked</a></p>
]]></content>
      <categories>
        <category>安全</category>
        <category>Awvs</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>Awvs</tag>
        <tag>Acunetix</tag>
      </tags>
  </entry>
  <entry>
    <title>cAdvisor 部署使用</title>
    <url>/202306231404/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>cAdvisor 是 Goolgle 开发的用来监控容器运行指标的工具，使用 Go 语言开发。Kubelet 集成了 cAdvisor 来监控采集 Pod 中的容器的运行指标。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[cadvisor 官方 Github](https://github.com/google/cadvisor)">[1]</span></a></sup></p>
<p>可以直接使用 vAdvisor 配合 Prometheus 来监控 Docker&#x2F;Containerd 容器运行指标，并配合 Prometheus 及 Grafana 进行图形展示或告警</p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>cAdvisor version v0.47.0 (c7714a77)</li>
<li>Docker Engine - Community 20.10.9</li>
</ul>
<h1 id="在-host-上二进制安装部署-cAdvisor"><a href="#在-host-上二进制安装部署-cAdvisor" class="headerlink" title="在 host 上二进制安装部署 cAdvisor"></a>在 host 上二进制安装部署 cAdvisor</h1><p>下载二进制包，即可直接运行程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/google/cadvisor/releases/download/v0.47.0/cadvisor-v0.47.0-linux-amd64</span><br><span class="line"></span><br><span class="line">chmod +x cadvisor-v0.47.0-linux-amd64</span><br><span class="line"></span><br><span class="line">./cadvisor-v0.47.0-linux-amd64</span><br></pre></td></tr></table></figure>
<p>运行之后，默认监听 <code>8080</code> 端口，启动后访问 UI : <code>http://localhost:8080</code>。Prometheus 会读取 <code>http://localhost:8080/metrics</code> 暴露的指标。</p>
<h1 id="cAdvisor-metrics"><a href="#cAdvisor-metrics" class="headerlink" title="cAdvisor metrics"></a>cAdvisor metrics</h1><p><a href="https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md">cAdvisor metrics 官方说明</a></p>
<p>在 <code>cAdvisor</code> 主机节点中可以使用以下命令列出收集到的指标</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl localhost:8080/metrics</span><br></pre></td></tr></table></figure>

<h2 id="监控容器是否在运行中"><a href="#监控容器是否在运行中" class="headerlink" title="监控容器是否在运行中"></a>监控容器是否在运行中</h2><p><code>cAdvisor</code> 的指标 <code>container_last_seen</code> 记录了最后一次检测到容器运行时的时间 (<code>Gauge</code>)，如果容器停止运行，这个值会停留在最后一次观察到容器运行的时间，可以通过此指标，使用以下表达式来监控容器是否在运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">container_last_seen - container_last_seen offset 1m == 0</span><br></pre></td></tr></table></figure>


<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/google/cadvisor">cadvisor 官方 Github</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>cdn77 api 使用</title>
    <url>/202302011016/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文档示例使用 Python3 调用 CDN77 API 的常用方法，CDN77 目前未提供 SDK，只有 REST API。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[CDN77 api 官网说明文档](https://client.cdn77.com/support/api-reference/v3/introduction)">[1]</span></a></sup></p>
<h1 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h1><h2 id="创建调用-API-时需要的-API-Token"><a href="#创建调用-API-时需要的-API-Token" class="headerlink" title="创建调用 API 时需要的 API Token"></a>创建调用 API 时需要的 API Token</h2><p><a href="https://client.cdn77.com/support/api-reference/v3/introduction">参考文档创建 API Token</a></p>
<h2 id="读取-CDN-resources-列表"><a href="#读取-CDN-resources-列表" class="headerlink" title="读取 CDN resources 列表"></a>读取 CDN resources 列表</h2><figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; api_token = <span class="string">&#x27;sliJJYTUikbdg9798384Kbbj0kj&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; r = requests.get(<span class="string">&#x27;https://api.cdn77.com/v3/cdn&#x27;</span>, headers=&#123;<span class="string">&#x27;Authorization&#x27;</span>: f<span class="string">&#x27;Bearer &#123;api_token&#125;&#x27;</span>&#125;)</span></span><br></pre></td></tr></table></figure>

<h2 id="根据-cdn-resource-id-获取流量统计数据"><a href="#根据-cdn-resource-id-获取流量统计数据" class="headerlink" title="根据 cdn resource id 获取流量统计数据"></a>根据 cdn resource id 获取流量统计数据</h2><figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; url = <span class="string">&#x27;https://api.cdn77.com/v3/stats/cdns/traffic&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; headers = &#123;<span class="string">&#x27;Authorization&#x27;</span>: f<span class="string">&#x27;Bearer &#123;api_token&#125;&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; data = json.dumps(&#123;<span class="string">&quot;cdn_ids&quot;</span>: [1991249093], <span class="string">&quot;aggregation&quot;</span>: <span class="string">&quot;1-month&quot;</span>, <span class="string">&quot;from&quot;</span>: 1669824000, <span class="string">&quot;to&quot;</span>: 1672502400&#125;)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; r = requests.post(url, headers=headers, data=data)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; r.json()</span></span><br><span class="line">&#123;&#x27;1991249093&#x27;: &#123;&#x27;1667260800&#x27;: &#123;&#x27;sizeCached&#x27;: 83745364388, &#x27;sizeNonCached&#x27;: 899336049&#125;, &#x27;1669852800&#x27;: &#123;&#x27;sizeCached&#x27;: 76503199334, &#x27;sizeNonCached&#x27;: 758547845&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>


<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://client.cdn77.com/support/api-reference/v3/introduction">CDN77 api 官网说明文档</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>云平台</category>
        <category>cdn77</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 7 升级内核</title>
    <url>/202209140931/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Centos 7 内核版本由 3.10 升级到 5.4.212-1</p>
<h3 id="环境息息"><a href="#环境息息" class="headerlink" title="环境息息"></a>环境息息</h3><ul>
<li>Centos7 3.10.0-1062.9.1.el7.x86_64</li>
</ul>
<h3 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h3><h4 id="安装-elrepo-源"><a href="#安装-elrepo-源" class="headerlink" title="安装 elrepo 源"></a>安装 elrepo 源</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br><span class="line">yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; repolist</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="安装新版本内核"><a href="#安装新版本内核" class="headerlink" title="安装新版本内核"></a>安装新版本内核</h4><p>查看可用的内核版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum --disablerepo=<span class="string">&quot;*&quot;</span> --enablerepo=<span class="string">&quot;elrepo-kernel&quot;</span> list available</span></span><br><span class="line">Available Packages</span><br><span class="line">kernel-lt-doc.noarch                                      5.4.212-1.el7.elrepo                          elrepo-kernel</span><br><span class="line">kernel-lt-headers.x86_64                                  5.4.212-1.el7.elrepo                          elrepo-kernel</span><br><span class="line">kernel-lt-tools.x86_64                                    5.4.212-1.el7.elrepo                          elrepo-kernel</span><br><span class="line">kernel-lt-tools-libs.x86_64                               5.4.212-1.el7.elrepo                          elrepo-kernel</span><br><span class="line">kernel-lt-tools-libs-devel.x86_64                         5.4.212-1.el7.elrepo                          elrepo-kernel</span><br><span class="line">kernel-ml.x86_64                                          5.19.8-1.el7.elrepo                           elrepo-kernel</span><br><span class="line">kernel-ml-devel.x86_64                                    5.19.8-1.el7.elrepo                           elrepo-kernel</span><br><span class="line">kernel-ml-doc.noarch                                      5.19.8-1.el7.elrepo                           elrepo-kernel</span><br><span class="line">kernel-ml-headers.x86_64                                  5.19.8-1.el7.elrepo                           elrepo-kernel</span><br><span class="line">kernel-ml-tools.x86_64                                    5.19.8-1.el7.elrepo                           elrepo-kernel</span><br><span class="line">kernel-ml-tools-libs.x86_64                               5.19.8-1.el7.elrepo                           elrepo-kernel</span><br><span class="line">kernel-ml-tools-libs-devel.x86_64                         5.19.8-1.el7.elrepo                           elrepo-kernel</span><br><span class="line">perf.x86_64                                               5.19.8-1.el7.elrepo                           elrepo-kernel</span><br><span class="line">python-perf.x86_64                                        5.19.8-1.el7.elrepo                           elrepo-kernel</span><br></pre></td></tr></table></figure>
<blockquote>
<p>kernel-lt 和 kernel-ml 二者的区别：  </p>
<ul>
<li>kernel-ml 软件包是根据 Linux Kernel Archives 的主线稳定分支提供的源构建的。 内核配置基于默认的 RHEL-7 配置，并根据需要启用了添加的功能。 这些软件包有意命名为 kernel-ml，以免与 RHEL-7 内核发生冲突，因此，它们可以与常规内核一起安装和更新。  </li>
<li>kernel-lt 包是从 Linux Kernel Archives 提供的源代码构建的，就像 kernel-ml 软件包一样。 不同之处在于 kernel-lt 基于长期支持分支，而 kernel-ml 基于主线稳定分支。</li>
</ul>
<p>在 ELRepo 中有两个内核选项，一个是 kernel-lt（长期支持版），一个是 kernel-ml（主线最新版本），采用长期支持版本（kernel-lt），更加稳定一些。</p>
</blockquote>
<p>安装最新的长期支持版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; install kernel-lt kernel-lt-devel</span><br></pre></td></tr></table></figure>

<p>查看系统上可用的内核</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">awk -F\<span class="string">&#x27; &#x27;</span><span class="variable">$1</span>==<span class="string">&quot;menuentry &quot;</span> &#123;<span class="built_in">print</span> <span class="variable">$2</span>&#125;<span class="string">&#x27; /etc/grub2.cfg</span></span></span><br><span class="line">CentOS Linux (5.4.212-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-1062.9.1.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (0-rescue-ed7b5ef29925468cbc59b47c142c26b8) 7 (Core)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="设置开机从新内核启动"><a href="#设置开机从新内核启动" class="headerlink" title="设置开机从新内核启动"></a>设置开机从新内核启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure>

<h4 id="生成grub-配置文件"><a href="#生成grub-配置文件" class="headerlink" title="生成grub 配置文件"></a>生成grub 配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br><span class="line"></span><br><span class="line">Generating grub configuration file ...</span><br><span class="line">Found linux image: /boot/vmlinuz-5.4.212-1.el7.elrepo.x86_64</span><br><span class="line">Found initrd image: /boot/initramfs-5.4.212-1.el7.elrepo.x86_64.img</span><br><span class="line">Found linux image: /boot/vmlinuz-3.10.0-1062.9.1.el7.x86_64</span><br><span class="line">Found initrd image: /boot/initramfs-3.10.0-1062.9.1.el7.x86_64.img</span><br><span class="line">Found linux image: /boot/vmlinuz-0-rescue-ed7b5ef29925468cbc59b47c142c26b8</span><br><span class="line">Found initrd image: /boot/initramfs-0-rescue-ed7b5ef29925468cbc59b47c142c26b8.img</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="重启系统并验证"><a href="#重启系统并验证" class="headerlink" title="重启系统并验证"></a>重启系统并验证</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure>
<p>重启后查看内核版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">uname</span> -r</span></span><br><span class="line">5.4.212-1.el7.elrepo.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="查看系统中已安装的内核"><a href="#查看系统中已安装的内核" class="headerlink" title="查看系统中已安装的内核"></a>查看系统中已安装的内核</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -qa | grep kernel</span></span><br><span class="line">kernel-lt-5.4.212-1.el7.elrepo.x86_64</span><br><span class="line">kernel-tools-libs-3.10.0-1062.9.1.el7.x86_64</span><br><span class="line">kernel-lt-devel-5.4.212-1.el7.elrepo.x86_64</span><br><span class="line">kernel-3.10.0-1062.9.1.el7.x86_64</span><br><span class="line">kernel-headers-3.10.0-1160.76.1.el7.x86_64</span><br><span class="line">kernel-tools-3.10.0-1062.9.1.el7.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="删除旧内核，这一步是可选的"><a href="#删除旧内核，这一步是可选的" class="headerlink" title="删除旧内核，这一步是可选的"></a>删除旧内核，这一步是可选的</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove -y  kernel-devel-3.10.0   kernel-3.10.0  kernel-headers-3.10.0 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已安装内核</span></span><br><span class="line">rpm -qa | grep kernel</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以安装 yum-utils 工具，当系统安装的内核大于3个时，会自动删除旧的内核版本</span></span><br><span class="line">yum install -y  yum-utils</span><br></pre></td></tr></table></figure>

<h4 id="升级内核工具包"><a href="#升级内核工具包" class="headerlink" title="升级内核工具包"></a>升级内核工具包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除旧版本工具包--可选</span></span><br><span class="line">yum remove kernel-tools-libs.x86_64 kernel-tools.x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装新版本工具包</span></span><br><span class="line">yum --disablerepo=&quot;*&quot; --enablerepo=elrepo-kernel install -y kernel-lt-tools.x86_64</span><br></pre></td></tr></table></figure>
<p>查看已安装内核</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rpm -qa | grep kernel</span><br><span class="line"></span><br><span class="line">kernel-lt-5.4.212-1.el7.elrepo.x86_64</span><br><span class="line">kernel-lt-devel-5.4.212-1.el7.elrepo.x86_64</span><br><span class="line">kernel-lt-tools-libs-5.4.212-1.el7.elrepo.x86_64</span><br><span class="line">kernel-lt-tools-5.4.212-1.el7.elrepo.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>内核升级完成后可再次重启系统进行验证</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.cnblogs.com/yanjieli/p/14839445.html">CentOS7 内核升级</a><br><a href="https://zhuanlan.zhihu.com/p/368879345">CentOS7 内核升级</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos VNC server 配置</title>
    <url>/202208191637/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<p><code>VNC</code> 是一个图形桌面共享系统，可以通过远程连接的方式连接到服务器的图形系统以控制操作系统<br><code>VNC</code> 包括以下四个部分 ： <code>vncserver</code>，<code>vncviewer</code>，<code>vncpassword</code> 及 <code>vncconnect</code>。<br><code>VNC client</code> 端通过 <code>VNC</code> 协议远程连接到 <code>vnc server</code> 端，进行桌面共享及交互；  </p>
<h1 id="安装-tigervnc"><a href="#安装-tigervnc" class="headerlink" title="安装 tigervnc"></a>安装 tigervnc</h1><p>安装之前首先要确保系统已安装图形系统，本文以 <code>GNOME Desktop</code> 为图形桌面系统，执行以下命令检查是否已安装 <code>GNOME Desktop</code>，如果未安装，使用命令 <code>yum groupinstall &quot;GNOME Desktop&quot;</code> 安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum grouplist</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Installed Environment Groups:</span><br><span class="line">   GNOME Desktop</span><br><span class="line">Available Environment Groups:</span><br><span class="line">   Minimal Install</span><br><span class="line">   Compute Node</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>桌面系统安装后，使用以下命令，安装 <code>tigervnc</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y tigervnc-server</span><br></pre></td></tr></table></figure>

<p>可以参考 <code>/lib/systemd/system/vncserver@.service</code> 中的指示，生成服务配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br><span class="line">vim /etc/systemd/system/vncserver@\:1.service</span><br></pre></td></tr></table></figure>
<p>修改以下行，将其中的 <code>&lt;USER&gt;</code> 改为要远程登录的用户名，例如 <code>root</code></p>
<figure class="highlight shell"><figcaption><span>/etc/systemd/system/vncserver@\:1.service</span></figcaption><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/vncserver_wrapper root %i</span><br></pre></td></tr></table></figure>

<p>如果有多个用户需要远程连接，可以重复以上步骤，建立多个配置文件，如 <code>/etc/systemd/system/vncserver@:2.service</code>，各个服务之间互不影响，关闭一个服务，不影响其他的 <code>vnc</code> 服务 (如关闭： <code>vncserver@:2.service</code>，<code>vncserver@:1.service</code>的 <code>vnc</code> 远程依旧可以使用)  </p>
<p>修改服务文件后，使用以下命令重新加载服务启动脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>启动服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start vncserver@:1.service</span><br></pre></td></tr></table></figure>
<p>服务启动后，会监听 5901 端口，如果有第二个服务，会监听在 5902 端口，以此类推，防火墙需要放通此端口<br><img src="https://i.csms.tech/img_41.png"></p>
<p>切换到需要 vnc 远程登录的用户，使用以下命令配置 <code>vnc</code> 远程登录用户的密码(只是 vnc 登录时使用的密码，非系统用户密码)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# su - USER</span><br><span class="line">[USER@localhost ~]$ vncpasswd</span><br></pre></td></tr></table></figure>
<p>设置 <code>vncpasswd</code> 密码后，在账号的家目录里就会自动建立 .vnc 文件，其中包括对应用户的 <code>vnc</code> 相关的日志</p>
<p>配置完成后，<a href="https://www.realvnc.com/en/connect/download/viewer/">下载客户端</a> 进行远程登录</p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="getpassword-error-Inappropriate-ioctl-for-device"><a href="#getpassword-error-Inappropriate-ioctl-for-device" class="headerlink" title="getpassword error: Inappropriate ioctl for device"></a>getpassword error: Inappropriate ioctl for device</h2><p><code>vncserver@:1.service</code> 服务启动失败，端口未监听</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -anutp | grep LIST</span></span><br><span class="line">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      735/rpcbind         </span><br><span class="line">tcp6       0      0 :::30000                :::*                    LISTEN      1251/sshd           </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      17064/nginx: master </span><br><span class="line">tcp6       0      0 :::8181                 :::*                    LISTEN      17064/nginx: master </span><br><span class="line">tcp6       0      0 :::8443                 :::*                    LISTEN      14032/nginx-ingress </span><br><span class="line">tcp6       0      0 :::443                  :::*                    LISTEN      17064/nginx: master </span><br><span class="line">tcp6       0      0 :::10254                :::*                    LISTEN      14032/nginx-ingress </span><br><span class="line">tcp6       0      0 :::111                  :::*                    LISTEN      735/rpcbind</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl status vncserver@:1.service</span></span><br><span class="line">● vncserver@:1.service - Remote desktop service (VNC)</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/vncserver@:1.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: exit-code) since Tue 2023-05-02 13:29:44 CST; 14s ago</span><br><span class="line">  Process: 28040 ExecStart=/usr/bin/vncserver_wrapper root %i (code=exited, status=2)</span><br><span class="line">  Process: 28037 ExecStartPre=/bin/sh -c /usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || : (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 28040 (code=exited, status=2)</span><br><span class="line"></span><br><span class="line">May 02 13:29:44 test systemd[1]: Starting Remote desktop service (VNC)...</span><br><span class="line">May 02 13:29:44 test systemd[1]: Started Remote desktop service (VNC).</span><br><span class="line">May 02 13:29:44 test vncserver_wrapper[28040]: You will require a password to access your desktops.</span><br><span class="line">May 02 13:29:44 test vncserver_wrapper[28040]: getpassword error: Inappropriate ioctl for device</span><br><span class="line">May 02 13:29:44 test vncserver_wrapper[28040]: Password:FATAL: &#x27;runuser -l root&#x27; failed!</span><br><span class="line">May 02 13:29:44 test systemd[1]: vncserver@:1.service: main process exited, code=exited, status=2/INVALIDARGUMENT</span><br><span class="line">May 02 13:29:44 test systemd[1]: Unit vncserver@:1.service entered failed state.</span><br><span class="line">May 02 13:29:44 test systemd[1]: vncserver@:1.service failed.    </span><br></pre></td></tr></table></figure>

<p><strong>解决方法</strong> 配置登陆用的 VNC 密码，重启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - root</span><br><span class="line">vncpasswd</span><br><span class="line"></span><br><span class="line">systemctl start vncserver@:1.service</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 安装使用 Fiddler</title>
    <url>/202302091320/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Centos 7 上面安装 Fiddler，需要先安装 <code>mono</code>，并且需要图形桌面系统支持。</p>
<blockquote>
<p>Mono(<a href="https://github.com/mono/mono">https://github.com/mono/mono</a>) is an open source implementation of Microsoft’s .NET Framework based on the ECMA standards for C# and the Common Language Runtime.<br>The Mono project is part of the .NET Foundation(<a href="https://github.com/dotnet">https://github.com/dotnet</a>)</p>
</blockquote>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 3.10.0-1160</li>
<li>mono-complete-6.8.0</li>
<li>Fiddler</li>
<li>Gnome</li>
</ul>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="安装-mono"><a href="#安装-mono" class="headerlink" title="安装 mono"></a>安装 mono</h2><p>首先安装 <code>mono-complete</code>，<code>yum</code> 源 <code>epel</code> 中包含了此安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum info  mono-complete</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Installed Packages</span><br><span class="line">Name        : mono-complete</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 6.8.0</span><br><span class="line">Release     : 2.el7</span><br><span class="line">Size        : 0.0  </span><br><span class="line">Repo        : installed</span><br><span class="line">From repo   : epel</span><br><span class="line">Summary     : Install everything built from the mono source tree</span><br><span class="line">URL         : http://www.mono-project.com</span><br><span class="line">License     : MIT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum  install mono-complete</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-Fiddler"><a href="#安装-Fiddler" class="headerlink" title="安装 Fiddler"></a>安装 Fiddler</h2><p>下载 Fiddler 安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.telerik.com/docs/default-source/fiddler/fiddler-linux.zip</span><br></pre></td></tr></table></figure>
<p><a href="!--swig%EF%BF%BC3--">其他参考下载链接</a></p>
<p>解压运行 Fiddler</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip fiddler-linux.zip -d fiddler-linux</span><br><span class="line">cd fiddler-linux</span><br><span class="line">mono ./Fiddler.exe</span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="ERROR-FATAL-UNHANDLED-EXCEPTION-System-TypeInitializationException-The-type-initializer-for-‘System-Windows-Forms-XplatUI’-threw-an-exception-—-gt-System-ArgumentNullException-Could-not-open-display-X-Server-required-Check-your-DISPLAY-environment-variable"><a href="#ERROR-FATAL-UNHANDLED-EXCEPTION-System-TypeInitializationException-The-type-initializer-for-‘System-Windows-Forms-XplatUI’-threw-an-exception-—-gt-System-ArgumentNullException-Could-not-open-display-X-Server-required-Check-your-DISPLAY-environment-variable" class="headerlink" title="[ERROR] FATAL UNHANDLED EXCEPTION: System.TypeInitializationException: The type initializer for ‘System.Windows.Forms.XplatUI’ threw an exception. —&gt; System.ArgumentNullException: Could not open display (X-Server required. Check your DISPLAY environment variable)"></a>[ERROR] FATAL UNHANDLED EXCEPTION: System.TypeInitializationException: The type initializer for ‘System.Windows.Forms.XplatUI’ threw an exception. —&gt; System.ArgumentNullException: Could not open display (X-Server required. Check your DISPLAY environment variable)</h2><p>启动过程中报错，原因为需要桌面系统支持。可以在图形桌面系统中开启 shell，执行启动命令 <code>mono ./Fiddler.exe</code></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph 安装使用</title>
    <url>/202306161025/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7 6.3.8-1.el7.elrepo.x86_64</li>
<li>Python-3.10.12</li>
<li>Docker-ce 20.10.9</li>
<li>Ceph version 17.2.6</li>
</ul>
<p><a href="https://docs.ceph.com/en/latest/releases/">Ceph 版本发布列表</a></p>
<p>服务器环境信息说明</p>
<table>
<thead>
<tr>
<th>服务器</th>
<th>IP</th>
<th>配置</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><code>ceph-node-1</code></td>
<td>10.111.30.100</td>
<td>centos 7 6.3.8-1<br/>2c 3G 50G</td>
<td><code>cephadm</code> 节点<br/><code>monitor daemon</code></td>
</tr>
<tr>
<td><code>ceph-node-2</code></td>
<td>10.111.30.110</td>
<td>centos 7 6.3.8-1<br/>2c 5G 50G</td>
<td></td>
</tr>
<tr>
<td><code>ceph-node-3</code></td>
<td>10.111.30.120</td>
<td>centos 7 6.3.8-1<br/>2c 5G 50G</td>
<td></td>
</tr>
</tbody></table>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>本文档使用 <code>cephadm</code> 安装 Ceph Cluster，使用 <code>cephadm</code> 会首先在 Ceph Cluster 的第一个节点上安装第一个 <code>monitor daemon</code>，安装时 <code>monitor daemon</code> 必须指定和集群通信的 IP 地址。 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[BOOTSTRAP A NEW CLUSTER](https://docs.ceph.com/en/quincy/cephadm/install/#what-to-know-before-you-bootstrap)">[3]</span></a></sup></p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>Python 3</li>
<li>Systemd</li>
<li>Docker</li>
<li>Time synchronization (such as chrony or NTP)</li>
<li>LVM2 for provisioning storage devices</li>
</ul>
<p>需要提前配置好集群节点服务器的主机名，并安装 Python 3、Docker。安装集群时，会自动安装 <code>chrony</code> 用来做时间同步</p>
<p>配置节点防火墙，允许节点之间网络互通</p>
<h2 id="安装-cephadm"><a href="#安装-cephadm" class="headerlink" title="安装 cephadm"></a>安装 cephadm</h2><p>使用 <code>curl</code> 安装最新版本 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[CURL-BASED INSTALLATION](https://docs.ceph.com/en/latest/cephadm/install/#curl-based-installation)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CEPH_RELEASE=17.2.6</span><br><span class="line">curl --silent --remote-name --location https://download.ceph.com/rpm-$&#123;CEPH_RELEASE&#125;/el9/noarch/cephadm</span><br><span class="line">chmod +x cephadm</span><br></pre></td></tr></table></figure>

<p>将 <code>cephadm</code> 安装到主机系统，<strong>Centos 7 未提供最新版本的 repo</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./cephadm add-repo --release octopus</span><br><span class="line"></span><br><span class="line">rpm --import &#x27;https://download.ceph.com/keys/release.asc&#x27;</span><br><span class="line"></span><br><span class="line">./cephadm install</span><br></pre></td></tr></table></figure>
<p>检查安装后的 <code>cephadm</code> 命令路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">which</span> cephadm</span></span><br><span class="line">/usr/sbin/cephadm</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="使用-cephadm-bootstrap-初始化集群的第一个节点"><a href="#使用-cephadm-bootstrap-初始化集群的第一个节点" class="headerlink" title="使用 cephadm bootstrap 初始化集群的第一个节点"></a>使用 cephadm bootstrap 初始化集群的第一个节点</h2><p>使用 <code>cephadm bootstrap</code> 初始化集群的第一个节点，会安装集群中的第一个 <code>monitor daemon</code>，必须要指定集群通信的 IP 地址。执行以下命令 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[BOOTSTRAP A NEW CLUSTER](https://docs.ceph.com/en/quincy/cephadm/install/#what-to-know-before-you-bootstrap)">[3]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cephadm bootstrap --mon-ip 10.111.30.100</span></span><br><span class="line">Verifying podman|docker is present...</span><br><span class="line">Verifying lvm2 is present...</span><br><span class="line">Verifying time synchronization is in place...</span><br><span class="line">Unit chronyd.service is enabled and running</span><br><span class="line">Repeating the final host check...</span><br><span class="line">podman|docker (/usr/bin/docker) is present</span><br><span class="line">systemctl is present</span><br><span class="line">lvcreate is present</span><br><span class="line">Unit chronyd.service is enabled and running</span><br><span class="line">Host looks OK</span><br><span class="line">Cluster fsid: e2b9a77e-0c23-11ee-9e9d-000c29687fa4</span><br><span class="line">Verifying IP 10.111.30.100 port 3300 ...</span><br><span class="line">Verifying IP 10.111.30.100 port 6789 ...</span><br><span class="line">Mon IP 10.111.30.100 is in CIDR network 10.111.30.0/24</span><br><span class="line">Pulling container image quay.io/ceph/ceph:v15...</span><br><span class="line">Extracting ceph user uid/gid from container image...</span><br><span class="line">Creating initial keys...</span><br><span class="line">Creating initial monmap...</span><br><span class="line">Creating mon...</span><br><span class="line">Waiting for mon to start...</span><br><span class="line">Waiting for mon...</span><br><span class="line">mon is available</span><br><span class="line">Assimilating anything we can from ceph.conf...</span><br><span class="line">Generating new minimal ceph.conf...</span><br><span class="line">Restarting the monitor...</span><br><span class="line">Setting mon public_network...</span><br><span class="line">Creating mgr...</span><br><span class="line">Verifying port 9283 ...</span><br><span class="line">Wrote keyring to /etc/ceph/ceph.client.admin.keyring</span><br><span class="line">Wrote config to /etc/ceph/ceph.conf</span><br><span class="line">Waiting for mgr to start...</span><br><span class="line">Waiting for mgr...</span><br><span class="line">mgr not available, waiting (1/10)...</span><br><span class="line">mgr not available, waiting (2/10)...</span><br><span class="line">mgr not available, waiting (3/10)...</span><br><span class="line">mgr not available, waiting (4/10)...</span><br><span class="line">mgr is available</span><br><span class="line">Enabling cephadm module...</span><br><span class="line">Waiting for the mgr to restart...</span><br><span class="line">Waiting for Mgr epoch 5...</span><br><span class="line">Mgr epoch 5 is available</span><br><span class="line">Setting orchestrator backend to cephadm...</span><br><span class="line">Generating ssh key...</span><br><span class="line">Wrote public SSH key to to /etc/ceph/ceph.pub</span><br><span class="line">Adding key to root@localhost&#x27;s authorized_keys...</span><br><span class="line">Adding host ceph-node-1...</span><br><span class="line">Deploying mon service with default placement...</span><br><span class="line">Deploying mgr service with default placement...</span><br><span class="line">Deploying crash service with default placement...</span><br><span class="line">Enabling mgr prometheus module...</span><br><span class="line">Deploying prometheus service with default placement...</span><br><span class="line">Deploying grafana service with default placement...</span><br><span class="line">Deploying node-exporter service with default placement...</span><br><span class="line">Deploying alertmanager service with default placement...</span><br><span class="line">Enabling the dashboard module...</span><br><span class="line">Waiting for the mgr to restart...</span><br><span class="line">Waiting for Mgr epoch 13...</span><br><span class="line">Mgr epoch 13 is available</span><br><span class="line">Generating a dashboard self-signed certificate...</span><br><span class="line">Creating initial admin user...</span><br><span class="line">Fetching dashboard port number...</span><br><span class="line">Ceph Dashboard is now available at:</span><br><span class="line"></span><br><span class="line">	     URL: https://ceph-node-1:8443/</span><br><span class="line">	    User: admin</span><br><span class="line">	Password: 5sn85szxmw</span><br><span class="line"></span><br><span class="line">You can access the Ceph CLI with:</span><br><span class="line"></span><br><span class="line">	sudo /usr/sbin/cephadm shell --fsid e2b9a77e-0c23-11ee-9e9d-000c29687fa4 -c /etc/ceph/ceph.conf -k /etc/ceph/ceph.client.admin.keyring</span><br><span class="line"></span><br><span class="line">Please consider enabling telemetry to help improve Ceph:</span><br><span class="line"></span><br><span class="line">	ceph telemetry on</span><br><span class="line"></span><br><span class="line">For more information see:</span><br><span class="line"></span><br><span class="line">	https://docs.ceph.com/docs/master/mgr/telemetry/</span><br><span class="line"></span><br><span class="line">Bootstrap complete.</span><br></pre></td></tr></table></figure>

<p><code>cephadm bootstrap --mon-ip 10.111.30.100</code> 命令将会执行以下操作 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[RUNNING THE BOOTSTRAP COMMAND](https://docs.ceph.com/en/quincy/cephadm/install/#running-the-bootstrap-command)">[4]</span></a></sup></p>
<ul>
<li>在主机节点上创建第一个 <code>monitor</code> 和 <code>manager</code> daemon</li>
<li>为集群生成一个 SSH Key pair，并将其添加到 <code>root</code> 用户的 <code>/root/.ssh/authorized_keys</code> 文件中</li>
<li>将 public key 写入 <code>/etc/ceph/ceph.pub</code> 文件</li>
<li>生成一个最小化的集群配置文件，并写入 <code>/etc/ceph/ceph.conf</code></li>
<li>将有管理员权限的 secret key 写入 <code>/etc/ceph/ceph.client.admin.keyring</code></li>
<li>Add the <code>_admin</code> label to the bootstrap host. By default, any host with this label will (also) get a copy of <code>/etc/ceph/ceph.conf</code> and <code>/etc/ceph/ceph.client.admin.keyring</code></li>
</ul>
<p><code>cephadm bootstrap --mon-ip 10.111.30.100</code> 命令不会在主机上安装任何 Ceph 安装包，集群初始化后，<code>cephadm</code> 会在节点上拉去 Docker 镜像，并启动对应的 Docker 容器来运行相应的服务，包括 <code>ceph</code>、<code>Prometheus</code>、<code>Grafana</code> 、<code>alertmanager</code> 等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                                      COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">48657ea7b022   quay.io/ceph/ceph-grafana:6.7.4            &quot;/bin/sh -c &#x27;grafana…&quot;   22 minutes ago   Up 22 minutes             ceph-e2b9a77e-0c23-11ee-9e9d-000c29687fa4-grafana.ceph-node-1</span><br><span class="line">cc704589a17f   quay.io/prometheus/alertmanager:v0.20.0    &quot;/bin/alertmanager -…&quot;   22 minutes ago   Up 22 minutes             ceph-e2b9a77e-0c23-11ee-9e9d-000c29687fa4-alertmanager.ceph-node-1</span><br><span class="line">86f95aba68c0   quay.io/prometheus/prometheus:v2.18.1      &quot;/bin/prometheus --c…&quot;   22 minutes ago   Up 22 minutes             ceph-e2b9a77e-0c23-11ee-9e9d-000c29687fa4-prometheus.ceph-node-1</span><br><span class="line">9b6801c15353   quay.io/prometheus/node-exporter:v0.18.1   &quot;/bin/node_exporter …&quot;   23 minutes ago   Up 23 minutes             ceph-e2b9a77e-0c23-11ee-9e9d-000c29687fa4-node-exporter.ceph-node-1</span><br><span class="line">459bf96f7646   quay.io/ceph/ceph:v15                      &quot;/usr/bin/ceph-crash…&quot;   29 minutes ago   Up 29 minutes             ceph-e2b9a77e-0c23-11ee-9e9d-000c29687fa4-crash.ceph-node-1</span><br><span class="line">0399340209dc   quay.io/ceph/ceph:v15                      &quot;/usr/bin/ceph-mgr -…&quot;   31 minutes ago   Up 31 minutes             ceph-e2b9a77e-0c23-11ee-9e9d-000c29687fa4-mgr.ceph-node-1.bswaqn</span><br><span class="line">93b3f483d33b   quay.io/ceph/ceph:v15                      &quot;/usr/bin/ceph-mon -…&quot;   31 minutes ago   Up 31 minutes             ceph-e2b9a77e-0c23-11ee-9e9d-000c29687fa4-mon.ceph-node-1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>容器使用的 <a href="https://csms.tech/202208301536/#Host-模式">Docker 网络类型为 <code>host</code></a>，容器和主机共享了 root network namespace</p>
<p>启动的端口如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -anutp | grep -v <span class="string">&quot;ESTABLISHED&quot;</span></span></span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 10.111.30.100:3300      0.0.0.0:*               LISTEN      77870/ceph-mon      </span><br><span class="line">tcp        0      0 0.0.0.0:6800            0.0.0.0:*               LISTEN      78076/ceph-mgr      </span><br><span class="line">tcp        0      0 0.0.0.0:6801            0.0.0.0:*               LISTEN      78076/ceph-mgr      </span><br><span class="line">tcp        0      0 10.111.30.100:6789      0.0.0.0:*               LISTEN      77870/ceph-mon      </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1066/sshd           </span><br><span class="line">tcp6       0      0 :::3000                 :::*                    LISTEN      84486/grafana-serve </span><br><span class="line">tcp6       0      0 :::9100                 :::*                    LISTEN      83277/node_exporter </span><br><span class="line">tcp6       0      0 :::9093                 :::*                    LISTEN      84235/alertmanager  </span><br><span class="line">tcp6       0      0 :::9094                 :::*                    LISTEN      84235/alertmanager  </span><br><span class="line">tcp6       0      0 :::9095                 :::*                    LISTEN      83602/prometheus    </span><br><span class="line">tcp6       0      0 :::8443                 :::*                    LISTEN      78076/ceph-mgr      </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1066/sshd           </span><br><span class="line">tcp6       0      0 :::9283                 :::*                    LISTEN      78076/ceph-mgr      </span><br><span class="line">udp        0      0 127.0.0.1:323           0.0.0.0:*                           76627/chronyd       </span><br><span class="line">udp6       0      0 :::9094                 :::*                                84235/alertmanager  </span><br><span class="line">udp6       0      0 ::1:323                 :::*                                76627/chronyd</span><br></pre></td></tr></table></figure>

<p>部署成功后，可以通过 <code>https://ceph-node-1:8443/</code> 登陆 Ceph Dashboard，用户名密码在 <code>cephadm bootstrap --mon-ip 10.111.30.100</code> 的输出信息中，首次登陆后必须修改密码。<br><img src="https://i.csms.tech/img_181.png"></p>
<p>部署成功后，可以通过以下命令，查看集群状态信息及操作管理集群</p>
<ol>
<li>执行命令 <code>cephadm shell</code>，此命令会使用镜像 <code>quay.io/ceph/ceph</code> 启动一个容器，并使用 <code>bash</code> 命令进入容器，此容器会挂载主机上的 <code>/etc/ceph/</code> 下的配置文件来连接访问集群。 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ENABLE CEPH CLI](https://docs.ceph.com/en/quincy/cephadm/install/#enable-ceph-cli)">[5]</span></a></sup> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cephadm shell</span></span><br><span class="line">Inferring fsid e2b9a77e-0c23-11ee-9e9d-000c29687fa4</span><br><span class="line">Inferring config /var/lib/ceph/e2b9a77e-0c23-11ee-9e9d-000c29687fa4/mon.ceph-node-1/config</span><br><span class="line">Using recent ceph image quay.io/ceph/ceph@sha256:c08064dde4bba4e72a1f55d90ca32df9ef5aafab82efe2e0a0722444a5aaacca</span><br><span class="line">[ceph: root@ceph-node-1 /]# </span><br><span class="line">[ceph: root@ceph-node-1 /]# </span><br><span class="line">[ceph: root@ceph-node-1 /]# ceph status</span><br><span class="line">  cluster:</span><br><span class="line">    id:     e2b9a77e-0c23-11ee-9e9d-000c29687fa4</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            Reduced data availability: 1 pg inactive</span><br><span class="line">            OSD count 0 &lt; osd_pool_default_size 3</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 1 daemons, quorum ceph-node-1 (age 2d)</span><br><span class="line">    mgr: ceph-node-1.bswaqn(active, since 2d)</span><br><span class="line">    osd: 0 osds: 0 up, 0 in</span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   1 pools, 1 pgs</span><br><span class="line">    objects: 0 objects, 0 B</span><br><span class="line">    usage:   0 B used, 0 B / 0 B avail</span><br><span class="line">    pgs:     100.000% pgs unknown</span><br><span class="line">             1 unknown</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="添加节点到集群"><a href="#添加节点到集群" class="headerlink" title="添加节点到集群"></a>添加节点到集群</h2><p>要添加的节点必须满足 <a href="#%E4%BE%9D%E8%B5%96">依赖</a>，否则添加会失败 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ADDING HOSTS](https://docs.ceph.com/en/quincy/cephadm/host-management/#adding-hosts)">[6]</span></a></sup></p>
<ol>
<li>在 <a href="#%E4%BD%BF%E7%94%A8-cephadm-bootstrap-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%9B%86%E7%BE%A4%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9">第一个节点</a> 上执行以下命令，安装集群的 SSH public key，安装到新节点的 <code>/root/.ssh/authorized_keys</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -f -i /etc/ceph/ceph.pub root@10.111.30.110</span><br><span class="line">ssh-copy-id -f -i /etc/ceph/ceph.pub root@10.111.30.120</span><br></pre></td></tr></table></figure></li>
<li>将新节点加入集群。<code>--labels _admin</code> 选项会将第一个节点上的拥有管理员权限的 key （<code>/etc/ceph/ceph.client.admin.keyring</code>）拷贝到新添加的主机上，之后方便在主机上使用 <code>cephadm shell</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch host add ceph-node-2 10.111.30.110 --labels _admin</span><br><span class="line">Added host &#x27;ceph-node-2&#x27;</span><br><span class="line">[ceph: root@ceph-node-1 /]# ceph orch host add ceph-node-3 10.111.30.120 --labels _admin</span><br><span class="line">Added host &#x27;ceph-node-3&#x27;</span><br></pre></td></tr></table></figure></li>
<li>添加之后查看集群信息<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph status</span><br><span class="line">  cluster:</span><br><span class="line">    id:     bcff3e7c-0f2f-11ee-afdf-000c29687fa4</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            OSD count 0 &lt; osd_pool_default_size 3</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum ceph-node-1,ceph-node-3,ceph-node-2 (age 7m)</span><br><span class="line">    mgr: ceph-node-1.dfbrag(active, since 8m), standbys: ceph-node-2.lnnzmd</span><br><span class="line">    osd: 0 osds: 0 up, 0 in</span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   0 pools, 0 pgs</span><br><span class="line">    objects: 0 objects, 0 B</span><br><span class="line">    usage:   0 B used, 0 B / 0 B avail</span><br><span class="line">    pgs:     </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="将节点从集群移除"><a href="#将节点从集群移除" class="headerlink" title="将节点从集群移除"></a>将节点从集群移除</h2><p>要将节点从集群移除，首先要将节点上的 <code>daemons</code> 都移除，执行以下命令 <sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[REMOVING HOSTS](https://docs.ceph.com/en/quincy/cephadm/host-management/#removing-hosts)">[7]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch host drain *&lt;host&gt;*</span><br></pre></td></tr></table></figure>
<p>此命令实际上在节点上添加了 Label <code>_no_schedule</code>。此节点上所有的 OSDs 都会被调度移走。可以通过以下命令，查看 OSD 移除（迁移）的进度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch osd rm status</span><br></pre></td></tr></table></figure>
<p>使用以下命令检查节点上是否还有 <code>daemons</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch ps &lt;host&gt;</span><br></pre></td></tr></table></figure>
<p>待所有的 <code>daemons</code> 都被移除后，执行以下命令删除节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch host rm &lt;host&gt;</span><br></pre></td></tr></table></figure>

<h2 id="添加存储"><a href="#添加存储" class="headerlink" title="添加存储"></a>添加存储</h2><p>存储要满足以下条件，才能作为 OSD 加入集群用作存储设备 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[DEPLOY OSDS](https://docs.ceph.com/en/latest/cephadm/services/osd/#creating-new-osds)">[8]</span></a></sup></p>
<ul>
<li>裸设备，必须没有分区存在</li>
<li>设备不得具有任何 LVM 状态</li>
<li>设备不能包含文件系统</li>
<li>设备不得包含 Ceph BlueStore OSD</li>
<li>存储必须大于 5G</li>
</ul>
<p>本示例中，每台节点添加了 20G 的裸磁盘用于集群的 OSD 存储，要将所有可用的存储（磁盘）设备当作存储添加到集群，选择以下方式</p>
<ol>
<li>执行以下命令，将节点上所有可用的存储设备加入 OSD 存储 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch apply osd --all-available-devices</span><br><span class="line">Scheduled osd.all-available-devices update...</span><br></pre></td></tr></table></figure></li>
<li>可以使用以下命令指定节点和磁盘添加 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[DEPLOY OSDS](https://docs.ceph.com/en/latest/cephadm/services/osd/#creating-new-osds)">[8]</span></a></sup><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# lsblk </span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0  100G  0 disk </span><br><span class="line">|-sda1            8:1    0    1G  0 part /rootfs/boot</span><br><span class="line">`-sda2            8:2    0   99G  0 part </span><br><span class="line">  |-centos-root 253:0    0   50G  0 lvm  /rootfs</span><br><span class="line">  |-centos-swap 253:1    0    2G  0 lvm  [SWAP]</span><br><span class="line">  `-centos-home 253:2    0   47G  0 lvm  /rootfs/home</span><br><span class="line">sdb               8:16   0   20G  0 disk</span><br><span class="line"></span><br><span class="line">[ceph: root@ceph-node-1 /]# ceph orch device ls</span><br><span class="line">HOST         PATH      TYPE  DEVICE ID   SIZE  AVAILABLE  REFRESHED  REJECT REASONS  </span><br><span class="line">ceph-node-1  /dev/sdb  hdd              21.4G  Yes        18m ago                    </span><br><span class="line">ceph-node-2  /dev/sdb  hdd              21.4G  Yes        23m ago                    </span><br><span class="line">ceph-node-3  /dev/sdb  hdd              21.4G  Yes        22m ago                                                                          253:3    0   20G  0 lvm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[ceph: root@ceph-node-1 /]# ceph orch daemon add osd ceph-node-1:/dev/sdb</span><br><span class="line">Created osd(s) 0 on host &#x27;ceph-node-1&#x27;</span><br><span class="line"></span><br><span class="line">[ceph: root@ceph-node-1 /]# ceph orch daemon add osd ceph-node-2:/dev/sdb</span><br><span class="line">Created osd(s) 1 on host &#x27;ceph-node-2&#x27;</span><br><span class="line">[ceph: root@ceph-node-1 /]# ceph orch daemon add osd ceph-node-3:/dev/sdb</span><br><span class="line">Created osd(s) 2 on host &#x27;ceph-node-3&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[ceph: root@ceph-node-1 /]# ceph status</span><br><span class="line">  cluster:</span><br><span class="line">    id:     bcff3e7c-0f2f-11ee-afdf-000c29687fa4</span><br><span class="line">    health: HEALTH_OK</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum ceph-node-1,ceph-node-3,ceph-node-2 (age 22m)</span><br><span class="line">    mgr: ceph-node-1.dfbrag(active, since 22m), standbys: ceph-node-2.lnnzmd</span><br><span class="line">    osd: 3 osds: 3 up (since 50s), 3 in (since 70s)</span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   1 pools, 1 pgs</span><br><span class="line">    objects: 2 objects, 449 KiB</span><br><span class="line">    usage:   62 MiB used, 60 GiB / 60 GiB avail</span><br><span class="line">    pgs:     1 active+clean</span><br><span class="line">                                                                    </span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="查看集群内的节点信息"><a href="#查看集群内的节点信息" class="headerlink" title="查看集群内的节点信息"></a>查看集群内的节点信息</h2><p>查看集群内的所有节点信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch host ls</span><br><span class="line">HOST         ADDR           LABELS  STATUS  </span><br><span class="line">ceph-node-1  ceph-node-1                    </span><br><span class="line">ceph-node-2  10.111.30.110                  </span><br><span class="line">ceph-node-3  10.111.30.120</span><br></pre></td></tr></table></figure>

<h2 id="查看集群内运行的组件"><a href="#查看集群内运行的组件" class="headerlink" title="查看集群内运行的组件"></a>查看集群内运行的组件</h2><p>查看所有组件 (daemons) 的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch ps</span><br><span class="line">NAME                       HOST         STATUS         REFRESHED  AGE  VERSION  IMAGE NAME                                IMAGE ID      CONTAINER ID  </span><br><span class="line">alertmanager.ceph-node-1   ceph-node-1  running (42m)  2m ago     2d   0.20.0   quay.io/prometheus/alertmanager:v0.20.0   0881eb8f169f  d14854792fd0  </span><br><span class="line">crash.ceph-node-1          ceph-node-1  running (2d)   2m ago     2d   15.2.17  quay.io/ceph/ceph:v15                     93146564743f  459bf96f7646  </span><br><span class="line">crash.ceph-node-2          ceph-node-2  running (43m)  2m ago     43m  15.2.17  quay.io/ceph/ceph:v15                     93146564743f  a6fcd737a77e  </span><br><span class="line">crash.ceph-node-3          ceph-node-3  running (5h)   2m ago     5h   15.2.17  quay.io/ceph/ceph:v15                     93146564743f  100dfe6be1c6  </span><br><span class="line">grafana.ceph-node-1        ceph-node-1  running (2d)   2m ago     2d   6.7.4    quay.io/ceph/ceph-grafana:6.7.4           557c83e11646  48657ea7b022  </span><br><span class="line">mgr.ceph-node-1.bswaqn     ceph-node-1  running (2d)   2m ago     2d   15.2.17  quay.io/ceph/ceph:v15                     93146564743f  0399340209dc  </span><br><span class="line">mgr.ceph-node-2.jmyqrh     ceph-node-2  running (42m)  2m ago     42m  15.2.17  quay.io/ceph/ceph:v15                     93146564743f  52bf4fd6dc85  </span><br><span class="line">mon.ceph-node-1            ceph-node-1  running (2d)   2m ago     2d   15.2.17  quay.io/ceph/ceph:v15                     93146564743f  93b3f483d33b  </span><br><span class="line">mon.ceph-node-2            ceph-node-2  running (42m)  2m ago     42m  15.2.17  quay.io/ceph/ceph:v15                     93146564743f  429a884250d0  </span><br><span class="line">mon.ceph-node-3            ceph-node-3  running (5h)   2m ago     5h   15.2.17  quay.io/ceph/ceph:v15                     93146564743f  c1a83b532057  </span><br><span class="line">node-exporter.ceph-node-1  ceph-node-1  running (2d)   2m ago     2d   0.18.1   quay.io/prometheus/node-exporter:v0.18.1  e5a616e4b9cf  9b6801c15353  </span><br><span class="line">node-exporter.ceph-node-2  ceph-node-2  running (42m)  2m ago     42m  0.18.1   quay.io/prometheus/node-exporter:v0.18.1  e5a616e4b9cf  a4a1551d8512  </span><br><span class="line">node-exporter.ceph-node-3  ceph-node-3  running (5h)   2m ago     5h   0.18.1   quay.io/prometheus/node-exporter:v0.18.1  e5a616e4b9cf  807e73c74634  </span><br><span class="line">prometheus.ceph-node-1     ceph-node-1  running (42m)  2m ago     2d   2.18.1   quay.io/prometheus/prometheus:v2.18.1     de242295e225  51f52e64da3c                                   quay.io/prometheus/prometheus:v2.18.1     de242295e225  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看某一类型的组件的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch ps --daemon-type mon</span><br><span class="line">NAME             HOST         STATUS        REFRESHED  AGE  VERSION  IMAGE NAME             IMAGE ID      CONTAINER ID  </span><br><span class="line">mon.ceph-node-1  ceph-node-1  running (2d)  7m ago     2d   15.2.17  quay.io/ceph/ceph:v15  93146564743f  93b3f483d33b  </span><br><span class="line">mon.ceph-node-3  ceph-node-3  running (3h)  7m ago     3h   15.2.17  quay.io/ceph/ceph:v15  93146564743f  c1a83b532057 </span><br></pre></td></tr></table></figure>

<h2 id="列出服务状态"><a href="#列出服务状态" class="headerlink" title="列出服务状态"></a>列出服务状态</h2><p>列出所有服务的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch ls</span><br><span class="line">NAME           RUNNING  REFRESHED  AGE  PLACEMENT                                    IMAGE NAME                                IMAGE ID      </span><br><span class="line">alertmanager       1/1  116s ago   2d   count:1                                      quay.io/prometheus/alertmanager:v0.20.0   0881eb8f169f  </span><br><span class="line">crash              3/3  117s ago   2d   *                                            quay.io/ceph/ceph:v15                     93146564743f  </span><br><span class="line">grafana            1/1  116s ago   2d   count:1                                      quay.io/ceph/ceph-grafana:6.7.4           557c83e11646  </span><br><span class="line">mgr                2/2  117s ago   2d   count:2                                      quay.io/ceph/ceph:v15                     93146564743f  </span><br><span class="line">mon                3/3  117s ago   97m  ceph-node-1;ceph-node-2;ceph-node-3;count:3  quay.io/ceph/ceph:v15                     93146564743f  </span><br><span class="line">node-exporter      3/3  117s ago   2d   *                                            quay.io/prometheus/node-exporter:v0.18.1  e5a616e4b9cf  </span><br><span class="line">prometheus         1/1  116s ago   2d   count:1                                      quay.io/prometheus/prometheus:v2.18.1     de242295e225 </span><br></pre></td></tr></table></figure>

<p>列出某一个服务的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch ls mon   </span><br><span class="line">NAME  RUNNING  REFRESHED  AGE  PLACEMENT                                    IMAGE NAME             IMAGE ID      </span><br><span class="line">mon       3/3  4m ago     99m  ceph-node-1;ceph-node-2;ceph-node-3;count:3  quay.io/ceph/ceph:v15  93146564743f</span><br><span class="line"></span><br><span class="line">[ceph: root@ceph-node-1 /]# ceph orch ls mgr</span><br><span class="line">NAME  RUNNING  REFRESHED  AGE  PLACEMENT  IMAGE NAME             IMAGE ID      </span><br><span class="line">mgr       2/2  5m ago     2d   count:2    quay.io/ceph/ceph:v15  93146564743f </span><br></pre></td></tr></table></figure>

<h1 id="集群常见操作"><a href="#集群常见操作" class="headerlink" title="集群常见操作"></a>集群常见操作</h1><h2 id="指定集群中-Mon-和-Mgr-数量"><a href="#指定集群中-Mon-和-Mgr-数量" class="headerlink" title="指定集群中 Mon 和 Mgr 数量"></a>指定集群中 Mon 和 Mgr 数量</h2><p>Ceph 集群默认需要启动 5 个 Mon 和 2 个 Mgr，如果要修改，可以使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph: root@ceph-node-1 /]# ceph orch apply mon --placement=&quot;3 ceph-node-1 ceph-node-2 ceph-node-3&quot;</span><br><span class="line">Scheduled mon update...</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="删除集群中的所有-daemons"><a href="#删除集群中的所有-daemons" class="headerlink" title="删除集群中的所有 daemons"></a>删除集群中的所有 daemons</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./cephadm rm-cluster --fsid e2b9a77e-0c23-11ee-9e9d-000c29687fa4 --force</span><br></pre></td></tr></table></figure>



<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="No-module-named-‘-ssl’"><a href="#No-module-named-‘-ssl’" class="headerlink" title="No module named ‘_ssl’"></a>No module named ‘_ssl’</h2><p><a href="#%E5%AE%89%E8%A3%85-cephadm">安装 cephadm </a> 后，执行命令报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./cephadm</span> </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/root/./cephadm&quot;, line 27, in &lt;module&gt;</span><br><span class="line">    import ssl</span><br><span class="line">  File &quot;/usr/local/python3/lib/python3.10/ssl.py&quot;, line 99, in &lt;module&gt;</span><br><span class="line">    import _ssl             # if we can&#x27;t import it, let the error propagate</span><br><span class="line">ModuleNotFoundError: No module named &#x27;_ssl&#x27;</span><br></pre></td></tr></table></figure>

<a href="/202306161337/" title="问题原因及解决办法">问题原因及解决办法</a>

<h2 id="Ceph-does-not-support-pacific-or-later-for-this-version-of-this-linux-distro-and-therefore-cannot-add-a-repo-for-it"><a href="#Ceph-does-not-support-pacific-or-later-for-this-version-of-this-linux-distro-and-therefore-cannot-add-a-repo-for-it" class="headerlink" title="Ceph does not support pacific or later for this version of this linux distro and therefore cannot add a repo for it"></a>Ceph does not support pacific or later for this version of this linux distro and therefore cannot add a repo for it</h2><p><a href="#%E5%AE%89%E8%A3%85-cephadm">安装 cephadm </a> 后，将 <code>cephadm</code> 安装到主机上时报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./cephadm add-repo --release quincy</span></span><br><span class="line">ERROR: Ceph does not support pacific or later for this version of this linux distro and therefore cannot add a repo for it</span><br></pre></td></tr></table></figure>

<p>可以安装 <code>octopus</code> 版本的 repo。<code>octopus</code> 以后的版本，未提供 Centos 7 的 REPO 源。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./cephadm add-repo --release octopus</span></span><br><span class="line">Writing repo to /etc/yum.repos.d/ceph.repo...</span><br><span class="line">Enabling EPEL...</span><br><span class="line">Completed adding repo.</span><br></pre></td></tr></table></figure>

<h2 id="Failed-command-yum-install-y-cephadm"><a href="#Failed-command-yum-install-y-cephadm" class="headerlink" title="Failed command: yum install -y cephadm"></a>Failed command: yum install -y cephadm</h2><p><a href="#%E5%AE%89%E8%A3%85-cephadm">安装 cephadm </a> 后，将 <code>cephadm</code> 安装到主机上时报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./cephadm install</span></span><br><span class="line">yum: stderr http://repo.ugm.ac.id/epel/7/x86_64/repodata/c1f20191b9c9dd3a8605e007aec862f995ac567d71ea1adabee495f14d4ea699-primary.sqlite.bz2: [Errno 14] HTTP Error 404 - Not Found</span><br><span class="line">yum: stderr Trying other mirror.</span><br><span class="line">yum: stderr To address this issue please refer to the below wiki article </span><br><span class="line">yum: stderr </span><br><span class="line">yum: stderr https://wiki.centos.org/yum-errors</span><br><span class="line">yum: stderr </span><br><span class="line">yum: stderr If above article doesn&#x27;t help to resolve this issue please use https://bugs.centos.org/.</span><br><span class="line">yum: stderr </span><br><span class="line">yum: stderr warning: /var/cache/yum/x86_64/7/Ceph-noarch/packages/cephadm-15.2.17-0.el7.noarch.rpm: Header V4 RSA/SHA256 Signature, key ID 460f3994: NOKEY</span><br><span class="line">yum: stderr </span><br><span class="line">yum: stderr </span><br><span class="line">yum: stderr Invalid GPG Key from https://download.ceph.com/keys/release.gpg: No key found in given key data</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/root/./cephadm&quot;, line 9667, in &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File &quot;/root/./cephadm&quot;, line 9655, in main</span><br><span class="line">    r = ctx.func(ctx)</span><br><span class="line">  File &quot;/root/./cephadm&quot;, line 8129, in command_install</span><br><span class="line">    pkg.install(ctx.packages)</span><br><span class="line">  File &quot;/root/./cephadm&quot;, line 7975, in install</span><br><span class="line">    call_throws(self.ctx, [self.tool, &#x27;install&#x27;, &#x27;-y&#x27;] + ls)</span><br><span class="line">  File &quot;/root/./cephadm&quot;, line 1795, in call_throws</span><br><span class="line">    raise RuntimeError(&#x27;Failed command: %s&#x27; % &#x27; &#x27;.join(command))</span><br><span class="line">RuntimeError: Failed command: yum install -y cephadm</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>缺少 <code>release.asc</code> Key，使用以下命令安装 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Deploy ceph cluster on Ubuntu 18.04 and CentOS 7.8](https://www.flamingbytes.com/blog/deploy-ceph-cluster-on-ubuntu-18-04-and-centos-7-8/)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm --import &#x27;https://download.ceph.com/keys/release.asc&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="hostname-is-a-fully-qualified-domain-name"><a href="#hostname-is-a-fully-qualified-domain-name" class="headerlink" title="hostname is a fully qualified domain name"></a>hostname is a fully qualified domain name</h2><p><a href="#%E4%BD%BF%E7%94%A8-cephadm-bootstrap-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%9B%86%E7%BE%A4%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9">使用 cephadm bootstrap 初始化集群的第一个节点</a>，报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cephadm bootstrap --mon-ip 10.111.30.100</span></span><br><span class="line">ERROR: hostname is a fully qualified domain name (localhost.localdomain); either fix (e.g., &quot;sudo hostname localhost&quot; or similar) or pass --allow-fqdn-hostname</span><br></pre></td></tr></table></figure>
<p><a href="#%E5%AE%89%E8%A3%85">需要提前配置好节点的主机名</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.ceph.com/en/latest/cephadm/install/">官网安装文档</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ceph.com/en/latest/cephadm/install/#curl-based-installation">CURL-BASED INSTALLATION</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.flamingbytes.com/blog/deploy-ceph-cluster-on-ubuntu-18-04-and-centos-7-8/">Deploy ceph cluster on Ubuntu 18.04 and CentOS 7.8</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ceph.com/en/quincy/cephadm/install/#what-to-know-before-you-bootstrap">BOOTSTRAP A NEW CLUSTER</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ceph.com/en/quincy/cephadm/install/#running-the-bootstrap-command">RUNNING THE BOOTSTRAP COMMAND</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ceph.com/en/quincy/cephadm/install/#enable-ceph-cli">ENABLE CEPH CLI</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ceph.com/en/quincy/cephadm/host-management/#adding-hosts">ADDING HOSTS</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ceph.com/en/quincy/cephadm/host-management/#removing-hosts">REMOVING HOSTS</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ceph.com/en/latest/cephadm/services/osd/#creating-new-osds">DEPLOY OSDS</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>存储</category>
        <category>Ceph</category>
      </categories>
      <tags>
        <tag>Ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph 介绍</title>
    <url>/202306191333/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Ceph 可以提供（实现）的存储方式包括：</p>
<ul>
<li><strong>块存储</strong> - 提供类似普通硬盘的存储，为客户端提供硬盘</li>
<li><strong>文件系统存储</strong> - 分布式的共享文件系统</li>
<li><strong>对象存储</strong> - 提供大小无限制的云存储空间</li>
</ul>
<p>Ceph 是一个分布式的存储系统，非常灵活，若需要扩容，只需要向集群增加节点（服务器）即可，其存储的数据采用多副本的方式进行存储，生产环境中，至少需要存 3 份副本。</p>
<h1 id="Ceph-构成组件"><a href="#Ceph-构成组件" class="headerlink" title="Ceph 构成组件"></a>Ceph 构成组件</h1><ul>
<li><strong>Monitor Daemon</strong> - Ceph Mon 维护 Ceph 存储集群映射的主副本和 Ceph 存储群集的当前状态。监控器需要高度一致性，确保对Ceph 存储集群状态达成一致。维护着展示集群状态的各种图表，包括监视器图、 OSD 图、归置组（ PG ）图、和 CRUSH 图。默认需要 5 个 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[INTRO TO CEPH](https://docs.ceph.com/en/quincy/start/intro/#intro-to-ceph)">[1]</span></a></sup></li>
<li><strong>Mgr</strong> - 集群管理组件。默认需要 2 个。主要负责跟踪集群的运行指标及当前状态，包括存储使用率、性能指标及系统负载等。它也负责暴露基于 python 的 Ceph Web Dashboard 和 REST API。</li>
<li><strong>OSD Daemon</strong> - OSD 用于存储数据。 此外，Ceph OSD 利用 Ceph 节点的 CPU、内存和网络来执行数据复制、纠删代码、重新平衡、恢复、监控和报告功能。存储节点有几块硬盘用于存储，该节点就会有几个 osd 进程。</li>
<li><strong>MDSs</strong> - Metadata Server，为 Ceph 文件系统存储元数据</li>
<li><strong>RGW</strong> - 对象存储网关。主要为访问 ceph 的软件提供 API 接口。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.ceph.com/en/quincy/start/intro/#intro-to-ceph">INTRO TO CEPH</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>存储</category>
        <category>Ceph</category>
      </categories>
      <tags>
        <tag>Ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL 证书格式说明</title>
    <url>/202210211124/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>常见的 SSL 证书格式主要有：</p>
<ul>
<li><code>.DER</code>  <code>.CER</code> - 文件是二进制格式，只保存证书，不保存私钥。</li>
<li><code>.PEM</code> - 一般是文本格式，可保存证书，可保存私钥。</li>
<li><code>.CRT</code> - 可以是二进制格式，可以是文本格式，一般均为文本格式，与 <code>.DER</code> 格式相同，不保存私钥。</li>
<li><code>.PFX</code>  <code>.P12</code> - 二进制格式，同时包含证书和私钥，一般有密码保护。</li>
<li><code>.JK</code> - 二进制格式，同时包含证书和私钥，一般有密码保护。</li>
</ul>
<h1 id="证书格式说明"><a href="#证书格式说明" class="headerlink" title="证书格式说明"></a>证书格式说明</h1><h2 id="DER-和-CER"><a href="#DER-和-CER" class="headerlink" title="DER 和 CER"></a>DER 和 CER</h2><p>该格式是二进制文件内容，Java 和 Windows 服务器偏向于使用这种编码格式。只含有证书信息，不包含私钥</p>
<p>OpenSSL 查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -in certificate.der -inform der -text -noout</span><br></pre></td></tr></table></figure>
<p>转换为 PEM：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -in cert.crt -inform der -outform pem -out cert.pem</span><br></pre></td></tr></table></figure>

<h2 id="PEM"><a href="#PEM" class="headerlink" title="PEM"></a>PEM</h2><p>Privacy Enhanced Mail，一般为文本格式，以 <code>-----BEGIN...</code> 开头，以 <code>-----END...</code> 结尾。中间的内容是 BASE64 编码。这种格式可以保存证书和私钥，有时我们也把 PEM 格式的私钥的后缀改为 <code>.key</code> 以区别证书与私钥。</p>
<p>这种格式常用于 Apache 和 Nginx 服务器。</p>
<p>OpenSSL 查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -in certificate.pem -text -noout</span><br></pre></td></tr></table></figure>
<p>转换为 DER：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl x509 -in cert.crt -outform der -out cert.der</span><br></pre></td></tr></table></figure>

<h2 id="CRT"><a href="#CRT" class="headerlink" title="CRT"></a>CRT</h2><p>Certificate 的简称，有可能是 PEM 编码格式，也有可能是 DER 编码格式。如何查看请参考前两种格式。</p>
<h2 id="PFX"><a href="#PFX" class="headerlink" title="PFX"></a>PFX</h2><p>Predecessor of PKCS#12，这种格式是二进制格式，且证书和私钥存在一个 PFX 文件中。一般用于 Windows 上的 IIS 服务器。该格式的文件一般会有一个密码用于保证私钥的安全。</p>
<p>OpenSSL 查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -in for-iis.pfx</span><br></pre></td></tr></table></figure>

<p>转换为 PEM：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -in for-iis.pfx -out for-iis.pem -nodes</span><br></pre></td></tr></table></figure>

<h2 id="JKS"><a href="#JKS" class="headerlink" title="JKS"></a>JKS</h2><p>Java Key Storage，很容易知道这是 JAVA 的专属格式，利用 JAVA 的一个叫 keytool 的工具可以进行格式转换。一般用于 Tomcat 服务器。</p>
<p>可以到这里进行 <a href="https://myssl.com/cert_convert.html">格式转换</a></p>
<span id="more"></span>

<h1 id="证书格式转换"><a href="#证书格式转换" class="headerlink" title="证书格式转换"></a>证书格式转换</h1><p>以下证书格式之间是可以互相转换的<br><img src="https://i.csms.tech/img_65.png"></p>
<h2 id="将-JKS-格式证书转换成-PFX-格式"><a href="#将-JKS-格式证书转换成-PFX-格式" class="headerlink" title="将 JKS 格式证书转换成 PFX 格式"></a>将 JKS 格式证书转换成 PFX 格式</h2><p>使用 JDK 中自带的 Keytool 工具，将 JKS 格式证书文件转换成 PFX 格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -v -importkeystore -srckeystore D:\apk\Helloworld.jks -srcstoretype jks -srcstorepass 18738892937lyj \</span><br><span class="line">           -destkeystore Helloworld.pfx -deststoretype pkcs12 -deststorepass 18738892937lyj -destkeypass 18738892937lyj</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="将-PFX-格式证书转换为-JKS-格式"><a href="#将-PFX-格式证书转换为-JKS-格式" class="headerlink" title="将 PFX 格式证书转换为 JKS 格式"></a>将 PFX 格式证书转换为 JKS 格式</h2><p>使用 JDK 中自带的 Keytool 工具，将 PFX 格式证书文件转换成 JKS 格式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore xxx.pfx \</span><br><span class="line">        -destkeystore xxx.jks -srcstoretype PKCS12 -deststoretype JKS</span><br></pre></td></tr></table></figure>

<h2 id="将-PEM-x2F-KEY-x2F-CRT-格式证书转换为-PFX-格式"><a href="#将-PEM-x2F-KEY-x2F-CRT-格式证书转换为-PFX-格式" class="headerlink" title="将 PEM&#x2F;KEY&#x2F;CRT 格式证书转换为 PFX 格式"></a>将 PEM&#x2F;KEY&#x2F;CRT 格式证书转换为 PFX 格式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -export -out server.pfx -inkey server.key -in server.crt</span><br></pre></td></tr></table></figure>

<h2 id="将PFX转换为PEM-x2F-KEY-x2F-CRT"><a href="#将PFX转换为PEM-x2F-KEY-x2F-CRT" class="headerlink" title="将PFX转换为PEM&#x2F;KEY&#x2F;CRT"></a>将PFX转换为PEM&#x2F;KEY&#x2F;CRT</h2><p>可以使用 OpenSSL工具，将 PFX 格式证书文件转化为 KEY 格式密钥文件和 CRT 格式公钥文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -in server.pfx -nodes -out server.pem</span><br><span class="line">openssl rsa -in server.pem -out server.key</span><br><span class="line">openssl x509 -in server.pem -out server.crt</span><br></pre></td></tr></table></figure>

<h1 id="openssl-命令说明"><a href="#openssl-命令说明" class="headerlink" title="openssl 命令说明"></a>openssl 命令说明</h1><p>常用命令选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-in</code></td>
<td>输入文件</td>
<td></td>
</tr>
<tr>
<td><code>-out</code></td>
<td>输出文件，默认为 <code>stdout</code></td>
<td></td>
</tr>
<tr>
<td><code>-inform</code></td>
<td>输入文件格式</td>
<td><code>DER</code> or <code>PEM</code></td>
</tr>
<tr>
<td><code>-outform</code></td>
<td>输出文件格式</td>
<td><code>DER</code> or <code>PEM</code></td>
</tr>
<tr>
<td><code>-keyform</code></td>
<td><code>key</code> 的格式，默认为 <code>PEM</code></td>
<td></td>
</tr>
<tr>
<td><code>-text</code></td>
<td>输出文本格式的内容</td>
<td><code>openssl x509  -text -in sverver.crt</code> 打印证书文本内容</td>
</tr>
<tr>
<td><code>-noout</code></td>
<td>不输出 REQ</td>
<td><code>openssl x509 -noout -text -in sverver.crt</code> <br/>打印证书文本格式的详情，不包括证书内容</td>
</tr>
</tbody></table>
<h2 id="查看证书内容"><a href="#查看证书内容" class="headerlink" title="查看证书内容"></a>查看证书内容</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl x509 -text -noout -in server.crt</span><br></pre></td></tr></table></figure>

<h2 id="使用-openssl-生成随机密码"><a href="#使用-openssl-生成随机密码" class="headerlink" title="使用 openssl 生成随机密码"></a>使用 openssl 生成随机密码</h2><p>几乎所有 Linux 发行版都包含 openssl。我们可以利用它的随机功能来生成可以用作密码的随机字母字符串。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rand -base64 8</span><br></pre></td></tr></table></figure>
<p><code>openssl rand </code> 命令帮助信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl rand</span> </span><br><span class="line">Usage: rand [options] num</span><br><span class="line">where options are</span><br><span class="line">-out file             - write to file</span><br><span class="line">-engine e             - use engine e, possibly a hardware device.</span><br><span class="line">-rand file:file:... - seed PRNG from files</span><br><span class="line">-base64               - base64 encode output</span><br><span class="line">-hex                  - hex encode output</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title>Cloudflare 常用配置</title>
    <url>/202307201408/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="同一个域名使用不同的-HTTPS-重定向规则"><a href="#同一个域名使用不同的-HTTPS-重定向规则" class="headerlink" title="同一个域名使用不同的 HTTPS 重定向规则"></a>同一个域名使用不同的 HTTPS 重定向规则</h1><p>在 Cloudflare 中，配置的规则 (比如 <code>自动 HTPTPS 重写</code> 功能) 对所有使用了 Cloudflare 加速的域名都生效。</p>
<p>此时假如有 2 个二级域名  <code>d1.abc.com</code> 和 <code>d2.abc.com</code>，都启用了 Cloudflare 加速功能，此时开启 <code>自动 HTPTPS 重写</code> 功能，则使用 HTTP 协议访问，都会被重定向到 HTTPS。假如域名 <code>d2.abc.com</code> 不想进行 HTTPS 重定向，即使用 HTTP 访问 <code>d2.abc.com</code> 不重定向到 <code>https://d2.abc.com</code>。要实现此功能，参考以下步骤</p>
<ol>
<li>首先在 <code>SSL/TLS</code> –&gt; <code>边缘证书</code> 中 <em>开启</em> <code>自动 HTPTPS 重写</code> 功能，<em>关闭</em> <code>始终使用 HTTPS</code> 功能<br> <img src="https://i.csms.tech/img_198.png"><br> <img src="https://i.csms.tech/img_199.png"></li>
<li>在 <code>自动 HTPTPS 重写</code> 中配置规则，参考下图，定义规则名称，选择 <code>自定义筛选表达式</code>，在表达式中配置筛选条件匹配 <code>d2.abc.com</code>，在下面的设置中 <em>关闭</em> <code>自动 HTPTPS 重写</code> 功能<br> <img src="https://i.csms.tech/img_200.png"></li>
</ol>
<p>通过以上配置即可实现，同一个域名的不同子域名有不同的重定向规则。其他类似需求也可参考此思路配置</p>
<span id="more"></span>
<h1 id="Python-模块-CloudFlare"><a href="#Python-模块-CloudFlare" class="headerlink" title="Python 模块 CloudFlare"></a>Python 模块 CloudFlare</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install CloudFlare</span><br></pre></td></tr></table></figure>
<p>以下示例获取所有的账户名下的域名列表。<a href="https://developers.cloudflare.com/api/operations/zones-get">获取 zones 参数说明</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">import CloudFlare</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置您的 Cloudflare API 密钥</span></span><br><span class="line">api_key = &#x27;YOUR_API_KEY&#x27;</span><br><span class="line">email = &#x27;YOUR_EMAIL&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化 Cloudflare 客户端</span></span><br><span class="line">cf = CloudFlare.CloudFlare(email=email, token=api_key)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取所有账户</span></span><br><span class="line">accounts = cf.accounts.get()</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遍历每个账户并获取其域名</span></span><br><span class="line">for account in accounts:</span><br><span class="line">    account_id = account[&#x27;id&#x27;]</span><br><span class="line">    zones = cf.zones.get(params=&#123;&#x27;account.id&#x27;: account_id&#125;)</span><br><span class="line"></span><br><span class="line">    for zone in zones:</span><br><span class="line">        zone_name = zone[&#x27;name&#x27;]</span><br><span class="line">        print(f&quot;Account ID: &#123;account_id&#125;, Domain: &#123;zone_name&#125;&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="捕获错误消息"><a href="#捕获错误消息" class="headerlink" title="捕获错误消息"></a>捕获错误消息</h2><p>使用以下代码处理鉴权错误的代码。如果鉴权错误，可以捕获到错误消息 <code>Unknown X-Auth-Key or X-Auth-Email</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="comment"># 尝试获取账户列表</span></span><br><span class="line"><span class="meta">... </span>    accounts = cf.accounts.get()</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>    <span class="comment"># 处理异常并输出错误信息</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(e.args)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="number">9103</span>, <span class="string">&#x27;Unknown X-Auth-Key or X-Auth-Email&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="获取域名配置"><a href="#获取域名配置" class="headerlink" title="获取域名配置"></a>获取域名配置</h2><p>要从 cf 获取域名配置，可以使用以下常用接口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cf.zones.settings.always_online(zone_id)</span><br><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;always_online&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cf.zones.settings.automatic_https_rewrites(zone_id)</span><br><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;automatic_https_rewrites&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cf.zones.settings.get(zone_id)</span><br><span class="line">[&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;0rtt&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;advanced_ddos&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;always_online&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;always_use_https&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;automatic_https_rewrites&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;brotli&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;browser_cache_ttl&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">14400</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;browser_check&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;cache_level&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;aggressive&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;challenge_ttl&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">1800</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;ciphers&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: [], <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;cname_flattening&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;flatten_at_root&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;development_mode&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;early_hints&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;edge_cache_ttl&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">7200</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;email_obfuscation&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;filter_logs_to_cloudflare&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;hotlink_protection&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;http2&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;http3&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;ip_geolocation&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;ipv6&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="string">&#x27;2023-08-09T08:30:26.562627Z&#x27;</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;log_to_cloudflare&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;long_lived_grpc&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;max_upload&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;min_tls_version&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1.0&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;minify&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: &#123;<span class="string">&#x27;css&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;html&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;js&#x27;</span>: <span class="string">&#x27;off&#x27;</span>&#125;, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;mirage&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;mobile_redirect&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: &#123;<span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;mobile_subdomain&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;strip_uri&#x27;</span>: <span class="literal">False</span>&#125;, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;opportunistic_encryption&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;opportunistic_onion&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;orange_to_orange&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;origin_error_page_pass_thru&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;polish&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;pq_keyex&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;prefetch_preload&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;privacy_pass&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;proxy_read_timeout&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;pseudo_ipv4&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;response_buffering&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;rocket_loader&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;security_header&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;value&#x27;</span>: &#123;<span class="string">&#x27;strict_transport_security&#x27;</span>: &#123;<span class="string">&#x27;enabled&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;max_age&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;include_subdomains&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;preload&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;nosniff&#x27;</span>: <span class="literal">False</span>&#125;&#125;, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;security_level&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;server_side_exclude&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;sort_query_string_for_cache&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;full&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;certificate_status&#x27;</span>: <span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;validation_errors&#x27;</span>: [], <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;tls_1_2_only&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;tls_1_3&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;tls_client_auth&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;true_client_ip_header&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;visitor_ip&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;waf&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;webp&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;websockets&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cf.zones.settings.ssl(zone_id)</span><br><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;full&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;certificate_status&#x27;</span>: <span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;validation_errors&#x27;</span>: [], <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="更新域名配置"><a href="#更新域名配置" class="headerlink" title="更新域名配置"></a>更新域名配置</h2><p><code>items</code> 列表中包含了需要修改的配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cf.zones.settings.patch(zone_id, data=&#123;<span class="string">&#x27;items&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;flexible&#x27;</span>&#125;]&#125;)</span><br><span class="line">[&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;flexible&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="string">&#x27;2023-08-15T08:58:43.152564Z&#x27;</span>, <span class="string">&#x27;certificate_status&#x27;</span>: <span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;validation_errors&#x27;</span>: [], <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cf.zones.settings.patch(zone_id, data=&#123;<span class="string">&#x27;items&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;always_online&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>&#125;]&#125;)</span><br><span class="line">[&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="string">&#x27;2023-08-15T09:03:22.933836Z&#x27;</span>, <span class="string">&#x27;certificate_status&#x27;</span>: <span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;validation_errors&#x27;</span>: [], <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;always_online&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;modified_on&#x27;</span>: <span class="string">&#x27;2023-08-15T09:03:22.967784Z&#x27;</span>, <span class="string">&#x27;editable&#x27;</span>: <span class="literal">True</span>&#125;]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>云平台</category>
        <category>Cloudflare</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>常用小脚本收集</title>
    <url>/202311221348/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="批量下载"><a href="#批量下载" class="headerlink" title="批量下载"></a>批量下载</h2><h3 id="批量下载文件中给定的-urls"><a href="#批量下载文件中给定的-urls" class="headerlink" title="批量下载文件中给定的 urls"></a>批量下载文件中给定的 urls</h3><p>假如需要下载的 urls 存在于给定的文件中（每行一个 url），本示例演示批量并发下载，假设 urls 存在于文件 <code>img.txt</code> 中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个函数来下载图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_image</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        response.raise_for_status()  <span class="comment"># 检查是否有 HTTP 错误</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;下载完成: <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;下载失败: <span class="subst">&#123;url&#125;</span>, 错误: <span class="subst">&#123;e&#125;</span>&quot;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件中读取图片链接</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;img.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    img_urls = file.read().splitlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ThreadPoolExecutor 来限制并发线程数量为 10</span></span><br><span class="line">max_concurrent_threads = <span class="number">10</span></span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_concurrent_threads) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># 提交任务并下载图片</span></span><br><span class="line">    executor.<span class="built_in">map</span>(download_image, img_urls)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;所有图片下载完成&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title>Confluence 常用基本操作</title>
    <url>/202208250937/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Confluence 是一个专业的企业知识管理与协同软件，也可以用于构建企业 <a href="https://zh.m.wikipedia.org/zh/Wiki"><code>wiki</code></a>。通过它可以实现团队成员之间的协作和知识共享。在这里，团队成员齐心协力，各擅其能，协同地编写文档和管理项目。从此打破不同团队、不同部门以及个人之间信息孤岛的僵局，Confluence 真正实现了组织资源共享。Confluence 使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论。</p>
<span id="more"></span>

<h3 id="根据标题生成文章目录"><a href="#根据标题生成文章目录" class="headerlink" title="根据标题生成文章目录"></a>根据标题生成文章目录</h3><p>在 confluence 中编写文章时，可以根据不同级别的 <code>标题</code> 对文章内容进行分层，如下图所示    </p>
<p><img src="https://i.csms.tech/img_44.png"></p>
<p>在此情况之下，可以根据文章中的标题，生成文章目录，在文章内容过长或过多的情况下，可以根据目录轻松快速的定位到需要的内容章节，操作过长如下：<br>编辑需要生成目录的文章，按照下图所示的位置选择 <code>插入目录宏</code>  </p>
<p><img src="https://i.csms.tech/img_45.png"></p>
<p>在弹出的 <code>编辑‘目录’宏</code> 页面中配置相关参数，配置完成后，点击 <code>保存</code>，将会在页面中生成文章目录<br><img src="https://i.csms.tech/img_46.png"><br><img src="https://i.csms.tech/img_47.png"></p>
<p>如果要在特点的地方显示文章目录，可以使用 <code>页面布局</code> 操作，比如选择 <code>页面布局</code> 中的 <code>包含侧边栏的两列节</code> 并将目录放置在右边的侧边栏，示例及效果如下图<br><img src="https://i.csms.tech/img_48.png"><br><img src="https://i.csms.tech/img_49.png"></p>
<h3 id="链接到文章内的锚点"><a href="#链接到文章内的锚点" class="headerlink" title="链接到文章内的锚点"></a>链接到文章内的锚点</h3><h4 id="创建锚点"><a href="#创建锚点" class="headerlink" title="创建锚点"></a>创建锚点</h4><p>在需要创建 <code>锚点</code> 的地方，选择 <code>插入 ‘锚’ 宏</code>，输入 <code>锚名称</code>，插入后产生对应 <code>锚点</code><br><img src="https://i.csms.tech/img_50.png"></p>
<h4 id="链接到同一文章内锚点"><a href="#链接到同一文章内锚点" class="headerlink" title="链接到同一文章内锚点"></a>链接到同一文章内锚点</h4><p>在需要链接 <code>锚点</code> 的地方，选择 <code>插入链接</code>，链接中 <code>锚点</code> 使用 <code>#锚点名称</code> 进行链接<br><img src="https://i.csms.tech/img_51.png"></p>
<h4 id="链接到其他文章内的锚点"><a href="#链接到其他文章内的锚点" class="headerlink" title="链接到其他文章内的锚点"></a>链接到其他文章内的锚点</h4><p><code>confluence</code> 的同一个空间内不允许存在同名的页面（文章），因此所有页面（文章）名具有独一性，当需要链接到其他页面中的锚点时，可以参照以下配置。比如要链接到页面 <code>cs</code> 中的 <code>test</code> 锚点，按照以下配置，在需要链接的地方插入链接<br><img src="https://i.csms.tech/img_52.png"></p>
<blockquote>
<p>这种方式下，锚点所在的页面改名，锚点依然生效，使用锚点的链接中页面名也会随之改变  </p>
</blockquote>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>containerd 使用方法</title>
    <url>/202212011355/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>containerd.io-1.4.13-3</li>
</ul>
<h1 id="containerd-相关配置"><a href="#containerd-相关配置" class="headerlink" title="containerd 相关配置"></a>containerd 相关配置</h1><h2 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h2><p><code>containerd</code> 服务默认配置文件为 <code>/etc/containerd/config.toml</code></p>
<figure class="highlight shell"><figcaption><span>/etc/containerd/config.toml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">root = <span class="string">&quot;/var/lib/containerd&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">state = <span class="string">&quot;/run/containerd&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">subreaper = <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">oom_score = 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Containerd 有两个不同的存储路径，一个用来保存持久化数据，一个用来保存运行时状态。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Containerd 的前世今生和保姆级入门教程](https://blog.51cto.com/u_15127639/3256557)">[1]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>/etc/containerd/config.toml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">root = <span class="string">&quot;/var/lib/containerd&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">state = <span class="string">&quot;/run/containerd&quot;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>root</code> - 用来保存持久化数据，包括 Snapshots, Content, Metadata 以及各种插件的数据。每一个插件都有自己单独的目录，Containerd 本身不存储任何数据，它的所有功能都来自于已加载的插件。</li>
<li><code>state</code> - 用来保存临时数据，包括 <code>sockets</code>、<code>pid</code>、<code>挂载点</code>、<code>运行时状态</code> 以及不需要持久化保存的插件数据。</li>
</ul>
<figure class="highlight shell"><figcaption><span>/etc/containerd/config.toml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">oom_score = 0</span></span><br></pre></td></tr></table></figure>
<p>Containerd 是容器的守护者，一旦发生内存不足的情况，理想的情况应该是先杀死容器，而不是杀死 Containerd。所以需要调整 Containerd 的 OOM 权重，减少其被 OOM Kill 的几率。<code>oom_score</code> 其取值范围为 <code>-1000</code> 到 <code>1000</code>，如果将该值设置为 <code>-1000</code>，则进程永远不会被杀死，建议 Containerd 将该值设置为 <code>-999</code> 到 <code>0</code> 之间。如果作为 Kubernetes 的 Worker 节点，可以考虑设置为 <code>-999</code>。</p>
<h2 id="containerd-服务配置文件"><a href="#containerd-服务配置文件" class="headerlink" title="containerd 服务配置文件"></a>containerd 服务配置文件</h2><p>默认的 <code>containerd</code> 服务的配置为 <code>/usr/lib/systemd/system/containerd.service</code></p>
<figure class="highlight shell"><figcaption><span>/usr/lib/systemd/system/containerd.service</span></figcaption><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=containerd container runtime</span><br><span class="line">Documentation=https://containerd.io</span><br><span class="line">After=network.target local-fs.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStartPre=-/sbin/modprobe overlay</span><br><span class="line">ExecStart=/usr/bin/containerd</span><br><span class="line"></span><br><span class="line">Type=notify</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">LimitNOFILE=1048576</span><br><span class="line"></span><br><span class="line">TasksMax=infinity</span><br><span class="line">OOMScoreAdjust=-999</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong><code>Delegate</code></strong> - 这个选项允许 Containerd 以及运行时自己管理自己创建的容器的 cgroups。如果不设置这个选项，<code>systemd</code> 就会将进程移到自己的 cgroups 中，从而导致 Containerd 无法正确获取容器的资源使用情况。</p>
</li>
<li><p><strong><code>KillMode</code></strong> - 这个选项用来处理 Containerd 进程被杀死的方式。默认情况下，<code>systemd</code> 会在进程的 cgroup 中查找并杀死 Containerd 的所有子进程，这肯定不是我们想要的。<code>KillMode</code> 字段可以设置的值如下:</p>
<ul>
<li><strong><code>control-group</code></strong> -（默认值）当前控制组里面的所有子进程，都会被杀掉</li>
<li><strong><code>process</code></strong> - 只杀主进程。</li>
<li><strong><code>mixed</code></strong> - 主进程将收到 <code>SIGTERM</code> 信号，子进程收到 <code>SIGKILL</code> 信号</li>
<li><strong><code>none</code></strong> - 没有进程会被杀掉，只是执行服务的 stop 命令。</li>
</ul>
<p>  需要将 <code>KillMode</code> 的值设置为<code> process</code>，这样可以确保升级或重启 Containerd 时不杀死现有的容器。</p>
</li>
</ul>
<h1 id="客户端工具-ctr-使用"><a href="#客户端工具-ctr-使用" class="headerlink" title="客户端工具 ctr 使用"></a>客户端工具 ctr 使用</h1><h2 id="ctr-管理镜像"><a href="#ctr-管理镜像" class="headerlink" title="ctr 管理镜像"></a>ctr 管理镜像</h2><h3 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr image pull docker.io/library/nginx:alpine</span><br></pre></td></tr></table></figure>

<h3 id="列出本地镜像"><a href="#列出本地镜像" class="headerlink" title="列出本地镜像"></a>列出本地镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ctr image <span class="built_in">ls</span></span></span><br><span class="line">REF                            TYPE                                                      DIGEST                                                                  SIZE    PLATFORMS                                                                                LABELS </span><br><span class="line">docker.io/library/nginx:alpine application/vnd.docker.distribution.manifest.list.v2+json sha256:455c39afebd4d98ef26dd70284aa86e6810b0485af5f4f222b19b89758cabf1e 9.8 MiB linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x -</span><br></pre></td></tr></table></figure>
<h3 id="将镜像挂载到本地目录"><a href="#将镜像挂载到本地目录" class="headerlink" title="将镜像挂载到本地目录"></a>将镜像挂载到本地目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ctr image mount docker.io/library/nginx:alpine /mnt</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> /mnt</span></span><br><span class="line">bin  docker-entrypoint.d   etc   lib    mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  docker-entrypoint.sh  home  media  opt  root  sbin  sys  usr</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>卸载已挂载的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr image unmount /mnt</span><br></pre></td></tr></table></figure>

<h2 id="ctr-管理-容器"><a href="#ctr-管理-容器" class="headerlink" title="ctr 管理 容器"></a>ctr 管理 容器</h2><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr container create docker.io/library/nginx:alpine nginx</span><br></pre></td></tr></table></figure>
<p>容器创建后，并没有开始运行，只是分配了容器运行所需的资源及配置的数据结构，这意味着 <code>namespaces</code>、<code>rootfs</code> 和容器的配置都已经初始化成功了，只是用户进程(这里是 <code>nginx</code>)还没有启动，容器（进程）状态的变化由 <code>Task</code> 对象实现，通过命令 <code>ctr task</code> 来管理。</p>
<p>启动 <code>ctr container create</code> 创建的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr task start nginx</span><br></pre></td></tr></table></figure>
<p>以上命令启动之前创建的容器 <code>nginx</code>，未指定其他参数时，容器中的进程在系统前台运行，如需后台运行，可以使用选项 <code>-d</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr task start nginx -d</span><br></pre></td></tr></table></figure>

<p>也可以直接使用 <code>run</code> 命令，创建并启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr run --rm -d docker.io/library/nginx:alpine nginx1</span><br></pre></td></tr></table></figure>

<h3 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr container ls</span><br></pre></td></tr></table></figure>

<p>查看容器中进程的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ctr task <span class="built_in">ls</span></span></span><br><span class="line">TASK      PID     STATUS    </span><br><span class="line">nginx1    5495    RUNNING</span><br></pre></td></tr></table></figure>
<p>查看容器中运行的所有的进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ctr task ps nginx1</span></span><br><span class="line">PID     INFO</span><br><span class="line">5495    -</span><br><span class="line">5531    -</span><br><span class="line">5532    -</span><br><span class="line">5533    -</span><br><span class="line">5534    -</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>这里的 PID 是宿主机看到的 PID，不是容器中看到的 PID。</strong></p>
<h3 id="查看容器详细信息"><a href="#查看容器详细信息" class="headerlink" title="查看容器详细信息"></a>查看容器详细信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr container info nginx</span><br></pre></td></tr></table></figure>

<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>停止&#x2F;删除容器中的进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr task delete nginx -f</span><br><span class="line"></span><br><span class="line">ctr task pause nginx</span><br></pre></td></tr></table></figure>
<p>以上命令<strong>删除&#x2F;停止容器中的进程，但是并不删除容器</strong>，执行以上命令后再执行以下命令，可删除容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr container delete nginx</span><br></pre></td></tr></table></figure>
<p><strong>ctr 没有 stop 容器的功能，只能暂停或者杀死容器。</strong></p>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr task exec -t --exec-id 1 nginx1 sh</span><br></pre></td></tr></table></figure>
<p>执行 <code>ctr task exec</code> 进入容器，必须制定 <code>--exec-id</code>，值可以随便指定。</p>
<h3 id="namespace-管理"><a href="#namespace-管理" class="headerlink" title="namespace 管理"></a>namespace 管理</h3><p>Containerd 相比于 Docker ，多了 Namespace 的概念，使用以下命令，查看所有的 Namespace</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ctr ns <span class="built_in">ls</span></span></span><br><span class="line">NAME    LABELS </span><br><span class="line">default        </span><br><span class="line">moby     </span><br></pre></td></tr></table></figure>
<p><code>docker</code> 默认使用 <code>moby</code> 的 Namespace，要使用 <code>ctr</code> 命令查看 <code>docker</code> 创建的容器，需要使用选项 <code>-n moby</code> 指定命名空间，否则 <code>ctr</code> 默认使用 <code>default</code> 命名空间，无法看到 <code>moby</code> 命名空间中的资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr -n moby container ls</span><br><span class="line">CONTAINER                                                           IMAGE    RUNTIME                           </span><br><span class="line">17b16c3699cdb88a1ff80d8a7c84724eff393c42186775b58418c90bd178600f    -        io.containerd.runtime.v1.linux    </span><br><span class="line">27fc19226baa91251d63a375a7b1309122334cfb5ceb39aeb67ab1701b708464    -        io.containerd.runtime.v1.linux</span><br></pre></td></tr></table></figure>

<p><em><strong>Kubernetes 默认使用 <code>k8s.io</code> 命名空间</strong></em>。</p>
<p><code>ctr</code> 没有配置或者环境变量可以来配置默认的 Namespace，在 Kubernetes 场景中，可以使用 <code>alias</code> 命令配置 <code>ctr</code>，使其自动指向 <code>k8s.io</code> 的 Namespace</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias ctr=&#x27;ctr -n k8s.io&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.51cto.com/u_15127639/3256557">Containerd 的前世今生和保姆级入门教程</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>containerd</tag>
      </tags>
  </entry>
  <entry>
    <title>Django admin 配置</title>
    <url>/202209021312/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Django 自带的 <code>Admin Site</code> 管理页面可以方便用户快速构建一个简单的后台管理系统，少量代码即可快速实现对数据库中的数据进行展示、修改、保存的可视化页面和功能。当需要对后台展示的数据进行配置时，只需要在 <code>app</code> 的代码文件 <code>admin.py</code> 中进行相应配置即可。</p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>centos 7</li>
<li>python 3.10</li>
<li>django 4.0</li>
</ul>
<h1 id="为-model-配置-admin-管理页面"><a href="#为-model-配置-admin-管理页面" class="headerlink" title="为 model 配置 admin 管理页面"></a>为 model 配置 admin 管理页面</h1><p>要为 model 启用 admin 管理接口，<a href="https://csms.tech/202301191014/#model-注册到后台">参考配置</a></p>
<span id="more"></span>
<h1 id="常用配置说明"><a href="#常用配置说明" class="headerlink" title="常用配置说明"></a>常用配置说明</h1><h2 id="配置登录页面和-web-页面中显示的-title"><a href="#配置登录页面和-web-页面中显示的-title" class="headerlink" title="配置登录页面和 web 页面中显示的 title"></a>配置登录页面和 web 页面中显示的 title</h2><p>修改 APP 对应的 <code>admin.py</code></p>
<figure class="highlight shell"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line"></span><br><span class="line">admin.site.site_header = &quot;My Admin Site&quot;</span><br><span class="line">admin.site.site_title = &quot;My Admin Site&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_53.png"></p>
<h2 id="常用配置示例"><a href="#常用配置示例" class="headerlink" title="常用配置示例"></a>常用配置示例</h2><p>admin 中的配置大多来自 <code>ModelAdmin</code> 对象的选项 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ModelAdmin 对象](https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/#modeladmin-options)">[2]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">假如 app 为 servers，导入 models</span></span><br><span class="line">from servers import models</span><br><span class="line"></span><br><span class="line">@admin.register(models.Servers)</span><br><span class="line">class ServersAdmin(admin.ModelAdmin):</span><br><span class="line">    # list_display 定义model 中要显示的列</span><br><span class="line">    # list_display_links 定义了哪些列可以点击(链接)跳转到对象的修改页面</span><br><span class="line">    list_display = (&#x27;inVender&#x27;, &#x27;contacter&#x27;, &#x27;name&#x27;, &#x27;ip&#x27;, &#x27;type&#x27;, &#x27;zone&#x27;, &#x27;diskSize&#x27;, &#x27;diskType&#x27;, &#x27;dataTransfer&#x27;)</span><br><span class="line">    list_display_links = (&#x27;inVender&#x27;, &#x27;name&#x27;, &#x27;ip&#x27;)</span><br><span class="line"></span><br><span class="line">    # fields 定义修改页面中显示哪些修改项, 未出现在此的列,添加或修改对象时不显示.</span><br><span class="line">    # fieldsets 对要编辑的部分进行分组显示, &#x27;classes&#x27;: (&#x27;collapse&#x27;,) 为 CSS 格式定义隐藏和显示</span><br><span class="line">    fields = (&#x27;inVender&#x27;, )</span><br><span class="line">    </span><br><span class="line">    fieldsets = (</span><br><span class="line">        [&#x27;Main&#x27;,&#123;</span><br><span class="line">            &#x27;fields&#x27;:(&#x27;name&#x27;,&#x27;ip&#x27;),</span><br><span class="line">        &#125;],</span><br><span class="line">        [&#x27;Advance&#x27;,&#123;</span><br><span class="line">            &#x27;classes&#x27;: (&#x27;collapse&#x27;,), # CSS</span><br><span class="line">            &#x27;fields&#x27;: (&#x27;inVender&#x27;,),</span><br><span class="line">        &#125;]</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    # search_fields  定义哪些列可以被搜索，假如搜索的列是外键或其他关连列，要使用关联列中的字符类型或数字类型为搜索对象，如 &#x27;inVender__name&#x27;</span><br><span class="line">    # 要自定义搜索多个内容，可参考本文后续内容</span><br><span class="line">    search_fields = (&#x27;name&#x27;, &#x27;inVender__name&#x27;)</span><br><span class="line">    </span><br><span class="line">    # 显示默认的搜索内容, Djanog 4 不可用</span><br><span class="line">    placeholder = &#x27;输入搜索内容&#x27;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # actions 要在变更列表页上提供的动作列表</span><br><span class="line">    actions = [&#x27;startCheck&#x27;]</span><br><span class="line">    </span><br><span class="line">    # actions_on_top actions_on_bottom 定义控制动作栏在页面的哪个位置出现，默认在顶部</span><br><span class="line">    actions_on_top = True</span><br><span class="line">    actions_on_bottom = False</span><br><span class="line">    </span><br><span class="line">    # readonly_fields 定义只读列，此处里面的项不可编辑，不在此列表中的项可以编辑</span><br><span class="line">    # 同时存在于 readonly_fields 和 fields/fieldsets 中的列，不可编辑</span><br><span class="line">    readonly_fields = (&#x27;name&#x27;,)</span><br><span class="line">    </span><br><span class="line">    # 控制每个分页的管理变更列表页面上出现多少个项目。默认情况下，设置为 100</span><br><span class="line">    # 可以将 list_per_page 属性设置为一个列表，以便在Admin页面上提供不同的页面大小选项。</span><br><span class="line">    list_per_page = 100</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 配置 filter, 可以在列表页的右侧显示筛选选项。当筛选的列只包含一个对象时，此筛选列会隐藏不显示</span><br><span class="line">    list_filter = (&#x27;name&#x27;,)</span><br><span class="line">    </span><br><span class="line">    # 允许在列表上直接编辑字段</span><br><span class="line">    list_editable = [&#x27;account&#x27;]</span><br></pre></td></tr></table></figure>

<!-- more -->
<h3 id="list-display-中自定义列"><a href="#list-display-中自定义列" class="headerlink" title="list_display 中自定义列"></a>list_display 中自定义列</h3><p>以下示例中，<code>project_series</code> 不属于 <code>Info</code> 模型中已有的字段，属于 <code>Info</code> 模型中的外键 <code>project</code> 中的字段，要在后台对应模型中添加显示此列，可以参考以下配置</p>
<figure class="highlight python"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@admin.register(<span class="params">models.Info</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;project_series&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">project_series</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> obj.project.project_series</span><br><span class="line">    </span><br><span class="line">    project_series.short_description = <span class="string">&#x27;项目系列&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义-actions"><a href="#自定义-actions" class="headerlink" title="自定义 actions"></a>自定义 actions</h3><p><code>actions</code> 定义要在变更列表页上提供的动作列表 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[管理 actions](https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/actions/#admin-actions)">[1]</span></a></sup> </p>
<p>以下示例代码中，添加了 3 个动作： <code>export_as_excel</code>，<code>change_payStatusToPay</code>，<code>change_payStatusToUnPay</code>，分别完成导出选中数据到 Excel、修改支付状态为支付&#x2F;未支付</p>
<p>其中，每个方法函数的 <code>short_description</code> 属性定义了显示在 admin 页面上的功能名称，<code>allowed_permissions</code> 定义了执行此操作需要的权限。</p>
<figure class="highlight python"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">models.Servers</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServersAdmin</span>(admin.ModelAdmin):</span><br><span class="line"></span><br><span class="line">    actions = [<span class="string">&quot;export_as_excel&quot;</span>,<span class="string">&#x27;change_payStatusToPay&#x27;</span>,<span class="string">&#x27;change_payStatusToUnPay&#x27;</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">export_as_excel</span>(<span class="params">self,request,queryset</span>):</span><br><span class="line">        meta = self.model._meta</span><br><span class="line">        field_names = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;inDeparMent&#x27;</span>, <span class="string">&#x27;inVender&#x27;</span>, <span class="string">&#x27;inOwner&#x27;</span>, <span class="string">&#x27;usedFor&#x27;</span>, <span class="string">&#x27;financeCode&#x27;</span>, <span class="string">&#x27;ip&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;validDateTo&#x27;</span>,<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">        response = HttpResponse(content_type=<span class="string">&#x27;application/msexcel&#x27;</span>)</span><br><span class="line">        filename = <span class="string">&quot;servers&quot;</span> + <span class="built_in">str</span>(time.time()).replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;.xlsx&#x27;</span></span><br><span class="line">        response[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=%s&#x27;</span> %(filename)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            wb = openpyxl.load_workbook(filename)</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            wb = openpyxl.Workbook()</span><br><span class="line">        ws = wb.active</span><br><span class="line">        ws.append(field_names)</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> queryset:</span><br><span class="line">            data = []</span><br><span class="line">            data.append(<span class="built_in">getattr</span>(obj,<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">            data.append(<span class="built_in">getattr</span>(obj,<span class="string">&#x27;inDeparMent&#x27;</span>).shortName)</span><br><span class="line">            data.append(<span class="built_in">getattr</span>(obj, <span class="string">&#x27;inVender&#x27;</span>).vender_shortName)</span><br><span class="line">            data.append(<span class="built_in">getattr</span>(obj, <span class="string">&#x27;inOwner&#x27;</span>).name)</span><br><span class="line">            data.append(<span class="built_in">getattr</span>(obj, <span class="string">&#x27;usedFor&#x27;</span>))</span><br><span class="line">            data.append(<span class="built_in">getattr</span>(obj, <span class="string">&#x27;financeCode&#x27;</span>))</span><br><span class="line">            data.append(<span class="built_in">getattr</span>(obj, <span class="string">&#x27;ip&#x27;</span>))</span><br><span class="line">            data.append(<span class="built_in">getattr</span>(obj, <span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">            data.append(<span class="built_in">getattr</span>(obj, <span class="string">&#x27;validDateTo&#x27;</span>))</span><br><span class="line">            data.append(<span class="built_in">getattr</span>(obj,<span class="string">&#x27;status&#x27;</span>))</span><br><span class="line">            ws.append(data)</span><br><span class="line">        wb.save(response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    export_as_excel.short_description = <span class="string">&quot;导出到Excel&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">change_payStatusToPay</span>(<span class="params">self,request,queryset</span>):</span><br><span class="line">        queryset.update(payStatus=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 执行完成后向 admin web 返回相应消息</span></span><br><span class="line">        self.message_user(request, _(<span class="string">&#x27;刷新完成&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    change_payStatusToPay.short_description = <span class="string">&quot;更改支付状态--&gt;已支付&quot;</span></span><br><span class="line">    change_payStatusToPay.allowed_permissions = (<span class="string">&#x27;change&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">change_payStatusToUnPay</span>(<span class="params">self,request,queryset</span>):</span><br><span class="line">        queryset.update(payStatus=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    change_payStatusToUnPay.short_description = <span class="string">&quot;更改支付状态--&gt;未支付&quot;</span></span><br><span class="line">    change_payStatusToUnPay.allowed_permissions = (<span class="string">&#x27;change&#x27;</span>,)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="自定义-filter"><a href="#自定义-filter" class="headerlink" title="自定义 filter"></a>自定义 filter</h3><p>要自定义 <code>filter</code>，可以通过继承 <code>django.contrib.admin.SimpleListFilter</code> 类来实现 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Using a SimpleListFilter](https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/filters/#using-a-simplelistfilter)">[3]</span></a></sup></p>
<p>以下代码示例创建自定义的 <code>filter</code>，用来筛选域名过期时间</p>
<figure class="highlight python"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> domains_collect <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> gettext_lazy <span class="keyword">as</span> _</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">models.RawDomains</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RawDomainsAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (<span class="string">&#x27;domain&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;domain_created_time&#x27;</span>, <span class="string">&#x27;expire&#x27;</span>)</span><br><span class="line">    search_fields = (<span class="string">&#x27;domain&#x27;</span>,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DomainExpireTimeFilter</span>(admin.SimpleListFilter):</span><br><span class="line">        title = _(<span class="string">&#x27;域名过期时间&#x27;</span>)</span><br><span class="line">        parameter_name = <span class="string">&#x27;expire&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">lookups</span>(<span class="params">self, request, model_admin</span>):</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                (<span class="string">&#x27;already_expired&#x27;</span>, _(<span class="string">&#x27;已到期&#x27;</span>)),</span><br><span class="line">                (<span class="string">&#x27;today_expired&#x27;</span>, _(<span class="string">&#x27;今天到期&#x27;</span>)),</span><br><span class="line">                (<span class="string">&#x27;m_expired&#x27;</span>, _(<span class="string">&#x27;本月到期&#x27;</span>)),</span><br><span class="line">                (<span class="string">&#x27;nm_expired&#x27;</span>, _(<span class="string">&#x27;下月到期&#x27;</span>)),</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">queryset</span>(<span class="params">self, request, queryset</span>):</span><br><span class="line">            <span class="keyword">if</span> self.value() == <span class="string">&#x27;already_expired&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> queryset.<span class="built_in">filter</span>(expire__lt=datetime.datetime.now(tz=datetime.timezone.utc))</span><br><span class="line">            <span class="keyword">if</span> self.value() == <span class="string">&#x27;today_expired&#x27;</span>:</span><br><span class="line">                today_date = datetime.date.today()</span><br><span class="line">                y, m, d = today_date.year, today_date.month, today_date.day</span><br><span class="line">                today_start = datetime.datetime(y, m, d, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">                today_end = datetime.datetime(y, m, d, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>)</span><br><span class="line">                <span class="keyword">return</span> queryset.<span class="built_in">filter</span>(expire__lt=today_end, expire__gt=today_start)</span><br><span class="line">            <span class="keyword">if</span> self.value() == <span class="string">&#x27;m_expired&#x27;</span>:</span><br><span class="line">                today_data = datetime.date.today()</span><br><span class="line">                y, m = today_data.year, today_data.month</span><br><span class="line">                last_day_this_month = calendar.monthrange(y, m)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                day_start = datetime.datetime(y, m, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">                day_end = datetime.datetime(y, m, last_day_this_month, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>)</span><br><span class="line">                <span class="keyword">return</span> queryset.<span class="built_in">filter</span>(expire__lt=day_end, expire__gt=day_start)</span><br><span class="line">            <span class="keyword">if</span> self.value() == <span class="string">&#x27;nm_expired&#x27;</span>:</span><br><span class="line">                today_data = datetime.date.today()</span><br><span class="line">                y, m = today_data.year, today_data.month</span><br><span class="line">                last_day_this_month = calendar.monthrange(y, m)[<span class="number">1</span>]</span><br><span class="line">                next_m_1d = datetime.date(y, m, <span class="number">1</span>) + datetime.timedelta(last_day_this_month)</span><br><span class="line">                y, m = next_m_1d.year, next_m_1d.month</span><br><span class="line">                last_day_next_month = calendar.monthrange(y, m)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                day_start = datetime.datetime(y, m, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">                day_end = datetime.datetime(y, m, last_day_next_month, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>)</span><br><span class="line">                <span class="keyword">return</span> queryset.<span class="built_in">filter</span>(expire__lt=day_end, expire__gt=day_start)</span><br><span class="line"></span><br><span class="line">    list_filter = (<span class="string">&#x27;status&#x27;</span>, DomainExpireTimeFilter)</span><br></pre></td></tr></table></figure>
<h3 id="自定义搜索功能"><a href="#自定义搜索功能" class="headerlink" title="自定义搜索功能"></a>自定义搜索功能</h3><p>Admin 后台默认只能搜索一个目标，本实例配置允许搜索 <strong>以空格分割的</strong> 多个目标内容。此功能主要是通过重写方法 <code>get_search_results</code> 实现。</p>
<figure class="highlight python"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="keyword">from</span> domains_collect <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RawDomainsAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    search_fields = (<span class="string">&#x27;domain&#x27;</span>,)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_search_results</span>(<span class="params">self, request, queryset, search_term</span>):</span><br><span class="line">        <span class="comment"># 如果没有查询字符串，则返回所有内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> search_term:</span><br><span class="line">            <span class="keyword">return</span> queryset, <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 获取搜索参数并分割为多个搜索项</span></span><br><span class="line">        search_terms = search_term.split()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构建查询表达式</span></span><br><span class="line">        q_objects = Q()</span><br><span class="line">        <span class="keyword">for</span> term <span class="keyword">in</span> search_terms:</span><br><span class="line">            q_objects |= Q(domain__icontains=term)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 执行搜索操作</span></span><br><span class="line">        queryset = queryset.<span class="built_in">filter</span>(q_objects)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> queryset, <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h3><p>管理界面可以在同一页面上与父模型编辑模型。这些被称为内联 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[InlineModelAdmin ](https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/#inlinemodeladmin-objects)">[4]</span></a></sup></p>
<p>以下示例中，<code>RawDomainsAdmin</code> 存放域名相关信息</p>
<figure class="highlight python"><figcaption><span>models.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RawDomains</span>(models.Model):</span><br><span class="line">    domain = models.CharField(max_length=<span class="number">64</span>, unique=<span class="literal">True</span>, blank=<span class="literal">False</span>, help_text=<span class="string">&quot;域名&quot;</span>, verbose_name=<span class="string">&#x27;域名&#x27;</span>)</span><br><span class="line">    expire = models.DateTimeField(help_text=<span class="string">&quot;域名过期时间&quot;</span>, verbose_name=<span class="string">&#x27;域名过期时间&#x27;</span>)</span><br><span class="line">    domain_created_time = models.DateTimeField(help_text=<span class="string">&quot;域名注册时间&quot;</span>, verbose_name=<span class="string">&#x27;域名注册时间&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><code>DomainProjectInfo</code> 存放项目和域名的关联信息，其中 <code>domain</code> 是和 <code>RawDomains</code> 的 <code>OneToOneField</code> 的关系。</p>
<figure class="highlight python"><figcaption><span>models.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DomainProjectInfo</span>(models.Model):</span><br><span class="line">    domain = models.OneToOneField(RawDomains, on_delete=models.CASCADE, help_text=<span class="string">&quot;域名&quot;</span>, verbose_name=<span class="string">&quot;域名&quot;</span>)</span><br><span class="line">    project = models.ForeignKey(<span class="string">&#x27;Project&#x27;</span>, on_delete=models.CASCADE, help_text=<span class="string">&quot;项目&quot;</span>, verbose_name=<span class="string">&quot;项目&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>在 admin 页面中配置项目信息内联到域名信息中</p>
<figure class="highlight python"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@admin.register(<span class="params">models.RawDomains</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RawDomainsAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (<span class="string">&#x27;domain&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;domain_created_time&#x27;</span>, <span class="string">&#x27;expire&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DomainProjectDetails</span>(admin.StackedInline):</span><br><span class="line">        model = models.DomainProjectInfo</span><br><span class="line"></span><br><span class="line">    inlines = [DomainProjectDetails]</span><br></pre></td></tr></table></figure>
<p>实现效果如下<br><img src="https://i.csms.tech/img_128.png"></p>
<p><a href="https://www.cnblogs.com/yoyoketang/p/10511220.html">其他示例参考</a></p>
<p>如果要在 <code>RawDomains</code> 列表中展示和筛选 <code>DomainProjectInfo</code> 中的信息，可以使用以下方法实现</p>
<figure class="highlight python"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@admin.register(<span class="params">models.RawDomains</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RawDomainsAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (<span class="string">&#x27;domain&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;domain_created_time&#x27;</span>, <span class="string">&#x27;expire&#x27;</span>, <span class="string">&#x27;use_status&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">use_status</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> obj.domainprojectinfo.status</span><br><span class="line">       </span><br><span class="line">    list_filter = (<span class="string">&#x27;domain&#x27;</span>, <span class="string">&#x27;status&#x27;</span>,  <span class="string">&#x27;domainprojectinfo__status&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><code>list_display</code> 中的 <code>use_status</code> 属于自定义字段，其值来自 <code>OneToOneField</code> 表的 <code>status</code> 字段。</p>
<p><code>list_filter</code> 中的值通过 <code>model__属性</code> 的方式引用 <code>OneToOneField</code> 中的字段。</p>
<p>要查看 <code>OneToOneField</code> 对应的表，可以查看 model 的属性值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>RawDomains.domainprojectinfo</span><br><span class="line">&lt;django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor <span class="built_in">object</span> at <span class="number">0x7f920ced2810</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="修改后台页面中显示的-APP-名称"><a href="#修改后台页面中显示的-APP-名称" class="headerlink" title="修改后台页面中显示的 APP 名称"></a>修改后台页面中显示的 APP 名称</h3><p>APP 是通过 <code>python manage.py startapp</code> 创建的，创建后 APP 项目所在目录下包含 <code>apps.py</code>，其中有 APP 相关的配置。默认 APP 在后台页面显示的名称为创建 APP 时指定的 APP 名称，要修改在 admin 页面上面显示的名称，可以在 <code>apps.py</code> 中添加 <code>verbose_name = &#39;Myname&#39;&#39;</code></p>
<figure class="highlight python"><figcaption><span>apps.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DomainsCollectConfig</span>(<span class="title class_ inherited__">AppConfig</span>):</span><br><span class="line">    default_auto_field = <span class="string">&#x27;django.db.models.BigAutoField&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;domains_collect&#x27;</span></span><br><span class="line">    verbose_name = <span class="string">&#x27;域名统计&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="admin-显示操作日志"><a href="#admin-显示操作日志" class="headerlink" title="admin 显示操作日志"></a>admin 显示操作日志</h3><p><code>ModelAdmin</code> 本身就有日志记录功能，<code>LogEntry</code> 类可以跟踪通过管理界面完成的对象的添加、更改和删除。 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[LogEntry 对象](https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/#logentry-objects)">[5]</span></a></sup></p>
<p>在项目 APP 的 <code>admin.py</code> 文件中增加以下内容，可以展示后台操作日志</p>
<figure class="highlight python"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.admin.models <span class="keyword">import</span> LogEntry</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">LogEntry</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogEntryAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">&#x27;action_time&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;object_repr&#x27;</span>, <span class="string">&#x27;object_id&#x27;</span>, <span class="string">&#x27;action_flag&#x27;</span>, <span class="string">&#x27;content_type&#x27;</span>,<span class="string">&#x27;change_message&#x27;</span>]</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li><code>object_id</code>, <code>object_repr</code> 分别指被操作对象的 ID 和字符串表示。</li>
<li><code>content_type</code> - 表示被操作对象的所属 model</li>
</ul>
<h3 id="根据不同的登陆用户显示不同的列"><a href="#根据不同的登陆用户显示不同的列" class="headerlink" title="根据不同的登陆用户显示不同的列"></a>根据不同的登陆用户显示不同的列</h3><p>在需要权限控制的场景中，不同用户拥有的权限或者安全级别可能不一样，被允许看到的信息也会不一样。以下示例可以实现超级管理员用户和其他用户登陆后展示不同的列</p>
<p>主要的实现思路是重写 <code>get_list_display</code> 方法，根据不同用户返回不同列 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[get_list_display](https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.get_list_display)">[6]</span></a></sup></p>
<figure class="highlight python"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@admin.register(<span class="params">models.Servers</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServersAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;inDeparMent&#x27;</span>,<span class="string">&#x27;inVender&#x27;</span>,<span class="string">&#x27;inOwner&#x27;</span>,<span class="string">&#x27;get_app&#x27;</span>,<span class="string">&#x27;usedFor&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;financeCode&#x27;</span>,<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;validDateTo&#x27;</span>,<span class="string">&#x27;status&#x27;</span>,<span class="string">&#x27;payStatus&#x27;</span>,<span class="string">&#x27;hwInfo&#x27;</span>,<span class="string">&#x27;comment&#x27;</span>,<span class="string">&#x27;createTime&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    date_hierarchy = <span class="string">&quot;createTime&quot;</span></span><br><span class="line">    list_per_page = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_list_display</span>(<span class="params">self,request</span>):</span><br><span class="line">        user = request.user</span><br><span class="line">        <span class="keyword">if</span> user.is_superuser:</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;inDeparMent&#x27;</span>, <span class="string">&#x27;inVender&#x27;</span>, <span class="string">&#x27;inOwner&#x27;</span>,<span class="string">&#x27;get_app&#x27;</span>, <span class="string">&#x27;usedFor&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;financeCode&#x27;</span>, <span class="string">&#x27;ip&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;validDateTo&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;payStatus&#x27;</span>, <span class="string">&#x27;hwInfo&#x27;</span>, <span class="string">&#x27;comment&#x27;</span>, <span class="string">&#x27;createTime&#x27;</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            group = Group.objects.get(user=user)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;group = %s&quot;</span> %(group))</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">dir</span>(group))</span><br><span class="line">            <span class="keyword">if</span> group.name == <span class="string">&quot;ops&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;group mached&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;inDeparMent&#x27;</span>, <span class="string">&#x27;inVender&#x27;</span>, <span class="string">&#x27;inOwner&#x27;</span>, <span class="string">&#x27;get_app&#x27;</span>, <span class="string">&#x27;usedFor&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;financeCode&#x27;</span>, <span class="string">&#x27;ip&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;validDateTo&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;payStatus&#x27;</span>, <span class="string">&#x27;hwInfo&#x27;</span>, <span class="string">&#x27;comment&#x27;</span>, <span class="string">&#x27;createTime&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> ObjectDoesNotExist:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;inDeparMent&#x27;</span>, <span class="string">&#x27;inVender&#x27;</span>, <span class="string">&#x27;inOwner&#x27;</span>,<span class="string">&#x27;get_app&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;ip&#x27;</span>,  <span class="string">&#x27;validDateTo&#x27;</span>, <span class="string">&#x27;status&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;hwInfo&#x27;</span>, <span class="string">&#x27;comment&#x27;</span>, <span class="string">&#x27;createTime&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="admin-后台实现批量修改带外键的字段"><a href="#admin-后台实现批量修改带外键的字段" class="headerlink" title="admin 后台实现批量修改带外键的字段"></a>admin 后台实现批量修改带外键的字段</h3><p>本示例演示实现在 admin 后台批量修改 model 状态（通过自定义 action 实现），其中 model 的状态是外键到了其他 model，示例 models 如下</p>
<figure class="highlight python"><figcaption><span>models.py</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Status</span>(models.Model):</span><br><span class="line">    status = models.CharField(max_length=<span class="number">32</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.status</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Project</span>(models.Model):</span><br><span class="line">    status = models.ForeignKey(<span class="string">&#x27;Status&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    project = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.project</span><br></pre></td></tr></table></figure>
<p>为了实现可以在后台批量修改 <code>status</code>，需要在 <code>Project</code> 的后台注册类中编写自定义的 <code>action</code>，用户选择多个对象, 点击执行后, 会跳转到中间页面, 在中间页面中下拉选择要更改的状态, 主要代码如下</p>
<figure class="highlight python"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@admin.register(<span class="params">models.Project</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProjectAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">update_status</span>(<span class="params">self, request, queryset</span>):</span><br><span class="line">            <span class="comment"># 用户可选择的状态</span></span><br><span class="line">            status_choices = [(status.<span class="built_in">id</span>, status.status) <span class="keyword">for</span> status <span class="keyword">in</span> Status.objects.<span class="built_in">all</span>()]</span><br><span class="line">            context = &#123;</span><br><span class="line">                <span class="string">&#x27;queryset&#x27;</span>: queryset,</span><br><span class="line">                <span class="string">&#x27;status_choices&#x27;</span>: status_choices,</span><br><span class="line">                <span class="string">&#x27;action_name&#x27;</span>: <span class="string">&#x27;update_status&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;admin/change_status.html&#x27;</span>, context)</span><br><span class="line"></span><br><span class="line">    update_domain_status.short_description = <span class="string">&#x27;批量修改状态&#x27;</span></span><br><span class="line"></span><br><span class="line">    actions = [<span class="string">&#x27;update_domain_status&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>以上代码中, 中间页面的 html 文件位于 <code>admin/change_status.html</code>，此文件主要实现用户选择状态，然后提交一个表单到指定的 url，进行实际状态的修改动作，文件内容如下</p>
<figure class="highlight html"><figcaption><span>admin/change_status.html</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;admin/base_site.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;my_app:update_status&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;target&quot;</span>&gt;</span>修改对象:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;results&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;result_list&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                &#123;% for query in queryset %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; query &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;status&quot;</span>&gt;</span>Status:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;status&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">            &#123;% for choice in status_choices %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; choice.0 &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; choice.1 &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;queryset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; queryset &#125;&#125;&quot;</span> <span class="attr">hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Change status&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<p><code>&lt;input name=&quot;queryset&quot; value=&quot;&#123;&#123; queryset &#125;&#125;&quot; hidden=&quot;true&quot;&gt;</code> 的主要作用是将用户选择的 QuerySet 提交到要处理状态变更的 url</p>
<p>用户选择状态并提交，数据会被提交给 <code>&#123;% url 'my_app:update_status' %&#125;</code>，因此需要实现此 url，以接收数据并执行实际的状态变更的动作</p>
<p>在 <code>urls.py</code> 中定义以下内容</p>
<figure class="highlight python"><figcaption><span>urls.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> update_status_view</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;my_app&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;update_status/&#x27;</span>, update_status_view, name=<span class="string">&#x27;update_status&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在 <code>views.py</code> 文件中定义视图函数 <code>update_status_view</code>，接收用户提交的数据，并更新状态，最后重定向到列表页面</p>
<figure class="highlight python"><figcaption><span>views.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> apps</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> messages</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_status_view</span>(<span class="params">request</span>):</span><br><span class="line">    </span><br><span class="line">    status = post_data[<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">    queryset_string = post_data[<span class="string">&#x27;queryset&#x27;</span>]</span><br><span class="line">    model_name = <span class="string">&quot;Project&quot;</span></span><br><span class="line">    model = apps.get_model(app_label=<span class="string">&quot;my_app&quot;</span>, model_name=model_name)</span><br><span class="line">    obj_str_list = queryset_string.replace(<span class="string">&#x27;&lt;QuerySet&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;&lt;DomainProjectInfo: &#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    queryset_list = []</span><br><span class="line">    <span class="keyword">for</span> obj_str <span class="keyword">in</span> obj_str_list:</span><br><span class="line">        obj = model.objects.get(project=obj_str)</span><br><span class="line">        queryset_list.append(obj)</span><br><span class="line"></span><br><span class="line">    queryset = model.objects.<span class="built_in">filter</span>(pk__in=[obj.pk <span class="keyword">for</span> obj <span class="keyword">in</span> queryset_list])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> queryset:</span><br><span class="line">        obj.status_id = <span class="built_in">int</span>(status)</span><br><span class="line">        obj.save()</span><br><span class="line"></span><br><span class="line">    messages.add_message(request, messages.SUCCESS, <span class="string">&#x27;Changes saved successfully.&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;admin:my_app_project_changelist&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="自定义页面或者视图中，向-admin-添加显示消息"><a href="#自定义页面或者视图中，向-admin-添加显示消息" class="headerlink" title="自定义页面或者视图中，向 admin 添加显示消息"></a>自定义页面或者视图中，向 admin 添加显示消息</h3><p>在 Django 中，可以使用 <code>messages</code> 框架在重定向后向用户显示消息。在视图函数中使用 <code>messages.add_message()</code> 函数将消息添加到消息框架中，并使用 <code>messages.SUCCESS</code>，<code>messages.ERROR</code> 或 <code>messages.WARNING</code> 等常量指定消息的级别。</p>
<p>下面是一个示例视图函数，演示如何重定向到 <code>myapp_model</code> 的更改列表并显示成功消息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> messages</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect, reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># Do some processing here</span></span><br><span class="line">    messages.add_message(request, messages.SUCCESS, <span class="string">&#x27;Changes saved successfully.&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;admin:myapp_model_changelist&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>这将 <code>Changes saved successfully.</code> 消息添加到消息框架中，并重定向到 <code>myapp_model</code> 的更改列表视图。当用户从消息框架中看到消息时，它将以绿色背景突出显示，因为我们在这里使用了 <code>messages.SUCCESS</code> 常量。</p>
<h3 id="自定义的视图中向-Admin-写入操作日志"><a href="#自定义的视图中向-Admin-写入操作日志" class="headerlink" title="自定义的视图中向 Admin 写入操作日志"></a>自定义的视图中向 Admin 写入操作日志</h3><p>如果要在 Django 项目中的自定义视图中将操作记录写入 Django Admin 的操作记录日志中，可以参考以下配置实现。<a href="#admin-%E6%98%BE%E7%A4%BA%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97">在 Django Admin 中显示操作日志</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.admin.models <span class="keyword">import</span> LogEntry, ADDITION, CHANGE, DELETION</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.utils.encoding <span class="keyword">import</span> force_str</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin_log_action</span>(<span class="params">request, obj, action_flag, message</span>):</span><br><span class="line">    user = request.user</span><br><span class="line">    content_type = ContentType.objects.get_for_model(obj)</span><br><span class="line">    LogEntry.objects.log_action(</span><br><span class="line">        user_id=user.pk,</span><br><span class="line">        content_type_id=content_type.pk,</span><br><span class="line">        object_id=obj.pk,</span><br><span class="line">        object_repr=force_str(obj),</span><br><span class="line">        action_flag=action_flag,</span><br><span class="line">        change_message=<span class="built_in">str</span>(message),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_object</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># ... 处理创建对象的逻辑 ...</span></span><br><span class="line">        created_object = YourModel.objects.create(...)  <span class="comment"># 举例</span></span><br><span class="line"></span><br><span class="line">        admin_log_action(request, created_object, ADDITION, <span class="string">&quot;Object created.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;success_template.html&#x27;</span>, &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Object created successfully&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;create_object.html&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>如果要在自定义页面中展示操作日志，参考以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    log_entries = LogEntry.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;-action_time&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;logs&#x27;</span>: log_entries&#125;)</span><br></pre></td></tr></table></figure>
<p>HTML 模板文件如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% for log in logs %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-col fixed item-col-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-heading&quot;</span>&gt;</span>Time<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;item-title&quot;</span>&gt;</span> &#123;&#123; log.action_time &#125;&#125; <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-col fixed item-col-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-heading&quot;</span>&gt;</span> User <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123; log.user &#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-col fixed pull-left item-col-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-heading&quot;</span>&gt;</span>Object<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123; log.object_repr &#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-col fixed pull-left item-col-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-heading&quot;</span>&gt;</span>Object ID<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123; log.object_id &#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-col fixed pull-left item-col-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-heading&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123; log.get_action_flag_display &#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-col fixed pull-left item-col-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-heading&quot;</span>&gt;</span>Content Type<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123; log.content_type &#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-col fixed pull-left item-col-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-heading&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123; log.change_message &#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>注意其中的 <code>&#123;&#123; log.get_action_flag_display &#125;&#125;</code>，如果直接使用 <code>LogEntry</code> 的 <code>action_flag</code> 属性，显示的是 <code>action_flag</code> 的值，主要为<ul>
<li><code>1</code>：表示添加记录（ADDITION）</li>
<li><code>2</code>：表示更改记录（CHANGE）</li>
<li><code>3</code>：表示删除记录（DELETION）<br>如果要使用更友好的字符串展示，需要使用 <code>get_action_flag_display</code> 方法。这个方法会根据 <code>action_flag</code> 的值返回对应的友好名称</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="Related-Field-got-invalid-lookup-icontains"><a href="#Related-Field-got-invalid-lookup-icontains" class="headerlink" title="Related Field got invalid lookup: icontains"></a>Related Field got invalid lookup: icontains</h2><p><a href="https://stackoverflow.com/questions/24569687/searching-by-related-fields-in-django-admin">此问题说明示例</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/actions/#admin-actions">管理 actions</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/#modeladmin-options">ModelAdmin 对象</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/filters/#using-a-simplelistfilter">Using a SimpleListFilter</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/#inlinemodeladmin-objects">InlineModelAdmin </a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/#logentry-objects">LogEntry 对象</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.get_list_display">get_list_display</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django admin 模板分析及使用</title>
    <url>/202303241020/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3.11</li>
<li>Django 4.1</li>
</ul>
<h1 id="admin-模板解析"><a href="#admin-模板解析" class="headerlink" title="admin 模板解析"></a>admin 模板解析</h1><p>Django 模板之间存在各种复杂的继承关系，最基础的模板为 <code>base.html</code>，文件位于 <code>python3.11/site-packages/django/contrib/admin/templates/admin/base.html</code>。下面以 Admin 页面中的各个模块来解析实现对应模块的模板及代码。</p>
<h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><p><code>title</code> 指网页标题，以 Admin 站点的首页为例，首页的模板文件 <code>index.html</code> 中未定义 <code>title</code> 信息，而是继承自 <code>base_site.html</code></p>
<figure class="highlight python"><figcaption><span>base_site.html</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% extends <span class="string">&quot;admin/base.html&quot;</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;% <span class="keyword">if</span> subtitle %&#125;&#123;&#123; subtitle &#125;&#125; | &#123;% endif %&#125;&#123;&#123; title &#125;&#125; | &#123;&#123; site_title|default:_(<span class="string">&#x27;Django site admin&#x27;</span>) &#125;&#125;&#123;% endblock </span><br><span class="line">%&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>base_site.html</code> 模板继承了模板 <code>base.html</code>，并使用 <code>&#123;% block title %&#125;</code> 标签复写了继承自 <code>base.html</code> 模板的 <code>title</code> 信息。默认显示 <code>Django site admin</code>，如果应用的 <code>admin.py</code> 中定义了 <code>admin.site.site_title</code>，则显示其内容</p>
<figure class="highlight python"><figcaption><span>base.html</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% load i18n static %&#125;&lt;!DOCTYPE html&gt;</span><br><span class="line">&#123;% get_current_language <span class="keyword">as</span> LANGUAGE_CODE %&#125;&#123;% get_current_language_bidi <span class="keyword">as</span> LANGUAGE_BIDI %&#125;</span><br><span class="line">&lt;html lang=<span class="string">&quot;&#123;&#123; LANGUAGE_CODE|default:&quot;</span>en-us<span class="string">&quot; &#125;&#125;&quot;</span> <span class="built_in">dir</span>=<span class="string">&quot;&#123;&#123; LANGUAGE_BIDI|yesno:&#x27;rtl,ltr,auto&#x27; &#125;&#125;&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>基础模板 <code>base.html</code> 中 <code>title</code> 信息默认为空。</p>
<h2 id="Django-管理或站点标题"><a href="#Django-管理或站点标题" class="headerlink" title="Django 管理或站点标题"></a>Django 管理或站点标题</h2><p>Admin 管理页面最顶部左上角会展示默认的 <code>Django 管理</code> 或者站点标题，如果应用的 <code>admin.py</code> 中配置了 <code>admin.site.site_header</code>，则显示站点标题，这是一个链接，点击后会跳转首页。<br><img src="https://i.csms.tech/img_130.png"></p>
<p>这部分的实现是通过继承 <code>base_site.html</code> 实现，其中的 <code>&#123;% block branding %&#125;</code> 定义了这部分内容。</p>
<figure class="highlight python"><figcaption><span>base_site.html</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% extends <span class="string">&quot;admin/base.html&quot;</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;% <span class="keyword">if</span> subtitle %&#125;&#123;&#123; subtitle &#125;&#125; | &#123;% endif %&#125;&#123;&#123; title &#125;&#125; | &#123;&#123; site_title|default:_(<span class="string">&#x27;Django site admin&#x27;</span>) &#125;&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block branding %&#125;</span><br><span class="line">&lt;h1 <span class="built_in">id</span>=<span class="string">&quot;site-name&quot;</span>&gt;&lt;a href=<span class="string">&quot;&#123;% url &#x27;admin:index&#x27; %&#125;&quot;</span>&gt;&#123;&#123; site_header|default:_(<span class="string">&#x27;Django administration&#x27;</span>) &#125;&#125;&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block nav-<span class="keyword">global</span> %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="用户欢迎信息"><a href="#用户欢迎信息" class="headerlink" title="用户欢迎信息"></a>用户欢迎信息</h2><p>Django admin 站点默认会显示如下的欢饮信息及修改密码、注销等链接<br><img src="https://i.csms.tech/img_131.png"><br>此处的配置位于 <code>base.html</code> 中的 <code>&#123;% block usertools %&#125;</code> 块内，<code>&#123;% block usertools %&#125;</code> 块位于 <code> &#123;% block header %&#125;</code> 块内。</p>
<figure class="highlight python"><figcaption><span>base.html</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% block header %&#125;</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;branding&quot;</span>&gt;</span><br><span class="line">    &#123;% block branding %&#125;&#123;% endblock %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &#123;% block usertools %&#125;</span><br><span class="line"> &#123;% <span class="keyword">if</span> has_permission %&#125;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;user-tools&quot;</span>&gt;</span><br><span class="line">        &#123;% block welcome-msg %&#125;</span><br><span class="line">            &#123;% translate <span class="string">&#x27;Welcome,&#x27;</span> %&#125;</span><br><span class="line">            &lt;strong&gt;&#123;% firstof user.get_short_name user.get_username %&#125;&lt;/strong&gt;.</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">        &#123;% block userlinks %&#125;</span><br><span class="line">            &#123;% <span class="keyword">if</span> site_url %&#125;</span><br><span class="line">                &lt;a href=<span class="string">&quot;&#123;&#123; site_url &#125;&#125;&quot;</span>&gt;&#123;% translate <span class="string">&#x27;View site&#x27;</span> %&#125;&lt;/a&gt; /</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">            &#123;% <span class="keyword">if</span> user.is_active <span class="keyword">and</span> user.is_staff %&#125;</span><br><span class="line">                &#123;% url <span class="string">&#x27;django-admindocs-docroot&#x27;</span> <span class="keyword">as</span> docsroot %&#125;</span><br><span class="line">                &#123;% <span class="keyword">if</span> docsroot %&#125;</span><br><span class="line">                    &lt;a href=<span class="string">&quot;&#123;&#123; docsroot &#125;&#125;&quot;</span>&gt;&#123;% translate <span class="string">&#x27;Documentation&#x27;</span> %&#125;&lt;/a&gt; /</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">            &#123;% <span class="keyword">if</span> user.has_usable_password %&#125;</span><br><span class="line">            &lt;a href=<span class="string">&quot;&#123;% url &#x27;admin:password_change&#x27; %&#125;&quot;</span>&gt;&#123;% translate <span class="string">&#x27;Change password&#x27;</span> %&#125;&lt;/a&gt; /</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">            &lt;a href=<span class="string">&quot;&#123;% url &#x27;admin:logout&#x27; %&#125;&quot;</span>&gt;&#123;% translate <span class="string">&#x27;Log out&#x27;</span> %&#125;&lt;/a&gt;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> &#123;% endif %&#125; </span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    &#123;% block nav-<span class="keyword">global</span> %&#125;&#123;% endblock %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h1><h2 id="自定义和-Django-admin-风格一样的页面"><a href="#自定义和-Django-admin-风格一样的页面" class="headerlink" title="自定义和 Django admin 风格一样的页面"></a>自定义和 Django admin 风格一样的页面</h2><p>如果要自定义自己的页面，并实现和 Django admin 一致的风格，比如一样的 branding 和用户欢迎信息，可以使用如下代码实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;admin/base_site.html&quot; %&#125;</span><br><span class="line">&#123;% load i18n static %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">My Customize Site</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block extrastyle %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block branding %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;site-name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;admin:index&#x27; %&#125;&quot;</span>&gt;</span>My Customize Site<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block usertools %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;user-tools&quot;</span>&gt;</span></span><br><span class="line">            &#123;% block welcome-msg %&#125;</span><br><span class="line">                &#123;% translate &#x27;Welcome,&#x27; %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;% firstof user.get_short_name user.get_username %&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>.</span><br><span class="line">            &#123;% endblock %&#125;</span><br><span class="line">            &#123;% block userlinks %&#125;</span><br><span class="line">                &#123;% if site_url %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; site_url &#125;&#125;&quot;</span>&gt;</span>&#123;% translate &#x27;View site&#x27; %&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> /</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                &#123;% if user.is_active and user.is_staff %&#125;</span><br><span class="line">                    &#123;% url &#x27;django-admindocs-docroot&#x27; as docsroot %&#125;</span><br><span class="line">                    &#123;% if docsroot %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; docsroot &#125;&#125;&quot;</span>&gt;</span>&#123;% translate &#x27;Documentation&#x27; %&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> /</span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                &#123;% if user.has_usable_password %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;admin:password_change&#x27; %&#125;&quot;</span>&gt;</span>&#123;% translate &#x27;Change password&#x27; %&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> /</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;admin:logout&#x27; %&#125;&quot;</span>&gt;</span>&#123;% translate &#x27;Log out&#x27; %&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &#123;% endblock %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block breadcrumbs %&#125;&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">hello world</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>django-bootstrap5 使用</title>
    <url>/202303221624/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python3.11</li>
<li>Django4</li>
</ul>
<h1 id="django-bootstrap5-安装配置"><a href="#django-bootstrap5-安装配置" class="headerlink" title="django-bootstrap5 安装配置"></a>django-bootstrap5 安装配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install django-bootstrap5</span><br></pre></td></tr></table></figure>

<p>在项目配置文件 <code>settings.py</code> 中添加应用名</p>
<figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    &#x27;django_bootstrap5&#x27;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h1 id="bootstrap5-使用"><a href="#bootstrap5-使用" class="headerlink" title="bootstrap5 使用"></a>bootstrap5 使用</h1>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>django 定时任务</title>
    <url>/202208170917/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>centos 7</li>
<li>python 3.10</li>
<li>django 4.0</li>
<li>django-crontab</li>
</ul>
<p><code>django-crontab</code> 依赖 <code>Linux</code> 系统中的 <code>crontab</code>，因此只能在 <code>Linux</code> 系统中使用</p>
<span id="more"></span>

<h3 id="安装-django-crontab"><a href="#安装-django-crontab" class="headerlink" title="安装 django-crontab"></a>安装 django-crontab</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install django-crontab</span><br></pre></td></tr></table></figure>

<p><code>django-crontab</code> 插件是以 <code>app</code> 的方式存在， 将 <code>django-crontab</code> 添加到 <code>django</code> 工程配置文件 <code>settings.py</code> 中的 <code>INSTALLED_APPS</code></p>
<figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &#x27;django.contrib.admin&#x27;,</span><br><span class="line">    &#x27;django.contrib.auth&#x27;,</span><br><span class="line">    &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="line">    &#x27;django.contrib.sessions&#x27;,</span><br><span class="line">    &#x27;django.contrib.messages&#x27;,</span><br><span class="line">    &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="line">    ...</span><br><span class="line">    &#x27;django_crontab&#x27;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务"></a>配置定时任务</h3><p>假设定时任务路径为 <code>myapp.cron.scheduled_job</code><br>编写好定时任务后，要启用定时任务，需要在 <code>django</code> 工程配置文件 <code>settings.py</code> 中配置以下内容</p>
<figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">CRONJOBS = [</span><br><span class="line">    (&#x27;* * * * *&#x27;, &#x27;myapp.cron.scheduled_job&#x27;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>如果定时任务需要参数，可以使用如下格式</p>
<figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">CRONJOBS = [</span><br><span class="line">    (&#x27;* * * * *&#x27;, &#x27;myapp.cron.scheduled_job&#x27;, &#x27;&gt;&gt; run.log 2&gt;&amp;1&#x27;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>以上定时任务，会将任务执行过程中的标准输出和标准错误输出写入到文件 <code>run.log</code></p>
<p>也可以使用列表参数</p>
<figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">CRONJOBS = [</span><br><span class="line">    (&#x27;* * * * *&#x27;, &#x27;myapp.cron.scheduled_job&#x27;, [&#x27;list_args1&#x27;, &#x27;list_args2&#x27;], &#123;&#x27;dict_args1&#x27;: v1, &#x27;dict_args2&#x27;: v2&#125;),</span><br><span class="line">    (&#x27;* * * * *&#x27;, &#x27;myapp.cron.scheduled_job&#x27;, [&#x27;list_args1&#x27;])</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>其中，定时任务的第一部分（<code>* * * * *</code>），语法和 <code>Linux</code> 系统 <code>crontab</code> 一致，具体语法可参考： <a href="https://www.runoob.com/linux/linux-comm-crontab.html">linux crontab 语法</a></p>
<p>配置好定时任务之后，执行以下命令添加定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 manage.py crontab add</span><br></pre></td></tr></table></figure>


<p>运行定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 manage.py crontab run </span><br></pre></td></tr></table></figure>
<p>运行定时任务后，会在系统 <code>crontab</code> 中追加一个定时任务，可使用 <code>crontab -l</code> 命令查看定时任务  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">crontab -l</span></span><br><span class="line">* * * * * python3 /django/project/manage.py crontab run b4564bdabd9dcb16a9b69d79a612430f &gt;&gt; run.log 2&gt;&amp;1   # django-cronjobs for project</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>显示定时任务列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 manage.py crontab show</span><br></pre></td></tr></table></figure>
<p>删除定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 manage.py crontab remove b4564bdabd9dc</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意事项</strong>： <code>CRONJOBS</code> 中配置的定时任务及所有参数不能有变量值，比如以下配置，在第二天时，不会再执行。</p>
<figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">CRONJOBS = [</span><br><span class="line">(&#x27;0 7 * * *&#x27;, &#x27;myapp.cron.scheduled_job&#x27;, &#x27;&gt;&gt; %s&#x27; time.time())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>因为，<code>CRONJOBS</code> 生成任务时，会生成对应的哈希值（hashes），标识每个任务。所以，当文件名变更时，<code>CRONJOBS</code> 中的值每天都在变化，导致不同的定时任务哈希值（hashes）。而系统 <code>crontab</code> 定时任务中的任务哈希值还是第一次执行 <code>python3 manage.py crontab add</code> 时的值</p>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://cloud.tencent.com/developer/article/1599968">django 定时任务 django-crontab 的使用</a><br><a href="https://www.runoob.com/linux/linux-comm-crontab.html">Linux crontab 命令</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django HTTP 请求及响应常见用法总结</title>
    <url>/202308081340/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3</li>
<li>Django 4</li>
</ul>
<h1 id="request-常用参数及方法"><a href="#request-常用参数及方法" class="headerlink" title="request 常用参数及方法"></a>request 常用参数及方法</h1><ul>
<li><p><code>request.method</code> : 返回当前请求的 HTTP 方法（GET、POST、PUT、DELETE 等）。</p>
</li>
<li><p><code>request.path</code> : 返回请求的路径部分（不包括域名和查询参数）。</p>
</li>
<li><p><code>request.GET</code> : 包含所有 GET 请求参数的字典。</p>
</li>
<li><p><code>request.GET.get(&#39;param_name&#39;)</code> : 用于从 GET 请求中获取指定参数的值。</p>
</li>
<li><p><code>request.POST</code> : 包含所有 POST 请求参数的字典。</p>
</li>
<li><p><code>request.POST.get(&#39;param_name&#39;)</code> : 用于从 POST 请求中获取指定参数的值。</p>
</li>
<li><p><code>request.FILES</code> : 包含所有上传文件的字典。</p>
</li>
<li><p><code>request.COOKIES</code> : 包含所有请求的 Cookie 的字典。</p>
</li>
<li><p><code>request.session</code> : 一个表示当前会话的对象，可以用于访问和存储会话数据。</p>
</li>
<li><p><code>request.user</code> : 表示当前登录用户的对象。</p>
</li>
<li><p><code>request.body</code> : 访问请求的主体内容（即请求的正文部分）。主体内容通常用于传输 POST 或 PUT 请求中的数据，如表单数据、JSON 数据等。</p>
</li>
<li><p><code>request.META</code> : 包含有关请求的所有元数据的字典，如请求的 IP 地址、浏览器信息等。</p>
</li>
<li><p><code>request.is_secure()</code> : 返回一个布尔值，表示请求是否通过 HTTPS。</p>
</li>
<li><p><code>request.is_ajax()</code> : 返回一个布尔值，表示请求是否为 AJAX 请求。</p>
</li>
<li><p><code>request.get_full_path()</code> : 返回包含完整路径和查询参数的字符串。</p>
</li>
<li><p><code>request.build_absolute_uri()</code> : 根据当前请求构建完整的绝对 URL。</p>
</li>
<li><p><code>request.get_host()</code> : 返回请求的主机部分。</p>
</li>
<li><p><code>request.get_port()</code> : 返回请求的端口号。</p>
</li>
<li><p><code>request.get_raw_uri()</code> : 返回原始的请求 URI。</p>
</li>
<li><p><code>request.get_signed_cookie()</code> : 用于获取已签名的 Cookie 值。</p>
</li>
<li><p><code>request.get_host()</code> : 返回请求的主机部分。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>django logging 模块</title>
    <url>/202208151622/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>python 3.10</li>
<li>django 4.0</li>
</ul>
<h1 id="Python-logging-模块说明"><a href="#Python-logging-模块说明" class="headerlink" title="Python logging 模块说明"></a>Python logging 模块说明</h1><p><code>Django</code> 使用 <code>Python</code> 内置的 <code>logging</code> 模块处理系统日志，一份 <code>Python logging</code> 配置由下面四个部分组成：</p>
<ul>
<li>Loggers</li>
<li>Handlers</li>
<li>Filters</li>
<li>Formatters</li>
</ul>
<h2 id="Loggers"><a href="#Loggers" class="headerlink" title="Loggers"></a>Loggers</h2><p><code>logger</code> 是日志系统的入口。每个 <code>logger</code> 都是命名了的 <code>bucket</code>， 消息写入 <code>bucket</code> 以便进一步处理<br><code>logger</code> 可以配置 <code>日志级别</code>。日志级别描述了由该 <code>logger</code> 处理的消息的严重性。<code>Python</code> 定义了下面几种日志级别：</p>
<ul>
<li><code>DEBUG</code>：排查故障时使用的低级别系统信息</li>
<li><code>INFO</code>：一般的系统信息</li>
<li><code>WARNING</code>：描述系统发生了一些小问题的信息</li>
<li><code>ERROR</code>：描述系统发生了大问题的信息</li>
<li><code>CRITICAL</code>：描述系统发生严重问题的信息</li>
</ul>
<p>每一条写入 <code>logger</code> 的消息都是一条 <code>日志记录</code>。每一条日志记录也包含 <code>日志级别</code>，代表对应消息的严重程度。日志记录还包含有用的元数据，来描述被记录了日志的事件细节，例如堆栈跟踪或者错误码。  </p>
<p>当 <code>logger</code> 处理一条消息时，会将自己的 <code>日志级别</code> 和这条消息的 <code>日志级别</code> 做对比。如果消息的日志级别匹配或者高于 <code>logger</code> 的日志级别，它就会被进一步处理。否则这条消息就会被忽略掉。  </p>
<p>当 <code>logger</code> 确定了一条消息需要处理之后，会把它传给 <code>Handler</code>。</p>
<span id="more"></span>

<h2 id="Handlers"><a href="#Handlers" class="headerlink" title="Handlers"></a>Handlers</h2><p><code>Handler</code> 是决定如何处理 <code>logger</code> 中每一条消息的引擎。它描述特定的日志行为，比如把消息输出到<code>屏幕(stdout)</code>、<code>文件</code>或<code>网络 socket</code>。<br>和 <code>logger</code> 一样，<code>handler</code> 也有 <code>日志级别</code> 的概念。如果一条日志记录的级别不匹配或者低于 <code>handler</code> 的日志级别，对应的消息会被 <code>handler</code> 忽略。</p>
<p>一个 <code>logger</code> 可以有多个 <code>handler</code>，每一个 <code>handler</code> 可以有不同的日志级别。这样就可以根据消息的重要性不同，来提供不同格式的输出。例如，你可以添加一个 <code>handler</code> 把 <code>ERROR</code> 和 <code>CRITICAL</code> 消息发送短消息，再添加另一个 <code>handler</code> 把所有的消息（包括 <code>ERROR</code> 和 <code>CRITICAL</code> 消息）保存到文件里以便日后分析。</p>
<h2 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h2><p>在日志记录从 <code>logger</code> 传到 <code>handler</code> 的过程中，使用 <code>Filter</code> 来做额外的控制。<br>默认情况下，只要级别匹配，任何日志消息都会被处理。不过，也可以通过添加 <code>filter</code> 来给日志处理的过程增加额外条件。例如，可以添加一个 <code>filter</code> 只允许某个特定来源的 <code>ERROR</code> 消息输出。  </p>
<p><code>Filter</code> 还被用来在日志输出之前对日志记录做修改。例如，可以写一个 <code>filter</code>，当满足一定条件时，把日志记录从 <code>ERROR</code> 降到 <code>WARNING</code> 级别。  </p>
<p><code>Filter</code> 在 <code>logger</code> 和 <code>handler</code> 中都可以添加；多个 <code>filter</code> 可以链接起来使用，来做多重过滤操作。</p>
<h2 id="Formatters"><a href="#Formatters" class="headerlink" title="Formatters"></a>Formatters</h2><p>日志记录最终是需要以文本来呈现的。<code>Formatter</code> 描述了文本的格式。一个 <code>formatter</code> 通常由包含 <a href="https://docs.python.org/3/library/logging.html#logrecord-attributes"><code>LogRecord attributes</code></a> 的 <code>Python 格式化字符串</code> 组成，不过你也可以为特定的格式来配置自定义的 formatter。</p>
<h1 id="Python-logging-模块使用方式介绍"><a href="#Python-logging-模块使用方式介绍" class="headerlink" title="Python logging 模块使用方式介绍"></a>Python logging 模块使用方式介绍</h1><p><code>logging</code> 模块提供了两种记录日志的方式：</p>
<ul>
<li>第一种方式是使用 <code>logging</code> 提供的模块级别的方法</li>
<li>第二种方式是使用 <code>Logging</code> 日志系统的四大组件</li>
</ul>
<h2 id="logging-模块级别方法使用说明"><a href="#logging-模块级别方法使用说明" class="headerlink" title="logging 模块级别方法使用说明"></a>logging 模块级别方法使用说明</h2><p><code>logging</code> 提供的模块级别常用方法有：  </p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>logging.basicConfig(**kwargs)</code></td>
<td>对 <code>root logger</code> 进行一次性配置</td>
<td></td>
</tr>
<tr>
<td><code>logging.debug(msg, args, *kwargs)</code></td>
<td>记录级别为 <code>DEBUG</code> 的日志</td>
<td><code>logging.debug(&#39;debug msg&#39;)</code></td>
</tr>
<tr>
<td><code>logging.info(msg, args, *kwargs)</code></td>
<td>记录级别为 <code>INFO</code> 的日志</td>
<td></td>
</tr>
<tr>
<td><code>logging.warning(msg, args, *kwargs)	</code></td>
<td>记录级别为 <code>WARNING</code> 的日志</td>
<td></td>
</tr>
<tr>
<td><code>logging.error(msg, args, *kwargs)	</code></td>
<td>记录级别为 <code>ERROR</code> 的日志</td>
<td></td>
</tr>
<tr>
<td><code>logging.critical(msg, args, *kwargs)	</code></td>
<td>记录级别为 <code>CRITICAL</code> 的日志</td>
<td></td>
</tr>
<tr>
<td><code>logging.log(level, args, *kwargs)	</code></td>
<td>记录级别为 <code>level</code> 的日志</td>
<td><code>logging.log(logging.DEBUG, &#39;debug msg&#39;)</code></td>
</tr>
</tbody></table>
<h3 id="logging-basicConfig-方法说明"><a href="#logging-basicConfig-方法说明" class="headerlink" title="logging.basicConfig() 方法说明"></a>logging.basicConfig() 方法说明</h3><p>该方法用于为 <code>logging</code> 日志系统做一些基本配置，<code>logging.basicConfig()</code> 函数是一个一次性的简单配置工具使，也就是说只有在第一次调用该函数时会起作用，后续再次调用该函数时完全不会产生任何操作的，多次调用的设置并不是累加操作。方法定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(**kwargs)</span><br></pre></td></tr></table></figure>

<p>该方法可接收的关键字参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>filename</code></td>
<td>写入日志的文件名</td>
</tr>
<tr>
<td><code>filemode</code></td>
<td>打开日志文件的模式，默认为 <code>a</code>，该选项在 <code>filename</code> 指定时才生效</td>
</tr>
<tr>
<td><code>format</code></td>
<td>日志格式字符串, 指定日志输出时所包含的字段信息以及它们的顺序</td>
</tr>
<tr>
<td><code>datefmt</code></td>
<td>指定日期&#x2F;时间格式。该选项要在 <code>format</code> 中包含时间字段 <code>%(asctime)s</code> 时才有效</td>
</tr>
<tr>
<td><code>level</code></td>
<td>指定日志级别</td>
</tr>
<tr>
<td><code>stream</code></td>
<td>指定日志输出目标 stream，如 <code>sys.stdout</code>、<code>sys.stderr</code>以及 <code>网络stream</code>。需要说明的是，<code>stream</code> 和 <code>filename </code>不能同时提供，否则会引发 <code>ValueError</code> 异常</td>
</tr>
<tr>
<td><code>style</code></td>
<td><code>Python 3.2</code> 中新添加的配置项。指定 <code>format</code> 格式字符串的风格，可取值为 <code>%</code>、<code>&#123;</code> 和 <code>$</code>，默认为 <code>%</code></td>
</tr>
<tr>
<td><code>handlers</code></td>
<td><code>Python 3.3</code> 中新添加的配置项。该选项如果被指定，它应该是一个创建了多个 <code>Handler</code> 的可迭代对象，这些 <code>handler</code> 将会被添加到 <code>root logger</code> 。需要说明的是：<code>filename</code>、s<code>tream</code> 和 <code>handlers</code> 这三个配置项只能有一个存在，不能同时出现2个或3个，否则会引发 <code>ValueError</code> 异常。</td>
</tr>
</tbody></table>
<p><code>logging</code> 模块中定义好的可以用于 <code>format</code> 日志格式字符串的字段主要有  </p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>使用格式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>asctime</code></td>
<td><code>%(asctime)s</code></td>
<td>日志事件发生的时间(可读时间)，如：2003-07-08 16:49:45,896</td>
</tr>
<tr>
<td><code>created</code></td>
<td><code>%(created)f	</code></td>
<td>日志事件发生的时间(时间戳)</td>
</tr>
<tr>
<td><code>levelname</code></td>
<td><code>%(levelname)s</code></td>
<td>日志级别</td>
</tr>
<tr>
<td><code>levelno</code></td>
<td><code>%(levelno)s	</code></td>
<td>日志记录的数字形式的日志级别（10, 20, 30, 40, 50）</td>
</tr>
<tr>
<td><code>name</code></td>
<td><code>%(name)s	</code></td>
<td>所使用的日志器名称，默认是 <code>root</code>，因为默认使用的是 <code>rootLogger</code></td>
</tr>
<tr>
<td><code>message</code></td>
<td><code>%(message)s	</code></td>
<td>日志记录的文本内容</td>
</tr>
<tr>
<td><code>pathname</code></td>
<td><code>%(pathname)s	</code></td>
<td>调用日志记录方法的源码文件的全路径</td>
</tr>
<tr>
<td><code>filename</code></td>
<td><code>%(filename)s	</code></td>
<td><code>pathname</code> 的文件名部分，包含文件后缀</td>
</tr>
<tr>
<td><code>module</code></td>
<td><code>%(module)s	</code></td>
<td>filename的名称部分，不包含后缀</td>
</tr>
<tr>
<td><code>lineno</code></td>
<td><code>%(lineno)d	</code></td>
<td>调用日志记录方法的源代码所在的行号</td>
</tr>
<tr>
<td><code>funcName</code></td>
<td><code>%(funcName)s	</code></td>
<td>调用日志记录方法的函数名</td>
</tr>
<tr>
<td><code>process</code></td>
<td><code>%(process)d	</code></td>
<td>进程ID</td>
</tr>
<tr>
<td><code>processName</code></td>
<td><code>%(processName)s	</code></td>
<td>进程名称，Python 3.1新增</td>
</tr>
<tr>
<td><code>thread</code></td>
<td><code>%(thread)d	</code></td>
<td>线程ID</td>
</tr>
<tr>
<td><code>threadName</code></td>
<td><code>%(thread)s	</code></td>
<td>线程名称</td>
</tr>
</tbody></table>
<h3 id="logging-模块级别方法中的-kwargs-参数说明"><a href="#logging-模块级别方法中的-kwargs-参数说明" class="headerlink" title="logging 模块级别方法中的 kwargs 参数说明"></a>logging 模块级别方法中的 kwargs 参数说明</h3><p><code>logging.debug()</code>, <code>logging.info()</code> 等方法的定义中，除了 <code>msg</code> 和 <code>args</code> 参数外，还有一个 <code>**kwargs</code> 参数。它们支持3个关键字参数: <code>exc_info</code>, <code>stack_info</code>, <code>extra</code></p>
<ul>
<li><code>exc_info</code> : 布尔值，如果该参数的值设置为 <code>True</code>，则会将异常异常信息添加到日志消息中。如果没有异常信息则添加 <code>None</code> 到日志信息中。</li>
<li><code>stack_info</code> : 布尔值，默认值为 <code>False</code>。如果该参数的值设置为 <code>True</code>，栈信息将会被添加到日志信息中。</li>
<li><code>extra</code> : 这是一个字典（<code>dict</code>）参数，它可以用来自定义消息格式中所包含的字段，但是它的 <code>key</code> 不能与 <code>logging</code> 模块定义的字段冲突</li>
</ul>
<p><code>exc_info</code> 使用示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span>:</span><br><span class="line"><span class="meta">... </span>    logging.error(<span class="string">&#x27;except occor&#x27;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">ERROR:root:<span class="keyword">except</span> occor</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>stack_info</code> 使用示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span>:</span><br><span class="line"><span class="meta">... </span>    logging.error(<span class="string">&#x27;except&#x27;</span>, stack_info=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">ERROR:root:<span class="keyword">except</span></span><br><span class="line">Stack (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Django-配置-logging"><a href="#Django-配置-logging" class="headerlink" title="Django 配置 logging"></a>Django 配置 logging</h1><p>在 <code>Django</code> 配置文件( <code>settings.py</code> ) 中添加以下配置  </p>
<figure class="highlight django"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="language-xml">LOGGING = &#123;</span></span><br><span class="line"><span class="language-xml">    &#x27;version&#x27;: 1,</span></span><br><span class="line"><span class="language-xml">    &#x27;disable_existing_loggers&#x27;: False,</span></span><br><span class="line"><span class="language-xml">    &#x27;formatters&#x27;: &#123;</span></span><br><span class="line"><span class="language-xml">        &#x27;verbose&#x27;: &#123;</span></span><br><span class="line"><span class="language-xml">            &#x27;format&#x27;: &#x27;[%(asctime)s][%(levelname)s][%(pathname)s %(module)s %(lineno)s %(process)d %(thread)d] %(message)s&#x27;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml">    &#x27;handlers&#x27;: &#123;</span></span><br><span class="line"><span class="language-xml">        &#x27;file&#x27;: &#123;</span></span><br><span class="line"><span class="language-xml">            &#x27;level&#x27;: &#x27;INFO&#x27;,</span></span><br><span class="line"><span class="language-xml">            &#x27;class&#x27;: &#x27;logging.handlers.RotatingFileHandler&#x27;,</span></span><br><span class="line"><span class="language-xml">            &#x27;filename&#x27;: &#x27;default.log&#x27;,</span></span><br><span class="line"><span class="language-xml">            &#x27;maxBytes&#x27;: 1024 * 1024 * 5,</span></span><br><span class="line"><span class="language-xml">            &#x27;backupCount&#x27;: 5,</span></span><br><span class="line"><span class="language-xml">            &#x27;formatter&#x27;: &#x27;verbose&#x27;,</span></span><br><span class="line"><span class="language-xml">        &#125;,</span></span><br><span class="line"><span class="language-xml">        &#x27;console&#x27;: &#123;</span></span><br><span class="line"><span class="language-xml">            &#x27;class&#x27;: &#x27;logging.StreamHandler&#x27;,</span></span><br><span class="line"><span class="language-xml">            &#x27;formatter&#x27;: &#x27;verbose&#x27;,</span></span><br><span class="line"><span class="language-xml">        &#125;,</span></span><br><span class="line"><span class="language-xml">        &#x27;django.server&#x27;: &#123;</span></span><br><span class="line"><span class="language-xml">            &#x27;level&#x27;: &#x27;INFO&#x27;,</span></span><br><span class="line"><span class="language-xml">            &#x27;class&#x27;: &#x27;logging.StreamHandler&#x27;,</span></span><br><span class="line"><span class="language-xml">            &#x27;formatter&#x27;: &#x27;verbose&#x27;,</span></span><br><span class="line"><span class="language-xml">        &#125;,</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml">    &#x27;loggers&#x27;: &#123;</span></span><br><span class="line"><span class="language-xml">        &#x27;django&#x27;: &#123;</span></span><br><span class="line"><span class="language-xml">            &#x27;handlers&#x27;: [&#x27;console&#x27;, &#x27;file&#x27;],</span></span><br><span class="line"><span class="language-xml">            &#x27;level&#x27;: &#x27;INFO&#x27;,</span></span><br><span class="line"><span class="language-xml">        &#125;,</span></span><br><span class="line"><span class="language-xml">        &#x27;django.server&#x27;: &#123;</span></span><br><span class="line"><span class="language-xml">            &#x27;handlers&#x27;: [&#x27;django.server&#x27;],</span></span><br><span class="line"><span class="language-xml">            &#x27;level&#x27;: &#x27;INFO&#x27;,</span></span><br><span class="line"><span class="language-xml">            &#x27;propagate&#x27;: False,</span></span><br><span class="line"><span class="language-xml">        &#125;,</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<p>代码中可以通过以下方式写入日志到对应 <code>logger</code>:  </p>
<figure class="highlight python"><figcaption><span>views.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(`django.server`)</span><br><span class="line">logger.info(<span class="string">&#x27;aaa&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p> <code>loggers</code> 类型 为 <code>django</code> 将处理所有类型的日志</p>
<h2 id="Django-简单使用示例"><a href="#Django-简单使用示例" class="headerlink" title="Django 简单使用示例"></a>Django 简单使用示例</h2><p>以下配置为 Django 中使用 <code>logging</code> 模块的简单示例，配置后在 Django 项目代码中直接使用 <code>logging</code> 方法即可写入日志</p>
<figure class="highlight python"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;verbose&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;[%(asctime)s][%(levelname)s][%(pathname)s %(module)s %(lineno)s %(process)d %(thread)d] %(message)s&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;file&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;default.log&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;verbose&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;verbose&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.djangoproject.com/zh-hans/4.0/topics/logging/">django logging 模块官网说明</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django model 使用</title>
    <url>/202301191014/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3.10</li>
<li>Django 4.1</li>
</ul>
<p>在 Project&#x2F;App 的 <code>models.py</code> 文件中创建 <code>model</code>，当 model 定义完成，Django 会自动生产一个后台管理接口，允许认证用户添加、更改和删除对象，只需在管理站点上注册模型即可 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[设计模型](https://docs.djangoproject.com/zh-hans/4.1/intro/overview/#design-your-model)">[1]</span></a></sup></p>
<h1 id="创建-model"><a href="#创建-model" class="headerlink" title="创建 model"></a>创建 model</h1><p>在 Project&#x2F;App 的 <code>models.py</code> 文件中创建 <code>model</code></p>
<figure class="highlight shell"><figcaption><span>models.py</span></figcaption><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">公司部门</span></span><br><span class="line">class Department(models.Model):</span><br><span class="line">    name = models.CharField(max_length=24, unique=True, help_text=&quot;部门名称&quot;,verbose_name=&#x27;名称&#x27;)</span><br><span class="line">    shortName = models.CharField(max_length=8, unique=True, help_text=&quot;部门名称简称&quot;,verbose_name=&#x27;简称&#x27;)</span><br><span class="line">    manager = models.ForeignKey(&#x27;Emplyee&#x27;, on_delete=models.CASCADE, help_text=&quot;部门老大&quot;)</span><br><span class="line">    comment = models.CharField(max_length=256, blank=True, help_text=&quot;备注信息&quot;,verbose_name=&#x27;备注&#x27;)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.shortName</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        # 管理后台显示的 model 名，最后面没有 &#x27;s&#x27;</span><br><span class="line">        verbose_name_plural = &quot;部门&quot;</span><br><span class="line">        </span><br><span class="line">        # 管理后台显示的 model 名，最后面有 &#x27;s&#x27;，显示为 &#x27;部门s&#x27;</span><br><span class="line">        verbose_name = &quot;部门&quot;</span><br><span class="line">        </span><br><span class="line">        # 数据库中生成的表名称 默认 app名称 + 下划线 + 类名</span><br><span class="line">        db_table = &quot;table_name&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/">Django 模型字段参考</a></p>
<p>对修改后的 <code>model</code> 进行 <code>migrate</code>，以使在数据库中变更更改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<h1 id="model-注册到后台"><a href="#model-注册到后台" class="headerlink" title="model 注册到后台"></a>model 注册到后台</h1><p>在 Project&#x2F;App 的 <code>admin.py</code> 文件中注册 <code>model</code></p>
<figure class="highlight shell"><figcaption><span>admin.py</span></figcaption><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">假如 app 为 servers，导入 models</span></span><br><span class="line">from servers import models</span><br><span class="line"></span><br><span class="line">admin.site.site_header = &quot;My Admin&quot;</span><br><span class="line">admin.site.site_title = &quot;My Admin&quot;</span><br><span class="line"></span><br><span class="line">@admin.register(models.Department)</span><br><span class="line">class DepartmentAdmin(admin.ModelAdmin):</span><br><span class="line">    list_display = (&#x27;id&#x27;,&#x27;name&#x27;,&#x27;shortName&#x27;,&#x27;manager&#x27;,&#x27;comment&#x27;)</span><br><span class="line">    list_display_links = (&#x27;id&#x27;,&#x27;name&#x27;,&#x27;shortName&#x27;,&#x27;manager&#x27;,&#x27;comment&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更多有关 admin 配置方法，请参考 <a href="/202209021312/" title="Django admin 配置">Django admin 配置</a></p>
<span id="more"></span>

<h1 id="model-基本操作"><a href="#model-基本操作" class="headerlink" title="model 基本操作"></a>model 基本操作</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><p>假设 model 为 <code>Publish</code>，新增数据 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[执行查询](https://docs.djangoproject.com/zh-hans/4.1/topics/db/queries/)">[2]</span></a></sup></p>
<h3 id="create-方式新增数据"><a href="#create-方式新增数据" class="headerlink" title="create 方式新增数据"></a>create 方式新增数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Publish.objects.create(&quot;name&quot;=&quot;人民出版社&quot;,city=&quot;北京&quot;)</span><br><span class="line">Publish.objects.create(**&#123;&quot;name&quot;:&quot;文艺出版社&quot;,&quot;city&quot;:&quot;上海&quot;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="save-方式新增数据"><a href="#save-方式新增数据" class="headerlink" title="save 方式新增数据"></a>save 方式新增数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">book1=Book(title=&quot;python&quot;,price=&quot;88&quot;,publish_id=&quot;1&quot;,publication_date=&quot;2017-06-18&quot;)</span><br><span class="line">book1.save()</span><br></pre></td></tr></table></figure>
<p>为了避免重复创建数据表中已存在的条目，Django 还提供了 <code>get_or_create</code> 方法。它会返回查询到的或新建的模型对象实例，还会返回这个对象实例是否是刚刚创建的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj, created = Article.objects.get_or_create(title=<span class="string">&quot;My first article&quot;</span>, body=<span class="string">&quot;My first article body&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="update-or-create-方式更新或者添加数据"><a href="#update-or-create-方式更新或者添加数据" class="headerlink" title="update_or_create 方式更新或者添加数据"></a>update_or_create 方式更新或者添加数据</h3><p><code>update_or_create</code> 是使用给定的 <code>kwargs</code> 更新对象的一种方便方法，必要时创建一个新对象。<code>defaults</code> 是用来更新对象的 <code>(field, value)</code> 对的字典。<code>defaults</code> 中的值可以是可调用对象。</p>
<p>返回 <code>(object, created)</code> 的元组，其中 <code>object</code> 是创建或更新的对象，<code>created</code> 是一个布尔值，指定是否创建了一个新对象。 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[update_or_create](https://docs.djangoproject.com/zh-hans/4.1/ref/models/querysets/#update-or-create)">[3]</span></a></sup></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj, created = models.RawDomains.objects.update_or_create(<span class="built_in">id</span>=<span class="built_in">id</span>, domain=domain, defaults=d)</span><br></pre></td></tr></table></figure>
<p>以上示例中，先使用 <code>id=id, domain=domain</code> 的条件查询（筛选）数据，如果筛选出 1 条数据，则对此数据使用 <code>defaults</code> 中定义的对象进行更新，如果没有筛选出数据，则创建数据。</p>
<h3 id="存在-Foreignkey-的表新增数据"><a href="#存在-Foreignkey-的表新增数据" class="headerlink" title="存在 Foreignkey 的表新增数据"></a>存在 Foreignkey 的表新增数据</h3><h4 id="通过绑定对象的方式新增"><a href="#通过绑定对象的方式新增" class="headerlink" title="通过绑定对象的方式新增"></a>通过绑定对象的方式新增</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取出版社对象</span></span><br><span class="line">publish_obj=Publish.objects.get(id=4)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将出版社的对象绑定到书籍的记录中</span></span><br><span class="line">Book.objects.create(</span><br><span class="line">    title=&quot;python&quot;,</span><br><span class="line">    price=48.00,</span><br><span class="line">    publication_date=&quot;2017-07-12&quot;,</span><br><span class="line">    publish=publish_obj,</span><br><span class="line">)   </span><br></pre></td></tr></table></figure>

<h4 id="直接通过-Foreignkey-对应记录的-id-号新增数据"><a href="#直接通过-Foreignkey-对应记录的-id-号新增数据" class="headerlink" title="直接通过 Foreignkey 对应记录的 id 号新增数据"></a>直接通过 Foreignkey 对应记录的 id 号新增数据</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接把出版社的<span class="built_in">id</span>号插入到书籍的记录中</span></span><br><span class="line">Book.objects.create(</span><br><span class="line">    title=&quot;python&quot;,</span><br><span class="line">    price=48.00,</span><br><span class="line">    publish_id=2,</span><br><span class="line">    publication_date=&quot;2017-06-18&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="ManyToManyField-的表新增数据"><a href="#ManyToManyField-的表新增数据" class="headerlink" title="ManyToManyField 的表新增数据"></a>ManyToManyField 的表新增数据</h3><p>为一本书添加多个作者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">author1=Author.objects.get(id=1)              # 获取id号为1的作者对象</span><br><span class="line">author2=Author.objects.filter(name=&quot;a&quot;)       # 获取名字为&quot;tom&quot;的作者对象</span><br><span class="line">book1=Book.objects.get(id=2)                  # 获取id号为2的书籍对象</span><br><span class="line">book1.authors.add(author1,author2)            # 为书籍对象添加多个作者对象</span><br></pre></td></tr></table></figure>
<p>也可以使用以下方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">book1.authors.add(*[author1,author2])             # 为书籍对象添加作者对象的列表</span><br><span class="line">book1.authors.remove(*[author1,author2])          # 删除指定书籍的所有作者</span><br></pre></td></tr></table></figure>

<p>为一个作者添加多本书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">author_obj = Author.objects.filter(name=&quot;jerry&quot;)        # 获取名字为&quot;jerry&quot;的作者对象</span><br><span class="line">book_obj=Book.objects.filter(id__gt=3)                  # 获取id大于3的书籍对象集合</span><br><span class="line">author_obj.book_set.add(*book_obj)                      # 为作者对象添加书籍对象集合</span><br><span class="line">author_obj.book_set.remove(*book_obj)                   # 删除指定作者对象所有的书籍</span><br></pre></td></tr></table></figure>
<h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Book.objects.filter(id=1).delete()</span><br></pre></td></tr></table></figure>

<h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><h3 id="使用-save-方法将所有属性重新设定一遍-效率较低"><a href="#使用-save-方法将所有属性重新设定一遍-效率较低" class="headerlink" title="使用 save 方法将所有属性重新设定一遍,效率较低"></a>使用 save 方法将所有属性重新设定一遍,效率较低</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">author1=Author.objects.get(id=3)           # 获取id为3的作者对象</span><br><span class="line"></span><br><span class="line">author1.name=&quot;jobs&quot;                        # 修改作者对象的名字</span><br><span class="line"></span><br><span class="line">author1.save()                             # 把更改写入数据库</span><br></pre></td></tr></table></figure>

<h3 id="使用-update-方法直接设置对应的属性"><a href="#使用-update-方法直接设置对应的属性" class="headerlink" title="使用 update 方法直接设置对应的属性"></a>使用 update 方法直接设置对应的属性</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Publish.objects.filter(id=2).update(name=&quot;北京出版社&quot;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>update()</code> 是 <code>QuerySet</code> 对象的一个方法,<code>get</code> 返回的是一个 model 对象,其没有 <code>update</code> 方法</p>
</blockquote>
<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>查询数据使用 <code>QuerySet</code> API。 <code>QuerySet</code> 是惰性执行的，创建 <code>Query Set</code> 不会访问数据库，只有在访问具体查询结果的时候才会访问数据库。</p>
<p>查询方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>方法说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td><code>filter(**kwargs)</code></td>
<td>包含了与所给筛选条件相匹配的对象，返回   <code>QuerySet</code>   ，相当于 SQL 中的 <code>WHERE</code></td>
<td></td>
</tr>
<tr>
<td><code>all() </code></td>
<td>查询所有结果     ，等同于 SQL 语句 <code>SELECT * FROM</code></td>
<td></td>
</tr>
<tr>
<td><code>get(**kwargs)</code></td>
<td>返回与所给筛选条件相匹配的对象,返回结果有且只有一个,如果符合筛选条件的对象超过一个或者没有都是报错</td>
<td></td>
</tr>
<tr>
<td><code>values(*field)</code></td>
<td>只取指定列 ，返回 <code>QuerySet</code>，此列表由字典 <code>&#123;&#39;列名&#39;： &#39;列值&#39;&#125;</code> 组成</td>
<td><code>models.AwsZoneInfo.objects.all().values(&#39;code&#39;)</code></td>
</tr>
<tr>
<td><code>exclude(**kwargs)</code></td>
<td>包含了与所给的筛选条件不匹配的对象</td>
<td></td>
</tr>
<tr>
<td><code>order by(*field) </code></td>
<td>对查询结果排序</td>
<td></td>
</tr>
<tr>
<td><code>reverse()  </code></td>
<td>对查询结果反向排序</td>
<td></td>
</tr>
<tr>
<td><code>distinct()  </code></td>
<td>从返回结果中剔除重复记录</td>
<td></td>
</tr>
<tr>
<td><code>values_list(*field)</code></td>
<td>与 <code>values()</code> 非常相似,返回一个元组序列,<code>values</code> 返回一个字典序列</td>
<td></td>
</tr>
<tr>
<td><code>count()</code></td>
<td>返回数据库中匹配的记录的数量</td>
<td></td>
</tr>
<tr>
<td><code>first() </code></td>
<td>返回数据库中匹配的对象的第一个对象</td>
<td></td>
</tr>
<tr>
<td><code>last()</code></td>
<td>返回数据库中匹配的对象的最后一个对象</td>
<td></td>
</tr>
<tr>
<td><code>exists() </code></td>
<td>判断一个对象集合中是否包含指定对象,包含返回 <code>True</code>,不包含返回 <code>False </code></td>
<td></td>
</tr>
<tr>
<td><code>exclude()</code></td>
<td>排除满足条件的对象</td>
<td></td>
</tr>
<tr>
<td><code>annotate()</code></td>
<td>使用聚合函数</td>
<td></td>
</tr>
<tr>
<td><code>dates() </code></td>
<td>根据日期获取查询集</td>
<td></td>
</tr>
<tr>
<td><code>datetimes()</code></td>
<td>根据时间获取查询集</td>
<td></td>
</tr>
<tr>
<td><code>none()  </code></td>
<td>创建空的查询集</td>
<td></td>
</tr>
<tr>
<td><code>union() </code></td>
<td>并集</td>
<td></td>
</tr>
<tr>
<td><code>intersection()</code></td>
<td>交集</td>
<td></td>
</tr>
<tr>
<td><code>difference() </code></td>
<td>差集</td>
<td></td>
</tr>
<tr>
<td><code>select_related()   </code></td>
<td>附带查询关联对象</td>
<td></td>
</tr>
<tr>
<td><code>prefetch_related()</code></td>
<td>预先查询</td>
<td></td>
</tr>
<tr>
<td><code>extra()  </code></td>
<td>附加 SQL 查询</td>
<td></td>
</tr>
<tr>
<td><code>defer() </code></td>
<td>不加载指定字段</td>
<td></td>
</tr>
<tr>
<td><code>only() </code></td>
<td>只加载指定的字段</td>
<td></td>
</tr>
<tr>
<td><code>using()</code></td>
<td>选择数据库</td>
<td></td>
</tr>
<tr>
<td><code>select_for_update()</code></td>
<td>锁住选择的对象，直到事务结束。</td>
<td></td>
</tr>
<tr>
<td><code>raw()</code></td>
<td>接收一个原始的 SQL 查询</td>
<td></td>
</tr>
</tbody></table>
<h3 id="values-field-和-values-list-field-使用示例"><a href="#values-field-和-values-list-field-使用示例" class="headerlink" title="values(*field) 和 values_list(*field) 使用示例"></a>values(*field) 和 values_list(*field) 使用示例</h3><p><code>values(*field)</code> 获取 QuerySet 中指定列的值，会返回一个由<strong>字典</strong> <code>&#123;&#39;列名1&#39;: &#39;列值1&#39;, &#39;列名2&#39;: &#39;列值2&#39;, ...&#125;</code> 组成的 QuerySet </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; models.AwsZoneInfo.objects.all().values(<span class="string">&#x27;code&#x27;</span>)</span></span><br><span class="line">&lt;QuerySet [&#123;&#x27;code&#x27;: &#x27;af-south-1&#x27;&#125;, &#123;&#x27;code&#x27;: &#x27;ap-east-1&#x27;&#125;, &#123;&#x27;code&#x27;: &#x27;ap-northeast-1&#x27;&#125;, &#123;&#x27;code&#x27;: &#x27;ap-south-1&#x27;&#125;, &#123;&#x27;code&#x27;: &#x27;ap-southeast-3&#x27;&#125;]&gt;</span><br><span class="line"></span><br><span class="line">models.AwsZoneInfo.objects.all().values(&#x27;code&#x27;,&#x27;name&#x27;)</span><br><span class="line">&lt;QuerySet [&#123;&#x27;code&#x27;: &#x27;ap-east-1&#x27;, &#x27;name&#x27;: &#x27;Asia Pacific (Hong Kong)&#x27;&#125;, &#123;&#x27;code&#x27;: &#x27;us-east-1&#x27;, &#x27;name&#x27;: &#x27;美国东部（弗吉尼亚北部）&#x27;]&gt;</span><br></pre></td></tr></table></figure>
<p><code>values_list(*field)</code> 获取 QuerySet 中指定列的值，会返回一个由<strong>元组</strong> <code>(&#39;列值1&#39;, &#39;列值2&#39;, ...)</code> 组成的 QuerySet</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; models.AwsZoneInfo.objects.all().values_list(<span class="string">&#x27;code&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span></span><br><span class="line">&lt;QuerySet [(&#x27;us-east-2&#x27;, &#x27;美国东部（俄亥俄）&#x27;), (&#x27;ap-east-1&#x27;, &#x27;Asia Pacific (Hong Kong)&#x27;), (&#x27;us-east-1&#x27;, &#x27;美国东部（弗吉尼亚北部）&#x27;)]&gt;</span><br></pre></td></tr></table></figure>

<h1 id="model-类型使用说明"><a href="#model-类型使用说明" class="headerlink" title="model 类型使用说明"></a>model 类型使用说明</h1><h2 id="OneToOneField"><a href="#OneToOneField" class="headerlink" title="OneToOneField"></a>OneToOneField</h2><p>一对一表中，子表从母表中选出一条数据一一对应，母表中选出来一条就少一条，子表不可以再选择母表中已被选择的那条数据 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[一对一关联](https://docs.djangoproject.com/zh-hans/4.1/topics/db/examples/one_to_one/)">[4]</span></a></sup></p>
<h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><p>示例如下：</p>
<figure class="highlight python"><figcaption><span>models.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    username = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Profile</span>(models.Model):</span><br><span class="line">    user = models.OneToOneField(User, on_delete=models.CASCADE)</span><br><span class="line">    bio = models.TextField()</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
<h4 id="User-实例中使用-Profile-实例的属性"><a href="#User-实例中使用-Profile-实例的属性" class="headerlink" title="User 实例中使用 Profile 实例的属性"></a>User 实例中使用 Profile 实例的属性</h4><p>假如需要在 User 对象中，调用和 User 实例关联的 Profile 对象的属性，可以通过以下方法实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user = User.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">bio = user.profile.bio</span><br></pre></td></tr></table></figure>
<p>需要注意的是，如果 <strong><code>user</code> 没有与之关联的 <code>Profile</code> 实例，那么  <code>user</code> 就没有 <code>profile</code> 属性</strong>，上述代码会报错：<code>models.User.profile.RelatedObjectDoesNotExist: User has no profile</code></p>
<p>可以通过以下方式处理异常 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[RelatedObjectDoesNotExist](https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#onetoonefield)">[5]</span></a></sup></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user = User.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    bio = user.profile.bio</span><br><span class="line"><span class="keyword">except</span> models.User.profile.RelatedObjectDoesNotExist:</span><br><span class="line">    bio = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="父表插入记录后，子表自动插入相关联的记录"><a href="#父表插入记录后，子表自动插入相关联的记录" class="headerlink" title="父表插入记录后，子表自动插入相关联的记录"></a>父表插入记录后，子表自动插入相关联的记录</h4><p>实例代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">域名信息</span></span><br><span class="line">class RawDomains(models.Model):</span><br><span class="line">    provider = models.ForeignKey(&#x27;Provider&#x27;, on_delete=models.CASCADE, help_text=&quot;账号供应商&quot;, verbose_name=&quot;账号供应商&quot;)</span><br><span class="line">    account = models.ForeignKey(&#x27;AccountAuthInfo&#x27;, on_delete=models.CASCADE, help_text=&quot;账号名&quot;, verbose_name=&#x27;账号名&#x27;)</span><br><span class="line">    domain = models.CharField(max_length=64, unique=True, blank=False, help_text=&quot;域名&quot;, verbose_name=&#x27;域名&#x27;)</span><br><span class="line">    expire = models.DateTimeField(help_text=&quot;域名过期时间&quot;, verbose_name=&#x27;域名过期时间&#x27;)</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">域名及项目关联信息</span></span><br><span class="line">class DomainProjectInfo(models.Model):</span><br><span class="line">    domain = models.OneToOneField(RawDomains, on_delete=models.CASCADE, help_text=&quot;域名&quot;, verbose_name=&quot;域名&quot;)</span><br><span class="line">    project = models.ForeignKey(&#x27;Project&#x27;, on_delete=models.CASCADE, help_text=&quot;产品&quot;, verbose_name=&quot;产品&quot;, default=default_project)</span><br><span class="line">    type = models.ForeignKey(&#x27;DomainType&#x27;, on_delete=models.CASCADE, help_text=&quot;域名类型&quot;, verbose_name=&quot;域名类型&quot;, default=1)</span><br><span class="line">    status = models.ForeignKey(&#x27;DomainStatus&#x27;, on_delete=models.CASCADE, help_text=&quot;域名状态&quot;, verbose_name=&quot;域名状态&quot;, default=1)</span><br></pre></td></tr></table></figure>
<p>为了在 Django 中实现 <code>RawDomains</code> 新增记录后，<code>DomainProjectInfo</code> 自动关联对应条目的需求，可以使用 Django 的信号机制。具体来说，可以监听 <code>RawDomains</code> 模型的 <code>post_save </code>信号，每当有新的 <code>RawDomains</code> 记录被保存后，自动创建一个对应的 <code>DomainProjectInfo</code> 记录并建立关联。</p>
<p>以下是具体实现步骤：</p>
<ol>
<li><p>定义信号接收器</p>
<p> 首先，在你的应用中创建一个新的文件 <code>signals.py</code>（如果还没有的话），在这个文件中定义一个函数来作为信号的接收器。这个函数将在 <code>RawDomains</code> 记录被成功创建或保存后被自动调用。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">from django.db.models.signals import post_save</span><br><span class="line">from django.dispatch import receiver</span><br><span class="line">from .models import RawDomains, DomainProjectInfo, Project</span><br><span class="line"></span><br><span class="line">@receiver(post_save, sender=RawDomains)</span><br><span class="line">def create_domain_project_info(sender, instance, created, **kwargs):</span><br><span class="line">    if created:  # 检查是不是新创建的记录</span><br><span class="line">        # 这里你可以根据需要来设定默认值，比如默认的项目ID</span><br><span class="line">        default_project_id = 234  # 假设已存在的默认项目ID</span><br><span class="line">        DomainProjectInfo.objects.create(</span><br><span class="line">            domain=instance,</span><br><span class="line">            project_id=default_project_id,</span><br><span class="line">            type_id=3,  # 示例默认值，根据实际情况调整</span><br><span class="line">            status_id=5,</span><br><span class="line">        )</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 这个信号接收器会在每次 <code>RawDomains</code> 模型的 <code>post_save</code> 事件发生时被调用。如果是新创建的 <code>RawDomains</code> 记录（<code>created=True</code>），它会自动创建一个对应的 <code>DomainProjectInfo</code> 实例，并设置一些默认值。</p>
</li>
<li><p>确保信号被正确连接  </p>
<p> 为了确保你的信号接收器被正确地挂接，你需要在应用的配置类中导入这些信号。修改你应用的 <code>apps.py</code> 文件，确保 <code>ready</code> 方法如下所示：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line">class YourAppNameConfig(AppConfig):</span><br><span class="line">    name = &#x27;your_app_name&#x27;  # 请确保这里使用你的实际应用名称</span><br><span class="line">    verbose_name = &#x27;你的应用的可读名称&#x27;</span><br><span class="line"></span><br><span class="line">    def ready(self):</span><br><span class="line">        import your_app_name.signals  # 替换your_app_name为你的应用的实际名称</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>完成以上步骤后，每当 <code>RawDomains</code> 模型添加新记录时，Django 会自动创建一个相关联的 <code>DomainProjectInfo</code> 记录。根据你的具体模型字段和逻辑需要调整示例代码中的默认值设置。</p>
<h2 id="可选择的字段"><a href="#可选择的字段" class="headerlink" title="可选择的字段"></a>可选择的字段</h2><p>要定义在给定选项中选择值的字段，可以通过在模型类中使用 <code>choices</code> 参数来配置可选字段。<code>choices</code> 参数需要传递一个元组的列表，其中每个元组表示一个可选择的选项。每个元组由 2 个值组成，第一个值是数据库中存储的值，第二个是在表单中显示的标签。</p>
<figure class="highlight python"><figcaption><span>models.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymodel</span>(models.Model):</span><br><span class="line">    GENDER_CHOICES = (</span><br><span class="line">        (<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;Male&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;Female&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    gender = models.CharField(max_length=<span class="number">1</span>, choices=GENDER_CHOICES)</span><br></pre></td></tr></table></figure>

<h2 id="查询给定的-QuerySet-是否属于某个-model"><a href="#查询给定的-QuerySet-是否属于某个-model" class="headerlink" title="查询给定的 QuerySet 是否属于某个 model"></a>查询给定的 QuerySet 是否属于某个 model</h2><p>在 Django 中，可以使用以下方法来检查一个 <code>QuerySet</code> 是否是特定 model 的实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>queryset.model == models.Mymodel</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>如果对象 <code>queryset</code> 中的所有对象都是 <code>Mymodel</code> 的实例，返回 <code>True</code>。如果 <code>queryset</code> 中有任何一个对象不是 <code>Mymodel</code> 的实例，返回 <code>False</code></p>
<h2 id="字符串格式的-QuerySet-转换为-QuerySet-对象"><a href="#字符串格式的-QuerySet-转换为-QuerySet-对象" class="headerlink" title="字符串格式的 QuerySet 转换为 QuerySet 对象"></a>字符串格式的 QuerySet 转换为 QuerySet 对象</h2><p>假如有以下字符串，内容和 QuerySet 内容一致，只是类型为字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>queryset_string</span><br><span class="line"><span class="string">&#x27;&lt;QuerySet [&lt;Domain: a11.com&gt;, &lt;Domain: a12.com&gt;, &lt;Domain: a13.com&gt;, &lt;Domain: a14.com&gt;]&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(queryset_string)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>要将示例中的 <code>queryset_string</code> 类型从 <code>str</code> 转换为 <code>QuerySet</code> 对象，主要步骤如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.apps <span class="keyword">import</span> apps</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>model_name = <span class="string">&quot;Domain&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 model 类，app_label=&quot;your_app_label&quot; 换成自己的 Django 项目中的 app 名称</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>model = apps.get_model(app_label=<span class="string">&quot;your_app_label&quot;</span>, model_name=model_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 queryset_string 转换为只包含主键的列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj_str_list = queryset_string.replace(<span class="string">&#x27;&lt;QuerySet&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;&lt;DomainProjectInfo: &#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj_str_list</span><br><span class="line">[<span class="string">&#x27;a11.com&#x27;</span>, <span class="string">&#x27;a12.com&#x27;</span>, <span class="string">&#x27;a13.com&#x27;</span>, <span class="string">&#x27;a14.com&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 obj_str_list 中的主键转换为 model 的对象组成的列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queryset_list = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> obj_str <span class="keyword">in</span> obj_str_list:</span><br><span class="line"><span class="meta">... </span>    obj = model.objects.get(domain=obj_str)</span><br><span class="line"><span class="meta">... </span>    queryset_list.append(obj)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queryset_list</span><br><span class="line">[&lt;DomainProjectInfo: a11.com&gt;, &lt;DomainProjectInfo: a12.com&gt;, &lt;DomainProjectInfo: <span class="number">613.</span>com&gt;, &lt;DomainProjectInfo: a14.com&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(queryset_list)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 list 类型的 queryset_list 转换为 QuerySet 对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queryset = model.objects.<span class="built_in">filter</span>(pk__in=[obj.pk <span class="keyword">for</span> obj <span class="keyword">in</span> queryset_list])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queryset</span><br><span class="line">&lt;QuerySet [&lt;DomainProjectInfo: a11.com&gt;, &lt;DomainProjectInfo: a12.com&gt;, &lt;DomainProjectInfo: a13.com&gt;, &lt;DomainProjectInfo: a14.com&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(queryset)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;django.db.models.query.QuerySet&#x27;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="手动执行-migrate"><a href="#手动执行-migrate" class="headerlink" title="手动执行 migrate"></a>手动执行 migrate</h1><p>有时候使用 <code>python manage.py migrate</code> 执行数据库迁移会出错，可能需要重建数据库重新执行 migrate 操作，在不方便如此做的情况下，可以选择手动执行迁移操作。</p>
<ol>
<li><p>使用以下命令，根据想要迁移的文件生成实际在数据库中执行的 sql 语句。命令中 <code>0008_table_alter</code> 为要迁移的文件名（<strong>不用带完整路径(<code>myapp_name/migrations/</code>)</strong> 和文件名后缀(<code>.py</code>)），否则会报错：<code>CommandError: Cannot find a migration matching &#39;myapp_name/migrations/0008_table_alter.py&#39; from app &#39;myapp_name&#39;. Is it in INSTALLED_APPS?</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python manage.py sqlmigrate myapp_name 0008_table_alter</span></span><br><span class="line">--</span><br><span class="line">-- Create model Domain</span><br><span class="line">--</span><br><span class="line">CREATE TABLE `myapp_name_domain` (`id` bigint AUTO_INCREMENT NOT NULL PRIMARY KEY, `name` varchar(10) NOT NULL UNIQUE);</span><br><span class="line">--</span><br><span class="line">-- Alter field owner on domainproject</span><br><span class="line">--</span><br><span class="line">--</span><br><span class="line">-- Add field usage to domainproject</span><br><span class="line">--</span><br><span class="line">ALTER TABLE `myapp_name_domainproject` ADD COLUMN `usage_id` bigint DEFAULT 1 NOT NULL , ADD CONSTRAINT `myapp_name_doma_usage_id_43803979_fk_domains_c` FOREIGN KEY (`usage_id`) REFERENCES `myapp_name_domainusage`(`id`);</span><br><span class="line">ALTER TABLE `myapp_name_domainproject` ALTER COLUMN `usage_id` DROP DEFAULT;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在数据库中执行打印出的 sql</p>
</li>
</ol>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="str-returned-non-string"><a href="#str-returned-non-string" class="headerlink" title="str returned non-string"></a><strong>str</strong> returned non-string</h2><p>后台添加对象失败，<a href="https://stackoverflow.com/questions/70827036/error-str-returned-non-string-type-modelname-in-django">原因说明</a></p>
<h2 id="remaining-elements-truncated"><a href="#remaining-elements-truncated" class="headerlink" title="remaining elements truncated"></a>remaining elements truncated</h2><p><code>django.db.models.query.QuerySet</code> 类型的对象，长度超过 20 时，20 个之后的内容会显示为 <code>remaining elements truncated</code>，如果值变为了字符串类型，最后一项默认变成了 <code>remaining elements truncated</code>。因此在 <code>django.db.models.query.QuerySet</code> 类型或类似类型的数据会转为 <code>str</code> 的场景下下，要将其处理成 <code>list</code> 类型 </p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/intro/overview/#design-your-model">设计模型</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/topics/db/queries/">执行查询</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/querysets/#update-or-create">update_or_create</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/topics/db/examples/one_to_one/">一对一关联</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#onetoonefield">RelatedObjectDoesNotExist</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>django 接收 post 请求中的 json 数据</title>
    <url>/202209161740/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Python3.10</li>
<li>Django 4.0</li>
</ul>
<h3 id="接收-post-中的-json-数据"><a href="#接收-post-中的-json-数据" class="headerlink" title="接收 post 中的 json 数据"></a>接收 post 中的 json 数据</h3><p>示例通过 <code>curl</code> 命令模拟 post 请求，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -v -H &quot;Accept: application/json&quot; -H &quot;Content-type: application/json&quot; -X POST \</span><br><span class="line">      -d &#x27;&#123;&quot;id&quot; : &quot;yTP7PSsRxz53tJ56VVG&quot;, &quot;type&quot; : 5&#125;&#x27; 127.0.0.1:8000/csapi</span><br></pre></td></tr></table></figure>

<p>Django 处理程序示例：</p>
<figure class="highlight shell"><figcaption><span>views.py</span></figcaption><table><tr><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def csapi(request):</span><br><span class="line">    post_body = request.body</span><br><span class="line">    print(f&#x27;****** POST body: &#123;post_body&#125;, type : &#123;type(post_body)&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">    # </span><br><span class="line">    data = eval(post_body)</span><br><span class="line"></span><br><span class="line">    print(f&#x27;****** data : &#123;data&#125; , type : &#123;type(data)&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">    return HttpResponse(&#x27;ok&#x27;)</span><br></pre></td></tr></table></figure>

<p>Console 输出结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">****** POST body: b&#x27;&#123;&quot;id&quot; : &quot;yTP7PSsRxz53tJ56VVG&quot;, &quot;type&quot; : 5&#125;&#x27;, type : &lt;class &#x27;bytes&#x27;&gt;</span><br><span class="line">****** data : &#123;&#x27;id&#x27;: &#x27;yTP7PSsRxz53tJ56VVG&#x27;, &#x27;type&#x27;: 5&#125; , type : &lt;class &#x27;dict&#x27;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上输出可以看到，<code>request.body</code> 中的类型为 <code>bytes</code></p>
<p>使用 <code>eval</code> 转换后类型变为 <code>dict</code></p>
<p>使用 <code>json.loads</code> 将 <code>request.body</code> 转换为 <code>dict</code> 时，可能会报以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可能原因 <a href="https://www.jianshu.com/p/3a7dbd17e7b9">参考</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 模板语言</title>
    <url>/202303241517/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3.11</li>
<li>Django 4.1</li>
</ul>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>在 Django 4.1 中，使用静态文件的方法与之前的版本相同。以下是使用静态文件的步骤：</p>
<ol>
<li><p>在 <code>settings.py</code> 中设置静态文件目录：</p>
 <figure class="highlight python"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    BASE_DIR / <span class="string">&quot;static&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>STATIC_URL</code> 是静态文件 URL 的前缀。</li>
<li><code>STATICFILES_DIRS</code> 是一个列表，其中包含要在其中查找静态文件的目录。</li>
</ul>
</li>
<li><p>在 HTML 文件中使用静态文件</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Static File Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;css/style.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;images/logo.png&#x27; %&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;My logo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/script.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 在上面的示例中，我们使用了 Django 模板语言的 <code>&#123;% static %&#125;</code> 标记来引用静态文件。<code>&#123;% load static %&#125;</code> 指令必须在使用 <code>&#123;% static %&#125;</code> 标记之前加载，以确保 Django 能够正确解析它们。</p>
</li>
<li><p>运行 <code>collectstatic</code> 命令：<br>  当您准备部署您的 Django 应用程序时，您需要将静态文件收集到一个单独的目录中，以便可以轻松地在生产服务器上提供它们。您可以使用 Django 的 <code>collectstatic</code> 命令来完成此操作。在命令行中运行以下命令：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure>

<p> Django 将在 <code>STATIC_ROOT</code> 目录中创建一个新的静态文件目录，并将您的静态文件从 <code>STATICFILES_DIRS</code> 中指定的目录复制到该目录中。您可以在 <code>settings.py</code> 文件中设置 <code>STATIC_ROOT</code> 目录的路径</p>
</li>
</ol>
<h1 id="DTL-语法"><a href="#DTL-语法" class="headerlink" title="DTL 语法"></a>DTL 语法</h1><h2 id="load-static"><a href="#load-static" class="headerlink" title="load static"></a>load static</h2><p><a href="#%E5%9C%A8-HTML-%E6%96%87%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6">参考说明</a></p>
<h2 id="block-super"><a href="#block-super" class="headerlink" title="block.super"></a>block.super</h2><p>用来从父 block 中继承选项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block extrahead %&#125;</span><br><span class="line">&#123;&#123; block.super &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/css/bootstrap.css&#x27; %&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/css/base.css&#x27; %&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>假设有两个 HTML 文件：<code>header.html</code> 和 <code>content.html</code>。<br><code>header.html</code> 包含页面的头部内容。</p>
<figure class="highlight html"><figcaption><span>header.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- header.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 导航栏内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>content.html</code> 包含页面的主要内容。</p>
<figure class="highlight html"><figcaption><span>content.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- content.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to our website!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the main content of the page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在，可以在另一个 HTML 文件中使用 <code>&#123;% include %&#125;</code> 标签来包含这些内容。</p>
<figure class="highlight html"><figcaption><span>main_template.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- main_template.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% include &#x27;header.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        &#123;% include &#x27;content.html&#x27; %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 页脚内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这个示例中，<code>&#123;% include 'header.html' %&#125;</code> 和 <code>&#123;% include 'content.html' %&#125;</code> 标签会将相应的模板文件的内容包含在 <code>main_template.html</code> 中。这样，就可以在一个模板中包含另一个模板的内容了。</p>
<h2 id="url-反向解析"><a href="#url-反向解析" class="headerlink" title="url 反向解析"></a>url 反向解析</h2><p>在模板中不推荐使用 url 硬编码，建议使用 url 反向解析功能，在 <code>urls.py</code> 中定义 url 时，给 url 命名，在模板中 可以使用反向解析使用 url，避免使用 url 硬编码。<strong>需要在 <code>urls.py</code> 中配置 <code>app_name = &#39;polls&#39;</code>，否则会因为 namespace 不清楚而报错：<code>&#39;polls&#39; is not a registered namespace</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.IndexView.as_view(), name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>以上事例中，<code>name=&#39;index&#39;</code> 为 url 命名，在模板中通过以下方式使用 url 名称 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[反向命名空间 URLs](https://docs.djangoproject.com/zh-hans/4.1/topics/http/urls/#reversing-namespaced-urls)">[1]</span></a></sup></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;polls:index&#x27; %&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><h3 id="根据-model-中的值实现下拉选择菜单"><a href="#根据-model-中的值实现下拉选择菜单" class="headerlink" title="根据 model 中的值实现下拉选择菜单"></a>根据 model 中的值实现下拉选择菜单</h3><p>假如需要实现下拉表单中的可选值来自于某个 <code>model</code>，可以参考以下实现</p>
<figure class="highlight shell"><figcaption><span>models.py</span></figcaption><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create your models here.</span></span><br><span class="line">class Account(models.Model):</span><br><span class="line">    name = models.CharField(max_length=16, unique=True)</span><br></pre></td></tr></table></figure>

<p>视图函数代码如下：</p>
<figure class="highlight shell"><figcaption><span>views.py</span></figcaption><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">from django.contrib.auth.decorators import login_required</span><br><span class="line">from cloudclient import models</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@login_required</span><br><span class="line">def index(request):</span><br><span class="line">    accounts = models.Account.objects.all()</span><br><span class="line">    return render(request, &#x27;index.html&#x27;, &#123;&#x27;accounts&#x27;: accounts&#125;)</span><br></pre></td></tr></table></figure>
<p>HTML 模板主要代码如下：</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;category&quot;</span>&gt;</span>Select An Account: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">id</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">       &#123;% for account in accounts %&#125;</span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; account.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; account.name &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>其中使用 <code>for</code> 循环将视图函数传过来的参数列表（<code>accounts</code>）中的对象添加到下拉菜单中作为下拉选项。</strong><br><img src="https://i.csms.tech/img_216.png"></p>
<p>表单提交后，服务端口会收到 POST 的数据(<code>request.POST</code>)：<code>account=1</code>。参考以下代码处理接收到的表单数据</p>
<figure class="highlight shell"><figcaption><span>views.py</span></figcaption><table><tr><td class="code"><pre><span class="line">@login_required</span><br><span class="line">def index(request):</span><br><span class="line">    if request.method == &#x27;GET&#x27;:</span><br><span class="line">        accounts = models.Account.objects.all()</span><br><span class="line">        return render(request, &#x27;index.html&#x27;, &#123;&#x27;accounts&#x27;: accounts&#125;)</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        # data = request.body</span><br><span class="line">        account_id = request.POST.get(&#x27;account&#x27;)</span><br><span class="line">        logging.info(f&quot;POST DATA: &#123;&#125;&quot;)</span><br></pre></td></tr></table></figure>

<p>如果想在 POST 处理后返回给客户端的 HTML 表单中的默认选中的值任然是客户端 POST 提交时选中的值，可以参考以下代码</p>
<figure class="highlight shell"><figcaption><span>views.py</span></figcaption><table><tr><td class="code"><pre><span class="line">@login_required</span><br><span class="line">def cf_add_domains(request):</span><br><span class="line">    accounts = models.Account.objects.all()</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        data = request.POST</span><br><span class="line">        account_id = data[&#x27;account&#x27;]</span><br><span class="line">        account = models.Account.objects.get(id=account_id)</span><br><span class="line"></span><br><span class="line">        return render(request, &#x27;index.html&#x27;, &#123;&#x27;accounts&#x27;: accounts, &#x27;selected_account_id&#x27;: account_id&#125;)</span><br></pre></td></tr></table></figure>

<p>HTML 模板中使用 <code>option</code> 的 <code>selected</code> 标签选择指定的值。<em><strong>要注意其中的类型转换 <code>account.id|stringformat:&quot;s&quot; == selected_account_id|stringformat:&quot;s&quot;，将变量值转换一致，否则条件判断会失败</code></strong></em> </p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;account&quot;</span>&gt;</span>Select An Account: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">id</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   &#123;% for account in accounts %&#125;</span><br><span class="line">       &#123;% if account.id|stringformat:&quot;s&quot; == selected_account_id|stringformat:&quot;s&quot; %&#125;</span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; account.id &#125;&#125;&quot;</span> <span class="attr">selected</span>&gt;</span>&#123;&#123; account.name &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       &#123;% else %&#125;</span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; account.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; account.name &#125;&#125;-&#123;&#123; account.id &#125;&#125;-&#123;&#123; selected_account_id &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       &#123;% endif %&#125;</span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="if-条件判断"><a href="#if-条件判断" class="headerlink" title="if 条件判断"></a>if 条件判断</h2><p><code>if</code> 语法如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if condition %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 显示内容如果条件为真 --&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 显示内容如果条件为假 --&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if user.is_authenticated %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎回来，&#123;&#123; user.username &#125;&#125;！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;logout&#x27; %&#125;&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您还未登录。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;</span>&gt;</span>立即登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>如果在模板中需要对变量类型进行转换，参考以下语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% for account in accounts %&#125;</span><br><span class="line">    &#123;% if account.id|stringformat:&quot;s&quot; == selected_account_id|stringformat:&quot;s&quot; %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; account.id &#125;&#125;&quot;</span> <span class="attr">selected</span>&gt;</span>&#123;&#123; account.name &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; account.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; account.name &#125;&#125;-&#123;&#123; account.id &#125;&#125;-&#123;&#123; selected_account_id &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>更精简的写法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% for account in accounts %&#125;</span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; account.id &#125;&#125;&quot;</span> &#123;% <span class="attr">if</span> <span class="attr">account.id</span>|<span class="attr">stringformat:</span>&quot;<span class="attr">s</span>&quot; == <span class="string">selected_account_id|stringformat:</span>&quot;<span class="attr">s</span>&quot; %&#125;<span class="attr">selected</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span>&#123;&#123; account.name &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/topics/http/urls/#reversing-namespaced-urls">反向命名空间 URLs</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 常用配置</title>
    <url>/202301181649/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3.10</li>
<li>Django 4.1</li>
</ul>
<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><h2 id="创建项目及-app"><a href="#创建项目及-app" class="headerlink" title="创建项目及 app"></a>创建项目及 app</h2><p>开始使用 Django 时，需要初始化配置，执行以下命令生成初始化的工程环境 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[创建项目](https://docs.djangoproject.com/zh-hans/4.1/intro/tutorial01/#creating-a-project)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure>
<p>创建 Project 成功后，会生成以 Project 命名的根目录(此处为 <code>mysite</code>)，根目录只是你项目的容器， 根目录名称对 Django 没有影响，你可以将它重命名为任何你喜欢的名称。以下为目录结构 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[创建项目](https://docs.djangoproject.com/zh-hans/4.1/intro/tutorial01/#creating-a-project)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>mysite/mysite/settings.py</code> 为项目配置文件，包括配置 app，数据库等。</li>
</ul>
<p>创建 App</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py startapp myapp</span><br></pre></td></tr></table></figure>
<p>创建 app 后，会在项目根目录下生成 app 命名的目录。创建 app 后，需要将 app 添加到项目配置文件 <code>settings.py</code> 中的 <code>INSTALLED_APPS</code></p>
<h2 id="项目配置文件-settings-py-常用配置说明"><a href="#项目配置文件-settings-py-常用配置说明" class="headerlink" title="项目配置文件 settings.py 常用配置说明"></a>项目配置文件 <code>settings.py</code> 常用配置说明</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALLOWED_HOSTS = [&#x27;*&#x27;]</span><br></pre></td></tr></table></figure>
<p>访问控制，默认只允许从本地访问 Django Server，如果需要远程访问，需要配置远程主机地址，<code>*</code> 可以配置允许任一客户端访问。</p>
<h3 id="配置-mysql-数据库"><a href="#配置-mysql-数据库" class="headerlink" title="配置 mysql 数据库"></a>配置 mysql 数据库</h3><p>要为项目配置使用 Mysql 数据库，可以使用以下配置。</p>
<figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,</span><br><span class="line">        &#x27;NAME&#x27;: &quot;vb&quot;,</span><br><span class="line">        &#x27;USER&#x27;: &quot;root&quot;,</span><br><span class="line">        &quot;PASSWORD&quot;: &quot;dBVgcKGnn0&quot;,</span><br><span class="line">        &#x27;HOST&#x27;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;PORT&quot;: &#x27;3306&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置语言为中文"><a href="#配置语言为中文" class="headerlink" title="配置语言为中文"></a>配置语言为中文</h3><figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">LANGUAGE_CODE = &#x27;zh-hans&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="配置时区"><a href="#配置时区" class="headerlink" title="配置时区"></a>配置时区</h3><figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">TIME_ZONE = &#x27;Asia/Shanghai&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置默认的登陆-url-为-Django-后台的登陆-url"><a href="#配置默认的登陆-url-为-Django-后台的登陆-url" class="headerlink" title="配置默认的登陆 url 为 Django 后台的登陆 url"></a>配置默认的登陆 url 为 Django 后台的登陆 url</h3><p>如果需要限制只有登陆的用户才能访问 url。可以在视图函数中使用 <code>login_required</code> 装饰器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">from django.contrib.auth.decorators import login_required</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create your views here.</span></span><br><span class="line">@login_required</span><br><span class="line">def index(request):</span><br><span class="line">    return render(request, &#x27;cloudclient/index.html&#x27;)</span><br></pre></td></tr></table></figure>
<p>使用了 <code>login_required</code> 装饰器后，未登录的用户会跳转到登陆页面，要配置登陆页面使用 Django Admin 的登陆 url，需要在 <code>settings.py</code> 中添加以下配置</p>
<figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">LOGIN_URL = &#x27;admin:login&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="配置登陆用户自动注销"><a href="#配置登陆用户自动注销" class="headerlink" title="配置登陆用户自动注销"></a>配置登陆用户自动注销</h3><p>要配置登陆用户在指定时间内未操作（发送 url 请求）后自动注销，使用以下配置</p>
<figure class="highlight shell"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置会话的过期时间为10分钟（以秒为单位）</span></span><br><span class="line">SESSION_COOKIE_AGE = 600  # 10分钟</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">True： 用户的会话在每个请求时都会刷新会话过期时间</span></span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = True</span><br></pre></td></tr></table></figure>
<h2 id="Django-管理后台配置"><a href="#Django-管理后台配置" class="headerlink" title="Django 管理后台配置"></a>Django 管理后台配置</h2><ol>
<li>创建 project 后，要使用 Django 管理后台，需要首先初始化数据库并创建 superuser <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></li>
<li>为 admin 添加路由<br> 在工程目录中的 <code>urls.py</code> 文件中配置以下内容 <figure class="highlight shell"><figcaption><span>urls.py</span></figcaption><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from .views import index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line">    path(&#x27;&#x27;, index),</span><br><span class="line">    # 项目根 url 既是后台</span><br><span class="line">    # path(&#x27;&#x27;, admin.site.urls),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
如果要在访问项目 <code>/</code> 时，重定向到管理后台，可以在项目的 <code>views.py</code> 文件中添加以下内容，将 <code>/</code> 重定向到 <code>/admin/</code><figure class="highlight shell"><figcaption><span>views.py</span></figcaption><table><tr><td class="code"><pre><span class="line">from django.shortcuts import redirect</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return redirect(&#x27;admin/&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
访问项目 url，此时可以看到登陆后台页面。</li>
</ol>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.djangoproject.com/zh-hans/4.1/intro/tutorial01/#creating-a-project">创建项目</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>docker daemon 常用配置</title>
    <url>/202211241005/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>Docker 19.03.15</li>
</ul>
<h1 id="docker-配置容器日志-rotate"><a href="#docker-配置容器日志-rotate" class="headerlink" title="docker 配置容器日志 rotate"></a>docker 配置容器日志 rotate</h1><h2 id="docker-daemon-方式配置容器日志-rotate"><a href="#docker-daemon-方式配置容器日志-rotate" class="headerlink" title="docker daemon 方式配置容器日志 rotate"></a>docker daemon 方式配置容器日志 rotate</h2><p>编辑 docker daemon 配置文件 <code>/etc/docker/daemon.json</code> (若不存在则新建)，添加以下内容，用来配置 docker containers 的日志轮转</p>
<figure class="highlight shell"><figcaption><span>/etc/docker/daemon.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;,</span><br><span class="line">    &quot;max-file&quot;: &quot;3&quot;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启 docker 服务生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>根据以上配置，当容器日志大小达到 <code>100m</code>，即对其进行 rotate，并保留最多 3 个日志文件。 </p>
<h2 id="使用-OS-系统服务-logrotate-进行容器日志-rotate"><a href="#使用-OS-系统服务-logrotate-进行容器日志-rotate" class="headerlink" title="使用 OS 系统服务 logrotate 进行容器日志 rotate"></a>使用 OS 系统服务 logrotate 进行容器日志 rotate</h2><p>Linux 系统中有专门用来做日志 rotate 的 <a href="!--swig%EF%BF%BC3--">服务 <code>logrotate</code></a>，可直接使用此服务做 log rotate</p>
<p>配置针对 docker 的 <code>logrotate</code> 配置</p>
<figure class="highlight shell"><figcaption><span>/etc/logrotate.d/docker</span></figcaption><table><tr><td class="code"><pre><span class="line">/var/lib/docker/containers/*/*.log &#123;</span><br><span class="line">    daily</span><br><span class="line">    rotate 5</span><br><span class="line">    copytruncate</span><br><span class="line">    missingok</span><br><span class="line">    compress</span><br><span class="line">    delaycompress</span><br><span class="line">    maxsize 100M</span><br><span class="line">    minsize 1024k</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>copytruncate</code> 的方式做日志 totate 时，会先拷贝日志文件为 totate 日志文件，然后 <code>truncate</code> 日志，确保 totate 过程中，日志文件不变并一直保持打开状态。</p>
<span id="more"></span>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 容器中安装常见工具</title>
    <url>/202209051507/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="常用工具安装"><a href="#常用工具安装" class="headerlink" title="常用工具安装"></a>常用工具安装</h1><p>查找 <code>netstat</code> 命令由哪个安装包提供</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum whatprovides /bin/netstat</span></span><br><span class="line">net-tools-2.0-0.25.20131004git.el7.x86_64 : Basic networking tools</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /bin/netstat</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装 <code>net-tools</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install -y net-tools</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>安装 <code>ping</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum whatprovides /bin/ping</span></span><br><span class="line">iputils-20160308-10.el7.x86_64 : Network monitoring tools including ping</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /bin/ping</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-cache search iputils</span></span><br><span class="line">iputils-arping - Tool to send ICMP echo requests to an ARP address</span><br><span class="line">iputils-clockdiff - Measure the time difference between networked computers</span><br><span class="line">iputils-ping - Tools to test the reachability of network hosts</span><br><span class="line">iputils-tracepath - Tools to trace the network path to a remote host</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install -y iputils-ping</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装 <code>ps</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install procps</span><br></pre></td></tr></table></figure>

<p>安装 <code>ip</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum whatprovides /usr/sbin/ip</span></span><br><span class="line">iproute-4.11.0-30.el7.x86_64 : Advanced IP routing and network device configuration tools</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /usr/sbin/ip</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install iproute2</span><br></pre></td></tr></table></figure>

<h2 id="sshd-安装"><a href="#sshd-安装" class="headerlink" title="sshd 安装"></a>sshd 安装</h2><figure class="highlight shell"><figcaption><span>Dcokerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">FROM centos:centos7.9.2009</span><br><span class="line"></span><br><span class="line">RUN yum install -y openssh openssh-server net-tools \</span><br><span class="line">    &amp;&amp; ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N &#x27;&#x27; \</span><br><span class="line">    &amp;&amp; ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N &#x27;&#x27; \</span><br><span class="line">    &amp;&amp; ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key  -N &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">CMD /sbin/sshd -D    </span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>sshd -D</code> : <code>-D</code> 选项使 <code>sshd</code> 进程一直保持在前台运行，否则容器启动会会因为 <code>sshd</code> 运行结束而立即终止</p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker compose 命令</title>
    <url>/202208311004/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>对于 <code>Compose</code> 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。  </p>
<p>执行 <code>docker compose [COMMAND] --help</code>  可以查看具体某个命令的使用格式。  </p>
<p><code>docker compose</code> 命令的基本的使用格式是  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure>
<p>常用选项  </p>
<ul>
<li><code>-f, --file FILE</code>  指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。  </li>
<li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li>
</ul>
<span id="more"></span>

<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>格式为 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose build [options] [SERVICE...]</span><br></pre></td></tr></table></figure>
<p>构建（重新构建）项目中的服务容器。  </p>
<p>服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。<br>可以随时在项目目录下运行 <code>docker compose build</code> 来重新构建服务。<br>常用选项包括：</p>
<ul>
<li><code>--no-cache</code>  构建镜像过程中不使用 cache（这将加长构建过程）。</li>
<li><code>--pull</code>  始终尝试通过 <code>pull</code> 来获取更新版本的镜像。</li>
<li><code>-q, --quiet</code>  不输出任何内容到 STDOUT</li>
</ul>
<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose config</span><br></pre></td></tr></table></figure>
<p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p>
<h3 id="up"><a href="#up" class="headerlink" title="up"></a>up</h3><p>格式为 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose up [options] [SERVICE...]</span><br></pre></td></tr></table></figure>
<p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。  </p>
<p>链接的服务都将会被自动启动，除非已经处于运行状态。</p>
<p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p>
<p>默认情况，<code>docker compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p>
<p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p>
<p>如果使用 <code>docker compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p>
<p>默认情况，如果服务容器已经存在，<code>docker compose up</code> 将会尝试停止容器，然后重新创建（保持使用 volumes-from 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 <code>docker compose up --no-recreate</code>。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 <code>docker compose up --no-deps -d &lt;SERVICE_NAME&gt;</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p>
<p>常用选项说明：  </p>
<ul>
<li><code>-d, --detach</code> 在后台运行服务容器</li>
<li><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出</li>
<li><code>--no-deps</code> 不启动服务所链接的容器。</li>
<li><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用</li>
<li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</li>
<li><code>--no-build</code> 不自动构建缺失的服务镜像</li>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）时间。</li>
<li><code>--no-start</code> 创建服务但是不启动服务</li>
<li><code>--build</code>  启动容器之前，重新构建容器</li>
</ul>
<h3 id="down"><a href="#down" class="headerlink" title="down"></a>down</h3><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p>
<h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>启动已经存在的服务容器。</p>
<h3 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h3><p>暂停一个服务容器。</p>
<h3 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a>unpause</h3><p>恢复处于暂停状态中的服务。</p>
<h3 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h3><p>重启项目中的服务。</p>
<h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker compose start</code> 可以再次启动这些容器。</p>
<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>列出项目中目前的所有容器。</p>
<h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><p>格式为 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose port [options] SERVICE PRIVATE_PORT</span><br></pre></td></tr></table></figure>
<p>打印某个容器端口所映射的公共端口  </p>
<p>常用选项  </p>
<ul>
<li><code>--protocol=proto</code> 指定端口协议，tcp（默认值）或者 udp。</li>
<li><code>--index=index</code> 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）</li>
</ul>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>进入指定的容器。</p>
<h3 id="images"><a href="#images" class="headerlink" title="images"></a>images</h3><p>列出 Compose 文件中包含的镜像。</p>
<h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>格式为 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose kill [options] [SERVICE...]</span><br></pre></td></tr></table></figure>
<p>通过发送 SIGKILL 信号来强制停止服务容器。</p>
<p>支持通过 <code>-s</code> 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose kill -s SIGINT</span><br></pre></td></tr></table></figure>

<h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h3><p>格式为 </p>
<pre><code>docker compose logs [options] [SERVICE...]
</code></pre>
<p>查看服务容器的输出。默认情况下，<code>docker compose</code> 将对不同的服务输出使用不同的颜色来区分。可以通过 <code>--no-color</code> 来关闭颜色。<br>该命令在调试问题的时候十分有用。</p>
<h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>查看各个服务容器内运行的进程。</p>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker compose stop</code> 命令来停止容器。<br>选项：</p>
<ul>
<li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li>
<li><code>-v</code> 删除容器所挂载的数据卷。</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://yeasy.gitbook.io/docker_practice/compose/commands">docker compose 命令说明</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker compose 简介</title>
    <url>/202208301738/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><code>Compose</code> 项目是 <code>Docker</code> 官方的开源项目，负责实现对 <code>Docker 容器集群</code> 的快速编排。</p>
<p><code>Compose</code> 定位是 <strong>「定义和运行多个 <code>Docker</code> 容器的应用（Defining and running multi-container Docker applications）」</strong>，其前身是开源项目 <code>Fig</code>。</p>
<p>使用一个 <a href="/202208050928/" title="Dockerfile">Dockerfile</a> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。  </p>
<p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（<code>YAML</code> 格式）来定义一组相关联的应用容器为一个项目（<code>project</code>）。<br><code>Compose</code> 中有两个重要的概念：</p>
<ul>
<li><code>服务 (service)</code> ： 一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。  </li>
<li><code>项目 (project)</code> ： 由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li>
</ul>
<p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p>
<p><code>Compose</code> 目前分为 2 个大版本： <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[History and development of Docker Compose](https://docs.docker.com/compose/intro/history/)">[1]</span></a></sup></p>
<ul>
<li><code>Compose V1</code> : <strong>目前已经不提供官方支持</strong>。使用 <code>Python</code> 编写，通过 <code>docker-compose</code> 命令来调用。<code>Compose V1</code> 的 <code>docker-compose.yml</code> 最开始要包含 <code>version</code> 命令，取值范围 <code>2.0</code> 到 <code>3.8</code></li>
<li><code>Compose V2</code> : 使用 <code>Go</code> 编写，通过 <code>docker compose</code> 命令来调用。<code>Compose V2</code> 忽略 <code>docker-compose.yml</code>  最开始的 <code>version</code> 指令。<code>Compose V2</code> 向后兼容 <code>Compose V1</code> 版本</li>
</ul>
<span id="more"></span>
<h1 id="Compose-v2"><a href="#Compose-v2" class="headerlink" title="Compose v2"></a>Compose v2</h1><p>目前 <code>Docker</code> 官方用 <code>GO 语言</code> 重写 了 <code>Docker Compose</code>，并将其作为了 <code>docker cli</code> 的子命令，称为 <code>Compose V2</code>。你可以参照官方文档安装，然后将熟悉的 <code>docker-compose</code> 命令替换为 <a href="/202208311004/" title="docker compose">docker compose</a>，即可使用 <code>Docker Compose</code>。</p>
<h1 id="Compose-模板文件"><a href="#Compose-模板文件" class="headerlink" title="Compose 模板文件"></a>Compose 模板文件</h1><p>模板文件是使用 Compose 的核心，里面大部分指令跟 <code>docker run</code> 相关参数的含义类似。  </p>
<p><code>Compose V2</code> 默认的模板文件名是 <code>compose.yaml</code> 或者 <code>compose.yml</code>，为了向后兼容，也支持 <code>docker-compose.yaml</code> 和 <code>docker-compose.yml</code>。<strong>如果同时存在这些文件，<code>Compose</code> 优先使用 <code>compose.yaml</code></strong></p>
<p>默认的模板文件名称为 <code>compose.yaml</code>，格式为 YAML 格式。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  webapp:</span><br><span class="line">    image: examples/web</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/data&quot;</span><br></pre></td></tr></table></figure>

<p>每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 <a href="/202208050928/" title="Dockerfile">Dockerfile</a>）等来自动构建生成镜像。  </p>
<p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置。</p>
<p>下面分别介绍各个指令的用法。</p>
<h1 id="compose-yaml-中的常用指令"><a href="#compose-yaml-中的常用指令" class="headerlink" title="compose.yaml 中的常用指令"></a>compose.yaml 中的常用指令</h1><h2 id="name"><a href="#name" class="headerlink" title="name"></a>name</h2><p><code>name</code> 指令用于明确的指定项目名称（Project Name）</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">name: test_project</span><br><span class="line"></span><br><span class="line">include:</span><br><span class="line">   - infra.yaml</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8000:5000&quot;</span><br></pre></td></tr></table></figure>
<h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>在编排规模较大（如几十台 Docker 容器）的服务时，为了方便管理和易于维护，可以考虑将 <code>compose.yaml</code> 分割为多个文件。 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Split up your services](https://docs.docker.com/compose/gettingstarted/#step-7-split-up-your-services)">[2]</span></a></sup></p>
<p>在 <code>compose.yaml</code> 文件中，使用 <code>include</code> 指令来添加其他配置</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">include:</span><br><span class="line">   - infra.yaml</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8000:5000&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在 <code>infra.yaml</code> 文件中定义其他服务</p>
<figure class="highlight shell"><figcaption><span>infra.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:alpine&quot;</span><br></pre></td></tr></table></figure>

<h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 <code>compose.yaml</code> 文件的路径）。 Compose 将会利用它自动构建这个镜像，然后使用这个镜像。  </p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  webapp:</span><br><span class="line">    build: ./dir</span><br></pre></td></tr></table></figure>
<p>也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。<br>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。<br>使用 <code>arg</code> 指令指定构建镜像时的变量。  </p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  webapp:</span><br><span class="line">    build:</span><br><span class="line">      context: ./dir</span><br><span class="line">      dockerfile: Dockerfile-alternate</span><br><span class="line">      args:</span><br><span class="line">        buildno: 1</span><br></pre></td></tr></table></figure>

<h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">image: ubuntu</span><br><span class="line">image: orchardup/postgresql</span><br><span class="line">image: a4bc65fd</span><br></pre></td></tr></table></figure>

<h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><p>覆盖容器启动后默认执行的命令，支持 shell 和列表格式 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[command](https://docs.docker.com/compose/compose-file/05-services/#command)">[5]</span></a></sup> </p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">command: bundle exec thin -p 3000</span><br><span class="line"></span><br><span class="line">command: [ &quot;bundle&quot;, &quot;exec&quot;, &quot;thin&quot;, &quot;-p&quot;, &quot;3000&quot; ]</span><br></pre></td></tr></table></figure>

<h2 id="entrypoint"><a href="#entrypoint" class="headerlink" title="entrypoint"></a>entrypoint</h2><p>指定服务容器启动后执行的入口文件。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">entrypoint: /code/entrypoint.sh</span><br></pre></td></tr></table></figure>

<h2 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h2><p>指定容器名称。默认将会使用 项目名称_服务名称_序号 这样的格式。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">container_name: docker-web-container</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</strong></p>
</blockquote>
<h2 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h2><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code> <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[depends_on](https://docs.docker.com/compose/compose-file/05-services/#depends_on)">[4]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line"></span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>web</code> 服务会等待 <code>redis</code> <code>db</code> 处于 <code>ready</code> 之后才启动。</p>
</blockquote>
<p>基于条件的依赖 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[depends_on](https://docs.docker.com/compose/compose-file/05-services/#depends_on)">[4]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    depends_on:</span><br><span class="line">      db:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">        restart: true</span><br><span class="line">      redis:</span><br><span class="line">        condition: service_started</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br></pre></td></tr></table></figure>

<h2 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h2><p>自定义 DNS 服务器。可以是一个值，也可以是一个列表。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">dns: 8.8.8.8</span><br><span class="line"></span><br><span class="line">dns:</span><br><span class="line">  - 8.8.8.8</span><br><span class="line">  - 114.114.114.114</span><br></pre></td></tr></table></figure>

<h2 id="dns-search"><a href="#dns-search" class="headerlink" title="dns_search"></a>dns_search</h2><p>配置 DNS 搜索域。可以是一个值，也可以是一个列表。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">dns_search: example.com</span><br><span class="line"></span><br><span class="line">dns_search:</span><br><span class="line">  - domain1.example.com</span><br><span class="line">  - domain2.example.com</span><br></pre></td></tr></table></figure>

<h2 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h2><p>类似 Docker 中的 <code>--add-host</code> 参数，指定额外的 host 名称映射信息。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">extra_hosts:</span><br><span class="line"> - &quot;googledns:8.8.8.8&quot;</span><br><span class="line"> - &quot;dockerhub:52.1.157.61&quot;</span><br></pre></td></tr></table></figure>
<p>会在启动后的服务容器中 <code>/etc/hosts</code> 文件中添加如下两条条目</p>
<figure class="highlight shell"><figcaption><span>/etc/hosts</span></figcaption><table><tr><td class="code"><pre><span class="line">8.8.8.8 googledns</span><br><span class="line">52.1.157.61 dockerhub</span><br></pre></td></tr></table></figure>

<h2 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h2><p>设置环境变量。可以使用数组或字典两种格式  </p>
<p>只给定名称的变量（<strong>没有赋值</strong>）会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。<em><strong>如果系统上没有此变量，Compose 不会警告或错误</strong></em>  </p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">environment:</span><br><span class="line">  RACK_ENV: development</span><br><span class="line">  SESSION_SECRET:</span><br><span class="line"></span><br><span class="line">environment:</span><br><span class="line">  - RACK_ENV=development</span><br><span class="line">  - SESSION_SECRET</span><br></pre></td></tr></table></figure>

<p>如果变量名称或者值中用到 <code>true</code>|<code>false</code>，<code>yes</code>|<code>no</code> 等表达 布尔 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF</span><br></pre></td></tr></table></figure>

<h2 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a>env_file</h2><p><em><strong><code>.env</code> 文件是 <code>Compose</code> 获取环境变量的默认方式</strong></em>。<code>.env</code> 文件应该和 <code>compose.yaml</code> 文件在同一位置。 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Ways to set environment variables with Compose](https://docs.docker.com/compose/environment-variables/set-environment-variables/)">[3]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> .<span class="built_in">env</span></span></span><br><span class="line">TAG=v1.5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> compose.yml</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: &quot;webapp:$&#123;TAG&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>当执行 <code>docker compose up</code> 时，<code>Service</code> 中使用的环境变量会自动插入 <code>.env</code> 中定义的值。</p>
<p><strong>自 <code>Docker Compose version 2.24.0</code> 版本起，也可以使用指令 <code>env_file</code> 指定 <code>.env</code> 文件或其他环境变量配置文件</strong></p>
<p><em><strong>如果 <code>env_file</code> 列表中指定的变量有重复，那么最后定义的值生效（高优先级）</strong></em></p>
<p>如果通过 <code>docker compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p>
<p><strong>如果 <code>.env</code> 文件不在 <code>compose.yaml</code> 所在的位置，可以使用 <code>docker compose</code> 选项 <code>--env-file</code> 来指定</strong></p>
<p>如果有变量名称与 <a href="#environment"><code>environment</code></a> 指令冲突，则按照惯例，以 <code>environment</code> 为准。</p>
<p><em><strong>如果使用了宿主系统 <code>shell</code> 中的变量，则其会覆盖 <code>.env</code> 文件或者 <code>environment</code> 中配置的变量值</strong></em></p>
<p><a href="https://docs.docker.com/compose/environment-variables/envvars-precedence/">Docker Compose 中环境变量优先级顺序</a></p>
<p>如果在 <code>env_file</code> 指令中配置了 <code>required</code> 为 <code>false</code>，那么当环境变量文件不存在时，Compose 自动忽略此配置条目。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">env_file: .env</span><br><span class="line"></span><br><span class="line">env_file:</span><br><span class="line">  - ./common.env</span><br><span class="line">  - ./apps/web.env</span><br><span class="line">  - /opt/secrets.env</span><br><span class="line">  </span><br><span class="line">env_file:</span><br><span class="line">  - path: ./default.env</span><br><span class="line">    required: true # default</span><br><span class="line">  - path: ./override.env</span><br><span class="line">    required: false  </span><br></pre></td></tr></table></figure>


<p>环境变量文件中每一行必须符合格式，支持 # 开头的注释行。</p>
<figure class="highlight shell"><figcaption><span>.env</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">common.env: Set development environment</span></span><br><span class="line">PROG_ENV=development</span><br></pre></td></tr></table></figure>

<p><code>environment</code> 指令也可以使用 <code>.env</code> 中的变量，假如 <code>.env</code> 中包含了 <code>DEBUG=1</code>，那么可以在 <code>environment</code> 指令中引用它：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  webapp:</span><br><span class="line">    image: my-webapp-image</span><br><span class="line">    environment:</span><br><span class="line">      - DEBUG=$&#123;DEBUG&#125;</span><br></pre></td></tr></table></figure>

<h2 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h2><p>暴露端口，但不映射到宿主机，只被连接的服务访问。<br>仅可以指定内部端口为参数</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">expose:</span><br><span class="line"> - &quot;3000&quot;</span><br><span class="line"> - &quot;8000&quot;</span><br></pre></td></tr></table></figure>

<h2 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a>healthcheck</h2><p>通过命令检查容器是否健康运行</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">healthcheck:</span><br><span class="line">  test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;]</span><br><span class="line">  interval: 1m30s</span><br><span class="line">  timeout: 10s</span><br><span class="line">  retries: 3</span><br></pre></td></tr></table></figure>

<h2 id="labels"><a href="#labels" class="headerlink" title="labels"></a>labels</h2><p>为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">labels:</span><br><span class="line">  com.startupteam.description: &quot;webapp for a startup team&quot;</span><br><span class="line">  com.startupteam.department: &quot;devops department&quot;</span><br><span class="line">  com.startupteam.release: &quot;rc3 for v1.0&quot;</span><br></pre></td></tr></table></figure>

<h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><p>配置日志选项。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  driver: syslog</span><br><span class="line">  options:</span><br><span class="line">    syslog-address: &quot;tcp://192.168.0.42:123&quot;</span><br></pre></td></tr></table></figure>
<p>目前支持三种日志驱动类型。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">driver: &quot;json-file&quot;</span><br><span class="line">driver: &quot;syslog&quot;</span><br><span class="line">driver: &quot;none&quot;</span><br></pre></td></tr></table></figure>
<p>options 配置日志驱动的相关参数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">options:</span><br><span class="line">  max-size: &quot;200k&quot;</span><br><span class="line">  max-file: &quot;10&quot;</span><br></pre></td></tr></table></figure>

<h2 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h2><p>配置容器连接的网络。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  some-service:</span><br><span class="line">    networks:</span><br><span class="line">     - some-network</span><br><span class="line">     - other-network</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  some-network:</span><br><span class="line">  other-network:</span><br></pre></td></tr></table></figure>

<h2 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h2><p>暴露端口信息。<br>使用 <code>宿主端口：容器端口 (HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">ports:</span><br><span class="line"> - &quot;3000&quot;</span><br><span class="line"> - &quot;8000:8000&quot;</span><br><span class="line"> - &quot;49100:22&quot;</span><br><span class="line"> - &quot;127.0.0.1:8001:8001&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</p>
</blockquote>
<h2 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a>sysctls</h2><p>配置容器内核参数。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">sysctls:</span><br><span class="line">  net.core.somaxconn: 1024</span><br><span class="line">  net.ipv4.tcp_syncookies: 0</span><br><span class="line"></span><br><span class="line">sysctls:</span><br><span class="line">  - net.core.somaxconn=1024</span><br><span class="line">  - net.ipv4.tcp_syncookies=0</span><br></pre></td></tr></table></figure>

<h2 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a>ulimits</h2><p>指定容器的 <code>ulimits</code> 限制值。<br>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">ulimits:</span><br><span class="line">  nproc: 65535</span><br><span class="line">  nofile:</span><br><span class="line">    soft: 20000</span><br><span class="line">    hard: 40000</span><br></pre></td></tr></table></figure>

<h2 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h2><p>数据卷所挂载路径设置。可以设置为宿主机路径 (<code>HOST:CONTAINER</code>) 或者数据卷名称( <code>VOLUME:CONTAINER</code> )，并且可以设置访问模式 （ <code>HOST:CONTAINER:ro</code> ）。<br>该指令中路径支持相对路径。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">volumes:</span><br><span class="line"> - /var/lib/mysql</span><br><span class="line"> - cache/:/tmp/cache</span><br><span class="line"> - ~/configs:/etc/configs/:ro</span><br></pre></td></tr></table></figure>
<p>如果路径为数据卷名称，必须在文件中配置数据卷。</p>
<figure class="highlight shell"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  my_src:</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    volumes:</span><br><span class="line">      - mysql_data:/var/lib/mysql</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  mysql_data:  </span><br></pre></td></tr></table></figure>

<h3 id="将本地目录配置为-valume"><a href="#将本地目录配置为-valume" class="headerlink" title="将本地目录配置为 valume"></a>将本地目录配置为 valume</h3><p>指定本地目录配置为 volume，然后在容器中挂载 volume，参考以下配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  nextcloud_aio_mastercontainer:</span><br><span class="line">    name: nextcloud_aio_mastercontainer</span><br><span class="line">    driver: local</span><br><span class="line">    driver_opts:</span><br><span class="line">      type: none</span><br><span class="line">      o: bind</span><br><span class="line">      device: /path/to/local/directory</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>name</code></td>
<td>指定 Volume 名称。<br/>默认会使用 <code>&lt;项目名&gt;_&lt;卷名称&gt;</code>。如上面示例中默认为 <code>nextcloud_nextcloud_aio_mastercontainer</code></td>
<td></td>
</tr>
<tr>
<td><code>nextcloud_aio_mastercontainer</code></td>
<td>volume 名，可以自定义</td>
<td></td>
</tr>
<tr>
<td><code>driver</code></td>
<td>volume 驱动类型。<br/><code>local</code>： 使用本地目录</td>
<td></td>
</tr>
<tr>
<td><code>driver_opts</code></td>
<td>指定特定驱动程序的选项.<br/><code>type: none</code> 表示该 volume 类型是无类型的<br/><code>o: bind</code> 含义是使用 <code>bind mount</code>（绑定挂载）,指定将卷绑定到主机上特定目录<br/><code>device: /path/to/local/directory</code> 指定了本地目录作为挂载点。</td>
<td></td>
</tr>
</tbody></table>
<p>使用以上配置后，docker 会首先创建一个 volume，然后根据配置将其挂载到容器中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker volume <span class="built_in">ls</span></span> </span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     nextcloud_aio_mastercontainer</span><br></pre></td></tr></table></figure>


<h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><p>指定容器中运行应用的用户名。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">user: nginx</span><br></pre></td></tr></table></figure>
<h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><p>指定容器中主机名</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">hostname: test</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="working-dir"><a href="#working-dir" class="headerlink" title="working_dir"></a>working_dir</h2><p>指定容器中工作目录。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">working_dir: /code</span><br></pre></td></tr></table></figure>

<h2 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h2><p>指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 <code>always</code> 或者 <code>unless-stopped</code>。  </p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">restart: always</span><br></pre></td></tr></table></figure>

<h2 id="read-only"><a href="#read-only" class="headerlink" title="read_only"></a>read_only</h2><p>以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。</p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">read_only: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="读取变量"><a href="#读取变量" class="headerlink" title="读取变量"></a>读取变量</h2><p>Compose 模板文件支持动态读取主机的系统环境变量和当前目录下的 <code>.env</code> 文件中的变量。  </p>
<p>例如，下面的 Compose 文件将从运行它的环境中读取变量 ${MONGO_VERSION} 的值，并写入执行的指令中。 </p>
<figure class="highlight shell"><figcaption><span>compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">db:</span><br><span class="line">  image: &quot;mongo:$&#123;MONGO_VERSION&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>如果执行 <code>MONGO_VERSION=3.2 ; docker compose up</code> 则会启动一个 <code>mongo:3.2</code> 镜像的容器；<br>如果执行 <code>MONGO_VERSION=2.8 ; docker compose up</code> 则会启动一个 <code>mongo:2.8</code> 镜像的容器  </p>
<p>若当前目录存在 <code>.env</code> 文件，执行 <code>docker compose</code> 命令时将从该文件中读取变量。  </p>
<p>在当前目录新建 <code>.env</code> 文件并写入以下内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 支持 # 号注释</span><br><span class="line">MONGO_VERSION=3.6</span><br></pre></td></tr></table></figure>
<p>执行 <code>docker compose up</code> 则会启动一个 <code>mongo:3.6</code> 镜像的容器。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.docker.com/compose/">Compose V2 beta</a><br><a href="https://yeasy.gitbook.io/docker_practice/compose/v2">Docker 从入门到实践</a><br><a href="https://docs.docker.com/compose/compose-file/05-services/">Docker Compose 指令官方文档</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.docker.com/compose/intro/history/">History and development of Docker Compose</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.docker.com/compose/gettingstarted/#step-7-split-up-your-services">Split up your services</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.docker.com/compose/environment-variables/set-environment-variables/">Ways to set environment variables with Compose</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.docker.com/compose/compose-file/05-services/#depends_on">depends_on</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.docker.com/compose/compose-file/05-services/#command">command</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker compose 配置 django mysql 站点</title>
    <url>/202209051137/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文主要记录使用 <code>docker compose</code> 配置 Django + Mysql 的 web 站点的过程。</p>
<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos7</li>
<li>Docker version 20.10.17</li>
</ul>
<h3 id="目录结构及说明"><a href="#目录结构及说明" class="headerlink" title="目录结构及说明"></a>目录结构及说明</h3><p>项目目录结构及简要说明如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── compose</span><br><span class="line">│   └── mysql</span><br><span class="line">│       └── my.cnf</span><br><span class="line">├── django_project</span><br><span class="line">│   ├── db.sqlite3</span><br><span class="line">│   ├── django_app</span><br><span class="line">│   │   ├── admin.py</span><br><span class="line">│   │   ├── apps.py</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── migrations</span><br><span class="line">│   │   ├── models.py</span><br><span class="line">│   │   ├── tests.py</span><br><span class="line">│   │   └── views.py</span><br><span class="line">│   ├── django_project</span><br><span class="line">│   │   ├── asgi.py</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── __pycache__</span><br><span class="line">│   │   ├── settings.py</span><br><span class="line">│   │   ├── urls.py</span><br><span class="line">│   │   └── wsgi.py</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   ├── manage.py</span><br><span class="line">│   └── requirements.txt</span><br><span class="line">├── docker-compose.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><code>compose</code> : 存放应用配置文件，如 mysql 配置文件 <code>compose/mysql/my.cnf</code></li>
<li><code>django_project</code> : Django project 项目目录， <code>django-admin startproject django_project</code> 生成</li>
<li><code>django_project/django_app</code> : Django project 项目下的 app 目录，<code>django-admin startapp django_app</code> 生成</li>
<li><code>docker-compose.yml</code> : 项目的 compose 文件</li>
</ul>
<span id="more"></span>

<h3 id="编写-django-运行镜像的-Dockerfile"><a href="#编写-django-运行镜像的-Dockerfile" class="headerlink" title="编写 django 运行镜像的 Dockerfile"></a>编写 django 运行镜像的 Dockerfile</h3><p>编写构建 django 镜像的 Dockerfile，文件位置 <code>django_project/Dockerfile</code></p>
<figure class="highlight shell"><figcaption><span>django_project/Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">FROM python:3.10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将上下文环境中(django_project/)的 requirements.txt 拷贝到镜像的 /code 目录</span></span><br><span class="line">COPY requirements.txt /code/</span><br><span class="line"></span><br><span class="line">WORKDIR /code/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 python 项目依赖</span></span><br><span class="line">RUN pip install -r requirements.txt &amp;&amp; rm -rf requirements.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决 django 无法加载 MySQLdb 模块的问题</span></span><br><span class="line">RUN echo &quot;import pymysql&quot; &gt; /usr/local/lib/python3.10/site-packages/django/db/backends/mysql/__init__.py &amp;&amp; \</span><br><span class="line">    echo &quot;pymysql.install_as_MySQLdb()&quot; &gt;&gt; /usr/local/lib/python3.10/site-packages/django/db/backends/mysql/__init__.py</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装常用工具，方便容器启动后的调试</span></span><br><span class="line">RUN apt-get update &amp;&amp; apt install -y netcat &amp;&amp; apt install -y vim &amp;&amp; \</span><br><span class="line">    apt-get install -y iputils-ping &amp;&amp; \</span><br><span class="line">    apt-get install -y net-tools</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">健康检查，环境变量 <span class="variable">$&#123;DJANGO_SERVER_PORT&#125;</span> 来自 docker-compose.yml 文件</span></span><br><span class="line">HEALTHCHECK CMD curl -fs http://localhost:$&#123;DJANGO_SERVER_PORT&#125;/ || exit 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>构建镜像时，只将构建镜像所需的文件（<code>requirements.txt</code>）拷贝进镜像，使用完成后删除，容器运行时需要的代码文件，通过 <code>docker-compose.yml</code> 中的 <code>volumes</code> 命令进行挂载，这样更新代码时，只需要在宿主机上面更新代码，不用再对镜像进行变更，只有需要更新运行环境时才需要更新镜像  </p>
<p>django 镜像构建文件的 <code>Dockerfile</code> 中先不写 <code>CMD</code> 或者 <code>ENTRYPOINT</code> 启动 web 服务器，因为数据库还没启动，配置 <code>CMD</code> 启动 django 服务会报错（无法连接数据库）</p>
<p>修改 django 工程配置文件 <code>django_project/django_project/settings.py</code>，提前配置好 mysql 配置：</p>
<figure class="highlight shell"><figcaption><span>django_project/django_project/settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,</span><br><span class="line">        # 此处 &#x27;HOST&#x27; 配置的主机地址，要和 docker-compose.yml 中配置的 mysql 服务名称一致</span><br><span class="line">        &#x27;HOST&#x27;: &quot;db&quot;,</span><br><span class="line">        &#x27;NAME&#x27;: &quot;ops&quot;,</span><br><span class="line">        &#x27;USER&#x27;: &quot;root&quot;,</span><br><span class="line">        &quot;PASSWORD&quot;: &quot;123456&quot;,</span><br><span class="line">        &quot;PORT&quot;: &#x27;3306&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写项目的-docker-compose-yml"><a href="#编写项目的-docker-compose-yml" class="headerlink" title="编写项目的 docker-compose.yml"></a>编写项目的 docker-compose.yml</h3><p>项目的 <code>docker-compose.yml</code> 文件内容及说明如下</p>
<figure class="highlight shell"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  mysql_data_vol:   # mysql datadir 需要挂载的数据卷</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  django_network:    # 本项目使用的 network ，方便项目中的服务容器之间互相通信，直接使用服务名</span><br><span class="line">    </span><br><span class="line">services:</span><br><span class="line">  db:   #  mysql 服务名</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    env_file:</span><br><span class="line">      - .env   # 服务要加载的环境变量文件，路径为相对于 docker-compose.yml 的路径</span><br><span class="line">    networks:</span><br><span class="line">      - django_network</span><br><span class="line">    volumes:</span><br><span class="line">      - mysql_data_vol:/var/lib/mysql:rw</span><br><span class="line">      - ./compose/mysql/my.cnf:/etc/my.cnf</span><br><span class="line"></span><br><span class="line">    ports:</span><br><span class="line">        - &quot;3307:3306&quot;</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  django_server:</span><br><span class="line">    build: ./django_project/      # 使用 ./django_project/Dockerfile 构建镜像</span><br><span class="line">    env_file:</span><br><span class="line">      - .env  # 加载环境变量，其中的变量可以在 docker-compose.yml 和 Dockerfile 中使用</span><br><span class="line">      </span><br><span class="line">    volumes:</span><br><span class="line">      - ./django_project/：/code/</span><br><span class="line">    # command ： 容器要运行的命令</span><br><span class="line">    command: python manage.py runserver 0.0.0.0:$&#123;DJANGO_SERVER_PORT&#125;</span><br><span class="line">    networks:</span><br><span class="line">      - django_network</span><br><span class="line">    ports:</span><br><span class="line">      - &#x27;$&#123;DJANGO_SERVER_PORT&#125;:$&#123;DJANGO_SERVER_PORT&#125;&#x27;</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure>

<p>其中使用的 <code>.env</code> 文件内容如下：</p>
<figure class="highlight shell"><figcaption><span>.env</span></figcaption><table><tr><td class="code"><pre><span class="line">MYSQL_ROOT_PASSWORD=123456</span><br><span class="line"></span><br><span class="line">DJANGO_SERVER_PORT=8081</span><br></pre></td></tr></table></figure>

<h3 id="启动-docker-compose-项目"><a href="#启动-docker-compose-项目" class="headerlink" title="启动 docker compose 项目"></a>启动 docker compose 项目</h3><p>使用 <code>docker compose build</code> 之前，可以先检查一下配置，确保配置无误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose config</span></span><br><span class="line">name: dockerproject</span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    environment:</span><br><span class="line">      DJANGO_SERVER_PORT: &quot;8081&quot;</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    networks:</span><br><span class="line">      django_network: null</span><br><span class="line">    ports:</span><br><span class="line">    - mode: ingress</span><br><span class="line">      target: 3306</span><br><span class="line">      published: &quot;3307&quot;</span><br><span class="line">      protocol: tcp</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">    - type: volume</span><br><span class="line">      source: mysql_data_vol</span><br><span class="line">      target: /var/lib/mysql</span><br><span class="line">      volume: &#123;&#125;</span><br><span class="line">    - type: bind</span><br><span class="line">      source: /root/dockerProject/compose/mysql/my.cnf</span><br><span class="line">      target: /etc/my.cnf</span><br><span class="line">      bind:</span><br><span class="line">        create_host_path: true</span><br><span class="line">  django_server:</span><br><span class="line">    build:</span><br><span class="line">      context: /root/dockerProject/django_project</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    command:</span><br><span class="line">    - python</span><br><span class="line">    - manage.py</span><br><span class="line">    - runserver</span><br><span class="line">    - 0.0.0.0:8081</span><br><span class="line">    depends_on:</span><br><span class="line">      db:</span><br><span class="line">        condition: service_started</span><br><span class="line">    environment:</span><br><span class="line">      DJANGO_SERVER_PORT: &quot;8081&quot;</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">    networks:</span><br><span class="line">      django_network: null</span><br><span class="line">    ports:</span><br><span class="line">    - mode: ingress</span><br><span class="line">      target: 8081</span><br><span class="line">      published: &quot;8081&quot;</span><br><span class="line">      protocol: tcp</span><br><span class="line">    restart: always</span><br><span class="line">networks:</span><br><span class="line">  django_network:</span><br><span class="line">    name: dockerproject_django_network</span><br><span class="line">volumes:</span><br><span class="line">  mysql_data_vol:</span><br><span class="line">    name: dockerproject_mysql_data_vol</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置无误，<code>docker compose config</code> 命令会输出配置，有错误会显示错误，<a href="/202208311004/" title="docker compose 其他常用命令参考">docker compose 其他常用命令参考</a></p>
<p>使用 <code>docker compose build</code> 命令构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose build</span></span><br><span class="line">[+] Building 0.1s (11/11) FINISHED                                                                                   </span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                                            0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 32B                                                                             0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                                               0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                                                                 0.0s</span><br><span class="line"> =&gt; [internal] load metadata for docker.io/library/python:3.10                                                  0.0s</span><br><span class="line"> =&gt; [internal] load build context                                                                               0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 982B                                                                               0.0s</span><br><span class="line"> =&gt; [1/6] FROM docker.io/library/python:3.10                                                                    0.0s</span><br><span class="line"> =&gt; CACHED [2/6] COPY . /code                                                                                   0.0s</span><br><span class="line"> =&gt; CACHED [3/6] WORKDIR /code                                                                                  0.0s</span><br><span class="line"> =&gt; CACHED [4/6] RUN pip install -r requirements.txt                                                            0.0s</span><br><span class="line"> =&gt; CACHED [5/6] RUN echo &quot;import pymysql&quot; &gt; /usr/local/lib/python3.10/site-packages/django/db/backends/mysql/  0.0s</span><br><span class="line"> =&gt; CACHED [6/6] RUN apt-get update &amp;&amp; apt install -y netcat &amp;&amp; apt install -y vim                              0.0s</span><br><span class="line"> =&gt; exporting to image                                                                                          0.0s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                                                         0.0s</span><br><span class="line"> =&gt; =&gt; writing image sha256:9da868de3de9538931f9d60a7fd40d6197c332f4aadc03c8b8ca8446df7cee23                    0.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/dockerproject_django_server                                                  0.0s</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>也可以直接使用 <code>docker compose up</code>（会先构建镜像，然后启动项目中的所有服务）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose up</span></span><br><span class="line">[+] Running 3/2</span><br><span class="line"> ⠿ Network dockerproject_django_network     Created                                                             0.1s</span><br><span class="line"> ⠿ Container dockerproject-db-1             Created                                                             0.0s</span><br><span class="line"> ⠿ Container dockerproject-django_server-1  Created                                                             0.0s</span><br><span class="line">Attaching to dockerproject-db-1, dockerproject-django_server-1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看 compose 项目的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose <span class="built_in">ls</span></span></span><br><span class="line">NAME                STATUS              CONFIG FILES</span><br><span class="line">dockerproject       running(2)          /root/dockerProject/docker-compose.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看 compose 项目中的容器情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose ps</span></span><br><span class="line">NAME                            COMMAND                  SERVICE             STATUS              PORTS</span><br><span class="line">dockerproject-db-1              &quot;docker-entrypoint.s…&quot;   db                  running             0.0.0.0:3307-&gt;3306/tcp, :::3307-&gt;3306/tcp</span><br><span class="line">dockerproject-django_server-1   &quot;python manage.py ru…&quot;   django_server       running (healthy)   0.0.0.0:8081-&gt;8081/tcp, :::8081-&gt;8081/tcp</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看 compose 项目中的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose images</span></span><br><span class="line">Container                       Repository                    Tag                 Image Id            Size</span><br><span class="line">dockerproject-db-1              mysql                         5.7                 daff57b7d2d1        430MB</span><br><span class="line">dockerproject-django_server-1   dockerproject_django_server   latest              9da868de3de9        1.02GB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://csms.tech/categories/Docker/">docker compose 说明</a><br><a href="https://csms.tech/202208311004/">docker compose 常用命令</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>compose</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 私有镜像仓库 Harbor 安装及使用</title>
    <url>/202210191515/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ul>
<li>Centos 7</li>
<li>docker-ce-19.03.15</li>
<li>harbor v2.6.1</li>
</ul>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p><a href="https://goharbor.io/docs/2.6.0/install-config/">官网安装参考链接</a></p>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.6.1/harbor-offline-installer-v2.6.1.tgz</span><br><span class="line">tar -xf harbor-offline-installer-v2.6.1.tgz</span><br><span class="line">cd harbor</span><br></pre></td></tr></table></figure>

<h3 id="准备证书"><a href="#准备证书" class="headerlink" title="准备证书"></a>准备证书</h3><p>将申请好的证书上传到服务器，将 <code>harbor.crt</code> 转换为 <code>harbor.cert</code>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl x509 -inform PEM -in harbor.crt -out harbor.cert </span><br></pre></td></tr></table></figure>

<p>将转换好的证书和私钥拷贝到 Docker 的证书目录 <code>/etc/docker/certs.d/yourdomain.com/</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp yourdomain.com.cert /etc/docker/certs.d/yourdomain.com/</span><br><span class="line">cp yourdomain.com.key /etc/docker/certs.d/yourdomain.com/</span><br><span class="line">cp ca.crt /etc/docker/certs.d/yourdomain.com/</span><br></pre></td></tr></table></figure>

<p>重启 Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="配置-Harbor-安装配置文件"><a href="#配置-Harbor-安装配置文件" class="headerlink" title="配置 Harbor 安装配置文件"></a>配置 Harbor 安装配置文件</h3><p>执行 <code>install.sh</code> 命令安装 Harbor 时，会使用配置文件 <code>harbor.yml</code>（需要拷贝安装包中的 <code>harbor.yml.tmpl</code> 为 <code>harbor.yml</code>）。</p>
<p>修改配置中的 <code>hostname</code> 选项，配置访问 Harbor 的域名。<strong>此为必须修改的参数</strong>。</p>
<p>修改配置中的 <code>https.certificate</code> 和 <code>https.private_key</code>，配置证书（<code>harbor.crt</code>）和私钥的路径，<strong>使用 HTTPS 时必须配置</strong>。</p>
<p>修改配置中的 <code>data_volume</code>，指定持久化数据卷的路径。默认为 <code>data_volume: /data</code></p>
<span id="more"></span>
<h3 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure>

<p>安装成功后，使用浏览器登陆 WEB，初始密码为部署配置文件中配置，默认为 <code>Harbor12345</code></p>
<figure class="highlight shell"><figcaption><span>harbor.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">harbor_admin_password: Harbor12345</span><br></pre></td></tr></table></figure>

<p>执行安装脚本部署完成后，会生产 <code>docker-compose.yml</code> 文件，此文件为 Docker 编排 Harbor 的配置文件。使用 <code>docker</code> 重启 Harbor 命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<a href="/202208311004/" title="更多 docker compose 命令说明">更多 docker compose 命令说明</a>

<h2 id="常用操作说明"><a href="#常用操作说明" class="headerlink" title="常用操作说明"></a>常用操作说明</h2><p>根据安装脚本生成的 <code>docker-compose.yml</code> ，可以看到各个服务的配置</p>
<ul>
<li>日志路径： <code>/var/log/harbor/</code>。各个服务的日志输出到了宿主机的目录 ： <code>/var/log/harbor/</code></li>
<li><code>registry</code> 服务使用本地存储时，默认路径为 ： <code>/data/registry</code></li>
<li><code>postgresql</code> 数据库目录 ： <code>/data/database</code></li>
</ul>
<h3 id="使用-docker-登陆并-push-镜像"><a href="#使用-docker-登陆并-push-镜像" class="headerlink" title="使用 docker 登陆并 push 镜像"></a>使用 docker 登陆并 push 镜像</h3><p>登陆 Harbor</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker login harbor.xxx.com</span></span><br><span class="line">sername: admin</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>push</code> 镜像步骤</p>
<ol>
<li>为要推送的镜像打上标签，其中 <code>common</code> 为项目名称 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag netshoot:my harbor.xxx.com/common/netshoot:my</span><br></pre></td></tr></table></figure></li>
<li><code>push</code> 镜像 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push harbor.8be939d.com/common/netshoot:my</span><br></pre></td></tr></table></figure></li>
<li>Harbor potal 中检查推送是否成功<br> <img src="https://i.csms.tech/img_64.png"></li>
</ol>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>除了系统管理员 <code>admin</code>（拥有最大权限），Harbor 用户分还有以下几种角色<br><img src="https://i.csms.tech/img_72.png"></p>
<ul>
<li><p><code>Project Admin</code></p>
<p>  当系统管理员（<code>admin</code>）给某个用户 <code>项目管理员</code> 的角色后，该用户即可以 <code>项目管理员</code> 的身份管理该项目，其它未分配的项目无权限，<code>项目管理员</code> 有 <strong>镜像上传&#x2F;拉取</strong>、<strong>添加&#x2F;删除成员</strong>、<strong>Helm Chart 上传&#x2F;下载</strong>、<strong>配置管理</strong> 等权限。该角色在实际的业务场景通常是分配给某个项目的负责人。</p>
</li>
<li><p><code>Maintainer</code></p>
<p>  <code>维护者</code> 拥有超越<code>开发者</code> 的权限，包括 <strong>扫描镜像</strong>、<strong>查看复制任务</strong> 以及 <strong>删除镜像</strong> 和 <strong>Helm Chart上传&#x2F;下载、删除</strong> 的能力。</p>
</li>
<li><p><code>Developer</code></p>
<p>  <code>开发者</code> 拥有项目的读写权限，即 <strong>上传镜像</strong> 到该项目和从该项目 <strong>拉取镜像</strong>、<strong>上传&#x2F;下载HelmChart</strong>、<strong>查看日志</strong>，其它权限没有。</p>
</li>
<li><p><code>Guest</code></p>
<p>  <code>访客</code> 对指定项目具有 <strong>只读权限</strong>。他们可以 <strong>拉取</strong> 和重新标记图像，但 <strong>不能推送</strong>，也可以登录Harbor UI界面。</p>
</li>
<li><p><code>Limited Guest</code></p>
<p>  <code>受限访客</code> 没有项目的完全读取权限。他们可以拉取图像但不能推送，而且他们看不到日志或项目的其他成员。例如，您可以为来自不同组织的共享项目访问权限的用户创建受限访客。</p>
<p>  受限访客也可以登录 Harbor，但是只具有镜像拉取权限，无法查看日志等权限。</p>
</li>
</ul>
<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p>要为指定项目分配用户，必须先创建用户。只有 <code>admin</code> 用户才能创建用户。</p>
<p>要创建用户，在 <code>Administration</code> -&gt; <code>Users</code> -&gt; <code>+ NEW USER</code> 添加新用户。<br><img src="https://i.csms.tech/img_73.png"></p>
<h4 id="分配用户"><a href="#分配用户" class="headerlink" title="分配用户"></a>分配用户</h4><p><code>admin</code> 或具有 <code>Project Admin</code> 权限的用户可以在指定的项目中，为项目添加成员</p>
<p>要为项目添加成员，进入指定项目，在 <code>Members</code> -&gt; <code>+ USER</code> ，为项目分配成员<br><img src="https://i.csms.tech/img_74.png"></p>
<h2 id="配置复制"><a href="#配置复制" class="headerlink" title="配置复制"></a>配置复制</h2><p>此种复制不会复制用户信息。镜像复制到目标后，会自动更改镜像地址到目标镜像地址，可以直接使用镜像。</p>
<h3 id="配置复制到-Harbor"><a href="#配置复制到-Harbor" class="headerlink" title="配置复制到 Harbor"></a>配置复制到 Harbor</h3><p>为了对 Harbor 提供备份，可以配置复制到目标 Harbor 作为备份。</p>
<h4 id="在源-Harbor-配置-replication-endpoints"><a href="#在源-Harbor-配置-replication-endpoints" class="headerlink" title="在源 Harbor 配置 replication endpoints"></a>在源 Harbor 配置 replication endpoints</h4><p>在 <code>Administration</code> -&gt; <code>Registies</code> -&gt; <code>+ NEW ENDPOINT</code> 中，添加 <code>Endpoint</code>，除了 Harbor，还支持以下 <code>Provider</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Creating Replication Endpoints](https://goharbor.io/docs/2.6.0/administration/configuring-replication/create-replication-endpoints/)">[1]</span></a></sup></p>
<ul>
<li>Docker Hub</li>
<li>Docker registry</li>
<li>AWS Elastic Container Registry</li>
<li>Azure Container Registry</li>
<li>Ali Cloud Container Registry</li>
<li>Google Container Registry</li>
<li>Huawei SWR</li>
<li>Artifact Hub</li>
<li>Gitlab</li>
<li>Quay</li>
<li>Jfrog Artifactory</li>
</ul>
<p>此处  <code>Provider</code> 选择 Harbor<br><img src="https://i.csms.tech/img_75.png"></p>
<h4 id="创建复制规则"><a href="#创建复制规则" class="headerlink" title="创建复制规则"></a>创建复制规则</h4><p>在 <code>Administration</code> -&gt; <code>Replications</code> -&gt; <code>+ NEW REPLICATION RULE</code></p>
<p>根据提示输入自定义选项</p>
<ul>
<li>如果目标 Harbor 只是用来备用或用来作为镜像下载的仓库，可以配置复制时覆盖目标中同名的镜像</li>
</ul>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h3 id="Harbar-主要的数据组成"><a href="#Harbar-主要的数据组成" class="headerlink" title="Harbar 主要的数据组成"></a>Harbar 主要的数据组成</h3><p>Harbor 安装过程中，主要依赖执行安装脚本 <a href="#%E9%85%8D%E7%BD%AE-Harbor-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">需要的配置文件 <code>harbor.yml</code></a>，安装脚本执行后，会生成 <code>docker-compose.yml</code> 文件，同时会生成其他一些临时文件，这些临时文件在 Harbor 容器启动时需要挂载到容器，这些数据通常在 Harbor 安装目录的 <code>common</code> 目录下。虽然临时数据对服务的顺利运行至关重要，但是安装程序每次都会读取 Harbor 配置文件重新生成一份临时数据，所以此处仅需备份配置文件即可</p>
<p>Harbor 容器使用的持久化数据默认保存在宿主机目录 <code>/data</code>，具体目录由安装配置文件 <code>harbor.yml</code> 配置</p>
<figure class="highlight shell"><figcaption><span>harbor.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The default data volume</span></span><br><span class="line">data_volume: /data</span><br></pre></td></tr></table></figure>
<p><code>/data</code> 目录包含的文件夹和相应的作用如下:</p>
<ul>
<li><code>ca_download</code> - 存放用户访问Harbor时所需的 CA 证书。</li>
<li><code>database</code> - 存放数据库的目录，Harbor、Clair 和 Notary 数据库的数据都在此目录下。</li>
<li><code>job_logs</code> - 存放 JobService 的日志信息。</li>
<li><code>redis</code> - 存放 Redis 数据。</li>
<li><code>registry</code> - 存放 OCI Artifacts 数据（对于大部分用户来说是镜像数据）。</li>
<li><code>secret</code> - 存放 Harbor 内部组件通信所需的加密信息。</li>
</ul>
<p>Harbor 容器运行日志保存宿主机在 <code>/var/log/harbor</code></p>
<h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><ol>
<li>创建备份目录 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /HarborBackup</span><br></pre></td></tr></table></figure></li>
<li>备份 Harbor 安装目录， <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -p -r ./harbor/ /HarborBackup/harbor</span><br></pre></td></tr></table></figure></li>
<li>备份 Harbor 持久化数据<br> 若不确定持久化数据卷的路径，可以查看安装配置文件<code>harbor.yml</code> 中的 <code>data_volume</code> 配置，默认为 <code>data_volume: /data</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -p -r /data/ /HarborBackup/data</span><br></pre></td></tr></table></figure></li>
</ol>
<p>在需要恢复时，反向拷贝数据即可。需要注意，文件权限需要保持和备份之前的信息一致。</p>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="http-server-gave-HTTP-response-to-HTTPS-client"><a href="#http-server-gave-HTTP-response-to-HTTPS-client" class="headerlink" title="http: server gave HTTP response to HTTPS client"></a>http: server gave HTTP response to HTTPS client</h3><p><strong>错误原因</strong></p>
<p>docker client 和 docker registry 交互默认使用的是 HTTPS，如果镜像仓库使用的是 HTTP 服务，则与私有镜像交互时出现以上错误。</p>
<p><strong>解决方法</strong></p>
<p>修改或创建文件 <code>/etc/docker/daemon.json</code>，添加以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123; &quot;insecure-registries&quot;:[&quot;54.236.67.117:5000&quot;] &#125;</span><br></pre></td></tr></table></figure>
<p>重启 docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/goharbor/harbor">官网说明</a></p>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://goharbor.io/docs/2.6.0/administration/configuring-replication/create-replication-endpoints/">Creating Replication Endpoints</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://goharbor.io/docs/2.6.0/administration/configuring-replication/create-replication-rules/">Creating a Replication Rule</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 安装及常用命令介绍</title>
    <url>/202208041317/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7.9.2009</li>
<li>docker-ce-19.03.15</li>
<li>docker-20.10.9</li>
</ul>
<h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h1><h2 id="docker-yum-安装"><a href="#docker-yum-安装" class="headerlink" title="docker yum 安装"></a>docker yum 安装</h2><p>安装 yum 源，<a href="https://docs.docker.com/engine/install/centos/">docker官方 centos 安装文档</a>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>安装 <code>docker</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<h2 id="docker-离线安装"><a href="#docker-离线安装" class="headerlink" title="docker 离线安装"></a>docker 离线安装</h2><p><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">参考链接</a>下载rpm安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-19.03.15-3.el7.x86_64.rpm</span><br><span class="line">wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-cli-19.03.15-3.el7.x86_64.rpm</span><br><span class="line">wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.4.13-3.1.el7.x86_64.rpm</span><br><span class="line">wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-compose-plugin-2.3.3-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p>安装 docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum localinstall -y containerd.io-1.4.13-3.1.el7.x86_64.rpm \</span><br><span class="line">                    docker-ce-cli-19.03.15-3.el7.x86_64.rpm \</span><br><span class="line">                    docker-ce-19.03.15-3.el7.x86_64.rpm \</span><br><span class="line">                    docker-compose-plugin-2.3.3-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>以上 2 条命令可以使用以下 1 条命令完成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum localinstall -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-19.03.15-3.el7.x86_64.rpm \</span><br><span class="line">                    https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-cli-19.03.15-3.el7.x86_64.rpm \</span><br><span class="line">                    https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.4.13-3.1.el7.x86_64.rpm \</span><br><span class="line">                    https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-compose-plugin-2.3.3-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>启动docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker --now</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h2 id="docker-ce-19-03-15-升级到-docker-ce-20-10-9"><a href="#docker-ce-19-03-15-升级到-docker-ce-20-10-9" class="headerlink" title="docker-ce-19.03.15 升级到 docker-ce-20.10.9"></a>docker-ce-19.03.15 升级到 docker-ce-20.10.9</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.6.9-3.1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-scan-plugin-0.9.0-3.el7.x86_64.rpm \</span><br><span class="line">            https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-rootless-extras-20.10.9-3.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum update https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-cli-20.10.9-3.el7.x86_64.rpm \</span><br><span class="line">           https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-20.10.9-3.el7.x86_64.rpm \</span><br><span class="line">           https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-compose-plugin-2.6.0-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h2 id="安装-docker-20-10-9"><a href="#安装-docker-20-10-9" class="headerlink" title="安装 docker-20.10.9"></a>安装 docker-20.10.9</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.6.9-3.1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum install -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-cli-20.10.9-3.el7.x86_64.rpm \</span><br><span class="line">               https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-scan-plugin-0.9.0-3.el7.x86_64.rpm</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">yum install -y  https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-rootless-extras-20.10.9-3.el7.x86_64.rpm \</span><br><span class="line">                https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-20.10.9-3.el7.x86_64.rpm \</span><br><span class="line">                https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-rootless-extras-20.10.9-3.el7.x86_64.rpm \</span><br><span class="line">                https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-compose-plugin-2.6.0-3.el7.x86_64.rpm</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="安装-docker-26"><a href="#安装-docker-26" class="headerlink" title="安装 docker 26"></a>安装 docker 26</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">uname</span> -r</span></span><br><span class="line">6.8.9-1.el7.elrepo.x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum install -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-cli-26.1.1-1.el7.x86_64.rpm \</span></span><br><span class="line"><span class="language-bash">               https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-scan-plugin-0.9.0-3.el7.x86_64.rpm \</span></span><br><span class="line"><span class="language-bash">               https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-compose-plugin-2.6.0-3.el7.x86_64.rpm \</span></span><br><span class="line"><span class="language-bash">               https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-buildx-plugin-0.14.0-1.el7.x86_64.rpm \</span></span><br><span class="line"><span class="language-bash">               https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-26.1.1-1.el7.x86_64.rpm \</span></span><br><span class="line"><span class="language-bash">               https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-cli-26.1.1-1.el7.x86_64.rpm \</span></span><br><span class="line"><span class="language-bash">               https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-rootless-extras-26.1.0-1.el7.x86_64.rpm \</span></span><br><span class="line"><span class="language-bash">               https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.6.31-3.1.el7.x86_64.rpm</span></span><br></pre></td></tr></table></figure>

<h2 id="Ubuntu-安装-docker"><a href="#Ubuntu-安装-docker" class="headerlink" title="Ubuntu 安装 docker"></a>Ubuntu 安装 docker</h2><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><p>Ubuntu 系统信息如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">User</span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 22.04.3 LTS&quot;</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION_ID=&quot;22.04&quot;</span><br></pre></td></tr></table></figure>

<h3 id="使用-apt-get-安装-docker-ce-步骤"><a href="#使用-apt-get-安装-docker-ce-步骤" class="headerlink" title="使用 apt-get 安装 docker-ce 步骤"></a>使用 apt-get 安装 docker-ce 步骤</h3><ol>
<li>更新软件包索引  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>安装必要的软件包。为了确保 apt 可以通过 HTTPS 使用软件包，需要安装以下软件包  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>添加 Docker 的官方 GPG 密钥。这将确保你从 Docker 下载的软件包是真实的  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>添加 Docker 软件仓库  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>更新软件包索引  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>安装 Docker CE（社区版）  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install docker-ce</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>启动 Docker 服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line"></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><h2 id="docker-镜像管理命令"><a href="#docker-镜像管理命令" class="headerlink" title="docker 镜像管理命令"></a>docker 镜像管理命令</h2><h3 id="获取（下载）镜像"><a href="#获取（下载）镜像" class="headerlink" title="获取（下载）镜像"></a>获取（下载）镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br><span class="line">docker pull centos:centos7.9.2009</span><br></pre></td></tr></table></figure>
<blockquote>
<p>未指定地址，默认是从 <a href="https://hub.docker.com/search?q=&type=image">Docker Hub</a> 上面获取镜像，<a href="https://yeasy.gitbook.io/docker_practice/image/pull">参考说明</a><br>标签信息可从 <a href="https://hub.docker.com/search?q=&type=image">Docker Hub</a> 上面查看</p>
</blockquote>
<h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><p><a href="#%E8%8E%B7%E5%8F%96%EF%BC%88%E4%B8%8B%E8%BD%BD%EF%BC%89%E9%95%9C%E5%83%8F">获取（下载）镜像</a>后，运行镜像并运行镜像中的<code>bash</code>命令进入对应容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --rm centos:centos7.9.2009 bash</span><br><span class="line">cat /etc/os-release</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。例如执行 <code>cat /etc/os-release</code>。容器中执行<code>exit</code>命令可以退出容器</p>
<p><img src="https://i.csms.tech/img_35.png"></p>
<p><code>docker run</code> 命令常用选项说明</p>
<style>
table th:nth-of-type(1){
width: 10%;
}
table th:nth-of-type(2){
width: 70%
;
}
table th:nth-of-type(3){
width: 20%;
}

</style>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-i</code></td>
<td>启用交互式操作</td>
<td></td>
</tr>
<tr>
<td align="left"><code>-t</code></td>
<td>开启终端（输入输出）</td>
<td></td>
</tr>
<tr>
<td align="left"><code>--rm</code></td>
<td>容器退出(<code>exit</code>)后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。</td>
<td></td>
</tr>
<tr>
<td align="left"><code>--name</code></td>
<td>给启动的容器命名</td>
<td><code>docker run -d --name &quot;centos7&quot; centos:centos7.9.2009 bash</code></td>
</tr>
<tr>
<td align="left"><code>-d</code></td>
<td>后台运行，启动后返回容器id，并进入后台运行，容器的输出可使用 <code>docker logs CONTAINER</code> 或 <code>docker container logs CONTAINER</code> 查看</td>
<td></td>
</tr>
<tr>
<td align="left"><code>--entrypoint</code></td>
<td>覆盖（替换）镜像中<a href="https://csms.tech/202208050928/#ENTRYPOINT-容器启动程序指令">默认的<code>ENTRYPOINT</code></a></td>
<td></td>
</tr>
</tbody></table>
<h3 id="列出已下载的镜像"><a href="#列出已下载的镜像" class="headerlink" title="列出已下载的镜像"></a>列出已下载的镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span></span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE  </span><br><span class="line">centos              centos7.9.2009      eeb6ee3f44bd        10 months ago       204MB</span><br></pre></td></tr></table></figure>



<p>列表包含了 <code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code>。  </p>
<blockquote>
<p><code>IMAGE ID</code> 是镜像的唯一标识，同一个镜像可以有多个标签</p>
</blockquote>
<h3 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image rm centos:centos7.9.2009</span><br><span class="line"></span><br><span class="line">docker image rm eeb6ee3f44bd</span><br></pre></td></tr></table></figure>

<p>可以用镜像名(<code>&lt;仓库名&gt;:&lt;标签&gt;</code>) ，<code>镜像 ID</code> 删除镜像</p>
<p>也可以使用 <code>镜像摘要</code> 删除镜像<br>查看 <code>镜像摘要</code>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span> --digests</span></span><br><span class="line">REPOSITORY          TAG                 DIGEST                      IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              centos7.9.2009      sha256:c73f515d06b0fa0...   eeb6ee3f44bd        10 months ago       204MB</span><br></pre></td></tr></table></figure>


<p>使用 <code>镜像摘要</code> 删除镜像<br>命令格式 <code>docker image rm REPOSITORY@DIGEST</code>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">rm</span> centos@sha256:c73f515d06b0fa0...</span></span><br><span class="line">Untagged: centos@sha256:c73f515d06b0fa07bb18d8202035e739a494ce760aa73129f60f4bf2bd22b407</span><br></pre></td></tr></table></figure>


<p>删除行为分为两类，一类是 <code>Untagged</code>，另一类是 <code>Deleted</code>。<br>因为一个镜像可以对应多个标签，当我们使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。<br>所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的 <code>Untagged</code> 的信息 ,因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 <code>Delete</code> 行为就不会发生。<br>所以并非所有的 <code>docker image rm</code> 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。<br>当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。  </p>
<h3 id="镜像导出和导入"><a href="#镜像导出和导入" class="headerlink" title="镜像导出和导入"></a>镜像导出和导入</h3><h4 id="通过镜像来导出导入"><a href="#通过镜像来导出导入" class="headerlink" title="通过镜像来导出导入"></a>通过镜像来导出导入</h4><p>使用命令 <code>docker save</code> 和 <code>docker load</code> 可以根据镜像 ID 将镜像导出到文件，并在另一个 docker 节点导入。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span></span></span><br><span class="line">REPOSITORY                   TAG              IMAGE ID       CREATED         SIZE</span><br><span class="line">centos7                      my               f40e4ec9c0c7   3 weeks ago     485MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker save f40e4ec9c0c7 &gt; centos7_my.tar</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker load &lt; centos7_my.tar</span></span><br></pre></td></tr></table></figure>

<h3 id="容器制作成镜像"><a href="#容器制作成镜像" class="headerlink" title="容器制作成镜像"></a>容器制作成镜像</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker commit -m <span class="string">&quot;describe info&quot;</span> -p CONTAINER [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-m</code></td>
<td>描述信息</td>
<td></td>
</tr>
<tr>
<td align="left"><code>-p</code></td>
<td>打包镜像时暂停容器</td>
<td></td>
</tr>
<tr>
<td align="left"><code>a</code></td>
<td>提交的镜像作者</td>
<td></td>
</tr>
</tbody></table>
<h2 id="doker-容器管理命令"><a href="#doker-容器管理命令" class="headerlink" title="doker 容器管理命令"></a>doker 容器管理命令</h2><h3 id="启动已终止的容器"><a href="#启动已终止的容器" class="headerlink" title="启动已终止的容器"></a>启动已终止的容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container start CONTAINER</span><br><span class="line">docker container restart CONTAINER</span><br><span class="line">docker start CONTAINER</span><br></pre></td></tr></table></figure>

<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker attach CONTAINER</span><br><span class="line">docker exec -it CONTAINER bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>docker attach</code> 进入容器，如果再从这个 <code>stdin</code> 中 <code>exit</code>，会导致容器的停止<br><code>docker exec</code> 进入容器，如果再从这个 <code>stdin</code> 中 <code>exit</code>，不会导致容器的停止，推荐进入容器使用 <code>docker exec -it CONTAINER bash</code>  </p>
</blockquote>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container rm CONTAINER</span><br></pre></td></tr></table></figure>

<p><code>docker container rm</code> 可以删除已终止的容器，要强制删除运行中的容器，可以使用选项 <code>-f</code>，Docker 会发送 SIGKILL 信号给容器。  </p>
<p>用 <code>docker container ls -a</code> 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure>

<h2 id="docker-数据管理命令"><a href="#docker-数据管理命令" class="headerlink" title="docker 数据管理命令"></a>docker 数据管理命令</h2><h3 id="容器数据卷管理命令"><a href="#容器数据卷管理命令" class="headerlink" title="容器数据卷管理命令"></a>容器数据卷管理命令</h3><p><code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 <code>mount</code> ，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p>
<p>创建数据卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create DOCKERVOLUME</span><br></pre></td></tr></table></figure>

<p>查看数据卷信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker volume <span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker volume inspect DOCKERVOLUME</span></span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2022-08-10T15:03:13+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/DOCKERVOLUME/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;DOCKERVOLUME&quot;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>删除不在使用的数据卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume rm DOCKERVOLUME</span><br></pre></td></tr></table></figure>

<p>挂载使用数据卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -it -v DOCKERVOLUME:/data/ --name centos7 centos:centos7</span><br><span class="line">docker run -d -it --mount source=DOCKERVOLUME,target=/data, --name centos7 centos:centos7</span><br></pre></td></tr></table></figure>

<h3 id="挂载宿主机目录-文件"><a href="#挂载宿主机目录-文件" class="headerlink" title="挂载宿主机目录(文件)"></a>挂载宿主机目录(文件)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -it -v /data/:/data/ --name centos7 centos:centos7</span><br><span class="line">docker run -d -it --mount type=bind,source=/data/,target=/data --name centos7 centos:centos7</span><br></pre></td></tr></table></figure>

<p>本地目录的路径必须是绝对路径，以前使用 <code>-v</code> 参数时如果本地目录不存在 <code>Docker</code> 会自动为你创建一个文件夹，现在使用 <code>--mount</code> 参数时如果本地目录不存在，<code>Docker</code> 会报错。  </p>
<p>挂载权限默认为 <code>rw</code> ，可以通过增加 <code>readonly</code> 指定为 只读</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -it -v /data/:/data/:ro --name centos7 centos:centos7</span><br><span class="line">docker run -d -it --mount type=bind,source=/data/,target=/data,readonly --name centos7 centos:centos7</span><br></pre></td></tr></table></figure>

<blockquote>
<p>挂载本地宿主机目录(文件)，使用选项 <code>--mount</code> 时，需要指定 <code>type=bind</code>, 否则 docker 会将源目录当做 <code>数据卷</code> 处理，可能报以下错误：<br><code>docker: Error response from daemon: create /data/: &quot;/data/&quot; includes invalid characters for a local volume name, only &quot;[a-zA-Z0-9][a-zA-Z0-9_.-]&quot; are allowed. If you intended to pass a host directory, use absolute path.</code></p>
</blockquote>
<h2 id="docker-网络管理命令"><a href="#docker-网络管理命令" class="headerlink" title="docker 网络管理命令"></a>docker 网络管理命令</h2><p>使用 <code>docker run</code> 命令的 <code>-P</code> 选项，<code>Docker</code> 会随机映射一个宿主机端口到内部容器开放的网络端口(<code>Dockerfile</code> 中 <code>EXPOSE</code> 的端口)。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d -P nginx:alpine</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span> -l</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES</span><br><span class="line">fae320d08268        nginx:alpine        &quot;/docker-entrypoint.…&quot;   24 seconds ago      Up 20 seconds       0.0.0.0:32768-&gt;80/tcp   bold_mcnulty</span><br></pre></td></tr></table></figure>

<p>使用 <code>docker run</code> 命令的 <code>-p</code> 选项，则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有</p>
<ul>
<li><code>hostPort:containerPort</code>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 nginx:alpine</span><br></pre></td></tr></table></figure>
这样会绑定到宿主机所有接口上的所有 ip 地址</li>
<li><code>ip:hostPort:containerPort</code>    <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1:80:80 nginx:alpine</span><br></pre></td></tr></table></figure>
此种格式可以指定映射宿主机的一个特定地址（IP），比如 <code>localhost</code> 地址 <code>127.0.0.1</code></li>
<li><code>ip::containerPort</code>    <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1::80 nginx:alpine</span><br></pre></td></tr></table></figure>
使用 <code>ip::containerPort</code> 会绑定宿主机指定 ip 的任意端口到容器的指定端口，本地宿主机会自动分配一个随机端口。</li>
</ul>
<p><code>-p</code> 选项可以多次使用来绑定多个端口  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    -p 80:80 \</span><br><span class="line">    -p 443:443 \</span><br><span class="line">    nginx:alpine</span><br></pre></td></tr></table></figure>

<p>还可以使用 <code>udp</code> 标记来指定 <code>udp</code> 端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1:80:80/udp nginx:alpine</span><br></pre></td></tr></table></figure>

<p>查看容器映射的端口信息可以使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker port c8a91c8fafba</span></span><br><span class="line">80/tcp -&gt; 0.0.0.0:81</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker port c8a91c8fafba 80</span></span><br><span class="line">0.0.0.0:81</span><br></pre></td></tr></table></figure>


<h2 id="docker-资源状态命令"><a href="#docker-资源状态命令" class="headerlink" title="docker 资源状态命令"></a>docker 资源状态命令</h2><h3 id="查看-docker-各项功能占用的系统磁盘大小"><a href="#查看-docker-各项功能占用的系统磁盘大小" class="headerlink" title="查看 docker 各项功能占用的系统磁盘大小"></a>查看 docker 各项功能占用的系统磁盘大小</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker system <span class="built_in">df</span></span></span><br><span class="line">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class="line">Images              1                   0                   203.9MB             203.9MB (100%)</span><br><span class="line">Containers          0                   0                   0B                  0B</span><br><span class="line">Local Volumes       0                   0                   0B                  0B</span><br><span class="line">Build Cache         0                   0                   0B                  0B</span><br></pre></td></tr></table></figure>

<p>结果中包含了 <code>镜像</code>、<code>容器</code>、<code>数据卷</code> 所占用的空间</p>
<h3 id="清除-docker-中所有未使用的资源"><a href="#清除-docker-中所有未使用的资源" class="headerlink" title="清除 docker 中所有未使用的资源"></a>清除 docker 中所有未使用的资源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker system prune</span></span><br><span class="line">WARNING! This will remove:</span><br><span class="line">  - all stopped containers</span><br><span class="line">  - all networks not used by at least one container</span><br><span class="line">  - all dangling images</span><br><span class="line">  - all dangling build cache</span><br><span class="line"></span><br><span class="line">Are you sure you want to continue? [y/N] y</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看-docker-容器中启动的脚本参数和完整的命令"><a href="#查看-docker-容器中启动的脚本参数和完整的命令" class="headerlink" title="查看 docker 容器中启动的脚本参数和完整的命令"></a>查看 docker 容器中启动的脚本参数和完整的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a --no-trunc</span><br></pre></td></tr></table></figure>

<h1 id="其他相关功能"><a href="#其他相关功能" class="headerlink" title="其他相关功能"></a>其他相关功能</h1><h2 id="获得容器运行时的命令"><a href="#获得容器运行时的命令" class="headerlink" title="获得容器运行时的命令"></a>获得容器运行时的命令</h2><p>运行容器最好使用 compose ，不然时间长了，不记得创建&#x2F;运行容器时的命令，需要重新找回创建&#x2F;运行容器时的命令</p>
<h3 id="runlike"><a href="#runlike" class="headerlink" title="runlike"></a>runlike</h3><p>若需要方便的查看容器 <code>run</code> 或 <code>create</code> 时使用的命令，可以使用 <code>runlike</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install runlike</span><br><span class="line"></span><br><span class="line">runlike -p aa245f973a1c</span><br></pre></td></tr></table></figure>
<h3 id="get-command-4-run-container"><a href="#get-command-4-run-container" class="headerlink" title="get_command_4_run_container"></a>get_command_4_run_container</h3><p><code>get_command_4_run_container</code> 类似 <code>runlike</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull cucker/get_command_4_run_container</span><br><span class="line"></span><br><span class="line">docker run --rm -v /var/run/docker.sock:/var/run/docker.sock cucker/get_command_4_run_container [容器名称]/[容器ID]</span><br></pre></td></tr></table></figure>

<h2 id="修改运行中的容器的配置"><a href="#修改运行中的容器的配置" class="headerlink" title="修改运行中的容器的配置"></a>修改运行中的容器的配置</h2><p>容器已经运行后，若需要在不删除容器的情况下修改配置，可以修改容器的配置文件，默认路径在 <code>/var/lib/docker/containers/$&#123;CONTAINERID&#125;/hostconfig.json</code>，其内容为 json 格式，可以使用专门能解析 json 格式的工具打开，进行相应的修改。</p>
<p>修改之前要先停止 docker 服务，再修改，修改后在启动 docker 服务，否则无法更改成功。</p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="docker-启动容器时报错"><a href="#docker-启动容器时报错" class="headerlink" title="docker 启动容器时报错"></a>docker 启动容器时报错</h2><p>docker 报以下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker: Error response from daemon: OCI runtime create failed: unable to retrieve OCI runtime error (open /run/containerd/io.containerd.runtime.v1.linux/moby/f3cc24022c80fa1e12fcf91f31421ac7f1244abd03af1403edeeb01aceffb3fe/log.json: no such file or directory): runc did not terminate successfully: exit status 127: runc: symbol lookup error: runc: undefined symbol: seccomp_notify_respond</span><br><span class="line">: unknown.</span><br></pre></td></tr></table></figure>
<p>此错误由底层的 <code>runc</code> 返回，直接执行 <code>runc</code> 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ runc</span><br><span class="line">runc: symbol lookup error: runc: undefined symbol: seccomp_notify_respond</span><br></pre></td></tr></table></figure>
<p><strong>原因</strong>： <code>runc</code> 缺乏依赖 <code>libseccomp</code>，centos7 中 yum 默认的版本是 2.3 的，版本不满足最新 <code>containerd</code> 的需求，需要下载 2.4 以上的 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Containerd 提示runc: symbol lookup error: runc: undefined symbol: seccomp_notify_respond](https://i4t.com/5434.html)">[1]</span></a></sup> </p>
<p>卸载旧版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -qa | grep libseccomp</span></span><br><span class="line">libseccomp-2.3.1-4.el7.x86_64</span><br><span class="line">libseccomp-devel-2.3.1-4.el7.x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -e libseccomp-2.3.1-4.el7.x86_64 libseccomp-devel-2.3.1-4.el7.x86_64 --nodeps</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget http://rpmfind.net/linux/centos/8-stream/BaseOS/x86_64/os/Packages/libseccomp-2.5.1-1.el8.x86_64.rpm</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -ivh libseccomp-2.5.1-1.el8.x86_64.rpm</span></span><br><span class="line">warning: libseccomp-2.5.1-1.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:libseccomp-2.5.1-1.el8           ################################# [100%]</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -qa | grep libseccomp</span></span><br><span class="line">libseccomp-2.5.1-1.el8.x86_64 </span><br></pre></td></tr></table></figure>

<p>再次执行 <code>runc</code>，正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">runc</span></span><br><span class="line">NAME:</span><br><span class="line">   runc - Open Container Initiative runtime</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.docker.com/engine/install/centos/">docker官方 centos 安装文档</a>  </p>
<p><a href="https://download.docker.com/linux/centos/">docker 官方 centos 版本下载地址</a></p>
<p><a href="https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/">docker centos版本 阿里云下载地址</a>  </p>
<p><a href="https://yeasy.gitbook.io/docker_practice/introduction/what">什么是 Docker</a>  </p>
<p><a href="https://yeasy.gitbook.io/docker_practice/introduction/why">为什么要用 Docker</a></p>
<p><a href="https://yeasy.gitbook.io/docker_practice/">docker 从入门到实践</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://i4t.com/5434.html">Containerd 提示runc: symbol lookup error: runc: undefined symbol: seccomp_notify_respond</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 docker 运行 jenkins 的安装配置及使用</title>
    <url>/202210121455/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h1><ul>
<li>Centos-7 3.10.0-1160</li>
<li>Docker Engine 19.03.15</li>
<li>jenkinsci&#x2F;blueocean Jenkins 2.346.3</li>
</ul>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p><a href="https://hub.docker.com/">官方镜像仓库</a> 中搜索 <code>jenkinsci/blueocean</code>，下载最新镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull jenkinsci/blueocean</span><br></pre></td></tr></table></figure>


<h2 id="启动-jenkins-容器"><a href="#启动-jenkins-容器" class="headerlink" title="启动 jenkins 容器"></a>启动 jenkins 容器</h2><p>创建数据目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /data/JenkinsData_blueocean</span><br><span class="line">chmod 777 /data/JenkinsData_blueocean</span><br></pre></td></tr></table></figure>
<p>启动 jenkins 容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name jenkins \</span><br><span class="line">          -v /var/run/docker.sock:/var/run/docker.sock  \</span><br><span class="line">          -v /data/JenkinsData_blueocean/:/var/jenkins_home/ \</span><br><span class="line">          -u root \</span><br><span class="line">          jenkinsci/blueocean</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-v /var/run/docker.sock:/var/run/docker.sock</code> - 在需要使用 Jenkins 构建 Docker 镜像时，Jenkins 容器中的 docker 客户端需要连接到宿主机的 Docker server</li>
<li><code>-v /data/JenkinsData_blueocean/:/var/jenkins_home/</code> - 数据持久化到宿主机目录</li>
<li><code>-u root</code> - 容器中使用 <code>root</code> 用户运行，要使用 Jenkins 构建 Docker 镜像时，默认的 <code>jenkins</code> 用户无权限访问 <code>/var/run/docker.sock</code></li>
</ul>
<span id="more"></span>
<h2 id="防火墙开放端口"><a href="#防火墙开放端口" class="headerlink" title="防火墙开放端口"></a>防火墙开放端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT 7 -p tcp -m multiport --dports 8080 -j ACCEPT -m comment --comment &quot;Jenkins&quot;</span><br></pre></td></tr></table></figure>

<h2 id="查看初始密码"><a href="#查看初始密码" class="headerlink" title="查看初始密码"></a>查看初始密码</h2><p>初始密码会打印在日志里面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker logs jenkins</span></span><br><span class="line">...</span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line"></span><br><span class="line">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class="line">Please use the following password to proceed to installation:</span><br><span class="line"></span><br><span class="line">acafa239f38043e6a54a0fde448</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用日志中显示的密码登陆 web。</p>
<h1 id="Jenkins-pipeline-script-语法"><a href="#Jenkins-pipeline-script-语法" class="headerlink" title="Jenkins pipeline script 语法"></a>Jenkins pipeline script 语法</h1><p><code>Jenkins pipeline script</code> 基本格式如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;echo &quot;Hello World&quot;&#x27;</span><br><span class="line">                sh &#x27;&#x27;&#x27;</span><br><span class="line">                    echo &quot;Multiline shell steps works too&quot;</span><br><span class="line">                    ls -lah</span><br><span class="line">                &#x27;&#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage() &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            echo &#x27;This will always run&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo &#x27;This will run only if successful&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            echo &#x27;This will run only if failed&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        unstable &#123;</span><br><span class="line">            echo &#x27;This will run only if the run was marked as unstable&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        changed &#123;</span><br><span class="line">            echo &#x27;This will run only if the state of the Pipeline has changed&#x27;</span><br><span class="line">            echo &#x27;For example, if the Pipeline was previously failing but is now successful&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="agent-命令"><a href="#agent-命令" class="headerlink" title="agent 命令"></a>agent 命令</h2><p><code>agent</code> 指令告诉 Jenkins 在哪里以及如何执行 <code>Pipeline</code> 或者<code> Pipeline</code> 子集。 所有的 <code>Pipeline</code> 都需要 <code>agent</code> 指令。 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[定义执行环境](https://www.jenkins.io/zh/doc/pipeline/tour/agents/#%E5%AE%9A%E4%B9%89%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83)">[2]</span></a></sup></p>
<p>下面的 <code>pipeline</code> 使用 <code>docker</code> 做为执行环境，并指定 <code>docker</code> 镜像，当执行 Pipelin e时，Jenkins 将会自动运行指定的容器，并执行 Pipeline 中已经定义好的步骤 <code>steps</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        docker &#123; image &#x27;node:7-alpine&#x27; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Test&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;node --version&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>agent any</code> 指令指示 Jenkins 为整个流水线分配一个执行器 (在 Jenkins 环境中的任何可用代理&#x2F;节点上)和工作区</p>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>环境变量（<code>environment</code>）可以设置为全局的，也可以是阶段（<code>stage</code>）级别的，阶段（<code>stage</code>）级别的环境变量只能在定义变量的阶段（<code>stage</code>）使用 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用环境变量](https://www.jenkins.io/zh/doc/pipeline/tour/environment/#%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F)">[3]</span></a></sup></p>
<p>Jenkins 流水线通过全局变量 <code>env</code> 提供全局环境变量，它在 <code>Jenkinsfile</code> 文件的任何地方都可以使用。Jenkins 流水线中可访问的完整的环境变量列表记录在 <code>$&#123;YOUR_JENKINS_URL&#125;/pipeline-syntax/globals#env</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Jenkinsfile (Declarative Pipeline)</span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123; </span><br><span class="line">        CC = &#x27;clang&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Example&#x27;) &#123;</span><br><span class="line">            environment &#123; </span><br><span class="line">                DEBUG_FLAGS = &#x27;-g&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;printenv&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你使用 <code>Build with Parameters</code> 选项将流水线配置为接受参数，这些参数将作为 <code>params</code> 变量的成员被访问。 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[处理参数](https://www.jenkins.io/zh/doc/book/pipeline/jenkinsfile/#%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0)">[5]</span></a></sup></p>
<p>假设在 Jenkinsfile 中配置了名为 <code>Greeting</code> 的字符串参数，它可以通过 <code>$&#123;params.Greeting&#125;</code> 访问该参数</p>
<p>**引用环境变量时，如果使用引号，需要使用 <code>&quot;</code>（双引号），不能使用 <code>&#39;</code>（单引号） **</p>
<h2 id="post-命令"><a href="#post-命令" class="headerlink" title="post 命令"></a>post 命令</h2><p>因为 <code>post</code> 部分保证在 <code>Pipeline</code> 结束的时候运行， 所以我们可以添加通知或者其他的步骤去完成清理、通知或者其他的 <code>Pipeline</code> 结束任务。 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[清理和通知](https://www.jenkins.io/zh/doc/pipeline/tour/post/#%E6%B8%85%E7%90%86%E5%92%8C%E9%80%9A%E7%9F%A5)">[4]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;No-op&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;ls&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            echo &#x27;One way or another, I have finished&#x27;</span><br><span class="line">            deleteDir() /* clean up our workspace */</span><br><span class="line">        &#125;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo &#x27;I succeeeded!&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        unstable &#123;</span><br><span class="line">            echo &#x27;I am unstable :/&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            echo &#x27;I failed :(&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        changed &#123;</span><br><span class="line">            echo &#x27;Things were different before...&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h1><h2 id="凭证使用方法"><a href="#凭证使用方法" class="headerlink" title="凭证使用方法"></a>凭证使用方法</h2><h3 id="Usernames-and-passwords"><a href="#Usernames-and-passwords" class="headerlink" title="Usernames and passwords"></a>Usernames and passwords</h3><p>在 <code>Manage Jenkins</code> -&gt; <code>Manage Credentials</code> 中添加 <code>kind</code> 为 <code>Username with password</code> 的凭据。</p>
<p>在 Pipeline 中配置环境变量，使用方法 <code>credentials()</code> 调用已配置的凭据，需要的参数为 credentials 的 ID 信息<br><img src="https://i.csms.tech/img_70.png"></p>
<figure class="highlight shell"><figcaption><span>Jenkinsfile</span></figcaption><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">	</span><br><span class="line">	environment &#123;</span><br><span class="line">		harbor_credentials = credentials(&#x27;harbor.my.com&#x27;)</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	stages &#123;</span><br><span class="line">        </span><br><span class="line">		stage(&#x27;login harbor&#x27;) &#123;</span><br><span class="line">		    steps &#123;</span><br><span class="line">				</span><br><span class="line">				sh &#x27;docker login -u $&#123;harbor_credentials_USR&#125; -p $&#123;harbor_credentials_PSW&#125; $&#123;DOCKER_REGISTRY&#125;&#x27;</span><br><span class="line">	</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>stages</code> 中可以通过 <code>$&#123;harbor_credentials_USR&#125;</code>，<code>$&#123;harbor_credentials_PSW&#125;</code> 分别调用 <code>username</code> 和 <code>password</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[凭证使用方法](https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials)">[1]</span></a></sup></p>
<h2 id="environment-中变量的值为其他命令的输出"><a href="#environment-中变量的值为其他命令的输出" class="headerlink" title="environment 中变量的值为其他命令的输出"></a>environment 中变量的值为其他命令的输出</h2><p>在 <code>environment</code> 中需要定义变量，变量的值为其他命令的输出，等同于 <code>shell</code> 中的如下定义</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DATE=`date +%Y%m%d%H%M`</span><br></pre></td></tr></table></figure>
<p>在 Jenkins 的 <code>environment</code> 中需要使用以下方式</p>
<figure class="highlight shell"><figcaption><span>Jenkinsfile</span></figcaption><table><tr><td class="code"><pre><span class="line">environment &#123;</span><br><span class="line">	</span><br><span class="line">	DATE=&quot;$&#123;sh(script: &#x27;date +%Y%m%d%H%M&#x27;, returnStdout:true)&#125;&quot;.trim()</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>.trim()</code> 去除变量最后的换行。</p>
<h2 id="配置文件管理插件-Config-File-Provider"><a href="#配置文件管理插件-Config-File-Provider" class="headerlink" title="配置文件管理插件 Config File Provider"></a>配置文件管理插件 Config File Provider</h2><p>多个配置中如果有公共的配置，可以将其进行统一管理，使用 <code>Config File Provider</code> 插件，安装后管理页面（<code>Manage Jenkins</code>）会多出 <code>Managed files</code> 菜单项，进入后 <code>Add a new Config</code> 可以添加配置，同时指定 <code>id</code> 和 <code>Name</code>。<br><img src="https://i.csms.tech/img_84.png"></p>
<p>示例内容，格式为 <code>yaml</code>，调用用时可以使用 <code>readYaml  file:&quot;$&#123;CONFIG_FILE&#125;&quot;</code> 读取内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">system:</span><br><span class="line">  docker_harbor_url: https://harbor.my.com</span><br><span class="line">  docker_hub_cre_id: habor</span><br><span class="line">project:</span><br><span class="line">  - name: app-0</span><br><span class="line">    git_url: http://gitlab.my.com/app1/app.git</span><br><span class="line">    git_cre_id: git</span><br><span class="line">  - name: app-1</span><br><span class="line">    git_url: http://gitlab.my.com/app2/app.git</span><br><span class="line">    git_cre_id: git</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>调用方式 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">configFileProvider(</span><br><span class="line">        [configFile(fileId: &#x27;config-yaml&#x27;, variable: &#x27;CONFIG_FILE&#x27;)]) &#123;</span><br><span class="line">        jenkins_props = readYaml  file:&quot;$&#123;CONFIG_FILE&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    echo jenkins_props.project[0].name   / 输出内容： app-0 /</span><br><span class="line">    echo jenkins_props.project[1].git_url  / 输出内容： http://gitlab.my.com/app2/app.git /</span><br></pre></td></tr></table></figure>

<ul>
<li><code>fileId</code> - 为创建配置时的 <code>id</code></li>
<li><code>variable</code> - 将配置文件内容临时存储于指定的文件名中</li>
<li><code>targetLocation</code> - 将配置文件拷贝到 <code>$&#123;WORKSPACE&#125;/$&#123;targetLocation&#125;</code></li>
</ul>
<h2 id="脚本式-Pipeline-语法中执行-shell-命令"><a href="#脚本式-Pipeline-语法中执行-shell-命令" class="headerlink" title="脚本式 Pipeline 语法中执行 shell 命令"></a>脚本式 Pipeline 语法中执行 shell 命令</h2><p>在脚本式 Pipeline 语法中，需要执行 shell 命令及获取命令输出时，可以通过 <code>sh</code> 指令执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git_commit = sh(returnStdout: true, script: &quot;git rev-parse HEAD&quot;).trim()</span><br><span class="line">echo git_commit</span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="find-x2F-usr-x2F-share-x2F-jenkins-x2F-ref-No-such-file-or-directory"><a href="#find-x2F-usr-x2F-share-x2F-jenkins-x2F-ref-No-such-file-or-directory" class="headerlink" title="find: &#x2F;usr&#x2F;share&#x2F;jenkins&#x2F;ref: No such file or directory"></a>find: &#x2F;usr&#x2F;share&#x2F;jenkins&#x2F;ref: No such file or directory</h2><p>使用 Docker 运行 Jenkins，启动 Jenkins 容器时报错： <code>find: /usr/share/jenkins/ref: No such file or directory</code>，Jenkins 容器无法启动。</p>
<p><strong>可能原因及解决办法</strong></p>
<p>可能是因为不小心删除了某些文件导致，删除本地镜像，重新拉取镜像，启动正常。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://hub.docker.com/r/jenkinsci/blueocean">使用Docker安装Jenkins</a></p>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials">凭证使用方法</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jenkins.io/zh/doc/pipeline/tour/agents/#%E5%AE%9A%E4%B9%89%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83">定义执行环境</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jenkins.io/zh/doc/pipeline/tour/environment/#%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">使用环境变量</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jenkins.io/zh/doc/pipeline/tour/post/#%E6%B8%85%E7%90%86%E5%92%8C%E9%80%9A%E7%9F%A5">清理和通知</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jenkins.io/zh/doc/book/pipeline/jenkinsfile/#%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0">处理参数</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 网络</title>
    <url>/202208301536/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7.9.2009</li>
<li>docker-ce-19.03.15</li>
</ul>
<h1 id="Docker-网络模式"><a href="#Docker-网络模式" class="headerlink" title="Docker 网络模式"></a>Docker 网络模式</h1><h2 id="Bridge-模式"><a href="#Bridge-模式" class="headerlink" title="Bridge 模式"></a>Bridge 模式</h2><p>bridge 模式是 docker 的默认网络模式，不使用 <code>--network</code> 参数，就是 bridge 模式。</p>
<p>当 Docker 进程启动时，会在主机上创建一个名为 docker0 的虚拟网桥，默认主机上启动的 Docker 容器会连接到这个虚拟网桥上。</p>
<p>容器启动时，docker 会从 docker0 网桥的子网中分配一个 IP 地址给容器中的网卡。大体流程为在主机上创建一个 <a href="/202304251611/" title="&#96;veth pair&#96;">&#96;veth pair&#96;</a>，Docker 将 <code>veth pair</code> 的一端放在容器中，命名为 <code>eth0</code> 并配置 IP，网关，路由等信息，将 <code>veth pair</code> 的另一端加入 docker0 网桥。</p>
<p><strong>通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。</strong></p>
<h2 id="Host-模式"><a href="#Host-模式" class="headerlink" title="Host 模式"></a>Host 模式</h2><p><strong>如果启动容器的时候使用 host 模式，那么这个容器将不会获得一个独立的 Network Namespace，而是和宿主机一样在 Root Network Namespace，容器中看到的网络方面的信息和宿主机一样，容器使用的网络资源在整个 Root Network Namespace 不能出现冲突</strong>。容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口，主机名也是使用宿主机的。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p>
<p><strong>host 模式下的容器可以看到宿主机上的所有网卡信息，可以直接使用宿主机 IP 或主机名与外界通信，无需额外的 NAT，也无需通过 Linux bridge 进行转发或者数据包的封装，可以访问主机上的其他任一容器</strong>。</p>
<p>使用如下命令参数启动 host 网络模式的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --network host --name test1 -p 80:80 -d -it centos:centos7.9.2009</span><br></pre></td></tr></table></figure>
<p>host 模式的容器，没有自己的 network namespace，在 root network namespace 中。进入测试容器 <code>test1</code>，查看网卡、 IP 信息及端口、主机名信息，会看到和宿主机一样的信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:e7:c0:27 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default </span><br><span class="line">    link/ether 02:42:f2:1b:dc:ea brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:e7:c0:27 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.142.10/24 brd 192.168.142.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fee7:c027/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:f2:1b:dc:ea brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever    </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">[root@test1 /]<span class="comment"># netstat -anutp</span></span></span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp        0      0 0.0.0.0:81              0.0.0.0:*               LISTEN      124/nginx: master p </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp        0     36 192.168.142.10:22       192.168.142.1:61396     ESTABLISHED -                   </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      -                   </span><br><span class="line">tcp6       0      0 :::81                   :::*                    LISTEN      124/nginx: master p </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      -          </span><br></pre></td></tr></table></figure>

<p>host 模式的缺点</p>
<ul>
<li>容器没有自己的 network namespace ，网络和宿主机或其他使用 host 模式的容器未隔离，容易出现资源冲突，比如同一个宿主机上，使用 host 模式的容器中启动的端口不能相同。</li>
</ul>
<h2 id="None-模式"><a href="#None-模式" class="headerlink" title="None 模式"></a>None 模式</h2><p>使用 none 模式，Docker 容器拥有自己的 Network Namespace，但是，系统并不为 Docker 容器进行任何网络配置。也就是说，这个 Docker 容器没有网卡（lo 回环网卡除外）、IP、路由等信息。需要我们自己为 Docker 容器添加网卡、配置 IP 等。</p>
<p>参考以下命令创建 <code>none</code> 模式的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --network none --name test-none -p 82:80 -d -it centos7:my</span><br></pre></td></tr></table></figure>
<p>容器创建后，进入容器中，查看网卡和 IP 等信息，容器中默认只存在 <code>lo</code> 网卡，不存在其他网卡</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00       </span><br></pre></td></tr></table></figure>
<p>以下操作演示手动为容器配置网络</p>
<ol>
<li><p>创建 <code>veth pair</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link add veth0 type veth peer name veth0_p</span><br></pre></td></tr></table></figure></li>
<li><p>将 <code>veth pair</code> 的一端 <code>veth0</code> 放入 docker 默认的网桥 <code>docker0</code>，另一端 <code>veth0_p</code> 放入容器中</p>
<p>首先使用命令 <code>docker inspect test-none | grep &quot;Pid&quot;</code> 找到容器对应的 PID，此处为 84040，根据此 PID 将 veth 的一端放入容器的 network namespace 中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link set dev veth0 master docker0</span><br><span class="line"></span><br><span class="line">ip link set dev veth0 up</span><br><span class="line"></span><br><span class="line">ip link set veth0_p netns 84040</span><br></pre></td></tr></table></figure>
<p>在宿主机上面检查 <code>veth0</code>，确定其已经加入网桥 <code>docker0</code>，并且 <code>veth0_p</code> 已不在 root network namespace 中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:e7:c0:27 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default </span><br><span class="line">    link/ether 02:42:f2:1b:dc:ea brd ff:ff:ff:ff:ff:ff</span><br><span class="line">12: veth0@if11: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue master docker0 state LOWERLAYERDOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 16:7f:98:d8:9d:dc brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></table></figure>
<p>重新进入容器，检查网卡信息，可以看到容器中已经有了网卡 <code>veth0_p</code>，状态为 <code>DOWN</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -d <span class="built_in">link</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 promiscuity 0 addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">11: veth0_p@if12: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether be:f1:94:9f:b8:c9 brd ff:ff:ff:ff:ff:ff link-netnsid 0 promiscuity 0 </span><br><span class="line">    veth addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535</span><br></pre></td></tr></table></figure>
</li>
<li><p>为容器中的网卡配置 IP 及网关等信息</p>
<p>为了能在宿主机对容器的 network namespace 进行操作，首先需要将容器的 network namespace 暴露出来，之后可以在宿主机通过 network namespace 名称(此处为 84040，可以自定义)操作 network namespace 。<a href="/202304031317/" title="Linux network namespace 参考">Linux network namespace 参考</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> -s /proc/84040/ns/net /var/run/netns/84040</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">ls</span></span></span><br><span class="line">84040 (id: 0)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过 network namespace 名称(此处为 84040)配置容器中网卡的 IP 地址信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip netns exec 84040 ip link set dev veth0_p name eth0</span><br><span class="line">ip netns exec 84040 ip link set dev eth0 up</span><br><span class="line"></span><br><span class="line">ip netns exec 84040 ip add add 172.17.0.10/16 dev eth0</span><br><span class="line"></span><br><span class="line">ip netns exec 84040 ip route add default via 172.17.0.1</span><br></pre></td></tr></table></figure>
<p>进入容器检查网络信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">15: eth0@if16: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 7e:36:b3:20:a1:8c brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.10/16 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip route show</span></span><br><span class="line">default via 172.17.0.1 dev eth0 </span><br><span class="line">172.17.0.0/16 dev eth0 proto kernel scope link src 172.17.0.10       </span><br></pre></td></tr></table></figure>

<p>进入容器测试网络连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping 8.8.8.8</span></span><br><span class="line">PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=1 ttl=127 time=37.4 ms</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=2 ttl=127 time=37.0 ms</span><br><span class="line">^C</span><br><span class="line">--- 8.8.8.8 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1000ms</span><br><span class="line">rtt min/avg/max/mdev = 37.047/37.234/37.422/0.269 ms</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<h2 id="Container-模式"><a href="#Container-模式" class="headerlink" title="Container 模式"></a>Container 模式</h2><p>在创建容器时通过参数 <code>--network container:已运行的容器名称|ID</code> 指定，处于这个模式下的 Docker 容器会共享一个网络栈，这样两个容器之间可以使用 localhost 高效快速通信。<br>Container 网络模式即新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围、主机名等。同样两个容器除了网络方面相同之外，其他的如文件系统、进程列表等还是隔离的。</p>
<blockquote>
<p>Kubernetes 的 POD 网络采用的就是 Docker 的 container 模式网络。</p>
</blockquote>
<h2 id="Macvlan-模式"><a href="#Macvlan-模式" class="headerlink" title="Macvlan 模式"></a>Macvlan 模式</h2><a href="/202304251611/" title="linux macvlan 网卡虚拟化技术">linux macvlan 网卡虚拟化技术</a>

<h2 id="ipvlan-模式"><a href="#ipvlan-模式" class="headerlink" title="ipvlan  模式"></a>ipvlan  模式</h2><p><a href="https://blog.gazer.win/essay/connect-container-networks-to-physical-networks.html">IPVLAN&#x2F;MACVLAN 实现 Docker 和物理局域网络真正互联互通</a></p>
<h1 id="容器网络组网类型"><a href="#容器网络组网类型" class="headerlink" title="容器网络组网类型"></a>容器网络组网类型</h1><p>常见的非主机网络（host network）的容器组网类型有 L2 overlay、L3 overlay、L2 underlay、L3 underlay。</p>
<h2 id="overlay-网络"><a href="#overlay-网络" class="headerlink" title="overlay 网络"></a>overlay 网络</h2><p>overlay 网络，也称为隧道网络或覆盖网络。</p>
<p>overlay 网络是在传统网络（数据链路层、网络层）上虚拟出一个虚拟网络，承载虚拟网络的底层传统网络不再需要进行任何适配和变更。在容器的世界了，底层物理网络只需要承载主机的网络通信，虚拟网络只承载容器网络通信。</p>
<p>overlay 网络的任何协议都要求发送方对报文进行封装（在虚拟网络报文的头部添加底层物理网络的地址信息，以将报文传输到容器所在的节点），接收方对报文进行解封装，使用 UDP 进行封装时，性能损失在 50% 以上，使用 VXLAN 也会有 20%-30% 的损耗。</p>
<p>overlay 网络最大的优点是<strong>适用于几乎所有的网络基础架构，唯一要求是主机 IP 互通</strong>，问题是随着规模的增长，复杂度会随之增加，封包和解封包性能损坏较大且难于定位问题。</p>
<h3 id="L2-overlay"><a href="#L2-overlay" class="headerlink" title="L2 overlay"></a>L2 overlay</h3><p>传统的 L2 网络，通信双方在同一个逻辑网段内，如 172.17.1.10&#x2F;16 和 172.17.2.10&#x2F;16</p>
<p>L2 overlay 是构建在底层物理网络之上的 L2 网络，相较于传统的 L2 网络，L2 overlay 是个 <code>大二层</code>（可以跨越多个数据中心，即可以跨 L3 underlay 进行 L2 通信）。</p>
<p>VXLAN 就是 L2 overlay 网络的典型实现，其通过在 UDP 包中封装原始的 L2 报文，实现了容器的跨主机通信。</p>
<p>L2 overlay 网络的容器可以在任意的宿主机间迁移而不改变其 IP 地址，这种特性使得构建在大二层 overlay 网络上的容器在动态迁移时具有很高的灵活性。</p>
<h3 id="L3-overlay"><a href="#L3-overlay" class="headerlink" title="L3 overlay"></a>L3 overlay</h3><p>L2 overlay 类似于 L2 overlay，但会在节点上增加个网关，每个节点上的容器都在同一个子网内，可以直接进行二层通信。跨接点间的通信只能通过 L3，都会经过网关转发，性能相比于 L2 overlay 弱。优点是跨节点通信的容器可以在不同的网段。</p>
<p>flannel 的 UDP 模式采用的就是 L3 overlay 模式。</p>
<h2 id="underlay-网络"><a href="#underlay-网络" class="headerlink" title="underlay 网络"></a>underlay 网络</h2><p>underlay 网络通常指底层网络，即传统的网络组网，主要要来区别于 overlay 网络。</p>
<h3 id="L2-underlay"><a href="#L2-underlay" class="headerlink" title="L2 underlay"></a>L2 underlay</h3><p>指传统的二层网络。 ipvlan 的 L2 模式属于 L2 underlay 类型的网络</p>
<h3 id="L3-underlay"><a href="#L3-underlay" class="headerlink" title="L3 underlay"></a>L3 underlay</h3><p>指传统的三层网络。</p>
<p>ipvlan 的 L3 模式、flannel 的 host-gw 模式和 Calico 的 BGP 组网都是 L3 underlay 类型的网络</p>
<h1 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h1><p>为了使容器互联，新版本建议将容器加入自定义的<code> Docker 网络</code> 来连接多个容器，而不是使用 <code>--link</code> 参数。</p>
<p>从 Docker 1.10 版本开始，docker daemon 实现了一个内嵌的 DNS server，使容器可以直接通过容器名称通信。方法很简单，只要在创建容器时使用 <code>--name</code> 为容器命名即可。但是使用 Docker DNS 有个限制：只能在 user-defined 网络中使用。也就是说，默认的 bridge 网络是无法使用 DNS 的，所以我们就需要自定义网络。</p>
<p>先创建一个新的 <code>Docker 网络</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create -d bridge my-net</span><br></pre></td></tr></table></figure>
<p><code>-d</code> 参数指定 Docker 网络类型，可选 <code>bridge</code> <code>overlay</code>  </p>
<p>查看 <code>Docker network</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker network <span class="built_in">ls</span></span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">1c751b3a52b9   bridge    bridge    local</span><br><span class="line">f8d9861e5797   host      host      local</span><br><span class="line">2e19366fb323   my-net    bridge    local</span><br><span class="line">4c188c59ff20   none      null      local</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>新建容器并连接到刚刚新建的 <code>Docker network</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -it --name c1 --network my-net centos</span><br><span class="line">docker run -d -it --name c2 --network my-net centos</span><br></pre></td></tr></table></figure>
<p>以上命令运行了 2 个 <code>centos</code> 最新版本的容器，并连接到了刚刚创建的网络： <code>--network my-net </code><br>登录到容器 <code>c1</code>的终端，并 <code>ping</code> 容器 <code>c2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it c1 bash</span></span><br><span class="line">[root@e520d1c8e30b /]# ping c2</span><br><span class="line">PING c2 (172.18.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from c2.my-net (172.18.0.3): icmp_seq=1 ttl=64 time=0.115 ms</span><br><span class="line">64 bytes from c2.my-net (172.18.0.3): icmp_seq=2 ttl=64 time=0.071 ms</span><br><span class="line">^C</span><br><span class="line">--- c2 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.071/0.093/0.115/0.022 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到，容器 <code>c1</code> 可以直接使用容器名 <code>c2</code>，来识别容器 <code>c2</code>，同理，容器 <code>c2</code> 也可以使用同样的方式识别到容器 <code>c1</code>，连接到同一个 <code>Docker network</code> 的容器 <code>c1</code>, <code>c2</code> 可以互相连接<br>使用以下命令，可以查看 <code>Docker network</code> 的详细信息，包括 ip 网段，ip 分配信息等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker network inspect my-net</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;my-net&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;2e19366fb32312235a3571192d1a19e6ebb7adc3e6e25c1f5e6007e8c3315f08&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-08-30T15:44:54.241420767+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;4b6b1159073d3b70312f2b7e5da8c4a36133a6c00c4746fe2c58d37e81a86b12&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;c2&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;0cbe15ff760040d20cd10a04ffed5f4398e1c3c2b597a86461758606ebdc919d&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;e520d1c8e30bf97ece44fae53840d13e801648ca02899a17416a75563d3a64f6&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;c1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;214c7596e2610208402cfa55a225fa67c0dd02d4b585c62b43a9a6c42f360147&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果容器启动时使用了自定义的 <code>Docker network</code>，并且启动过程中挂载了宿主机的 <code>/etc/resolv.conf</code>，则容器启动后无法再使用容器名和其他容器互联，比如使用以下命令启动容器 <code>c3</code>，<code>c3</code> 无法使用容器名和 <code>c1</code>,<code>c2</code> 互联，但是<code>c1</code>,<code>c2</code> 可以使用容器名 <code>c3</code> 连接到容器 <code>c3</code>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -ti --network my-net -v /etc/resolv.conf:/etc/resolv.conf --name c3 centos</span><br></pre></td></tr></table></figure>
<p>以上示例中，如果登录 <code>c1</code> 终端后，修改 <code>/etc/resolv.conf</code> 文件，再次使用 <code>c2</code> ，会无法连接 <code>c2</code> 容器  </p>
</blockquote>
<p>如果容器启动时，需要为容器指定域名 ip 映射关系，可以使用选项 <code>--add-host host:ip</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --network my-net --add-host db:172.18.0.3 --name c3 centos</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>容器运行过程中，可以直接修改容器内的 <code>/etc/hosts</code> 文件</p>
<h1 id="Docker-网络相关问题"><a href="#Docker-网络相关问题" class="headerlink" title="Docker 网络相关问题"></a>Docker 网络相关问题</h1><h2 id="定位-Docker-容器中的网卡和宿主机上面的-veth-的-pair-关系"><a href="#定位-Docker-容器中的网卡和宿主机上面的-veth-的-pair-关系" class="headerlink" title="定位 Docker 容器中的网卡和宿主机上面的 veth 的 pair 关系"></a>定位 Docker 容器中的网卡和宿主机上面的 veth 的 pair 关系</h2><p>在经典容器组网中，主要是使用 <a href="!--swig%EF%BF%BC28--"><code>veth</code></a> + <code>bridge</code> 的模式，容器中的 <code>eth0</code> 实际上和宿主机上面的某个 <code>veth</code> 是成对（pair）关系，要查看容器中的网卡和宿主机上面的 <code>veth</code> 网卡的成对关系，可以参考以下方法</p>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h3><ol>
<li>在目标容器中查看 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /sys/class/net/eth0/iflink </span><br><span class="line">60</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>在宿主机上遍历 <code>/sys/class/net/</code> 下面的全部目录，查看子目录中的 <code>ifindex</code> 文件的内容，找出和容器中 <code>/sys/class/net/eth0/iflink</code> 的值一样的 <code>veth</code> 的名称，这样就找到了容器和主机的 <code>veth pair</code> 的关系 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /sys/class/net/vethc41ba34/ifindex </span><br><span class="line">60</span><br></pre></td></tr></table></figure>
 本示例中，宿主机上的 <code>vethc41ba34</code> 和容器中的网卡是 <code>veth pair</code></li>
</ol>
<h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h3><ol>
<li>目标容器中查看<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> show eth0</span></span><br><span class="line">59: eth0@if60: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default </span><br><span class="line"> link/ether 02:42:ac:16:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></table></figure>
从上面的命令可以看到 <code>59: eth0@if60</code>，其中 <code>59</code> 是 <code>eth0</code> 接口的 index，<code>60</code> 是和它成对的 <code>veth</code> 的 index。</li>
<li>在 host 上面执行下面的命令，可以看到对应 <code>60</code> 的 <code>veth</code> 网卡是哪一个<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link show | grep 60</span><br><span class="line">60: vethc41ba34@if59: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master br-9d2a9fc0ff85 state UP mode DEFAULT group default </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法 3"></a>方法 3</h3><p>通过 <code>ethtool -S</code> 命令列出 <code>veth pair</code> 对端的网卡 index</p>
<ol>
<li>目标容器中执行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ethtool -S eth0</span></span><br><span class="line">NIC statistics:</span><br><span class="line">  peer_ifindex: 60</span><br></pre></td></tr></table></figure></li>
<li>在宿主机上面查找 index 为 60 的 <code>veth</code> 网卡是哪一个<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link show | grep 60</span><br><span class="line">60: vethc41ba34@if59: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master br-9d2a9fc0ff85 state UP mode DEFAULT group default </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 部署 OpenLDAP + phpLDAPadmin 教程</title>
    <url>/202210131557/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ul>
<li>Centos7 3.10.0-1160.76.1</li>
<li>Docker Engine - Community 19.03.15</li>
</ul>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="创建自定义网络"><a href="#创建自定义网络" class="headerlink" title="创建自定义网络"></a>创建自定义网络</h3><p>为了使容器互联，新版本建议将容器加入自定义的 Docker 网络 来连接多个容器，而不是使用 <code>--link</code> 参数。</p>
<p>从 Docker 1.10 版本开始，<code>docker daemon</code> 实现了一个内嵌的 DNS server，使容器可以直接通过容器名称通信。方法很简单，只要在创建容器时使用 <code>--name</code> 为容器命名即可。但是使用 Docker DNS 有个限制：只能在 <code>user-defined</code> 网络中使用。也就是说，默认的 bridge 网络是无法使用 DNS 的，所以我们就需要自定义网络。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create -d bridge docker-network-for-openldap</span><br></pre></td></tr></table></figure>
<p>之后为 LDAP 创建的相关容器，都连接到此网络。</p>
<h3 id="启动-openldap-容器"><a href="#启动-openldap-容器" class="headerlink" title="启动 openldap 容器"></a>启动 openldap 容器</h3><p>为 openldap 容器创建本地持久化数据目录，容器启动时将此目录以数据卷的形式挂载使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /data/OpenLDAPData</span><br></pre></td></tr></table></figure>
<p>启动容器，挂载数据卷，使用自定义网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 389:389 -p 636:636 \</span><br><span class="line">           -v /data/OpenLDAPData:/usr/local/ldap \</span><br><span class="line">           --name openldap \</span><br><span class="line">           --network docker-network-for-openldap  \</span><br><span class="line">           osixia/openldap:1.3.0</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>ldap 默认配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dn     dc=example,dc=org</span><br><span class="line">admin    cn=admin,dc=example,dc=org</span><br><span class="line">password  admin</span><br></pre></td></tr></table></figure>

<p>进入容器验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it openldap bash</span></span><br><span class="line">root@2f49810360ce:/# ldapsearch -x -H ldap://localhost:389 -b dc=example,dc=org -D &quot;cn=admin,dc=example,dc=org&quot; -w admin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">extended LDIF</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># LDAPv3</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">base &lt;dc=example,dc=org&gt; with scope subtree</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">filter: (objectclass=*)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">requesting: ALL</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">example.org</span></span><br><span class="line">dn: dc=example,dc=org</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: dcObject</span><br><span class="line">objectClass: organization</span><br><span class="line">o: Example Inc.</span><br><span class="line">dc: example</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">admin, example.org</span></span><br><span class="line">dn: cn=admin,dc=example,dc=org</span><br><span class="line">objectClass: simpleSecurityObject</span><br><span class="line">objectClass: organizationalRole</span><br><span class="line">cn: admin</span><br><span class="line">description: LDAP administrator</span><br><span class="line">userPassword:: e1NTSEF9NENMcFBvNEQrUlhhcFUxdDRVT1FSUm5SdU0zQnNEdnk=</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">search result</span></span><br><span class="line">search: 2</span><br><span class="line">result: 0 Success</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">numResponses: 3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">numEntries: 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="启动-phpLDAPadmin"><a href="#启动-phpLDAPadmin" class="headerlink" title="启动 phpLDAPadmin"></a>启动 phpLDAPadmin</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -dit -p 8081:80 --name phpLDAPadmin --network docker-network-for-openldap \</span><br><span class="line">            --env PHPLDAPADMIN_HTTPS=false \</span><br><span class="line">            --env PHPLDAPADMIN_LDAP_HOSTS=openldap \</span><br><span class="line">            --restart always \</span><br><span class="line">            osixia/phpldapadmin</span><br></pre></td></tr></table></figure>

<p>浏览器访问相应链接，可登录到 WEB 页面。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://m.studyofnet.com/news/5359.html">Docker搭建OpenLDAP+phpLDAPadmin统一用户认证的方法</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>OpenLDAP</tag>
        <tag>phpLDAPadmin</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 运行 mysql</title>
    <url>/202301181604/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Docker 19.03.15</li>
<li>Mysql 5.7</li>
</ul>
<h1 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7.31</span><br></pre></td></tr></table></figure>

<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>启动容器前先在本地创建 Mysql 数据目录以用来持久化 Mysql 数据，如果需要配置文件，可以在本地创建好配置文件挂载到容器的 <code>/etc/mysql/my.cnf</code>，无需配置文件的话，则只需要将持久化的本地数据目录挂载到容器默认的数据目录 <code>/var/lib/mysql</code>，本示例中 Mysql 本地持久化数据目录为 <code>/opt/docker_mysql_home/data/</code>。使用以下命令启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name mysql -v /opt/docker_mysql_home/data/:/var/lib/mysql/ -p 3306:3306 \</span><br><span class="line">              -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7.31</span><br></pre></td></tr></table></figure>
<p><code>-e MYSQL_ROOT_PASSWORD=123456</code>  通过环境变量配置 Mysql 初始化后的密码</p>
<p>容器启动后，通过以下命令连接数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -h 127.0.0.1 -uroot -p</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch 安装使用及常见错误集锦</title>
    <url>/202303301601/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7 3.10.0-1062.9.1.el7</li>
<li>elasticsearch 8.8.2</li>
</ul>
<h2 id="elasticsearch-下载"><a href="#elasticsearch-下载" class="headerlink" title="elasticsearch 下载"></a>elasticsearch 下载</h2><p><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-6-8-23">elasticsearch 下载页面</a></p>
<h2 id="安装-elasticsearch"><a href="#安装-elasticsearch" class="headerlink" title="安装 elasticsearch"></a>安装 elasticsearch</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.8.2-linux-x86_64.tar.gz</span><br><span class="line">tar -xzf elasticsearch-8.8.2-linux-x86_64.tar.gz</span><br><span class="line">cd elasticsearch-8.8.2/</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure>

<p>首次启动 Elasitcsearch 时，安全特性默认被启用，以下的安全选项会自动配置： <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[安装运行 Elasticsearch](https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html#targz-running)">[2]</span></a></sup></p>
<ul>
<li>认证鉴权功能会被启用，并且会为默认的超级用户 <code>elastic</code> 产生一个密码</li>
<li>生成 TLS 证书，并配置证书以启用 TLS 功能</li>
<li>为 Kibana 产生一个 <code>enrollment key</code>，有效期 30 分钟</li>
</ul>
<p>要以 <code>daemon</code> 的形式运行 Elasticsearch，使用 <code>-d</code> 选项，使用 <code>-p</code> 选项将 PID 记录到一个文件里面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch -d -p pid</span><br></pre></td></tr></table></figure>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rpm.html#install-rpm">RPM 安装 Elasticsearch 官方参考文档</a>。<em><strong>不同版本具有不同的配置，根据版本选择对应配置</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/yum.repos.d/elasticsearch.repo</span></span><br><span class="line">[elasticsearch]</span><br><span class="line">name=Elasticsearch repository for 8.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/8.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=0</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install --enablerepo=elasticsearch elasticsearch</span></span><br></pre></td></tr></table></figure>

<p>配置文件示例</p>
<figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">cluster.name: es-cluster1</span><br><span class="line">node.name: es-cluster1-node1</span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/log/elasticsearch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多网卡情况下，建议指定 IP 地址，以防止集群使用网络不通的 IP。如果需要监听多个 IP 地址，使用配置 network.host: [<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;192.168.1.1&quot;</span>]</span> </span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line"></span><br><span class="line">discovery.seed_hosts: [&quot;172.31.26.116&quot;, &quot;172.31.19.164&quot;, &quot;172.31.21.3&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;es-cluster1-node1&quot;, &quot;es-cluster1-node2&quot;, &quot;es-cluster1-node3&quot;]</span><br><span class="line"></span><br><span class="line">xpack.security.enabled: false</span><br><span class="line">xpack.security.enrollment.enabled: false</span><br><span class="line">xpack.security.transport.ssl.enabled: false</span><br><span class="line">xpack.security.http.ssl.enabled: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="加入节点到集群"><a href="#加入节点到集群" class="headerlink" title="加入节点到集群"></a>加入节点到集群</h2><p>默认情况下，只有同一个主机上的节点才能在 <em>没有其他配置的情况下</em> 加入到集群。如果要让另一个主机上的节点加入到新启动的节点的集群中，需要更改配置，首先要修改 Elasticsearch 的监听地址，确保另一台主机能连接它（不是默认监听的 <code>localhost</code>） <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[安装运行 Elasticsearch](https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html#targz-running)">[2]</span></a></sup></p>
<h3 id="加入开启了安全功能的集群"><a href="#加入开启了安全功能的集群" class="headerlink" title="加入开启了安全功能的集群"></a>加入开启了安全功能的集群</h3><p>要将新节点加入到开启了安全功能的集群，首先要创建一个 <code>enrollment token</code>。在集群中的任一节点上执行以下命令，创建 <code>enrollment token</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/elasticsearch-create-enrollment-token -s node</span><br></pre></td></tr></table></figure>
<p>在<em><strong>要加入集群的节点上</strong></em>，使用以下命令启动 Elasticsearch，使用 <code>--enrollment-token</code> 传递 <code>enrollment token</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/elasticsearch --enrollment-token &lt;enrollment-token&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>新节点上的 Elasticsearch 会自动在 <code>config/certs</code> 下面生成证书和 Key</p>
<span id="more"></span>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="Elasticsearch-启动失败"><a href="#Elasticsearch-启动失败" class="headerlink" title="Elasticsearch 启动失败"></a>Elasticsearch 启动失败</h2><h3 id="Caused-by-java-io-IOException-failed-to-read-id-2-file-x2F-var-x2F-lib-x2F-elasticsearch-x2F-nodes-x2F-0-x2F-state-x2F-node-2-st"><a href="#Caused-by-java-io-IOException-failed-to-read-id-2-file-x2F-var-x2F-lib-x2F-elasticsearch-x2F-nodes-x2F-0-x2F-state-x2F-node-2-st" class="headerlink" title="Caused by: java.io.IOException: failed to read [id:2, file:&#x2F;var&#x2F;lib&#x2F;elasticsearch&#x2F;nodes&#x2F;0&#x2F;_state&#x2F;node-2.st]"></a>Caused by: java.io.IOException: failed to read [id:2, file:&#x2F;var&#x2F;lib&#x2F;elasticsearch&#x2F;nodes&#x2F;0&#x2F;_state&#x2F;node-2.st]</h3><p>启动报错，手动执行启动程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - elasticsearch -c /usr/share/elasticsearch/bin/elasticsearch</span><br></pre></td></tr></table></figure>
<p>启动报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2023-03-30T16:20:28,458][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [node-1] uncaught exception in thread [main]</span><br><span class="line">org.elasticsearch.bootstrap.StartupException: ElasticsearchException[java.io.IOException: failed to read [id:2, file:/var/lib/elasticsearch/nodes/0/_state/node-2.st]]; nested: IOException[failed to read [id:2, file:/var/lib/elasticsearch/nodes/0/_state/node-2.st]]; nested: XContentParseException[[-1:36] [node_meta_data] unknown field [node_version], parser not found];</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:163) ~[elasticsearch-6.8.23.jar:6.8.23]</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:150) ~[elasticsearch-6.8.23.jar:6.8.23]</span><br><span class="line">	at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[elasticsearch-6.8.23.jar:6.8.23]</span><br><span class="line">	at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[elasticsearch-cli-6.8.23.jar:6.8.23]</span><br><span class="line">	at org.elasticsearch.cli.Command.main(Command.java:90) ~[elasticsearch-cli-6.8.23.jar:6.8.23]</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:116) ~[elasticsearch-6.8.23.jar:6.8.23]</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93) ~[elasticsearch-6.8.23.jar:6.8.23]</span><br><span class="line">Caused by: org.elasticsearch.ElasticsearchException: java.io.IOException: failed to read [id:2, file:/var/lib/elasticsearch/nodes/0/_state/node-2.st]</span><br></pre></td></tr></table></figure>

<p><strong>问题原因</strong></p>
<p>系统安装过其他版本的 elasticsearch，卸载后重新安装，报这个错误，可能是因为版本之间的数据不兼容，重新卸载 elasticsearch，并删除以下数据，重新安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove elasticsearch</span><br><span class="line"></span><br><span class="line">rm -rf /etc/elasticsearch/</span><br><span class="line">rm -rf /var/lib/elasticsearch/</span><br><span class="line">rm -rf /usr/share/elasticsearch</span><br><span class="line"></span><br><span class="line">yum install -y elasticsearch-8.8.23.rpm</span><br></pre></td></tr></table></figure>

<h3 id="bootstrap-check-failure"><a href="#bootstrap-check-failure" class="headerlink" title="bootstrap check failure"></a>bootstrap check failure</h3><p>Elasticsearch 启动报错：</p>
<figure class="highlight plaintext"><figcaption><span>validation exception</span></figcaption><table><tr><td class="code"><pre><span class="line">[1] bootstrap checks failed. You must address the points described in the following [1] lines before starting Elasticsearch.</span><br><span class="line">bootstrap check failure [1] of [1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure>

<p><strong>错误原因</strong> 是因为 <code>vm.max_map_count</code> 的值过低。这个值是系统限制，控制了<em><strong>单个进程可以拥有的虚拟内存区域的最大数量</strong></em>。</p>
<p>使用以下命令修改此值，要持久化配置，需要写入内核配置文件 <code>/etc/sysctl.conf</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure>

<h3 id="bootstrap-check-failure-1"><a href="#bootstrap-check-failure-1" class="headerlink" title="bootstrap check failure"></a>bootstrap check failure</h3><p>Elasticsearch 启动报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node validation exception</span><br><span class="line">[1] bootstrap checks failed. You must address the points described in the following [1] lines before starting Elasticsearch.</span><br><span class="line">bootstrap check failure [1] of [1]: Transport SSL must be enabled if security is enabled. Please set [xpack.security.transport.ssl.enabled] to [true] or disable security by setting [xpack.security.enabled] to [false]</span><br></pre></td></tr></table></figure>

<p>安全配置不全，如果无需安全相关配置，使用以下配置关闭</p>
<figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">xpack.security.enabled: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="keystore-password-was-incorrect"><a href="#keystore-password-was-incorrect" class="headerlink" title="keystore password was incorrect"></a>keystore password was incorrect</h3><p>Elasticsearch 启动失败，检查日志，报错如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Caused by: org.elasticsearch.common.ssl.SslConfigException: cannot read configured [PKCS12] keystore (as a truststore) [/etc/elasticsearch/certs/elastic-certificates.p12] - this is usually caused by an incorrect password; (a keystore password was provided)</span><br><span class="line">	at org.elasticsearch.common.ssl.SslFileUtil.ioException(SslFileUtil.java:56) ~[?:?]</span><br><span class="line">	at org.elasticsearch.common.ssl.StoreTrustConfig.readKeyStore(StoreTrustConfig.java:98) ~[?:?]</span><br><span class="line">	at org.elasticsearch.common.ssl.StoreTrustConfig.createTrustManager(StoreTrustConfig.java:82) ~[?:?]</span><br><span class="line">	at org.elasticsearch.xpack.core.ssl.SSLService.createSslContext(SSLService.java:476) ~[?:?]</span><br><span class="line">	at java.util.HashMap.computeIfAbsent(HashMap.java:1228) ~[?:?]</span><br><span class="line">	at org.elasticsearch.xpack.core.ssl.SSLService.lambda$loadSslConfigurations$11(SSLService.java:615) ~[?:?]</span><br><span class="line">	... 23 more</span><br><span class="line">Caused by: java.io.IOException: keystore password was incorrect</span><br></pre></td></tr></table></figure>

<p><em><strong>问题原因</strong></em> Elasticsearch 启用了安全特性，但是获取到的 TSL&#x2F;SSL 证书及密钥的解密密码不对。例如以下安全相关配置中，节点之间通信使用了安全认证(<code>xpack.security.transport.ssl.enabled: true</code>)，以及对应证书(<code>certs/elastic-certificates.p12</code>)，本示例此证书未加密，没有解密密码。如果 Elasticsearch 启动时使用了解密的密码不为空或错误，可能导致此错误。</p>
<figure class="highlight shell"><figcaption><span>/etc/elasticsearch/elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.security.enrollment.enabled: false</span><br><span class="line">xpack.security.http.ssl.enabled: false</span><br><span class="line"></span><br><span class="line">xpack.security.transport.ssl:</span><br><span class="line">  enabled: true</span><br><span class="line">  verification_mode: certificate</span><br><span class="line">  keystore.path: certs/elastic-certificates.p12</span><br><span class="line">  truststore.path: certs/elastic-certificates.p12</span><br></pre></td></tr></table></figure>

<p>Elasticsearch 解密证书使用的密码默认在 <code>/etc/elasticsearch/elasticsearch.keystore</code>。密码使用以下命令更新，如果密码为空，直接使用 <code>Enter</code> 键即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password</span></span><br><span class="line">Setting xpack.security.transport.ssl.keystore.secure_password already exists. Overwrite? [y/N]y</span><br><span class="line">Enter value for xpack.security.transport.ssl.keystore.secure_password:</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password</span></span><br><span class="line">Setting xpack.security.transport.ssl.truststore.secure_password already exists. Overwrite? [y/N]y</span><br><span class="line">Enter value for xpack.security.transport.ssl.truststore.secure_password:</span><br></pre></td></tr></table></figure>

<p>如果要更新客户端使用的证书(<code>xpack.security.http.ssl</code>)解码密码，使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password</span><br><span class="line"></span><br><span class="line">elasticsearch-keystore add xpack.security.http.ssl.truststore.secure_password</span><br></pre></td></tr></table></figure>

<h3 id="AccessDeniedException"><a href="#AccessDeniedException" class="headerlink" title="AccessDeniedException"></a>AccessDeniedException</h3><p>Elasticsearch 服务启动失败，检查日志内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Caused by: org.elasticsearch.common.ssl.SslConfigException: not permitted to read the [PKCS12] keystore (as a truststore) file [/etc/elasticsearch/certs/elastic-certificates.p12]</span><br><span class="line">	at org.elasticsearch.common.ssl.SslFileUtil.accessDenied(SslFileUtil.java:77) ~[?:?]</span><br><span class="line">	at org.elasticsearch.common.ssl.SslFileUtil.ioException(SslFileUtil.java:40) ~[?:?]</span><br><span class="line">	at org.elasticsearch.common.ssl.StoreTrustConfig.readKeyStore(StoreTrustConfig.java:98) ~[?:?]</span><br><span class="line">	at org.elasticsearch.common.ssl.StoreTrustConfig.createTrustManager(StoreTrustConfig.java:82) ~[?:?]</span><br><span class="line">	at org.elasticsearch.xpack.core.ssl.SSLService.createSslContext(SSLService.java:476) ~[?:?]</span><br><span class="line">	at java.util.HashMap.computeIfAbsent(HashMap.java:1228) ~[?:?]</span><br><span class="line">	at org.elasticsearch.xpack.core.ssl.SSLService.lambda$loadSslConfigurations$11(SSLService.java:615) ~[?:?]</span><br><span class="line">	... 23 more</span><br><span class="line">Caused by: java.nio.file.AccessDeniedException: /etc/elasticsearch/certs/elastic-certificates.p12</span><br></pre></td></tr></table></figure>
<p>从日志可知，问题原因为配置文件无权限读取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ll /etc/elasticsearch/certs/</span></span><br><span class="line">total 32</span><br><span class="line">-rw-------. 1 root root           3596 Jul 27 16:04 elastic-certificates.p12</span><br><span class="line">-rw-------. 1 root root           2672 Jul 27 16:01 elastic-stack-ca.p12</span><br><span class="line">-rw-rw----. 1 root elasticsearch  1915 Jul 20 14:56 http_ca.crt</span><br><span class="line">-rw-rw----. 1 root elasticsearch 10189 Jul 20 14:56 http.p12</span><br><span class="line">-rw-rw----. 1 root elasticsearch  5838 Jul 20 14:56 transport.p12</span><br></pre></td></tr></table></figure>
<p>执行以下命令，修改配置路径权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 660 /etc/elasticsearch/certs/*</span><br><span class="line">chown root:elasticsearch /etc/elasticsearch/certs/*</span><br></pre></td></tr></table></figure>

<h2 id="配置相关问题"><a href="#配置相关问题" class="headerlink" title="配置相关问题"></a>配置相关问题</h2><h3 id="Empty-reply-from-server"><a href="#Empty-reply-from-server" class="headerlink" title="Empty reply from server"></a>Empty reply from server</h3><p>参考 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/running-elasticsearch.html">官方文档中的安装方式安装运行 Elasticsearch</a>。使用以下请求测试 Elasticsearch 是否启动成功</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;http://localhost:9200/?pretty&#x27;</span></span><br><span class="line">curl: (<span class="number">52</span>) Empty reply <span class="keyword">from</span> server</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看 Elasticsearch 日志</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ tail elasticsearch.log </span><br><span class="line">[<span class="number">2023</span>-07-18T01:<span class="number">12</span>:<span class="number">10</span>,<span class="number">126</span>][WARN ][o.e.h.n.Netty4HttpServerTransport] [b5f96e32c638] received plaintext http traffic on an https channel, closing connection Netty4HttpChannel&#123;localAddress=/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9200</span>, remoteAddress=/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">58504</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-07-18T01:<span class="number">12</span>:<span class="number">19</span>,<span class="number">317</span>][WARN ][o.e.h.n.Netty4HttpServerTransport] [b5f96e32c638] received plaintext http traffic on an https channel, closing connection Netty4HttpChannel&#123;localAddress=/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9200</span>, remoteAddress=/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">38916</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据日志中显示的信息可知，<code>curl: (52) Empty reply from server</code> 是因为 <strong>Elasticsearch 服务配置为使用了 HTTPS，而客户端请求使用的是 HTTP 明文传输，为了确保安全性，Elasticsearch 服务关闭了这些在 HTTPS 通道上的 HTTP 请求</strong>。针对此问题，可以参考以下解决方法</p>
<ul>
<li>客户端使用 HTTPS 请求，并配置跳过证书认证  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ curl -k <span class="string">&#x27;https://localhost:9200/?pretty&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;error&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;root_cause&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span> : <span class="string">&quot;security_exception&quot;</span>,</span><br><span class="line">        <span class="string">&quot;reason&quot;</span> : <span class="string">&quot;missing authentication credentials for REST request [/?pretty]&quot;</span>,</span><br><span class="line">        <span class="string">&quot;header&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;WWW-Authenticate&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Bearer realm=\&quot;security\&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ApiKey&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;type&quot;</span> : <span class="string">&quot;security_exception&quot;</span>,</span><br><span class="line">    <span class="string">&quot;reason&quot;</span> : <span class="string">&quot;missing authentication credentials for REST request [/?pretty]&quot;</span>,</span><br><span class="line">    <span class="string">&quot;header&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;WWW-Authenticate&quot;</span> : [</span><br><span class="line">        <span class="string">&quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Bearer realm=\&quot;security\&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ApiKey&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;status&quot;</span> : <span class="number">401</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>关闭 Elasticsearch 的 HTTPS，使用 HTTP 通信<br>  修改配置文件 <code>elasticsearch.yml</code>，重启 Elasticsearch 服务后使用 HTTP 请求，<a href="https://csms.tech/202307171638/#安全相关配置">相关配置说明参考</a>  <figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">xpack.security.enabled: false   # 改为 false</span><br><span class="line"></span><br><span class="line">xpack.security.enrollment.enabled: false  # 改为 false</span><br><span class="line"></span><br><span class="line">xpack.security.http.ssl:</span><br><span class="line">  enabled: false      # 改为 false</span><br><span class="line">  keystore.path: certs/http.p12</span><br><span class="line">xpack.security.transport.ssl:</span><br><span class="line">  enabled: false      # 改为 false</span><br><span class="line">  verification_mode: certificate</span><br><span class="line">  keystore.path: certs/transport.p12</span><br><span class="line">  truststore.path: certs/transport.p12</span><br><span class="line"></span><br></pre></td></tr></table></figure>
重新使用 HTTP 请求，即可得到响应  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;http://localhost:9200/?pretty&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;error&quot; : &#123;</span><br><span class="line">    &quot;root_cause&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">        &quot;reason&quot; : &quot;missing authentication credentials for REST request [/?pretty]&quot;,</span><br><span class="line">        &quot;header&quot; : &#123;</span><br><span class="line">          &quot;WWW-Authenticate&quot; : [</span><br><span class="line">            &quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;,</span><br><span class="line">            &quot;ApiKey&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">    &quot;reason&quot; : &quot;missing authentication credentials for REST request [/?pretty]&quot;,</span><br><span class="line">    &quot;header&quot; : &#123;</span><br><span class="line">      &quot;WWW-Authenticate&quot; : [</span><br><span class="line">        &quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;,</span><br><span class="line">        &quot;ApiKey&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot; : 401</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="missing-authentication-credentials-for-REST-request"><a href="#missing-authentication-credentials-for-REST-request" class="headerlink" title="missing authentication credentials for REST request"></a>missing authentication credentials for REST request</h3><p>请求 Elasticsearch 时，返回以下错误: <code>missing authentication credentials for REST request</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;http://localhost:9200/?pretty&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;error&quot; : &#123;</span><br><span class="line">    &quot;root_cause&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">        &quot;reason&quot; : &quot;missing authentication credentials for REST request [/?pretty]&quot;,</span><br><span class="line">        &quot;header&quot; : &#123;</span><br><span class="line">          &quot;WWW-Authenticate&quot; : [</span><br><span class="line">            &quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;,</span><br><span class="line">            &quot;ApiKey&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">    &quot;reason&quot; : &quot;missing authentication credentials for REST request [/?pretty]&quot;,</span><br><span class="line">    &quot;header&quot; : &#123;</span><br><span class="line">      &quot;WWW-Authenticate&quot; : [</span><br><span class="line">        &quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;,</span><br><span class="line">        &quot;ApiKey&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot; : 401</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>这个错误表示尝试在 Elasticsearch 上执行一个需要身份验证的请求，但没有提供正确的凭据。Elasticsearch 需要进行身份验证才能访问相关的端点。</strong></p>
<p>有两种常见的身份验证方式可以使用：<strong>基本身份验证（Basic Authentication）</strong> 和 <strong>API 密钥（API Key）</strong>。根据响应头部的提示，你可以使用其中一种方式来提供正确的身份验证凭据。</p>
<ul>
<li><p><strong>基本身份验证（Basic Authentication）</strong></p>
<p>  对于基本身份验证，可以在 URL 请求中包含用户名和密码，例如：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -u username:password &#x27;http://localhost:9200/?pretty&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>API 密钥（API Key）</strong></p>
<p>  对于 API 密钥身份验证，你需要将 API 密钥放置在请求的头部。</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H &#x27;Authorization: ApiKey YOUR_API_KEY&#x27; &#x27;http://localhost:9200/?pretty&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>关闭身份验证</strong><br>  要关闭 Elasticsearch 的身份认证功能，需要修改配置文件 <code>elasticsearch.yml</code>，修改以下配置，关闭认证功能</p>
  <figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">xpack.security.enabled: false</span><br></pre></td></tr></table></figure>
<p> 重启 Elasticsearch 后重新请求</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;http://localhost:9200/?pretty&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;b5f96e32c638&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;UAiC0qVVT-Ov4nJFvoE1HA&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;8.8.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;tar&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;98e1271edf932a480e4262a471281f1ee295ce6b&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2023-06-26T05:16:16.196344851Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;9.6.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;7.17.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;7.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="application-x2F-x-www-form-urlencoded"><a href="#application-x2F-x-www-form-urlencoded" class="headerlink" title="application&#x2F;x-www-form-urlencoded"></a>application&#x2F;x-www-form-urlencoded</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -X PUT <span class="string">&#x27;localhost:9200/blogs&#x27;</span> -d <span class="string">&#x27;&#123;&quot;settings&quot;: &#123;&quot;number_of_shards&quot;: 3, &quot;number_of_replicas&quot;: 1&#125;&#125;&#x27;</span></span></span><br><span class="line">&#123;&quot;error&quot;:&quot;Content-Type header [application/x-www-form-urlencoded] is not supported&quot;,&quot;status&quot;:406&#125;</span><br></pre></td></tr></table></figure>

<p><strong>错误原因</strong> 没有在 <code>curl</code> 命令中指定正确的内容类型。解决方法为 使用 <code>-H</code> 参数来设置正确的内容类型为 <code>application/json</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -X PUT <span class="string">&#x27;localhost:9200/blogs&#x27;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;settings&quot;: &#123;&quot;number_of_shards&quot;: 3, &quot;number_of_replicas&quot;: 1&#125;&#125;&#x27;</span></span></span><br><span class="line">&#123;&quot;acknowledged&quot;:true,&quot;shards_acknowledged&quot;:true,&quot;index&quot;:&quot;blogs&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="write-index-for-data-stream"><a href="#write-index-for-data-stream" class="headerlink" title="write index for data stream"></a>write index for data stream</h3><p>直接删除索引失败</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ curl -<span class="variable constant_">XDELETE</span> <span class="attr">localhost</span>:<span class="number">9200</span>/.<span class="property">ds</span>-logs-generic-<span class="keyword">default</span>-<span class="number">2023.07</span><span class="number">.21</span>-<span class="number">000001</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;error&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;root_cause&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span> : <span class="string">&quot;illegal_argument_exception&quot;</span>,</span><br><span class="line">        <span class="string">&quot;reason&quot;</span> : <span class="string">&quot;index [.ds-logs-generic-default-2023.07.21-000001] is the write index for data stream [logs-generic-default] and cannot be deleted&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;type&quot;</span> : <span class="string">&quot;illegal_argument_exception&quot;</span>,</span><br><span class="line">    <span class="string">&quot;reason&quot;</span> : <span class="string">&quot;index [.ds-logs-generic-default-2023.07.21-000001] is the write index for data stream [logs-generic-default] and cannot be deleted&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;status&quot;</span> : <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要报错信息 <code>index [.ds-logs-generic-default-2023.07.21-000001] is the write index for data stream [logs-generic-default] and cannot be deleted</code></p>
<p><em><strong>问题原因</strong></em> <strong><code>data stream</code> (数据流) 是 Elasticsearch 中用于管理时间序列数据的功能，它会自动创建和管理多个索引，包括索引写入和滚动索引</strong>。<code>data stream</code> (数据流) 有一个或者多个写入索引，用于实际写入和索引数据。<em><strong>由于数据流是一种时间序列的数据存储方式，不应该直接删除写入索引</strong></em>。<em>如果想要删除一个数据流，应该通过删除整个数据流来实现，而不是单独的删除写入索引</em></p>
<p>要删除一个 <code>data stream</code> (数据流)，参考以下 API</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ curl -<span class="variable constant_">XDELETE</span> <span class="attr">localhost</span>:<span class="number">9200</span>/_data_stream/logs-generic-<span class="keyword">default</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>





<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.8/setup.html">官方文档</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.8/setup.html">官方文档</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html#targz-running">安装运行 Elasticsearch</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK 常见错误</title>
    <url>/202312151503/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="filebeat-上传数据到-elasticsearch-问题汇总"><a href="#filebeat-上传数据到-elasticsearch-问题汇总" class="headerlink" title="filebeat 上传数据到 elasticsearch 问题汇总"></a>filebeat 上传数据到 elasticsearch 问题汇总</h1><h2 id="filebeat-上传数据到-elasticsearch-报错"><a href="#filebeat-上传数据到-elasticsearch-报错" class="headerlink" title="filebeat 上传数据到 elasticsearch 报错"></a>filebeat 上传数据到 elasticsearch 报错</h2><blockquote>
<p>适用版本信息说明</p>
<ul>
<li>filebeat 7</li>
<li>elasticsearch 7</li>
</ul>
</blockquote>
<p>filebeat 7.5.2 上传数据到 Elasticsearch 报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">journalctl -f -u filebeat</span></span><br><span class="line">&#123;&quot;type&quot;:&quot;illegal_argument_exception&quot;,&quot;reason&quot;:&quot;Validation Failed: 1: this action would add [2] total shards, but this cluster currently has [6924]/[3000] maximum shards open;&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>此错误原因是由于 Elasticsearch 的集群中打开的分片数量超过了集群的最大分片限制。在 Elasticsearch 中，每个索引由多个分片组成，而集群有一个设置的最大分片数限制。这个限制是为了防止分片数过多导致性能问题。</p>
<p>错误消息 <code>&#123;&quot;type&quot;:&quot;illegal_argument_exception&quot;,&quot;reason&quot;:&quot;Validation Failed: 1: this action would add [2] total shards, but this cluster currently has [6924]/[3000] maximum shards open;&quot;&#125;</code> 显示当前集群已有 6924 个分片，超过了 3000 个的限制。</p>
<p>要解决这个问题，可以考虑以下几个选项：</p>
<ol>
<li><p><em><strong>调整 Elasticsearch 集群设置，增加最大分片数限制</strong></em></p>
<p> 可以通过更改 Elasticsearch 配置来增加最大分片数的限制。但请注意，这可能会导致性能问题，尤其是如果硬件资源有限的话。</p>
<p>   这可以通过修改 <code>cluster.max_shards_per_node</code> 设置来实现</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  &quot;persistent&quot;: &#123;</span><br><span class="line">    &quot;cluster.max_shards_per_node&quot;: &quot;新的分片数限制&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取  Elasticsearch 集群的最大分片数限制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X GET &quot;http://[your_elasticsearch_host]:9200/_cluster/settings?include_defaults=true&amp;pretty&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><em><strong>删除一些不必要的索引</strong></em> :如果有些索引不再需要，可以删除它们来减少分片数。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X DELETE &quot;localhost:9200/my_index&quot;</span><br><span class="line">curl -X DELETE &quot;localhost:9200/logstash-2021.11.*&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><em><strong>合并一些小索引</strong></em>：如果有很多小的索引，可以考虑将它们合并为更大的索引，以减少总分片数。</p>
</li>
<li><p><em><strong>优化现有索引的分片策略</strong></em>：可以优化索引的分片数量，例如，通过减少每个索引的主分片数量。</p>
</li>
</ol>
<h1 id="filebeat-错误"><a href="#filebeat-错误" class="headerlink" title="filebeat 错误"></a>filebeat 错误</h1><h2 id="filebeat-配置上传数据到-elasticsearch-报错"><a href="#filebeat-配置上传数据到-elasticsearch-报错" class="headerlink" title="filebeat 配置上传数据到 elasticsearch 报错"></a>filebeat 配置上传数据到 elasticsearch 报错</h2><blockquote>
<p>适用版本信息说明</p>
<ul>
<li>filebeat 7</li>
<li>elasticsearch 7</li>
</ul>
</blockquote>
<p>使用以下 filebeat 配置文件</p>
<figure class="highlight shell"><figcaption><span>/etc/filebeat/filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /home/logs/laravel-2023*</span><br><span class="line">  tags: [&quot;admin-log&quot;]</span><br><span class="line">  close_timeout: 3h</span><br><span class="line">  clean_inactive: 72h</span><br><span class="line">  ignore_older: 70h</span><br><span class="line">  close_inactive: 5m</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;1.56.219.122:9200&quot;, &quot;1.57.115.214:9200&quot;, &quot;1.52.53.31:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;passwd&quot;</span><br><span class="line">  index: &quot;logstash-admin-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">setup.template.enabled: true</span><br><span class="line">setup.template.name: &quot;logstash-admin&quot;</span><br><span class="line">setup.template.pattern: &quot;logstash-admin-*&quot;</span><br></pre></td></tr></table></figure>
<p>filebeat 启动后报错，elasticsearch 上未创建相应的索引，关键错误信息 <code>Failed to connect to backoff(elasticsearch(http://1.57.115.214:9200)): Connection marked as failed because the onConnect callback failed: resource &#39;filebeat-7.5.2&#39; exists, but it is not an alias</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl -f -u filebeat</span><br><span class="line">INFO        [index-management]        idxmgmt/std.go:269        ILM policy successfully loaded.</span><br><span class="line">ERROR        pipeline/output.go:100        Failed to connect to backoff(elasticsearch(http://1.57.115.214:9200)): Connection marked as failed because the onConnect callback failed: resource &#x27;filebeat-7.5.2&#x27; exists, but it is not an alias</span><br><span class="line">INFO        pipeline/output.go:93        Attempting to reconnect to backoff(elasticsearch(http://1.57.115.214:9200)) with 3 reconnect attempt(s)</span><br><span class="line">INFO        elasticsearch/client.go:753        Attempting to connect to Elasticsearch version 7.6.2</span><br><span class="line">INFO        [index-management]        idxmgmt/std.go:256        Auto ILM enable success.</span><br><span class="line">INFO        [index-management.ilm]        ilm/std.go:138        do not generate ilm policy: exists=true, overwrite=false</span><br><span class="line">INFO        [index-management]        idxmgmt/std.go:269        ILM policy successfully loaded.</span><br><span class="line">ERROR        pipeline/output.go:100        Failed to connect to backoff(elasticsearch(http://1.56.219.122:9200)): Connection marked as failed because the onConnect callback failed: resource &#x27;filebeat-7.5.2&#x27; exists, but it is not an alias</span><br><span class="line">INFO        pipeline/output.go:93        Attempting to reconnect to backoff(elasticsearch(http://1.56.219.122:9200)) with 3 reconnect attempt(s)</span><br></pre></td></tr></table></figure>

<p>这表明 Filebeat 无法正常连接到 Elasticsearch 集群。出现这个问题的主要原因可能为： </p>
<ul>
<li><p><em><strong>索引&#x2F;别名冲突</strong></em>: Filebeat 试图创建或使用一个名为 <code>filebeat-7.5.2</code> 的索引或别名，但这个资源在 Elasticsearch 中已存在且不是一个别名。解决方法为 <em><strong>删除或重命名冲突索引</strong></em></p>
</li>
<li><p><em><strong>ILM 配置问题</strong></em> </p>
<p>使用此配置文件，解决 <em><strong>索引&#x2F;别名冲突</strong></em> 问题后，filebeat 运行正常，但是 Elasticsearch 上未创建配置中的索引 <code>logstash-admin-*</code>，而是将数据上传到了索引 <code>filebeat-7.5.2-*</code>。这个问题是由 <code>ILM</code> 导致，可以禁用 <code>ILM</code>。参考以下配置，禁用 <code>ILM</code> (<code>setup.ilm.enabled: false</code>)</p>
 <figure class="highlight shell"><figcaption><span>/etc/filebeat/filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /home/logs/laravel-2023*</span><br><span class="line">  tags: [&quot;admin-log&quot;]</span><br><span class="line">  close_timeout: 3h</span><br><span class="line">  clean_inactive: 72h</span><br><span class="line">  ignore_older: 70h</span><br><span class="line">  close_inactive: 5m</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;1.56.219.122:9200&quot;, &quot;1.57.115.214:9200&quot;, &quot;1.52.53.31:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;passwd&quot;</span><br><span class="line">  index: &quot;logstash-admin-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">setup.ilm.enabled: false</span><br><span class="line">setup.template.enabled: true</span><br><span class="line">setup.template.name: &quot;logstash-admin&quot;</span><br><span class="line">setup.template.pattern: &quot;logstash-admin-*&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>英语单词</title>
    <url>/202401221722/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>English Word !</p>
<span id="more"></span>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">manner manner  方式 方法  effective manner , different manner  态度  friendly manner</span><br><span class="line">approach</span><br><span class="line"></span><br><span class="line">steady  稳定的 平稳的 稳固的 v.  使平稳 使稳固   steady economic growth</span><br><span class="line">stable</span><br><span class="line"></span><br><span class="line">economic  [ˌiːkəˈnɑːmɪk]   adj. 经济的，经济学的，经济上的</span><br><span class="line">economy /ɪˈkɑːnəmi/    经济，经济情况</span><br><span class="line"></span><br><span class="line">abandon  v.  （不顾责任、义务等）离弃，遗弃，抛弃 ；  The baby had been abandoned by his mother;   He abandoned his wife and took all their money.</span><br><span class="line">             不得已而）舍弃，丢弃，离开     Snow forced many drivers to abandon their vehicles.</span><br><span class="line">			 </span><br><span class="line">tempt  v. 引诱 ，诱惑，怂恿，利诱，劝诱，鼓动</span><br><span class="line"></span><br><span class="line">tempting  adj.  诱人的，有吸引力的，吸引人的</span><br><span class="line"></span><br><span class="line">fledge  长出羽毛，长出翅膀</span><br><span class="line">fledged 羽翼已丰的，成熟的   full fledged	</span><br><span class="line"></span><br><span class="line">geometry /dʒiˈɑːmətri/	 几何学，几何形状，几何图形	 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">corruption /kəˈrʌpʃn/  贪污，受贿，腐败，贿赂     disk geometry corruption</span><br><span class="line"></span><br><span class="line">corrupt  /kəˈrʌpt/  v. 损害，破坏；使堕落，使腐化；引起(计算机文件等的)错误</span><br><span class="line">                    adj.  腐败的，贪污的，受贿的，</span><br><span class="line"></span><br><span class="line">terrify   使害怕，使惊恐，使恐惧</span><br><span class="line">terrifying  恐惧的，害怕的，吓人的     It was a terrifying experience</span><br><span class="line"></span><br><span class="line">spike  尖状物，尖刺，尖峰；(赛跑用的)钉鞋       disk letency spikes</span><br><span class="line">		 </span><br><span class="line">tear  /ter/   v.  撕裂，撕开，撕碎，扯开；撕掉，拔掉，扯掉，扯开   torn  /tɔːrn/   Someone has torn a page out of this book.</span><br><span class="line">      /tɪr/              n.  眼泪，泪水，泪珠 </span><br><span class="line">					tear down  拆毁，拆除</span><br><span class="line">					tear off   胡乱地）脱掉，扯下（衣服）		 </span><br><span class="line"></span><br><span class="line">disarm /dɪsˈɑːrm/  缴...的械，解除...武装，消除…的杀伤力    Disarm the alerm</span><br><span class="line"></span><br><span class="line">transport 运送，输送，运输，传送，  air/flight/road transport   </span><br><span class="line"></span><br><span class="line">frame  (图画、门、玻璃等的)框架，帧，眼镜框 ，(家具、建筑物、车辆等的)构架，支架，骨架;</span><br><span class="line"></span><br><span class="line">-------------------------------</span><br><span class="line">premature  /ˌpriːməˈtʃʊr/   adj.  过早的，提前的；早产的；        The baby was four weeks premature.  The child was born prematurely</span><br><span class="line"></span><br><span class="line">comparison /kəmˈpærɪsn/   比较;对比;相比</span><br><span class="line"></span><br><span class="line">mechanical  mechanical /məˈkænɪkl/  机械的，机动的，机械驱动的，机械方面的            a mechanical device/toy/clock    ， mechanical disk</span><br><span class="line"></span><br><span class="line">reasonably  /ˈriːznəbli/   合理的，公平合理的，合乎逻辑的，通情达理的</span><br><span class="line">reasonable</span><br><span class="line">				   </span><br><span class="line">spurious spurious /ˈspjʊriəs/   虚假的，伪造的，谬误的</span><br><span class="line"></span><br><span class="line">congest  congest /kənˈdʒest/   拥堵，拥挤，充满，堵塞，挤满           Some areas are congested with both cars and people</span><br><span class="line">congested  拥挤的;(交通)堵塞的;充血的;挤满的;黏液阻塞的         less congested network</span><br><span class="line"></span><br><span class="line">rough roughly   粗略的，大概的，大致的，       roughly match the round trip time</span><br><span class="line">                粗糙的，(表面)粗糙不平的，不光滑的</span><br><span class="line">	            (人或行为)粗暴的，粗野的，粗鲁的       A hand roughly pushed him aside.</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">ingest  ingest  摄入，食入，咽下</span><br><span class="line"></span><br><span class="line">throughput throughput  吞吐量，(某一时期内的)生产量，接待人数   high throughput 		</span><br><span class="line"></span><br><span class="line">intrinsically /ɪnˈtrɪnsɪkəli/  从本质上（讲）；本质地</span><br><span class="line"></span><br><span class="line">theoretically 从理论上说;照理说</span><br><span class="line"></span><br><span class="line">suffer /ˈsʌfər/  受苦，受难，受折磨；变差，变糟</span><br><span class="line"></span><br><span class="line">be somewhat pronounced  有些明显，有点显著的</span><br><span class="line"></span><br><span class="line">contention contention   争论，争执，争吵</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------</span><br><span class="line">investigate  调查，侦察；研究，</span><br><span class="line"></span><br><span class="line">incremental /ˌɪnkrəˈmɛntəl/   incremental  增加的，递增的            periodically and incrementally backup and restore the etcd</span><br><span class="line"></span><br><span class="line">official official /əˈfɪʃl/   官方的，官方授权的，正式的;公务的;</span><br><span class="line">officailly   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wrapper 包装纸，包装袋，封皮，封套</span><br><span class="line"></span><br><span class="line">spin spin  (使)快速旋转 ，急转弯，急转身，</span><br><span class="line">spun  He spun around to face her</span><br><span class="line"></span><br><span class="line">discrepancy discrepancy /dɪsˈkrepənsi/  差异，不一致     discrepancy between girls&#x27; and boys&#x27; performance</span><br><span class="line"></span><br><span class="line">lag /læɡ/   lag  v. 滞后，落后，发展缓慢;缓慢移动;      The little boy lagged behind his parents.</span><br><span class="line">lagging    </span><br><span class="line"></span><br><span class="line">distribute distribution  分发，发放，分配   The newspaper is distributed free</span><br><span class="line">                         分销，配销，经销    Who distributes our products in the UK?</span><br><span class="line">			             使散开，使分散，分布，散播</span><br><span class="line">						 </span><br><span class="line">subscription subscription /səbˈskrɪpʃn/		  	订阅，订购，认购	</span><br><span class="line"></span><br><span class="line">compile  编写（书、列表、报告等），编纂；（计算机）编译</span><br><span class="line"></span><br><span class="line">approach approching  /əˈproʊtʃ/    v. (时间或距离上的)临近，接近   Winter is approaching</span><br><span class="line">                                   n.  靠近，接近    the approach of spring</span><br><span class="line">								   n.  方法，方式，手段   this approach may be complex for a beginner</span><br><span class="line">								   </span><br><span class="line"></span><br><span class="line">execute  /ˈeksɪkjuːt/</span><br><span class="line">executable  	executable  /ˈeksəˌkyo͞odəb(ə)l/	可执行的	</span><br><span class="line"></span><br><span class="line">directive directive  /dəˈrektɪv/   指示，命令</span><br><span class="line"></span><br><span class="line">appropriate  合适的，适当的，恰当的          an appropriate response/measure/method，  support more appropriate methods</span><br><span class="line">             v.   盗用，占用，挪用           appropriated the idea</span><br><span class="line">appropriately    /ə&#x27;proprɪrtlɪ/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------------------------</span><br><span class="line">directory directory /dəˈrektəri/   (计算机)目录，名录</span><br><span class="line"></span><br><span class="line">mechanism mechanism  /ˈmekənɪzəm/   机械装置，方法，算法，机制       OS-dependent mechanisms</span><br><span class="line">mechanical  /məˈkænɪkl/</span><br><span class="line"></span><br><span class="line">syntax  /ˈsɪntæks/   句法，语法规则</span><br><span class="line">                     </span><br><span class="line">divide  /dɪˈvaɪd/	（使）分开；（使）分散;（使）分裂	  	  	The cells began to divide rapidly.     divided into 分成...     Directives are divided into simple directives and block directives</span><br><span class="line">                     除以      30 divided by 6 is 5</span><br><span class="line">					 除        5 divides into 30 6 times.</span><br><span class="line">					 </span><br><span class="line">semicolon semicolon /ˈsemikoʊlən/	  	分号       ends with a semicolon		</span><br><span class="line"></span><br><span class="line">surround	  (使)包围，围住，环绕，围绕    surrounded by braces</span><br><span class="line"></span><br><span class="line">brace  /breɪs/    n. 大括号，大括弧；一对，一双     a brace of bottles</span><br><span class="line">                  v.  (为困难或坏事)使作准备，(做费劲的事之前)绷紧(身体部位)的肌肉     He braced himself for </span><br><span class="line">				  </span><br><span class="line">bracket （数学上的）括号          </span><br><span class="line"></span><br><span class="line">process /ˈprɑːses , prəˈses/		  n. (为达到某一目标的)过程;(计算机)进程;流程;步骤</span><br><span class="line">                                      v. 处理(文件、请求等);加工;数据处理;		</span><br><span class="line">														  								  </span><br><span class="line">--------------------------				 </span><br><span class="line">inheritance inheritance  /ɪnˈherɪtəns/		n. 遗产，继承遗产，遗传特征，继承	 		She spent all her inheritance in a year.		</span><br><span class="line">inherit inherit /ɪnˈherɪt/		 v. 继承（财产，资源等），继任	，接替(责任等);</span><br><span class="line"></span><br><span class="line">advanced advanced /ədˈvænst/    adj.  先进的，高级的，（发展到）后期的，高等的     advanced technology  /tekˈnɑːlədʒi/</span><br><span class="line"></span><br><span class="line">--------------------------------------</span><br><span class="line">resolve resolve /rɪˈzɑːlv/     v.  解决（问题或者困难）       to resolve an issue</span><br><span class="line">                                   决心，决定                 He resolved not to tell her the truth.   She resolved (that) she would never see him again.</span><br><span class="line">								   （委员会、会议等) 作出决定；作出决议；表决         It was resolved that the matter be referred to a higher authority.</span><br><span class="line">							   n.  决心，坚定的信念</span><br><span class="line"></span><br><span class="line">accumulate accumulate /əˈkjuːmjəleɪt/   积累，积聚，(数量)逐渐增加;(数额)逐渐增长</span><br><span class="line"></span><br><span class="line">gradual gradually  /ˈɡrædʒuəl/   adj.  逐渐的，逐步的，平缓的，渐进的；不陡的     </span><br><span class="line"></span><br><span class="line">graceful gracefully  优美的，优雅的，雅致的       She stepped gracefully onto the stage.</span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line">definitive definitive /dɪˈfɪnətɪv/  最终的，最后的，明确的，不可更改的，决定性的；          It&#x27;s a definitive answer。   definitive edition ,   definitive agreement/statement             </span><br><span class="line">                                    （书籍或表演）最佳的，最具权威的     definitive book on the islands. 		</span><br><span class="line"></span><br><span class="line">evenly even   均匀的，偶数的（双数的），平的，平衡的，平稳的，平滑的，均等的</span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line">align  align /əˈlaɪn/    v.   排队，排成一列，对齐，使成一条直线，使整齐    align with  ,   align to  对齐，对准，校准</span><br><span class="line"></span><br><span class="line">multiple   /ˈmʌltɪpl/   n. 倍数，多个的      The hash bucket size parameter is aligned to the size that is a multiple of the processor’s cache line size.</span><br><span class="line">                        adj.  许多的，多种多样的，多重的</span><br><span class="line">							</span><br><span class="line">reduce  reduce  reduce   减少，减轻，缩小			 reducing the number of memory accesses.			</span><br><span class="line"></span><br><span class="line">specification specification /ˌspesɪfɪˈkeɪʃn/     规格，规范，具体要求     quality specification   质量要求，质量标准    process specification  加工标准</span><br><span class="line">specific specific /spəˈsɪfɪk/   表达）明确的，确切的，具体的;特有的，特定得</span><br><span class="line"></span><br><span class="line">cyclic cyclic /ˈsaɪklɪk/   循环的，周期的   a cyclic memory buffer</span><br><span class="line">cyclicly</span><br><span class="line"></span><br><span class="line">severity severity /sɪ&#x27;verəti/  严厉，严苛，严肃，严重程度</span><br><span class="line"></span><br><span class="line">commercial commercial /kəˈmɜːrʃl/    adj.  商业的，商业化的，贸易的，已获利为目的的   commercial bank,commercial law, commercial property, commercial subscription</span><br><span class="line">                                     n.  商业广告				 				 </span><br><span class="line">										</span><br><span class="line">suppress /səˈpres/   抑制，控制，压制；镇压，封锁				  </span><br><span class="line"></span><br><span class="line">-------------------</span><br><span class="line">		</span><br><span class="line">literal literal  /ˈlɪtərəl/		 字面上的；原义的;逐字的；直（译）的        literal translation , </span><br><span class="line"></span><br><span class="line">resort /rɪˈzɔːrt/   旅游胜地，度假胜地                         resort hotel</span><br><span class="line">                    最后的办法，最终手段，应急措施           will be used as a last resort</span><br><span class="line">                    v. 采取，采用，诉诸于，求助于        resort to sth， resort to selling his house</span><br><span class="line">					</span><br><span class="line">redirect  /ˈriːdərekt/			使改变方向，使重新投递，改变…的方向;改变…的目标，使改道;使改变目的地		  							</span><br><span class="line"></span><br><span class="line">dot /dɑːt/   点，小点，圆点   black dot</span><br><span class="line"></span><br><span class="line">tilde tilde /ˈtɪldə/    波浪号，波形号，波浪字符， ~    tilde character</span><br><span class="line"></span><br><span class="line">border  border /ˈbɔːrdər/   边界，国界，边境，边疆；边框</span><br><span class="line">								   </span><br><span class="line">minor  /ˈmaɪnər/	次要的，不重要的；不严重的，轻微的       minor adjustment , minor damage</span><br><span class="line">                    未成年人</span><br><span class="line">                    辅修科目;辅修课程					</span><br><span class="line">					</span><br><span class="line">anchor anchor /ˈæŋkər/		n. 锚，	  		v. 抛锚，使定住，使停泊； 使稳住，使固定，把...系住</span><br><span class="line"></span><br><span class="line">miscellaneous  miscellaneous /ˌmɪsəˈleɪniəs/  各种各样的，混杂的，五花八门的  n. 杂货，杂项    miscellaneous fee 学杂费</span><br><span class="line"></span><br><span class="line">myriad myriad /ˈmɪriəd/   adj.  无数的，多种的，各式各样的  n.   大量，无数     a myriad of , a myriad of problems   ,  </span><br><span class="line">                                it is just one of a myriad of invalid domain names  which never intersect with any real name</span><br><span class="line">								</span><br><span class="line">intersect  intersect /ˌɪntərˈsekt/		相交，交叉；横贯，贯穿，</span><br><span class="line">cross		</span><br><span class="line"></span><br><span class="line">erroneous erroneous   /ɪˈroʊniəs/    错误的，出错的</span><br><span class="line">			   </span><br><span class="line">caution  caution </span><br><span class="line">					  </span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">discipline discipline /ˈdɪsəplɪn/   n. 纪律;风纪，自制力;遵守纪律，自律     calm and discipline, self-discipline, schoole discipline</span><br><span class="line">                                       (尤指大学里的)学科，科目                              art discipline 文科,  science discipline 理科</span><br><span class="line">                                    v. 惩罚，处罚，处分                  The workman was disciplined by his company</span><br><span class="line">									   训练，训导，管教                  you must discipline yourself to </span><br><span class="line">									   </span><br><span class="line">fairly fairly /ˈferli/			公正的，公平合理的 		</span><br><span class="line">                                相当的，还算，尚可    				   fairly new,fairly well,fairly long,fairly good								 					</span><br><span class="line"></span><br><span class="line">provided   假如，如果，在...条件下     provided there are enough requests	</span><br><span class="line"></span><br><span class="line">decision decision 	决定，抉择，决策</span><br><span class="line">				</span><br><span class="line"></span><br><span class="line">passive passive  /ˈpæsɪv/	被动的，消极的，顺从的，听之任之的，(动词形式)被动语态的		 passive smoking</span><br><span class="line"></span><br><span class="line">consecutive consecutive  /kənˈsekjətɪv/   持续的，连续不断地，不间断的          for the third consecutive year ， number of consecutive unsuccessful attempts</span><br><span class="line"></span><br><span class="line">cipher cipher /ˈsaɪfər/   密码，暗号；无足轻重的人，无关紧要的东西</span><br><span class="line"> </span><br><span class="line">oat  oat  /oʊt/  燕麦，麦片   adj.   燕麦制的，含燕麦的</span><br><span class="line"></span><br><span class="line">intensive intensive /ɪnˈtensɪv/   加强的;集中的;密集的     CPU-intensive operation is the SSL handshake.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">complain complain /kəmˈpleɪn/   抱怨，埋怨，发牢骚</span><br><span class="line"></span><br><span class="line">authority authority /əˈθɔːrəti/   当局，官方，当权者；行政管理机构     the Health Education Authority 卫生教育局，</span><br><span class="line"></span><br><span class="line">concatenate concatenate /kan&#x27;kæt,neit/   v.  连接，使连续，连锁</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">selective selectively   选择性的，有选择的</span><br><span class="line"></span><br><span class="line">arise arise /əˈraɪz/   发生，出现，产生           if a problem arises later in the pregnancy</span><br><span class="line">                       起床          He arises at 7 a.m. every morning</span><br><span class="line"></span><br><span class="line">regardless regardless /rɪˈɡɑːrdləs/   不管，不顾，不论    It takes in anybody regardless of religion, colour, or creed</span><br><span class="line"></span><br><span class="line">drawback drawback  /ˈdrɔːbæk/   缺点，缺陷，不利条件      all of them have their drawbacks，  downside</span><br><span class="line"></span><br><span class="line">successively successive /səkˈsesɪv/  接连的，连续的               A TCP/UDP session from a client is processed in successive steps called phases</span><br><span class="line">							 </span><br><span class="line">preliminary preliminary  /prɪˈlɪmɪneri/		  adj.  预备的，初步的，开始的			 Preliminary results show that ...	,preliminary study, preliminary analysis, preliminary stage	</span><br><span class="line">                                              n.    准备工作，初步行动； 预赛，初赛，初试</span><br><span class="line"></span><br><span class="line">compliance compliance  /kəmˈplaɪəns/   遵从，服从，顺从                 procedures that must be followed to ensure full compliance with the law</span><br><span class="line"></span><br><span class="line">											 </span><br><span class="line">chapter chapter  /ˈtʃæptər/	 书的章、回、篇；(人生或历史上的)阶段，时期，篇章</span><br><span class="line"></span><br><span class="line">---------------------</span><br><span class="line"></span><br><span class="line">volume volume /ˈvɑːljuːm/   量，数额，数量       how the volume of sales might be reduced</span><br><span class="line">                            （书籍的）册，卷，合集，合订本</span><br><span class="line">							（广播、电视或音响系统的）音量，声量，响度      He turned down the volume</span><br><span class="line">							</span><br><span class="line">perform /pərˈfɔːrm/    做，执行，履行（复杂的任务或行动）；   perform tasks</span><br><span class="line">                       演出，表演，演奏</span><br><span class="line">					   </span><br><span class="line">cheat cheat /tʃiːt/		v.  作弊，舞弊，造假，弄虚作假		 	    </span><br><span class="line">                        n.  作弊者，舞弊者，骗子，欺骗手段</span><br><span class="line"></span><br><span class="line">contribute contribute  /kənˈtrɪbjuːt/   为...做出贡献，捐献，奉献，捐助             The three sons also contribute to the family business.  The US is contributing $4 billion </span><br><span class="line"></span><br><span class="line">participate participate /pɑːrˈtɪsɪpeɪt/   v.  参加，参与</span><br><span class="line"></span><br><span class="line">         analyse the data </span><br><span class="line"></span><br><span class="line">ease ease /iːz/  n. 轻松，容易，方便        For ease of reference，  ease of maintenance</span><br><span class="line">                    舒适，安逸，悠闲        She lived a life of ease</span><br><span class="line">					稍息（军队口令）</span><br><span class="line">                 v. （使）（程度、速度、强度等）减少；(使)降低，缓和          Tensions had eased</span><br><span class="line">				     </span><br><span class="line">metal /ˈmetl/	金属，合金，金属制品			 	 </span><br><span class="line"></span><br><span class="line">viable viable /ˈvaɪəbl/   adj.    确实可行的，切实可行的，可实施的       a viable option/proposition ，  There is no viable alternative </span><br><span class="line"></span><br><span class="line">prepare /prɪˈper/</span><br><span class="line">preparation /ˌprepəˈreɪʃn/   准备，预备，筹备；准备工作；预备工作；筹备工作      </span><br><span class="line"></span><br><span class="line">promote /prəˈmoʊt/	促进，增进，提升</span><br><span class="line">                    促销，推广，推销	</span><br><span class="line">					升职			</span><br><span class="line">							</span><br><span class="line">plane plane /pleɪn/		飞机</span><br><span class="line">                        平面</span><br><span class="line">                        adj.  平坦的，平的</span><br><span class="line">						</span><br><span class="line">warrant warrant /ˈwɔːrənt/		n. 令状，许可令，授权令（包括搜查令，拘捕令等），执行令                   Police confirmed that they had issued a warrant for his arrest</span><br><span class="line">                                v.  使正当，使...有必要，保证            warrant money 保证金</span><br><span class="line">								</span><br><span class="line">dramatically dramatically /drə&#x27;mætɪkli/		戏剧性的，戏剧地，显著的，剧烈的	  Events could have developed in a dramatically different way</span><br><span class="line"></span><br><span class="line">relieve /rɪˈliːv/    缓和，缓解，减轻，解除</span><br><span class="line"></span><br><span class="line">refine /rɪˈfaɪn/   v.  提炼，精炼，改进，改善，改良</span><br><span class="line"></span><br><span class="line">charge /tʃɑːrdʒ/    v.  向...收费，索要价格，要价，收费              be charged for things like CPU usage, memory, and disk requests.</span><br><span class="line">                    v.&amp;.n.    充电，充值    forgotten to charge the battery， charge card</span><br><span class="line">					n. 收费，费用      free of charge </span><br><span class="line">					</span><br><span class="line">patch /pætʃ/	v. 缝补，修补，打补丁				</span><br><span class="line"></span><br><span class="line">--------------------------------------	</span><br><span class="line">entire entire /ɪnˈtaɪər/  整个的，完全的，全部的  n.  全部，整体				 	</span><br><span class="line">								</span><br><span class="line">serious seriously /ˈsɪriəsli/	严重的；    serious car accident</span><br><span class="line">                                认真的，严肃的    He is always very serious while working</span><br><span class="line"></span><br><span class="line">regular regularly  /ˈreɡjələr/   adj.  规则的，有规律的，定时的，定期的      regular breathing，  regular meetings/visits   ，Exercise regularly.</span><br><span class="line">                                       频繁的，经常做（发生）的         Do you take regular exercise?</span><br><span class="line">									   普通的，常规的</span><br><span class="line">                                 n.   常客;老顾客;固定成员;正式成员</span><br><span class="line"></span><br><span class="line">duration   </span><br><span class="line">interval					 					</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">manual  /ˈmænjuəl/  手工的，手动的，用手操作的  n.  手册，使用手册;说明书</span><br><span class="line">manually</span><br><span class="line"></span><br><span class="line">purchase purchase /ˈpɜːrtʃəs/   n. &amp; v.  购买，采购； 购买的东西；购买项目，所购之物；          He purchased a ticket and went up on the top deck</span><br><span class="line">							</span><br><span class="line">transmission transmission /trænzˈmɪʃn/	n.  传输，传送，（车辆的）传动装置，变速器			 automatic transmission.  manual transmission car</span><br><span class="line"></span><br><span class="line">dozen dozen /ˈdʌzn/   一打，十二个，十几个，十多个，十来个   in dozens 许多，大批，成打的；  dozens of 许多，及时		 </span><br><span class="line">								</span><br><span class="line">financial 		/faɪˈnænʃl/	 财政的，金融的，经济的，财务的  financial leverage</span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line">massive massively   /ˈmæsɪv/  巨大的，大规模的，大量的    a massive increase in spending， </span><br><span class="line">                              巨大的，坚实的，结实的， 厚重的            a massive rock，  Their house is massive.</span><br><span class="line">							  </span><br><span class="line">obtain obtain /əbˈteɪn/	 获得，得到，赢得</span><br><span class="line"></span><br><span class="line">determine determine /dɪˈtɜːrmɪn/ 确定，决定，决心（做某事）</span><br><span class="line">				</span><br><span class="line">overview 概述;概况;纵览;概论</span><br><span class="line"></span><br><span class="line">confirm  确认;(尤指提供证据来)证实，证明;</span><br><span class="line"></span><br><span class="line">premise</span><br><span class="line">		</span><br><span class="line">mention		提到，说到，写道，提及                Nobody mentioned anything to me about it.</span><br><span class="line"></span><br><span class="line">instability instability /ˌɪnstəˈbɪləti/   不稳定，不稳固，变化无常             The approach to mitigate this instability</span><br><span class="line"></span><br><span class="line">operation /ˌɑːpəˈreɪʃn/   手术</span><br><span class="line">                          企业，公司          Thorn&#x27;s electronics operation employs around 5,000 people</span><br><span class="line">						  （有组织的）活动，行动</span><br><span class="line">						  运行，运转，操作               a sensitive operation</span><br><span class="line">									  </span><br><span class="line">declare declare /dɪˈkler/   声明，宣告，宣称，宣布     The government has declared a state of emergency.</span><br><span class="line">                            申报（应纳税物品），申报（收益）        Do you have anything to declare?</span><br><span class="line">							</span><br><span class="line">garbage garbage /ˈɡɑːrbɪdʒ/		(生活)垃圾，废物          garbage collection。 Don&#x27;t forget to take out the garbage</span><br><span class="line">                                 垃圾场；垃圾箱；垃圾桶             Throw it in the garbage.</span><br><span class="line">								 </span><br><span class="line">ongoing  持续存在的，仍在进行的     The police investigation is ongoing</span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line">								  </span><br><span class="line">bootstrap /ˈbutˌstræp/	(计算机)引导程序</span><br><span class="line"></span><br><span class="line">skew /skjuː/   偏离，歪斜，偏差,误差           there is a risk of a version skew occurring </span><br><span class="line"></span><br><span class="line">buggy buggy /ˈbʌɡi/   adj.   古怪的，疯的        there is a risk of a version skew occurring that can lead to unexpected, buggy behaviour</span><br><span class="line">                      n.   婴儿车，轻便马车</span><br><span class="line">               </span><br><span class="line">vice vice /vaɪs/   n.  恶行，堕落行为，（与性或毒品有关的）罪行，犯罪活动，邪恶，不道德行为 </span><br><span class="line">                       恶习，缺点，瑕疵    slipping late is a vice  </span><br><span class="line">				   adj.  副的    vice president, vice chairman </span><br><span class="line">				   </span><br><span class="line">versa versa /ˈvɜːrsə/	反之亦然   vice versa	</span><br><span class="line"></span><br><span class="line">exclude exclude /ɪkˈskluːd/	  v. 不包括，排除在外，将...排除在外                  Buses run every hour, Sundays excluded </span><br><span class="line"></span><br><span class="line">pin pin /pɪn/	    n.  大头针，别针，胸针，图钉</span><br><span class="line">                    v. （用别针等）别住；（用图钉等）钉住，按住；压住；使动弹不得          I pinned him against the wall ，  They pinned a notice to the door.</span><br><span class="line"></span><br><span class="line">folk folk /foʊk/	各位，大伙儿们，人们，大家	;民众，民间		 	          Well, folks, what are we going to do today?    old folk</span><br><span class="line">                    adj. 民间的，普通百姓的，民俗的 ,民众的                folk story,  folk art,  </span><br><span class="line"></span><br><span class="line">halt halt /hɔːlt/  (使)停住，（使）停止，暂停，（使）停止行进;              They halted at a short distance from the house.</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">sucrose sucrose /ˈsuːkroʊs/    蔗糖</span><br><span class="line">caramel caramel   焦糖</span><br><span class="line"></span><br><span class="line">somehow /ˈsʌmhaʊ/   不知怎么的，不知为什么，由于某种未知的原因		 	it&#x27;s very likely that the Pod Network add-on that you installed is somehow broken. 		    </span><br><span class="line"></span><br><span class="line">track track /træk/  v. 跟踪，追踪</span><br><span class="line">                    n.  （人、动物或车辆留下的）足迹，脚印，踪迹，车辙           We followed the bear&#x27;s tracks in the snow.</span><br><span class="line">					     铁轨，轨道；跑道，赛道                    A woman fell on to the tracks</span><br><span class="line">						 </span><br><span class="line">triage triage /triːˈɑːʒ/   伤员鉴别分类，患者鉴别分类，问题鉴别分类			  get the issue triaged there</span><br><span class="line"></span><br><span class="line">fence fence  篱笆，围栏，栅栏</span><br><span class="line"></span><br><span class="line">encounter encounter /ɪnˈkaʊntər/  遭遇，遇到（尤指令人不快或困难的事），意外地遇见；与…邂逅    Every day of our lives we encounter stresses of one kind or another.</span><br><span class="line"></span><br><span class="line">manifest manifest /ˈmænɪfest/   清单，货单，旅客名单</span><br><span class="line">									  </span><br><span class="line">problematic problematic /ˌprɑːbləˈmætɪk/	  有问题的；有困难的；疑难的</span><br><span class="line">problem /ˈprɑːbləm/										 </span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line"></span><br><span class="line">laptop /ˈlæptɑːp/  笔记本电脑，膝上型计算机</span><br><span class="line"></span><br><span class="line">raspberry  raspberry /ˈræzberi/    山莓，树莓    Raspberry Pi					  </span><br><span class="line"></span><br><span class="line">pretty   adj.  漂亮的，精致的，美观的，标致的，赏心悦目的</span><br><span class="line">         adv.  相当地，十分地，极，非常，很</span><br><span class="line">		 </span><br><span class="line">definition definition /ˌdefɪˈnɪʃn/		 定义，释义           What&#x27;s your definition of happiness?</span><br><span class="line">                                         清晰度            The definition of the digital TV pictures is excellent.</span><br><span class="line">----------------------------</span><br><span class="line">measurement measurement  /ˈmeʒərmənt/		 n.  测量，度量，计量，估量；测量结果		         measurement units ， performance measurement 绩效评价,；measurement technique, measurement system</span><br><span class="line"></span><br><span class="line">measure measure /ˈmeʒər/  v.  测量，度量，估量，衡量</span><br><span class="line">                          n.  措施，方法                       other security measures that protect the nodes and your cluster.</span><br><span class="line">						      尺度，标准；度量单位；计量标准</span><br><span class="line"></span><br><span class="line">bypass bypass /ˈbaɪpæs/  v.  越过，避开，绕开，绕过                   super user group that bypasses the authorization layer</span><br><span class="line"></span><br><span class="line">tuple tuple /ˈtʌ.pəl/   元组，数组</span><br><span class="line"></span><br><span class="line">enclose enclose /ɪnˈkloʊz/  v.  （用墙、篱笆等）把...围起来，围住，包围;封闭             She felt his arms enclose her.</span><br><span class="line">                                把…封入信封;随函附上                 Please return the completed form, enclosing a recent photograph.</span><br><span class="line">								</span><br><span class="line">square square /skwer/	n.  正方形，四方形的，方的      a square room .      IPv6 address must be enclosed in square brackets [] .  curly braces &#123;&#125;	</span><br><span class="line">                            平方                 36 square metres</span><br><span class="line">							（通常为方形的）广场          the market/town/village square </span><br><span class="line">							</span><br><span class="line">bracket bracket /ˈbrækɪt/  n.   （数学上的）括号，括弧     Add the numbers in brackets first.  square brackets [], curly brackets  &#123;&#125;</span><br><span class="line">                                （固定在墙上的）托架，支架，角撑架</span><br><span class="line">								 等级段，档次    income bracket, tax bracket, age bracket</span><br><span class="line"></span><br><span class="line">resilient resilient  /rɪˈzɪliənt/   adj.  坚韧的，有弹性的，有韧性的        to be resilient</span><br><span class="line">                                          恢复快的，适应力强的</span><br><span class="line"></span><br><span class="line">navigate navigate /ˈnævɪɡeɪt/    为(船只、飞机等)导航;确定…的航行方向;(船只、飞机等)驶向       I&#x27;ll drive, and you can navigate.   you can navigate to our API reference pages.</span><br><span class="line">navigation  </span><br><span class="line"></span><br><span class="line">strategic strategic /strəˈtiːdʒɪk/   adj.  战略性的，根据全局安排的，战略上的      strategic planning。  a strategic decision to sell off part of the business</span><br><span class="line">									 </span><br><span class="line">-----------------------</span><br><span class="line"></span><br><span class="line">enterprise /ˈentərpraɪz/   企业，公司，企业单位，事业单位，商业</span><br><span class="line"></span><br><span class="line">freedom 自由</span><br><span class="line">							</span><br><span class="line">infrastructure infrastructure 	/ˈɪnfrəstrʌktʃər/		 基础设施		</span><br><span class="line"></span><br><span class="line">matter matter /ˈmætər/		 事情，状况，麻烦事;问题                 discuss some private matter</span><br><span class="line"></span><br><span class="line">bin /bɪn/   n. 垃圾桶，垃圾箱（garbage can, trash can）； 箱子；储物箱；储藏箱</span><br><span class="line">            v.  扔掉，丢弃</span><br><span class="line">			</span><br><span class="line">pack /pæk/			v.  把…装进行囊；打点（行装）；将…打包；把…装箱</span><br><span class="line">                    n.  包，包裹，背包；旅行包</span><br><span class="line">					</span><br><span class="line">sacrifice sacrifice /ˈsækrɪfaɪs/	 	n.  牺牲，献祭，祭祀；祭献的牲畜；祭品				</span><br><span class="line">                                        v.  牺牲，舍弃，献祭，献出                    She sacrificed family life to her career</span><br><span class="line">										</span><br><span class="line">guestbook  留言簿;留言本										</span><br><span class="line">											 </span><br><span class="line">inventory inventory /ˈɪnvəntɔːri/	  详细目录;清单;存货，库存     inventory management</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">temporarily /ˈtɛmpəˌrɛrəlɪ/</span><br><span class="line">temporary /ˈtempəreri/</span><br><span class="line">					  </span><br><span class="line">Alpine Alpine /ˈælpaɪn/	 阿尔卑斯山 阿尔卑斯山脉;	高山得</span><br><span class="line"></span><br><span class="line">symbol symbol /ˈsɪmbl/	符号，记号，代号，象征		  </span><br><span class="line"></span><br><span class="line">deprecate deprecate  /ˈdeprəkeɪt/  不赞成，对…表示极不赞成，反对，否决</span><br><span class="line">deprecated      反对的，不赞成的，废弃的</span><br><span class="line"></span><br><span class="line">permissive permissive /pərˈmɪsɪv/  adj.  放纵得，纵容得，姑息得</span><br><span class="line"></span><br><span class="line">improve improve /ɪmˈpruːv/    改善，改进，增进，提高</span><br><span class="line"></span><br><span class="line">problem /ˈprɑːbləm/</span><br><span class="line">common /ˈkɑːmən/   常见的；通常的；普遍的</span><br><span class="line">proper /ˈprɑːpər/</span><br><span class="line">provider /prəˈvaɪdər/</span><br><span class="line">Fedora /fɪˈdɔːrə/</span><br><span class="line"></span><br><span class="line">agnostic agnostic /æɡˈnɑːstɪk/   不可知（论者）的      kubeadm is network provider-agnostic</span><br><span class="line"></span><br><span class="line">contact contact /ˈkɑːntækt/  联系，联络</span><br><span class="line"></span><br><span class="line">workaround workaround /ˈwɜːrkəraʊnd/   变通方法，应变方法，替代方法，备用方法           This workaround may not be suitable for all environments</span><br><span class="line">                                       处理                 To workaround this problem，   To workaround the issue you have two options</span><br><span class="line">									   </span><br><span class="line">indicate indicate /ˈɪndɪkeɪt/	表明，说明，表示，指示，显示</span><br><span class="line"></span><br><span class="line">rotation rotation /roʊˈteɪʃn/  旋转；转动;轮换，交替，换班，轮班</span><br><span class="line">rotate</span><br><span class="line"></span><br><span class="line">due due /duː/   由于，因为</span><br><span class="line"></span><br><span class="line">offend offend /əˈfend/  v.  得罪，冒犯，触怒              Neil did not mean to offend anybody with his joke </span><br><span class="line">                            违反，违犯，违背（法律、规定、原则等）</span><br><span class="line">offending offending   违法的，犯罪的；烦人的	</span><br><span class="line"></span><br><span class="line">solve solve /sɑːlv/  解决，处理</span><br><span class="line"></span><br><span class="line">knock knock /nɑːk/  v&amp;n.  敲打，敲击，(尤指因故障）发碰撞声，嘭嘭作响;（心）怦怦跳;    knocked on the door</span><br><span class="line"></span><br><span class="line">affect affect /əˈfekt/  v. 影响，浸染，感染</span><br><span class="line"></span><br><span class="line">feasible feasible /ˈfiːzəbl/ 可行的，行得通的           a feasible plan/suggestion/idea，   It&#x27;s just not feasible to manage the business on a part-time basis</span><br><span class="line"></span><br><span class="line">viable viable /ˈvaɪəbl/   adj.    确实可行的，切实可行的，可实施的</span><br><span class="line"></span><br><span class="line">-----------------------------------------</span><br><span class="line"></span><br><span class="line">reflect reflect /rɪˈflekt/    v. 反映，映出（影像），倒映             His face was reflected in the mirror.       She could see herself reflected in his eyes.</span><br><span class="line">                                 反射（声音，光，热等 ）        The windows reflected the bright afternoon sunlight.</span><br><span class="line">								 反应，表现，印象      reflect well, badly, etc. on sb/sth。   This incident reflects badly on everyoneinvolved.									</span><br><span class="line">topic topic /ˈtɑːpɪk/								 </span><br><span class="line"></span><br><span class="line">proceed proceed /proʊˈsiːd/  v.  继续做（或从事、进行）,接着做,继续进行；（活动、过程或事件）继续，持续    He proceeded to tell me of my birth</span><br><span class="line"></span><br><span class="line">advice advice /ədˈvaɪs/   建议，意见，忠告</span><br><span class="line"></span><br><span class="line">sparing sparing  /ˈsperɪŋ/   慎用；俭省的；吝惜的,节制的</span><br><span class="line">sparingly sparingly /sperɪŋli/</span><br><span class="line"></span><br><span class="line">spare spare /sper/  adj.   备用的;预备的              a spare key/tire.  Take some spare clothes in case you get wet</span><br><span class="line">                           多余的;空闲的,剩下的     They don&#x27;t have a lot of spare cash。  spare time</span><br><span class="line">						   </span><br><span class="line">				    v.     抽出，拨出(金钱或其他资源)              she could only spare 35 minutes for our meeting..</span><br><span class="line">					n.     备用品，备胎													 									  </span><br><span class="line"></span><br><span class="line">architecture architecture /ˈɑːrkɪtektʃər/  总体结构，体系架构；建筑学，建筑术，建筑式样，建筑风格        He studied classical architecture </span><br><span class="line"></span><br><span class="line">slack slack /slæk/   adj.  松弛的，不紧的，没拉紧的           The rope suddenly went slack.</span><br><span class="line">                           松懈的;懈怠的，不用心的；敷衍了事的；吊儿郎当的    He&#x27;s been very slack in his work lately.    Discipline in the classroom is very slack.</span><br><span class="line">							  </span><br><span class="line">duplicate duplicate /ˈduːplɪkeɪt /		v.  复制，复印，重复;复写    	 	a duplicated form	</span><br><span class="line">								 </span><br><span class="line">top /tɑːp/										 </span><br><span class="line">			</span><br><span class="line">redundancy redundancy /rɪˈdʌndənsi/		  多余，剩余;冗余码，冗余位;累赘，冗长;多余物，多余量;		</span><br><span class="line">                                          （因劳动力过剩而造成的）裁员，解雇   Thousands of factory workers are facing redundancy.</span><br><span class="line">									  </span><br><span class="line"></span><br><span class="line">optimal optimal /ˈɑːptɪməl/   adj.  最佳得，最优得</span><br><span class="line">optimization optimization 	/ˌɑːptɪməˈzeɪʃn/		 优化，达到最优，（使）最恰当（适宜，适合）		 </span><br><span class="line">optimize optimize /ˈɑːptɪmaɪz/       v. 优化，使最优化，使最有效率，充分利用</span><br><span class="line"></span><br><span class="line">quorum quorum /ˈkwɔːrəm/ 法定人数</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">previous previous /ˈpriːviəs/ 	adj.  先前得，以前得，早先的，之前得</span><br><span class="line"></span><br><span class="line">empower empower /ɪmˈpaʊər/  授权；给予…权力;  给予…力量；使有能力(实现…)</span><br><span class="line"></span><br><span class="line">bash bash /bæʃ/  v.  痛打，猛揍，用力敲，猛敲；猛撞；用力砸；重击；猛撞</span><br><span class="line">                 n.  盛会；聚会；庆祝仪式</span><br><span class="line">				 </span><br><span class="line">crypto crypto /ˈkrɪptoʊ/		加密货币，密码；加密；政党，社团的）秘密成员，秘密支持者	      public Key Crypto System 	 </span><br><span class="line"></span><br><span class="line">machinery machinery /məˈʃiːnəri/   (总称)机器，机械；（尤指）大型机器	</span><br><span class="line">						</span><br><span class="line">involve involve /ɪnˈvɑːlv/		牵涉;涉及;使陷入;使卷入; 使参与;使介入;（使）参加，加入			</span><br><span class="line"></span><br><span class="line">simplify simplify /ˈsɪmplɪfaɪ/	v.  简化，使容易;使易懂;使简洁															</span><br><span class="line">											 </span><br><span class="line">resolution resolution /ˌrezəˈluːʃn/	   (问题、分歧的)解决，消除		the successful resolution of </span><br><span class="line">                                       正式决定;决议           passed two major resolutions		</span><br><span class="line">                                       决定，决心              They made a resolution to lose all the weight 		</span><br><span class="line">                                       分辨率;清晰度       high resolution													 </span><br><span class="line"></span><br><span class="line">marshal marshal /ˈmɑːrʃl/ n.  元帅;（英国）陆军元帅，空军元帅;(美国法院的)执行官;警察局长，消防局长;司仪;典礼官   air marshal; field marshal</span><br><span class="line">                          v.   召集;收集;安排;组织;结集;</span><br><span class="line">						  </span><br><span class="line">-------------------</span><br><span class="line">ship /ʃɪp/	n.  大船;轮船;舰</span><br><span class="line">            v.  运送;运输;船运</span><br><span class="line">			</span><br><span class="line">augment augment /ɔːɡˈment/		v.  增加；增大；加强；提高</span><br><span class="line"></span><br><span class="line">landscape landscape /ˈlændskeɪp/  n.  （陆上，尤指乡村的）风景，景色,自然景色</span><br><span class="line">                                       形势；情形；情状</span><br><span class="line">								  v.  美化…的环境;对…做景观美化;给…做园林美化;从事景观美化工作								  </span><br><span class="line"></span><br><span class="line">vertical vertically /ˈvɜːrtɪkl/   adj.  垂直得，纵向得，竖的，直立得</span><br><span class="line"></span><br><span class="line">steer steer /stɪr/   v.  驾驶(车、船、飞机等);掌控方向盘;操纵；控制；引导           to steer a ship ,</span><br><span class="line">					 </span><br><span class="line">---------</span><br><span class="line">impair impair /ɪmˈper/  损害；削弱</span><br><span class="line"></span><br><span class="line">resilience reslience /rɪˈzɪliəns/	n. 	恢复能力，还原能力，弹力			 Cluster resilience。	</span><br><span class="line"></span><br><span class="line">spread spread /spred/   v.  广播，扩散，蔓延，使散开 ，传播 ，散布                   The disease spreads easily.    Water began to spread across the floor</span><br><span class="line">                            展开，打开 ，摊开;铺开      to spread a cloth on a table，   spread the map out on the floor，  The bird spread its wings						</span><br><span class="line">				 								 </span><br><span class="line">restrict  /rɪˈstrɪkt/    v.  限制，限定，约束   restriction  </span><br><span class="line"></span><br><span class="line">aware aware /əˈwer/  adj.  知道的；明白的;注意到的；察觉到的；意识到的      He was well aware of the problem.</span><br><span class="line"></span><br><span class="line">verification verification /ˌvɛrəfəˈkeɪʃən/ n.  验证;检验，检查，审核；验收；查证，证实，验证，核实；鉴定；查清;核对（账目的）真实性</span><br><span class="line"></span><br><span class="line">qualify qualify /ˈkwɑːlɪfaɪ/   (通过考试)取得资格，合格，达到标准；符合，配得上;胜任         qualify for the job.</span><br><span class="line">                                       qualified to 有资格做..                   a node that passes the test is qualified to join a Kubernetes cluster.</span><br><span class="line"></span><br><span class="line">quality /ˈkwɑːləti/   质量，品质</span><br><span class="line"></span><br><span class="line">gap gap /ɡæp/  n.  开口；豁口；缺口；裂口；缝隙；（时间上的）间断，间隔，间隙；差距；          the gap between rich and poor.</span><br><span class="line"></span><br><span class="line">analytics analytics /ˌænəˈlɪtɪks/   分析，分析学，逻辑分析法</span><br><span class="line">analysis analysis /əˈnæləsɪs/   分析，分析结果</span><br><span class="line">analyse analyse   /ˈænəlaɪz/    v. 分析，分解</span><br><span class="line">					   </span><br><span class="line">----------------</span><br><span class="line">clock in    上班打卡，上班打卡记录</span><br><span class="line">clock out   下班打卡，下班打卡记录</span><br><span class="line"></span><br><span class="line">fragment fragment /ˈfræɡmənt , fræɡˈment/  n.  碎片;片断;小部分    memory fragment.   fragments of glass .    fragments of metal .</span><br><span class="line">                                           v.   (使)成碎片;(使)分裂;(使)分化</span><br><span class="line"></span><br><span class="line">---------------</span><br><span class="line"></span><br><span class="line">starvation  饥饿，挨饿，饿死    CPU starvation</span><br><span class="line"></span><br><span class="line">starve starve /stɑːrv/  v.  饥饿，挨饿，饿死 </span><br><span class="line">starved  starved    缺乏…的；急需…的   resource-starved Nodes</span><br><span class="line"></span><br><span class="line">Greek Greek /ɡriːk/  希腊人;希腊语;古希腊人;	</span><br><span class="line"></span><br><span class="line">breed breed /briːd/		 v.   繁殖，产仔； 喂养，饲养，培育	     Many animals breed only at certain times of the year.    The rabbits are bred for their long coats.</span><br><span class="line">                         n.   品种，种类；血统               rare breeds of cattle</span><br><span class="line">bred	</span><br><span class="line"></span><br><span class="line">era era /ˈɪrə/   时代；年代；纪元,时期</span><br><span class="line"></span><br><span class="line">underperform underperform /ˌʌndərpərˈfɔːrm/   发挥不够;表现不理想</span><br><span class="line">									  </span><br><span class="line">isolation isolation /ˌaɪsəˈleɪʃn/    隔离，分离，孤立    resource isolation</span><br><span class="line">isolate isolate /ˈaɪsəleɪt/  （使）隔离，孤立，脱离														 </span><br><span class="line"></span><br><span class="line">efficiency efficiency /ɪˈfɪʃnsi/  效率；效能；功效</span><br><span class="line">efficient  /ɪˈfɪʃnt/ 高效的，有效率的    I work very efficiently。  </span><br><span class="line">energy efficient  节能的    efficient method</span><br><span class="line">							 </span><br><span class="line">major major /ˈmeɪdʒər/  adj.  主要的，重要的；较重要的;较重大的; </span><br><span class="line">                        n.  (美国大学中的)主修课程，专业; (美国)陆军(或空军、海军陆战队)少校</span><br><span class="line">						</span><br><span class="line">central centrally /ˈsentrəl/	adj.  在中心的；中央的;位于中央地带的;处于中心的;四通八达的</span><br><span class="line">                                      最重要的；首要的；主要的</span><br><span class="line">centric centric /ˈsentrik/	中心化的，中央的，在中心的</span><br><span class="line"></span><br><span class="line">liberate liberate /ˈlɪbəreɪt/  v. 解放  ;使解脱；使脱离；解救;使自由;使摆脱约束(或限制)               liberate the city。</span><br><span class="line">liberation liberation /ˌlɪbəˈreɪʃən/</span><br><span class="line"></span><br><span class="line">--------------</span><br><span class="line">accommodate accommodate /əˈkɑːmədeɪt/	v. （有足够的空间）容纳，接纳     big enough to accommodate all the children.</span><br><span class="line">                                            为（某人）提供住宿（或膳宿、座位等）;为…提供空间</span><br><span class="line">										   （调整以）适应;顺应，适应（新情况）</span><br><span class="line">										   </span><br><span class="line">jade jade /dʒeɪd/  n.  玉;翡翠;玉器;碧玉;玉制品;	</span><br><span class="line">                   n.  泼妇;荡妇;劣马									   </span><br><span class="line">				   adj.  玉制的;翡翠色的</span><br><span class="line"></span><br><span class="line">bracelet bracelet /ˈbreɪslət/ n.  手镯，手链</span><br><span class="line"></span><br><span class="line">popular polular /ˈpɑːpjələr/  受喜爱的；受欢迎的；当红的；流行的</span><br><span class="line"></span><br><span class="line">agile agile /ˈædʒl/  敏捷的；灵敏的;灵活的，机灵的</span><br><span class="line"></span><br><span class="line">premise premise /ˈpremɪs/   经营场所，办公场所，（企业或机构使用的）房屋及土地</span><br><span class="line">                            前提,假定            What is the premise of this problem.  on the premise,   basic premise ,fundamental premise, </span><br><span class="line">prerequisite  provided			</span><br><span class="line"></span><br><span class="line">rescue rescue /ˈreskjuː/  v.  营救，抢救，救援；援救；   n.  救援;抢救;营救;获救;营救行动</span><br><span class="line"></span><br><span class="line">diverse diverse /daɪˈvɜːrs/  adj.  多种多样的，不同的，各式各样的；迥异的</span><br><span class="line"></span><br><span class="line">proof proof /pruːf/ n.  证明，证据，证言，证物；</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">utilization   utilization  /ˌjuːtələˈzeɪʃn/   利用（率），效用，应用</span><br><span class="line"></span><br><span class="line">utility   /juːˈtɪləti/  实用，有用    the utility of higher education</span><br><span class="line">                        公用事业     public utilities such as gas, electricity and phones</span><br><span class="line">						实用程序   Command line utility</span><br><span class="line">utilize utilize /ˈjuːtəlaɪz/ v.  应用，使用，运用</span><br><span class="line"></span><br><span class="line">relax relaxed /rɪˈlæks/  v. 放松，松懈，(使)松弛</span><br><span class="line"></span><br><span class="line">lightweight   轻量的；轻质的；比通常重量轻的；（拳击、柔道、赛艇等运动中的）轻量级</span><br><span class="line"></span><br><span class="line">respond respond /rɪˈspɑːnd/   v.  回应，响应，回答，反应</span><br><span class="line"></span><br><span class="line">common common /ˈkɑːmən/	常见的，普遍的				 a common name	 																		  </span><br><span class="line">							</span><br><span class="line">entity entity  /ˈentəti/    实体，独立存在物    The server certificate is a public entity，   legal entity，  economic entity							</span><br><span class="line">policy policy /ˈpɑːləsi/   政策;方针;原则;保险单;		 </span><br><span class="line"></span><br><span class="line">nest nest /nest/ n. 鸟巢，鸟窝，巢穴</span><br><span class="line">                 v. 嵌套(信息);筑巢;巢居;做窝</span><br><span class="line">				 </span><br><span class="line">govern govern /ˈɡʌvərn/ v. 统治；控制；管理；治理；影响；支配</span><br><span class="line"></span><br><span class="line">government /ˈɡʌvərnmənt/ 政府；内阁； (国家等的)治理，管理，执政</span><br><span class="line"></span><br><span class="line">correction correction /kəˈrekʃn/ n.  校正，修正，改正，纠正；修改</span><br><span class="line"></span><br><span class="line">argument argument /ˈɑːrɡjumənt/  n.  论点，论据，理由； </span><br><span class="line">                                     讨论；辩论；争论；争执；争吵</span><br><span class="line"></span><br><span class="line">spec spec /spek/  n.  (尤指机器、车辆的)规格，配置 = specification</span><br><span class="line">								</span><br><span class="line">----------------------------</span><br><span class="line"></span><br><span class="line">unrecognized unrecognized /ʌnˈrekəɡnaɪzd/  adj.   不被人注意的；未被认出的</span><br><span class="line"></span><br><span class="line">recognise recognise /rekəgnaɪz/  v.  认出;认识;承认;辨别出</span><br><span class="line">									 </span><br><span class="line">strict strict /strɪkt/ adj. 严格的（指必须恪守）；要求严格的;严厉的  be strict with sb.   be strict in sth.</span><br><span class="line"></span><br><span class="line">document document /ˈdɑːkjumənt , ˈdɑːkjument/  n.  文件；公文；文献；证件</span><br><span class="line">                                               v.  记录，记载(详情)								   </span><br><span class="line">documentation /ˌdɑːkjumenˈteɪʃn/  文档;证明文件;归档;文件记载;文献记录;必备资料 </span><br><span class="line"></span><br><span class="line">curly   卷曲的   short curly  hair，	curly braces &#123;&#125;	</span><br><span class="line"></span><br><span class="line">curve curve /kɜːrv/  n.  曲线，弧线，曲面，弯曲；                    Learning curve</span><br><span class="line">                     v.   (使)弯曲;(使)呈曲线形； 沿曲线运动              The ball curved strangely in the air.</span><br><span class="line">					 </span><br><span class="line">imperative imperative /ɪmˈperətɪv/  adj.  重要紧急的；迫切的；急需处理的;极重要的;必要的;紧急的</span><br><span class="line">                                    n.    必要的事;紧急的事;必须履行的责任</span><br><span class="line">									</span><br><span class="line">intermediate intermediate /ˌɪntərˈmiːdiət/	adj.  （两地、两物、两种状态等）之间的，中间的;中级的；中等的；适合中等程度者的   an intermediate student.  intermediate classes</span><br><span class="line"></span><br><span class="line">moderate moderate /ˈmɑːdərət , ˈmɑːdəreɪt/  adj.  中等的;普通的;适度的；适量的</span><br><span class="line"></span><br><span class="line">integration integration /ˌɪntɪˈɡreɪʃn/    整合，结合，一体化    system integration , social integration </span><br><span class="line">integrate integrate /ˈɪntɪɡreɪt/  v.  (使)(与…)成为一体;(使)结合;(使)合并；(使)加入;(使)融入,整合</span><br><span class="line"></span><br><span class="line">audit audit /ˈɔːdɪt/  v.  审计，审查，稽核，查账，检查</span><br><span class="line">					 </span><br><span class="line">mature mature /məˈtʃʊr/  adj.   (性格、感情等方面)成熟的，像成人似的;明白事理的，炉火纯青的</span><br><span class="line">                         v.  长大(成人);发育成熟; (在性格、感情等方面)趋于成熟</span><br><span class="line">						 </span><br><span class="line">recursive recursive /rɪˈkɜːrsɪv/  adj.  递归的；循环的  </span><br><span class="line">recursively </span><br><span class="line"></span><br><span class="line">partial partial /ˈpɑːrʃl/  adj.  部分的；不完全的</span><br><span class="line"></span><br><span class="line">merge merge /mɜːrdʒ/ v.  （使）合并，结合，并入;相融；融入；渐渐消失在某物中</span><br><span class="line"></span><br><span class="line">blog blog /blɑːɡ/  n.  博客；部落格；网络日志</span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line">		   </span><br><span class="line">relevant relevant /ˈreləvənt/		adj.  紧密相关的，切题的，有意义的，有价值的，相关的，有关的     Please include relevant tags like #kubernetes and #kubeadm so folks can help you.	</span><br><span class="line"></span><br><span class="line">irrelevant irrelevant /ɪˈreləvənt/ adj.  无关紧要的；不相关的;不切题的;不重要的</span><br><span class="line">					 </span><br><span class="line">occur occur /əˈkɜːr/  v.  发生，出现，   accidents occur ，  changes occur ， version skew occur</span><br><span class="line">occurrence occurrence /əˈkɜːrəns/  n.  发生;出现;存在;发生的事情;存在的事物</span><br><span class="line"></span><br><span class="line">proactive proactively /ˌproʊˈæktɪv/  积极主动的；主动出击的；先发制人的</span><br><span class="line"></span><br><span class="line">structure structure /ˈstrʌktʃər/ n.  结构;构造;结构体；体系;     organizational structure</span><br><span class="line"></span><br><span class="line">encapsulate encapsulate /ɪnˈkæpsjuleɪt/  v.  概括;概述;简述;压缩;封装，装入胶囊</span><br><span class="line">encapsulation encapsulation    封装，包装，密封</span><br><span class="line">							</span><br><span class="line">hat hat /hæt/ n.  帽子；角色;职位;工作         hard hat 安全帽</span><br><span class="line"></span><br><span class="line">---------------------</span><br><span class="line"></span><br><span class="line">unique unique /juˈniːk/  adj.  唯一的；独一无二的;独有的；特有的</span><br><span class="line">uniquely</span><br><span class="line">uniqueness uniqueness /juˈniːknəs/  唯一性；独特性；重要性；单一性；单值性</span><br><span class="line"></span><br><span class="line">equality equality /iˈkwɑːləti/  n.   平等；均等；相等;（数学上）等式             equality of the sexes.</span><br><span class="line">inequality inequality /ˌɪnɪˈkwɑːləti/  n.  不平等，不平衡;不平均，不相等</span><br><span class="line"></span><br><span class="line">presentation presentation /ˌpriːzenˈteɪʃn/	n.  外观，外貌，表象		            keeping the presentation simple	</span><br><span class="line">                                                颁奖仪式，颁奖典礼                  He received his award at a presentation in London yesterday	</span><br><span class="line">                                                介绍，陈述，报告，说明，展示，演示              I gave a video presentation												</span><br><span class="line"></span><br><span class="line">present present /ˈpreznt , prɪˈzent/  adj.  存在的，当下的;现存的；当前的，</span><br><span class="line">                                            在场的;出现的；出席的;  /ˈpreznt/</span><br><span class="line">                                      n.  礼物；礼品   /ˈpreznt/</span><br><span class="line">									      当下，目前，现在      at present </span><br><span class="line">									  v.  呈现；展示；陈述;描述；形容，演示</span><br><span class="line">									      出席；到场;正式出席</span><br><span class="line">										  颁发;交付;授予;										 </span><br><span class="line"></span><br><span class="line">statement statement /ˈsteɪtmənt/  n.   (正式或明确的口头或书面)陈述，声明;证词;财务报表;结算单;账单   make a statement</span><br><span class="line"></span><br><span class="line">admission adminssion /ədˈmɪʃn/	准许加入，准入权，	加入权，进入权	</span><br><span class="line">                                入场费，门票费             admission charges/prices	</span><br><span class="line"></span><br><span class="line">admit admit   /ədˈmɪt/	v.  （常指不情愿地、勉强）承认，供认;准许…加入；准许…进入；可容纳，可接纳</span><br><span class="line">admitted admitted  /ədˈmɪtɪd/    adj.  被承认了的；(事实)公认的</span><br><span class="line"></span><br><span class="line">formerly formerly /ˈfɔːrmərli/   以前，从前    He had formerly been in the Navy</span><br><span class="line">former former /ˈfɔːrmər/  adj.  前任的;先前的; 早先的;从前的；以前的        former Soviet Union.  前苏联</span><br><span class="line">                                （两者中）前者的								</span><br><span class="line"></span><br><span class="line">--------------------------</span><br><span class="line">dimension dimension /daɪˈmenʃn/  n.  方面;部分;(数学和科学中的)维（度）,尺度; (情况或问题的)范围，规模，程度</span><br><span class="line"></span><br><span class="line">dimensional dimensional /daɪˈmenʃənl/  adj.  空间的，维（度）的      Three Dimensional （3D）；</span><br><span class="line"></span><br><span class="line">cross-cutting  跨部门 ;  交叉    Management often requires cross-cutting operations</span><br><span class="line"></span><br><span class="line">rigid rigid /ˈrɪdʒɪd/ adj.  (规则、方法等) 死板的；僵硬的;刻板的;固执的;顽固的;      rigid hierarchies</span><br><span class="line">                            坚硬的,刚性的    hard hat 安全帽     hard hat is so rigid </span><br><span class="line"></span><br><span class="line">synonym synonym /ˈsɪnənɪm/  n.  同义词</span><br><span class="line">					 </span><br><span class="line">dice dice /daɪs/  n. 骰子，筛子； 掷骰子游戏;小方块         dice games；  no dice 没门</span><br><span class="line">                  v.  把(食物)切成小块;将…切丁</span><br><span class="line">				  </span><br><span class="line">scope scope  /skoʊp/    （题目、组织、活动等的）范围          with a larger scope.</span><br><span class="line"></span><br><span class="line">quota quota /ˈkwoʊtə/   定量，配额，限额，定额</span><br><span class="line"></span><br><span class="line">lease lease /liːs/ v. 出租(尤指房地产或设备)；租赁      lease term 租期；   </span><br><span class="line">                   n.  租约；租契；出租协议</span><br><span class="line">				   </span><br><span class="line">trail trail /treɪl/  n.  踪迹，足迹，行踪，痕迹；乡间小路;林间小道     </span><br><span class="line">                     v.  跟踪;追踪;追猎 </span><br><span class="line">trailing trailing /ˈtreɪlɪŋ/ adj.  拖尾的，后面的；蔓延的      trailing dot   以 . 结尾</span><br><span class="line"></span><br><span class="line">abate abate /əˈbeɪt/   减弱，减轻，减少             The storms had abated by the time </span><br><span class="line"></span><br><span class="line">mitigate mitigate  /ˈmɪtɪɡeɪt/	  减轻，缓和，缓解</span><br><span class="line"></span><br><span class="line">relieve /rɪˈliːv/    缓和，缓解，减轻，解除</span><br><span class="line">											</span><br><span class="line">provenance provenance /ˈprɑːvənəns/  n.  出处，发源地，起源；来源；</span><br><span class="line"></span><br><span class="line">engage engage /ɪnˈɡeɪdʒ/  v.  参与，参加;使参与，使参加（谈话）;（与…）建立密切关系           I have never engaged in the drug trade..</span><br><span class="line">                              任命;聘用;雇用,使从事                 engage in, engage on</span><br><span class="line">							  与（某人）交战；与（某人）开战     to engage the enemy,  engage with 								</span><br><span class="line">									</span><br><span class="line">dairy dairy /ˈderi/ n.  牛奶场;乳品公司;乳品店;乳品场;(当地的)小商店</span><br><span class="line">                    adj. 牛奶的；奶制的；乳品的;乳品业的；生产乳品的     dairy cattle/farmers ,  the dairy industry</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line">accident accident /ˈæksɪdənt/ n. （交通）意外，事故；意外遭遇；不测事件</span><br><span class="line"></span><br><span class="line">accidental accidental /ˌæksɪˈdentl/  adj.  意外的；偶然（发生）的</span><br><span class="line"></span><br><span class="line">resurrect resurrect /ˌrezəˈrekt/  v.  使复兴;恢复;使重新出现;起死回生；使复活    resurrect the dead.					</span><br><span class="line">								  </span><br><span class="line">delay delay /dɪˈleɪ/  v. 延迟（或耽搁、拖延）的时间;延期；使延期;使延迟;推迟</span><br><span class="line">                      n. 延误;延期;耽搁;延迟(或耽搁、拖延)的时间</span><br><span class="line">					  </span><br><span class="line">absent absent /æbˈsent/  adj.   不在的；缺席的;</span><br><span class="line">                         vt.  不在;缺席;不参加</span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line">visualization visualization /ˌvɪʒuələˈzeɪʃn/	 可视化;显色;显示，直观性；形象表示	</span><br><span class="line">visualize visualize /ˈvɪʒuəlaɪz/  v.  使形象化;可视化;</span><br><span class="line"></span><br><span class="line">interoperable interoperable /ˌɪntərˈɑːpərəbl/  adj.  (计算机系统或程序) 互相操作的；配合动作的；互用的</span><br><span class="line">interoperably</span><br><span class="line"></span><br><span class="line">formal formal /ˈfɔːrml/ adj.  正式的，正规的；规范的;庄重的</span><br><span class="line"></span><br><span class="line">informal informal /ɪnˈfɔːrml/  adj.  非正式的;非正规的;日常的;随便的;随意的</span><br><span class="line"></span><br><span class="line">notion notion /ˈnoʊʃn/  n.  看法;理念；信念；理解；概念;观念;</span><br><span class="line"></span><br><span class="line">loose loose /luːs/ adj.  松的，不紧的；未固定的；松脱的</span><br><span class="line"></span><br><span class="line">illustrate illustrate /ˈɪləstreɪt/	    v.  （用示例，图画等）解释，说明；加插图于；给（书等）做图表       an illustrated textbook 。 </span><br><span class="line">                                             表明;说明;证明       The example of the United States illustrates this point...</span><br><span class="line">											 </span><br><span class="line">identifiable identifiable /aɪˌdentɪˈfaɪəbl/	adj.  可识别;可辨认的</span><br><span class="line"></span><br><span class="line">snippet snippet /ˈsnɪpɪt/	一小段(谈话、音乐等);一则(新闻);一小条(消息),片段		a snippet of information </span><br><span class="line"></span><br><span class="line">locality locality /loʊˈkæləti/   n.  地方，地点;地区                data locality   数据本地化</span><br><span class="line"></span><br><span class="line">interfering interfering /ˌɪntərˈfɪrɪŋ/  adj.  好干涉的;爱管闲事的;干涉他人私生活的；      do not interfere with custom user labels.</span><br><span class="line"></span><br><span class="line">deadline deadline /ˈdedlaɪn/  n.  最后期限;截止日期</span><br><span class="line"></span><br><span class="line">embed embed /ɪmˈbed/  v.  把…牢牢地嵌入（或插入、埋入）;使插入;使嵌入</span><br><span class="line"></span><br><span class="line">dependent dependent /dɪˈpendənt/  adj.  依靠的；依赖的;受…的影响；取决于;附属的     dependent visa。 dependent on</span><br><span class="line">                                  n.  从属物;依靠者;被扶养人：被赡养人：非独立生活的人 = dependant </span><br><span class="line">								  </span><br><span class="line">dependency dependency /dɪˈpendənsi/  n.  附属国;附属地;托管地;（尤指过分或不利的）依靠，依赖</span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line"></span><br><span class="line">prototype prototype /ˈproʊtətaɪp/    n.  原型，样品，样本     built a prototype of a machine, prototype machine</span><br><span class="line"></span><br><span class="line">primarily  primarily /praɪˈmerəli/ 主要地;根本地</span><br><span class="line">							 </span><br><span class="line">proper proper  /ˈprɑːpər/   合适的，适当的，恰当的</span><br><span class="line"></span><br><span class="line">obsolete obsolete /ˌɑːbsəˈliːt/  adj.  过时的；废弃的；淘汰的</span><br><span class="line"></span><br><span class="line">advertise advertise /ˈædvərtaɪz/	v.  (为...)做广告，宣传，展现，宣传（自己的事）               to advertise a product/a business/your services</span><br><span class="line">                                        （在报纸、公共场所公告牌、互联网等上）公布，征聘          We are currently advertising for a new sales manager.</span><br><span class="line">										</span><br><span class="line">drastic drastic /ˈdræstɪk/  adj.  极端的；急剧的；严厉的；猛烈的          drastic measures/changes</span><br><span class="line">drastically </span><br><span class="line"></span><br><span class="line">average average /ˈævərɪdʒ/ adj.  平均的,均值的</span><br><span class="line">                           n.  平均数；均值						  </span><br><span class="line"></span><br><span class="line">experimental experimental /ɪkˌsperɪˈmentl/  adj.  以实验（或试验）为基础的；实验性的；试验性的</span><br><span class="line">experimentally </span><br><span class="line"></span><br><span class="line">evolve evolve /iˈvɑːlv/    v. 发展，进化，演变    evolve from ... , evolve into ...</span><br><span class="line"></span><br><span class="line">regression regression /rɪˈɡreʃn/  回归，倒退，退化,回退               This is a regression introduced in kubeadm 1.15  </span><br><span class="line"></span><br><span class="line">suppose  假设，假定，设想    Suppose flights are fully booked on that day</span><br><span class="line">         猜想，认为，推断    Getting a visa isn&#x27;t as simple as you might suppose</span><br><span class="line"></span><br><span class="line">emerge emerge /iˈmɜːrdʒ/  v.  出现;露出;显露，显现，暴露;浮现;   emerge from ; emerge one after another 层出不穷</span><br><span class="line"></span><br><span class="line">continuous continuous /kənˈtɪnjuəs/ adj.  连续不断的;持续的;不中断的</span><br><span class="line">continuously continuously</span><br><span class="line"></span><br><span class="line">opportunity opportunity /ˌɑːpərˈtuːnəti/  n.  机会;时机</span><br><span class="line"></span><br><span class="line">commit commit /kəˈmɪt/  v.  犯(罪);做(坏事);自杀;        to commit murder</span><br><span class="line">                            承诺，许诺，保证（做某事、遵守协议或遵从安排等）;明确表态   </span><br><span class="line"></span><br><span class="line">commitment commitment /kəˈmɪtmənt/ n. 承诺；许诺；允诺承担；保证           makes a strong commitment to maintain compatibility</span><br><span class="line"></span><br><span class="line">graduate graduate /ˈɡrædʒueɪt/   v. 毕业(尤指中学);大学毕业;授予…学位</span><br><span class="line">                                 n.  大学毕业生，学士学位获得者</span><br><span class="line"></span><br><span class="line">constitute constitute /ˈkɑːnstɪtuːt/  v.  构成;组成;（合法或正式地）成立，设立    Learn about what constitutes a compatible change.</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">uniform uniform  /ˈjuːnɪfɔːrm/	adj.  统一的，一致的，相同的                the requests are processed in a uniform manner</span><br><span class="line">                                n.    制服 ，（某一群体的）特种服式，军服，校服      The town police wear dark blue uniforms</span><br><span class="line">								</span><br><span class="line">represent represent   /ˌreprɪˈzent/    代表，表示，象征，表现</span><br><span class="line">                                       （在竞赛或体育赛事中）代表（国家或地区），代理，代表（个人或团体）</span><br><span class="line">									   </span><br><span class="line">representation representation /ˌreprɪzenˈteɪʃn/  n.  表现；描述；描绘；表现形式;</span><br><span class="line"></span><br><span class="line">internally internally /ɪnˈtɜrnəli/  adv.  国内的;内政的;(组织)内部的;内部地；</span><br><span class="line">internal internal /ɪnˈtɜːrnl/ adj.  （机构\组织）内部的；里面的;国内的;内政的;     </span><br><span class="line"></span><br><span class="line">activity activity /ækˈtɪvəti/  n.  活动；行动；   outdoor activities.   social activity.  human activity.  </span><br><span class="line"></span><br><span class="line">activate activate /ˈæktɪveɪt/ v. 使活动；激活；使活化;使运作；使起作用；</span><br><span class="line"></span><br><span class="line">invalid invalid /ɪnˈvælɪd /  adj.  （法律上或官方）不承认的,不合法的；无效的，作废的   invalid data, invalid user.</span><br><span class="line"></span><br><span class="line">invalid invalid /ˈɪnvəlɪd/  n.  病弱者;久病衰弱者;伤残者</span><br><span class="line"></span><br><span class="line">significant  significantly  /sɪɡˈnɪfɪkənt/	adj.  重要的, 有重大意义的，显著的   a highly significant discovery</span><br><span class="line"></span><br><span class="line">taint taint  /teɪnt/   v.  n.   污染，玷污，毁坏/败坏(名声)，污点，瑕疵</span><br><span class="line"></span><br><span class="line">dual dual /ˈduːəl/   双的，双重的，二重的，两部分的         She has dual nationality， dual screens, dual role</span><br><span class="line"></span><br><span class="line">stack /stæk/   （通常指码放整齐的）一叠，一摞，一堆    a stack of books</span><br><span class="line"></span><br><span class="line">conjunction conjunction /kənˈdʒʌŋkʃn/ n.  (事件的)同时发生，同地发生   the conjunction of two events.</span><br><span class="line">                                          连同…;与…一起         in conjunction with</span><br><span class="line">					 </span><br><span class="line">condition condition /kənˈdɪʃn/  n.   状况;状态; (居住、生活或工作的)条件，环境; (某一群人的)生活状况，境况;   in a bad condition. working condition.</span><br><span class="line"></span><br><span class="line">allocate allocate  /ˈæləkeɪt/  分配，划拨，分派        The project is being allocated more resources.    Tickets are limited and will be allocated to those who apply first</span><br><span class="line"></span><br><span class="line">aspect aspect /ˈæspekt/  方面，层面，</span><br><span class="line"></span><br><span class="line">up to date with  最新的 ; 现代的 ; 新式的 ; 时髦的 ; 拥有最新信息的   up to date with news</span><br><span class="line"></span><br><span class="line">monitor monitor /ˈmɑːnɪtər/  n.  显示屏；监视器；（计算机）显示器；监控器；监测器   computer monitor  /kəmˈpjuːtər ˈmɑːnɪtər/</span><br><span class="line">                                 班长；级长；班代表</span><br><span class="line">							 v.  监控;监视;监督, 监听    monitor the health of .  </span><br><span class="line">							 </span><br><span class="line">eviction eviction /ɪˈvɪkʃn/  驱逐，驱赶</span><br><span class="line">evict evict /ɪˈvɪkt/  v.  驱逐，赶出，逐出          They were evicted from their apartment</span><br><span class="line"></span><br><span class="line">submit submit /səbˈmɪt/  v.  提交，呈递（建议、文件、报告或请求）</span><br><span class="line">                             顺从；屈服；投降；不得已接受，被迫接受         She refused to submit to threats.</span><br><span class="line">							 </span><br><span class="line">fraction fraction /ˈfrækʃn/  n.  小部分；少量；一点儿;             The cost is only a fraction of his salary.</span><br><span class="line">                                 分数；小数</span><br><span class="line">								 </span><br><span class="line">shift shift /ʃɪft/  v.&amp; n.  转移；挪动; (使)移动;(使)挪动;(使)转移        shift your weight  挪动身体,  shift your position  变换姿势；改变立场</span><br><span class="line">                            (意见、情况、政策)有所变动，稍作改变;使发生些许变化     policy shift </span><br><span class="line">						    换(车挡);变(车速)</span><br><span class="line">							</span><br><span class="line">corner corner /ˈkɔːrnər/ n.  角;                   the four corners of a square;   corner case 极端情况;边界情况</span><br><span class="line">                             墙角;壁角;街角;拐角;角落，偏远处       table in the corner of the living room</span><br><span class="line">							 （道路的）急转弯               The car was taking the corners too fast.</span><br><span class="line">							 （嘴）角;（眼）角</span><br><span class="line"></span><br><span class="line">hint hint /hɪnt/  n.  暗示，提示，示意；</span><br><span class="line">                  v.  暗示;透露;示意</span><br><span class="line"></span><br><span class="line">terminate terminate /ˈtɜːrmɪneɪt/  v.  （使）停止，结束，终止;</span><br><span class="line">termination termination /ˌtɜːrmɪˈneɪʃn/  n.  结束；终止；末端；终端</span><br><span class="line"></span><br><span class="line">lock lock /lɑːk/  v.  （用锁）锁上；被锁住;把…锁起来;扣住；拴住；（使）固定</span><br><span class="line"></span><br><span class="line">locker locker /ˈlɑːkər/  n.  （学校、工作场所或运动俱乐部等处的）寄物柜，储物柜;有锁存物柜，寄存柜</span><br><span class="line">					 </span><br><span class="line">reject reject /rɪˈdʒekt , ˈriːdʒekt/  v.  拒绝接受；排斥，拒绝,拒收;不予考虑;;不接受;不同意;不录用;不录取    His application was rejected..</span><br><span class="line">                                          排斥(移植器官)；对…产生排斥反应</span><br><span class="line">									  n. 残次品，不合格品     reject rate</span><br><span class="line">									  </span><br><span class="line">critical critical /ˈkrɪtɪkl/   adj.   关键的，极重要的           It was a critically important moment in his career.</span><br><span class="line">critically                            严重的，有危险的 ，(病情)危急的    </span><br><span class="line"></span><br><span class="line">imminent imminent /ˈɪmɪnənt/  adj.  即将发生的；临近的;逼近的;迫近的，紧迫的    imminent danger;    imminent node shutdown</span><br><span class="line"></span><br><span class="line">emit  /iˈmɪt/  发出，射出，散发（光、热、声音、气味等）   emitted</span><br><span class="line">					 </span><br><span class="line">swap swap /swɑːp/ v.  交换（东西,工作）;用…替换；把…换成；掉换</span><br><span class="line">						  </span><br><span class="line">employ employ /ɪmˈplɔɪ/ v.  雇用,使从事</span><br><span class="line">                            使用;采用;利用;应用;运用</span><br><span class="line"></span><br><span class="line">fall fall /fɔːl/  v.  落下；下落；掉落；跌落;突然倒下；跌倒；倒塌            One of the kids fell into the river.</span><br><span class="line">                      下垂；低垂            Her hair fell over her shoulders</span><br><span class="line">					  </span><br><span class="line">prohibit prohibit /prəˈhɪbɪt/  v.  （尤指以法令）禁止;阻止；使不可能，不允许          prohibited from utilizing swap memory。 prohibit doing sth.</span><br><span class="line"></span><br><span class="line">inhibitor inhibitor /ɪnˈhɪbɪtər/ n.  抑制剂；阻聚剂;抑制基因</span><br><span class="line"></span><br><span class="line">inhibit inhibit /ɪnˈhɪbɪt/ v.  阻止；阻碍；抑制;约束;禁止;</span><br><span class="line"></span><br><span class="line">aforementioned aformentioned /əˈfɔːrmenʃənd/  adj.  前面提到的；上述的      To maintain the aforementioned security。</span><br><span class="line"></span><br><span class="line">guarantee guarantee /ˌɡærənˈtiː/  n.  保证；担保;保修单；保用证书;担保金；担保物；抵押品</span><br><span class="line">                                  v.  保证；确保；使必然发生;承诺做；           The ticket will guarantee you free entry.</span><br><span class="line"></span><br><span class="line">calculation calculation /ˌkælkjuˈleɪʃn/ n.  计算,运算;计算结果;估计；预测；推测</span><br><span class="line">					   </span><br><span class="line">------------------------------</span><br><span class="line">catalog catalog /ˈkætəlɔːɡ/ n.  目录;一览表;种类;</span><br><span class="line">                            v.  为…编目录;登记分类;记载（某人、某事的）详情</span><br><span class="line"></span><br><span class="line">installation installation /ˌɪnstəˈleɪʃn/ n.  安装（设备或机器）；设置;</span><br><span class="line">install install /ɪnˈstɔːl/  v. 安装（设备或机器）；设置;</span><br><span class="line"></span><br><span class="line">harden harden /ˈhɑːrdn/  v.  （使）变硬，硬化;（使）更坚定，更强硬</span><br><span class="line"></span><br><span class="line">hub hub /hʌb/ n. （某地或活动的）中心，核心;           the commercial hub of the city</span><br><span class="line">                  轮毂</span><br><span class="line">				 （网络）集线器</span><br><span class="line">				  </span><br><span class="line">spoke spoke /spoʊk/ v. 说话;讲话;交谈;谈;谈话;讲述;提起  speak的过去式</span><br><span class="line">                    n.  (车轮的)辐条;轮辐;            Kubernetes has a &quot;hub-and-spoke&quot; API pattern.										</span><br><span class="line">						 </span><br><span class="line">leverage leverage /ˈlevərɪdʒ/ n. 杠杆力，杠杆作用</span><br><span class="line">                              v. 举债经营；为…融资,借贷收购,利用    </span><br><span class="line">							  </span><br><span class="line">inject inject /ɪnˈdʒekt/ v. （给…）注射（药物、液体等）；添加,注入(某种特性)																  </span><br><span class="line">  									 </span><br><span class="line">initiate initiate /ɪˈnɪʃieɪt /  v.  开始；发起；创始;初始化</span><br><span class="line"></span><br><span class="line">destined destined  /ˈdestɪnd/ v. 预定；注定；（尤指）命中注定;开往；运往；前往;去（或运）往（某地）的</span><br><span class="line"></span><br><span class="line">robotic robotic /roʊˈbɑːtɪk/ adj.  自动操作的;机械的;机器人的;像机器人的;机械呆板的</span><br><span class="line"></span><br><span class="line">robot robot /ˈroʊbɑːt/ n.  机器人;自动操作装置</span><br><span class="line"></span><br><span class="line">regulate regulate /ˈreɡjuleɪt/  v. (尤指通过规章制度)管理，控制,调整，调节       regulate the traffic. regulate economy.</span><br><span class="line"></span><br><span class="line">thermostat thermostat /ˈθɜːrməstæt/  n.  恒温器;温度自动调节器  a thermostat in a room.</span><br><span class="line"></span><br><span class="line">temperature temperature /ˈtemprətʃər/  n.  温度;气温;体温</span><br><span class="line">						 </span><br><span class="line">interactive interactive /ˌɪntərˈæktɪv/	adj.  交互式的；人机对话的； 互动的</span><br><span class="line">interact interact /ˌɪntərˈækt/  v. 相互作用，互动；交流；沟通；合作；相互影响；</span><br><span class="line"></span><br><span class="line">eventual  eventually   最后的，最终的，结果的</span><br><span class="line"></span><br><span class="line">frost frost /frɔːst/ n.  严寒天气；霜,霜冻；冰点以下的温度</span><br><span class="line">                     v.  （使）蒙上霜，结霜</span><br><span class="line">					 </span><br><span class="line">heat heat /hiːt/  n.  热,温度,炎热天气；（建筑物、车辆等中的）高温，热的环境       to suffer from the heat.  heat of the water </span><br><span class="line">                  v.  加热；变热；（使）变暖 ;把…加热;使升温        to heat several thousand homes.</span><br><span class="line">				  </span><br><span class="line">heater heater /ˈhiːtər/  n.  加热器;热水器;炉子,发热器    water heater 热水器；  electric heater， electric water heater，  frost protection heater</span><br><span class="line"></span><br><span class="line">native native /ˈneɪtɪv/  adj.  本地的；当地的，土著的，国内的；出生地的；儿时居住地的</span><br><span class="line">                         n.    本国人;本地人; 土人，土著</span><br><span class="line">						 </span><br><span class="line">consistent consistent /kənˈsɪstənt/	adj.  一致的， (观点或看法)前后一致的，连贯的；始终如一的</span><br><span class="line"></span><br><span class="line">consist /kənˈsɪst/   由...组成，由…构成    The committee consists of ten members。                    consist of sth</span><br><span class="line">                     在于;存在于     The beauty of the city consists in its magnificent buildings.       consist in sth</span><br><span class="line">					 </span><br><span class="line">persistent persistent /pərˈsɪstənt/	 adj.  持续存在的，持续的;持久的;</span><br><span class="line">                                           执著的；不屈不挠的；锲而不舍的</span><br><span class="line"></span><br><span class="line">persist persist /pərˈsɪst/  v.  坚持，执著；          She persisted in her search for the truth.</span><br><span class="line">                              （不喜欢的事物）继续存在                  Contact your doctor if the cough persists.</span><br><span class="line">							  </span><br><span class="line">constant constant /ˈkɑːnstənt/ adj.  连续发生的；不断的；重复的;不变的；固定的；恒定的;持续不断的;一直存在的</span><br><span class="line">                               n.  常数，恒量，常量，持久不变，始终如一</span><br><span class="line">constantly</span><br><span class="line"></span><br><span class="line">potential potential potentially /pəˈtenʃl/	潜在的，可能的      Clearly this is a potentially dangerous situation	， potential customers</span><br><span class="line">potential         n. 潜力，潜能 ，可能性    The boy has great potential</span><br><span class="line">potentially</span><br><span class="line"></span><br><span class="line">tenet tenet /ˈtenɪt/ n.  宗旨，原则，信条；基本原则，根本信条   company tenet.  service tenet. </span><br><span class="line"></span><br><span class="line">monolithic monolithic /ˌmɑːnəˈlɪθɪk/ adj.   (组织或体系)庞大而僵化的，单一的;庞大而无特点的;巨大而单调的    n.  单片电路，单块电路</span><br><span class="line"></span><br><span class="line">interlink interlink /ˌɪntərˈlɪŋk/  v. &amp; n. (使)连接; (使)相互连接;(使)相互联结;连环</span><br><span class="line"></span><br><span class="line">scene scene /siːn/ n.  (戏剧、书的)场面,场景，片段；情景;</span><br><span class="line">									   </span><br><span class="line">election election /ɪˈlekʃn/ n.  选举，推选           to vote in an election </span><br><span class="line"></span><br><span class="line">vote vote /voʊt/   v. &amp; n.   投票，表决，选举；选票，票数</span><br><span class="line"></span><br><span class="line">heartbeat heartbeat /ˈhɑːrtbiːt/  n. 心跳；心搏；心跳声</span><br><span class="line"></span><br><span class="line">heart heart /hɑːrt/ n.  心，心脏；胸部心脏的部位；;胸口</span><br><span class="line">                        内心；心肠；（尤指）爱心    She has a kind heart.</span><br><span class="line">						</span><br><span class="line">renewal renewal /rɪˈnuːəl/ n.  重新开始，（对合同等的）有效期延长，展期，续订，更新</span><br><span class="line">					</span><br><span class="line">stamp stamp /stæmp/ n.  邮票;</span><br><span class="line">                        印；印章;印记；章；图章;戳;戳记;</span><br><span class="line">				    v.  盖(章);打(戳记);在…上盖(字样或图案等)</span><br><span class="line">------------------------------</span><br><span class="line"></span><br><span class="line">inspect inspect /ɪnˈspekt/   v. 检查，视察，查看；审视</span><br><span class="line"></span><br><span class="line">alternative alternative /ɔːlˈtɜːrnətɪv/  adj.  可供替代的;可供选择的;备选的；备用的；其他的;（能源）替代的，代用的</span><br><span class="line">                                         n.  可供选择的事物</span><br><span class="line">alternatively</span><br><span class="line"></span><br><span class="line">hash hash /hæʃ/  n. （尤指电话上的）#号; (回锅)肉丁土豆 ; 搞砸     made a total hash    搞得一团糟</span><br><span class="line">                 v.  把…弄糟;搞砸</span><br><span class="line"></span><br><span class="line">obvious obvious /ˈɑːbviəs/  adj.  明显的；显然的；易理解的;当然的;</span><br><span class="line">obviously </span><br><span class="line"></span><br><span class="line">hybrid hybrid /ˈhaɪbrɪd/    adj.   杂交的，杂种得，混杂得，混合得            hybrid rice；   hybrid system;   hybrid car , hybrid clouds.</span><br><span class="line">                            n.     混杂，杂交（动植物），混血儿，混合物，混合动力车</span><br><span class="line">							   </span><br><span class="line">decouple decouple /diːˈkʌpl/   使(国家、机构或观点)分离;（使）脱离;（使）互不相干</span><br><span class="line"></span><br><span class="line">couple couple /ˈkʌpl/   n.  夫妇，情侣，一对儿；两人；两件事物     I saw a couple of men get out.</span><br><span class="line">                        v.  (把车辆或设备等)连接，结合;性交;交配</span><br><span class="line">						</span><br><span class="line">pace pace /peɪs/  n.  步伐，速度，节奏；步速</span><br><span class="line">                  v.  来回踱步;走来走去;调整节奏;确定速度;</span><br><span class="line"></span><br><span class="line">region region /ˈriːdʒən/	地区;地带;行政区域,区域</span><br><span class="line"></span><br><span class="line">responsive responsive /rɪˈspɑːnsɪv/  adj.  反应敏捷；反应积极;反应热烈的；热情的;有响应的，有反应的</span><br><span class="line">unresponsive unresponsive /ˌʌnrɪˈspɑːnsɪv/  adj.  无反应的；未答复的；反应迟钝的</span><br><span class="line"></span><br><span class="line">split split /splɪt/  v.  分裂，使分裂（成不同的派别）;分开，使分开（成为几个部分）;（使）断裂;（使）裂开;分割        split the bills 拼单</span><br><span class="line">                     n.  裂缝，裂隙；分裂</span><br><span class="line">			 </span><br><span class="line">migrate migrate /ˈmaɪɡreɪt/    迁移，转移，移居     To learn about migrating from using dockershim</span><br><span class="line">migration migration /maɪˈɡreɪʃn/      the migration of animals </span><br><span class="line"></span><br><span class="line">replica replica /ˈreplɪkə/	复制品，仿制品</span><br><span class="line">replicate replicate /ˈreplɪkeɪt/			 复制，仿制； 复制品，仿制品</span><br><span class="line">replication  /ˌreplɪ&#x27;keɪʃ(ə)n/   复制， 拷贝	</span><br><span class="line"></span><br><span class="line">scaffold scaffold /ˈskæfoʊld/ n. 脚手架;建筑架；支架；断头台；绞刑架</span><br><span class="line">                              v. 给... 搭建手架           scaffolding along with</span><br><span class="line">					 </span><br><span class="line">hierarchy hierarchy /ˈhaɪərɑːrki/  n.  等级制度（尤指社会或组织）;（思想、信仰的）等级体系，分级结构，层级结构</span><br><span class="line"> </span><br><span class="line">hierarchical hierarchical /ˌhaɪəˈrɑːrkɪkl/   adj.   等级制度的，按等级划分的,分等级的     hierarchical model, hierarchical controle</span><br><span class="line"></span><br><span class="line">negotiate negotiage /nɪˈɡoʊʃieɪt/  v.  谈判；磋商；协商;商定；达成（协议）</span><br><span class="line"></span><br><span class="line">dial dial /ˈdaɪəl/  v.  拨(电话号码);拨号;</span><br><span class="line">                    n.  表盘；刻度盘；标度盘；仪表盘</span><br><span class="line"></span><br><span class="line">stale stale /steɪl/  adj.  (食物，尤指面包和糕点等) 不新鲜的,变味的;（空气）污浊的；（烟味）难闻的</span><br><span class="line">                           (地方、活动或观点)令人厌倦的，缺乏新鲜感的;没有新意的；老掉牙的</span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line">repeatable repeatable /rɪˈpiːtəbl /   可重复;</span><br><span class="line"></span><br><span class="line">standardization standardization /ˌstændədaɪ&#x27;zeɪʃ(ə)n/  n. 标准化;规范化;规格化;标准定型和改型计划</span><br><span class="line"></span><br><span class="line">colocate colocate co-locate /ˈkoʊ.loʊ.keɪt/  v.   (数据中心或计算机网络)将多个服务器、网络设备或数据存储设备放置在同一个物理位置</span><br><span class="line">                                                  驻扎/放置在同一地点</span><br><span class="line"></span><br><span class="line">form  /fɔːrm/   v.  构成，是……的组成部分；组织，建立，形成</span><br><span class="line">                n.  表格；  类型，类别，种类</span><br><span class="line"></span><br><span class="line">refer refer /rɪˈfɜːr/  v.  谈及;谈到,提到;提及;参考;引用</span><br><span class="line"></span><br><span class="line">outline outline v.  概述，概括，显示...的轮廓，勾勒...的外形             We outlined our proposals to the committee</span><br><span class="line">                n.  概述，概括，梗概，轮廓       This is a brief outline of the events，</span><br><span class="line"></span><br><span class="line">tag tag /tæɡ/  n.  标签；标牌;标记；标识符   luggage tag</span><br><span class="line">               v.  给…贴标签;在…上做记号;给…起诨名</span><br><span class="line"></span><br><span class="line">product product /ˈprɑːdʌkt/	n.  产品;产物;制品        dairy/meat products</span><br><span class="line"></span><br><span class="line">production production /prəˈdʌkʃn/ n.  （大量）生产，制造，制作;产生；形成；生成</span><br><span class="line"></span><br><span class="line">produce produce /prəˈduːs , ˈprɑːduːs/  v. /prəˈduːs/  生产；制造;造出;产生；生长；长出；</span><br><span class="line">                                        n.  /ˈprɑːduːs/   产品;(尤指)农产品	</span><br><span class="line">										</span><br><span class="line">digest digest /ˈdaɪdʒest/ v.  消化;理解;领悟;领会         The food was hard to digest.</span><br><span class="line">                          n.  文摘;概要；汇编;摘要</span><br><span class="line"></span><br><span class="line">serialization serialization /ˌsɪriələˈzeɪʃn/  n.  (书的)连续发表，连续刊载;连载小说;连续剧; 序列化</span><br><span class="line"></span><br><span class="line">series series /ˈsɪriːz/ n.  一系列，一连串； (广播或电视的)系列节目,系列片；串行             a series of meetings ； TV series 电视剧</span><br><span class="line"></span><br><span class="line">serial serial /ˈsɪriəl/ n.  电视连续剧;广播连续剧;杂志连载小说</span><br><span class="line">                        adj. 顺序排列的；排成系列的，序列化的；串行的         Serial and parallel </span><br><span class="line">serially serially</span><br><span class="line"></span><br><span class="line">serialize serialize /ˈsɪriəlaɪz/  v.  连载，连播；序列化，串行化</span><br><span class="line"></span><br><span class="line">parallel parallel  /ˈpærəlel/  并行的，同时发生的</span><br><span class="line">parallelism parallelism /ˈpærəlelɪzəm/   并行;并发  </span><br><span class="line"></span><br><span class="line">suffix /ˈsʌfɪks/	n.  后缀</span><br><span class="line">                    v.  加...作为后缀，把...附在后面</span><br><span class="line"></span><br><span class="line">robust robust robustly /roʊˈbʌst/   强健的，健壮的；坚固的，结实的，      He became robustly healthy.</span><br><span class="line"></span><br><span class="line">versatile versatile /ˈvɜːrsətl/  adj.  多才多艺的；有多种技能的；多面手的;            versatile persion</span><br><span class="line">                                      (食物、建筑物等) 多用途的；多功能的             versatile machine</span><br><span class="line"></span><br><span class="line">substitute substitute /ˈsʌbstɪtuːt/  v.  （以…）代替；取代;替换       Nothing can substitute for the advice your doctor give you.</span><br><span class="line">                                     n.  代替者;代替物;代用品;替补(运动员)       a meat substitute.   </span><br><span class="line">									 </span><br><span class="line">array array /əˈreɪ/  n.  数列;数组;阵列;</span><br><span class="line">                         一大批；一大群,一大堆            an array of problems</span><br><span class="line">						 </span><br><span class="line">proprietary proprietary /prəˈpraɪəteri/  adj.  (商品) 专卖的；专营的；专利的;专有的;</span><br><span class="line">                                         n.    所有权;所有人;所有物;专卖药品;独家制造（及销售）的产品</span><br><span class="line">										</span><br><span class="line">---------------------------------------------</span><br><span class="line">							  </span><br><span class="line">vary vary /ˈveri/ v.  （大小、形状等）相异，不同，有别             The quality of the students&#x27; work varies </span><br><span class="line">                      （根据情况）变化，变更，改变           The menu varies with the season.</span><br><span class="line">					   </span><br><span class="line">variant variant /ˈveriənt/    n. 变种，变形，变体             you can skip the default CoreDNS deployment and deploy your own variant.</span><br><span class="line">                              adj.  不同的，变异的，易变的</span><br><span class="line">							  </span><br><span class="line">various  /ˈveriəs/	adj.	各种各样的，不同的;各个的，各别的;	</span><br><span class="line"></span><br><span class="line">variety variety /vəˈraɪəti/  n. （同一事物的）不同种类，多种式样;多样化</span><br><span class="line"></span><br><span class="line">varying varying /ˈveriɪŋ/  adj.  不同的，易变的							  </span><br><span class="line"></span><br><span class="line">dedicated   adj.   专用的，专心致志的，一心一意的     dedicated server/storage</span><br><span class="line"></span><br><span class="line">dedicate  /ˈdedɪkeɪt/   为...奉献,把…奉献给    She dedicates herself to her work.   He dedicated his life to helping the poor</span><br><span class="line"></span><br><span class="line">versus versus /ˈvɜːrsəs/  prep.  (表示两队或双方对阵）与…对阵;（比较两种不同想法、选择等）与…相对，与…相比</span><br><span class="line"></span><br><span class="line">deserve deserve /dɪˈzɜːrv/  v.  值得；应得；应受         You deserve a rest after all that hard work.     They didn&#x27;t deserve to win.</span><br><span class="line"></span><br><span class="line">assurance assurance /əˈʃʊrəns/  n.  保证；确保；担保;(人寿)保险         a life assurance company.  information security assurance</span><br><span class="line"></span><br><span class="line">virtualization virtualization /vɜːtʃuəlaɪˈzeɪʃn/  虚拟化                hardware virtualization</span><br><span class="line"></span><br><span class="line">overhead overhead /ˌoʊvərˈhed / n.  开销，经常费用;经常开支;</span><br><span class="line">                                adj.  头上方的；地面以上的；高架的           overhead power lines.  overhead light.  overhead road.</span><br><span class="line"></span><br><span class="line">expense expense /ɪkˈspens/  n.  费用；价钱;花钱的东西；开销; 开支；花费；         Running a car is a big expense.    at the expense of some additional overhead</span><br><span class="line">at the expense of 以...为代价</span><br><span class="line"></span><br><span class="line">associate associate /əˈsoʊ.ʃieɪt/	  v.  联想，联系，使与（某个组织、事业或观点）有关系		I always associate the smell of baking with my childhood.	</span><br><span class="line">                                          交往，（尤指）混在一起，与…厮混     			I don&#x27;t like you associating with those people.   </span><br><span class="line">                                      adj. (常用于头衔) 非正式的；准的；副的       an associate member/director/editor  </span><br><span class="line">                                           联合的；有关联的                 an associate company in Japan</span><br><span class="line">                                      n.   同事，伙伴，合伙人         business associates</span><br><span class="line">								   </span><br><span class="line">land land /lænd/  n.  陆地，土地，大地；地产；地皮，（尤指）耕作用地，建筑用地</span><br><span class="line">                  v.  （使）着陆，降落，靠岸，登陆；（使）登陆；抵达;             The pilot landed the plane safely.</span><br><span class="line">				  </span><br><span class="line">helmsman helmsman /ˈhelmzmən/  舵手，操舵员</span><br><span class="line"></span><br><span class="line">helm helm /helm/  舵柄;舵轮,舵      </span><br><span class="line">at the helm     负责；掌管，掌权，掌舵</span><br><span class="line">take the helm   担任领导人；掌管</span><br><span class="line"></span><br><span class="line">pilot pilot /ˈpaɪlət/  飞行员，（飞行器）驾驶员；（船舶的）引航员,领航员；引水员；领港员</span><br><span class="line"></span><br><span class="line">intersection intersection /ˌɪntərˈsekʃn/ n.  十字路口；交叉路口；交点;横断；交叉；相交</span><br><span class="line"></span><br><span class="line">section section /ˈsekʃn/  n.  部分；部门; (文件的)节,章;(法律的)条，款，项</span><br><span class="line"></span><br><span class="line">effect   效果，结果，效应，影响				 The whole effect is cool.          the change will not take an effect.</span><br><span class="line">effective /ɪˈfektɪv/  adj.   有用得，产生效果得，有效的;起作用的</span><br><span class="line">effectively</span><br><span class="line">											</span><br><span class="line">lifecycle lifecycle  生命周期，生活周期 </span><br><span class="line"></span><br><span class="line">hook hook /hʊk/ n.  钩；钓钩；挂钩；鱼钩;</span><br><span class="line">                v.  （用钩）吊住，挂住，固定;（用手臂、腿或脚）钩住，绕住</span><br><span class="line">				    钓（鱼）       At the first cast I hooked a huge fish</span><br><span class="line">					连接到，接通       hook it up to your TV</span><br><span class="line">					</span><br><span class="line">program program /ˈproʊɡræm/  程序，编码指令</span><br><span class="line"></span><br><span class="line">analogous analogous /əˈnæləɡəs/   adj.  相似的；类似的；可比拟的         Analogous to many programming language</span><br><span class="line"></span><br><span class="line">hang hang /hæŋ/  悬挂，悬吊，吊，           I found his jacket, which was hanging up in the hallway</span><br><span class="line">hung /hʌŋ/  </span><br><span class="line"></span><br><span class="line">deliver deliver  /dɪˈlɪvər/  交付，运输，传递，投递，递送</span><br><span class="line">delivery</span><br><span class="line"></span><br><span class="line">heal heal /hiːl/    痊愈;愈合;治愈 ,（使）康复，复原; （感情创伤）愈合;（情感）恢复常态           It took a long time for the wounds to heal.</span><br><span class="line"></span><br><span class="line">survive survive /sərˈvaɪv/  v.  幸存；幸免于难；艰难度过;存活;</span><br><span class="line"></span><br><span class="line">maintenance maintenance /ˈmeɪntənəns/		 （对建筑物、道路、机器等的）定期维修，维护，检修，保养； （状态、进程等的）维持，保持	 </span><br><span class="line"></span><br><span class="line">abstraction abstraction /æbˈstrækʃn/    抽象概念；抽象;抽象名称;（艺术的）抽象主义   higher-level abstraction</span><br><span class="line"></span><br><span class="line">handle handle /ˈhændl/  n.  （门窗）把手；（工具、包、杯等的）柄，把，拉手,手柄，柄状物;</span><br><span class="line">                        v.  有能力应付;（成功地）处理;使用，控制，操纵,驾驶（武器、车辆等）;训练，使唤（动物）</span><br><span class="line">						</span><br><span class="line">diagram diagram /ˈdaɪəɡræm/		n.  示意图，图解，图表，简图       a diagram of the wiring system，    The results are shown in diagram 2，   a circuit diagram.</span><br><span class="line">                                v.  用图表示，图解 		</span><br><span class="line">								</span><br><span class="line">--------------------------------</span><br><span class="line">stop stop /stɑːp/  v.  （使）停止，停下;（使）中断，</span><br><span class="line"></span><br><span class="line">phase phase  /feɪz/    阶段，时期，   phase in，逐步采用；分阶段引入 ；  phase out  逐步淘汰；逐步放弃</span><br><span class="line">                      v. 把…分阶段     will be phased over two years</span><br><span class="line"></span><br><span class="line">overall  /ˌoʊvərˈɔːl , ˈoʊvərɔːl/	总体的，全面的，综合的		the overall rise in unemployment	。  Overall I was disappointed. </span><br><span class="line"></span><br><span class="line">roll roll /roʊl/   v.  (使)滚;(使)滚动，转动 ； (身体)滚动，打滚        The ball rolled into the net.  When I was a little kid I rolled down a hill and broke my leg</span><br><span class="line">                       转动(眼睛)；(眼珠)骨碌碌地转                People may roll their eyes </span><br><span class="line">                       摇(车窗);卷（窗帘等)          roll down their shutters</span><br><span class="line">					   </span><br><span class="line">                   n.  卷;卷轴； 卷状物          chicken roll,  spring roll</span><br><span class="line">				   </span><br><span class="line">rollup rollup   汇总;上卷;卷起;滚动</span><br><span class="line"></span><br><span class="line">observe observe /əbˈzɜːrv/  v.  观察，观测，看到；注意到；遵守，奉行（法律、规则、习俗等）</span><br><span class="line">observability observability /əbˌzɜrvəˈbɪlɪti/  可观测性;可观察性</span><br><span class="line"></span><br><span class="line">observation observation /ˌɑːbzərˈveɪʃn/  n.  观察；观测；监视;观察力     She has good powers of observation.</span><br><span class="line"></span><br><span class="line">guard guard /ɡɑːrd/  n. 警卫，守卫，看守，卫兵;警卫员；</span><br><span class="line">                     v. 警卫；守卫；护卫；保卫;看守；监视          tightly guarded</span><br><span class="line">					 </span><br><span class="line">other than   除了…以外，除外;      Other than what is documented here</span><br><span class="line"></span><br><span class="line">initial initial /ɪˈnɪʃl/  adj.  最初的；开始的；第一的</span><br><span class="line">                          n.  (名字的)首字母</span><br><span class="line">initially</span><br><span class="line">initialize initialize /ɪˈnɪʃəlaɪz/	v. 初始化(计算机程序或系统);预置;格式化(磁盘)</span><br><span class="line"></span><br><span class="line">probe probe /proʊb/  v. 探测，探查，侦探，探索  </span><br><span class="line">                     n. 探针，探测器，探头；探索，调查         space probe 空间探测器；News Probe 新闻调查</span><br><span class="line"></span><br><span class="line">readiness readiness /ˈredinəs/  n.  准备就绪；乐意</span><br><span class="line"></span><br><span class="line">diagnostic diagnostic /ˌdaɪəɡˈnɑːstɪk/  n. 诊断;诊断程序(诊断计算机的错误);诊断法;诊断提示(计算机错误的显示)</span><br><span class="line"></span><br><span class="line">accurate accurate /ˈækjərət/  adj.  精确的，准确的；正确无误的；（说法、描述）确切的，恰当的          most accurate information.</span><br><span class="line"></span><br><span class="line">precise precise /prɪˈsaɪs/	 adj.  准确的；确切的；精确的；明确的</span><br><span class="line"></span><br><span class="line">exact exact exactly /ɪɡˈzækt/  adj.  精确的；准确的;正确的;确切的;严谨的；严格的；一丝不苟的           What were his exact words?</span><br><span class="line"></span><br><span class="line">procedure procedure /prəˈsiːdʒər/  n.  （正常）程序，手续，步骤;（商业、法律或政治上的）程序</span><br><span class="line"></span><br><span class="line">density density /ˈdensəti/  密集；稠密；密度；浓度</span><br><span class="line"></span><br><span class="line">outcome outcome /ˈaʊtkʌm/  n. 结果；结局；后果;效果</span><br><span class="line">						 </span><br><span class="line">live live /lɪv /       v.  活着，生存；（以某种方式）生活，过日子；           The doctors said he only had six months to live.</span><br><span class="line">                           居住</span><br><span class="line">          /laɪv/       adj.  活的,活着的，有生命力的； </span><br><span class="line">		                   现场直播的；实况转播的；现场演出的            live coverage of the World Cup</span><br><span class="line">							 </span><br><span class="line">object /əbˈdʒekt/	n.  物体，物品，东西；（极欲得到、研究、注意等的）对象</span><br><span class="line">                        目标，目的，宗旨										 </span><br><span class="line">objective objective /əbˈdʒektɪv/   n.  目标，目的，宗旨		 the main/primary objective	， job objective		</span><br><span class="line">                                   adj.  客观的，就事论事的，客观存在的，基于事实的			 </span><br><span class="line"></span><br><span class="line">subjective subjective  /səbˈdʒektɪv/   adj.   主观地（非客观的），主观的（非现实世界的），个人地            a highly subjective point of view</span><br><span class="line"></span><br><span class="line">subject subject  /ˈsʌb.dʒɛkt/    n.  主题，题目，话题，题材     an unpleasant subject of conversation</span><br><span class="line">                                     学科；科目；课程    Biology is my favourite subject.	</span><br><span class="line">                                 adj.  可能受…影响的；易遭受…的      Flights are subject to delay because of the fog </span><br><span class="line">								                                      makes the connection subject to man-in-the-middle attacks</span><br><span class="line">subject to  受...的影响	</span><br><span class="line"></span><br><span class="line">necessary necessary /ˈnesəseri/ adj.  必要的;必需的</span><br><span class="line">                                n.  基本生活必需;必需品</span><br><span class="line"></span><br><span class="line">necessarily necessarily /ˌnesəˈserəli/</span><br><span class="line"></span><br><span class="line">accord accord /əˈkɔːrd/  v.  （与…）一致；（与…）相符             Such an approach accords with the principles of socialist ideology.</span><br><span class="line">                              使受到，给予;授予(权力、地位、某种待遇)    </span><br><span class="line">                         n.  （国家、团体之间的正式）协定，协议，条约				a fitting way to celebrate the peace accord.</span><br><span class="line">						 </span><br><span class="line">accordingly accordingly /əˈkɔːrdɪŋli/	 adv.   因此;所以;相应地</span><br><span class="line"></span><br><span class="line">accordance accordance /əˈkɔːrdns/ n. 按照;依据;符合;一致;给予;赋予;             in accordance with sth  依照；依据 , in accordance with the Pod&#x27;s restartPolicy</span><br><span class="line"></span><br><span class="line">chance /tʃæns/   机会；机遇；时机</span><br><span class="line">change /tʃeɪndʒ/</span><br><span class="line"></span><br><span class="line">flow flow /floʊ/  n.  流;流动，流淌;持续生产；不断供应   cash flow.  </span><br><span class="line">                  v.  (液体、气体或电) 流，持续移动；流动,涌流； (信息)传播，流传;(资金)流通</span><br><span class="line">				  </span><br><span class="line">				  </span><br><span class="line">beyond beyond /bɪˈjɑːnd/  prep.  超出;超过;除…之外;超出…之外；非…所能及                   The handle was just beyond my reach.</span><br><span class="line">                                 在…的另一边；在…那一边              They heard footsteps in the main room, beyond a door.</span><br><span class="line"></span><br><span class="line">suit suit /suːt/  n. (男士的)一套外衣，套装，西装; (女士的)一套外衣，套装，套裙;(从事特定活动时穿的)成套服装</span><br><span class="line">                  v.   (服装、风格、颜色)使显得漂亮，与…相配;适合,合身       Green suits you</span><br><span class="line">suitable suitable /ˈsuːtəbl/	合适的;适宜的;适当的</span><br><span class="line">suitability			  </span><br><span class="line">			</span><br><span class="line">arbitrary arbitrary /ˈɑːrbɪtreri/  adj.  任意的,随意的;任性的;主观的；武断的;     that may be targeted by arbitrary forms of declarative specifications.</span><br><span class="line"></span><br><span class="line">reverse reverse /rɪˈvɜːrs/  adj.  反向的，相反的，背面，反面的    reverse proxy ,</span><br><span class="line">                            n. 倒挡，倒车             </span><br><span class="line">                            v. 颠倒，反转，调转               reverse the order of these coins</span><br><span class="line">							   倒车                            Another car reversed out of the drive</span><br><span class="line"></span><br><span class="line">forcibly /ˈfɔːrsəbli/   强制的，强行的;用武力;</span><br><span class="line">forcible forcible /ˈfɔːrsəbl/   强行的;用暴力的</span><br><span class="line"></span><br><span class="line">leak leak /liːk/	v.  漏；渗漏；走漏；泄露；透露     memory leak,  resource leak</span><br><span class="line">                    n.  渗漏，泄露；漏洞，裂缝   There is a leak in the app.  gas leak.   oil leak </span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">completion completion completion /kəmˈpliːʃn/  n. 完成；结束;（房地产等的）完成交易，完成交割</span><br><span class="line"></span><br><span class="line">surface surface /ˈsɜːrfɪs/   n.  表面，表层，上面；桌面;台面;操作台；外表;表象</span><br><span class="line">                             v.  升到水面;浮出水面;显露;暴露;流露;公开</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inspire inspire /ɪnˈspaɪər/  v.  激励；鼓舞;驱使;启发;使产生灵感和热情</span><br><span class="line">inspiration inspiration /ˌɪnspəˈreɪʃn/ n.  灵感;启示;启发;启发灵感的人（或事物）；使人产生动机的人（或事物）;鼓舞人心的人（或事物）</span><br><span class="line"></span><br><span class="line">secondary secondary /ˈsekənderi/ adj.  次要的；从属的；辅助的      Sidecar containers are the secondary containers </span><br><span class="line">                                       间接引发的；继发性的；次生的     a secondary effect</span><br><span class="line">                                       中等教育的；中学的</span><br><span class="line"></span><br><span class="line">primary primary /ˈpraɪmeri/  adj.  主要的，首要的，基本的；    Our primary concern must be the children</span><br><span class="line">                                   最初的，最早的，初等教育的，小学教育的    primary teachers</span><br><span class="line"></span><br><span class="line">functionality functionality /ˌfʌŋkʃəˈnæləti/  n.  （计算机或电子系统的）功能;设计目的；设计功能</span><br><span class="line"></span><br><span class="line">function function /ˈfʌŋkʃn/  n.  功能;职能；机能;作用;(数) 函数</span><br><span class="line"></span><br><span class="line">abrupt abrupt /əˈbrʌpt/  adj.  （言语、行为）粗鲁的，鲁莽的，莽撞的，唐突的；生硬的</span><br><span class="line">abruptly abruptly               突然的，意外的（常指令人不快的改变或行为）   He stopped abruptly</span><br><span class="line">----------------------</span><br><span class="line">palace palace /ˈpæləs/  n.  王宫，宫殿；皇宫；总统府；豪华住宅；宫殿</span><br><span class="line"></span><br><span class="line">disruptive disruptive /dɪsˈrʌptɪv/   adj.  引起混乱的；扰乱性的；破坏性的;制造混乱的       disruptive behavior.</span><br><span class="line"></span><br><span class="line">disruption disruption /dɪsˈrʌpʃn/  n. 中断，扰乱，混乱；分裂，破坏，毁坏</span><br><span class="line"></span><br><span class="line">disrupt disrupt /dɪsˈrʌpt/  v.  中断，打断，扰乱；打乱               Demonstrators succeeded in disrupting the meeting.</span><br><span class="line"></span><br><span class="line">voluntary voluntary /ˈvɑːlənteri/  adj.  自愿的；自发的；志愿的；主动的；义务的，无偿得；自告奋勇的    a voluntary agreement.  voluntary action</span><br><span class="line"></span><br><span class="line">involuntary involuntary /ɪnˈvɑːlənteri/  adj.  非自愿的,非自发的；非本意的;无意识的；不自觉的;          Voluntary and involuntary disruptions</span><br><span class="line"> </span><br><span class="line">disappear disappear /ˌdɪsəˈpɪr/  v.  消失；不见;失踪;不复存在；灭绝；消亡</span><br><span class="line"></span><br><span class="line">appear appear /əˈpɪr/  v.  出现；显现;呈现;              A bus appeared around the corner.</span><br><span class="line">                           好像;似乎;看来;看起来；显得         He appears a perfectly normal person.  </span><br><span class="line"></span><br><span class="line">unavoidable unavoidable /ˌʌnəˈvɔɪdəbl/  adj.  不可避免的;无法避免的;难以预防的；无法阻止的</span><br><span class="line"></span><br><span class="line">avoidable avoidable /əˈvɔɪdəbl/  adj.   可避免的;可预防的</span><br><span class="line"></span><br><span class="line">avoid avoid /əˈvɔɪd/  v.  避免；防止         The accident could have been avoided.</span><br><span class="line">                          回避；避开；躲避        He&#x27;s been avoiding me all week.</span><br><span class="line"></span><br><span class="line">panic   惊慌，恐慌，惶恐不安，人心惶惶</span><br><span class="line"></span><br><span class="line">except except /ɪkˈsept/  不包括;不计;把…除外;除了；只是   We work every day except Sunday.    Nothing more to do now except wait.</span><br><span class="line"></span><br><span class="line">drain drain /dreɪn/  v.   排水，排空， (使)流干;(使)排干，（使）流光，放干，使（精力、金钱等）耗尽       you should first drain the node and make sure that the node is empty</span><br><span class="line">                     n.   排水管，下水道，阴沟,下水道孔盖    Tony built his own house and laid his own drains.</span><br><span class="line"></span><br><span class="line">fit fit /fɪt/   v.  适合，合身;（使）与…一致，和…相称，符合;使适合，使胜任（某工作）   </span><br><span class="line">                adj.  适合的，恰当的，合格的 ;合格的;胜任的         The food was not fit for human consumption.</span><br><span class="line"></span><br><span class="line">budget budget /ˈbʌdʒɪt/   n.  预算，安排;政府的年度预算       a monthly/an annual/a family budget.   the education/defence budget 。 over budget 超过预算</span><br><span class="line"></span><br><span class="line">rack rack /ræk/  n.  挂物架；搁物架，置物架;支架；架子 ;（机器的）齿条，齿轨              luggage rack  行李架，  clothes rack 衣架</span><br><span class="line">                 v.  使痛苦不堪;使受折磨; 折磨;使痛苦            Her face was racked with pain.</span><br><span class="line"></span><br><span class="line">compact /kəmˈpækt/	   压缩，压紧，</span><br><span class="line"></span><br><span class="line">defrag  defragment  碎片整理，磁盘整理程序</span><br><span class="line"></span><br><span class="line">intend  打算，计划，想要    She intends to do A levels and go to university。   The module is intended for nginx developers</span><br><span class="line"></span><br><span class="line">honor honor /ˈɑːnər/ v. 尊敬;尊重;给与…的光荣;接受</span><br><span class="line">                     n.  荣誉;荣幸;尊敬;名誉</span><br><span class="line"></span><br><span class="line">cordon cordon /ˈkɔːrdn/  n.  警戒线，封锁线，哨兵线;封锁圈</span><br><span class="line">                         v.  以警戒线分隔或包围</span><br><span class="line"></span><br><span class="line">natural natural /ˈnætʃrəl/  adj.  非人为的;自然的;天然的，天生的;本能的;与生俱来的;         natural disasters.  the natural world .</span><br><span class="line">                                  正常的;合乎常情的;出于本性的，生来就有的</span><br><span class="line">								  天赋的</span><br><span class="line">						    n.  天生的料子;天才</span><br><span class="line"></span><br><span class="line">specialize specialize /ˈspeʃəlaɪz/   v. 专门从事;专门经营;专门研究;专攻             He specialized in criminal law.    specialize in sth  专门从事</span><br><span class="line">specialized specialized /ˈspeʃəlaɪzd/  adj.  专业化的;专门的;特殊的</span><br><span class="line"></span><br><span class="line">specialization specialization /ˌspeʃ(ə)lɪ&#x27;zeɪʃ(ə)n/   n.  专业化;专门化;特长；专业性</span><br><span class="line"></span><br><span class="line">overlap overlap /ˈoʊvərlæp/   （物体）部分重叠，交叠;(物体或时间上)部分重叠;（范围方面）部分重叠</span><br><span class="line"></span><br><span class="line">compatibility compatibility /kəmˌpætəˈbɪləti/ n.  （尤指计算机及程序的）兼容性，相容性 ;和睦相处；并存；相容</span><br><span class="line"></span><br><span class="line">compatible compatible /kəmˈpætəbl/  adj.   兼容得，可共存的；可共用的；</span><br><span class="line"></span><br><span class="line">incompatible incompatible /ˌɪnkəmˈpætəbl/  adj.  不相容的，不兼容的，互斥的;</span><br><span class="line"></span><br><span class="line">capability capability /ˌkeɪpəˈbɪləti/  n.  能力；才能;素质</span><br><span class="line"></span><br><span class="line">capacity  /kəˈpæsəti/   容量，生产力，生产量，</span><br><span class="line"></span><br><span class="line">attack attack /əˈtæk/  v.  攻击;袭击;(在战争中使用武器的)进攻;（队员等的）进攻;</span><br><span class="line">                           抨击;强烈指责;非难</span><br><span class="line"></span><br><span class="line">-----------------------------------------</span><br><span class="line"></span><br><span class="line">consequent consequent /ˈkɑːnsɪkwənt/  adj. 随之发生的，作为结果的；随之而来的</span><br><span class="line">consequently consequently</span><br><span class="line"></span><br><span class="line">consequence consequence /ˈkɑːnsɪkwens/  n.  后果，结果；       in consequence (of sth)   由于；作为…的结果    unfortunate consequence</span><br><span class="line">consequence for/of something    给…带来的后果/…造成的后果             as a consequence of</span><br><span class="line"></span><br><span class="line">constraint constraint /kənˈstreɪnt/	n. 限制，约束，限定</span><br><span class="line">constrain constrain /kənˈstreɪn/	v.  限制，限定，约束，强迫，强制     he felt constrained to accept it。 Research has been constrained by a lack of funds</span><br><span class="line"></span><br><span class="line">contrast contrast /ˈkɑːntræst/  n.  明显的差异；对比；对照;（电视屏幕的）图像明暗对比度，反差;           In contrast  与此相反。   in contrast with 与...形成对比</span><br><span class="line">                  /kənˈtræst/   v.  对比，对照</span><br><span class="line"></span><br><span class="line">influence influence /ˈɪnfluəns/		 n. 影响力，支配力，控制力，势力，权势            she had less influence and couldn&#x27;t control him	</span><br><span class="line">                                     v. 影响，左右，支配，控制		It is also possible to influence nginx load balancing algorithms even further by using server weights.	</span><br><span class="line"></span><br><span class="line">burst burst /bɜːrst/ v.  （使）爆裂，胀开;（使）炸开,（使）破裂           That balloon will burst.   </span><br><span class="line">                          猛冲；突然出现           burst in   破门而入</span><br><span class="line">					 n.  突发；猝发；迸发；爆破;爆裂；裂口             a burst pipe</span><br><span class="line">Burstable QoS</span><br><span class="line"></span><br><span class="line">candidate  /ˈkændɪdət/   候选人，应试者，申请人，参加考试的人</span><br><span class="line"></span><br><span class="line">preemption preemption /ˌpriːˈempʃn/  n.  优先;抢占;先发制人;先买权;先占</span><br><span class="line"></span><br><span class="line">preempt preempt  抢占;抢先;先发制人;取代;占先;</span><br><span class="line"></span><br><span class="line">criterion criterion /kraɪˈtɪriən/	（评判或作决定的）标准，准则，原则    The main criterion is</span><br><span class="line">criteria criteria /kraɪ&#x27;tɪriə/     （criterion得复数形式）</span><br><span class="line"></span><br><span class="line">lower-bound  下限</span><br><span class="line"></span><br><span class="line">flexibility flexibility /ˌfleksə&#x27;bɪləti/	 灵活性，弹性   Flexibility and control is key	 </span><br><span class="line">flexible</span><br><span class="line"></span><br><span class="line">flexibly flexibly /fleksəbli/   adv.   灵活的，柔软的，有弹性得</span><br><span class="line"></span><br><span class="line">effort effort /ˈefərt/	n.  努力，尽力，气力；精力			You should put more effort into your work.	  A lot of effort has gone into making this event a success.</span><br><span class="line">effortless efforlessly /ˈefərtləs/  不费力得，容易得，无需努力（即可得到）得</span><br><span class="line"></span><br><span class="line">overwhelm  /ˌoʊvərˈwelm/   压倒，压垮，打败</span><br><span class="line"></span><br><span class="line">privileged privilege /ˈprɪvəlɪdʒd/  有特权的，受特别待遇的</span><br><span class="line">unprivileged 无特权的   unprivileged user </span><br><span class="line"></span><br><span class="line">vulnerability vulnerability /ˌvʌlnərə&#x27;bɪləti/  n.  脆弱性;弱点;易伤性;易受攻击；（计算机）漏洞       vulnerability scanning.  vulnerability management. </span><br><span class="line"></span><br><span class="line">rate rate /reɪt/  n.  比率；率;频率     a high success/failure rate;   exchange/interest rates ,rates of exchange 汇率；利率;    at a rate of nearly one a week</span><br><span class="line">                      速度,速率；进度       Most people walk at an average rate of 5 kilometres an hour.</span><br><span class="line">				  v.  评价，评估，对（电影或录像片）分级;划分等级;估价;       There are several security vulnerabilities rated either HIGH or CRITICAL </span><br><span class="line"></span><br><span class="line">numerical  numerical /nuːˈmerɪkl/  adj.  数字的，用数字表示的     numerical data。   </span><br><span class="line">numerically /nuˈmɛrɪkli/</span><br><span class="line"></span><br><span class="line">alphanumeric alphanumeric /ˌælfənuːˈmerɪk/  含有字母和数字的;字母与数字并用的</span><br><span class="line"></span><br><span class="line">alpha alpha /ˈælfə/  阿尔法;希腊字母表的第1个字母</span><br><span class="line"></span><br><span class="line">alphabetic alphabetic  /ˌælfəˈbetɪk/   字母（顺序）的，</span><br><span class="line">alphabetically alphabetically</span><br><span class="line"></span><br><span class="line">content content  /ˈkɑːntent /  n.  内容，目录，所含之物；容纳得东西；</span><br><span class="line">                 /kənˈtent/    v.  满足；满意；知足 ;使满意；使满足          Martina contented herself with a bowl of soup.</span><br><span class="line">				               adj.  满足的;知足的; 满意的;惬意的</span><br><span class="line">contentment contentment /kənˈtentmənt/	n. 满足；满意；知足 ;</span><br><span class="line"></span><br><span class="line">practice practice /ˈpræktɪs/  n.  实践，实行，实际行动；练习；训练,实习</span><br><span class="line"></span><br><span class="line">furthermore furthermore /ˌfɜːrðərˈmɔːr/  另外，此外；而且；再者</span><br><span class="line"></span><br><span class="line">grant /ɡrænt/ v.  （尤指正式地或法律上）同意，准予，允许；授予，给予             The bank finally granted me a £500 loan。   My request was granted</span><br><span class="line">              n.   (政府、机构的)拨款,补助金                    They&#x27;d got a special grant to encourage research   , government grant    </span><br><span class="line"></span><br><span class="line">technology technology /tekˈnɑːlədʒi/  n.  科技;技术；工艺；工程技术；技术学；工艺学</span><br><span class="line"></span><br><span class="line">applicable applicable /ˈæplɪkəbl/	 适用的；适当的；可实施的	</span><br><span class="line"></span><br><span class="line">application application /ˌæplɪˈkeɪʃn/  n.  （计算机的）应用软件,应用程序;（尤指理论、发现等的）应用，运用      the application of new technology</span><br><span class="line">                                            申请；请求；申请书；申请表          a planning/passport application.</span><br><span class="line"></span><br><span class="line">apply  /əˈplaɪ/ (以书面形式)申请，请求     apply for a job/passport/visa,   to apply to a company/university  ,   He has applied to join the army.</span><br><span class="line">        使用，应用             The new technology was applied to farming</span><br><span class="line"></span><br><span class="line">reality reality /riˈæləti/  n.  现实，事实；实际情况;实际上；事实上        in reality</span><br><span class="line"></span><br><span class="line">tedious tedious /ˈtiːdiəs/  adj.  冗长的；啰唆的；单调乏味的；令人厌烦的,沉闷得    This work is tedious.  tedious task/job.</span><br><span class="line"></span><br><span class="line">prone prone /proʊn/  adj.  有做…倾向的；易于遭受…的;很可能…的   injury-prone  容易受伤的;  error-prone  容易出错的</span><br><span class="line"></span><br><span class="line">-------------------------------------</span><br><span class="line">ultimate ultimate /ˈʌltɪmət/  adj.  最后的；最终的；终极的;                 our ultimate goal/aim/objective/target </span><br><span class="line">                                    最根本的；最基础的；最原始的;最重要的；最强大的；至高的</span><br><span class="line">                              n.   最好（或先进、伟大等）的事物；极品；精华;极致；极限；最高典范</span><br><span class="line">ultimately ultimately /ˈʌltɪmətli/  adv.  最终；最后；终归;最基本地；根本上</span><br><span class="line">eventually</span><br><span class="line"></span><br><span class="line">probably probable /ˈprɑːbəbl/   可能得，也许的，大概得，有可能的</span><br><span class="line"></span><br><span class="line">declarative declarative /dɪˈklærətɪv/  陈述的,声明得</span><br><span class="line">declaratively </span><br><span class="line"></span><br><span class="line">behalf behalf /bɪˈhæf/	代表（或代替）某人     On behalf of the department I would like to thank you all.   on your behalf</span><br><span class="line">                        因为某人；为了某人     Don&#x27;t worry on my behalf.</span><br><span class="line"></span><br><span class="line">interchangeable interchangeable /ˌɪntərˈtʃeɪndʒəbl/    可交换的；可互换的；可交替的</span><br><span class="line">interchangeably</span><br><span class="line"></span><br><span class="line">classification classification /ˌklæsɪfɪˈkeɪʃn/ n.  分类；归类；分级;类别；等级；门类;（动植物等的）分类学，分类法;（图书馆的书、磁带、杂志等的）分类系统，编目</span><br><span class="line"></span><br><span class="line">classify classify /ˈklæsɪfaɪ/ v.  将…分类；将…归类;划分；界定    The books in the library are classified according to subject.</span><br><span class="line"></span><br><span class="line">classic classic /ˈklæsɪk/  adj.  有代表性的；典型的;(电影、著作、音乐)经典的，典范的，最优秀的</span><br><span class="line">                           n.   （书、电影或歌曲的）经典作品，名著，杰作</span><br><span class="line"></span><br><span class="line">essential essential /ɪˈsenʃl/  adj.  绝对必要的;必不可少的;基本的;本质的；根本的</span><br><span class="line">                               n.    必需品;不可或缺之物;（某学科的）基础，基本知识</span><br><span class="line"></span><br><span class="line">accelerator acceleractor /əkˈseləreɪtər/  n.  （汽车等的）加速装置，油门;（基本粒子）加速器</span><br><span class="line">accelerate accelerate /əkˈseləreɪt/ v. （使）加速，加快;（使）增速          Suddenly the car accelerated..</span><br><span class="line"></span><br><span class="line">archive archive /ˈɑːrkaɪv/   n.  档案；档案馆；档案室;史料;记录;            the National Sound Archive</span><br><span class="line">                             v.  把…存档;把…归档;将(不常用信息)存档</span><br><span class="line"></span><br><span class="line">flight flight /flaɪt/ n. 航班;班机;客机;飞行;空中航行，（物体的）飞行，飞行方向;航程;飞翔;</span><br><span class="line">in-flight   飞行中的;飞行过程中的 	</span><br><span class="line"></span><br><span class="line">course course /kɔːrs/  n.  （有关某学科的系列）课程，讲座;</span><br><span class="line">                           当然      of course</span><br><span class="line">						    (尤指船或飞机的)航向，航线，路线;所经之路，道路;  河道;   </span><br><span class="line">							进程;发展的方向;在…过程中       In the course of the 1930s steel production</span><br><span class="line">							一道菜        The lunch was excellent, especially the first course.   main course 主菜</span><br><span class="line">---------------------------------</span><br><span class="line">hood hood /hʊd/ n.  （外衣的）风帽，兜帽（外衣的一部分，可拉起蒙住头颈）;面罩;头罩</span><br><span class="line">                    （设备或机器的）防护罩，罩;（汽车的）发动机罩，引擎罩 </span><br><span class="line"></span><br><span class="line">orphan orphan /ˈɔːrfn/  n.  孤儿;遗孤（指无人照管的人或机构）;失去母兽的小动物</span><br><span class="line">                        adj.  无父母的，无父（或母）的，孤儿的;孤立无助的，被遗弃的;无人照管的，无人支持的;（幼小动物）失去母兽的;无商业赞助人的</span><br><span class="line">						v.  使成为孤儿,&lt;口&gt;使失去商业赞助人（或雇主）</span><br><span class="line"></span><br><span class="line">crash crash /kræʃ/  v.  碰撞，相撞，撞车；（机器或系统，尤指计算机或计算机系统的）崩溃</span><br><span class="line"></span><br><span class="line">revision revision /rɪˈvɪʒn/  n.  （一项、一轮等）修订，修改;修正;校订    a lot of revisions in his novel.    map revision.  </span><br><span class="line"></span><br><span class="line">vision vision /ˈvɪʒn/  n.   视力；视野;视觉；</span><br><span class="line">                            想象;展望;幻想;想象力;梦幻;</span><br><span class="line"></span><br><span class="line">version version /ˈvɜːrʒn/ v.  （电影、剧本、乐曲等的）版本，改编形式，改写本;变体；变种；型式</span><br><span class="line"></span><br><span class="line">horizon horizon /həˈraɪzn/   地平线</span><br><span class="line">horizontal horizontal /ˌhɔːrəˈzɑːntl/  adj.   水平得，平得，横向得；与地面平行的；</span><br><span class="line">horizontally </span><br><span class="line"></span><br><span class="line">surge surge /sɜːrdʒ/  v.  涌； (风、水等的)奔涌，汹涌；浪涌; (人群)蜂拥，涌动;急剧上升;飞涨;激增;</span><br><span class="line">                      n.  （电流）浪涌;(数量的)急剧上升，激增;大量;（强烈感情的）突发</span><br><span class="line"></span><br><span class="line">attribute /ˈætrɪbjuːt/	n.  属性，特性，特征         remove the problematic defaulted attributes</span><br><span class="line">           /əˈtrɪbjuːt /  v.  把…归因于；认为…是由于           She attributes her success to hard work and a little luck.</span><br><span class="line"></span><br><span class="line">factor factor /ˈfæktər/  n. 因素，因子；要素；因数；系数</span><br><span class="line"></span><br><span class="line">insufficient insufficient  /ˌɪnsəˈfɪʃnt/  不足的，不够的，不重要的      insufficient time  ，insufficient resources</span><br><span class="line"></span><br><span class="line">suffice suffice /səˈfaɪs/   v.   足够，足以，         suffice (it) to say (that)…     无须多说；只需说…就够了          ，so only setting the debug level will suffice</span><br><span class="line">sufficient</span><br><span class="line"></span><br><span class="line">denote denote /dɪˈnoʊt/ v.  标志；预示；象征;表示;标志;意指;是…的征兆;是…的标志    Red eyes denote strain </span><br><span class="line"></span><br><span class="line">stall stall /stɔːl/  n.  货摊，摊位，售货亭（尤指集市上的）;咨询台</span><br><span class="line">                         牲畜棚；马厩；牛棚</span><br><span class="line">					 v.  (使)(进程)暂停; 暂时阻止;(使)推后;拖延;把…拖住      progress has stalled</span><br><span class="line">					     (使)熄火，抛锚;           The engine stalled.</span><br><span class="line"></span><br><span class="line">dictate dictate /ˈdɪkteɪt/  v.  口授，口述，使听写；命令;发号施令;强行规定,决定，支配        Minimum availability is dictated by the parameters</span><br><span class="line"></span><br><span class="line">exit exit /ˈeksɪt/   v.  退出(计算机程序);出去;(剧本里的指示)退场;离去</span><br><span class="line">                     n.  出口；通道;（高速路、公路等的）出口，换道口;离开;退出;退场</span><br><span class="line"></span><br><span class="line">tweak tweak /twiːk/  v. &amp; n.  扭；拧；扯;（对机器、系统等的）轻微调整    	She gave his ear a tweak.</span><br><span class="line"></span><br><span class="line">twist twist  扭曲，扭动，捻，搓，绞（线）；转动，旋转；使缠绕    Her face twisted in anger 。  He twisted his head around to look at her.  Twist the knob to the left to open the door.</span><br><span class="line">twisted  扭曲的，弯曲的，变形的</span><br><span class="line"></span><br><span class="line">canary canary /kəˈneri/  金丝雀            manage a canary deployment for your system</span><br><span class="line"></span><br><span class="line">pipe pipe /paɪp/   n.  （通常指金属或塑料制的）管子，管道；            hot and cold water pipes</span><br><span class="line"></span><br><span class="line">pipeline pipeline /ˈpaɪplaɪn/  n.  输油管道，输气管道，输送管线（通常指地下的）</span><br><span class="line"></span><br><span class="line">straw straw /strɔː/   n.  (喝饮料用的)吸管;（收割后干燥的）禾秆，麦秆，稻草</span><br><span class="line"></span><br><span class="line">schema   /ˈskiːmə/   方式，模式，模型，纲要，提要     a highly simplified schema</span><br><span class="line"></span><br><span class="line">familiar /fəˈmɪliər/	熟悉的;</span><br><span class="line">similar /ˈsɪmələr/		相似得，相仿的</span><br><span class="line"></span><br><span class="line">similar similarly   /ˈsɪmələrli/	 相似的，相仿的，类似的	</span><br><span class="line"></span><br><span class="line">crowd crowd /kraʊd/  v.  挤，挤满；塞满；使…拥挤;涌上（心头）；涌入（脑海）     crowd around/round (sb/sth)  聚集在…周围；聚拢;  crowd in/into  大批涌入（狭小的空间）</span><br><span class="line">                     n.  人群；观众;一伙人；一帮人;群众；民众；老百姓；凡夫俗子      He prefers to be one of the crowd .  a crowd of people. </span><br><span class="line"></span><br><span class="line">acquisition acquisition /ˌækwɪˈzɪʃn/  n.  （知识、技能等的）获得，得到;购置物；收购的公司；购置的产业；购置；（对公司的）收购，并购</span><br><span class="line"></span><br><span class="line">acquire qcquire /əˈkwaɪər/  v.  （通过努力、能力、行为表现）获得，得到</span><br><span class="line"></span><br><span class="line">achieve achieve /əˈtʃiːv/ v. （凭长期努力）达到（某目标、地位、标准）;（经努力）完成，达到，获得           He had finally achieved success.   achieve contentment   知足常乐.</span><br><span class="line"></span><br><span class="line">fulfill  fullfil  /fʊl&#x27;fɪl/	 完成，实现，兑现，做到   fulfill a dream 	, fulfill the goals on the list</span><br><span class="line"></span><br><span class="line">lest lest /lest/  免得；以免        Read in a good light lest it should hurt your eyes.</span><br><span class="line"></span><br><span class="line">adopt adopt /əˈdɑːpt/  采取；采纳；采用; 收养;领养       not to overlap with the selectors of other controllers, lest they try to adopt this Pod.</span><br><span class="line"></span><br><span class="line">concurrency /kənˈkərənsē/    并发性，并行性</span><br><span class="line">concurrent concurrent /kənˈkɜːrənt/  adj.  并存的；同时发生的;并行得，并发得</span><br><span class="line"></span><br><span class="line">currency   货币</span><br><span class="line"></span><br><span class="line">algorithm algorithm /ˈælɡərɪðəm/	 n.  算法，计算程序 </span><br><span class="line"></span><br><span class="line">spark spark /spɑːrk/  n.  火花,电火花；火星;闪光</span><br><span class="line">                      v.  发出火花;闪光；产生电火花;冒火花;飞火星,引起(大火)</span><br><span class="line"></span><br><span class="line">accomplish accomplish /əˈkɑːmplɪʃ/ v. 完成；达成</span><br><span class="line"></span><br><span class="line">mandate mandate /ˈmændeɪt/  v.  授权;委任；强制执行;委托办理</span><br><span class="line">                            n.  （政府或组织等经选举而获得的）授权;委托书；授权令</span><br><span class="line"></span><br><span class="line">delegate delegate /ˈdelɪɡət , ˈdelɪɡeɪt/  n.  代表;(尤指)会议代表</span><br><span class="line">                                          v.  授(权);把(职责、责任等)委托(给);授权，委派（做）</span><br><span class="line">delegation delegation /ˌdelɪˈɡeɪʃn/	 n. 授权，委托，委派；代表团</span><br><span class="line">--------------------------------------</span><br><span class="line">stateless  /ˈsteɪtləs/    无国籍的，无状态的</span><br><span class="line">stateful stateful /ˈsteɪtf(ə)l/  有状态的;状态;有状态;状态性;状态的</span><br><span class="line"></span><br><span class="line">sticky /ˈstɪki/  adj. 粘性的，黏(性)的，一面带黏胶的          sticky note</span><br><span class="line">stickness /ˈstɪkinəs/   粘性;   黏性;   黏度;   粘着性;   粘滞性; </span><br><span class="line"></span><br><span class="line">stick stick  /stɪk/  v.  粘贴，黏住，粘住；（在某物中）卡住，陷住，动不了</span><br><span class="line">                         刺;扎;戳；将…刺入(或插入)</span><br><span class="line">                     n.  枯枝，柴枝，杖，棍，棒； (用于某一特定用途的)木条，木棍；条状物;棍状物;柴火棍儿  </span><br><span class="line">stuck stuck  /stʌk/</span><br><span class="line">chopsticks</span><br><span class="line"></span><br><span class="line">susceptible susceptible /səˈseptəbl/  adj.  易受影响（或伤害等）；易受…影响的;易为…左右的             He&#x27;s highly susceptible to sth.</span><br><span class="line">                                            易受(伤)的;易患(病)的，易受感染的;体质过敏的        subject to ...</span><br><span class="line"></span><br><span class="line">value value /ˈvæljuː/   n.  值，价值；重要性;有用性;益处              The value of this work experience。</span><br><span class="line">valuable valuable /ˈvæljuəbl/  adj.  很有用的；很重要的；宝贵的;很值钱的；贵重的;有价值的;          a valuable experience</span><br><span class="line"></span><br><span class="line">automation automation /ˌɔːtəˈmeɪʃn/   自动化</span><br><span class="line"></span><br><span class="line">automatic automatic /ˌɔːtəˈmætɪk/  adj.  自动的;自动化的;</span><br><span class="line">                                   n.   自动挡汽车;自动变速汽车</span><br><span class="line">automate automate /ˈɔːtəmeɪt/  v.  (使)自动化</span><br><span class="line"></span><br><span class="line">anonymous anonymous /əˈnɑːnɪməs/  adj.  匿名的，不知姓名的，名字不公开的，不具名的	    an anonymous letter。  You can remain anonymous if you wish.</span><br><span class="line"></span><br><span class="line">synonymous synonymous /sɪˈnɑːnɪməs/  adj.  同义的，同义词的;等同于…的,具有相同意义的</span><br><span class="line"></span><br><span class="line">provision provision /prəˈvɪʒn/   n. 提供，供给，给养，供应品        The provision of drinks.    provisioning system   配置系统</span><br><span class="line">                                    赡养；供养                    Special provision should be made for children</span><br><span class="line">                                   （法律文件的）规定，条款，条文      Pay attention to every provision when signing a contract.</span><br><span class="line">deprovision deprovision /ˌdiː.prəˈvɪ.ʒən/  (计算机)移除，撤销（权限/配置）	if you want to deprovision your cluster more cleanly	</span><br><span class="line"></span><br><span class="line">purge purge /pɜːrdʒ/  v.  清理，清除，清洗，肃清（组织中的异己分子）;净化（心灵、风气等）；涤荡（污秽）</span><br><span class="line"></span><br><span class="line">priority priority /praɪˈɔːrəti/  n.  优先事项；最重要的事；首要事情;优先；优先权；重点</span><br><span class="line"></span><br><span class="line">prior  prior /ˈpraɪər/   先前的，之前的，较早的； 优先的，占先的，较重要的</span><br><span class="line"></span><br><span class="line">simplicity simplicity simplicity /sɪmˈplɪsəti/ n. 简单（性）；容易（性）;简明          for simplicity. </span><br><span class="line"></span><br><span class="line">launch launch /lɔːntʃ/ v.  发射（火箭、导弹或卫星;航天器、武器等）</span><br><span class="line">                           使（船）下水；使（新船）首次下水</span><br><span class="line">						   推出，发布（新产品），发行</span><br><span class="line"></span><br><span class="line">validity /vəˈlɪdəti/   （法律上的）有效，合法性；（正式的）认可   符合逻辑；正当；正确            checks the syntax validity</span><br><span class="line">valid  /ˈvælɪd/</span><br><span class="line">validate /ˈvælɪdeɪt/   证实，确证，确认</span><br><span class="line"></span><br><span class="line">null null /nʌl/  adj.  零值的；等于零的; (协议、宣言或选举结果)无法律效力的，无效的</span><br><span class="line">                 n.    空位;无信号;数字零;空白符号</span><br><span class="line"></span><br><span class="line">nil nil  /nɪl/  n.  零；无;不存在;零分(通常用于表示橄榄球、足球等比赛中的得分)；</span><br><span class="line"></span><br><span class="line">void void /vɔɪd/  adj.  无效得，空的，没有得；缺乏的;</span><br><span class="line">                  n.    空白，空虚，真空，空间；        black void.  </span><br><span class="line"></span><br><span class="line">negative negative /ˈneɡətɪv/  adj.  消极的；负面的；缺乏热情的;悲观的;否定的，表示否认的</span><br><span class="line">                                    负极的; (数字、数量等)小于零的，负的;（化验或试验结果）阴性的</span><br><span class="line">									</span><br><span class="line">positive positive /ˈpɑːzətɪv/  adj.  积极乐观的；有信心的；自信的;积极的；肯定的；建设性的；朝着成功的;有助益的；正面的;</span><br><span class="line">                                     正数的，大于零的,正电的；正极的，阳极的;（化验或试验结果）阳性的</span><br><span class="line"></span><br><span class="line">prompt prompt /prɑːmpt/  v.  促使，敦促;推动；引起;导致;激起;鼓励，激励； </span><br><span class="line">                             提示，提醒（某人说话）;给（演员）提词       She was too nervous to speak and had to be prompted.</span><br><span class="line">                         adj.  迅速的;及时的;立即;准时的;敏捷的     </span><br><span class="line">						 n.  提示    voice prompt .    </span><br><span class="line">promptly promptly /ˈprɑːmptli/  adv.  迅速地；立即;及时地；马上</span><br><span class="line"></span><br><span class="line">sequential sequentially /sɪˈkwenʃl/   按次序的;顺序的;序列的</span><br><span class="line"></span><br><span class="line">partition partition /pɑːrˈtɪʃn/  v.  分割；（用隔板、隔扇等）隔开，使分裂;划分开</span><br><span class="line">                                 n.  隔断；隔扇；隔墙；隔板          glass partition .   partition wall.  disk partition.  </span><br><span class="line"></span><br><span class="line">revert revert /rɪˈvɜːrt/   v.  恢复,回到(以前的状态、制度或行为);恢复原样, 复原，还原;故态复萌          reverted to smoking heavily.</span><br><span class="line">                               (财产、权利等) 归还；归属      revert to sb/sth</span><br><span class="line"></span><br><span class="line">preserve   保持，维持，维护,保护；保存  We will do everything to preserve peace.</span><br><span class="line">maintain </span><br><span class="line"></span><br><span class="line">retention retention /rɪˈtenʃn/  n.  保持；维持；保留   water retention 保留水分；  retention time 保留时间；</span><br><span class="line"></span><br><span class="line">retain retain /rɪˈteɪn/  v.  保留，保持，保有；继续拥有;继续容纳            to retain your independence。  </span><br><span class="line"></span><br><span class="line">remain remain /rɪˈmeɪn/  v. 保持，继续，持续；   The three men remained silent</span><br><span class="line">                            留在，停留于(某处)      He will have to remain in hospital for at least 10 days</span><br><span class="line">						    遗留，剩余      Add the remaining control plane nodes to the load balancer target group</span><br><span class="line"></span><br><span class="line">reserve reserve /rɪˈzɜːrv/  v.  预订，预约（座位、席位、房间等）;保留；留出;预留</span><br><span class="line">                            n.  预留;保留；留出;</span><br><span class="line">							    (动植物)自然保护区，禁猎区;        nature reserve;</span><br><span class="line"></span><br><span class="line">reservation reservation /ˌrezərˈveɪʃn/  n.  预订;预约;预留；           make a reservation.</span><br><span class="line"></span><br><span class="line">bear bear /ber/ n.  熊;（在证券市场等）卖空的人,看跌的人</span><br><span class="line">                v.  抬；背负；负载；驮;</span><br><span class="line">				    持有；携带          right  to bear arms.</span><br><span class="line">					忍受，容忍（某人或某物），忍耐（不愉快经历）</span><br><span class="line">					心怀（感情，尤指坏心情）         Bear in mind that ...</span><br><span class="line">					开（花）；结（果）         start to bear fruit they will need a lot of water.</span><br><span class="line">					生育，生（孩子）   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bearer bearer /ˈberər/   传达消息者，送信人     I&#x27;m sorry to be the bearer of bad news.</span><br><span class="line">                         持有者，持有人，持票人，持有…的人    A pass will allow the bearer to enter the building.   bearer token</span><br><span class="line"></span><br><span class="line">reconcile reconcile /ˈrekənsaɪl/  v.  调和，协调（两种信仰、事实或要求）; 使和好;使和解;妥协;使配合;</span><br><span class="line"></span><br><span class="line">compromise compromise /ˈkɑːmprəmaɪz/  妥协，折中，和解，让步         After lengthy talks the two sides finally reached a compromise .   a compromise solution/agreement/candidate</span><br><span class="line"></span><br><span class="line">condemn condemn /kənˈdem/  v.  （通常因道义上的原因而）谴责，指责;宣告使用…不安全        strongly condemn</span><br><span class="line">                                宣判；判处（某人某种刑罚）</span><br><span class="line"></span><br><span class="line">condemned condemned   (建筑物)危险的;被判死刑的</span><br><span class="line">------------------------------</span><br><span class="line">docker docker /ˈdɑːkər/  n.  码头工人;船坞工人</span><br><span class="line"></span><br><span class="line">confuse cnofuse /kənˈfjuːz/ v. 混淆，使迷惑，使糊涂</span><br><span class="line">confused</span><br><span class="line"></span><br><span class="line">sophisticate sophisticate /səˈfɪstɪkeɪt/  n.  老于世故的人；见多识广的人;精于…之道的人;久经世故得人；</span><br><span class="line">                                          v.  使更高级，使精致;弄复杂；使老于世故，使失去天真;</span><br><span class="line">sophisticated sophisticated /səˈfɪstɪkeɪtɪd/  adj.  (机器、体系等) 复杂巧妙的；先进的；精密的;见多识广的；老练的；见过世面的</span><br><span class="line"></span><br><span class="line">eligible eligible /ˈelɪdʒəbl/ adj. 有资格的；合适的，合格的；具备条件的;符合条件的;有能力的;         it is eligible to run a Pod. </span><br><span class="line">                                  （作为结婚对象）合适的，中意的  </span><br><span class="line"></span><br><span class="line">		 </span><br><span class="line">deprecate deprecate  /ˈdeprəkeɪt/  不赞成，对…表示极不赞成，反对，否决</span><br><span class="line">deprecated      反对的，不赞成的，废弃的</span><br><span class="line"></span><br><span class="line">queue queue /kjuː/  n.  （人、汽车等的）队，行列, (等候的)一列人，一队车辆;（储存的数据）队列</span><br><span class="line">								  </span><br><span class="line">throttle throttle /ˈθrɑːtl/  v.  使窒息；掐死；勒死;掐住…的脖子;</span><br><span class="line">                             n.   (汽车、飞机的)节流阀，油门杆，油门踏板</span><br><span class="line">							     喉咙</span><br><span class="line"></span><br><span class="line">homologous homologous /hoʊˈmɑːləɡəs/  adj.  (technical 术语) （位置、结构等）相应的,一致的，类似的；同源的</span><br><span class="line"></span><br><span class="line">homogeneous homogeneous homogeneous /ˌhoʊməˈdʒiːniəs/  adj.  同种类的;同性质的;由相同成分（或部分）组成的</span><br><span class="line"></span><br><span class="line">heterogeneous heterogeneous heterogeneous /ˌhetərəˈdʒiːniəs/  adj.  各种各样的;由很多种类组成的;由不同成分组成的;成分混杂的</span><br><span class="line"></span><br><span class="line">rare rare /rer/ adj.  罕见的，稀少的；珍贵的，稀罕的；           In some rare cases</span><br><span class="line"></span><br><span class="line">-------------------------------</span><br><span class="line"></span><br><span class="line">kick kick /kɪk/  v.  踢；踹;踢蹬；踢（腿）;(体育运动，如足球和橄榄球) 踢球得分；射门得分; 踢（球或其他物体）      kick a door, kick a ball</span><br><span class="line">                 n.  踢；踢脚；踢腿;           the first kick of the game</span><br><span class="line">				     极度兴奋；极度刺激；极大的乐趣</span><br><span class="line"></span><br><span class="line">tolerate tolerate /ˈtɑːləreɪt/  v.  容忍;容许;宽容;忍受；忍耐</span><br><span class="line">toleration toleration /ˌtɑːləˈreɪʃn/ n.</span><br><span class="line">tolerant tolerant /ˈtɑːlərənt/  adj.  忍受的；容忍的；宽容的;（植物、动物、机器）能耐…的，有耐受性的     plants which are more tolerant of dry conditions .  be tolerant of         </span><br><span class="line"></span><br><span class="line">apparent apparent /əˈpærənt/  adj.  明显的，显然的;显然;显而易见；明白易懂；    It soon became apparent to everyone that he couldn&#x27;t sing.</span><br><span class="line"></span><br><span class="line">cap cap /kæp/  n.  （尤指男用有帽舌的）帽子,便帽，制服帽;（钢笔、瓶子等的）帽，瓶盖;瓶塞;（可用或可借资金的）最高限额;</span><br><span class="line">               v.  覆盖, 笼罩;限额收取(或支出);</span><br><span class="line">capped capped /kæpt/ adj. （贷款利率）有上限的，封顶的；加盖的</span><br><span class="line"></span><br><span class="line">lost lost /lɔːst/  adj.  迷路的；迷失的; 走失的          We always get lost in London</span><br><span class="line">                         遗失的；丢失的;失去的；丧失的；无法恢复的             I&#x27;m still looking for that lost file.</span><br><span class="line"></span><br><span class="line">inadvertent inadvertent inadvertently /ˌɪnədˈvɜːrtənt/  adj.  无意的;并非故意的;因疏忽造成的      I inadvertently pressed the wrong button.  inadvertent mistake.</span><br><span class="line"></span><br><span class="line">intent intent /ɪnˈtent/  n.  意图;目的;意向</span><br><span class="line">                         adj.  专心的;专注的;坚决的;下决心的；全神贯注的，专心致志的</span><br><span class="line">						 </span><br><span class="line">intentional  故意的，有意的，存心的;有目的的</span><br><span class="line"></span><br><span class="line">unintentionally unintentionally /ˌʌnɪnˈtɛnʃənəli/  无意的，不是故意的，无心的   </span><br><span class="line"></span><br><span class="line">interrupt interrupt /ˌɪntəˈrʌpt/  v.  打断;使暂停；使中断;中止;中断;使暂时停止</span><br><span class="line">                                      插嘴；打断(某人);打扰；打岔           Sorry to interrupt, but there&#x27;s someone to see you.</span><br><span class="line">interruption interruption /ˌɪntəˈrʌpʃn/ n. </span><br><span class="line"></span><br><span class="line">hence hence /hens/   adv.  因此，所以，由此     The trade imbalance is likely to rise again in 1990. Hence a new set of policy actions will be required soon.</span><br><span class="line"></span><br><span class="line">imply imply /ɪmˈplaɪ/  v.  暗指;暗示;含有…的意思;意味着;表明;说明;</span><br><span class="line"></span><br><span class="line">infer /ɪnˈfɜːr/    推断，推理，推论；   Much of the meaning must be inferred from the context.</span><br><span class="line">                   暗示，意指           Are you inferring (that) I&#x27;m not capable of doing the job?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">finalize finalize /ˈfaɪnəlaɪz/  v.  把（计划、旅行、项目等）最后定下来；定案;最后确定，最终敲定    I have to finalize this proposal</span><br><span class="line">finalizer finalizer /ˈfaɪnəlaɪzər/   n.  终结器;终结方法;使用终结器;完成器;终结函数</span><br><span class="line"></span><br><span class="line">precedence precedence /ˈpresɪdəns/		优先，优先权		  	 don&#x27;t let it take precedence over work，    take precedence over 优先于	</span><br><span class="line"></span><br><span class="line">linger linger /ˈlɪŋɡər/  v.  流连；逗留；徘徊；留恋；不愿离开；继续逗留;花很长时间做（某事）；磨蹭;继续存留</span><br><span class="line"></span><br><span class="line">degradation degradation /ˌdeɡrəˈdeɪʃn/  n.  恶化(过程);变糟;衰退; 降级，降格;(土地或环境的)退化      land degradation.  cause cluster performance degradation.</span><br><span class="line"></span><br><span class="line">batch batch /bætʃ/  一批；一组；一群       a batch of   一批；   first batch  首批；   </span><br><span class="line"></span><br><span class="line">Trade-offs  /treɪd ɔːfs/   权衡;取舍;交易;利弊权衡;有得有失</span><br><span class="line">tradeoff tradeoff /ˈtreɪˌdɔf/  n.  权衡;协调;交易;交换</span><br><span class="line"></span><br><span class="line">strength strength /streŋθ/ v.  体力；力气；力量; (面对困境的)信心，勇气</span><br><span class="line">                               强度;强烈程度；深度；力度</span><br><span class="line">							   优势；优点；长处</span><br><span class="line">							   浓度，效力</span><br><span class="line"></span><br><span class="line">weakness weakness /ˈwiːknəs/  n.  软弱；虚弱；疲软；衰弱；懦弱</span><br><span class="line">                                  （系统、性格等的）弱点，缺点，不足</span><br><span class="line"></span><br><span class="line">collaborate collaborate /kəˈlæbəreɪt/  v.  合作；协作(尤指著书或做研究);通敌；勾结敌人       We have collaborated on many projects over the years.</span><br><span class="line"></span><br><span class="line">computation computation /ˌkɑːmpjuˈteɪʃn/  n.  计算;计算过程       an error in the computation.   communicate with each other to collaborate in a computation.</span><br><span class="line"></span><br><span class="line">computer computer /kəmˈpjuːtər/  n.  计算机；电脑;</span><br><span class="line"></span><br><span class="line">compute compute /kəmˈpjuːt/ v.  计算；估算</span><br><span class="line"></span><br><span class="line">summarize summarize /ˈsʌməraɪz/  v.  总结;概述;概括</span><br><span class="line"></span><br><span class="line">summary summary /ˈsʌməri/  n.  总结;概要;概括</span><br><span class="line">                           adj.  概要的;概括的;即决的;总结性的;</span><br><span class="line"></span><br><span class="line">pause pause /pɔːz/  停顿；暂停;(按暂停键)暂停放音，暂停放像</span><br><span class="line"></span><br><span class="line">suspend suspend /səˈspend/  v.  暂停；中止；使暂时停职（或停学等）;延缓；暂缓；推迟;使暂停发挥作用（或使用等）;</span><br><span class="line">                                悬;吊;挂;</span><br><span class="line">suspension suspension /səˈspenʃn/ n. 暂令停职（或停学、停赛等）; 暂缓；推迟；延期; 暂停;</span><br><span class="line">                                     悬浮，悬挂，悬吊    suspension bridge  吊桥  suspension cable 吊索   magnetic suspension  磁悬浮</span><br><span class="line"></span><br><span class="line">resume resume /ˈrɛzjumeɪ, ˈrɛzəˌmeɪ/    n. 摘要；概述；概要;简历;</span><br><span class="line">              /rɪˈzuːm/      v.  重新开始；（使）继续进行;（中断后）继续;恢复(职位);回到（座位）    resume it to start. </span><br><span class="line"></span><br><span class="line">presume presume /prɪˈzuːm/  v.  假定，假设，设想</span><br><span class="line"></span><br><span class="line">assume assume  /əˈsuːm/	 假定，假设，认为              Let us assume for a moment that the plan succeeds	</span><br><span class="line">assumption assumption /əˈsʌmpʃn/   假设，假定，认为          This is a reasonable assumption on many Linux distributions </span><br><span class="line"></span><br><span class="line">toggle toggle /ˈtɑːɡl/  v.  (两种状态之间)切换，转换           He toggled between the two windows</span><br><span class="line">                            系纽扣</span><br><span class="line">                        n.  （大衣或袋子等上木质或塑料的）栓扣钉，棒形纽扣，套索扣；触发器</span><br><span class="line"></span><br><span class="line">unpredictable unpredictable /ˌʌnprɪˈdɪktəbl/ adj.  不可预测的;不可预知的;难以预料的;无法预言的；（人）善变的，难以捉摸的</span><br><span class="line">predictable predictable /prɪˈdɪktəbl/ adj.  可预言的；可预测的；可预料的</span><br><span class="line">predict predict /prɪˈdɪkt/ v.  预言，预测，预告，预报</span><br><span class="line"></span><br><span class="line">broker broker /ˈbroʊkər/  n.   (股票、外汇或商品）经纪人，代理商;掮客</span><br><span class="line">---------------------------</span><br><span class="line">cascade cascade /kæˈskeɪd/  n.  小瀑布（尤指一连串瀑布中的一支）;倾泻；流注,大簇的下垂物;大量;许多   a cascade of 一连串的</span><br><span class="line">                                &lt;电&gt;级; 级联, 串联;</span><br><span class="line">                            v.  倾泻；流注;大量落下；大量垂悬; (水)飞流直下，倾泻而下;垂落;悬挂</span><br><span class="line">							    &lt;电&gt;（使）串联;</span><br><span class="line"></span><br><span class="line">removal removal /rɪˈmuːvl/ n.  去除;除去；消除；清除;移动；调动； 搬家;搬移;搬迁            When are the removal men coming?</span><br><span class="line"></span><br><span class="line">caveat  caveat /ˈkæviæt/  警告，告诫，防止误解的说明    </span><br><span class="line"></span><br><span class="line">emptor emptor  /ˈemptɔːr/   （大陆法）买主；购买人   caveat emptor </span><br><span class="line"></span><br><span class="line">propose propose /prəˈpoʊz/    v.  提议，建议        What would you propose?   She proposed that the book be banned.   propose changes .  </span><br><span class="line">                                  求婚               She proposed to me!</span><br><span class="line">proposal proposal /prəˈpoʊzl/ n.  提议；建议；动议;求婚</span><br><span class="line"></span><br><span class="line">cron cron /krɑn/ n.  克龙（时间单位，等于百万年）</span><br><span class="line"></span><br><span class="line">scheduler scheduler /ˈskɛdʒʊlər/    n. 调度程序，日程安排程序     </span><br><span class="line">schedule schedule /ˈskedʒuːl/    n.  工作计划，日程安排               on schedule     </span><br><span class="line">                                 v.  安排；为…安排时间；预定          I&#x27;m scheduled to arrive in LA at 5 o&#x27;clock.</span><br><span class="line"></span><br><span class="line">format format /ˈfɔːrmæt/ n.  格式，形式，版式</span><br><span class="line">                         v.  格式化(磁盘)，安排…的版式</span><br><span class="line"></span><br><span class="line">limitation limitation /ˌlɪmɪˈteɪʃn/		  限制，控制，局限				 Client access limitation before actual data processing</span><br><span class="line"></span><br><span class="line">idiosyncrasy idiosyncrasy /ˌɪdiəˈsɪŋkrəsi/  n.  （个人特有的）习性；特征；癖好，嗜好;(物品的)特色，特点,特质;特征;</span><br><span class="line"></span><br><span class="line">characteristic characteristic /ˌkærəktəˈrɪstɪk/		n.  特色;特点;特征</span><br><span class="line">                                                    adj.  典型的；独特的；特有的</span><br><span class="line"></span><br><span class="line">character character  /ˈkærəktər/   字符，字母，数字，文字</span><br><span class="line">                                   （人的）性格，个性，特点，特征</span><br><span class="line">								   人物，角色     main character，  minor character</span><br><span class="line"></span><br><span class="line">indirect indirect /ˌɪndəˈrekt/	adj.  间接的；非直接的;(路线、行程等)迂回的，非直达的; (话语或信息)含蓄的,拐弯抹角的</span><br><span class="line">indirectly indirectly /ɪndəˈrɛktli/ adv.           the indirect effects of the war</span><br><span class="line"></span><br><span class="line">direct  directly /dəˈrekt/   直接的，径直的 ，直达的            You can fly direct to Amsterdam，   They&#x27;d come on a direct flight </span><br><span class="line">directive</span><br><span class="line">directory</span><br><span class="line"></span><br><span class="line">explicit  /ɪkˈsplɪsɪt/ </span><br><span class="line">explicitly   /ɪkˈsplɪsətli/    明确的，确切的</span><br><span class="line"></span><br><span class="line">implicit implicit /ɪmˈplɪsɪt/   adj.  含蓄的；不直接言明的;隐含地</span><br><span class="line">                                      无疑问的;无保留的;绝对的;完全的；</span><br><span class="line">implicitly implicitly  /ɪmˈplɪsətli/  </span><br><span class="line"></span><br><span class="line">state   状态，情况，状况      state of emergency</span><br><span class="line">        (尤用于讨论政治事务时)国家， (美国等大国的)州，邦，政府;国家    state visit </span><br><span class="line">		v. 规定，陈述，说明     As already stated,</span><br><span class="line"></span><br><span class="line">macro macro /ˈmækroʊ/  adj.  广大的；宏观的;巨大的；极厚的；特别突出的；大量使用的</span><br><span class="line">                             (摄影用)微距的        He photographed this using a macro lens.</span><br><span class="line">                       n.   宏；宏命令；宏指令</span><br><span class="line"></span><br><span class="line">subsequent subsequent subsequently /ˈsʌbsɪkwənt/  随后的，后来的，在...之后的，随后的      in subsequent years	，Subsequently the arrangement was terminated.	 </span><br><span class="line">                                                                                  each subsequent client’s request </span><br><span class="line">respect respect n. 尊敬，敬重，尊重，重视</span><br><span class="line">                   （事物的）方面，细节             In this respect we are very fortunate.</span><br><span class="line">                   关于，关系                possible solutions with respect to such mapping.   with respect to 关于；就…而言</span><br><span class="line">                v.  尊敬；尊重；仰慕</span><br><span class="line"></span><br><span class="line">respective respectively  分别的;各自的      you should log a ticket in its respective issue tracker</span><br><span class="line"></span><br><span class="line">correlate correlate /ˈkɔːrələt , ˈkɔːrəleɪt/ v. 相互关联，相互依赖</span><br><span class="line">                                             adj.  关联的, 相关的;相辅相成的</span><br><span class="line">											 </span><br><span class="line">correspond corresponding /ˌkɔːrəˈspɑːnd/	相关的，关联的,相类似的，符合的，一致的</span><br><span class="line"></span><br><span class="line">relative relative /ˈrelətɪv/ adj.  相对的;比较的;     relative theory 相对论</span><br><span class="line">                                   相关联的;与…有关;涉及;关于    </span><br><span class="line">                             n.  亲戚;亲属;家属            Do relatives of yours still live in Siberia?</span><br><span class="line"></span><br><span class="line">coordinate coordinate /koʊˈɔːrdɪneɪt/  n.  坐标</span><br><span class="line">                                       v.  使协调；使相配合;使（身体各部分）动作协调；协同动作</span><br><span class="line"></span><br><span class="line">universal universal /ˌjuːnɪˈvɜːrsl/ adj.  宇宙的;全世界的;普遍的；全体的;普遍存在的；广泛适用的</span><br><span class="line"></span><br><span class="line">octet   八位位组，八重唱;八进制</span><br><span class="line"></span><br><span class="line">hex /heks/	十六进制</span><br><span class="line"></span><br><span class="line">approximate approximate /əˈprɑːksɪmət , əˈprɑːksɪmeɪt/  adj.   大约的, 大概的；近似的；接近的；粗略的</span><br><span class="line">                                                        v.  近似；接近;近似于</span><br><span class="line"></span><br><span class="line">idempotent idempotent /aɪˈdempətənt/  adj. &amp; n.  幂等的,幂等，等幂</span><br><span class="line"></span><br><span class="line">exponential exponential /ˌekspəˈnenʃl/  adj.  指数的；幂的；由指数表示的;越来越快的(指数增长)</span><br><span class="line"></span><br><span class="line">prevention prevention /prɪˈvenʃn/	防止，预防，防范		 In v1.18 kubeadm added prevention for joining a Node in the cluster if a Node with the same name already exists.  		 </span><br><span class="line"></span><br><span class="line">prevent prevent /prɪˈvent/ v. 防止;阻止；预防；制止；阻碍；阻挠;</span><br><span class="line"></span><br><span class="line">supervise supervise /ˈsuːpərvaɪz/  v.  监督；管理；指导；主管</span><br><span class="line">supervisor supervisor /ˈsuːpərvaɪzər/  n.  监督者，监督人;主管人;指导者</span><br><span class="line">				</span><br><span class="line">library library /ˈlaɪbreri/  n.  图书馆，藏书楼；文库</span><br><span class="line"></span><br><span class="line">originate originate /əˈrɪdʒɪneɪt/   v. 起源；发源；发端于；来自；产生；创始；开创 originate from </span><br><span class="line"></span><br><span class="line">origin origin /ˈɔːrɪdʒɪn/  n.  起源；源头；起因;身世；出身</span><br><span class="line">original /əˈrɪdʒənl/ adj.  起初的；最初的；原先的；原来的</span><br><span class="line">                     n.     原物；原件；原作；原著；原文;正本</span><br><span class="line"></span><br><span class="line">facility facility /fəˈsɪləti/    设施，设备  ,场所</span><br><span class="line">facilitate facilitate /fəˈsɪlɪteɪt/  促进；促使；使便利</span><br><span class="line"></span><br><span class="line">ideal /aɪˈdiːəl/    理想的，完美的，想象的  n. 理想，完美的人（或事物）</span><br><span class="line">Ideally</span><br><span class="line"></span><br><span class="line">motivation motivation /ˌmoʊtɪˈveɪʃn/  n.  动机，动力，诱因，积极性           Money is my motivation..</span><br><span class="line"></span><br><span class="line">motivate motivate /ˈmoʊtɪveɪt/  v.  成为…的动机；是…的原因;  (尤指情绪)激发，激励，驱使;推动</span><br><span class="line"></span><br><span class="line">release release /rɪˈliːs/ v. 释放；获释;放走；排放         release sb.</span><br><span class="line">                             发布;发表;公布               They&#x27;re not releasing any more details yet</span><br><span class="line">							 发行，推出(唱片、碟片或电影)   the movie will be released next week</span><br><span class="line">							 免除，解除（某人的职责、责任、合同等）；解雇</span><br><span class="line">						  n.  释放；获释;</span><br><span class="line">						      发行；发布;新发行的东西；（尤指）新激光唱片，新电影</span><br><span class="line"></span><br><span class="line">progress progress /ˈprɑːɡres , prəˈɡres/		 n.  进步，进展，进程,发展            make slow/steady/rapid/good progress in</span><br><span class="line">                                                 v.  进步，改进，进展，发展</span><br><span class="line">progressive progressive progressively  /prəˈɡresɪv/	adj.   进步得，先进得，革新的</span><br><span class="line">                                                           （变化等）逐渐的，逐步发生的，逐步发展的</span><br><span class="line"></span><br><span class="line">bulk bulk /bʌlk/  n.  （大）体积；;庞大的身躯；巨大的体重；肥硕的体形;</span><br><span class="line">                       大宗，（大）量,大批（买卖）       Buying in bulk is more economical </span><br><span class="line"></span><br><span class="line">mess mess /mes/  v.  使不整洁；弄脏；弄乱          you&#x27;re messing my hair.    </span><br><span class="line">                 n.  脏乱;凌乱;不整洁              My hair&#x27;s a real mess!</span><br><span class="line">                     困境;麻烦;混乱	         The economy is in a mess </span><br><span class="line">                     （狗、猫等的）粪便；动物粪便</span><br><span class="line">                     不整洁（或邋遢、不修边幅）的人      You&#x27;re a mess!					 </span><br><span class="line"></span><br><span class="line">no messing    毫不费力；不费吹灰之力；轻而易举           We finished in time, no messing.</span><br><span class="line">mess around   胡闹；瞎闹              Will you stop messing around and get on with some work? </span><br><span class="line">              逍遥自在地做事       We spent the day messing around on the river.</span><br><span class="line">mess with sth   卷入 ; 干涉 ; 与…有牵连</span><br><span class="line">mess around with sb    勾搭；与某人调情；随便与人发生性关系</span><br><span class="line">mess around with sth     乱弄；玩弄; 瞎忙活		</span><br><span class="line">a mess of fish     许多，大量	  </span><br><span class="line">make a mess 制造混乱，弄乱，搞成一团糟</span><br><span class="line">mess up  搞杂</span><br><span class="line">in a mess 凌乱</span><br><span class="line">what a mess  真糟，真是一团糟</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">comprise comprise /kəmˈpraɪz/   包含；包括;由…组成         The committee is comprised of  .    The collection comprises 327 paintings.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">compose compose /kəmˈpoʊz/  组成;构成;创作，作曲；谱写(乐曲);作(曲)，编曲   be composed of  由...组成，由...构成</span><br><span class="line">composable composable  可组合的</span><br><span class="line">composition composition /ˌkɑːmpəˈzɪʃn/   n.  组成，成分，构成，组合方式          the composition of the board of directors</span><br><span class="line">                                             (作曲家、画家等的)作品             Mozart&#x27;s compositions are undoubtedly amongst the world&#x27;s greatest.</span><br><span class="line"></span><br><span class="line">oblivious oblivious /əˈblɪviəs/  adj.  不知道的；不在意的，未注意的;未觉察的；忘却的，健忘的</span><br><span class="line">obliviously obliviously </span><br><span class="line"></span><br><span class="line">semantic semantic /sɪˈmæntɪk/  n.  语义</span><br><span class="line">semantical semantically   adj. 语义的</span><br><span class="line"></span><br><span class="line">oppose oppose /əˈpoʊz/ v.  反对（计划、政策等）；抵制；阻挠;     as opposed to  而不是</span><br><span class="line"></span><br><span class="line">primitive primitive /ˈprɪmətɪv/  adj.  原始的；远古的；古老的；落后的；未开化的；</span><br><span class="line"></span><br><span class="line">treasury treasury /ˈtreʒəri/ n.   (英、美等国的)财政部，国库，金库; (城堡、教堂等的)宝库，珍藏室   treasury department.   </span><br><span class="line">state treasury 国库</span><br><span class="line">treasury bond 长期国库券，长期国债.</span><br><span class="line">treasury bill 短期国债  </span><br><span class="line">-----------------------</span><br><span class="line">elastic elastic /ɪˈlæstɪk/	adj.  有弹性的，灵活的，有弹力的，可伸缩的</span><br><span class="line">                            n.    松紧带，橡皮圈</span><br><span class="line">elastically elasitcally   /ɪˈlæstɪk(ə)li/   </span><br><span class="line"></span><br><span class="line">increase increase /ɪnˈkriːs , ˈɪŋkriːs/  v.  （使）增长，增多；增加;增大;增长   increase from 1 to 100.  increase in sales.  on the increase.  price increase.</span><br><span class="line"></span><br><span class="line">decrease decrease /dɪˈkriːs , ˈdiːkriːs/  v.  (使大小、数量等)减小; (使)减少;(使)降低      decrease in sales.   salse has been decreasing.  a decrease of </span><br><span class="line"></span><br><span class="line">adjust adjust /əˈdʒʌst/  v.  改变（行为或观点）以适应;习惯;调节;调整；校正，校准（机器）    adjust the temperature</span><br><span class="line"></span><br><span class="line">adapter /əˈdæptər/   (电器设备的)转接器，适配器</span><br><span class="line">adapt adapt /əˈdæpt/ v.  使适合，使适应（新用途或新情况）;调整</span><br><span class="line"></span><br><span class="line">tutorial tutorial /tuːˈtɔːriəl/   adj.  导师的；私人教师的；辅导的</span><br><span class="line">                                  n.    （大学导师的）专门指导课，辅导课;教程；辅导材料；使用说明书</span><br><span class="line"></span><br><span class="line">in-place in-place  就地，原地；原状；</span><br><span class="line"></span><br><span class="line">proportional proportional /prəˈpɔːrʃənl/  adj.  成比例的；按比例的；均衡的    proportional to 成正比，成比例  ； inversely proportional 反比得 ； Proportional scaling</span><br><span class="line">proportionally proportionally  /prəˈpɔːrʃənlɪ/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">operate  /ˈɑːpəreɪt/</span><br><span class="line">expertise /ˌekspɜːrˈtiːz/</span><br><span class="line"></span><br><span class="line">process /ˈprɑːses , prəˈses/</span><br><span class="line"></span><br><span class="line">peak peak /piːk/   n.   顶峰；高峰;山峰；巅峰；峰峦;尖形；尖端；尖头       Traffic reaches its peak between 8 and 9 in the morning.  at the peak of her career.</span><br><span class="line">                   v.   达到高峰；达到最高值          Oil production peaked in the early 1980s</span><br><span class="line">				   adj.  最高度的；高峰时期的；巅峰状态的        March is one of the peak periods for our business.</span><br><span class="line">off-peak 淡季的;非高峰期的</span><br><span class="line"></span><br><span class="line">perspective perspective /pərˈspektɪv/  n. （思考问题的）角度，观点；（对事物的）合理判断，正确认识</span><br><span class="line"></span><br><span class="line">fundamental fundamental  /ˌfʌndəˈmentl/    基本的，根本的，主要的，最重要的，基础的    fundamental concept</span><br><span class="line"></span><br><span class="line">barring barring /ˈbɑːrɪŋ/  prep.  除了;除非; 不包括；除…以外</span><br><span class="line"></span><br><span class="line">segment segment /ˈseɡmənt , seɡˈment/  n.  部分;片段; (橘子、葡萄柚等水果的)瓣</span><br><span class="line">segmentation segmentation /ˌseɡmenˈteɪʃn/  n.   分割;分段;划分</span><br><span class="line"></span><br><span class="line">principle /ˈprɪnsəpl/    道德原则；行为准则；规范;  法则；原则；原理</span><br><span class="line"></span><br><span class="line">principally principally /ˈprɪnsəpli/ adv.  主要地；首要地；最重要地</span><br><span class="line"></span><br><span class="line">friction friction /ˈfrɪkʃn/  n.  矛盾;不和;分歧；争执; 摩擦力,  摩擦</span><br><span class="line"></span><br><span class="line">port port /pɔːrt/ n.  港口城市；港市；口岸; 港口; （外接设备的输出或输入）端口</span><br><span class="line">                  v.  移植(软件)</span><br><span class="line">				  </span><br><span class="line">porting porting 移植;移植性;       Kubernetes to enable low-friction porting of apps from VMs to containers.</span><br><span class="line"></span><br><span class="line">portable portable /ˈpɔːrtəbl/  adj.  轻便的，便于携带的，手提式的；</span><br><span class="line">portability portablility /ˌpɔrtəˈbɪlɪti/  便携性;可携带，轻便</span><br><span class="line"></span><br><span class="line">implementation implementation  /ˌɪmpləmɛnˈteɪʃən/      实施，实现，完成        the agency was created for the implementation of the policy</span><br><span class="line">implement /ˈɪmplɪmənt/   v.  实施，贯彻，实行</span><br><span class="line"></span><br><span class="line">particular /pərˈtɪkjələr/		  专指的，特指的；     </span><br><span class="line">                                  不寻常的，特别的		   These documents are of particular interest.</span><br><span class="line"></span><br><span class="line">concern concern /kənˈsɜːrn/ n.  忧虑;担心;关心;关切;关注</span><br><span class="line">---------------------------------------</span><br><span class="line">niche niche /niːʃ/  n.   (有自己特定的需求、目标顾客和产品的)小众市场，缝隙市场，利基市场;商机</span><br><span class="line">                         壁龛;(山体或悬崖上的)凹洞</span><br><span class="line">						 舒适或称心的工作（或生活等）;合适的活动</span><br><span class="line">                    adj.  (营销)针对特定客户群的，细分的;专营的;小众的           this is a very niche operation.</span><br><span class="line"></span><br><span class="line">downward downward /ˈdaʊnwərd/  adj. &amp; adv.  下降的；向下的;趋向没落的;衰退的;局势变坏的    The downward API . downward trend.  downward compatibility.</span><br><span class="line">upward upward /ˈʌpwərd/  adj. &amp; adv.  向上的；朝上的；向高处的;上升的，上涨的，增长的</span><br><span class="line">forward forward /ˈfɔːrwərd/ adj. &amp; adv.  向前的；前进的;（尤指船、飞机或其他交通工具）前部的，前面的</span><br><span class="line">                            v.           转交;转发;转接, (按新地址)转寄，转投，</span><br><span class="line">backward backward /ˈbækwərd/ adj. &amp; adv.    向后的，往后的；朝后的;倒退的,不进反退的；反向的</span><br><span class="line"></span><br><span class="line">exposure exposure /ɪkˈspoʊʒər/  n.  面临，遭受（危险或不快）;揭露,暴露；显露, 曝光;揭发;曝光时间;</span><br><span class="line"></span><br><span class="line">expose expose /ɪkˈspoʊz/ v.  暴露，露出，显露，曝光，揭露，揭穿             These prechecks expose warnings and exit on errors.</span><br><span class="line"></span><br><span class="line">express express /ɪkˈspres/  v.  表达，表述      expressed grave concern at       v.   （用符号等）表示，表达    We can express that equation like that   v.   快递邮寄</span><br><span class="line">                            adj.   明确的 ，（命令）明白表示的    on express orders from</span><br><span class="line">							adj.   快递的，快速的，特快的         Send it express</span><br><span class="line">							n.     特快列车，特快公共汽车（或长途汽车）;直达公共汽车（或长途汽车） express train,  express bus,  express way, </span><br><span class="line">							</span><br><span class="line">expressive expressive /ɪkˈspresɪv/  adj.  有表现力的;</span><br><span class="line"></span><br><span class="line">hands-on hands-on   动手的;实际操作的,（经历或工作）亲身实践的</span><br><span class="line"></span><br><span class="line">protocol protocol /ˈproʊtəkɔːl/ n.  条约草案；议定书；（协议或条约的）附件;（数据传递的）协议，规程，规约</span><br><span class="line"></span><br><span class="line">reliability reliablility /rɪˌlaɪə&#x27;bɪləti/   可靠性   relibility, scalability, latency ,performance</span><br><span class="line">reliable reliable /rɪˈlaɪəbl/  </span><br><span class="line"></span><br><span class="line">fungible fungible /ˈfʌndʒəbəl/   adj.  代替的；可取代的</span><br><span class="line">                                 n.    可替代的物；（偿还债务用以）替代的财产；代替物；种类物</span><br><span class="line"></span><br><span class="line">mixture mixture /ˈmɪkstʃər/  n.  混合；混合物;结合体; 集合体；混合料；混合剂，混合液</span><br><span class="line"></span><br><span class="line">punctuation punctuation /ˌpʌŋktʃuˈeɪʃn/  n.  标点符号；标点符号用法; 标点法</span><br><span class="line"></span><br><span class="line">proxy proxy /ˈprɑːksi/  v.  代理;代表;受托 </span><br><span class="line">                        n.  代理权；代表权; 代理人；受托人；代表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threshold threshold /ˈθreʃhoʊld/ n.  门槛；门口; (某事发生或改变的)界限，阈，起始点    threshold value.  </span><br><span class="line"></span><br><span class="line">plural plural /ˈplʊrəl/  adj.  （名词或动词的）复数，复数形式; 多样的；多元的, 多种群体的      a plural society  多元社会;  plural form 复数形式</span><br><span class="line"></span><br><span class="line">truncate truncate /ˈtrʌŋkeɪt/  v.  截短，截断;缩短，删节（尤指掐头或去尾）;</span><br><span class="line">                               adj.  截短的;被删节的; 缩短的</span><br><span class="line"></span><br><span class="line">drop /drɑːp/		  v. (意外地)使掉下,使落下;掉到…上;从…上掉落;投下;丢下;扔下;掉下				  </span><br><span class="line">                      n. 滴;水珠;</span><br><span class="line"></span><br><span class="line">ambiguous ambiguous /æmˈbɪɡjuəs/  adj.  模棱两可的；含混不清的; 不明确的   ambiguous answer </span><br><span class="line"></span><br><span class="line">unambiguous unambiguous /ˌʌnæmˈbɪɡjuəs/  adj.  明确的;毫不含糊的;无歧义的;意思清楚的; 清晰的；</span><br><span class="line"></span><br><span class="line">band band /bænd/ n.  流行音乐乐队,（流行音乐）乐团;管乐队；鼓号乐队</span><br><span class="line">                     （佩戴用或衣物上的）带；（用以加固或捆绑的）圈，箍;         She always ties her hair back in a band.</span><br><span class="line">					 频带；波段</span><br><span class="line">					 （数目、年龄、价格、数字、值等的）范围，段</span><br><span class="line">				 v.  (将价格、收入等)划分档次;分等级;加彩条(或嵌条等)</span><br><span class="line"></span><br><span class="line">boundary boundary /ˈbaʊndəri/  边界；界限；分界线</span><br><span class="line"></span><br><span class="line">resemble resemble /rɪˈzembl/  v.  看起来像；显得像；像; 类似于;与…相似;与…相像       resemble sth in    在某方面相似</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">dog dog /dɔːɡ/   n.  狗；犬; 公狗；公狐；公狼; </span><br><span class="line"></span><br><span class="line">frozen frozen /ˈfroʊzn/  adj.  (地面)冰冻的，冻硬的;(食物)冷冻的，冷藏得</span><br><span class="line">freeze freeze /friːz/    (使)冻结;(使)结冰;(使)凝固;  冷冻(食物等); (天气)冷到结冰的程度，冰冻</span><br><span class="line"></span><br><span class="line">terminology terminology  /ˌtɜːrmɪˈnɑːlədʒi/	 专业术语，专门用语</span><br><span class="line"></span><br><span class="line">glossary  glossary  /ˈɡlɑːsəri/  术语汇编表，词汇表</span><br><span class="line"></span><br><span class="line">term term /tɜːrm/  n.  术语;学科用语;专业用语</span><br><span class="line">                       学期;期限；任期      during the president&#x27;s first term ,  the term of the loan</span><br><span class="line"></span><br><span class="line">clarity clarity /ˈklærəti/  n.  (书、论点等的)清楚，清晰易懂，明晰；明确; （画面、物质或声音的）清晰，清楚，清澈;  (液体、玻璃或空气的)清澈度，透明度   For clarity</span><br><span class="line"></span><br><span class="line">edge edge /edʒ/  n.   边；边缘；边线；边沿</span><br><span class="line">                      （刀、斧等的）锋，刃, 刀口；刀刃；利刃</span><br><span class="line"></span><br><span class="line">figure figure /ˈfɪɡjər/		n.  （代表数量，尤指官方资料中的）数字,(尤指)统计数字	  By 2004, this figure had risen to 14 million.	</span><br><span class="line">                                 数字符号；字码；位数       a six-figure salary  六位数的薪水</span><br><span class="line">								 体形;身材;                Take pride in your health and your figure.</span><br><span class="line">                                 (绘画作品中的)人物;名人,雕像;塑像    public figure</span><br><span class="line">								 图形;（书、杂志等中的）图，表; (尤指规则的几何)图形</span><br><span class="line">figure out   想出；理解；弄清</span><br><span class="line"></span><br><span class="line">prerequisite prerequisite /ˌpriːˈrekwəzɪt/    前提，先决条件，必备条件          Good self-esteem is a prerequisite for a happy life.</span><br><span class="line"></span><br><span class="line">slight slight /slaɪt/   轻微得，微小得，略微得，少量得，小得；  (人)瘦弱的，瘦小的    a slight woman</span><br><span class="line">slightly</span><br><span class="line"></span><br><span class="line">consult consult /kənˈsʌlt/	v.  咨询，请教，查询，          If the pain continues, consult your doctor		。      He consulted the manual.   consult fees</span><br><span class="line">                                查阅，查询，参看        	He consulted the manual.</span><br><span class="line"></span><br><span class="line">mutual mutual /ˈmjuːtʃuəl/   adj.  相互的，彼此的，                  mutual respect/understanding</span><br><span class="line">mutually                           共有的，共同的                    We met at the home of a mutual friend.    They soon discovered a mutual interest in music.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exclusive exclusive /ɪkˈskluːsɪv/  adj.  （个人或集体）专用的，专有的，独有的，独占的;独用的;独享的   exclusive right</span><br><span class="line">                                          排斥的；排他的;相互排斥的;互不相容的;（新闻报道）独家的  exclusive of 不包括，除...之外     mutual exclusive </span><br><span class="line">										  高档的;高级的;奢华的    most exclusive club</span><br><span class="line">exclusively exclusively    These Pods can also make use of exclusive CPUs </span><br><span class="line"></span><br><span class="line">sensitive sensitive /ˈsensətɪv/	adj. 敏感的，须谨慎对待的 ，棘手的             Employment is a very sensitive issue.   </span><br><span class="line">                                                                               Changing the cgroup driver of a Node that has joined a cluster is a sensitive operation</span><br><span class="line">                                     体恤的，体贴的，善解人意的        The classroom teacher must be sensitive to a child&#x27;s needs				  </span><br><span class="line">									 易担忧的;敏感的         Young people are very sensitive about their appearance</span><br><span class="line">									  (科学仪器)灵敏的，灵敏度高的     an extremely sensitive microscope</span><br><span class="line"></span><br><span class="line">sensitivity sensitivity /ˌsensəˈtɪvəti/  n.  体贴；体恤；体察; </span><br><span class="line">                                             敏感;灵敏度;敏感性;      case sensitivity  大小写敏感</span><br><span class="line"></span><br><span class="line">wild wild /waɪld/  adj.  （动植物）自然生长的；野的；野生的; 天然的；      a wild rabbit</span><br><span class="line">                         荒凉的；荒芜的</span><br><span class="line">						 难以约束的;不受控制的;放荡的;无节制的;缺乏管教的；无法无天的；           The boy is wild and completely out of control.</span><br><span class="line">						 愤怒的;狂怒的</span><br><span class="line"></span><br><span class="line">approve approve /əˈpruːv/  v.  批准; 核准，准许; 通过(计划、要求等); 赞成；同意; 认可；</span><br><span class="line"></span><br><span class="line">equivalent equivalent /ɪˈkwɪvələnt/  adj.  （价值、数量、意义、重要性等）相等的，相同的    be equivalent to 等同于；    equivalent of 相当于；</span><br><span class="line">                                     n.   等同物;等值物；对应物</span><br><span class="line"></span><br><span class="line">fanout 扇出；输出（端数）；展（散）开</span><br><span class="line"></span><br><span class="line">shape shape /ʃeɪp/  n.  形状；外形；样子；呈…形状的事物; 轮廓;</span><br><span class="line">                        （指女子的）体形，身段;</span><br><span class="line">					v.  使成为…形状（或样子）；形成;设计;塑造，制作;</span><br><span class="line"></span><br><span class="line">-------------------</span><br><span class="line"></span><br><span class="line">orient orient /ˈɔːrient/  v.  朝向；面对；确定方向；确定方位；认识方向;定位      Our students are oriented towards science subjects.    role-oriented  面向角色的</span><br><span class="line">                              使适应，使熟悉（新的环境或行为方式）;    You will need the time to orient yourself to your new way of eating.</span><br><span class="line">                          n.  东方;亚洲;东洋;远东         the Orient  东方  Orient Express 东方快车  Bank of the Orient </span><br><span class="line">						  adj. 东方的;东洋的;远东的;亚洲的;</span><br><span class="line"></span><br><span class="line">organize organize /ˈɔːrɡənaɪz/  v.  组织；筹备;安排；处理；分配</span><br><span class="line"></span><br><span class="line">organization organization /ˌɔːrɡənəˈzeɪʃn/ n.  组织，机构;团体；</span><br><span class="line"></span><br><span class="line">organizational organizational /ˌɔːrɡənəˈzeɪʃənl/  组织的;(组织或机构)结构的;机构的;</span><br><span class="line"></span><br><span class="line">tenancy tenancy /ˈtenənsi/  n.  （房屋、土地等的）租用期限，租赁期限，租期;</span><br><span class="line">                                （房屋或土地的）租用，租赁</span><br><span class="line"></span><br><span class="line">tenant tenant /ˈtenənt/  n.  房客；租户; 承租人;佃户;    They had evicted their tenants for non-payment of rent.</span><br><span class="line"></span><br><span class="line">granular granular /ˈɡrænjələr/ adj. 由颗粒构成的；含颗粒的；似颗粒状的       in a more granular way</span><br><span class="line"></span><br><span class="line">nature nature /ˈneɪtʃər/  n.  自然;自然界；大自然; 本质;性质;天性</span><br><span class="line"></span><br><span class="line">bidirectional bidirectional /ˌbaɪdəˈrekʃənl/  adj.  (technical 术语) 双向的</span><br><span class="line"></span><br><span class="line">derive derive /dɪˈraɪv/  v.  （使）起源于，来源于，源自，得自;（使）来自;(使)产生;     derive from sth   从…衍生出；起源于；来自</span><br><span class="line">derive sth from sth   （从…中）得到，获得;（从…中）提取      derives its hostname from the name of the StatefulSet and the ordinal </span><br><span class="line"></span><br><span class="line">conformance conformance /kənˈfɔrməns/		一致，符合 ,遵守，遵从              Kubernetes Conformance tests</span><br><span class="line">conform /kənˈfɔːrm/   遵守，遵从，服从，顺从   conform with ， conforms to best practices</span><br><span class="line">compliance compliance  /kəmˈplaɪəns/   遵从，服从，顺从</span><br><span class="line"></span><br><span class="line">rabbit rabbit /ˈræbɪt/  兔子;兔;野兔;兔肉</span><br><span class="line"></span><br><span class="line">wide wide /waɪd/  adj.  宽的；宽阔的;宽广的</span><br><span class="line">                        大量的；广泛的；范围大的</span><br><span class="line">						广泛的;广为流传的;广为人知的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">broad broad /brɔːd/  adj.  宽的；宽阔的;广阔的;宽广地;              His shoulders were broad  ; this road is broad enough;</span><br><span class="line">                           （笑）咧开嘴的     He greeted them with a wave and a broad smile.</span><br><span class="line">						    广泛的；涉及面广的,笼统的      He has a broad range of hobbies.</span><br><span class="line"></span><br><span class="line">predecessor predecessor /ˈpredəsesər/  n.  前任；前辈;（物件、机器的）前身</span><br><span class="line"></span><br><span class="line">successor successor /səkˈsesər/  n.  接替者；继任者;继承者；接替的事物；后继的事物   lowful successor .  legal successor. </span><br><span class="line"></span><br><span class="line">exist exist /ɪɡˈzɪst/	存在；实际上有</span><br><span class="line"></span><br><span class="line">conversion conversion /kənˈvɜːrʒn/  n.  变换;转换;转变;改变;(宗教、信仰等的)改变，皈依，归附</span><br><span class="line"></span><br><span class="line">convert convert /kənˈvɜːrt /  v. （使）转变，转换，转化;可转变为；可变换成;(使)改变;更改;改造，改装(车辆或设备)</span><br><span class="line"></span><br><span class="line">slice slice /slaɪs/  n.  薄片，分片;部分;份            CPU time slice</span><br><span class="line">                     v.  将…切成薄片;切分；切割</span><br><span class="line"></span><br><span class="line">maximum maximum /ˈmæksɪməm/  adj.  最高的；最多的；最大极限的</span><br><span class="line">                             n.    最大量；最大限度；最高限度,最大值</span><br><span class="line">maximal maximal /ˈmæksɪml/  adj.  最大的;最高的；最多的；最大极限的</span><br><span class="line"></span><br><span class="line">minimal minimal /ˈmɪnɪməl/ adj.  最小的;极少的;最低限度的            The damage to the car was minimal.   </span><br><span class="line">minimally minimally              He was paid, but only minimally.</span><br><span class="line"></span><br><span class="line">minimum minimum /ˈmɪnɪməm/	 adj. 最小的，最低的	；				 This will take a minimum of one hour</span><br><span class="line">                             n.  最小值，最少量，极小量;（法定的）最低限度;〈数〉极小（值）;（公路行车的）最低速</span><br><span class="line"></span><br><span class="line">consume consume  /kənˈsuːm/   消费，消耗，耗费(燃料、能源或时间)      SSL operations consume extra CPU resources，  power consume 耗电量，功率， energy consume </span><br><span class="line">                              吃，喝，饮用             they consumed oat</span><br><span class="line"></span><br><span class="line">consumer consumer /kənˈsuːmər/  n. 消费者;用户;顾客</span><br><span class="line"></span><br><span class="line">consumption consumption /kənˈsʌmpʃn/  n. 消耗量，消费量；吃;喝;饮用    energy consumption.   water consumption .</span><br><span class="line"></span><br><span class="line">identical identical /aɪˈdentɪkl/  adj.  完全同样的；相同的; 同样的，一摸一样的        a row of identical houses</span><br><span class="line">identically identically </span><br><span class="line"></span><br><span class="line">topology topology /tə&#x27;pɒlədʒɪ/   拓扑结构，布局，地质学</span><br><span class="line"></span><br><span class="line">favor favor /ˈfeɪvər/  n.  喜爱，宠爱，偏爱;好感，赞同;偏袒，帮助；            in favor of   支持，赞同；</span><br><span class="line">do me a favor  帮个忙好吗</span><br><span class="line">have a favor 请您帮个忙</span><br><span class="line"></span><br><span class="line">mesh mesh /meʃ/  n.  网，网格;网状物;网状织物;  陷阱；困境；圈套     mesh network </span><br><span class="line">                 v.  相配，匹配，适合;  (使)相匹配;(使)相互协调;(使)吻合</span><br><span class="line"></span><br><span class="line">annotation  /ˌænəˈteɪʃn/	n.  注解，注释，评注</span><br><span class="line">annotate annotate /ˈænəteɪt/  v.  注释;标注;批注;给…作注解（或评注）</span><br><span class="line"></span><br><span class="line">connotation connotation /ˌkɑːnəˈteɪʃn/ n.   (词或名字的)内涵意义，隐含意义，联想意义，言外之意     cultural connotation 文化内涵</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line">sort sort /sɔːrt/  n.  种类；类别；品种; </span><br><span class="line">                       分类；排序</span><br><span class="line">				   v.  整理；把…分类;排序</span><br><span class="line"></span><br><span class="line">ingress ingress /ˈɪnɡres/  n.  进入;进入权;入境权</span><br><span class="line"></span><br><span class="line">egress egress /ˈiːɡres/  n.  出口;外出;离开</span><br><span class="line"></span><br><span class="line">absolute absolute /ˈæbsəluːt/  adj.  完全的；全部的；绝对的；彻底的     class for absolute beginners.  absolute advantage.  </span><br><span class="line"></span><br><span class="line">inbound inbound /ˈɪnbaʊnd/   到达的，归航的，入站的 ，入境的     subsequent inbound requests</span><br><span class="line"></span><br><span class="line">outbound outbound /ˈaʊtbaʊnd/  adj.  向外的;出港的;离开某地的</span><br><span class="line"></span><br><span class="line">additive additive /ˈædətɪv/  adj.  附加的;加法的;加成的;加性的</span><br><span class="line">                             n.    （尤指食品的）添加剂，添加物          food additive</span><br><span class="line"></span><br><span class="line">mandatory  /ˈmændətɔːri/  强制的，强制性的</span><br><span class="line"></span><br><span class="line">impact  n. 影响  v. (对某事物)有影响</span><br><span class="line">        n. 撞击；冲撞；冲击力  v. 冲击;撞击;</span><br><span class="line"></span><br><span class="line">trivial trivial /ˈtrɪviəl/  adj.  不重要的；琐碎的；微不足道的         a trivial detail， trivial matter. </span><br><span class="line"></span><br><span class="line">familiarity familiarity /fəˌmɪliˈærəti/  n.  熟悉；通晓；认识</span><br><span class="line"></span><br><span class="line">familiar  familiar  /fəˈmɪliər/		    adj.  熟悉的，熟知的</span><br><span class="line"></span><br><span class="line">simultaneous  simultaneous simultaneous simultaneously  /ˌsaɪməlˈteɪniəsli/   同时发生的，同步的，同时出现的          simultaneous interpretation 同声传译</span><br><span class="line"></span><br><span class="line">cease cease /siːs/  v.  停止;(使)终止;结束      The rain ceased.  cease fire 停战，停火；  </span><br><span class="line"></span><br><span class="line">medium medium /ˈmiːdiəm/  adj.  中等的;中间的;中号的          There are three sizes─small, medium and large</span><br><span class="line">                          n.    （传播信息的）媒介，介质;媒介物；手段，方法</span><br><span class="line"></span><br><span class="line">mere mere /mɪr/   仅仅；只不过   Kubernetes is not a mere orchestration system.  It took her a mere 20 minutes to win.</span><br><span class="line">merely merely </span><br><span class="line"></span><br><span class="line">customize 	/ˈkʌstəmaɪz/   		定制，定做，改制（以满足顾主的需要）、</span><br><span class="line">customization customization /ˈkʌstəməzeɪʃən/	定制</span><br><span class="line"></span><br><span class="line">repository /rɪˈpɑːzətɔːri/   仓库，储存室，存放处</span><br><span class="line"></span><br><span class="line">hatch hatch /hætʃ/  v.  (小鸟、小鱼、小虫等) 孵出；孵化;出壳；破壳;           hatch out 孵化出；破壳而出</span><br><span class="line">                    n.  (船甲板或飞机底部装货物的)舱口;(飞机或宇宙飞船的)舱门;（地面或天花板的）开口，门，盖子;(尤指厨房和餐厅之间供传递食物的)两室之间的小窗口</span><br><span class="line"></span><br><span class="line">escape escape /ɪˈskeɪp/   逃跑，逃脱，摆脱</span><br><span class="line">------------------------------</span><br><span class="line">pod pod /pɑːd/  n.  荚；荚果；豆荚;</span><br><span class="line">                   （飞机的）吊舱，发射架;（宇宙飞船）分离舱;</span><br><span class="line">				   （保护性的）容器, 箱;</span><br><span class="line"></span><br><span class="line">block block  /blɑːk/  v.  堵塞，阻塞，挡住，阻挡，堵住，阻挠，阻扰，妨碍</span><br><span class="line">                      n.  大楼，大厦，街区；（长方形）块，大块         a block of ice</span><br><span class="line"></span><br><span class="line">tier tier /tɪr/	n.  层;级;等级;阶层;阶  upper tier </span><br><span class="line"></span><br><span class="line">finger finger /ˈfɪŋɡər/  n.   (除拇指以外的)手指; 有…手指的；有（或用）…手指的       long-fingered,  </span><br><span class="line">                         v.  用手指触摸; 用手指触碰;拨弄;抚摸</span><br><span class="line">						      (通常指向警方)告发，揭发;告密</span><br><span class="line"></span><br><span class="line">fingerprint fingerprint /ˈfɪŋɡərprɪnt/  n.  指纹；指印</span><br><span class="line">                                        v.  提取…的指纹; 采指纹</span><br><span class="line"></span><br><span class="line">dynamic /daɪˈnæmɪk/   adj.  动态的，发展变化得；有活力得，有生气得，精力旺盛得</span><br><span class="line">                      n.    力学；动力学</span><br><span class="line"></span><br><span class="line">project /ˈprɑːdʒekt , prəˈdʒekt/  n.  生产（或研究等）项目；方案；工程; 计划；规划; （学生的）课题，研究项目</span><br><span class="line">                                  v.  规划；计划；预计</span><br><span class="line">								      投影，投射          Projected Volumes</span><br><span class="line"></span><br><span class="line">property property /ˈprɑːpərti/  n.  所有物；财产；财物; 不动产；房地产; </span><br><span class="line">                                    性质；特性; 属性</span><br><span class="line"></span><br><span class="line">asset asset /ˈæset/  n.  有价值的人（或事物）；有用的人（或事物）;    She&#x27;ll be an asset to the team.</span><br><span class="line">                         资产；财产         the net asset value of the company  公司的资产净值.       asset sales/management ,  fixed asset 固定资产。</span><br><span class="line"></span><br><span class="line">instruction  用法说明，操作指南，说明文档；</span><br><span class="line">             指令，命令     I&#x27;m under instructions to keep my speech short.   Execute the below mentioned instructions</span><br><span class="line">			 </span><br><span class="line">instruct instruct /ɪnˈstrʌkt/  v.  指示；命令；吩咐；</span><br><span class="line">                                   教授;讲授;指导</span><br><span class="line"></span><br><span class="line">construct construct /kənˈstrʌkt , ˈkɑːnstrʌkt/   v.  建筑;建造;修建; 创建</span><br><span class="line">                                                 n.  结构（体）；建筑物，建造物；建设，建构，构建    language construct .  </span><br><span class="line"></span><br><span class="line">vendor vendor /ˈvendər/  n.  小贩；摊贩; （某种产品的）销售公司,售卖商，提供商，供应商;  （房屋等的）卖主        software vendors。</span><br><span class="line"></span><br><span class="line">visible visible /ˈvɪzəbl/  adj.  可见的;看得见的; 有形的;       The warning lights were clearly visible.</span><br><span class="line"></span><br><span class="line">suggest suggest /səˈdʒest/  v.  建议；提议;            I suggest (that) we go out to eat.</span><br><span class="line">                                推荐；举荐           Can you suggest a good dictionary?</span><br><span class="line">								暗示；言下之意是说; 表明;显示       I would never suggest such a thing.       Are you suggesting (that) I&#x27;m lazy?</span><br><span class="line"></span><br><span class="line">introduce introduce  /ˌɪntrəˈduːs/    介绍，引荐，把…介绍（给）      Can I introduce my wife?   He introduced me to a Greek girl at the party</span><br><span class="line">                                      引进，引入，推行      The Government has introduced a number of other money-saving moves.</span><br><span class="line">introduction introduction /ˌɪntrəˈdʌkʃn/  n.  初次投入使用；采用；引进；推行; </span><br><span class="line">                                              （正式的）介绍，引见</span><br><span class="line">											  序言；引言；导论       a brief introduction,  a book with an excellent introduction and notes</span><br><span class="line">											  入门书;初阶读物       the book is a friendly introduction to physics.</span><br><span class="line"></span><br><span class="line">aggregate aggregate /ˈæɡrɪɡət , ˈæɡrɪɡeɪt/   v.   合计;总计;汇集；聚合    aggregated discovery 聚合发现</span><br><span class="line">                                             adj.  总计的；合计的</span><br><span class="line"></span><br><span class="line">distinguish distinguish  /dɪˈstɪŋɡwɪʃ/    v.  区分，区别，使有别于，辨别，           Could he distinguish right from wrong?. </span><br><span class="line">distinct 明显的，明白的，清楚的，清晰的       distinct from  不同于</span><br><span class="line">         不同的，有区别的，不同种类的	</span><br><span class="line"></span><br><span class="line">capture capture  /ˈkæptʃər/   v.  (尤指在战争中)俘获，俘虏，占领，夺取，捕获，抓住   video capture，视频捕捉，视频采集，data capture ，screen capture</span><br><span class="line"></span><br><span class="line">carry carry /ˈkæri/  v.  携带，带有，随身带，</span><br><span class="line">                         输送，传输，传送(水、电等);运送;运载；</span><br><span class="line">                         具有（某品质或特点）;</span><br><span class="line"></span><br><span class="line">delimit delimit /diˈlɪmɪt/  v.  划界;界定;定…的界限; 确定…的界限;限定;划定…的边界   comma delimited.   delimit boundary</span><br><span class="line"></span><br><span class="line">watch watch /wɑːtʃ/  v.  看；注视；观看；观察</span><br><span class="line">                     n.  表；手表；（旧时的）怀表</span><br><span class="line"></span><br><span class="line">excessive  excessively  /ɪkˈsesɪv/  过度的，过分的    excessively high price </span><br><span class="line"></span><br><span class="line">excess excess /ɪkˈses , ˈekses/  n.  过度;过量的;超过;过分;过多的量；超过的量</span><br><span class="line">                                 adj.  超额的；额外的；附加的；过量的;过度的</span><br><span class="line"></span><br><span class="line">exceed /ɪkˈsiːd/	v. 超过（数量、价格）；超越（法律、命令等）的限制；     She was exceeding the speed limit </span><br><span class="line"></span><br><span class="line">megabyte megabyte  /ˈmeɡəbaɪt/  兆字节;百万字节(计算机存储单位，相当于2²⁰字节)</span><br><span class="line">gigabyte gigabyte  /ˈɡɪɡəbaɪt/ </span><br><span class="line"></span><br><span class="line">claim claim /kleɪm/  宣称；声称；断言;主张;要求，申领</span><br><span class="line"></span><br><span class="line">claimant claimant /ˈkleɪmənt/  n.  要求者，申请人；索要者; 索赔人; (因失业等)领取救济金者; 原告</span><br><span class="line"></span><br><span class="line">reclamation reclamation /ˌrekləˈmeɪʃn/  n.  (荒地等的)开垦，改造; 废料回收</span><br><span class="line"></span><br><span class="line">scrub scrub /skrʌb/  v.  擦洗；刷洗;刷净; 擦掉(灰尘、污渍); 擦除          scrubbing the floor.     scrubbed at her face with a tissue.</span><br><span class="line"></span><br><span class="line">biometrics biometrics /ˌbaɪəˈmɛtrəks/  n.  生物测定学;生物统计学，生物检测</span><br><span class="line"></span><br><span class="line">biometric biometric   adj.  生物统计的,生物学得        biometric payment.  </span><br><span class="line"></span><br><span class="line">omit omit /əˈmɪt/    省略，排除，忽略；遗漏</span><br><span class="line">emit /iˈmɪt/   </span><br><span class="line"></span><br><span class="line">abbreviation abbreviation /əˌbriːviˈeɪʃn/  略语；缩写词；缩写形式</span><br><span class="line"></span><br><span class="line">abbreviate abbreviate /əˈbriːvieɪt/ v. 缩写;把(词语、名称)缩写(成…);缩略;缩简;缩短</span><br><span class="line"></span><br><span class="line">affinity affinity /əˈfɪnəti/  n.  亲近；熟稔;密切关系; 亲和；</span><br><span class="line">anti-affinity anti-affinity /ˈænti əˈfɪnəti/    非亲和性；反关联;反亲和性</span><br><span class="line"></span><br><span class="line">indefinite indefinite /ɪnˈdefɪnət/  adj.  无限期的；期限不定的;不确定的，无限的</span><br><span class="line">indefinitely indefinitely /ɪnˈdefɪnətli/</span><br><span class="line">------------------------------------------------</span><br><span class="line">raw raw /rɔː/  adj.  （食物）生的，生食的，未熟的；未烹制的；未煮的;          raw meat.  These fish are often eaten raw.</span><br><span class="line">                     未经加工的；自然状态的         raw sugar  原糖</span><br><span class="line">					 未经处理的；未经分析的；原始的      This information is only raw data. </span><br><span class="line"></span><br><span class="line">population population /ˌpɑːpjuˈleɪʃn/ n. （某一国家或地区的）全体人民，人口;（某一国家或地区某类人或动物的）总数；人群，种群</span><br><span class="line"></span><br><span class="line">populate polulate /ˈpɑːpjuleɪt/  v.  （大批地）居住于，生活于，栖居于;向…移民</span><br><span class="line">                                      (给文件)增添数据，输入数据     populate secret to each tenant namespace.</span><br><span class="line"></span><br><span class="line">populator populator 填充器;聚居者，栖息者</span><br><span class="line"></span><br><span class="line">template template /ˈtemplət/   样本，样板，模板</span><br><span class="line"></span><br><span class="line">bundle  bundle /ˈbʌndl/   (一)捆，扎，包，束   a bundle of papers， a bundle of ideas</span><br><span class="line"></span><br><span class="line">disposable disposable /dɪˈspoʊzəbl/		adj.  用后即丢的，一次性的	      If you used disposable servers for your cluster.  disposable chopsticks</span><br><span class="line">                                              可自由支配的，可任意处理的         disposable personal income </span><br><span class="line">one-off one-off   一次性的;非经常的;一次性的事物</span><br><span class="line"></span><br><span class="line">temporary temporary /ˈtempəreri/  		临时的，暂时的，短暂的，  n. 临时工，临时雇员</span><br><span class="line">temporarily  temporarily  /ˈtempərerəli/  </span><br><span class="line"></span><br><span class="line">transient transient /ˈtrænʃnt/  adj. 短暂得，临时得；转瞬即逝的；倏忽；暂住的；过往的    </span><br><span class="line">                                n.  暂住某地的人；过往旅客；临时工;暂居者;临时旅客;流动短工;   </span><br><span class="line"></span><br><span class="line">ephemeral ephemeral /ɪˈfemərəl/  adj.  短暂的;瞬间的;瞬息的;短命的</span><br><span class="line"></span><br><span class="line">instantaneous instantaneous /ˌɪnstənˈteɪniəs/  adj.  立即的；立刻的；瞬间的;即刻的     an instantaneous response</span><br><span class="line">instantaneously                                  ensuring that the system is not overwhelmed by instantaneous memory allocation.</span><br><span class="line"></span><br><span class="line">instant instant /ˈɪnstənt/  n.  瞬间；瞬息; 顷刻;刹那; 片刻; 某一时刻</span><br><span class="line">                            adj.  立即的；立刻的; 短暂的;现时的，目下的，此刻的;</span><br><span class="line">							      (食物/饮料)速食的；即食的；速溶的；方便的；（食品）已配制好的，调制快速而方便的;</span><br><span class="line"></span><br><span class="line">instance instance /ˈɪnstəns/  n.  例子;实例;事例        for instance  比如</span><br><span class="line"></span><br><span class="line">instantiate instantiate /ɪnsˈtæʃɪeɪt/  v.  实例化；示例，举例说明</span><br><span class="line"></span><br><span class="line">audience audience /ˈɑːdiəns/  n.  （戏剧、音乐会或演讲等的）观众，读者，听众，受众;  </span><br><span class="line"></span><br><span class="line">recipient recipient /rɪˈsɪpiənt/  n.  收件人, 接收人;接受者;受方, 领受人</span><br><span class="line"></span><br><span class="line">duration  /duˈreɪʃn/   持续时间</span><br><span class="line"></span><br><span class="line">durable durable /ˈdʊrəbl/  adj.  耐用的；持久的     durable plastics</span><br><span class="line"></span><br><span class="line">interval /ˈɪntərvl/   间隔，(时间上的)间隙，</span><br><span class="line"></span><br><span class="line">expire expire /ɪkˈspaɪər/  v.  （因到期而）失效，终止；到期, 期满;</span><br><span class="line">                                气绝;死亡;故去; 逝世；去世；</span><br><span class="line"></span><br><span class="line">expiry expiry /ɪkˈspaɪəri/  n. 到期;期满;截止;告终</span><br><span class="line">expiration expiration /ˌekspəˈreɪʃn/  n.  到期;期满;截止;告终</span><br><span class="line"></span><br><span class="line">designate designate /ˈdezɪɡneɪt/  v.  命名；指定; 标明，标示;把…定名为;称呼           This area has been designated (as) a National Park.</span><br><span class="line">                                      选定，指派，选派; 委任（某人任某职）           The director is allowed to designate his/her successor.</span><br><span class="line">								  adj.  (已受委派)尚未上任的;(已当选)尚未就职的</span><br><span class="line"></span><br><span class="line">sign sign /saɪn/  v.  签名;签字;签署; 签(名);署(名);</span><br><span class="line">                      示意；打手势; 打手语，使眼色，做暗号     The hotel manager signed to the porter to pick up my case.   sign (to sb) (to do sth)</span><br><span class="line">				  n.  招牌；标牌；指示牌；标志       a road/traffic sign </span><br><span class="line">				      示意的动作（或声音）；手势        He gave a thumbs-up sign .</span><br><span class="line">					  符号；记号       a plus/minus sign (+/–)  ,  a dollar/pound sign ($/£) </span><br><span class="line">					  迹象；征兆；预兆      Headaches may be a sign of stress.</span><br><span class="line"></span><br><span class="line">signer signer /ˈsaɪnər/  n.  手语使用者;手语译员; 签名者，署名者，签署人</span><br><span class="line"></span><br><span class="line">normal normal /ˈnɔːrml/  adj.  典型的；正常的，标准的; 通常的; 平常的；精神正常的；意识健全的         Her temperature is normal.</span><br><span class="line">                         n.    常态；通常标准；一般水平</span><br><span class="line"></span><br><span class="line">normalize normalize /ˈnɔːrməlaɪz/  v.  （使）正常化，标准化，常规化; (使)变得正常</span><br><span class="line"></span><br><span class="line">discard discard /ˈdɪskɑːrd/		v.  丢弃，抛弃，垫(牌);打出(无用的牌)	 	   He had discarded his jacket because of the heat,</span><br><span class="line">                                n.  被抛弃的人(或物);(尤指纸牌游戏中)垫出的牌		 abandon	</span><br><span class="line"></span><br><span class="line">specification specification /ˌspesɪfɪˈkeɪʃn/     规格，规范，具体要求     quality specification   质量要求，质量标准    process specification  加工标准</span><br><span class="line">specific specific /spəˈsɪfɪk/   （表达）明确的，确切的，具体的;特有的，特定得</span><br><span class="line">specify specify /ˈspesɪfaɪ/  v.   具体说明，明确要求，具体指定，明确指定</span><br><span class="line"></span><br><span class="line">offer offer /ˈɔːfər/ v.  提供（东西或机会）；供应，供给；    They decided to offer the job to Jo.</span><br><span class="line">                     n.  出价；报价          I&#x27;ve had an offer of $2 500 for the car.</span><br><span class="line"></span><br><span class="line">concept concept  /ˈkɑːnsept/   概念，观念</span><br><span class="line"></span><br><span class="line">conceptual conceptual /kənˈseptʃuəl/  adj.  概念(上)的;观念(上)的,概念的;观念的</span><br><span class="line">conceptually conceptually /kənˈsɛptʃuəli/ adv.   观念上;   概念上;   在概念上;   概念地;  </span><br><span class="line"></span><br><span class="line">tentative tentative /ˈtentətɪv/  adj.  (安排、协议等) 暂行的，暂定的; 临时的，不确定的；不肯定的，试探性得； 踌躇的；犹豫不定的；不果断的</span><br><span class="line">tentatively     a tentative agreement.  </span><br><span class="line"></span><br><span class="line">deterministic deterministic /dɪˌtɜːrmɪˈnɪstɪk/  adj.   确定的，决定性的；(观点、解释等)（基于）决定论的;  (力量或因素)不可抗拒的，不可逆转的</span><br><span class="line"></span><br><span class="line">dash dash /dæʃ/ n. 破折号，短横线，-；             beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.),</span><br><span class="line">                   猛冲；突进；急奔；匆忙；匆促；仓促</span><br><span class="line">				   (汽车的)仪表板 = dashboard</span><br><span class="line">				v.  飞奔;猛冲;马上离开;赶紧走;匆忙；匆促；仓促      I&#x27;m sorry but I have to dash.</span><br><span class="line"></span><br><span class="line">hyphen hyphen /ˈhaɪfn/  n.  连字符，连字符  ( - ) </span><br><span class="line"></span><br><span class="line">scratch scratch /skrætʃ/   n.  （皮肤或物体表面上的）划痕;擦痕，划伤；搔痒;挠痒;	    from scratch     从头开始；从零开始</span><br><span class="line">                           v.  	挠，搔（痒处）； 给…搔痒;给…挠痒           The dog scratched itself behind the ear.   Try not to scratch.</span><br><span class="line">						        划破，抓破，划伤，抓伤（皮肤）        Does the cat scratch?          I&#x27;d scratched my leg</span><br><span class="line">								（尤指意外地）擦破，划损，刮坏;划出痕迹    Be careful not to scratch the furniture	</span><br><span class="line"></span><br><span class="line">collision collision /kəˈlɪʒn/    碰撞;(相撞)事故;(两人之间或对立意见、看法等之间的)冲突</span><br><span class="line"></span><br><span class="line">conflict conflict /ˈkɑːnflɪkt , kənˈflɪkt/  n.  争执;争论;分歧;矛盾心理；内心冲突;(军事)冲突;战斗</span><br><span class="line">                                            v.  (两种思想、信仰、说法等)冲突，抵触</span><br><span class="line"></span><br><span class="line">circumstance circumstance /ˈsɜːrkəmstæns/ n. 条件；环境；状况;情况;情形;形势  condition</span><br><span class="line"></span><br><span class="line">circumvent circumvent /ˌsɜːrkəmˈvent/  v.  设法回避；规避，逃避(规则或限制); 绕过；绕行；     They found a way of circumventing the law.</span><br><span class="line"></span><br><span class="line">opinionated opinionated /əˈpɪnjəneɪtɪd/  adj.  固执己见的；顽固的, 偏执的</span><br><span class="line"></span><br><span class="line">profile profile /ˈproʊfaɪl/  n.  面部的侧影；侧面轮廓; 外形；轮廓; 概述；简介；人物简介；传略; </span><br><span class="line">                             v.  扼要介绍；概述；写简介; 为…作传略</span><br><span class="line"></span><br><span class="line">recent recent /ˈriːsnt/  adj.  最近的;近来的;新近的; 最新的           a recent development,  his most recent visit to</span><br><span class="line">recently </span><br><span class="line"></span><br><span class="line">seam seam /siːm/  n.  （缝合两块布等的）缝，线缝，接缝; (合在一起的两块木板等之间的)缝隙;裂缝;</span><br><span class="line">                      矿层；煤层; 地层</span><br><span class="line">				  v.  缝合;接合;焊合;使产生裂缝;发生裂痕</span><br><span class="line">seamless seamless /ˈsiːmləs/  adj.  无（接）缝的; （两部分之间）无空隙的，不停顿的; 无停顿的;衔接完美的   seamless migration.</span><br><span class="line">seamlessly</span><br><span class="line">------------------------------------</span><br><span class="line">external external /ɪkˈstɜːrnl/	adj. 外部的，外面的，				the external walls of the building	</span><br><span class="line">                                     外来的，外界的，在外的				 With external etcd nodes</span><br><span class="line"></span><br><span class="line">discretion discretion /dɪˈskreʃn/  n.  自行决定的自由；自行决定权, 自由裁量权;</span><br><span class="line"></span><br><span class="line">expand expand /ɪkˈspænd/ v.  扩展, 扩充;扩大;增加，增强（尺码、数量或重要性）        Metals expand when they are heated.</span><br><span class="line">                             扩展，发展（业务）</span><br><span class="line"></span><br><span class="line">expandable expandable /ɪkˈspændəbl/  adj.  可扩张的；可扩充的；可膨胀的</span><br><span class="line"></span><br><span class="line">expansion expansion /ɪkˈspænʃn/  扩张；扩展；扩大；膨胀</span><br><span class="line"></span><br><span class="line">shrink shrink  /ʃrɪŋk/  v.  收缩，缩小，（使）缩水，皱缩，减少              The vast forests of West Africa have shrunk，  grow and shrink the number of nodes as demand</span><br><span class="line">                            (因害怕、震惊或厌恶)退缩，畏缩，避开， 畏避，回避(工作、责任等)      One child shrinks away from me when I try to talk to him</span><br><span class="line"></span><br><span class="line">option option /ˈɑːpʃn/	n. 选择，选项，选择权，选修课</span><br><span class="line">optional optional /ˈɑːpʃənl/   adj.  可选择的；选修的,非强制的	</span><br><span class="line"></span><br><span class="line">daemon daemon /ˈdiːmən/	   (古希腊神话中的)半神半人精灵,守护神；恶魔，魔鬼，妖怪，妖魔</span><br><span class="line">                           (计算机)守护程序</span><br><span class="line">						   </span><br><span class="line">demon demon /ˈdiːmən/	 n.  恶魔；魔鬼;邪恶事物;妖怪，妖魔</span><br><span class="line"></span><br><span class="line">demonstrator demonstrator /ˈdemənstreɪtər/    n.  示威者;示威游行（或集会）者;示范者；演示者</span><br><span class="line">demonstrate demonstrate /ˈdemənstreɪt/  v.  证明；证实；论证； </span><br><span class="line">                                            示范；演示, 说明;</span><br><span class="line">                                            示威;进行示威游行（或集会）</span><br><span class="line"></span><br><span class="line">mutate mutate /ˈmjuːteɪt/  v.  （使）变异，突变; 转变；转换;变化;变成</span><br><span class="line"></span><br><span class="line">mutable mutable  /ˈmjuːtəbl/  adj.  可变的;会变的；易变的，反复无常的</span><br><span class="line"></span><br><span class="line">immutable immutable /ɪˈmjuːtəbl/  adj.   不可变的，不变的；不可改变的；永恒不变的</span><br><span class="line">immutability</span><br><span class="line"></span><br><span class="line">demand demand /dɪˈmænd/	要求，需求，需要   on demand</span><br><span class="line"></span><br><span class="line">eliminate eliminate /ɪˈlɪmɪneɪt/    清除，消除，排除，剔除，根除(尤指不需要之物);（在竞赛中）淘汰;消灭;干掉</span><br><span class="line"></span><br><span class="line">elimination elimination /ɪˌlɪmɪˈneɪʃn/ n.  消除;消灭;清除；</span><br><span class="line"></span><br><span class="line">parameter parameter /pəˈræmɪtər/ n.  参数,参量，变数，变量，决定因素；范围;规范;</span><br><span class="line"></span><br><span class="line">flavor flavor /ˈfleɪvər/  n.  风味;滋味;特色</span><br><span class="line">                          v.  给……调味;加味于</span><br><span class="line"></span><br><span class="line">complexity complexity /kəmˈpleksəti/  n.  复杂性;错综复杂;难题;难懂;难以理解的局势     varying complexity</span><br><span class="line"></span><br><span class="line">complex complex /kəmˈpleks , ˈkɑːmpleks/  adj.  复杂的;复合的(指词根加有词缀或主句含有从句);难懂的;费解的</span><br><span class="line"></span><br><span class="line">complicate complicate /ˈkɑːmplɪkeɪt/  v.  使复杂化;使难以理解；</span><br><span class="line">complicated complicated /ˈkɑːmplɪkeɪtɪd/  adj.  复杂的;难懂的</span><br><span class="line"></span><br><span class="line">nuance nuance /ˈnuːɑːns/  n.  （意义、声音、颜色、感情等方面的）细微差别</span><br><span class="line"></span><br><span class="line">invoke invoke /ɪnˈvoʊk/     援用，援引（法律、原则、格言、名人） ，引用          The judge invoked an international law </span><br><span class="line">                            调用      The module is invoked at this phase.</span><br><span class="line">----------------------------------------</span><br><span class="line">snap snap /snæp/  v.  （使喀嚓）断裂，绷断; (使)咔嚓一声折断;(使)啪的一声绷断     The wind had snapped the tree in two.         Suddenly, the rope snapped.</span><br><span class="line">                      （使啪地）打开，关上，移到某位置; (使)发出吧嗒一声(合上或打开)         She snapped the bag shut.</span><br><span class="line">					   拍照；摄影           A passing tourist snapped the incident.</span><br><span class="line">				  n.  （尤指关上或断裂的声音）啪嗒声，咔嚓声; （尤指抢拍的）照片, 快照;</span><br><span class="line">				  adj. 匆忙的；仓促的; 迅速的，突然的;            It was a snap decision .          They held a snap election .</span><br><span class="line"></span><br><span class="line">shoot shoot /ʃuːt/  v.  开（枪或其他武器）；射击；发射; 射杀；射伤;(枪或其他武器) 发射（子弹等）</span><br><span class="line">                        打猎；狩猎；打（猎物）；猎杀</span><br><span class="line">						拍摄；摄影            Where was the movie shot?  snap a photo. </span><br><span class="line">						(足球、曲棍球等) 射门；投篮;             He should have shot instead of passing.   shoot the ball. </span><br><span class="line"></span><br><span class="line">shot shot /ʃɑːt/  v.  (shoot的过去分词和过去式) 射击;开(枪或其他武器);射杀;发射;射伤</span><br><span class="line">                  n.  射击；开枪（或炮）；枪（或炮）声          Someone took a shot at the car.</span><br><span class="line">				      击球；射门；投篮           Taylor scored with a low shot into the corner of the net.      Good shot!</span><br><span class="line">                      照片; （电影中的）镜头</span><br><span class="line"></span><br><span class="line">snapshot snapshot /ˈsnæpʃɑːt/  v.  给…拍快照;拍快照</span><br><span class="line">                               n.  简介；简要说明; 快照;抓拍的照片</span><br><span class="line"></span><br><span class="line">tighten tighten /ˈtaɪtn/ v. （使）变紧，更加牢固;使更加严格；加强</span><br><span class="line">                             抓紧;攥紧;  绷紧，拉紧(绳、链); 拧紧，旋紧(螺钉、螺丝帽等)</span><br><span class="line"></span><br><span class="line">							</span><br><span class="line">tight tight  /taɪt/    adj.   牢固的，紧的，不松动的，难解开的</span><br><span class="line">                               (衣服或鞋)紧身的，紧贴的</span><br><span class="line">							   紧的;严密的;严格的;</span><br><span class="line"></span><br><span class="line">scenario scenario scenario /səˈnærioʊ/   方案，脚本，剧本，剧情梗概</span><br><span class="line"></span><br><span class="line">postpone postpone /poʊˈspoʊn/  v.  延迟；延期；展缓; 延缓；推迟；使延期；       postpone a meeting. </span><br><span class="line"></span><br><span class="line">abort abort /əˈbɔːrt/  v.  使流产; 流产；小产; （使）夭折;堕（胎）      Her lover walked out on her after she had aborted their child.</span><br><span class="line">                           中止（尤指很可能失败的事情）,中辍（计划、活动等）,停止      The decision was made to abort the mission</span><br><span class="line"></span><br><span class="line">highlight highlight /ˈhaɪlaɪt/  v.  突出；强调;使注意           This document highlights and consolidates configuration best practices.</span><br><span class="line">                                    将（文本的某部分）用彩笔做标记；将（计算机屏幕的某区域）增强亮度；使醒目; </span><br><span class="line"></span><br><span class="line">consolidate consolidate /kənˈsɑːlɪdeɪt/  v.  使加强；使巩固;            With this new movie he has consolidated his position.</span><br><span class="line">                                           （使）结成一体，合并; 使联合      All the debts have been consolidated.</span><br><span class="line"></span><br><span class="line">file file  v. 提出（申请），（把文件等）归档， 提起(诉讼);提出(投诉、请求等)           Please file an issue in the Pod Network providers&#x27; issue tracker</span><br><span class="line"></span><br><span class="line">hesitate hesitate /ˈhezɪteɪt/  v.  （对某事）犹豫，迟疑不决; 顾虑；疑虑;踌躇; （因有顾虑而）不愿意（做某事）      don&#x27;t hesitate to do sth.</span><br><span class="line"></span><br><span class="line">general general /ˈdʒenrəl/  adj. 普遍的；常规的; 正常的；一般的；一般性的；普通的</span><br><span class="line">                            n.   将军；（陆军、海军陆战队或美国空军）上将</span><br><span class="line"></span><br><span class="line">generic generic /dʒəˈnerɪk/    一般的，普通得，通用得    generic term  通用术语</span><br><span class="line"></span><br><span class="line">tip tip /tɪp/  n.  尖端；尖儿；端;末梢;尖端;顶端      the tips of your fingers.  the tip of your nose.  the tip of your pen.</span><br><span class="line">                   指点；实用的提示;提示，忠告，指示           handy tips for buying a computer</span><br><span class="line">				   小费；小账         He gave the waiter a generous tip </span><br><span class="line">			   v.  给小费；付小账;  给…小费        Did you remember to tip the waiter?      She tipped the porter a dollar.</span><br><span class="line">			       (使)倾斜;(使)斜侧  </span><br><span class="line"></span><br><span class="line">introspection introspection /ˌɪntrəˈspekʃn/   n. 内省;自省;反省;反思</span><br><span class="line"></span><br><span class="line">quote quote /kwoʊt/   v.   引用，引述，援引，引用(法律条款、事实等)；</span><br><span class="line">                           使用引号包裹    quote any strings that may be confused with booleans, such as &quot;yes&quot; or &quot;no&quot;. </span><br><span class="line"></span><br><span class="line">comprehensive comprehensive /ˌkɑːmprɪˈhensɪv/  adj.  全面的，综合的，完整的    comprehensive university </span><br><span class="line"></span><br><span class="line">naked naked /ˈneɪkɪd/  adj.  裸体的；裸露的；不穿衣服的 ;赤身裸体的        a naked body. </span><br><span class="line">                             (动物)没有皮毛的，没有羽毛的      The nest contained eight little mice that were naked and blind.</span><br><span class="line">                             无遮盖的；裸露的           a naked light .  a naked sword。   naked eyes. </span><br><span class="line"></span><br><span class="line">bare /ber/   adj.   裸露的，未穿衣服的        her feet were bare</span><br><span class="line">                    无遮盖的；未加装饰的            bare metal server</span><br><span class="line">                    （树木）光秃秃的，（土地）荒芜的          the bare branches of winter trees				，a bare mountainside	</span><br><span class="line">			  v.     使暴露；露出,使显露出来；                bared his teeth</span><br><span class="line">			         揭露；揭发；使暴露</span><br><span class="line">					 敞开心扉，互诉衷肠              Few men would have bared their soul to a woman as he had.</span><br><span class="line"></span><br><span class="line">preferable preferably /ˈprefrəbl/	</span><br><span class="line">preferably preferably /&#x27;pref(ə)rəbli/  adv.   最好地，更可取地，宁可    We&#x27;re looking for a new house, preferably one near the school</span><br><span class="line">prefer /prɪˈfɜːr/   更喜欢，偏好      I&#x27;d prefer tea。  I would prefer it if you didn&#x27;t tell anyone</span><br><span class="line"></span><br><span class="line">job job /dʒɑːb/  n.  工作；职业；职位;活儿，事情;作业，</span><br><span class="line">                     责任；职责</span><br><span class="line"></span><br><span class="line">span span /spæn/ n.  时间跨度，持续时间，范围，跨度               I worked with him over a span of six years.   The batteries had a life span of six hours..   </span><br><span class="line">                 v.   持续;跨越;贯穿;横跨       Span multiple zones,  His professional career spanned 16 years	</span><br><span class="line"></span><br><span class="line">manipulate manipulate /məˈnɪpjuleɪt/     v.  操作，操纵，控制         The technology uses a pen to manipulate a computer，  manipulate the market</span><br><span class="line">                                             控制(他人)，摆布         She uses her charm to manipulate people</span><br><span class="line"></span><br><span class="line">quarantine quarantine /ˈkwɔːrəntiːn/  n.  （为防传染的）隔离期；检疫, 隔离          quarantine station 检疫站</span><br><span class="line">                                      v.  （对动物或人）进行检疫，隔离,  对…进行隔离检疫</span><br><span class="line"></span><br><span class="line">separate separate /ˈseprət , ˈsepəreɪt/  v.  （使）分开，（使）分离, 分散；分割；划分;隔开；阻隔; 分居； 分手</span><br><span class="line">                                         adj.  分开的;单独的;独立的</span><br><span class="line"></span><br><span class="line">imagine /ɪˈmædʒɪn/  v.  想象，设想，猜想</span><br><span class="line"></span><br><span class="line">variable variable /ˈveriəbl/  n.  变量;变项;变元;可变因素;可变情况; </span><br><span class="line">                              adj.  可变的;多变的；易变的；变化无常的;反复无常的;可更改的;</span><br><span class="line"></span><br><span class="line">chunk chunk /tʃʌŋk/  n.  块，厚块；厚片,组块；大块         a chunk of cheese,   a chunk of farmland .      large chunks of data. </span><br><span class="line">                         相当大的量; 大量;大部分</span><br><span class="line"></span><br><span class="line">trunk trunk /trʌŋk/  n.  树干,主干, 主体;（人的）躯干,躯体           trunk of the tree.  tree trunk.  trunk road.  trunk line.</span><br><span class="line">                         （汽车后部的）行李箱, 后备箱;旅行箱;衣箱</span><br><span class="line">						 象鼻;</span><br><span class="line">						  (男式)游泳裤</span><br><span class="line"></span><br><span class="line">binary binary /ˈbaɪnəri/  adj.  二进制的（用0和1记数），二进位的(尤用于计算机领域);仅基于两个数字的；二元的；</span><br><span class="line">                          n.  二进制;双子星;双体;</span><br><span class="line"></span><br><span class="line">slash    slash    n.    斜杠，斜线 ，/，(长而窄的)伤口,切口		    Make deep slashes in the meat 		   ， backslash  \</span><br><span class="line">                  v.    (用利器)劈,挥砍;大幅度削减;大大降低          He slashed at her, aiming carefully</span><br><span class="line"></span><br><span class="line">comma comma /ˈkɑːmə/ n. 逗号             comma-separated</span><br><span class="line"></span><br><span class="line">underscore underscore /ˌʌndərˈskɔːr , ˈʌndərskɔːr/   n.  下划线，底线(用于字母下划线或计算机命令和互联网地址中)</span><br><span class="line">                                                     v.  强调;着重说明;在…下面划线</span><br><span class="line">													 </span><br><span class="line">asterisk asterisk  /ˈæstərɪsk/    v. 星号   v. 加星号于</span><br><span class="line"></span><br><span class="line">lend lend /lend/  v.  借给；借出; 把…借给            I&#x27;ve lent the car to a friend.</span><br><span class="line">                      （向…）贷（款）;借（钱）(给…)；（银行）货（款）</span><br><span class="line"></span><br><span class="line">differentiate differentiate /ˌdɪfəˈrenʃieɪt/  v.  区分;区别;辨别;使有差别;使不同       It&#x27;s difficult to differentiate between the two varieties.</span><br><span class="line"></span><br><span class="line">periodical  /ˌpɪriˈɑːdɪkl/   adj.  定期的，定期发行的，时常发生的</span><br><span class="line">                               n.  (学术)期刊</span><br><span class="line"></span><br><span class="line">periodic periodic /ˌpɪriˈɑːdɪk/  adj.  周期性;定期的;周期的;间发性的</span><br><span class="line"></span><br><span class="line">period  /ˈpɪriəd/		一段时间，时期;周期;（妇女的）经期，月经		period pains   ;  monthly periods	</span><br><span class="line"></span><br><span class="line">propagate propagate /ˈprɑːpəɡeɪt/   宣传；传播；使普及</span><br><span class="line">                                    繁殖，培植（植物）	</span><br><span class="line">propagation propagation  /ˈprɑːpəɡeɪʃn/  n.  传播;繁殖，繁育，培育;宣传;培养   propagation path.   propagation distance. </span><br><span class="line">----------------</span><br><span class="line">volatile volatile /ˈvɑːlətl/  adj.  &lt;计&gt;易失的;易挥发的，易发散的;    volatile storage. non-volatile storage.   volatile oil.  </span><br><span class="line">                                    (人或其情绪) 易变的；动荡不定的;反复无常的; 无定性的；无常性的; 可能急剧波动的；不稳定的；易恶化的</span><br><span class="line"></span><br><span class="line">precaution precaution /prɪˈkɔːʃn/  n.  预防措施；预防；防备              safety precautions.  precautions against fire. </span><br><span class="line">                                       避孕措施</span><br><span class="line"></span><br><span class="line">confidential confidential /ˌkɑːnfɪˈdenʃl/  adj.  机密的；保密的；秘密的;隐密的；     confidential information/documents,  confidential data</span><br><span class="line">confidentially confidentially</span><br><span class="line"></span><br><span class="line">confidentiality confidentiality /ˌkɑːnfɪˌdenʃiˈæləti/  n. 保密性；机密性</span><br><span class="line"></span><br><span class="line">secrecy secrecy /ˈsiːkrəsi/  n.  保密;秘密</span><br><span class="line"></span><br><span class="line">secret secret /ˈsiːkrət/  n.  秘密;机密;秘诀;奥秘;诀窍;奥妙   keep secret .  secret agent  间谍，特工</span><br><span class="line">                          adj.  秘密的;机密的;保密的</span><br><span class="line"></span><br><span class="line">encryption encryption /ɛnˈkrɪpʃən/ n. 加密，加密技术</span><br><span class="line">encrypt encrypt /ɪnˈkrɪpt/  v. 把…加密（或编码）</span><br><span class="line"></span><br><span class="line">credential credential /krəˈdenʃl/  (某人)可以信任的证明，凭证，凭据，文凭，证明书</span><br><span class="line"></span><br><span class="line">authenticate authenticate /ɔːˈθentɪkeɪt/  v.  鉴别，鉴定，证明...是真实的</span><br><span class="line"></span><br><span class="line">authentication authentication /ɔːˌθentɪˈkeɪʃn/   认证，鉴定，身份验证</span><br><span class="line"></span><br><span class="line">authority  /əˈθɔːrəti/   权威机构，官方机构，当权者，行政管理机构</span><br><span class="line">authorization authorization /ˌɔːθərəˈzeɪʃn/    批准，授权，授权书，批准书</span><br><span class="line">authorize authorize /ˈɔːθəraɪz/  v. 授权，批准</span><br><span class="line">author /ˈɔːθər/  作者，作家，著作者</span><br><span class="line"></span><br><span class="line">guide guide /ɡaɪd/  v.  给某人领路（或导游）；指引; 指导，影响（某人的行为）;（向某人）解释，阐明;</span><br><span class="line">                    n.  指南；手册; 旅游指南（或手册）</span><br><span class="line">					    导游；向导; 指导者；指引者</span><br><span class="line"></span><br><span class="line">guideline guideline /ˈɡaɪdlaɪn/  n.  指导方针；指导原则；行动纲领；准则; 参考</span><br><span class="line"></span><br><span class="line">exploitable exploitable /ɪkˈsploʊɪtəbl/  adj.   可利用的;可开发的;有利可图的；可借以获益的        were not exploitable</span><br><span class="line"></span><br><span class="line">exploit exploit /ɪkˈsplɔɪt/  v. 利用（…为自己谋利）; 剥削；压榨;占…的便宜           exploit his workers</span><br><span class="line">                                利用，应用，开发，开采;              countries exploiting the rainforests for hardwood</span><br><span class="line"></span><br><span class="line">logical logical /ˈlɑːdʒɪkl/ adj.  合乎情理的；合乎常理的;符合逻辑的；按照逻辑的;逻辑（上）的；</span><br><span class="line"></span><br><span class="line">logic logic /ˈlɑːdʒɪk/  n.  逻辑学，逻辑； 逻辑性；条理性</span><br><span class="line"></span><br><span class="line">tricky tricky /ˈtrɪki/ adj.  难办的；难对付的;棘手的;    a tricky situation</span><br><span class="line">                             诡计多端的;奸诈的;狡猾的</span><br><span class="line"></span><br><span class="line">trick trick /trɪk/  v.  欺骗；欺诈       I&#x27;d been tricked and I felt stupid.</span><br><span class="line">                    n.  诡计；花招；骗局；把戏        They had to think of a trick to get past the guards.</span><br><span class="line">					adj.  为欺骗的；使人产生错觉的</span><br><span class="line"></span><br><span class="line">picky  picky /ˈpɪki/   adj.   挑剔的，难伺候的，过分讲究的</span><br><span class="line"></span><br><span class="line">pick pick /pɪk/  v.  挑选，选择；拣选；采；摘   to pick grapes    ，     pick and choose  挑拣；精挑细选</span><br><span class="line">                     （用手指）摘掉，剔除，掐去；抠（鼻）；剔（牙）      to pick your teeth  剔牙</span><br><span class="line"></span><br><span class="line">reveal reveal /rɪˈviːl/  v.  使显露;显示；透露 ;露出；展示               to reveal a secret</span><br><span class="line"></span><br><span class="line">combine combine /kəmˈbaɪn , ˈkɑːmbaɪn/	v. 合并，联合，（使）结合，混合    She combines eggs and other food to make a cake</span><br><span class="line">                                        n. 联合收割机，联合企业，集团      combnine harvester,    combine business													</span><br><span class="line"></span><br><span class="line">combination combination /ˌkɑːmbɪˈneɪʃn/   n.  结合体；联合体；混合体; 结合；联合；混合; </span><br><span class="line"></span><br><span class="line">impose impose /ɪmˈpoʊz/  v.  推行，采用（规章制度）；强制实行; 迫使；把…强加于; 使（别人）接受自己的意见; 勉强（某人做某事）；硬要…和…在一起</span><br><span class="line">impose on 迫使；把…强加于</span><br><span class="line">impose a fine  处以罚款</span><br><span class="line"></span><br><span class="line">assign assign /əˈsaɪn/  v.   分配（某物）；分派，指定；指派;委派；派遣;布置（工作、任务等）         assign work, assign a value. </span><br><span class="line">assignment assignment /əˈsaɪnmənt/ n. 分派；指派;委派；</span><br><span class="line"></span><br><span class="line">obscure obscure /əbˈskjʊr/  v.  遮掩；遮蔽；使模糊；使隐晦；使晦涩；使费解；使难懂        The view was obscured by fog.</span><br><span class="line">                            adj.  模糊的,不清楚的;无名的；鲜为人知的；默默无闻的; （通常指因内容繁琐）晦涩的，费解的，难懂的；难以理解的</span><br><span class="line">							n.  朦胧;黑夜</span><br><span class="line"></span><br><span class="line">opaque opaque /oʊˈpeɪk/  adj.  （玻璃、液体等) 不透明的；不透光的；浑浊的； </span><br><span class="line">                               （说话或写作) 难懂；模糊；隐晦；不清楚； 费解的；难懂的；晦涩的</span><br><span class="line"></span><br><span class="line">transparent transparent /trænsˈpærənt/  adj.  (玻璃、塑料等) 透明的；清澈的; 显而易见的</span><br><span class="line">transparently </span><br><span class="line"></span><br><span class="line">convention convention /kənˈvenʃn/  n.  习俗;惯例;常规； (艺术、文学、戏剧中的)传统做法，传统风格； (国家或组织间的)公约，协定，协约； international convention 国际惯例</span><br><span class="line">                                       会议        convention center  会议中心，会展中心</span><br><span class="line">									   by convention 按照惯例， follow the convention. </span><br><span class="line">									   </span><br><span class="line">conventionally conventionally /kənˌvenʃənəlɪ/  adv.  （行为、观念等）传统的，符合习俗的;  （方法或产品）通常的，传统的; 照惯例, 约定俗成</span><br><span class="line"></span><br><span class="line">convenience convenience /kənˈviːniəns/  n.  方便；适宜；便利;便利的事物（或设施）；方便的用具        only for convenience.</span><br><span class="line">at sb&#x27;s convenience  在方便时；在适宜的地点;        at your earliest convenience  尽早；尽快</span><br><span class="line"></span><br><span class="line">legacy legacy /ˈleɡəsi/   遗产，遗留，遗赠财物</span><br><span class="line">inheritance</span><br><span class="line"></span><br><span class="line">retrieve retrieve /rɪˈtriːv/  v.  取回；索回;挽回；找回,使重新回到; （计算机、大脑）检索，搜索（信息）    to retrieve information from the database</span><br><span class="line"></span><br><span class="line">mitigate mitigate  /ˈmɪtɪɡeɪt/	  减轻，缓和，缓解	</span><br><span class="line"></span><br><span class="line">transition transition /trænˈzɪʃn/  v.  过渡；转变；变革；变迁;(从某一状态或活动)转变，过渡(到另一状态或活动)   transition period; transition zone;</span><br><span class="line"></span><br><span class="line">transit transit /ˈtrænzɪt/  n.  运输；运送；搬运；载运         The cost includes transit.  transit times</span><br><span class="line">                                通过；经过；通行；过境；中转        the transit lounge  中转候机室   transit visa.</span><br><span class="line">								交通运输系统</span><br><span class="line">							adj.  中转的;过境的;</span><br><span class="line"></span><br><span class="line">discourage  /dɪsˈkɜːrɪdʒ/   使泄气，使灰心，使放弃； 劝阻，阻拦，阻止            Don&#x27;t let this discourage you</span><br><span class="line">discouraged      泄气的，心灰意冷的,诅丧的     She was determined not to be too discouraged.</span><br><span class="line">discouraging               Today&#x27;s report is rather more discouraging for the economy.</span><br><span class="line"></span><br><span class="line">exhaust exhaust /ɪɡˈzɔːst/  耗尽，用完，花光，使筋疲力尽，使疲惫不堪    etcd will eventually exhaust its storage space</span><br><span class="line"></span><br><span class="line">exhaustive exhaustive /ɪɡˈzɔːstɪv/ adj.  详尽的；彻底的；全面的</span><br><span class="line">exhaustively</span><br><span class="line"></span><br><span class="line">fetch fetch  /fetʃ/   v.  （去）拿来；（去）请来;去接;去取;           to fetch help/a doctor;  She&#x27;s gone to fetch the kids from school.</span><br><span class="line"></span><br><span class="line">lack lack  /læk/  n. &amp; v.  缺乏；匮乏；短缺            lack of connection</span><br><span class="line"></span><br><span class="line">asynchronous  asynchronous asynchronous  /eɪˈsɪŋkrənəs/   asynchronous    异步的，非同步的，异步</span><br><span class="line">asynchronously</span><br><span class="line">simultaneous </span><br><span class="line"></span><br><span class="line">synchronous synchronous /ˈsɪŋkrənəs/  adj.  同步的;共时的;同时发生(或存在)的</span><br><span class="line"></span><br><span class="line">synchronization synchronization /ˌsɪŋkrənəˈzeɪʃn/  n.  同步;同时;同时性;同期[步]录音    data synchronization</span><br><span class="line"></span><br><span class="line">synchronize synchronize /ˈsɪŋkrənaɪz/  v.  使同步;(使)同步，在时间上一致，同速进行</span><br><span class="line"></span><br><span class="line">loop loop /luːp/  n.  环形；环状物；圆圈; （绳、电线等的）环，圈; </span><br><span class="line">                      ( 计) 循环；（程序中）一套重复的指令;环路；回线；回路</span><br><span class="line">				  v.  使成环；使绕成圈;  把（绳等）打成圈（或环）</span><br><span class="line"></span><br><span class="line">paragraph paragraph /ˈpærəɡræf/  n.   （文章的）段，段落，节</span><br><span class="line"></span><br><span class="line">explain explain /ɪkˈspleɪn/   v.  解释，说明，阐明</span><br><span class="line">explanation explanation /ˌekspləˈneɪʃn/  n.  解释；说明；阐述       to offer/provide an explanation </span><br><span class="line"></span><br><span class="line">interpret interpret /ɪnˈtɜːrprət/   解释，解析，说明，阐释；口译      simultaneous interpretation，   interpret the meaning of something</span><br><span class="line">interpretation interpretation /ɪnˌtɜːrprəˈteɪʃn/  n. 解释，说明;阐明，口译;</span><br><span class="line"></span><br><span class="line">outage outage /ˈaʊtɪdʒ/ n.  停电期间；中断供应，运行中断    power outage 停电期间</span><br><span class="line"></span><br><span class="line">spectrum spectrum /ˈspektrəm/  n.  谱；光谱; 声谱；波谱；频谱</span><br><span class="line">                                   范围；各层次；系列；幅度          a spectrum of importance</span><br><span class="line"></span><br><span class="line">escalation escalation /ˌeskəˈleɪʃn/  n.  增加;扩大;逐步上升;逐步扩大</span><br><span class="line"></span><br><span class="line">reason reason /ˈriːzn/  n.  原因；理由；解释, 正当理由;       I&#x27;d like to know the reason why you&#x27;re so late.</span><br><span class="line">                        v.  推理；推论；推断; 思考；理解            the human ability to reason.</span><br><span class="line"></span><br><span class="line">render render /ˈrendər/  v.  使成为；使变得；使处于某状态;导致，致使;造成           Hundreds of people were rendered homeless by the earthquake.</span><br><span class="line">                             给予(帮助);提供(服务)                    to render a service to sb.  to render sb a service</span><br><span class="line">							 （用不同的语言）表达；渲染；翻译；把…译成         It&#x27;s a concept that is difficult to render into English.</span><br><span class="line">							 粉刷，（往墙上）抹灰</span><br><span class="line"></span><br><span class="line">react react /riˈækt/  v.  起反应；（对…）作出反应；回应;</span><br><span class="line">                         （对食物等）有不良反应，过敏</span><br><span class="line">                         起化学反应；发生化学变化</span><br><span class="line">						 </span><br><span class="line">reactive reactive /riˈæktɪv/  adj.  反应的；有反应的；回应的; 回应性的</span><br><span class="line">                                    能起化学反应的；易反应的; 活性的;</span><br><span class="line">reactively reactively</span><br><span class="line"></span><br><span class="line">intervene intervene /ˌɪntərˈviːn/  v.  干涉;干预;介入; 干扰;阻挠;打扰; 插话;打岔</span><br><span class="line"></span><br><span class="line">intervention intervention /ˌɪntərˈvenʃn/  n.   干涉;干预          requires manual intervention to repair</span><br><span class="line"></span><br><span class="line">interference interference /ˌɪntərˈfɪrəns/ n.  干涉；干预；介入;（无线电信号的\电波的）干扰</span><br><span class="line"></span><br><span class="line">interfere interfere /ˌɪntərˈfɪr/ v.  干涉;干预;介入;妨碍;冲突;抵触   interfere with the process</span><br><span class="line"></span><br><span class="line">violate violate /ˈvaɪəleɪt/  v.  违反，违犯，违背（法律、协议等）           to violate international law.     it violates the goal of low coupling.  violate rules.</span><br><span class="line">                                 侵犯（隐私）;搅扰;打搅;污损;亵渎;强奸;</span><br><span class="line">violation violation  /ˌvaɪə&#x27;leɪʃ(ə)n/  n.  违反;违章;违法;违例;犯规;侵犯;破坏;越轨   the violation of rules of road .  violation of laws.</span><br><span class="line"></span><br><span class="line">individual /ˌɪndɪˈvɪdʒuəl/   个别的，单独的，个人的，个体的，独特的，有个性的</span><br><span class="line"></span><br><span class="line">collective collective /kəˈlektɪv/  adj.  集体的，共有的；共同的；全体成员的；       individual and collective resource.   collective term  集合术语  collective economy</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>生活日常</category>
      </categories>
      <tags>
        <tag>生活日常</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch 配置</title>
    <url>/202307171638/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>elasticsearch 8.8.2</li>
</ul>
<p>Elasticsearch 是一个开源的搜索引擎，建立在一个全文搜索引擎库 Apache Lucene <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Apache Lucene](https://lucene.apache.org/core/)">[1]</span></a></sup> 基础之上。 Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库 — 无论是开源还是私有。</p>
<p>但是 Lucene 仅仅只是一个库。为了充分发挥其功能，你需要使用 Java 并将 Lucene 直接集成到应用程序中。 更糟糕的是，您可能需要获得信息检索学位才能了解其工作原理。Lucene 非常 复杂。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Apache Lucene](https://lucene.apache.org/core/)">[1]</span></a></sup></p>
<p>Elasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索，但是它的目的是使全文检索变得简单， 通过隐藏 Lucene 的复杂性，取而代之的提供一套简单一致的 RESTful API。</p>
<p>然而，Elasticsearch 不仅仅是 Lucene，并且也不仅仅只是一个全文搜索引擎。 它可以被下面这样准确的形容：</p>
<ul>
<li>一个分布式的实时文档存储，<em>每个字段</em> 可以被索引与搜索</li>
<li>一个分布式实时分析搜索引擎</li>
<li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li>
</ul>
<p>Elasticsearch 将所有的功能打包成一个单独的服务，这样你可以通过程序与它提供的简单的 RESTful API 进行通信， 可以使用自己喜欢的编程语言充当 web 客户端，甚至可以使用命令行（去充当这个客户端）。</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html">Elasticsearch 官方安装文档</a></p>
<p><a href="https://www.elastic.co/cn/downloads/elasticsearch">Elasticsearch 官方安装包下载路径</a></p>
<p>Elasticsearch 是 <em><strong>面向文档</strong></em> 的，意味着它存储整个对象或 <em><strong>文档</strong></em>。Elasticsearch 不仅存储文档，而且 <em><strong>索引</strong></em> 每个文档的内容，使之可以被检索。在 Elasticsearch 中，我们对文档进行索引、检索、排序和过滤—而不是对行列数据。这是一种完全不同的思考数据的方式，也是 Elasticsearch 能支持复杂全文检索的原因。 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[面向文档](https://www.elastic.co/guide/cn/elasticsearch/guide/current/_document_oriented.html#_document_oriented)">[2]</span></a></sup></p>
<p>Elasticsearch 使用 JSON 作为文档的序列化格式 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[面向文档](https://www.elastic.co/guide/cn/elasticsearch/guide/current/_document_oriented.html#_document_oriented)">[2]</span></a></sup></p>
<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distributed-cluster.html">Elasticsearch 集群内的原理</a></p>
<h1 id="端口说明"><a href="#端口说明" class="headerlink" title="端口说明"></a>端口说明</h1><p>elasticsearch 主要使用以下端口</p>
<ul>
<li><code>9200</code> - elasticsearch 服务的监听端口，客户端访问 9200 和 Elasticsearch 进行通信。</li>
<li><code>9300</code> - 集群中的节点通过 9300 端口彼此通信，如果这个端口没有开，节点将无法形成一个集群</li>
</ul>
<h1 id="Elasticsearch-配置文件说明"><a href="#Elasticsearch-配置文件说明" class="headerlink" title="Elasticsearch 配置文件说明"></a>Elasticsearch 配置文件说明</h1><p>Elasticsearch 的主要配置文件为，配置文件路径可以用环境变量 <code>ES_PATH_CONF</code> 指定。 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[重要配置项](https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html)">[8]</span></a></sup> </p>
<ul>
<li><code>elasticsearch.yml</code> </li>
<li><code>jvm.options</code></li>
<li><code>log4j2.properties</code></li>
</ul>
<blockquote>
<p><em><strong>Elasticsearch 已经有了 <code>很好</code> 的默认值，特别是涉及到性能相关的配置或者选项。 如果你有疑问，最好就不要动它。我们已经目睹了数十个因为错误的设置而导致毁灭的集群， 因为它的管理者总认为改动一个配置或者选项就可以带来 100 倍的提升。</strong></em> <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[重要配置项](https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html)">[8]</span></a></sup></p>
</blockquote>
<p>配置文件格式支持 <em>YAML</em> 和 <em>扁平</em> 格式 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[重要配置项](https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html)">[8]</span></a></sup></p>
<p><em>YAML</em> 格式示例</p>
<figure class="highlight shell"><figcaption><span>YAML</span></figcaption><table><tr><td class="code"><pre><span class="line">path:</span><br><span class="line">    data: /var/lib/elasticsearch</span><br><span class="line">    logs: /var/log/elasticsearch</span><br><span class="line">    </span><br><span class="line">discovery.seed_hosts:</span><br><span class="line">   - 192.168.1.10:9300</span><br><span class="line">   - 192.168.1.11</span><br><span class="line">   - seeds.mydomain.com    </span><br></pre></td></tr></table></figure>
<p><em>扁平</em> 格式示例</p>
<figure class="highlight shell"><figcaption><span>flattened</span></figcaption><table><tr><td class="code"><pre><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/log/elasticsearch</span><br><span class="line"></span><br><span class="line">discovery.seed_hosts: [&quot;192.168.1.10:9300&quot;, &quot;192.168.1.11&quot;, &quot;seeds.mydomain.com&quot;]</span><br></pre></td></tr></table></figure>

<h2 id="集群及节点名称"><a href="#集群及节点名称" class="headerlink" title="集群及节点名称"></a>集群及节点名称</h2><p>Elasticsearch 默认启动的集群名字叫 <code>elasticsearch</code>。<em><strong>生产环境中建议修改集群名称，防止其他使用默认集群名称的节点意外加入集群</strong></em> <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[重要配置项](https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html)">[8]</span></a></sup></p>
<blockquote>
<p>同样，最好也修改你的节点名字。就像你现在可能发现的那样， <em><strong>Elasticsearch 会在节点启动的时候随机给它指定一个名字</strong></em>。你可能会觉得这很有趣，但是当凌晨 3 点钟的时候， 你还在尝试回忆哪台物理机是 Tagak the Leopard Lord 的时候，你就不觉得有趣了。</p>
<p>更重要的是，<em><strong>这些名字是在启动的时候产生的，每次启动节点， 它都会得到一个新的名字</strong></em>。这会使日志变得很混乱，因为<strong>所有节点的名称都是不断变化的</strong>。 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[重要配置项](https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html)">[8]</span></a></sup></p>
</blockquote>
<figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">cluster.name: elasticsearch</span><br><span class="line">node.name: elasticsearch_005_data</span><br></pre></td></tr></table></figure>

<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>监听接口相关配置</p>
<figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多网卡情况下，建议指定 IP 地址，以防止集群使用网络不通的 IP。<span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果需要监听多个 IP 地址，使用以下配置</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">network.host: [<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;192.168.1.1&quot;</span>]</span> </span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="存储路径"><a href="#存储路径" class="headerlink" title="存储路径"></a>存储路径</h2><p>默认情况下，Elasticsearch 会把插件、日志以及你最重要的数据放在安装目录下。这会带来不幸的事故， 如果你重新安装 Elasticsearch 的时候不小心把安装目录覆盖了。如果你不小心，你就可能把你的全部数据删掉了。 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[重要配置项](https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html)">[8]</span></a></sup></p>
<p>最好的选择就是把你的数据目录配置到安装目录以外的地方， 同样你也可以选择转移你的插件和日志目录。</p>
<figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">path.data: /path/to/data1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Path to <span class="built_in">log</span> files:</span></span><br><span class="line">path.logs: /path/to/logs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Path to <span class="built_in">where</span> plugins are installed:</span></span><br><span class="line">path.plugins: /path/to/plugins</span><br></pre></td></tr></table></figure>
<blockquote>
<p>数据可以保存到多个不同的目录， 如果将每个目录分别挂载不同的硬盘，这可是一个简单且高效实现一个软磁盘阵列，<em>这个特性将会被移除</em> <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[重要配置项](https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html)">[8]</span></a></sup></p>
</blockquote>
<h2 id="集群发现机制"><a href="#集群发现机制" class="headerlink" title="集群发现机制"></a>集群发现机制</h2><p>当一个 Elasticsearch 节点启动时，它将使用 <code>discovery.seed_hosts</code> 中列出的主机地址来发现集群中的其他节点。它会依次尝试与这些节点建立连接，直到找到一个可用节点，一旦成功连接到一个主机，节点将从它获取集群的状态信息，了解集群的拓扑结构，并加入到正确的集群中。</p>
<p><code>cluster.initial_master_nodes</code> 是 Elasticsearch 配置中的一个重要选项，用于设置初始的主节点列表。这个选项在集群初始化过程中起到关键作用。其值是<strong>初始主节点的节点名称或者 <code>Node ID</code> 组成的列表</strong>。在集群初始化过程中，Elasticsearch 使用<em><strong>主节点选举算法来选择集群中的初始主节点</strong></em>。主节点选举算法基于 <code>cluster.initial_master_nodes</code> 中指定的节点列表，并通过投票和协商来决定哪个节点将成为集群的初始主节点。</p>
<ul>
<li>如果集群中的所有节点都具有相同的 <code>cluster.initial_master_nodes</code> 配置，它们将争夺主节点的地位</li>
<li>如果集群中的节点具有不同的 <code>cluster.initial_master_nodes</code> 配置，Elasticsearch 将根据 Node ID 的哈希值来选择主节点。</li>
</ul>
<blockquote>
<p><em><code>cluster.initial_master_nodes</code> 只在集群初始化过程中起作用。一旦集群初始化完成，集群的状态将由选举出的主节点负责管理和维护</em>。</p>
</blockquote>
<figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认端口(省略端口)为 9300</span></span><br><span class="line">discovery.seed_hosts: [&quot;host1&quot;, &quot;host2:9300&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="安全相关配置"><a href="#安全相关配置" class="headerlink" title="安全相关配置"></a>安全相关配置</h2><p>安全相关配置，主要包括认证和传输层加密(TLS&#x2F;SSl)，<em><strong>安全相关配置在所有节点上必须都相同</strong></em> <sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[安全相关配置](https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-settings.html#secure-settings)">[10]</span></a></sup> </p>
<figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用安全认证，启用后客户端请求需要身份验证</span></span><br><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.security.enrollment.enabled: true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SSL 相关功能，启用后客户端需要使用 HTTPS 请求</span></span><br><span class="line">xpack.security.http.ssl:</span><br><span class="line">  enabled: true</span><br><span class="line">  keystore.path: certs/http.p12</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">节点间 tls/ssl 通信配置，如果 xpack.security.enabled: <span class="literal">true</span>，必须启用</span></span><br><span class="line">xpack.security.transport.ssl:</span><br><span class="line">  enabled: true</span><br><span class="line">  verification_mode: certificate</span><br><span class="line">  keystore.path: certs/transport.p12</span><br><span class="line">  truststore.path: certs/transport.p12</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>xpack.security.enabled</code></td>
<td>是否启用安全特性，默认为 <code>true</code></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.autoconfiguration.enabled</code></td>
<td>默认为 <code>true</code>。安全相关配置(<code>security autoconfiguration process</code>)会自动配置，如果关闭，在启用安全特性的情况下，需要手动配置安全相关的配置</td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.enrollment.enabled</code></td>
<td>默认为 <code>false</code>。<code>security autoconfiguration process</code> 会自动将其配置为 <code>true</code>。新节点加入集群需要 <code>enrollment token</code></td>
<td></td>
</tr>
<tr>
<td><em><strong>认证 相关配置</strong></em></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.audit.enabled</code></td>
<td>默认为 <code>false</code>。配置为 <code>true</code> 启用认证功能。配置为 <code>true</code> 后会将认证相关日志写入单独的文件 <code>&lt;clustername&gt;_audit.json</code>。<em><strong>如果启用，那么所有节点认证相关配置都要相同</strong></em> <sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Auditing settings](https://www.elastic.co/guide/en/elasticsearch/reference/8.8/auditing-settings.html)">[11]</span></a></sup></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.audit.logfile.events.include</code></td>
<td>定义哪些类型的事件被写入认证日志文件，<code>_all</code> 包含所有类型，<em>不建议使用 <code>_all</code>，因为写入的日志会太过详细</em>。默认值包括：<code>access_denied</code>, <code>access_granted</code>, <code>anonymous_access_denied</code>, <code>authentication_failed</code>,<code>connection_denied</code>, <code>tampered_request</code>, <code>run_as_denied</code>, <code>run_as_granted</code>, <code>security_config_change</code>.</td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.audit.logfile.events.exclude</code></td>
<td>排除指定类型的认证时间。默认为空，这个在使用 <code>_all</code> 包含了所有事件类型时很有用，可以用它排除某些类型的认证事件记录。</td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.audit.logfile.events.emit_request_body</code></td>
<td>认证事件日志中是否包含 HTTP 请求体，默认为 <code>false</code></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.audit.logfile.emit_node_name</code></td>
<td>认证事件日志中是否包含 <em><code>node.name</code></em> 中配置的节点名。默认为 <code>false</code></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.audit.logfile.emit_node_host_address</code></td>
<td>认证事件日志中是否包含 <em>节点 IP</em></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.audit.logfile.emit_node_host_name</code></td>
<td>认证事件日志中是否包含 <em>节点的主机名</em></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.audit.logfile.emit_node_id</code></td>
<td>认证事件日志中是否包含 <em>node id</em>。默认为 <code>true</code>。<strong>node id</strong> 是不可变的</td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.authc.anonymous.username</code></td>
<td>匿名用户的用户名，默认为 <code>_es_anonymous_user</code></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.authc.anonymous.roles</code></td>
<td>匿名用户关联的 <em>角色</em></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.ssl.diagnose.trust</code></td>
<td>默认为 <code>true</code>。是否将 SSL&#x2F;TLS 相关的错误信息记录到 Elasticsearch 日志里面。</td>
<td></td>
</tr>
<tr>
<td><em><strong>HTTP TLS&#x2F;SSL 相关配置</strong></em></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.http.ssl.enabled</code></td>
<td>默认为 <code>false</code>。是否启用 HTTPS 通信</td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.http.ssl.supported_protocols</code></td>
<td>支持的 SSL 版本，默认  <code>TLSv1.2</code>,<code>TLSv1.1</code>。可用：<code>SSLv2Hello</code>, <code>SSLv3</code>, <code>TLSv1</code>, <code>TLSv1.1</code>, <code>TLSv1.2</code>, <code>TLSv1.3</code></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.http.ssl.client_authentication</code></td>
<td>默认为 <code>none</code>。控制是否要求客户端提供证书。可用值:<code>none</code>, <code>required</code>, <code>optional</code></td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.http.ssl.verification_mode</code></td>
<td>默认为 <code>full</code>。控制如何验证客户端提供的证书<br/>- <code>full</code> 验证证书未过期，验证 CA，验证 hostname 或者 IP<br/>- <code>certificate</code> 验证 CA，不检查 <code>hostname</code><br/>- <code>none</code> 不进行证书验证。</td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.http.ssl.key</code></td>
<td>PEM 格式的私钥</td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.http.ssl.certificate</code></td>
<td>PEM 格式的证书</td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.transport.ssl.enabled</code></td>
<td>定义节点之间通信是否启用 TLS&#x2F;SSl，默认为 <code>false</code><br/><em><strong><code>xpack.security.enabled</code> 为 <code>true</code> 时，必须启用</strong></em> <br/>可以使用位于 <code>/etc/elasticsearch/certs/</code> 的默认证书</td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.transport.filter.allow</code></td>
<td>允许节点通信的 IP 列表</td>
<td></td>
</tr>
<tr>
<td><code>xpack.security.transport.filter.deny</code></td>
<td>拒绝节点通信的 IP 列表</td>
<td></td>
</tr>
</tbody></table>
<p><em><strong>默认初次启动的 Elasticsearch 启用了安全特性</strong></em>。初次启动后，Elasticsearch 会自动配置安全选项（写入安全相关配置到配置文件、生成 TLS&#x2F;SSL 使用的证书和私钥），启动后 Elasticsearch 会为 <code>elastic</code> 用户生成初始密码、并为 Kibana 生成一个 <code>enrollment token</code>（有效期 30 分钟） <sup id="fnref:12"><a href="#fn:12" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[启用安全特性启动 Elasticsearch](https://www.elastic.co/guide/en/elasticsearch/reference/8.8/configuring-stack-security.html#configuring-stack-security)">[12]</span></a></sup></p>
<p>要重置用户密码，可以使用 <code>elasticsearch-reset-password</code> 工具。要生成一个新的 <code>enrollment tokens</code>，可以使用 <code>elasticsearch-create-enrollment-token</code> 工具。</p>
<h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><p>以下配置启用 <em>用户认证</em>、配置 <em>节点间 tls&#x2F;ssl 通信</em> （<code>xpack.security.enabled</code> 为 <code>true</code> 时必须配置）</p>
<figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.security.enrollment.enabled: false</span><br><span class="line">xpack.security.http.ssl.enabled: false</span><br><span class="line"></span><br><span class="line">xpack.security.transport.ssl:</span><br><span class="line">  enabled: true</span><br><span class="line">  verification_mode: certificate</span><br><span class="line">  keystore.path: certs/transport.p12</span><br><span class="line">  truststore.path: certs/transport.p12</span><br></pre></td></tr></table></figure>
<p>使用以上配置后，请求必须进行认证才能请求 Elasticsearch，否则默认返回 401。未启用 HTTPS，可以使用 HTTP 请求。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl localhost:9200/?pretty</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;error&quot; : &#123;</span><br><span class="line">    &quot;root_cause&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">        &quot;reason&quot; : &quot;missing authentication credentials for REST request [/?pretty]&quot;,</span><br><span class="line">        &quot;header&quot; : &#123;</span><br><span class="line">          &quot;WWW-Authenticate&quot; : [</span><br><span class="line">            &quot;ApiKey&quot;,</span><br><span class="line">            &quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">    &quot;reason&quot; : &quot;missing authentication credentials for REST request [/?pretty]&quot;,</span><br><span class="line">    &quot;header&quot; : &#123;</span><br><span class="line">      &quot;WWW-Authenticate&quot; : [</span><br><span class="line">        &quot;ApiKey&quot;,</span><br><span class="line">        &quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot; : 401</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置节点属性及类型"><a href="#配置节点属性及类型" class="headerlink" title="配置节点属性及类型"></a>配置节点属性及类型</h2><p>在 Elasticsearch 8 中，可以使用节点属性（node attributes）来指定节点的角色。节点属性是一组键值对，用于描述节点的特性和功能。通过为节点设置适当的属性，可以将其标记为特定的角色。</p>
<figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">node.attr.&lt;attribute_name&gt;: &lt;attribute_value&gt;</span><br></pre></td></tr></table></figure>
<p>例如要配置节点为 master ，可以使用以下配置</p>
<figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">node.attr.master: true</span><br></pre></td></tr></table></figure>

<p>另一种方式是使用节点类型（node type）进行配置。节点类型是 Elasticsearch 8 中引入的一种更高级别的概念，用于自动分配节点的角色。</p>
<p>在 Elasticsearch 8 中，可以使用以下配置项将节点配置为特定的类型：</p>
<figure class="highlight shell"><figcaption><span>elasticsearch.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">node.roles: [&quot;&lt;role_1&gt;&quot;, &quot;&lt;role_2&gt;&quot;, ...]</span><br></pre></td></tr></table></figure>
<p>例如，要将节点配置为主节点（<code>master</code>）角色或者 <code>data</code> 角色，可以使用以下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node.roles: [&quot;master&quot;]</span><br><span class="line"></span><br><span class="line">node.roles: [&quot;data&quot;]</span><br></pre></td></tr></table></figure>

<h2 id="JVM-配置"><a href="#JVM-配置" class="headerlink" title="JVM 配置"></a>JVM 配置</h2><p>默认情况下，Elasticsearch 根据主机的 <code>roles</code> 和总内存大小自动设置 JVM heap size，如果要更改此值，修改 JVM 配置中的 <code>Xms</code> 和 <code>Xmx</code>，<em><strong>这2个值必须一样</strong></em></p>
<figure class="highlight shell"><figcaption><span>jvm.options</span></figcaption><table><tr><td class="code"><pre><span class="line">-Xms2g</span><br><span class="line">-Xmx2g</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>heap size</code> 需要根据可用的 RAM 来配置 <sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Set the heap size](https://www.elastic.co/guide/en/elasticsearch/reference/current/advanced-configuration.html#set-jvm-heap-size)">[9]</span></a></sup></p>
<ul>
<li><code>Xms</code> 和 <code>Xmx</code> 不要超过可用内存的 50%</li>
</ul>
<h3 id="JVM-heap-dump-path"><a href="#JVM-heap-dump-path" class="headerlink" title="JVM heap dump path"></a>JVM heap dump path</h3><p>默认情况下，Elasticsearch 配置 JVM 在发生 <code>out of memory</code> 异常时 dump 内存栈信息到数据目录(<code>path.data</code>)。如果要更改此配置，可以修改以下 JVM 配置</p>
<figure class="highlight shell"><figcaption><span>jvm.options</span></figcaption><table><tr><td class="code"><pre><span class="line">-XX:HeapDumpPath=/tmp/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="GC-logging-settings"><a href="#GC-logging-settings" class="headerlink" title="GC logging settings"></a>GC logging settings</h3><p>默认情况下，Elasticsearch 启用了 GC (<code>garbage collection</code>) 日志，此配置位于 JVM 并配置为输出日志到 Elasticsearch 日志路径中(<code>path.logs</code>)</p>
<p>要修改此路径，首先需要禁用日志，使用配置 <code>-Xlog:disable</code>，并指定自定义路径</p>
<figure class="highlight shell"><figcaption><span>jvm.options</span></figcaption><table><tr><td class="code"><pre><span class="line">-Xlog:disable</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Default settings from JEP 158, but with `utctime` instead of `<span class="built_in">uptime</span>` to match the next line</span></span><br><span class="line">-Xlog:all=warning:stderr:utctime,level,tags</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable GC logging to a custom location with a variety of options</span></span><br><span class="line">-Xlog:gc*,gc+age=trace,safepoint:file=/opt/my-app/gc.log:utctime,level,pid,tags:filecount=32,filesize=64m</span><br></pre></td></tr></table></figure>



<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html">elastic 官网介绍</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lucene.apache.org/core/">Apache Lucene</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_document_oriented.html#_document_oriented">面向文档</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_indexing_employee_documents.html">索引</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html#index-doc">索引文档</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/get-doc.html">取回一个文档</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/multi-index-multi-type.html#multi-index-multi-type">多索引</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/pagination.html#pagination">分页</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html">重要配置项</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/advanced-configuration.html#set-jvm-heap-size">Set the heap size</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-settings.html#secure-settings">安全相关配置</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.8/auditing-settings.html">Auditing settings</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.8/configuring-stack-security.html#configuring-stack-security">启用安全特性启动 Elasticsearch</a><a href="#fnref:12" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch 常用 endpoint</title>
    <url>/202307281032/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>elasticsearch 8.8.2</li>
</ul>
<h1 id="集群状态"><a href="#集群状态" class="headerlink" title="集群状态"></a>集群状态</h1><h2 id="查看集群健康状态"><a href="#查看集群健康状态" class="headerlink" title="查看集群健康状态"></a>查看集群健康状态</h2><p>Elasticsearch 的集群监控信息中包含了许多的统计数据，其中最为重要的一项就是 <em><strong>集群健康</strong></em> ， 它在 <code>status</code> 字段中展示为 <code>green</code> 、 <code>yellow</code> 或者 <code>red</code> 。</p>
<ul>
<li><code>green</code> - 所有的主分片和副分片都正常运行</li>
<li><code>yellow</code> - 所有主分片都正常运行，但<strong>不是所有的副本分片都正常运行</strong></li>
<li><code>red</code> - <strong>有主分片没能正常运行</strong></li>
</ul>
<blockquote>
<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_add-an-index.html"><code>分片</code> 概念说明</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;http://localhost:9200/_cluster/health&#x27;</span></span></span><br><span class="line">&#123;&quot;cluster_name&quot;:&quot;elasticsearch&quot;,&quot;status&quot;:&quot;green&quot;,&quot;timed_out&quot;:false,&quot;number_of_nodes&quot;:1,&quot;number_of_data_nodes&quot;:1,&quot;active_primary_shards&quot;:1,&quot;active_shards&quot;:1,&quot;relocating_shards&quot;:0,&quot;initializing_shards&quot;:0,&quot;unassigned_shards&quot;:0,&quot;delayed_unassigned_shards&quot;:0,&quot;number_of_pending_tasks&quot;:0,&quot;number_of_in_flight_fetch&quot;:0,&quot;task_max_waiting_in_queue_millis&quot;:0,&quot;active_shards_percent_as_number&quot;:100.0&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;http://localhost:9200/_cluster/health?pretty&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;status&quot; : &quot;green&quot;,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;number_of_nodes&quot; : 1,</span><br><span class="line">  &quot;number_of_data_nodes&quot; : 1,</span><br><span class="line">  &quot;active_primary_shards&quot; : 1,</span><br><span class="line">  &quot;active_shards&quot; : 1,</span><br><span class="line">  &quot;relocating_shards&quot; : 0,</span><br><span class="line">  &quot;initializing_shards&quot; : 0,</span><br><span class="line">  &quot;unassigned_shards&quot; : 0,</span><br><span class="line">  &quot;delayed_unassigned_shards&quot; : 0,</span><br><span class="line">  &quot;number_of_pending_tasks&quot; : 0,</span><br><span class="line">  &quot;number_of_in_flight_fetch&quot; : 0,</span><br><span class="line">  &quot;task_max_waiting_in_queue_millis&quot; : 0,</span><br><span class="line">  &quot;active_shards_percent_as_number&quot; : 100.0</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="查看集群节点信息"><a href="#查看集群节点信息" class="headerlink" title="查看集群节点信息"></a>查看集群节点信息</h2><p>使用 <code>_cat/nodes</code> API 可以获取集群中所有节点的信息，包括它们的 IP 地址、堆内存使用情况、CPU 使用情况等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -u elastic:XhScf5Jqw -XGET <span class="string">&#x27;http://172.31.25.229:9200/_cat/nodes?pretty&#x27;</span></span></span><br><span class="line">172.31.25.229 58 98  9 1.86 2.27 2.36 dilm    - node-1</span><br><span class="line">172.31.30.249 54 98 10 2.05 2.12 2.30 dilm    - node-2</span><br><span class="line">172.31.21.225 65 91  0 0.00 0.04 0.05 dfilmrt * node-3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -u elastic:XhScf5Jqw -XGET <span class="string">&#x27;http://172.31.25.229:9200/_cat/nodes?v&#x27;</span></span></span><br><span class="line">ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">172.31.25.229           51          99  10    2.11    2.33     2.37 dilm      -      node-1</span><br><span class="line">172.31.30.249           49          99   9    1.96    2.06     2.25 dilm      -      node-2</span><br><span class="line">172.31.21.225           40          91   0    0.03    0.04     0.05 dfilmrt   *      node-3</span><br></pre></td></tr></table></figure>

<p>输出信息说明</p>
<ul>
<li><code>heap.percent</code> - JVM 堆内存使用的百分比。这是节点分配给 Java 虚拟机堆的内存使用量的百分比。</li>
<li><code>ram.percent</code> - 节点的物理内存（RAM）使用率的百分比</li>
<li><code>cpu</code> - 节点的CPU使用率百分比</li>
<li><code>node.role</code> - 节点的角色。各个字母含义如下<ul>
<li><code>d</code> - 代表数据节点 Data Node。负责存储数据，执行与数据相关的操作，如 CRUD（创建、读取、更新、删除）、搜索和聚合。</li>
<li><code>i</code> - 代表摄取节点 Ingest Node。用于预处理文档，然后再将其索引到 Elasticsearch 中，它们可以运行摄取管道，这些管道可以执行各种转换，如提取数据、转换数据格式、添加信息等。</li>
<li><code>l</code> - 代表机器学习节点 Machine Learning Node。机器学习节点专门用于运行Elasticsearch的机器学习功能，它们可以分析数据，识别模式，执行异常检测等。</li>
<li><code>m</code> - 代表主节点 Master Node。主节点负责管理集群的全局状态，例如哪些索引存在，哪个节点是哪个索引的一部分等，它们还负责集群重新分片、索引创建、删除等操作。</li>
<li><code>r</code> - 代表远程集群客户端节点 Remote Cluster Client Node。这些节点用于连接到远程集群，它们使得可以从一个集群中执行跨集群搜索和其他操作</li>
<li><code>t</code> - 代表转换节点 Transform Node。转换节点用于运行 Elasticsearch 中的转换任务，这些任务可以将现有的 Elasticsearch 索引数据重新整理和汇总成新的索引。</li>
</ul>
</li>
<li><code>*</code> - 表示这个节点是当前的主节点。</li>
</ul>
<p>使用 <code>_nodes/stats</code> 查看集群中所有节点的详细状态和统计信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -u elastic:XhScf5JqwVsSQwHe -XGET <span class="string">&#x27;http://172.31.25.229:9200/_nodes/stats?pretty&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_nodes&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 3,</span><br><span class="line">    &quot;successful&quot; : 3,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;es-cluster&quot;,</span><br><span class="line">  &quot;nodes&quot; : &#123;</span><br><span class="line">    &quot;TrQqg_8HTDiKBt6t8Z1JVw&quot; : &#123;</span><br><span class="line">      &quot;timestamp&quot; : 1699941330544,</span><br><span class="line">      &quot;name&quot; : &quot;node-1&quot;,</span><br><span class="line">      &quot;transport_address&quot; : &quot;172.31.25.229:9300&quot;,</span><br><span class="line">      &quot;host&quot; : &quot;172.31.25.229&quot;,</span><br><span class="line">      &quot;ip&quot; : &quot;172.31.25.229:9300&quot;,</span><br><span class="line">      &quot;roles&quot; : [</span><br><span class="line">        &quot;ingest&quot;,</span><br><span class="line">        &quot;master&quot;,</span><br><span class="line">        &quot;data&quot;,</span><br><span class="line">        &quot;ml&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;attributes&quot; : &#123;</span><br><span class="line">        &quot;ml.machine_memory&quot; : &quot;133483876352&quot;,</span><br><span class="line">        &quot;xpack.installed&quot; : &quot;true&quot;,</span><br><span class="line">        &quot;ml.max_open_jobs&quot; : &quot;20&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;indices&quot; : &#123;</span><br><span class="line">        &quot;docs&quot; : &#123;</span><br><span class="line">          &quot;count&quot; : 1725702315,</span><br><span class="line">          &quot;deleted&quot; : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;store&quot; : &#123;</span><br><span class="line">          &quot;size_in_bytes&quot; : 1766657662877</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;indexing&quot; : &#123;</span><br><span class="line">          &quot;index_total&quot; : 28053218,</span><br><span class="line">          &quot;index_time_in_millis&quot; : 6610781,</span><br><span class="line">          &quot;index_current&quot; : 1,</span><br><span class="line">          &quot;index_failed&quot; : 0,</span><br><span class="line">          &quot;delete_total&quot; : 0,</span><br><span class="line">          &quot;delete_time_in_millis&quot; : 0,</span><br><span class="line">          &quot;delete_current&quot; : 0,</span><br><span class="line">          &quot;noop_update_total&quot; : 0,</span><br><span class="line">          &quot;is_throttled&quot; : false,</span><br><span class="line">          &quot;throttle_time_in_millis&quot; : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>参考以下命令查看指定节点的详细状态和统计信息，Endpoint 格式参考 <code>_nodes/&#123;nodeId&#125;/stats?pretty</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -u elastic:XhScf5JqwVsSQwHe -XGET <span class="string">&#x27;http://172.31.25.229:9200/_nodes/TrQqg_8HTDiKBt6t8Z1JVw/stats?pretty&#x27;</span></span> </span><br><span class="line">&#123;</span><br><span class="line">  &quot;_nodes&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;es-cluster&quot;,</span><br><span class="line">  &quot;nodes&quot; : &#123;</span><br><span class="line">    &quot;TrQqg_8HTDiKBt6t8Z1JVw&quot; : &#123;</span><br><span class="line">      &quot;timestamp&quot; : 1699941591263,</span><br><span class="line">      &quot;name&quot; : &quot;node-1&quot;,</span><br><span class="line">      &quot;transport_address&quot; : &quot;172.31.25.229:9300&quot;,</span><br><span class="line">      &quot;host&quot; : &quot;172.31.25.229&quot;,</span><br><span class="line">      &quot;ip&quot; : &quot;172.31.25.229:9300&quot;,</span><br><span class="line">      &quot;roles&quot; : [</span><br><span class="line">        &quot;ingest&quot;,</span><br><span class="line">        &quot;master&quot;,</span><br><span class="line">        &quot;data&quot;,</span><br><span class="line">        &quot;ml&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;attributes&quot; : &#123;</span><br><span class="line">        &quot;ml.machine_memory&quot; : &quot;133483876352&quot;,</span><br><span class="line">        &quot;xpack.installed&quot; : &quot;true&quot;,</span><br><span class="line">        &quot;ml.max_open_jobs&quot; : &quot;20&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;indices&quot; : &#123;</span><br><span class="line">        &quot;docs&quot; : &#123;</span><br><span class="line">          &quot;count&quot; : 1726608289,</span><br><span class="line">          &quot;deleted&quot; : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;store&quot; : &#123;</span><br><span class="line">          &quot;size_in_bytes&quot; : 1768415039992</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;indexing&quot; : &#123;</span><br><span class="line">          &quot;index_total&quot; : 29016441,</span><br><span class="line">          &quot;index_time_in_millis&quot; : 6829570,</span><br><span class="line">          &quot;index_current&quot; : 0,</span><br><span class="line">          &quot;index_failed&quot; : 0,</span><br><span class="line">          &quot;delete_total&quot; : 0,</span><br><span class="line">          &quot;delete_time_in_millis&quot; : 0,</span><br><span class="line">          &quot;delete_current&quot; : 0,</span><br><span class="line">          &quot;noop_update_total&quot; : 0,</span><br><span class="line">          &quot;is_throttled&quot; : false,</span><br><span class="line">          &quot;throttle_time_in_millis&quot; : 0</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="获取集群级别的信息和统计数据"><a href="#获取集群级别的信息和统计数据" class="headerlink" title="获取集群级别的信息和统计数据"></a>获取集群级别的信息和统计数据</h2><p><code>/?pretty</code> 参数的主要作用为通过<strong>添加缩进和换行增强输出的可读性</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;http://localhost:9200/?pretty&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;b5f96e32c638&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;UAiC0qVVT-Ov4nJFvoE1HA&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;8.8.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;tar&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;98e1271edf932a480e4262a471281f1ee295ce6b&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2023-06-26T05:16:16.196344851Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;9.6.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;7.17.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;7.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="索引及文档管理"><a href="#索引及文档管理" class="headerlink" title="索引及文档管理"></a>索引及文档管理</h1><h2 id="创建或者添加索引"><a href="#创建或者添加索引" class="headerlink" title="创建或者添加索引"></a>创建或者添加索引</h2><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_indexing_employee_documents.html"><strong>索引概念说明</strong></a>。<strong>索引(<code>index</code>)</strong> 在 Elasticsearch 中有多个含义 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[索引](https://www.elastic.co/guide/cn/elasticsearch/guide/current/_indexing_employee_documents.html)">[3]</span></a></sup></p>
<ul>
<li><p><code>索引（名词）</code>：</p>
<p>  一个 <strong>索引(<code>index</code>)</strong> 类似于传统关系数据库中的一个 <em>数据库</em> ，是一个存储关系型文档的地方。 <code>索引 (index)</code> 的复数词为 <code>indices</code> 或 <code>indexes</code>。</p>
</li>
<li><p><code>索引（动词）</code>：</p>
<p>  <em>索引一个文档</em> 就是存储一个文档到一个 <code>索引 （名词）</code>中以便被检索和查询。这非常类似于 SQL 语句中的 <code>INSERT</code> 关键词，除了文档已存在时，新文档会替换旧文档情况之外。</p>
</li>
<li><p><code>倒排索引</code>：</p>
<p>  关系型数据库通过增加一个 <strong>索引</strong> 比如一个 <code>B树（B-tree）索引</code> 到指定的列上，以便提升数据检索速度。Elasticsearch 和 Lucene 使用了一个叫做 <strong>倒排索引</strong> 的结构来达到相同的目的。</p>
</li>
</ul>
<p>使用以下 url 可以添加名为 <code>blogs</code> 的索引。在索引建立的时候就已经确定了<strong>主分片数</strong>，但是副分片数可以随时修改。<em><strong>索引在默认情况下会被分配 5 个主分片</strong></em>。以下示例演示了创建 3 个主分片和一份副本（每个主分片拥有一个副本）的 index</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PUT /blogs</span><br><span class="line">&#123;</span><br><span class="line">   &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;number_of_shards&quot; : 3,</span><br><span class="line">      &quot;number_of_replicas&quot; : 1</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>curl</code> 命令操作如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -X PUT <span class="string">&#x27;localhost:9200/blogs&#x27;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;settings&quot;: &#123;&quot;number_of_shards&quot;: 3, &quot;number_of_replicas&quot;: 1&#125;&#125;&#x27;</span></span></span><br><span class="line">&#123;&quot;acknowledged&quot;:true,&quot;shards_acknowledged&quot;:true,&quot;index&quot;:&quot;blogs&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>重新查看集群 <em>健康状态</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;localhost:9200/_cluster/health/?pretty&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;status&quot; : &quot;yellow&quot;,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;number_of_nodes&quot; : 1,</span><br><span class="line">  &quot;number_of_data_nodes&quot; : 1,</span><br><span class="line">  &quot;active_primary_shards&quot; : 4,</span><br><span class="line">  &quot;active_shards&quot; : 4,</span><br><span class="line">  &quot;relocating_shards&quot; : 0,</span><br><span class="line">  &quot;initializing_shards&quot; : 0,</span><br><span class="line">  &quot;unassigned_shards&quot; : 3,</span><br><span class="line">  &quot;delayed_unassigned_shards&quot; : 0,</span><br><span class="line">  &quot;number_of_pending_tasks&quot; : 0,</span><br><span class="line">  &quot;number_of_in_flight_fetch&quot; : 0,</span><br><span class="line">  &quot;task_max_waiting_in_queue_millis&quot; : 0,</span><br><span class="line">  &quot;active_shards_percent_as_number&quot; : 57.14285714285714</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>集群状态为 <code>yellow</code>。表示所有<strong>主分片</strong>都正常运行，但是 <em>副本分片</em>没有全部处于正常状态。本示例中使用的单节点集群，因此所有副本都处于 <code>unassigned_shards</code> 状态。</p>
<h2 id="调整分片的副本数量"><a href="#调整分片的副本数量" class="headerlink" title="调整分片的副本数量"></a>调整分片的副本数量</h2><p>在运行中的集群上是可以动态调整副本分片数目的，我们可以按需伸缩集群</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PUT /blogs/_settings</span><br><span class="line">&#123;</span><br><span class="line">   &quot;number_of_replicas&quot; : 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查看集群中所有的索引"><a href="#查看集群中所有的索引" class="headerlink" title="查看集群中所有的索引"></a>查看集群中所有的索引</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -u elastic:password1 -XGET <span class="string">&quot;http://localhost:9200/_cat/indices?pretty&quot;</span></span></span><br><span class="line">green open .fleet-file-data-endpoint-000001                             HvLnz66ATPu3y-V7_LWiGw 1 1   0 0   494b   247b</span><br><span class="line">green open .internal.alerts-observability.logs.alerts-default-000001    qLVSX-3jTNSEJ5TUei8xeg 1 1   0 0   494b   247b</span><br><span class="line">green open .internal.alerts-observability.metrics.alerts-default-000001 No3BDeiPSS-Fc9VLC1_Bmw 1 1   0 0   494b   247b</span><br><span class="line">green open .fleet-file-data-agent-000001                                8bD6W2sVROuRew13axuZtA 1 1   0 0   494b   247b</span><br><span class="line">green open metrics-endpoint.metadata_current_default                    BGeiP6xhT2ChBVlgGBDrGQ 1 1   0 0   494b   247b</span><br><span class="line">green open .internal.alerts-observability.slo.alerts-default-000001     8mwwuFYZRoKhEwnZgP-fAg 1 1   0 0   494b   247b</span><br><span class="line">green open .fleet-files-agent-000001                                    IPWzmYjyTCicpe92zEXVwg 1 1   0 0   494b   247b</span><br><span class="line">green open .ds-filebeat-8.8.2-2023.07.28-000001                         U3A3AD3-R2KjiYXJaApgRQ 1 1 100 0 62.2kb 31.1kb</span><br><span class="line">green open .fleet-files-endpoint-000001                                 NTH-qwe1R6aPNLZKoHu8Yg 1 1   0 0   494b   247b</span><br><span class="line">green open .internal.alerts-security.alerts-default-000001              FnDUGt2SQN2qd4aztKtYXQ 1 1   0 0   494b   247b</span><br><span class="line">green open .internal.alerts-observability.apm.alerts-default-000001     l-nS3wQtQ3KptM4b93mosA 1 1   0 0   494b   247b</span><br><span class="line">green open .internal.alerts-observability.uptime.alerts-default-000001  VD8sDy64TZSWW2ArhdrSjQ 1 1   0 0   494b   247b</span><br></pre></td></tr></table></figure>

<h2 id="索引文档"><a href="#索引文档" class="headerlink" title="索引文档"></a>索引文档</h2><p>我们可以提供自定义的 <code>_id</code> 值，或者让 <code>index</code> API 自动生成。 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[索引文档](https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html#index-doc)">[4]</span></a></sup></p>
<h3 id="使用自定义-ID-索引文档"><a href="#使用自定义-ID-索引文档" class="headerlink" title="使用自定义 ID 索引文档"></a>使用自定义 ID 索引文档</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PUT /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field&quot;: &quot;value&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举个例子，如果我们的索引称为 website ，类型称为 blog ，并且选择 123 作为 ID ，那么索引请求应该是下面这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -X PUT <span class="string">&#x27;localhost:9200/website/_doc/123?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="string">&#x27;&#123;</span></span></span><br><span class="line">  &quot;title&quot;: &quot;My first blog entry&quot;,</span><br><span class="line">  &quot;text&quot;:  &quot;Just trying this out...&quot;,</span><br><span class="line">  &quot;date&quot;:  &quot;2014/01/01&quot;</span><br><span class="line">&#125;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Elasticsearch 响应体如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;123&quot;,</span><br><span class="line">  &quot;_version&quot; : 2,</span><br><span class="line">  &quot;result&quot; : &quot;updated&quot;,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_seq_no&quot; : 1,</span><br><span class="line">  &quot;_primary_term&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>新版本中已经没有了 <code>&#123;type&#125;</code>  概念，已经废弃，可以使用 <code>_doc</code> 代替。否则报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -X PUT <span class="string">&#x27;localhost:9200/website/blog/123&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="string">&#x27;&#123;</span></span></span><br><span class="line">  &quot;title&quot;: &quot;My first blog entry&quot;,</span><br><span class="line">  &quot;text&quot;:  &quot;Just trying this out...&quot;,</span><br><span class="line">  &quot;date&quot;:  &quot;2014/01/01&quot;</span><br><span class="line">&#125;&#x27;</span><br><span class="line">&#123;&quot;error&quot;:&quot;no handler found for uri [/website/blog/123] and method [PUT]&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="Elasticsearch-自动生成-ID"><a href="#Elasticsearch-自动生成-ID" class="headerlink" title="Elasticsearch 自动生成 ID"></a>Elasticsearch 自动生成 ID</h3><p>如果你的数据没有自然的 ID， Elasticsearch 可以帮我们自动生成 ID 。 请求的结构调整为： 不再使用 <code>PUT</code> (<code>用这个 URL 存储这个文档</code>)， 而是使用 <code>POST</code> (<code>存储文档在这个 URL 命名空间下</code>)。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -X POST <span class="string">&#x27;localhost:9200/website/_doc/?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="string">&#x27;&#123;</span></span></span><br><span class="line">  &quot;title&quot;: &quot;My first blog entry&quot;,</span><br><span class="line">  &quot;text&quot;:  &quot;Just trying this out...&quot;,</span><br><span class="line">  &quot;date&quot;:  &quot;2014/01/01&quot;</span><br><span class="line">&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>除了 <code>_id</code> 是 Elasticsearch 自动生成的，响应的其他部分和 <a href="#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89-ID-%E7%B4%A2%E5%BC%95%E6%96%87%E6%A1%A3"><em>使用自定义 ID 索引文档</em></a> 的类似：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;E6bZZ4kB3MyoSII6u2fy&quot;,</span><br><span class="line">  &quot;_version&quot; : 1,</span><br><span class="line">  &quot;result&quot; : &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_seq_no&quot; : 2,</span><br><span class="line">  &quot;_primary_term&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="取回一个文档"><a href="#取回一个文档" class="headerlink" title="取回一个文档"></a>取回一个文档</h2><p>为了从 Elasticsearch 中检索出文档，我们仍然使用相同的 <code>_index</code> , <code>_type</code> , 和 <code>_id</code> ，但是 HTTP 方法更改为 <code>GET</code> <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[取回一个文档](https://www.elastic.co/guide/cn/elasticsearch/guide/current/get-doc.html)">[5]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"> curl <span class="string">&#x27;localhost:9200/website/_doc/123?pretty&#x27;</span></span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;123&quot;,</span><br><span class="line">  &quot;_version&quot; : 2,</span><br><span class="line">  &quot;_seq_no&quot; : 1,</span><br><span class="line">  &quot;_primary_term&quot; : 1,</span><br><span class="line">  &quot;found&quot; : true,</span><br><span class="line">  &quot;_source&quot; : &#123;</span><br><span class="line">    &quot;title&quot; : &quot;My first blog entry&quot;,</span><br><span class="line">    &quot;text&quot; : &quot;Just trying this out...&quot;,</span><br><span class="line">    &quot;date&quot; : &quot;2014/01/01&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>响应体中 <code>found</code> 字段为 <code>true</code> 表示文档已经被找到， 如果我们请求一个不存在的文档，我们仍旧会得到一个 JSON 响应体，但是 <code>found</code> 将会是 <code>false</code> 。 此外， HTTP 响应码将会是 <code>404 Not Found</code> ，而不是 <code>200 OK</code></p>
<p>默认情况下，Elasticsearch 将会返回整个 <code>Document (文档)</code> ，也可以不获取整个 <code>Document (文档)</code> 而只是获取其中的一部分内容，要实现此功能，可以使用查询参数 <code>_source=title,text</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;localhost:9200/website/_doc/123?pretty&amp;_source=title,text&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;123&quot;,</span><br><span class="line">  &quot;_version&quot; : 2,</span><br><span class="line">  &quot;_seq_no&quot; : 1,</span><br><span class="line">  &quot;_primary_term&quot; : 1,</span><br><span class="line">  &quot;found&quot; : true,</span><br><span class="line">  &quot;_source&quot; : &#123;</span><br><span class="line">    &quot;title&quot; : &quot;My first blog entry&quot;,</span><br><span class="line">    &quot;text&quot; : &quot;Just trying this out...&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>或者，如果你只想得到 _source 字段，不需要任何元数据，你能使用 _source 端点：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">GET /website/blog/123/_source</span></span><br><span class="line">&#123;</span><br><span class="line">   &quot;title&quot;: &quot;My first blog entry&quot;,</span><br><span class="line">   &quot;text&quot;:  &quot;Just trying this out...&quot;,</span><br><span class="line">   &quot;date&quot;:  &quot;2014/01/01&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此方法新版本(elasticsearch 8.8.2)不存在</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;localhost:9200/website/_doc/123/_source&#x27;</span></span></span><br><span class="line">&#123;&quot;error&quot;:&quot;no handler found for uri [/website/_doc/123/_source] and method [GET]&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="获取-Elasticsearch-中所有的文档"><a href="#获取-Elasticsearch-中所有的文档" class="headerlink" title="获取 Elasticsearch 中所有的文档"></a>获取 Elasticsearch 中所有的文档</h2><p>获取 Elasticsearch 中所有的 文档(<code>document</code>)，使用以下 <code>_search</code> 查询</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;localhost:9200/_search?pretty&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 2,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 4,</span><br><span class="line">    &quot;successful&quot; : 4,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 4,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;123&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;My first blog entry&quot;,</span><br><span class="line">          &quot;text&quot; : &quot;Just trying this out...&quot;,</span><br><span class="line">          &quot;date&quot; : &quot;2014/01/01&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;E6bZZ4kB3MyoSII6u2fy&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;My first blog entry&quot;,</span><br><span class="line">          &quot;text&quot; : &quot;Just trying this out...&quot;,</span><br><span class="line">          &quot;date&quot; : &quot;2014/01/01&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123; &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;blogs&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;test post&quot;,</span><br><span class="line">          &quot;content&quot; : &quot;test post&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出结果中</p>
<ul>
<li><code>hits</code> - 包含查询到的所有文档信息</li>
<li><code>hits.total</code> - 表示匹配到的文档总数</li>
<li><code>hits.hits</code> - 数组，包含了查询结果中的前 10 个文档。每个数组包含了 <code>Document (文档)</code> 的 <code>_index</code>、<code>_id</code>、<code>_source</code> 字段。</li>
<li><code>hits.hits[*]._score</code> - 每个数组包含了一个 <code>_score</code> 值，它衡量了文档和查询的匹配程度。默认情况下，首先返回最相关的文档，就是说，<strong>返回结果是按照 <code>_score</code> 降序排列的。</strong></li>
<li><code>took</code> - 表示整个搜索请求耗费了多少 ms</li>
<li><code>_shards</code> - 这部分记录了此次查询中参与的分片的总数，以及这些分片成功了多少，失败了多少。</li>
<li><code>timed_out</code> - 表示查询是否超时，默认情况下，搜索请求不会超时。如果<em><strong>低响应时间更重要</strong></em>，可以使用 <code>/_search?timeout=10ms</code> 方式指定搜索的超时时间。</li>
</ul>
<h2 id="获取指定索引下的所有文档"><a href="#获取指定索引下的所有文档" class="headerlink" title="获取指定索引下的所有文档"></a>获取指定索引下的所有文档</h2><p>要获取指定索引(<code>index</code>) 下的所有文档(<code>document</code>)，使用 <code>_search</code> 方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;localhost:9200/website/_search?pretty&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 1,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 3,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;123&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;My first blog entry&quot;,</span><br><span class="line">          &quot;text&quot; : &quot;Just trying this out...&quot;,</span><br><span class="line">          &quot;date&quot; : &quot;2014/01/01&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;E6bZZ4kB3MyoSII6u2fy&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;My first blog entry&quot;,</span><br><span class="line">          &quot;text&quot; : &quot;Just trying this out...&quot;,</span><br><span class="line">          &quot;date&quot; : &quot;2014/01/01&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="获取多个指定索引下的所有文档"><a href="#获取多个指定索引下的所有文档" class="headerlink" title="获取多个指定索引下的所有文档"></a>获取多个指定索引下的所有文档</h2><p>有时候不想列出 Elasticsearch 中的所有文档，又需要一次性列出多个索引(<code>index</code>) 中的 <code>Document (文档)</code>。此时可以使用 Elasticsearch 的 <em><strong>多索引搜索</strong></em> 功能 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[多索引](https://www.elastic.co/guide/cn/elasticsearch/guide/current/multi-index-multi-type.html#multi-index-multi-type)">[6]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl <span class="string">&#x27;localhost:9200/website,blogs/_search?pretty&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 2,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 4,</span><br><span class="line">    &quot;successful&quot; : 4,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 4,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;123&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;My first blog entry&quot;,</span><br><span class="line">          &quot;text&quot; : &quot;Just trying this out...&quot;,</span><br><span class="line">          &quot;date&quot; : &quot;2014/01/01&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;E6bZZ4kB3MyoSII6u2fy&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;My first blog entry&quot;,</span><br><span class="line">          &quot;text&quot; : &quot;Just trying this out...&quot;,</span><br><span class="line">          &quot;date&quot; : &quot;2014/01/01&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123; &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;blogs&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;test post&quot;,</span><br><span class="line">          &quot;content&quot; : &quot;test post&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>相关 API 格式汇总 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[多索引](https://www.elastic.co/guide/cn/elasticsearch/guide/current/multi-index-multi-type.html#multi-index-multi-type)">[6]</span></a></sup></p>
<ul>
<li><code>/_search</code>   在所有的索引中搜索所有的文档</li>
<li><code>/gb/_search</code>  在 <code>gb</code> 索引中搜索所有的文档</li>
<li><code>/gb,us/_search</code>  在 <code>gb</code> 和 <code>us</code> 索引中搜索所有的文档</li>
<li><code>/g*,u*/_search</code>   在任何以 <code>g</code> 或者 <code>u</code> 开头的索引中搜索所有的文档</li>
<li><code>/_all/_search</code> 在所有的索引中搜索</li>
</ul>
<h2 id="分页搜索结果"><a href="#分页搜索结果" class="headerlink" title="分页搜索结果"></a>分页搜索结果</h2><p>搜索默认返回最前面的 10 个结果，如果要自定义返回的结果数，可以使用以下查询参数 <sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[分页](https://www.elastic.co/guide/cn/elasticsearch/guide/current/pagination.html#pagination)">[7]</span></a></sup></p>
<ul>
<li><code>size</code> - 显示返回结果的数量，默认为 10</li>
<li><code>from</code> - 显示应该跳过的初始结果数量，默认为 0</li>
</ul>
<p>如果每页展示 5 条结果，可以用下面的方式请求得到 1 到 3 页的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET /_search?size=5</span><br><span class="line">GET /_search?size=5&amp;from=5</span><br><span class="line">GET /_search?size=5&amp;from=10</span><br></pre></td></tr></table></figure>


<h2 id="检查文档是否存在"><a href="#检查文档是否存在" class="headerlink" title="检查文档是否存在"></a>检查文档是否存在</h2><p>如果只想知道一个 <code>Document (文档)</code> 是否存在，而不关心其内容，那么用 <code>HEAD</code> 方法代替 <code>GET</code> 方法，<code>HEAD</code> 方法只返回头部，不返回 HTTP body 内容</p>
<p>如果 <code>Document (文档)</code> 存在，返回 <code>200 OK</code>，不存在则返回 <code>404 Not Found</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">$  curl -v -X HEAD <span class="string">&#x27;localhost:9200/blogs/_doc/1&#x27;</span></span></span><br><span class="line">* About to connect() to localhost port 9200 (#0)</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* Connected to localhost (127.0.0.1) port 9200 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HEAD /blogs/_doc/1 HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: localhost:9200</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 200 OK</span></span><br><span class="line">&lt; X-elastic-product: Elasticsearch</span><br><span class="line">&lt; content-type: application/json</span><br><span class="line">&lt; content-length: 147</span><br><span class="line">&lt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v -X HEAD <span class="string">&#x27;localhost:9200/blogs/_doc/11&#x27;</span></span></span><br><span class="line">* About to connect() to localhost port 9200 (#0)</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* Connected to localhost (127.0.0.1) port 9200 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HEAD /blogs/_doc/11 HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: localhost:9200</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 404 Not Found</span></span><br><span class="line">&lt; X-elastic-product: Elasticsearch</span><br><span class="line">&lt; content-type: application/json</span><br><span class="line">&lt; content-length: 43</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="获取文档中指定的字段"><a href="#获取文档中指定的字段" class="headerlink" title="获取文档中指定的字段"></a>获取文档中指定的字段</h2><p>如果只想获取文档中指定的字段，而不是所有字段，可以使用 <code>_source_includes</code> 查询参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GET /log-8.8.2-2023.08.02/_search?size=10000&amp;_source_includes=dissect.hostname,agent.name</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 178,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: &#123;</span><br><span class="line">      &quot;value&quot;: 10000,</span><br><span class="line">      &quot;relation&quot;: &quot;gte&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot;: 1,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;fm-k8s-pro-system-message-log-8.8.2-2023.08.02&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;5IHStIkBQ8H_mBHnz6Ec&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;agent&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;fm-k8s-c1-worker2&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;dissect&quot;: &#123;</span><br><span class="line">            &quot;hostname&quot;: &quot;ip-172-31-22-159&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h1 id="data-stream"><a href="#data-stream" class="headerlink" title="data stream"></a>data stream</h1><p><strong><code>data stream</code> (数据流) 是 Elasticsearch 中用于管理时间序列数据的功能，它会自动创建和管理多个索引，包括索引写入和滚动索引</strong>。<code>data stream</code> (数据流) 有一个或者多个写入索引，用于实际写入和索引数据。<em><strong>由于数据流是一种时间序列的数据存储方式，不应该直接删除写入索引</strong></em>。<em>如果想要删除一个数据流，应该通过删除整个数据流来实现，而不是单独的删除写入索引</em></p>
<h2 id="删除-data-stream"><a href="#删除-data-stream" class="headerlink" title="删除 data stream"></a>删除 data stream</h2><p>要删除一个 <code>data stream</code> (数据流)，参考以下 API</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ curl -<span class="variable constant_">XDELETE</span> <span class="attr">localhost</span>:<span class="number">9200</span>/_data_stream/logs-generic-<span class="keyword">default</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查看所有的-data-stream"><a href="#查看所有的-data-stream" class="headerlink" title="查看所有的 data stream"></a>查看所有的 data stream</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl localhost:9200/_data_stream?pretty</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;data_streams&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot; : &quot;logs-generic-default&quot;,</span><br><span class="line">      &quot;timestamp_field&quot; : &#123;</span><br><span class="line">        &quot;name&quot; : &quot;@timestamp&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;indices&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;index_name&quot; : &quot;.ds-logs-generic-default-2023.07.24-000001&quot;,</span><br><span class="line">          &quot;index_uuid&quot; : &quot;wxd_EjasSayBSu1d9GmcvA&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;generation&quot; : 1,</span><br><span class="line">      &quot;_meta&quot; : &#123;</span><br><span class="line">        &quot;description&quot; : &quot;default logs template installed by x-pack&quot;,</span><br><span class="line">        &quot;managed&quot; : true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;status&quot; : &quot;GREEN&quot;,</span><br><span class="line">      &quot;template&quot; : &quot;logs&quot;,</span><br><span class="line">      &quot;ilm_policy&quot; : &quot;logs&quot;,</span><br><span class="line">      &quot;hidden&quot; : false,</span><br><span class="line">      &quot;system&quot; : false,</span><br><span class="line">      &quot;allow_custom_routing&quot; : false,</span><br><span class="line">      &quot;replicated&quot; : false</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="user-and-role"><a href="#user-and-role" class="headerlink" title="user and role"></a>user and role</h1><h2 id="查看-Elasticsearch-中所有的用户"><a href="#查看-Elasticsearch-中所有的用户" class="headerlink" title="查看 Elasticsearch 中所有的用户"></a>查看 Elasticsearch 中所有的用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -u elastic:password1 -XGET <span class="string">&quot;http://localhost:9200/_security/user?pretty&quot;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;elastic&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;elastic&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;superuser&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;kibana&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;kibana&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;kibana_system&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_deprecated_reason&quot; : &quot;Please use the [kibana_system] user instead.&quot;,</span><br><span class="line">      &quot;_deprecated&quot; : true,</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;kibana_system&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;kibana_system&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;kibana_system&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;logstash_system&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;logstash_system&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;logstash_system&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;beats_system&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;beats_system&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;beats_system&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;apm_system&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;apm_system&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;apm_system&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;remote_monitoring_user&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;remote_monitoring_user&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;remote_monitoring_collector&quot;,</span><br><span class="line">      &quot;remote_monitoring_agent&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重置用户密码"><a href="#重置用户密码" class="headerlink" title="重置用户密码"></a>重置用户密码</h2><p><a href="https://csms.tech/202307271329/#重置用户密码">具体步骤参考</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html">elastic 官网介绍</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lucene.apache.org/core/">Apache Lucene</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_document_oriented.html#_document_oriented">面向文档</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_indexing_employee_documents.html">索引</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html#index-doc">索引文档</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/get-doc.html">取回一个文档</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/multi-index-multi-type.html#multi-index-multi-type">多索引</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/pagination.html#pagination">分页</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html">重要配置项</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/advanced-configuration.html#set-jvm-heap-size">Set the heap size</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-settings.html#secure-settings">安全相关配置</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.8/auditing-settings.html">Auditing settings</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.8/configuring-stack-security.html#configuring-stack-security">启用安全特性启动 Elasticsearch</a><a href="#fnref:12" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch 管理操作</title>
    <url>/202307271329/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>elasticsearch 8.8.2</li>
</ul>
<h1 id="安全相关配置管理"><a href="#安全相关配置管理" class="headerlink" title="安全相关配置管理"></a>安全相关配置管理</h1><h2 id="更新-transport-ssl-证书"><a href="#更新-transport-ssl-证书" class="headerlink" title="更新 transport ssl 证书"></a>更新 transport ssl 证书</h2><p>在启用安全配置（<code>xpack.security.enabled: true</code>）的情况下，Elasticsearch 集群节点间通信(<code>transport</code> 默认端口 9300)必须使用 TLS (<code>xpack.security.transport.ssl.enabled: true</code>)。默认使用的证书文件位于 <code>/etc/elasticsearch/certs/</code>。若需要更新或者重新生成此证书，可以参考以下步骤</p>
<ol>
<li>生成 CA，如果已有 CA 可跳过此步骤。此命令会生成一个 CA 证书文件，默认名称为 <code>/usr/share/elasticsearch/elastic-stack-ca.p12</code>。根据提示使用 <em>证书密码</em>，如果不配置密码，使直接<code>Enter</code> 键 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">elasticsearch-certutil ca</span><br></pre></td></tr></table></figure></li>
<li>为 Elasticsearch  生成 TLS 证书，证书使用 CA 进行签名，根据提示输入 CA 证书密码等信息，如果无密码，使直接<code>Enter</code> 键。默认生成文件 <code>/usr/share/elasticsearch/elastic-certificates.p12</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">elasticsearch-certutil cert --ca elastic-stack-ca.p12</span><br></pre></td></tr></table></figure></li>
<li>执行以下命令，将 CA 证书密码和服务器证书密码写入 <code>/etc/elasticsearch/elasticsearch.keystore</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password</span></span><br><span class="line">Setting xpack.security.transport.ssl.keystore.secure_password already exists. Overwrite? [y/N]y</span><br><span class="line">Enter value for xpack.security.transport.ssl.keystore.secure_password:</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password</span></span><br><span class="line">Setting xpack.security.transport.ssl.truststore.secure_password already exists. Overwrite? [y/N]y</span><br><span class="line">Enter value for xpack.security.transport.ssl.truststore.secure_password:</span><br></pre></td></tr></table></figure></li>
<li>将上面生成的 <strong>CA 证书</strong>、<strong>服务器证书</strong> 以及 <strong>证书密码文件</strong> 拷贝到 Elasticsearch 集群的所有节点的 <code>/etc/elasticsearch/certs/</code> 下，并修改权限 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 660 /etc/elasticsearch/certs/*</span><br><span class="line">chown root:elasticsearch /etc/elasticsearch/certs/*</span><br></pre></td></tr></table></figure></li>
<li>重启 Elasticsearch 集群的所有节点 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart elasticsearch</span><br></pre></td></tr></table></figure></li>
<li>检查集群状态 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl --user newadmin:password localhost:9200/_cluster/health?pretty</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;cluster_name&quot; : &quot;es-cluster1&quot;,</span><br><span class="line">  &quot;status&quot; : &quot;green&quot;,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;number_of_nodes&quot; : 3,</span><br><span class="line">  &quot;number_of_data_nodes&quot; : 3,</span><br><span class="line">  &quot;active_primary_shards&quot; : 18,</span><br><span class="line">  &quot;active_shards&quot; : 37,</span><br><span class="line">  &quot;relocating_shards&quot; : 0,</span><br><span class="line">  &quot;initializing_shards&quot; : 0,</span><br><span class="line">  &quot;unassigned_shards&quot; : 0,</span><br><span class="line">  &quot;delayed_unassigned_shards&quot; : 0,</span><br><span class="line">  &quot;number_of_pending_tasks&quot; : 0,</span><br><span class="line">  &quot;number_of_in_flight_fetch&quot; : 0,</span><br><span class="line">  &quot;task_max_waiting_in_queue_millis&quot; : 0,</span><br><span class="line">  &quot;active_shards_percent_as_number&quot; : 100.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="重置用户密码"><a href="#重置用户密码" class="headerlink" title="重置用户密码"></a>重置用户密码</h2><p>可以使用以下命令，创建新的超级管理员账号。首先要 <em>确保集群状态正常</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">elasticsearch-users useradd newadmin -p password -r superuser</span><br></pre></td></tr></table></figure>
<p>接下来使用刚刚创建的账号密码对原有的账号（如 <code>elastic</code>） 进行密码重置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -s --user newadmin:password -XPUT <span class="string">&quot;http://localhost:9200/_security/user/elastic/_password?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="string">&#x27;&#123;</span></span></span><br><span class="line">   &quot;password&quot;: &quot;password1&quot;</span><br><span class="line"> &#125;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>密码重置成功后，尝试使用新账号密码访问集群</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl --user elastic:password1 localhost:9200/_cluster/health?pretty</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;cluster_name&quot; : &quot;es-cluster1&quot;,</span><br><span class="line">  &quot;status&quot; : &quot;green&quot;,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;number_of_nodes&quot; : 3,</span><br><span class="line">  &quot;number_of_data_nodes&quot; : 3,</span><br><span class="line">  &quot;active_primary_shards&quot; : 19,</span><br><span class="line">  &quot;active_shards&quot; : 39,</span><br><span class="line">  &quot;relocating_shards&quot; : 0,</span><br><span class="line">  &quot;initializing_shards&quot; : 0,</span><br><span class="line">  &quot;unassigned_shards&quot; : 0,</span><br><span class="line">  &quot;delayed_unassigned_shards&quot; : 0,</span><br><span class="line">  &quot;number_of_pending_tasks&quot; : 0,</span><br><span class="line">  &quot;number_of_in_flight_fetch&quot; : 0,</span><br><span class="line">  &quot;task_max_waiting_in_queue_millis&quot; : 0,</span><br><span class="line">  &quot;active_shards_percent_as_number&quot; : 100.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>]]></content>
      <categories>
        <category>Linux</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>etcd</title>
    <url>/202310051003/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>etcd v3.5</li>
</ul>
<p><a href="https://etcd.io/docs/v3.5/install/">etcd 官网安装指南</a><br><a href="https://github.com/etcd-io/etcd/releases/">Github 下载链接</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/etcd-io/etcd/releases/download/v3.5.9/etcd-v3.5.9-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xf etcd-v3.5.9-linux-amd64.tar.gz -C /usr/local/</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/etcd-v3.5.9-linux-amd64/etcd /usr/bin/</span><br><span class="line">ln -s /usr/local/etcd-v3.5.9-linux-amd64/etcdctl /usr/bin/</span><br><span class="line">ln -s /usr/local/etcd-v3.5.9-linux-amd64/etcdutl /usr/bin/</span><br></pre></td></tr></table></figure>
<p>启动 <code>etcd</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcd</span></span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2023-10-05T02:16:52.853273Z&quot;,&quot;caller&quot;:&quot;embed/config.go:673&quot;,&quot;msg&quot;:&quot;Running http and grpc server on single port. This is not recommended for production.&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:&quot;2023-10-05T02:16:52.853914Z&quot;,&quot;caller&quot;:&quot;etcdmain/etcd.go:73&quot;,&quot;msg&quot;:&quot;Running: &quot;,&quot;args&quot;:[&quot;etcd&quot;]&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2023-10-05T02:16:52.853947Z&quot;,&quot;caller&quot;:&quot;etcdmain/etcd.go:105&quot;,&quot;msg&quot;:&quot;&#x27;data-dir&#x27; was empty; using default&quot;,&quot;data-dir&quot;:&quot;default.etcd&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2023-10-05T02:16:52.853994Z&quot;,&quot;caller&quot;:&quot;embed/config.go:673&quot;,&quot;msg&quot;:&quot;Running http and grpc server on single port. This is not recommended for production.&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:&quot;2023-10-05T02:16:52.854009Z&quot;,&quot;caller&quot;:&quot;embed/etcd.go:127&quot;,&quot;msg&quot;:&quot;configuring peer listeners&quot;,&quot;listen-peer-urls&quot;:[&quot;http://localhost:2380&quot;]&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="常用管理命令"><a href="#常用管理命令" class="headerlink" title="常用管理命令"></a>常用管理命令</h1><h2 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h2><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcd --version</span></span><br><span class="line">etcd Version: 3.5.3</span><br><span class="line">Git SHA: 0452feec7</span><br><span class="line">Go Version: go1.16.15</span><br><span class="line">Go OS/Arch: linux/amd64</span><br></pre></td></tr></table></figure>

<h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p><code>etcd</code> 创建集群涉及参数说明</p>
<table>
<thead>
<tr>
<th>name</th>
<th>说明</th>
<th>命令行参数</th>
</tr>
</thead>
<tbody><tr>
<td><code>name</code></td>
<td>每个集群成员的唯一名称</td>
<td><code>--name=etcd0</code></td>
</tr>
<tr>
<td><code>initial-advertise-peer-urls</code></td>
<td>群成员广播给集群其他成员（用于连接本节点）的 URL<br/>默认为 <code>http://IP:2380</code></td>
<td><code>--initial-advertise-peer-urls=http://10.0.0.10:2380</code></td>
</tr>
<tr>
<td><code>listen-peer-urls</code></td>
<td>在这些（一个或多个） URL 上监听其他集群成员的连接请求<br/>通信包括了集群管理任务、数据同步和心跳检测等</td>
<td><code>http://10.0.0.10:2380,http://127.0.0.1:2380</code></td>
</tr>
<tr>
<td><code>listen-client-urls</code></td>
<td>该成员监听客户端连接的 URL。 默认端口 2379</td>
<td><code>--listen-client-urls=http://10.0.0.10:2379,http://127.0.0.1:2379</code></td>
</tr>
<tr>
<td><code>advertise-client-urls</code></td>
<td>该成员广播给客户端的 URL</td>
<td><code>--advertise-client-urls=http://10.0.0.10:2379</code></td>
</tr>
<tr>
<td><code>initial-cluster</code></td>
<td>所有 <code>etcd</code> 成员的初始列表</td>
<td><code>--initial-cluster=etcd0=http://10.0.0.10:2380,etcd1=http://10.0.0.11:2380,etcd2=http://10.0.0.12:2380</code></td>
</tr>
<tr>
<td><code>data-dir</code></td>
<td><code>etcd</code> 数据的存储目录。</td>
<td><code>--data-dir=/var/lib/etcd</code></td>
</tr>
<tr>
<td><code>initial-cluster-token</code></td>
<td>初始集群的唯一标识符，用于区分不同的 <code>etcd</code> 集群</td>
<td><code>--initial-cluster-token=my-etcd-token</code></td>
</tr>
<tr>
<td><code>initial-cluster-state</code></td>
<td>初始集群状态，可以是 <code>new</code> 或 <code>existing</code>。<br/>通常在引导新集群时使用 <code>new</code>，而在添加或删除成员时使用 <code>existing</code>。</td>
<td><code>--initial-cluster-state=new</code></td>
</tr>
<tr>
<td><code>quota-backend-bytes</code></td>
<td><code>etcd</code> 的后端数据库大小的硬限制，默认是 2GB</td>
<td><code>--quota-backend-bytes=3000000000</code></td>
</tr>
<tr>
<td><code>cert-file</code><br/><code>key-file</code></td>
<td>用于 HTTPS 的证书和私钥</td>
<td><code>--cert-file=/etc/kubernetes/pki/etcd/server.crt</code> <br/><code>--key-file=/etc/kubernetes/pki/etcd/server.key</code></td>
</tr>
<tr>
<td><code>trusted-ca-file</code></td>
<td>客户端和对等体的验证所需的 CA 证书</td>
<td><code>--trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt</code></td>
</tr>
<tr>
<td><code>client-cert-auth</code></td>
<td>启用客户端证书验证，默认为 <code>false</code></td>
<td><code>--client-cert-auth</code></td>
</tr>
</tbody></table>
<p><code>listen-peer-urls</code> 和 <code>initial-advertise-peer-urls</code> 的区别说明：</p>
<ul>
<li><p><code>listen-peer-urls</code></p>
<p>  这个参数指定了 <code>etcd</code> 成员应该在哪些地址和端口上监听来自其他 <code>etcd</code> 成员的请求（数据同步、领导选举、集群更改等相关）</p>
<p> 主要用途是定义哪个网络接口和端口号应该被 <code>etcd</code> 服务绑定，以便它可以接收来自其他成员的连接</p>
</li>
<li><p><code>initial-advertise-peer-urls</code></p>
<p> 这个参数告诉 <code>etcd</code> 该如何 <em><strong>通告自己</strong></em> 给集群中的其他成员。这是其他集群成员用来联系此 <code>etcd</code> 成员的地址。</p>
<p> 主要用途是 <strong>当新成员加入集群时，它需要通知其他成员自己的存在，以及如何与自己通信</strong>，因此它必须是个其他节点可达的 Endpoints，如 <code>http://0.0.0.0:2380</code> 就不行。</p>
<blockquote>
<p><code>listen-client-urls</code> 和 <code>advertise-client-urls</code> 的区别同理</p>
</blockquote>
</li>
</ul>
<p>示例环境说明</p>
<table>
<thead>
<tr>
<th>主机</th>
<th>IP</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td>etcd1</td>
<td>172.17.0.2&#x2F;16</td>
<td>etcd node</td>
</tr>
<tr>
<td>etcd2</td>
<td>172.17.0.3&#x2F;16</td>
<td>etcd node</td>
</tr>
<tr>
<td>etcd3</td>
<td>172.17.0.4&#x2F;16</td>
<td>etcd node</td>
</tr>
</tbody></table>
<p>分别在 3 个节点上执行以下 3 条命令，创建集群</p>
<p><code>etcd1</code> 执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">etcd --data-dir=data.etcd --name etcd1 \</span><br><span class="line">	--initial-advertise-peer-urls http://172.17.0.2:2380 --listen-peer-urls http://172.17.0.2:2380,http://127.0.0.1:2380 \</span><br><span class="line">	--advertise-client-urls http://172.17.0.2:2379 --listen-client-urls http://172.17.0.2:2379,http://127.0.0.1:2379 \</span><br><span class="line">	--initial-cluster etcd1=http://172.17.0.2:2380,etcd2=http://172.17.0.3:2380,etcd3=http://172.17.0.4:2380 \</span><br><span class="line">	--initial-cluster-state new --initial-cluster-token etcd-cluster</span><br></pre></td></tr></table></figure>

<p><code>etcd2</code> 执行命令：	</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">etcd --data-dir=data.etcd --name etcd2 \</span><br><span class="line">	--initial-advertise-peer-urls http://172.17.0.3:2380 --listen-peer-urls http://172.17.0.3:2380,http://127.0.0.1:2380 \</span><br><span class="line">	--advertise-client-urls http://172.17.0.3:2379 --listen-client-urls http://172.17.0.3:2379,http://127.0.0.1:2379 \</span><br><span class="line">	--initial-cluster etcd1=http://172.17.0.2:2380,etcd2=http://172.17.0.3:2380,etcd3=http://172.17.0.4:2380 \</span><br><span class="line">	--initial-cluster-state new --initial-cluster-token etcd-cluster</span><br></pre></td></tr></table></figure>
<p><code>etcd3</code> 执行命令：	</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">etcd --data-dir=data.etcd --name etcd3 \</span><br><span class="line">	--initial-advertise-peer-urls http://172.17.0.4:2380 --listen-peer-urls http://172.17.0.4:2380,http://127.0.0.1:2380 \</span><br><span class="line">	--advertise-client-urls http://172.17.0.4:2379 --listen-client-urls http://172.17.0.4:2379,http://127.0.0.1:2379 \</span><br><span class="line">	--initial-cluster etcd1=http://172.17.0.2:2380,etcd2=http://172.17.0.3:2380,etcd3=http://172.17.0.4:2380 \</span><br><span class="line">	--initial-cluster-state new --initial-cluster-token etcd-cluster	</span><br></pre></td></tr></table></figure>

<p>检查节点健康状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ENDPOINT=http://172.17.0.3:2380,http://172.17.0.2:2380,http://172.17.0.4:2380</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl endpoint status --endpoints=<span class="variable">$ENDPOINT</span> -w table</span> </span><br><span class="line">+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br><span class="line">|        ENDPOINT        |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |</span><br><span class="line">+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br><span class="line">| http://172.17.0.3:2380 | 660aa483274d103a |   3.5.9 |   20 kB |     false |      false |         2 |          9 |                  9 |        |</span><br><span class="line">| http://172.17.0.2:2380 | 69015be41c714f32 |   3.5.9 |   20 kB |      true |      false |         2 |          9 |                  9 |        |</span><br><span class="line">| http://172.17.0.4:2380 | ad0233873e2a0054 |   3.5.9 |   20 kB |     false |      false |         2 |          9 |                  9 |        |</span><br><span class="line">+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl endpoint health --endpoints=<span class="variable">$ENDPOINT</span> -w table</span></span><br><span class="line">+------------------------+--------+------------+-------+</span><br><span class="line">|        ENDPOINT        | HEALTH |    TOOK    | ERROR |</span><br><span class="line">+------------------------+--------+------------+-------+</span><br><span class="line">| http://172.17.0.2:2380 |   true |  2.44553ms |       |</span><br><span class="line">| http://172.17.0.3:2380 |   true | 2.804559ms |       |</span><br><span class="line">| http://172.17.0.4:2380 |   true | 2.580515ms |       |</span><br><span class="line">+------------------------+--------+------------+-------+</span><br></pre></td></tr></table></figure>

<h2 id="etcdctl"><a href="#etcdctl" class="headerlink" title="etcdctl"></a>etcdctl</h2><h3 id="查看版本信息-1"><a href="#查看版本信息-1" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl version</span></span><br><span class="line">etcdctl version: 3.5.3</span><br><span class="line">API version: 3.5</span><br></pre></td></tr></table></figure>

<h3 id="etcd-集群管理"><a href="#etcd-集群管理" class="headerlink" title="etcd 集群管理"></a>etcd 集群管理</h3><h4 id="查看-etcd-集群成员列表"><a href="#查看-etcd-集群成员列表" class="headerlink" title="查看 etcd 集群成员列表"></a>查看 etcd 集群成员列表</h4><p>Kubernetes 中查看 <code>etcd</code> 集群成员列表使用如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl <span class="built_in">exec</span> -n kube-system -it etcd-k8s-master1 -- sh -c <span class="string">&quot;ETCDCTL_API=3 etcdctl member list --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key&quot;</span></span></span><br><span class="line">3c087bf12db7a0f, started, k8s-master2, https://172.31.30.115:2380, https://172.31.30.115:2379, false</span><br><span class="line">92e04392f8ad0046, started, k8s-master3, https://172.31.29.250:2380, https://172.31.29.250:2379, false</span><br><span class="line">c71592552b3eb9bb, started, k8s-master1, https://172.31.30.123:2380, https://172.31.30.123:2379, false</span><br></pre></td></tr></table></figure>
<p>指定输出格式为 <code>table</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl member list --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key --write-out=table</span></span><br><span class="line">+------------------+---------+-------------+----------------------------+----------------------------+------------+</span><br><span class="line">|        ID        | STATUS  |     NAME    |         PEER ADDRS         |        CLIENT ADDRS        | IS LEARNER |</span><br><span class="line">+------------------+---------+-------------+----------------------------+----------------------------+------------+</span><br><span class="line">|  3c087bf12db7a0f | started | k8s-master2 | https://172.31.30.115:2380 | https://172.31.30.115:2379 |      false |</span><br><span class="line">| 92e04392f8ad0046 | started | k8s-master3 | https://172.31.29.250:2380 | https://172.31.29.250:2379 |      false |</span><br><span class="line">| c71592552b3eb9bb | started | k8s-master1 | https://172.31.30.123:2380 | https://172.31.30.123:2379 |      false |</span><br><span class="line">+------------------+---------+-------------+----------------------------+----------------------------+------------+</span><br></pre></td></tr></table></figure>

<p>输出内容说明如下：</p>
<ul>
<li><code>3c087bf12db7a0f</code> : 集群中每一个成员的唯一 ID。</li>
<li><code>started</code> : 集群成员的当前状态。<code>started</code> 表示活动的。</li>
<li><code>k8s-master2</code> : <code>etcd</code> 集群成员的名字，通常与其主机名或节点名相对应</li>
<li><code>https://172.31.30.115:2380</code> : <code>Peer URLs</code>，其他 <code>etcd</code> 成员用于与该成员通信的 URL。默认为 本地 IP 的 2380 端口</li>
<li><code>https://172.31.30.123:2379</code> : <code>Client URLs</code> ，客户端用于与 <code>etcd</code> 成员通信的 URL。默认为 本地 IP 的 2379 端口</li>
<li><code>Is Learner</code> : 表示该成员是否是一个 <code>learner</code>。Learner 是 <code>etcd</code> 的一个新功能，允许一个成员作为非投票成员加入集群，直到它准备好成为一个完全参与的成员。<code>false</code> 表示它们都不是 <code>learners</code></li>
</ul>
<h4 id="检查集群状态"><a href="#检查集群状态" class="headerlink" title="检查集群状态"></a>检查集群状态</h4><p>检查单个节点的集群配置状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl --write-out=table endpoint status --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key</span></span><br><span class="line">+----------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br><span class="line">|    ENDPOINT    |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |</span><br><span class="line">+----------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br><span class="line">| 127.0.0.1:2379 | c71592552b3eb9bb |   3.5.3 |  106 MB |     false |      false |        16 |  228198001 |          228198001 |        |</span><br><span class="line">+----------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br></pre></td></tr></table></figure>
<p>查看所有节点的集群配置状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ENDPOINTS=https://172.31.30.115:2379,https://172.31.29.250:2379,https://172.31.30.123:2379</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl --write-out=table --endpoints=<span class="variable">$ENDPOINTS</span> endpoint status</span> </span><br><span class="line">+----------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br><span class="line">|          ENDPOINT          |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |</span><br><span class="line">+----------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br><span class="line">| https://172.31.30.115:2379 |  3c087bf12db7a0f |   3.5.3 |  106 MB |      true |      false |        16 |  228199920 |          228199920 |        |</span><br><span class="line">| https://172.31.29.250:2379 | 92e04392f8ad0046 |   3.5.3 |  106 MB |     false |      false |        16 |  228199920 |          228199920 |        |</span><br><span class="line">| https://172.31.30.123:2379 | c71592552b3eb9bb |   3.5.3 |  106 MB |     false |      false |        16 |  228199920 |          228199920 |        |</span><br><span class="line">+----------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl --write-out=table --endpoints=<span class="variable">$ENDPOINTS</span> endpoint health</span></span><br><span class="line">+----------------------------+--------+------------+-------+</span><br><span class="line">|          ENDPOINT          | HEALTH |    TOOK    | ERROR |</span><br><span class="line">+----------------------------+--------+------------+-------+</span><br><span class="line">| https://172.31.30.115:2379 |   true | 7.927976ms |       |</span><br><span class="line">| https://172.31.30.123:2379 |   true | 8.011055ms |       |</span><br><span class="line">| https://172.31.29.250:2379 |   true | 8.349179ms |       |</span><br><span class="line">+----------------------------+--------+------------+-------+</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="增加-key"><a href="#增加-key" class="headerlink" title="增加 key"></a>增加 key</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl put foo <span class="string">&quot;hello world&quot;</span></span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h3 id="查询-key"><a href="#查询-key" class="headerlink" title="查询 key"></a>查询 key</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl get foo</span></span><br><span class="line">foo</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>
<p>按照 key 的前缀查询</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl get foo --prefix</span></span><br><span class="line">foo</span><br><span class="line">hello world</span><br><span class="line">foo1</span><br><span class="line">hello</span><br><span class="line">foo2</span><br><span class="line">world</span><br></pre></td></tr></table></figure>

<p>获取所有的 <code>key</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl get / --prefix</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl get / --prefix --keys-only</span></span><br><span class="line">/registry/acme.cert-manager.io/orders/default/rancher1-uat-148962587001-r0wfppse-com-5lztf-3961318969</span><br><span class="line"></span><br><span class="line">/registry/acme.cert-manager.io/orders/default/rancher1-uat-148962587001-r0wfppse-com-9wjcq-3961318969</span><br><span class="line"></span><br><span class="line">/registry/acme.cert-manager.io/orders/default/rancher1-uat-148962587001-r0wfppse-com-ktsx5-3961318969</span><br><span class="line"></span><br><span class="line">/registry/acme.cert-manager.io/orders/default/rancher1-uat-148962587001-r0wfppse-com-lb5h7-3961318969</span><br><span class="line"></span><br><span class="line">/registry/acme.cert-manager.io/orders/default/rancher1-uat-148962587001-r0wfppse-com-rztlh-3961318969</span><br><span class="line"></span><br><span class="line">/registry/apiextensions.k8s.io/customresourcedefinitions/alertmanagers.monitoring.coreos.com</span><br><span class="line"></span><br><span class="line">/registry/apiextensions.k8s.io/customresourcedefinitions/amazonec2configs.rke-machine-config.cattle.io</span><br><span class="line"></span><br><span class="line">/registry/apiextensions.k8s.io/customresourcedefinitions/amazonec2machines.rke-machine.cattle.io</span><br><span class="line"></span><br><span class="line">/registry/apiextensions.k8s.io/customresourcedefinitions/amazonec2machinetemplates.rke-machine.cattle.io</span><br></pre></td></tr></table></figure>

<h3 id="删除-key"><a href="#删除-key" class="headerlink" title="删除 key"></a>删除 key</h3><p><code>del</code> 命令删除 key，失败返回 0，成功返回 1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl del key</span>   </span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl del foo</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="监听-key-的变更"><a href="#监听-key-的变更" class="headerlink" title="监听 key 的变更"></a>监听 key 的变更</h3><p>使用 <code>etcdctl watch</code> 命令可以监听 key 的变动。每当监听的 key 有变更，命令会监听到变更情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl watch foo</span></span><br><span class="line">PUT</span><br><span class="line">foo</span><br><span class="line">hello pytohn</span><br><span class="line">PUT</span><br><span class="line">foo</span><br><span class="line">hello pytohn 1</span><br></pre></td></tr></table></figure>
<p>使用选项 <code>--prefix</code> 可以监控指定内容开始的 key 的变更，以下命令监听以 <code>foo</code> 开头的 key 的变更情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl watch foo --prefix</span></span><br><span class="line">PUT</span><br><span class="line">foo1</span><br><span class="line">this is py</span><br><span class="line">PUT</span><br><span class="line">foo2</span><br><span class="line">this is foo2</span><br></pre></td></tr></table></figure>

<h1 id="etcd-集群备份及恢复"><a href="#etcd-集群备份及恢复" class="headerlink" title="etcd 集群备份及恢复"></a>etcd 集群备份及恢复</h1><p><code>etcd</code> 被设计为能承受机器失败。对于一个有 N 个成员的集群能容许 <code>(N-1)/2</code> 的持续失败，如果集群持续丢失超过 <code>(N-1)/2</code> 的成员，则它最终因法定成员（Quorum）不足而最终失败，一旦法定人数丢失，集群无法达到一致而因此无法继续接收更新。</p>
<p>为了从灾难失败中恢复，<code>etcd v3</code> 提供快照以下备份数据的方式</p>
<ul>
<li>快照备份（<code>snapshot</code>）</li>
<li>文件备份（<code>member/snap/db</code>）</li>
</ul>
<h2 id="快照备份"><a href="#快照备份" class="headerlink" title="快照备份"></a>快照备份</h2><p>执行 <code>etcd</code> 集群快照可以作为 <code>etc</code> 键空间的持久备份，通过获取 <code>etcd</code> 成员的数据库的定期快照，<code>etcd</code> 集群可以被恢复到某个有已知良好状态的时间点。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Disaster recovery](https://etcd.io/docs/v3.5/op-guide/recovery/#snapshotting-the-keyspace)">[1]</span></a></sup></p>
<p>执行备份只需要在一个节点上执行，恢复时所有节点使用同一个备份进行恢复。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl snapshot save etcd-102310051318.db</span></span><br><span class="line">&#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:&quot;2023-10-05T05:18:57.971Z&quot;,&quot;caller&quot;:&quot;snapshot/v3_snapshot.go:65&quot;,&quot;msg&quot;:&quot;created temporary db file&quot;,&quot;path&quot;:&quot;etcd-102310051318.db.part&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:&quot;2023-10-05T05:18:57.976Z&quot;,&quot;logger&quot;:&quot;client&quot;,&quot;caller&quot;:&quot;v3/maintenance.go:211&quot;,&quot;msg&quot;:&quot;opened snapshot stream; downloading&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:&quot;2023-10-05T05:18:57.977Z&quot;,&quot;caller&quot;:&quot;snapshot/v3_snapshot.go:73&quot;,&quot;msg&quot;:&quot;fetching snapshot&quot;,&quot;endpoint&quot;:&quot;127.0.0.1:2379&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:&quot;2023-10-05T05:18:58.685Z&quot;,&quot;logger&quot;:&quot;client&quot;,&quot;caller&quot;:&quot;v3/maintenance.go:219&quot;,&quot;msg&quot;:&quot;completed snapshot read; closing&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:&quot;2023-10-05T05:18:59.159Z&quot;,&quot;caller&quot;:&quot;snapshot/v3_snapshot.go:88&quot;,&quot;msg&quot;:&quot;fetched snapshot&quot;,&quot;endpoint&quot;:&quot;127.0.0.1:2379&quot;,&quot;size&quot;:&quot;106 MB&quot;,&quot;took&quot;:&quot;1 second ago&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:&quot;2023-10-05T05:18:59.159Z&quot;,&quot;caller&quot;:&quot;snapshot/v3_snapshot.go:97&quot;,&quot;msg&quot;:&quot;saved&quot;,&quot;path&quot;:&quot;etcd-102310051318.db&quot;&#125;</span><br><span class="line">Snapshot saved at etcd-102310051318.db</span><br></pre></td></tr></table></figure>

<p>查看快照状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl snapshot status etcd-102310051318.db --write-out=table</span></span><br><span class="line">+----------+-----------+------------+------------+</span><br><span class="line">|   HASH   | REVISION  | TOTAL KEYS | TOTAL SIZE |</span><br><span class="line">+----------+-----------+------------+------------+</span><br><span class="line">| 2c3b7c96 | 210126541 |       6844 |     106 MB |</span><br><span class="line">+----------+-----------+------------+------------+</span><br></pre></td></tr></table></figure>

<h2 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h2><p>文件备份通过拷贝 <code>etcd</code> 数据目录下的 <code>member/snap/db</code> 实现。 </p>
<h2 id="恢复集群"><a href="#恢复集群" class="headerlink" title="恢复集群"></a>恢复集群</h2><p>集群恢复注意事项说明： <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Disaster recovery](https://etcd.io/docs/v3.5/op-guide/recovery/#snapshotting-the-keyspace)">[1]</span></a></sup></p>
<ul>
<li><em><strong>所有的集群成员都必须使用同一份快照文件来恢复</strong></em>。</li>
<li>使用 <code>etcdutl snapshot restore</code> 恢复集群是需要创建新的 <code>etcd data directories</code>，或者将已有的目录删除，总之，<strong>一般需要一个新的集群或数据目录</strong></li>
<li>集群恢复会覆盖一些快照元数据（特别是 member ID 和 Cluster ID）。集群成员会失去之前的 ID，此元数据覆盖可防止新成员无意中加入现有集群。<em><strong>因此，为了从快照恢复，必须启动一个新的逻辑集群</strong></em></li>
<li>恢复时可能进行快照完整性检查。如果是 <code>snampshot save</code> 生成的快照，在 <code>snapshot restore</code> 时会自动检查，如果是从数据目录拷贝的备份，因为没有 <code>integrity hash</code> 无法校验，只能在恢复时使用参数 <code>--skip-hash-check</code> 跳过完整性校验。</li>
<li><em><strong>使用命令 <code>snapshot restore</code> 恢复时使用的参数 <code>--initial-cluster</code> 要确保和启动集群时使用的一致</strong></em>。</li>
</ul>
<ol>
<li>参考以下命令，使用快照恢复，恢复时指定一个新的目录，<em><strong>需要在每个节点上执行</strong></em><ul>
<li><p>节点 <code>k8s-master1</code></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl  \</span></span><br><span class="line"><span class="language-bash">        snapshot restore k8s-master1.etcd.202310051738.db \</span></span><br><span class="line"><span class="language-bash">        --endpoints=http://127.0.0.1:2379 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master1 \</span></span><br><span class="line"><span class="language-bash">        --data-dir /var/lib/etcd/ \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380,k8s-master3=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.2:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster-token etcd</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line"><span class="meta prompt_">		</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcd \</span></span><br><span class="line"><span class="language-bash">        --advertise-client-urls=http://172.17.0.2:2379 \</span></span><br><span class="line"><span class="language-bash">        --data-dir=/var/lib/etcd \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.2:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380,k8s-master3=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --listen-client-urls=http://127.0.0.1:2379,http://172.17.0.2:2379 \</span></span><br><span class="line"><span class="language-bash">        --listen-peer-urls=http://172.17.0.2:2380 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master1 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster-token etcd</span></span><br></pre></td></tr></table></figure></li>
<li><p>节点 <code>k8s-master2</code></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl  \</span></span><br><span class="line"><span class="language-bash">        snapshot restore k8s-master1.etcd.202310051738.db \</span></span><br><span class="line"><span class="language-bash">        --endpoints=http://127.0.0.1:2379 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master2 \</span></span><br><span class="line"><span class="language-bash">        --data-dir /var/lib/etcd/ \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380,k8s-master3=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.3:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster-token etcd</span></span><br><span class="line"><span class="meta prompt_">		</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcd  \</span></span><br><span class="line"><span class="language-bash">        --advertise-client-urls=http://172.17.0.3:2379 \</span></span><br><span class="line"><span class="language-bash">        --data-dir=/var/lib/etcd \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.3:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380,k8s-master3=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --listen-client-urls=http://127.0.0.1:2379,http://172.17.0.3:2379 \</span></span><br><span class="line"><span class="language-bash">        --listen-peer-urls=http://172.17.0.3:2380 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master2 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster-token etcd</span>		</span><br></pre></td></tr></table></figure>
</li>
<li><p>节点 <code>k8s-master3</code></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl  \</span></span><br><span class="line"><span class="language-bash">        snapshot restore k8s-master1.etcd.202310051738.db \</span></span><br><span class="line"><span class="language-bash">        --endpoints=http://127.0.0.1:2379 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master3 \</span></span><br><span class="line"><span class="language-bash">        --data-dir /var/lib/etcd/ \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380,k8s-master3=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster-token etcd</span></span><br><span class="line"><span class="meta prompt_">		</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcd  \</span></span><br><span class="line"><span class="language-bash">        --advertise-client-urls=http://172.17.0.4:2379 \</span></span><br><span class="line"><span class="language-bash">        --data-dir=/var/lib/etcd \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380,k8s-master3=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --listen-client-urls=http://127.0.0.1:2379,http://172.17.0.4:2379 \</span></span><br><span class="line"><span class="language-bash">        --listen-peer-urls=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master3 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster-token etcd</span>		</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>恢复后检查节点状态 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl member list</span></span><br><span class="line">119f945c36726355, started, k8s-master2, http://172.17.0.3:2380, http://172.17.0.3:2379, false</span><br><span class="line">92892585e2b66fcc, started, k8s-master3, http://172.17.0.4:2380, http://172.17.0.4:2379, false</span><br><span class="line">e18d752602ba842f, started, k8s-master1, http://172.17.0.2:2380, http://172.17.0.2:2379, false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl endpoint status --endpoints=<span class="variable">$ENDPONTS</span> --write-out=table</span></span><br><span class="line">+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br><span class="line">|        ENDPOINT        |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |</span><br><span class="line">+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br><span class="line">| http://172.17.0.2:2379 | e18d752602ba842f |   3.5.3 |  106 MB |      true |      false |         2 |         13 |                 13 |        |</span><br><span class="line">| http://172.17.0.3:2379 | 119f945c36726355 |   3.5.3 |  106 MB |     false |      false |         2 |         13 |                 13 |        |</span><br><span class="line">| http://172.17.0.4:2379 | 92892585e2b66fcc |   3.5.3 |  106 MB |     false |      false |         2 |         13 |                 13 |        |</span><br><span class="line">+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl endpoint health --endpoints=<span class="variable">$ENDPONTS</span> --write-out=table</span></span><br><span class="line">+------------------------+--------+------------+-------+</span><br><span class="line">|        ENDPOINT        | HEALTH |    TOOK    | ERROR |</span><br><span class="line">+------------------------+--------+------------+-------+</span><br><span class="line">| http://172.17.0.3:2379 |   true | 4.125714ms |       |</span><br><span class="line">| http://172.17.0.2:2379 |   true | 4.126622ms |       |</span><br><span class="line">| http://172.17.0.4:2379 |   true | 4.280457ms |       |</span><br><span class="line">+------------------------+--------+------------+-------+</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Kubernetes-中的-etcd-集群的恢复"><a href="#Kubernetes-中的-etcd-集群的恢复" class="headerlink" title="Kubernetes 中的 etcd 集群的恢复"></a>Kubernetes 中的 etcd 集群的恢复</h2><p>在 <a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/ha-topology/#stacked-etcd-topology">堆叠（Stacked）etcd 拓扑</a> 的架构下，<code>etcd</code> 集群由 Kubernetes 负责部署维护，Kubernetes 中的关键数据都存储于 <code>etcd</code> 集群中，假如 <code>etcd</code> 集群故障无法使用，则 Kubernetes 集群将完全无法使用，亦无法通过 Kubernetes 去管理恢复 <code>etcd</code> 集群。Kubernetes  <a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/ha-topology/#stacked-etcd-topology">堆叠（Stacked）etcd 拓扑</a> 架构有以下特性：</p>
<ul>
<li>Kubernetes 堆叠（Stacked）<code>etcd</code> 拓扑架构下的 <code>etcd</code> 集群配置详情可以查看配置文件 <code>/etc/kubernetes/manifests/etcd.yaml</code>。</li>
<li><code>etcd</code> 集群部署在 Kubernetes 集群的 Master 节点上，并且网络模式为 <code>hostNetwork: true</code>，即网络使用主机网络</li>
<li><code>etcd</code> 通过 <code>hostPath</code> 方式挂载了 Kubernetes Master 主机节点目录 <code>/var/lib/etcd</code>，因此，<code>etcd</code> 节点的数据实际保留在 Kubernetes Master 主机节点目录 <code>/var/lib/etcd</code></li>
<li><code>etcd</code> 集群启用了 TLS 通信，使用的证书通过 <code>hostPath</code> 方式挂载了 Kubernetes Master 主机节点目录 <code>/etc/kubernetes/pki/etcd</code></li>
</ul>
<p>此种故障，在保存有有效的 <code>etcd</code> Snapshot 的情况下可以参考本示例进行恢复。</p>
<ol>
<li><p>停止 <code>kubelet</code> ，重启 <code>docker</code>（或者其他 CRI）确保 Kubernetes 管理组件的 Pod 都处于停止状态，防止恢复 <code>etcd</code> 时 Kubernetes 写入数据。<em><strong>此操作在所有 Kubernetes Master 节点上执行</strong></em></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl stop kubelet</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mv</span> /var/lib/etcd /var/lib/etcd.bak</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl restart docker</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">4fbf7951781e        9fde607b81ff                &quot;kube-scheduler --au…&quot;   4 hours ago         Exited (0) 3 minutes ago                       k8s_kube-scheduler_kube-scheduler-k8s-master1_kube-system_cd7b8aef7d147b62355ca33773afd810_9</span><br><span class="line">0b92dd3ee5ac        8380b6a23fb8                &quot;kube-controller-man…&quot;   4 hours ago         Exited (2) 3 minutes ago                       k8s_kube-controller-manager_kube-controller-manager-k8s-master1_kube-system_a4ce6832517416c082459b497050f74c_12</span><br><span class="line">02d550737d73        registry.k8s.io/pause:3.6   &quot;/pause&quot;                 4 hours ago         Exited (0) 3 minutes ago                       k8s_POD_etcd-k8s-master1_kube-system_80b158fbe6bff3c672202ca1b11d89fa_1</span><br><span class="line">9bdf17effd5b        registry.k8s.io/pause:3.6   &quot;/pause&quot;                 4 hours ago         Exited (0) 3 minutes ago                       k8s_POD_kube-scheduler-k8s-master1_kube-system_cd7b8aef7d147b62355ca33773afd810_7</span><br><span class="line">6a484c46840f        registry.k8s.io/pause:3.6   &quot;/pause&quot;                 4 hours ago         Exited (0) 3 minutes ago                       k8s_POD_kube-apiserver-k8s-master1_kube-system_f5f8d1635bc67efe34c36af301b7071d_4</span><br><span class="line">4f606e7dfc32        registry.k8s.io/pause:3.6   &quot;/pause&quot;                 4 hours ago         Exited (0) 3 minutes ago                       k8s_POD_kube-controller-manager-k8s-master1_kube-system_a4ce6832517416c082459b497050f74c_8</span><br></pre></td></tr></table></figure></li>
<li><p>在 Kubernetes 的 Master 节点上，使用以下命令启动一个临时 <code>etcd</code> 容器，用来恢复备份数据。此处假设备份文件存在于主机目录 <code>/opt/k8s-backup/</code>。<em><strong>此操作在所有 Kubernetes Master 节点上执行</strong></em></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker run --<span class="built_in">rm</span> --name etcd1 -it \</span></span><br><span class="line"><span class="language-bash">             -v /var/lib/etcd/:/var/lib/etcd/ \</span></span><br><span class="line"><span class="language-bash">             -v /opt/k8s-backup/:/opt/ \</span></span><br><span class="line"><span class="language-bash">             -v /etc/kubernetes/pki/etcd/:/etc/kubernetes/pki/etcd/ \</span></span><br><span class="line"><span class="language-bash">             k8s.gcr.io/etcd:3.5.3-0 sh</span></span><br></pre></td></tr></table></figure></li>
<li><p>恢复 <code>etcd</code> 备份数据。分别在对应节点上面的临时 <code>etcd</code> 容器中执行恢复命令，使用的参数参考 <code>etcd</code> 配置 <code>/etc/kubernetes/manifests/etcd.yaml</code></p>
<ul>
<li><p><code>k8s-master1</code> 节点:</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /opt/</span></span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl snapshot restore k8s-master1.etcd.202310051738.db \</span></span><br><span class="line"><span class="language-bash">    --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key \</span></span><br><span class="line"><span class="language-bash">    --endpoints=https://127.0.0.1:2379 \</span></span><br><span class="line"><span class="language-bash">    --name=k8s-master1 \</span></span><br><span class="line"><span class="language-bash">    --data-dir /var/lib/etcd/ \</span></span><br><span class="line"><span class="language-bash">    --initial-cluster=k8s-master2=https://172.31.30.115:2380,k8s-master3=https://172.31.29.250:2380,k8s-master1=https://172.31.30.123:2380 \</span></span><br><span class="line"><span class="language-bash">    --initial-advertise-peer-urls=https://172.31.30.123:2380 \</span></span><br><span class="line"><span class="language-bash">    --initial-cluster-token etcd</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>k8s-master2</code> 节点:</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /opt/</span></span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl snapshot restore k8s-master1.etcd.202310051738.db \</span></span><br><span class="line"><span class="language-bash">    --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key \</span></span><br><span class="line"><span class="language-bash">    --endpoints=https://127.0.0.1:2379 \</span></span><br><span class="line"><span class="language-bash">    --name=k8s-master2 \</span></span><br><span class="line"><span class="language-bash">    --data-dir /var/lib/etcd/ \</span></span><br><span class="line"><span class="language-bash">    --initial-cluster=k8s-master2=https://172.31.30.115:2380,k8s-master3=https://172.31.29.250:2380,k8s-master1=https://172.31.30.123:2380 \</span></span><br><span class="line"><span class="language-bash">    --initial-advertise-peer-urls=https://172.31.30.115:2380 \</span></span><br><span class="line"><span class="language-bash">    --initial-cluster-token etcd</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>k8s-master3</code> 节点:</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /opt/</span></span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl snapshot restore k8s-master1.etcd.202310051738.db \</span></span><br><span class="line"><span class="language-bash">    --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key \</span></span><br><span class="line"><span class="language-bash">    --endpoints=https://127.0.0.1:2379 \</span></span><br><span class="line"><span class="language-bash">    --name=k8s-master3 \</span></span><br><span class="line"><span class="language-bash">    --data-dir /var/lib/etcd/ \</span></span><br><span class="line"><span class="language-bash">    --initial-cluster=k8s-master2=https://172.31.30.115:2380,k8s-master3=https://172.31.29.250:2380,k8s-master1=https://172.31.30.123:2380 \</span></span><br><span class="line"><span class="language-bash">    --initial-advertise-peer-urls=https://172.31.29.250:2380 \</span></span><br><span class="line"><span class="language-bash">    --initial-cluster-token etcd</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>启动 <code>kubelet</code>，检查集群是否恢复正常，并检查集群数据是否恢复。<em><strong>恢复备份数据后，可以重启（删除）所有 Pod，避免 Pod 状态和 <code>etcd</code> 中的数据不一致出现无法访问的问题</strong></em></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl start kubelet</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME          STATUS   ROLES           AGE    VERSION</span><br><span class="line">k8s-master1   Ready    control-plane   339d   v1.24.7</span><br><span class="line">k8s-master2   Ready    control-plane   339d   v1.24.7</span><br><span class="line">k8s-master3   Ready    control-plane   339d   v1.24.7</span><br><span class="line">k8s-work1     Ready    &lt;none&gt;          339d   v1.24.7</span><br><span class="line">k8s-work2     Ready    &lt;none&gt;          339d   v1.24.7</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="cluster-ID-mismatch"><a href="#cluster-ID-mismatch" class="headerlink" title="cluster ID mismatch"></a>cluster ID mismatch</h2><p>使用同一份 Snapshot <code>k8s-master1.etcd.202310051738.db</code> 恢复集群的过程中，<code>etcd</code> 报错，恢复集群过程如下</p>
<ol>
<li>节点 <code>k8s-master1</code> 上恢复 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl  \</span></span><br><span class="line"><span class="language-bash">        snapshot restore k8s-master1.etcd.202310051738.db \</span></span><br><span class="line"><span class="language-bash">        --endpoints=http://127.0.0.1:2379 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master1 \</span></span><br><span class="line"><span class="language-bash">        --data-dir /var/lib/etcd/ \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.2:2380</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcd \</span></span><br><span class="line"><span class="language-bash">        --advertise-client-urls=http://172.17.0.2:2379 \</span></span><br><span class="line"><span class="language-bash">        --data-dir=/var/lib/etcd \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.2:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380 \</span></span><br><span class="line"><span class="language-bash">        --listen-client-urls=http://127.0.0.1:2379,http://172.17.0.2:2379 \</span></span><br><span class="line"><span class="language-bash">        --listen-peer-urls=http://172.17.0.2:2380 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master1</span> </span><br><span class="line">        </span><br></pre></td></tr></table></figure></li>
<li>节点 <code>k8s-master2</code> 上恢复 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl  \</span></span><br><span class="line"><span class="language-bash">        snapshot restore k8s-master1.etcd.202310051738.db \</span></span><br><span class="line"><span class="language-bash">        --endpoints=http://127.0.0.1:2379 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master2 \</span></span><br><span class="line"><span class="language-bash">        --data-dir /var/lib/etcd/ \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.3:2380</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcd \</span></span><br><span class="line"><span class="language-bash">        --advertise-client-urls=http://172.17.0.3:2379 \</span></span><br><span class="line"><span class="language-bash">        --data-dir=/var/lib/etcd \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.3:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380 \</span></span><br><span class="line"><span class="language-bash">        --listen-client-urls=http://127.0.0.1:2379,http://172.17.0.3:2379 \</span></span><br><span class="line"><span class="language-bash">        --listen-peer-urls=http://172.17.0.3:2380 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master2</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>恢复 <code>k8s-master2</code> 后报错 <code>cluster ID mismatch</code>，这通常意味着正在尝试让两个不同的 <code>etcd</code> 集群中的节点相互通信，这是不被允许的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2023-10-06T05:13:08.818Z&quot;,&quot;caller&quot;:&quot;rafthttp/stream.go:653&quot;,&quot;msg&quot;:&quot;request sent was ignored by remote peer due to cluster ID mismatch&quot;,&quot;remote-peer-id&quot;:&quot;69015be41c714f32&quot;,&quot;remote-peer-cluster-id&quot;:&quot;10e5e39849dab251&quot;,&quot;local-member-id&quot;:&quot;660aa483274d103a&quot;,&quot;local-member-cluster-id&quot;:&quot;14dda1c29191f104&quot;,&quot;error&quot;:&quot;cluster ID mismatch&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>要在恢复时确保集群 ID 一致，需要确保每个节点使用相同的初始化配置（<code>--initial-cluster</code>），修改恢复命令如下后正常</p>
<ol>
<li>节点 <code>k8s-master1</code> 上恢复 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl  \</span></span><br><span class="line"><span class="language-bash">        snapshot restore k8s-master1.etcd.202310051738.db \</span></span><br><span class="line"><span class="language-bash">        --endpoints=http://127.0.0.1:2379 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master1 \</span></span><br><span class="line"><span class="language-bash">        --data-dir /var/lib/etcd/ \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380,k8s-master3=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.2:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster-token etcd</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcd \</span></span><br><span class="line"><span class="language-bash">        --advertise-client-urls=http://172.17.0.2:2379 \</span></span><br><span class="line"><span class="language-bash">        --data-dir=/var/lib/etcd \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.2:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380,k8s-master3=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --listen-client-urls=http://127.0.0.1:2379,http://172.17.0.2:2379 \</span></span><br><span class="line"><span class="language-bash">        --listen-peer-urls=http://172.17.0.2:2380 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master1 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster-token etcd</span></span><br></pre></td></tr></table></figure></li>
<li>节点 <code>k8s-master2</code> 上恢复 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl  \</span></span><br><span class="line"><span class="language-bash">        snapshot restore k8s-master1.etcd.202310051738.db \</span></span><br><span class="line"><span class="language-bash">        --endpoints=http://127.0.0.1:2379 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master2 \</span></span><br><span class="line"><span class="language-bash">        --data-dir /var/lib/etcd/ \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380,k8s-master3=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.3:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster-token etcd</span></span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcd  \</span></span><br><span class="line"><span class="language-bash">        --advertise-client-urls=http://172.17.0.3:2379 \</span></span><br><span class="line"><span class="language-bash">        --data-dir=/var/lib/etcd \</span></span><br><span class="line"><span class="language-bash">        --initial-advertise-peer-urls=http://172.17.0.3:2380 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster=k8s-master1=http://172.17.0.2:2380,k8s-master2=http://172.17.0.3:2380,k8s-master3=http://172.17.0.4:2380 \</span></span><br><span class="line"><span class="language-bash">        --listen-client-urls=http://127.0.0.1:2379,http://172.17.0.3:2379 \</span></span><br><span class="line"><span class="language-bash">        --listen-peer-urls=http://172.17.0.3:2380 \</span></span><br><span class="line"><span class="language-bash">        --name=k8s-master2 \</span></span><br><span class="line"><span class="language-bash">        --initial-cluster-token etcd</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://etcd.io/docs/v3.5/install/">etcd 官网</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://etcd.io/docs/v3.5/op-guide/recovery/#snapshotting-the-keyspace">Disaster recovery</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>etcd</tag>
      </tags>
  </entry>
  <entry>
    <title>linux fail2ban 详解</title>
    <url>/202208171501/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos 7</li>
<li>iptables</li>
</ul>
<p><a href="https://www.fail2ban.org/wiki/index.php/Main_Page">Fail2ban</a> 是 Linux 上的一个著名的入侵保护的开源框架。它通过监视相应服务的日志记录文件，匹配日志记录中的错误信息（正则式匹配），然后与系统的 <code>iptables</code> 联动执行相应的屏蔽动作（一般情况下是调用防火墙屏蔽），比如：当有人在试探你的 <code>HTTP</code>、<code>SSH</code>、<code>SMTP</code>、<code>FTP</code> 密码，只要达到你预设的次数，<code>Fail2ban</code> 就会调用防火墙屏蔽这个 IP，并且可以发送 e-mail 通知系统管理员。</p>
<p>由于 <code>Fail2ban</code> 需要与系统的 <code>iptables</code>、<code>firewalld</code> 等联动来达到封禁 IP 的目的， <code>iptables</code> 使用与 <code>firewalld</code> 有少许不同。  </p>
<p>本文以 <code>iptables</code> 为例</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install -y fail2ban</span><br><span class="line">systemctl enable fail2ban</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 Fail2ban 的状态</span></span><br><span class="line">fail2ban-client status   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 Fai2ban 的版本</span></span><br><span class="line">fail2ban-client version   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 Fail2ban 是否正常运行（正常将显示 pong）</span></span><br><span class="line">fail2ban-client ping     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 Fail2ban</span></span><br><span class="line">systemctl start fail2ban   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止 Fail2ban</span>  </span><br><span class="line">systemctl stop fail2ban  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 Fail2ban</span>  </span><br><span class="line">systemctl restart fail2ban</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开 Fail2ban 的日志监控</span>     </span><br><span class="line">tail -f /var/log/fail2ban.log  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="主要文件说明"><a href="#主要文件说明" class="headerlink" title="主要文件说明"></a>主要文件说明</h3><table>
<thead>
<tr>
<th>文件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;etc&#x2F;fail2ban&#x2F;jail.d&#x2F;</td>
<td>配置文件夹。用于定义错误次数、封禁时长、封禁动作等</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;fail2ban&#x2F;filter.d&#x2F;</td>
<td>条件文件夹。内含默认文件，用于定义日志文件内容的过滤规则</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;fail2ban&#x2F;action.d</td>
<td>动作文件夹。内含默认文件，用于 iptables 以及 mail 等动作配置</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;fail2ban&#x2F;fail2ban.conf<br/>&#x2F;etc&#x2F;fail2ban&#x2F;jail.conf</td>
<td><code>*.conf</code> 是主要（默认）配置文件，<strong>不要直接更改 <code>.conf</code> 文件</strong> ，升级后会被覆盖<br/>应该手动创建 <code>fail2ban.local</code> ,<code>jail.local</code>(或者分离 <code>.conf</code> 文件到 <code>jail.d/</code> 目录)</td>
</tr>
</tbody></table>
<h3 id="fail2ban-配置文件说明"><a href="#fail2ban-配置文件说明" class="headerlink" title="fail2ban 配置文件说明"></a>fail2ban 配置文件说明</h3><p><code>/etc/fail2ban/fail2ban.conf</code> 是主配置文件，定义了 <code>fai2ban</code> 默认的日志级别、日志位置及 sock 文件位置。<strong>不要更改此文件</strong>，要更改默认配置，可以复制 <code>fail2ban.conf</code> 成 <code>/etc/fail2ban/fail2ban.local</code> ，更改此 <code>local</code> 文件</p>
<figure class="highlight shell"><figcaption><span>/etc/fail2ban/fail2ban.local</span></figcaption><table><tr><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line"></span><br><span class="line">loglevel = INFO</span><br><span class="line"></span><br><span class="line">logtarget = /var/log/fail2ban.log</span><br><span class="line"></span><br><span class="line">syslogsocket = auto</span><br><span class="line"></span><br><span class="line">socket = /var/run/fail2ban/fail2ban.sock</span><br><span class="line"></span><br><span class="line">pidfile = /var/run/fail2ban/fail2ban.pid</span><br><span class="line"></span><br><span class="line">dbfile = /var/lib/fail2ban/fail2ban.sqlite3</span><br><span class="line"></span><br><span class="line">dbpurgeage = 1d</span><br><span class="line"></span><br><span class="line">dbmaxmatches = 10</span><br><span class="line"></span><br><span class="line">[Definition]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Thread]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="jail-配置文件说明"><a href="#jail-配置文件说明" class="headerlink" title="jail 配置文件说明"></a>jail 配置文件说明</h3><p><code>/etc/fail2ban/jail.conf</code> 主要设置启用 <code>ban</code> 动作的服务及动作阀值。<strong>不要更改此文件</strong>，要更改此处的默认配置，可以复制 <code>jail.conf</code> 到 <code>/etc/fail2ban/jail.local</code>，更改此文件中的默认配置</p>
<figure class="highlight shell"><figcaption><span>/etc/fail2ban/jail.local</span></figcaption><table><tr><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">ignorecommand =</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">屏蔽时间，默认单位：秒</span></span><br><span class="line">bantime  = 10m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个时间段内超过 maxretry 定义的次数会被 ban 掉</span></span><br><span class="line">findtime  = 10m</span><br><span class="line">maxretry = 5</span><br><span class="line"></span><br><span class="line">maxmatches = %(maxretry)s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志修改检测机制(gamin、polling和auto这三种)</span></span><br><span class="line">backend = auto</span><br><span class="line"></span><br><span class="line">usedns = warn</span><br><span class="line">logencoding = auto</span><br><span class="line">enabled = false</span><br><span class="line">mode = normal</span><br><span class="line">filter = %(__name__)s[mode=%(mode)s]</span><br><span class="line">destemail = root@localhost</span><br><span class="line">sender = root@&lt;fq-hostname&gt;</span><br><span class="line">mta = sendmail</span><br><span class="line">protocol = tcp</span><br><span class="line">chain = &lt;known/chain&gt;</span><br><span class="line">port = 0:65535</span><br><span class="line">fail2ban_agent = Fail2Ban/%(fail2ban_version)s</span><br><span class="line">banaction = iptables-multiport</span><br><span class="line">banaction_allports = iptables-allports</span><br><span class="line">action_ = %(banaction)s[port=&quot;%(port)s&quot;, protocol=&quot;%(protocol)s&quot;, chain=&quot;%(chain)s&quot;]</span><br><span class="line">action_mw = %(action_)s</span><br><span class="line">            %(mta)s-whois[sender=&quot;%(sender)s&quot;, dest=&quot;%(destemail)s&quot;, protocol=&quot;%(protocol)s&quot;, chain=&quot;%(chain)s&quot;]</span><br><span class="line">action_mwl = %(action_)s</span><br><span class="line">             %(mta)s-whois-lines[sender=&quot;%(sender)s&quot;, dest=&quot;%(destemail)s&quot;, logpath=&quot;%(logpath)s&quot;, chain=&quot;%(chain)s&quot;]</span><br><span class="line">action_xarf = %(action_)s</span><br><span class="line">             xarf-login-attack[service=%(__name__)s, sender=&quot;%(sender)s&quot;, logpath=&quot;%(logpath)s&quot;, port=&quot;%(port)s&quot;]</span><br><span class="line">action_cf_mwl = cloudflare[cfuser=&quot;%(cfemail)s&quot;, cftoken=&quot;%(cfapikey)s&quot;]</span><br><span class="line">                %(mta)s-whois-lines[sender=&quot;%(sender)s&quot;, dest=&quot;%(destemail)s&quot;, logpath=&quot;%(logpath)s&quot;, chain=&quot;%(chain)s&quot;]</span><br><span class="line">action_blocklist_de  = blocklist_de[email=&quot;%(sender)s&quot;, service=&quot;%(__name__)s&quot;, apikey=&quot;%(blocklist_de_apikey)s&quot;, agent=&quot;%(fail2ban_agent)s&quot;]</span><br><span class="line">action_badips = badips.py[category=&quot;%(__name__)s&quot;, banaction=&quot;%(banaction)s&quot;, agent=&quot;%(fail2ban_agent)s&quot;]</span><br><span class="line">action_badips_report = badips[category=&quot;%(__name__)s&quot;, agent=&quot;%(fail2ban_agent)s&quot;]</span><br><span class="line">action_abuseipdb = abuseipdb</span><br><span class="line">action = %(action_)s</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中 <code>[DEFAULT]</code> 块定义了默认的配置，具体的服务配置中 (如 <code>/etc/fail2ban/jail.d/ssh.local</code>)，可以覆盖默认值。 </p>
<p>针对具体服务配置防护，以 <code>sshd</code> 为例，手动创建配置 <code>/etc/fail2ban/jail.d/sshd.local</code></p>
<figure class="highlight shell"><figcaption><span>/etc/fail2ban/jail.d/sshd.local</span></figcaption><table><tr><td class="code"><pre><span class="line">[sshd]</span><br><span class="line">enabled = true</span><br><span class="line">port = 22</span><br><span class="line">filter = sshd</span><br><span class="line">action = iptables[name=SSH, port=ssh, protocol=tcp]</span><br><span class="line">logpath = /var/log/secure</span><br><span class="line">maxretry = 3</span><br><span class="line">bantime = 43200</span><br><span class="line">findtime = 3600</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>[sshd]</code> : 名称，可以随便填写</li>
<li><code>enabled =true</code> ： 启用此配置</li>
<li><code>port = 22</code> : 服务端口</li>
<li><code>filter = sshd</code> : 应用的 <code>filter</code> 名称，对应的 <a href="#filter-%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E"><code>filter</code> 配置</a> 位于 <code>/etc/fail2ban/filter.d/sshd.conf</code></li>
<li><code>action = iptables[name=SSH, port=ssh, protocol=tcp]</code> : 执行的动作，对应 <code>/etc/fail2ban/action.d/iptables.conf</code> ，并传入 <code>name=SSH, port=ssh, protocol=tcp</code>，此处传入的端口 <code>ssh</code> 默认为 22 ，如果端口不为 22 ，需要更改为对应端口，传入的 <code>name</code> 会在定义防火墙链时被当做链名的一部分</li>
<li><code>logpath = /var/log/secure</code> : 要过滤的日志记录文件路径</li>
<li><code>maxretry = 3</code> ： 执行封禁动作前允许的错误记录数</li>
<li><code>bantime = 43200</code> ： 执行封禁的时长（秒）</li>
<li><code>findtime = 3600</code> ：此时长（秒）内达到 <code>maxretry</code> 次就执行封禁动作</li>
</ul>
<p>配置好之后，重启 <code>fail2ban</code> 使配置生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart fail2ban</span><br></pre></td></tr></table></figure>
<p>或者执行以下命令，在不重启 <code>fail2ban</code> 的情况下重新分析并加载配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fail2ban-client reload</span><br></pre></td></tr></table></figure>

<p>执行以下命令查看 <code>fail2ban</code> 的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fail2ban-client status</span></span><br><span class="line">Status</span><br><span class="line">|- Number of jail:	1</span><br><span class="line">`- Jail list:	sshd</span><br></pre></td></tr></table></figure>
<p>可以看到当前只启动了 <code>sshd</code> 这一个 <code>jail</code></p>
<p>执行以下命令查看 <code>sshd</code> 的防护情况，可以看到目前有哪些 ip 被封锁，以及过去总共多少 ip 被封锁</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fail2ban-client status sshd</span></span><br><span class="line">Status for the jail: sshd</span><br><span class="line">|- Filter</span><br><span class="line">|  |- Currently failed:	0</span><br><span class="line">|  |- Total failed:	0</span><br><span class="line">|  `- Journal matches:	_SYSTEMD_UNIT=sshd.service + _COMM=sshd</span><br><span class="line">`- Actions</span><br><span class="line">   |- Currently banned:	1</span><br><span class="line">   |- Total banned:	1</span><br><span class="line">   `- Banned IP list:	54.193.188.141</span><br></pre></td></tr></table></figure>

<h3 id="filter-配置说明"><a href="#filter-配置说明" class="headerlink" title="filter 配置说明"></a>filter 配置说明</h3><p><code>fail2ban</code> 使用的各个 <code>filter</code> 位于 <code>/etc/fail2ban/filter.d/</code> 下。其中主要配置了日志的过滤规则  </p>
<p>以创建防护 <code>VNC</code> 的 <code>filter</code> 来说明。<code>VNC</code> 的日志中，如果有恶意登录，经常会出现以下日志记录：</p>
<figure class="highlight shell"><figcaption><span>/home/USER1/.vnc/USER1\:1.log</span></figcaption><table><tr><td class="code"><pre><span class="line">Sat Aug 20 10:35:27 2022</span><br><span class="line"> Connections: blacklisted: 185.170.144.226</span><br><span class="line"> Connections: blacklisted: 185.170.144.226</span><br><span class="line"></span><br><span class="line">Sat Aug 20 10:35:28 2022</span><br><span class="line"> Connections: blacklisted: 185.170.144.226</span><br><span class="line"> Connections: blacklisted: 185.170.144.226</span><br><span class="line"></span><br><span class="line">Sat Aug 20 10:35:29 2022</span><br><span class="line"> Connections: blacklisted: 185.170.144.226</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>filter</code> 的匹配规则里面，<strong>行的开头一定要先匹配到时间</strong>，时间格式可以试试系统可以识别的格式，如果开头不能匹配到时间，规则会匹配失败，因此，如果日志开头不是时间格式，需要修改日志格式，本例中，处理 <code>vnc</code> 日志时，会先在行首添加时间    </p>
</blockquote>
<p>可以根据此日志记录，创建针对 <code>VNC</code> 服务的日志过滤规则，手动创建文件 <code>/etc/fail2ban/filter.d/vnc.local</code></p>
<figure class="highlight shell"><figcaption><span>/etc/fail2ban/filter.d/vnc.local</span></figcaption><table><tr><td class="code"><pre><span class="line">[Definition]</span><br><span class="line">failregex = .*Connections: blacklisted: &lt;HOST&gt;</span><br><span class="line">ignoreregex =</span><br></pre></td></tr></table></figure>

<p>创建好配置文件，使配置生效前，一定要对 <code>filter</code> 配置文件的有效性进行测试，<code>fail2ban</code> 提供了命令 <code>fail2ban-regex</code> 用来测试 <code>filter</code> 的正则表达式，使用方法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fail2ban-regex /home/USER1/.vnc/USER1\:1.<span class="built_in">log</span> vnc</span></span><br><span class="line"></span><br><span class="line">Running tests</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">Use   failregex filter file : vnc, basedir: /etc/fail2ban</span><br><span class="line">Use         log file : /home/USER1/.vnc/USER1\:1.log</span><br><span class="line">Use         encoding : UTF-8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Results</span><br><span class="line">=======</span><br><span class="line"></span><br><span class="line">Failregex: 171210 total</span><br><span class="line">|-  #) [# of hits] regular expression</span><br><span class="line">|   1) [171210] .*Connections: blacklisted: &lt;HOST&gt;</span><br><span class="line">`-</span><br><span class="line"></span><br><span class="line">Ignoreregex: 0 total</span><br><span class="line"></span><br><span class="line">Date template hits:</span><br><span class="line">|- [# of hits] date format</span><br><span class="line">|  [377319] &#123;^LN-BEG&#125;(?:DAY )?MON Day %k:Minute:Second(?:\.Microseconds)?(?: ExYear)?</span><br><span class="line">`-</span><br><span class="line"></span><br><span class="line">Lines: 377319 lines, 0 ignored, 171210 matched, 206109 missed</span><br><span class="line">[processed in 23.67 sec]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以上命令使用规则 <code>vnc</code>，匹配日志文件 <code>/home/USER1/.vnc/USER1\:1.log</code>，结果中显示：<code>Lines: 377319 lines, 0 ignored, 171210 matched, 206109 missed</code>，可以说明匹配到了需要的内容  </p>
<p>也可以通过以下命令，验证具体的正则表达式是否能匹配到指定的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fail2ban-regex <span class="string">&#x27; Connections: blacklisted: 185.170.144.226&#x27;</span> <span class="string">&#x27;.*Connections: blacklisted: &lt;HOST&gt;&#x27;</span></span></span><br><span class="line"></span><br><span class="line">Running tests</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">Use   failregex line : .*Connections: blacklisted: &lt;HOST&gt;</span><br><span class="line">Use      single line :  Connections: blacklisted: 185.170.144.226</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Results</span><br><span class="line">=======</span><br><span class="line"></span><br><span class="line">Failregex: 1 total</span><br><span class="line">|-  #) [# of hits] regular expression</span><br><span class="line">|   1) [1] .*Connections: blacklisted: &lt;HOST&gt;</span><br><span class="line">`-</span><br><span class="line"></span><br><span class="line">Ignoreregex: 0 total</span><br><span class="line"></span><br><span class="line">Date template hits:</span><br><span class="line"></span><br><span class="line">Lines: 1 lines, 0 ignored, 1 matched, 0 missed</span><br><span class="line">[processed in 0.03 sec]</span><br></pre></td></tr></table></figure>
<p>以上结果显示 <code>Lines: 1 lines, 0 ignored, 1 matched, 0 missed</code> , 说明日志被正则表达式匹配到了  </p>
<blockquote>
<p>以上命令中，隐含了日志开始匹配到了时间格式</p>
</blockquote>
<p>创建 <code>ban</code> 配置，手动创建配置文件 <code>/etc/fail2ban/jail.d/vnc.local</code>  </p>
<figure class="highlight shell"><figcaption><span>/etc/fail2ban/jail.d/vnc.local</span></figcaption><table><tr><td class="code"><pre><span class="line">[vnc]</span><br><span class="line">enabled = true</span><br><span class="line">port = 5901</span><br><span class="line">filter = vnc</span><br><span class="line">action = iptables[name=VNC, port=5901, protocol=tcp]</span><br><span class="line">logpath = /home/cosmos/.vnc/cosmos:1.log</span><br><span class="line">maxretry = 3</span><br><span class="line">bantime = 43200</span><br><span class="line">findtime = 3600</span><br></pre></td></tr></table></figure>

<p>配置更改完后，重启 <code>fail2ban</code> 使配置生效  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart fail2ban</span><br></pre></td></tr></table></figure>
<p>重启后，使用以下命令查看 <code>fail2ban</code> 状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fail2ban-client status</span></span><br><span class="line">Status</span><br><span class="line">|- Number of jail:	2</span><br><span class="line">`- Jail list:	sshd, vnc</span><br></pre></td></tr></table></figure>
<p>如果输出显示 : <code>ERROR   Failed to access socket path: /var/run/fail2ban/fail2ban.sock. Is fail2ban running? </code>，说明 <code>fail2ban</code> 启动失败，可能是配置文件存在问题，比如 <code>fail2ban</code> 服务状态如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl status fail2ban -l</span></span><br><span class="line"> fail2ban.service - Fail2Ban Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/fail2ban.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: exit-code) since Sat 2022-08-20 13:33:48 CST; 24s ago</span><br><span class="line">     Docs: man:fail2ban(1)</span><br><span class="line">  Process: 2520 ExecStop=/usr/bin/fail2ban-client stop (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 2536 ExecStart=/usr/bin/fail2ban-server -xf start (code=exited, status=255)</span><br><span class="line">  Process: 2533 ExecStartPre=/bin/mkdir -p /run/fail2ban (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 2536 (code=exited, status=255)</span><br><span class="line"></span><br><span class="line">Aug 20 13:33:47 myserver-cn systemd[1]: Starting Fail2Ban Service...</span><br><span class="line">Aug 20 13:33:47 myserver-cn systemd[1]: Started Fail2Ban Service.</span><br><span class="line">Aug 20 13:33:48 myserver-cn fail2ban-server[2536]: 2022-08-20 13:33:48,058 fail2ban                </span><br><span class="line">    [2536]: ERROR   Failed during configuration: Have not found any log file for vnc jail</span><br><span class="line">Aug 20 13:33:48 myserver-cn fail2ban-server[2536]: 2022-08-20 13:33:48,060 fail2ban               </span><br><span class="line">    [2536]: ERROR   Async configuration of server failed</span><br><span class="line">Aug 20 13:33:48 myserver-cn systemd[1]: fail2ban.service: main process exited, code=exited, status=255/n/a</span><br><span class="line">Aug 20 13:33:48 myserver-cn systemd[1]: Unit fail2ban.service entered failed state.</span><br><span class="line">Aug 20 13:33:48 myserver-cn systemd[1]: fail2ban.service failed.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出中显示 <code>Failed during configuration: Have not found any log file for vnc jail</code>，说明 <code>jail.d/vnc.local</code> 中配置的日志路径或者是权限有问题，需要检查此处配置。  </p>
<blockquote>
<p>此处报错是因为 <code>jail.d/vnc.local</code> 中配置的日志路径如下： </p>
<figure class="highlight shell"><figcaption><span>jail.d/vnc.local</span></figcaption><table><tr><td class="code"><pre><span class="line">logpath = /home/cosmos/.vnc/cosmos\:1.log</span><br></pre></td></tr></table></figure>
<p>配置文件中不需要对 <code>:</code> 进行转义。</p>
</blockquote>
<p>配置无误，重启服务生效后，可以检查 <code>vnc</code> 对应的 <code>ban</code> 的状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fail2ban-client status vnc</span></span><br><span class="line">Status for the jail: vnc</span><br><span class="line">|- Filter</span><br><span class="line">|  |- Currently failed:	22</span><br><span class="line">|  |- Total failed:	52632</span><br><span class="line">|  `- File list:	/home/cosmos/.vnc/cosmos:1.log.bak</span><br><span class="line">`- Actions</span><br><span class="line">   |- Currently banned:	18</span><br><span class="line">   |- Total banned:	18</span><br><span class="line">   `- Banned IP list:	212.80.219.226 212.80.219.175 175.211.155.52 ...</span><br></pre></td></tr></table></figure>
<p>查看防火墙状态，可以看到被封的 ip ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -L -v -n</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_42.png"></p>
<p>如果被封禁的 ip 中有被误伤的，需要解禁，使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fail2ban-client set vnc  unbanip 45.33.65.249</span><br></pre></td></tr></table></figure>
<p>命令中的 <code>vnc</code> 指 <code>ban</code> 配置文件 <code>/etc/fail2ban/jail.d/vnc.local</code> 中的 <code>[vnc]</code> <a href="#jail-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E">名称</a></p>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://www.fail2ban.org/wiki/index.php/Main_Page">fail2ban 官网</a><br><a href="https://www.fail2ban.org/wiki/index.php/MANUAL_0_8#Filters">fail2ban 配置官网说明</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>fail2ban</tag>
      </tags>
  </entry>
  <entry>
    <title>filebeat 使用详解</title>
    <url>/202307201352/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Filebeat 8.8</li>
</ul>
<p>Filebeat 启动之后，会根据配置文件中配置的数据收集路径启动 1 个或者多个 <code>inputs</code>。针对匹配到的每个文件，Filebeat 都会启动一个对应的 <code>harvester</code>，每个 <code>harvester</code> 读取一个单独的文件内容，并将其中的新内容发送到 <code>libbeat</code>，<code>libbeat</code> 会整合数据并将其发送到配置的 <code>output</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Filebeat 总览](https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html)">[1]</span></a></sup><br><img src="https://i.csms.tech/img_201.png"></p>
<p>如果 <code>input</code> 类型为 <code>log</code>，<code>input</code> 会负责找到配置中匹配到的文件，并为每个文件启动一个 <code>harvester</code>。每个 <code>input</code> 都运行在自己独立的 <code>Go routine</code> (例程) 中。 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[How Filebeat works](https://www.elastic.co/guide/en/beats/filebeat/current/how-filebeat-works.html)">[4]</span></a></sup></p>
<p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/how-filebeat-works.html">Filebeat 工作原理</a></p>
<p>Filebeat 会将收割(<code>harvest</code>) 的每个文件的状态存储到 <code>registry</code>。因此如果要让 Filebeat 从头开始收集数据，只需要删除 <code>registry</code> 文件即可。可以使用命令 <code>filebeat export config</code> 找到 <code>data</code> 目录，<code>registry</code> 位于其中。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation-configuration.html">Filebeat 官方安装文档</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-8.8.2-x86_64.rpm</span><br><span class="line">rpm -vi filebeat-8.8.2-x86_64.rpm</span><br><span class="line"></span><br><span class="line">systemctl enable --now filebeat</span><br></pre></td></tr></table></figure>

<h1 id="filebeat-command-line-interface"><a href="#filebeat-command-line-interface" class="headerlink" title="filebeat command-line interface"></a>filebeat command-line interface</h1><p><code>filebeat</code> 命令常用功能 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Filebeat command reference](https://www.elastic.co/guide/en/beats/filebeat/current/command-line-options.html#command-line-options)">[3]</span></a></sup></p>
<table>
<thead>
<tr>
<th>子命令</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>help</code></td>
<td>查看命令帮助信息<br/><code>filebeat help COMMAND_NAME [FLAGS]</code></td>
<td></td>
</tr>
<tr>
<td><code>export</code></td>
<td>导出 <em>配置</em> 等信息</td>
<td><a href="#export"><code>export</code> 使用</a></td>
</tr>
<tr>
<td><code>modules</code></td>
<td>模块管理命令。用来 <code>enable</code> 或者 <code>disable</code> 位于 <code>modules.d</code> 中的 <em>模块</em> <br/><code>filebeat modules disable MODULE</code><br/><code>filebeat modules enable MODULE</code><br/><code>filebeat modules list</code></td>
<td><a href="#Data-collection-modules">Data collection modules</a></td>
</tr>
<tr>
<td><code>run</code></td>
<td>启动 filebeat</td>
<td></td>
</tr>
<tr>
<td><code>test</code></td>
<td>测试配置文件        或者到 <code>output</code> 的连接<br/><code>filebeat test config</code><br/><code>filebeat test output</code></td>
<td></td>
</tr>
<tr>
<td><code>version</code></td>
<td>显示当前版本信息</td>
<td></td>
</tr>
</tbody></table>
<span id="more"></span>
<h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><h3 id="查看-filebeat-加载的配置"><a href="#查看-filebeat-加载的配置" class="headerlink" title="查看 filebeat 加载的配置"></a>查看 filebeat 加载的配置</h3><p>要查看 <code>filebeat</code> 当前使用的配置，信息，可以使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">filebeat <span class="built_in">export</span> config</span></span><br><span class="line">filebeat:</span><br><span class="line">  config:</span><br><span class="line">    modules:</span><br><span class="line">      path: /etc/filebeat/modules.d/*.yml</span><br><span class="line">      reload:</span><br><span class="line">        enabled: false</span><br><span class="line">  inputs:</span><br><span class="line">  - enabled: false</span><br><span class="line">    id: my-filestream-id</span><br><span class="line">    paths:</span><br><span class="line">    - /var/log/*.log</span><br><span class="line">    type: filestream</span><br><span class="line">output:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    hosts:</span><br><span class="line">    - localhost:9200</span><br><span class="line">path:</span><br><span class="line">  config: /etc/filebeat</span><br><span class="line">  data: /var/lib/filebeat</span><br><span class="line">  home: /usr/share/filebeat</span><br><span class="line">  logs: /var/log/filebeat</span><br><span class="line">processors:</span><br><span class="line">- add_host_metadata:</span><br><span class="line">    when:</span><br><span class="line">      not:</span><br><span class="line">        contains:</span><br><span class="line">          tags: forwarded</span><br><span class="line">- add_cloud_metadata: null</span><br><span class="line">- add_docker_metadata: null</span><br><span class="line">- add_kubernetes_metadata: null</span><br><span class="line">setup:</span><br><span class="line">  kibana: null</span><br><span class="line">  template:</span><br><span class="line">    settings:</span><br><span class="line">      index:</span><br><span class="line">        number_of_shards: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="收集数据"><a href="#收集数据" class="headerlink" title="收集数据"></a>收集数据</h1><p>Filebeat 有多种收集数据的方式 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Filebeat 官方安装文档](https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation-configuration.html)">[2]</span></a></sup></p>
<ul>
<li><code>Data collection modules</code> </li>
<li><code>ECS loggers</code></li>
<li><code>Manual Filebeat configuration</code></li>
</ul>
<h2 id="Data-collection-modules"><a href="#Data-collection-modules" class="headerlink" title="Data collection modules"></a>Data collection modules</h2><p>要使用 Filebeat 提供的模块，首先要启用对应的模块</p>
<ol>
<li><p>查看 <code>modules</code>，命令会列出 <code>Enabled</code> 的模块，以及 <code>Disabled</code> 的模块</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">filebeat modules list</span></span><br><span class="line">Enabled:</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">activemq</span><br><span class="line">apache</span><br><span class="line">auditd</span><br><span class="line">aws</span><br><span class="line">awsfargate</span><br><span class="line">azure</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>要启用对应模块，使用以下命令</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">filebeat modules <span class="built_in">enable</span> nginx</span></span><br><span class="line">Enabled nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">filebeat modules list</span></span><br><span class="line">Enabled:</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">activemq</span><br><span class="line">apache</span><br><span class="line">auditd</span><br><span class="line">aws</span><br><span class="line">awsfargate</span><br><span class="line">azure</span><br><span class="line">barracuda</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>模块启用后，在 Filebeat 的配置文件目录中(<code>/etc/filebeat/modules.d/</code>)生成以对应模块命名的配置文件，未启用的 <code>modules</code> 以 <code>.disabled</code> 结尾<br> <img src="https://i.csms.tech/img_202.png"></p>
<p> 根据需求修改对应模块 (如<code>/etc/filebeat/modules.d/nginx.yml</code>) 的配置文件</p>
<p> 使用以下命令测试 Filebeat 配置</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">filebeat <span class="built_in">test</span> config</span> </span><br><span class="line">Config OK</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Filebeat-配置详解"><a href="#Filebeat-配置详解" class="headerlink" title="Filebeat 配置详解"></a>Filebeat 配置详解</h1><p>Filebeat 配置文件为 <code>filebeat.yml</code>，配置使用 YAML 格式。</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: filestream</span><br><span class="line">  id: my-filestream-id </span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/system.log</span><br><span class="line">    - /var/log/wifi.log</span><br><span class="line">- type: filestream</span><br><span class="line">  id: apache-filestream-id</span><br><span class="line">  paths:</span><br><span class="line">    - &quot;/var/log/apache2/*&quot;</span><br><span class="line">  fields:</span><br><span class="line">    apache: true</span><br><span class="line">  fields_under_root: true</span><br></pre></td></tr></table></figure>

<p>配置文件说明</p>
<ul>
<li>可以在 <code>filebeat.inputs</code> 中配置多个 <code>input</code></li>
<li>同一个 <code>type</code> 的 <code>input</code> 可以配置多个</li>
</ul>
<blockquote>
<p><em><strong><code>log</code> 类型将要废弃，使用 <code>filestream</code></strong></em></p>
</blockquote>
<p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/configuration-filebeat-options.html">Filebeat 支持的 <code>input</code> 的 <code>type</code> 列表</a></p>
<h2 id="Global-配置"><a href="#Global-配置" class="headerlink" title="Global 配置"></a>Global 配置</h2><p>全局配置在 <code>filebeat</code> namespace 中 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Global Filebeat configurations](https://www.elastic.co/guide/en/beats/filebeat/current/configuration-general-options.html#configuration-global-options)">[5]</span></a></sup></p>
<ul>
<li><code>filebeat.registry.flush</code> - 控制 <code>filebeat</code> 将 <code>registry entries</code> 写入磁盘的间隔。<em>默认为 1s</em></li>
</ul>
<h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>参考以下配置，修改 Filebeat 日志级别为 <code>debug</code></p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level: debug</span><br></pre></td></tr></table></figure>

<h2 id="inputs-配置"><a href="#inputs-配置" class="headerlink" title="inputs 配置"></a>inputs 配置</h2><p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/configuration-filebeat-options.html">inputs 配置官方参考文档</a></p>
<h3 id="filestream"><a href="#filestream" class="headerlink" title="filestream"></a>filestream</h3><p><code>filestream</code> input 是 <code>log</code> input 的升级版本，<code>log</code> input 将会被弃用。 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[filestream input](https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-filestream.html)">[8]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: filestream </span><br><span class="line">  id: my-filestream-id</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/system.log</span><br><span class="line">    - /var/log/wifi.log</span><br><span class="line">- type: filestream </span><br><span class="line">  id: apache-filestream-id</span><br><span class="line">  paths:</span><br><span class="line">    - &quot;/var/log/apache2/*&quot;</span><br><span class="line">  fields:</span><br><span class="line">    apache: true</span><br><span class="line">  fields_under_root: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">prospector.scanner.recursive_glob</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">prospector.scanner.exclude_files: [<span class="string">&#x27;\.gz$&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">prospector.scanner.include_files: [<span class="string">&#x27;^/var/log/.*&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">exclude_lines: [<span class="string">&#x27;^DBG&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">include_lines: [<span class="string">&#x27;^ERR&#x27;</span>, <span class="string">&#x27;^WARN&#x27;</span>]</span></span><br></pre></td></tr></table></figure>

<p><em><strong>Filebeat 默认不支持读取网络共享数据或者 cloud providers 数据</strong></em>，<a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-filestream.html#filestream-file-identity">原因说明</a></p>
<p>常用参数说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>id</code></td>
<td>每个 <code>filestream</code> 类型的 <code>input</code> 都必须有个独一无二的 ID，用来追踪文件状态<br/><strong>修改 id 会导致数据重新采集并发送</strong></td>
<td></td>
</tr>
<tr>
<td><code>paths</code></td>
<td>要采集的数据路径</td>
<td><code>/var/log/*/*.log</code></td>
</tr>
<tr>
<td><code>prospector.scanner.recursive_glob</code></td>
<td>默认为 <code>true</code>。在匹配文件路径时可以将路径右侧的 <code>**</code> 扩展到最多 8 层的 <code>*</code>。例如: <code>/foo/**</code> 可以匹配路径 <code>/foo</code>, <code>/foo/*</code>, <code>/foo/*/*</code> 等等</td>
<td></td>
</tr>
<tr>
<td><code>prospector.scanner.exclude_files</code></td>
<td>列表类型，使用正则表达式排除要采集的数据文件，默认不排除</td>
<td><code>prospector.scanner.exclude_files: [&#39;\.gz$&#39;]</code></td>
</tr>
<tr>
<td><code>prospector.scanner.include_files</code></td>
<td>列表类型，使用正则表达式包含要采集的数据文件</td>
<td><code>prospector.scanner.include_files: [&#39;^/var/log/.*&#39;]</code></td>
</tr>
<tr>
<td><code>prospector.scanner.check_interval</code></td>
<td>Filebeat 检查指定路径下新文件的周期，默认 10s</td>
<td></td>
</tr>
<tr>
<td><code>exclude_lines</code></td>
<td>列表类型。使用正则表达式过滤要排除采集的行，drop 掉匹配到的行。</td>
<td></td>
</tr>
<tr>
<td><code>include_lines</code></td>
<td><strong>如果同时定义了 <code>exclude_lines</code> 和 <code>include_lines</code>，Filebeat 先处理 <code>include_lines</code>，然后处理 <code>exclude_lines</code>，和它们的配置顺序无关</strong></td>
<td></td>
</tr>
<tr>
<td><code>buffer_size</code></td>
<td>每个 harvester 使用的 buffer（单位为 <code>bytes</code>）。默认为 <code>16384</code></td>
<td></td>
</tr>
<tr>
<td><code>message_max_bytes</code></td>
<td>单行 message 的最大大小，超过的数据会被忽略。默认为 10MB (10485760)</td>
<td></td>
</tr>
<tr>
<td><code>fields</code></td>
<td>添加额外的字段（<code>field</code>）到事件（<code>event</code>）<br/><em><strong>fields 参数可以在 Filebeat 配置文件的不同级别进行定义，包括 全局级别、输入级别和输出级别。在不同级别定义的 <code>fields</code> 参数会被合并，并最终成为事件的一部分。</strong></em></td>
<td><a href="#fields-%E5%8F%82%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E">使用说明</a></td>
</tr>
<tr>
<td><code>fields_under_root</code></td>
<td>如果为 <code>true</code>，自定义添加的字段将会位于顶层。默认自定义添加的字段位于 <code>fields</code> 下。<em><strong>如果自定义字段已存在，会覆盖已有字段</strong></em></td>
<td></td>
</tr>
</tbody></table>
<h4 id="fields-参数使用说明"><a href="#fields-参数使用说明" class="headerlink" title="fields 参数使用说明"></a>fields 参数使用说明</h4><p>在 Filebeat 中，<code>fields</code> 参数用于添加额外的字段（field）到事件（event）。这些字段将作为事件的一部分存储在 Elasticsearch 或者其他输出目的地中，从而使你可以在后续的数据处理或分析中使用这些字段。</p>
<p><code>fields</code> 参数可以在 Filebeat 配置文件的不同级别进行定义，包括 <em>全局级别</em>、<em>输入级别</em> 和 <em>输出级别</em>。在不同级别定义的 <code>fields</code> 参数会被合并，并最终成为事件的一部分。</p>
<h5 id="全局级别"><a href="#全局级别" class="headerlink" title="全局级别"></a>全局级别</h5><p>全局级别的 <code>fields</code> 配置示例如下</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.config:</span><br><span class="line">  modules:</span><br><span class="line">    path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  fields:</span><br><span class="line">    environment: production</span><br><span class="line">    application: my_app</span><br></pre></td></tr></table></figure>
<p>在全局级别定义的 <code>fields</code> 参数将会应用到所有的输入和输出中，这里定义了两个字段 <code>environment</code> 和 <code>application</code>，并且所有的事件都会包含这两个字段。</p>
<h5 id="输入级别"><a href="#输入级别" class="headerlink" title="输入级别"></a>输入级别</h5><p>输入级别的 <code>fields</code> 配置示例如下</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">  - type: filestream</span><br><span class="line">    paths:</span><br><span class="line">      - /var/log/system.log</span><br><span class="line">    fields:</span><br><span class="line">      log_type: system</span><br></pre></td></tr></table></figure>
<p>在输入级别定义的 <code>fields</code> 参数将仅应用于该输入所产生的事件，这里定义了一个字段 <code>log_type</code>，并且仅应用于 <code>system.log</code> 日志文件的事件。</p>
<h5 id="输出级别"><a href="#输出级别" class="headerlink" title="输出级别"></a>输出级别</h5><p>输出级别的 <code>fields</code> 配置示例如下</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://localhost:9200&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    data_center: us-east-1</span><br></pre></td></tr></table></figure>
<p>在输出级别定义的 <code>fields</code> 参数将仅应用于发送到 Elasticsearch 的事件，这里定义了一个字段 <code>data_center</code>，并且所有发送到 Elasticsearch 的事件都会包含这个字段。</p>
<h2 id="outputs-配置"><a href="#outputs-配置" class="headerlink" title="outputs 配置"></a>outputs 配置</h2><p><code>outputs</code> 配置了 Filebeat 发送数据的目标，<em><strong>只能配置一个同一类型的 output</strong></em></p>
<p>Filebeat 支持的 output 如下 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Configure the output](https://www.elastic.co/guide/en/beats/filebeat/current/configuring-output.html)">[6]</span></a></sup></p>
<ul>
<li>Elasticsearch Service</li>
<li>Elasticsearch</li>
<li>Logstash</li>
<li>Kafka</li>
<li>Redis</li>
<li>File</li>
<li>Console</li>
</ul>
<h3 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h3><p>Console output 输出数据到 <code>stdout</code></p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">output.console:</span><br><span class="line">  pretty: true</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pretty: true</code> - 数据输出使用易读的格式，默认值为 <code>false</code></li>
</ul>
<h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p>Filebeat 可以直接将数据直接写入 Elasticsarch，如果无需对数据进行复杂的格式化处理或者转换，可以使用 Filebeat 直接将数据写入 Elasticsearch</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: filestream</span><br><span class="line">  paths:</span><br><span class="line">    - /root/temp/*.log</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://localhost:9200&quot;, &quot;http://172.31.19.164:9200&quot;, &quot;http://172.31.21.3:9200&quot;]</span><br><span class="line">  username: &quot;newadmin&quot;</span><br><span class="line">  password: &quot;password&quot;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">index: <span class="string">&quot;my_test_log&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setup.template.name: <span class="string">&quot;my_test_log&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setup.template.pattern: <span class="string">&quot;my_test_log-*&quot;</span></span></span><br></pre></td></tr></table></figure>
<p>Filebeat 上传到 Elasticsearch 的数据，保存到 Elasticsearch 的索引默认为类似 <code>.ds-filebeat-8.8.2-2023.07.28-000001</code> 的格式。如果要自定义发送到 Elasticsearch 的索引，可以使用 <code>index</code> 参数配置，如以上配置中的 <code>index: &quot;my-log-data-%&#123;+yyyy.MM.dd&#125;&quot;</code>，会将每天的数据写入一个索引中。</p>
<p>常用参数说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>enabled</code></td>
<td>默认为 <code>true</code>。是否启用此 output</td>
<td></td>
</tr>
<tr>
<td><code>hosts</code></td>
<td>ES 节点列表。数据使用 RR（<code>round robin</code>）发送到各个节点，如果有节点不可以，自动将数据发送到其他节点，相当于负载均衡及高可用</td>
<td></td>
</tr>
<tr>
<td><code>protocol</code></td>
<td>如果节点列表中未指定连接 ES 使用的协议，需要使用此参数指定（<code>http</code>、<code>https</code>）</td>
<td></td>
</tr>
<tr>
<td><code>compression_level</code></td>
<td>压缩级别，取值范围     <code>1</code> (best speed) to <code>9</code> (best compression)。默认为 <code>0</code>，表示关闭压缩。启用后会节省网络带宽，但是会增加 CPU 负载</td>
<td></td>
</tr>
<tr>
<td><code>loadbalance</code></td>
<td>默认为 <code>true</code>。Filebeat 会并发连接所有的 ES 节点发送数据。配置为 <code>false</code>，Filebeat 同一时间只发送数据到一个随机节点</td>
<td></td>
</tr>
<tr>
<td><code>username</code><br/><code>password</code></td>
<td>Elasitcsearch 用户信息。<em><strong>建议单独创建只拥有上传权限的用户给 Filebeat 使用</strong></em>。</td>
<td><a href="#%E5%9C%A8-Elasticsearch-%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%BB%85%E8%83%BD%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%8F%8A%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90%E7%9A%84%E7%94%A8%E6%88%B7">权限配置参考</a></td>
</tr>
<tr>
<td><code>index</code></td>
<td>发送到 ES 的索引名称 。自定义了 <code>index</code> 后，必须同时定义索引模板，使用参数 <code>setup.template.name</code> 和 <code>setup.template.pattern</code></td>
<td></td>
</tr>
<tr>
<td><code>setup.template.name</code></td>
<td>自定义索引名，使用了 <code>output.elasticsearch.index</code> 后必须配置，定义索引名称，其值必须和 <code>output.elasticsearch.index</code> 相同</td>
<td></td>
</tr>
<tr>
<td><code>setup.template.pattern</code></td>
<td>使用了 <code>output.elasticsearch.index</code> 后必须配置，定义动态生成的索引名称，必须使用通配符 <code>*</code> 来支持动态生成的索引名称</td>
<td><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B4%A2%E5%BC%95">使用示例</a></td>
</tr>
<tr>
<td><code>indices</code></td>
<td>根据条件动态定义要发送到 Elasticsearch 的 index 名称。</td>
<td><a href="#%E5%AE%9E%E7%8E%B0%E5%B0%86%E4%B8%8D%E5%90%8C-input-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA%E5%88%B0-Elasticsearch-%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C%E7%9A%84%E7%B4%A2%E5%BC%95%E4%B8%AD">使用示例</a></td>
</tr>
</tbody></table>
<h4 id="在-Elasticsearch-中创建仅能创建索引及索引数据权限的用户"><a href="#在-Elasticsearch-中创建仅能创建索引及索引数据权限的用户" class="headerlink" title="在 Elasticsearch 中创建仅能创建索引及索引数据权限的用户"></a>在 Elasticsearch 中创建仅能创建索引及索引数据权限的用户</h4><p>为了安全，建议 <em><strong>Filebeat 中配置的 Elasticsearch 认证用户仅具有创建索引及索引数据的权限</strong></em>。参考以下示例创建，此处假设 <code>role</code> 和 <code>user</code> 分别为 <code>beats_uploadonly_role</code> 和 <code>beats_uploadonly_user</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PUT /_security/role/beats_uploadonly_role</span><br><span class="line">&#123;</span><br><span class="line">  &quot;cluster&quot;: [&quot;manage_index_templates&quot;, &quot;monitor&quot;, &quot;read_ilm&quot;],</span><br><span class="line">  &quot;indices&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;names&quot;: [&quot;*&quot;],   // 替换为允许的索引模式</span><br><span class="line">      &quot;privileges&quot;: [&quot;write&quot;, &quot;create_index&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后将用户 <code>beats_uploadonly_user</code> 绑定到 role <code>beats_uploadonly_role</code>。否则权限不足，Filebeat 启动后会报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&quot;log.level&quot;:&quot;error&quot;,&quot;@timestamp&quot;:&quot;2023-07-31T14:23:18.114+0800&quot;,&quot;log.logger&quot;:&quot;publisher_pipeline_output&quot;,&quot;log.origin&quot;:&#123;&quot;file.name&quot;:&quot;pipeline/client_worker.go&quot;,&quot;file.line&quot;:148&#125;,&quot;message&quot;:&quot;Failed to connect to backoff(elasticsearch(http://172.31.21.3:9200)): 403 Forbidden: &#123;\&quot;error\&quot;:&#123;\&quot;root_cause\&quot;:[&#123;\&quot;type\&quot;:\&quot;security_exception\&quot;,\&quot;reason\&quot;:\&quot;action [cluster:monitor/main] is unauthorized for user [beats_uploadonly_user] with effective roles [beats_uploadonly_role], this action is granted by the cluster privileges [monitor,manage,all]\&quot;&#125;],\&quot;type\&quot;:\&quot;security_exception\&quot;,\&quot;reason\&quot;:\&quot;action [cluster:monitor/main] is unauthorized for user [beats_uploadonly_user] with effective roles [beats_uploadonly_role], this action is granted by the cluster privileges [monitor,manage,all]\&quot;&#125;,\&quot;status\&quot;:403&#125;&quot;,&quot;service.name&quot;:&quot;filebeat&quot;,&quot;ecs.version&quot;:&quot;1.6.0&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;file.name&quot;:&quot;pipeline/client_worker.go&quot;,&quot;file.line&quot;:148&#125;,&quot;message&quot;:&quot;Failed to connect to backoff(elasticsearch(http://localhost:9200)): Connection marked as failed because the onConnect callback failed: failed to check for policy name &#x27;filebeat&#x27;: (status=403) &#123;\&quot;error\&quot;:&#123;\&quot;root_cause\&quot;:[&#123;\&quot;type\&quot;:\&quot;security_exception\&quot;,\&quot;reason\&quot;:\&quot;action [cluster:admin/ilm/get] is unauthorized for user [beats_uploadonly_user] with effective roles [beats_uploadonly_role], this action is granted by the cluster privileges [read_ilm,manage_ilm,manage,all]\&quot;&#125;],\&quot;type\&quot;:\&quot;security_exception\&quot;,\&quot;reason\&quot;:\&quot;action [cluster:admin/ilm/get] is unauthorized for user [beats_uploadonly_user] with effective roles [beats_uploadonly_role], this action is granted by the cluster privileges [read_ilm,manage_ilm,manage,all]\&quot;&#125;],\&quot;type\&quot;:\&quot;security_exception\&quot;,\&quot;reason\&quot;:\&quot;action [cluster:admin/ilm/get] is unauthorized for user [beats_uploadonly_user] with effective roles [beats_uploadonly_role], this action is granted by the cluster privileges [read_ilm,manage_ilm,manage,all]\&quot;&#125;,\&quot;status\&quot;:403&#125;&quot;,&quot;service.name&quot;:&quot;filebeat&quot;,&quot;ecs.version&quot;:&quot;1.6.0&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>以上角色和用户创建成功后，只能在 Elasticsearch 中创建索引和索引数据，无其他权限，可以参考以下测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -s --user beats_uploadonly_user:password123 http://localhost:9200/_cat/indices?pretty</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;error&quot; : &#123;</span><br><span class="line">    &quot;root_cause&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">        &quot;reason&quot; : &quot;action [indices:monitor/settings/get] is unauthorized for user [beats_uploadonly_user] with effective roles [beats_uploadonly_role], this action is granted by the index privileges [monitor,view_index_metadata,manage,all]&quot;,</span><br><span class="line">        &quot;suppressed&quot; : [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">            &quot;reason&quot; : &quot;action [indices:monitor/stats] is unauthorized for user [beats_uploadonly_user] with effective roles [beats_uploadonly_role], this action is granted by the index privileges [monitor,manage,all]&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">    &quot;reason&quot; : &quot;action [indices:monitor/settings/get] is unauthorized for user [beats_uploadonly_user] with effective roles [beats_uploadonly_role], this action is granted by the index privileges [monitor,view_index_metadata,manage,all]&quot;,</span><br><span class="line">    &quot;suppressed&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">        &quot;reason&quot; : &quot;action [indices:monitor/stats] is unauthorized for user [beats_uploadonly_user] with effective roles [beats_uploadonly_role], this action is granted by the index privileges [monitor,manage,all]&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot; : 403</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -XDELETE -s --user beats_uploadonly_user:password123 http://localhost:9200/project-app2-message?pretty&#123;</span></span><br><span class="line">  &quot;error&quot; : &#123;</span><br><span class="line">    &quot;root_cause&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">        &quot;reason&quot; : &quot;action [indices:admin/delete] is unauthorized for user [beats_uploadonly_user] with effective roles [beats_uploadonly_role] on indices [project-app2-message], this action is granted by the index privileges [delete_index,manage,all]&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot; : &quot;security_exception&quot;,</span><br><span class="line">    &quot;reason&quot; : &quot;action [indices:admin/delete] is unauthorized for user [beats_uploadonly_user] with effective roles [beats_uploadonly_role] on indices [project-app2-message], this action is granted by the index privileges [delete_index,manage,all]&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot; : 403</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="自定义索引"><a href="#自定义索引" class="headerlink" title="自定义索引"></a>自定义索引</h4><p>Filebeat 默认上传到 Elasticsearch 的数据，保存在名称类似 <code>.ds-filebeat-8.8.2-2023.07.28-000001</code> 的 data stream 中。要自定义上传数据到 Elasticsearch 时所使用的索引，可以参考以下配置</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: filestream</span><br><span class="line">  paths:</span><br><span class="line">    - /root/temp/*.log</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://localhost:9200&quot;, &quot;http://172.31.19.164:9200&quot;, &quot;http://172.31.21.3:9200&quot;]</span><br><span class="line">  username: &quot;newadmin&quot;</span><br><span class="line">  password: &quot;password&quot;</span><br><span class="line">  index: &quot;my_test_log&quot;</span><br><span class="line">setup.template.name: &quot;my_test_log&quot;</span><br><span class="line">setup.template.pattern: &quot;my_test_log-*&quot;</span><br></pre></td></tr></table></figure>
<p>使用以上配置，数据在 Elasticsearch 中保存在名为 <code>my_test_log</code> 的索引中。不再保存在 data stream 中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GET /_cat/indices</span></span><br><span class="line">green open .fleet-file-data-endpoint-000001                             HvLnz66ATPu3y-V7_LWiGw 1 1   0 0  494b 247b</span><br><span class="line">green open my_test_log                                                  A_OBdhPXTJeZoeYP6pskYg 1 1 100 0 118kb 59kb</span><br><span class="line">green open .internal.alerts-observability.logs.alerts-default-000001    qLVSX-3jTNSEJ5TUei8xeg 1 1   0 0  494b 247b</span><br><span class="line">green open .internal.alerts-observability.metrics.alerts-default-000001 No3BDeiPSS-Fc9VLC1_Bmw 1 1   0 0  494b 247b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GET /_data_stream?pretty</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;data_streams&quot;: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GET /my_test_log/_search</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 1,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: &#123;</span><br><span class="line">      &quot;value&quot;: 100,</span><br><span class="line">      &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot;: 1,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;my_test_log&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;qdl6m4kB7C7xGiVKZyIT&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_ignored&quot;: [</span><br><span class="line">          &quot;message.keyword&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;@timestamp&quot;: &quot;2023-07-28T07:50:33.457Z&quot;,</span><br><span class="line">          &quot;log&quot;: &#123;</span><br><span class="line">            &quot;offset&quot;: 0,</span><br><span class="line">            &quot;file&quot;: &#123;</span><br><span class="line">              &quot;path&quot;: &quot;/root/temp/logstash-tutorial.log&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;message&quot;: &quot;83.149.9.216 - - [04/Jan/2015:05:13:42 +0000] \&quot;GET /presentations/logstash-monitorama-2013/images/kibana-search.png HTTP/1.1\&quot; 200 203023 \&quot;http://semicomplete.com/presentations/logstash-monitorama-2013/\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36\&quot;&quot;,</span><br><span class="line">          &quot;input&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;filestream&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;ecs&quot;: &#123;</span><br><span class="line">            &quot;version&quot;: &quot;8.0.0&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;host&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;fm-k8s-c1-master1&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;agent&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;fm-k8s-c1-master1&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;filebeat&quot;,</span><br><span class="line">            &quot;version&quot;: &quot;8.8.2&quot;,</span><br><span class="line">            &quot;ephemeral_id&quot;: &quot;b791d062-b92f-4196-9844-0f34bf66c9e9&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;c30f5b44-bc21-41d3-ba20-df97120c0be9&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要将数据保存到基于日期的 index 中，可以参考以下配置</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: filestream</span><br><span class="line">  paths:</span><br><span class="line">    - /root/temp/*.log</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://localhost:9200&quot;, &quot;http://172.31.19.164:9200&quot;, &quot;http://172.31.21.3:9200&quot;]</span><br><span class="line">  username: &quot;newadmin&quot;</span><br><span class="line">  password: &quot;password&quot;</span><br><span class="line">  index: &quot;my_test_log&quot;</span><br><span class="line">setup.template.name: &quot;my_test_log&quot;</span><br><span class="line">setup.template.pattern: &quot;my_test_log-*&quot;</span><br></pre></td></tr></table></figure>



<h4 id="实现将不同-input-中的数据输出到-Elasticsearch-中的不同的索引中"><a href="#实现将不同-input-中的数据输出到-Elasticsearch-中的不同的索引中" class="headerlink" title="实现将不同 input 中的数据输出到 Elasticsearch 中的不同的索引中"></a>实现将不同 input 中的数据输出到 Elasticsearch 中的不同的索引中</h4><p><strong>需求背景说明</strong>：</p>
<ul>
<li>Filebeat 直接将数据输出到 Elasticsearch</li>
<li>同一个主机上(一个 filebeat 实例)有多个 <code>input</code>，分别属于不同的项目和日志类型</li>
<li>使用一个 <code>output</code> 配置将分属不同项目和日志类型的数据发送到 Elasticsearch 中的不同的索引中</li>
</ul>
<p>假设示例日志路径如下，有项目 <code>project-app1</code> 和 <code>project-app2</code>，日志类型定义为 <code>system-message</code>、<code>web</code>、<code>app</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tree</span> </span><br><span class="line">.</span><br><span class="line">├── project-app1</span><br><span class="line">│ ├── messages.log</span><br><span class="line">│ └── web.log</span><br><span class="line">└── project-app2</span><br><span class="line">  ├── app.log</span><br><span class="line">  └── messages.log</span><br><span class="line"></span><br><span class="line">2 directories, 4 files</span><br></pre></td></tr></table></figure>

<p>可以参考以下配置实现将不同项目、不同类型的日志保存到不同的 Elasticsearch index 中</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: filestream</span><br><span class="line">  id: project-app1-message</span><br><span class="line">  paths:</span><br><span class="line">    - /root/temp/project-app1/messages.log</span><br><span class="line">  fields:</span><br><span class="line">    project: project-app1</span><br><span class="line">    log_type: system-message</span><br><span class="line">  fields_under_root: true</span><br><span class="line">  </span><br><span class="line">- type: filestream</span><br><span class="line">  id: project-app1-web</span><br><span class="line">  paths:</span><br><span class="line">    - /root/temp/project-app1/web.log</span><br><span class="line">  fields:</span><br><span class="line">    project: project-app1</span><br><span class="line">    log_type: web</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">- type: filestream</span><br><span class="line">  id: project-app2-message</span><br><span class="line">  paths:</span><br><span class="line">    - /root/temp/project-app2/messages.log</span><br><span class="line">  fields:</span><br><span class="line">    project: project-app2</span><br><span class="line">    log_type: system-message</span><br><span class="line">  fields_under_root: true</span><br><span class="line">  </span><br><span class="line">- type: filestream</span><br><span class="line">  id: project-app2-app</span><br><span class="line">  paths:</span><br><span class="line">    - /root/temp/project-app2/app.log</span><br><span class="line">  fields:</span><br><span class="line">    project: project-app2</span><br><span class="line">    log_type: app</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://localhost:9200&quot;, &quot;http://172.31.19.164:9200&quot;, &quot;http://172.31.21.3:9200&quot;]</span><br><span class="line">  username: &quot;newadmin&quot;</span><br><span class="line">  password: &quot;password&quot;</span><br><span class="line">  indices:</span><br><span class="line">    - index: &quot;%&#123;[project]&#125;-%&#123;[log_type]&#125;-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        project: project-app1</span><br><span class="line">        log_type: system-message</span><br><span class="line">    - index: &quot;project-app1-web&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        project: project-app1</span><br><span class="line">        log_type: web</span><br><span class="line">    - index: &quot;project-app2-message&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        project: project-app2</span><br><span class="line">        log_type: system-message</span><br><span class="line">    - index: &quot;project-app2-app&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        project: project-app2</span><br><span class="line">        log_type: app</span><br><span class="line">  index: undified</span><br><span class="line">setup.template.name: &quot;undified&quot;</span><br><span class="line">setup.template.pattern: &quot;undified-*&quot;</span><br></pre></td></tr></table></figure>

<p>以上示例使用 <code>fields</code> 为 event 添加了自定义字段 <code>project</code> 和 <code>log_type</code>，分别定义 <em>项目</em> 及 <em>日志类型</em>。在 <code>output.elasticsearch</code> 中使用参数 <code>indices</code>，根据不同的条件将数据输出到了不同的 <code>index</code> 中</p>
<ul>
<li><strong>类似 <code>%&#123;[project]&#125;-%&#123;[log_type]&#125;-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;</code>，index 命名中可以引用字段的值。</strong></li>
<li>条件表达式可以使用：<ul>
<li><code>when.contains</code></li>
<li><code>when.equals</code></li>
<li><code>when.regexp</code></li>
<li><code>when.not.contains</code></li>
</ul>
</li>
</ul>
<p>查看 Elasticsearch 上的 index</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GET /_cat/indices</span></span><br><span class="line">green open project-app1-web                                             jPZ31teoQe2gzdxAHOyJgQ 1 1  104 0 155.3kb  77.6kb</span><br><span class="line">green open project-app2-app                                             TNgNT58RSRe5Z945biJl7w 1 1  100 0  90.1kb    45kb</span><br><span class="line">green open project-app2-message                                         bEGR3Of0ROyC-wWy1Q6jgg 1 1  101 0 120.8kb  60.4kb</span><br><span class="line">green open project-app1-system-message-8.8.2-2023.07.29                 nNVyV9vxQMGxTVGnvPt7Bw 1 1 1050 0 742.8kb 354.5kb</span><br></pre></td></tr></table></figure>

<p><em><strong>如果 <code>indices</code> 中的条件配置错误，或者条件未匹配到的 event，数据会默认被输出到命名格式类似 <code>.ds-filebeat-8.8.2-2023.07.29-000001</code> 的 data stream 中。如果配置了 <code>index</code> 参数，则未匹配到的数据被输出到 <code>index</code> 定义的索引中</strong></em>。因此，如果配置了 <code>indices</code> 后，Elasticsearch 的对应的 index 中没有数据，可以检查数据是否发送到了默认的 data stream 或者自定义配置的 <code>index</code> 中，如果发送到了 data stream 或者自定义配置的 <code>index</code> 中，需要检查 <code>indices</code> 中的条件，可能存在错误的条件导致未匹配到相应的 event。</p>
<h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><p>如果要对数据进行复杂的格式化处理或者转换，可以通过 Filebeat 将数据输出到 Logstash 进行处理后输出到 Elasticsearch</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: filestream</span><br><span class="line">  paths:</span><br><span class="line">    - /root/temp/*.log</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [&quot;172.31.16.124:5044&quot;]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="processors"><a href="#processors" class="headerlink" title="processors"></a>processors</h2><p>如果要在发送数据到 <code>output</code> 之前对数据做出筛选或添加元数据，可以为目标 <code>input</code> 配置额外的 <code>processors</code>。<code>libbeat</code> 提供了如下的 <code>processors</code></p>
<ul>
<li>减少导出的数据的字段</li>
<li>为收集的数据添加 metadata</li>
<li>处理附件的过程和对数据进行解码操作</li>
</ul>
<p><em>Processors 可以配置在 Filebeat 配置文件的最顶层，<code>processor</code> 将会应用到 Filebeat 采集的所有数据。也可以配置到各个 <code>input</code> 下面，只对此 <code>input</code> 采集到的 event 生效</em>。</p>
<h3 id="Drop-event-示例"><a href="#Drop-event-示例" class="headerlink" title="Drop event 示例"></a>Drop event 示例</h3><p>下面的示例 Drop 所有的 DEBUG 消息</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">processors:</span><br><span class="line">  - drop_event:</span><br><span class="line">      when:</span><br><span class="line">        regexp:</span><br><span class="line">          message: &quot;^DBG:&quot;</span><br></pre></td></tr></table></figure>
<p>drop 来自指定文件的数据</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">processors:</span><br><span class="line">  - drop_event:</span><br><span class="line">      when:</span><br><span class="line">        contains:</span><br><span class="line">          source: &quot;test&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Drop-fields"><a href="#Drop-fields" class="headerlink" title="Drop fields"></a>Drop fields</h3><p><code>drop_fields</code> 处理器可以丢弃指定的字段。***<code>@timestamp</code> 和 <code>type</code> 字段不能被 Drop*** <sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Drop fields from events](https://www.elastic.co/guide/en/beats/filebeat/8.8/drop-fields.html#drop-fields)">[9]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">processors:</span><br><span class="line">  - drop_fields:</span><br><span class="line">      when:</span><br><span class="line">        condition</span><br><span class="line">      fields: [&quot;field1&quot;, &quot;field2&quot;, ...]</span><br><span class="line">      ignore_missing: false</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>fields</code></td>
<td>要 Drop 的字段组成的列表，字段名可以使用 <code>/reg_exp/</code> 的格式使用正则表达式来匹配</td>
<td><a href="#%E4%BB%8E%E7%B3%BB%E7%BB%9F-messages-%E6%97%A5%E5%BF%97%E4%B8%AD%E7%AD%9B%E9%80%89-kernel-%E6%97%A5%E5%BF%97%E5%B9%B6%E6%A0%BC%E5%BC%8F%E5%8C%96">使用示例</a></td>
</tr>
<tr>
<td><code>ignore_missing</code></td>
<td>默认为 <code>false</code>。如果为 <code>true</code>，processor 将会在字段不存在时不报错<br/><em><strong><code>fields</code> 和 <code>ignore_missing</code> 不能同时存在，否则报错： <code>each processor must have exactly one action, but found 2 actions (ignore_missing,drop_fields)</code></strong></em></td>
<td></td>
</tr>
<tr>
<td><code>when</code></td>
<td>条件不存在时，指定的字段会一直被删除</td>
<td></td>
</tr>
</tbody></table>
<h3 id="dissect"><a href="#dissect" class="headerlink" title="dissect"></a>dissect</h3><p><code>dissect</code> <em><strong>基于位置</strong></em> 对输入的 event 进行格式化，他不是基于 <em><strong>正则表达式</strong></em>，因此在性能上有一定优势。<em><strong>Filebeat 不支持 Grok 处理器(过滤器)</strong></em></p>
<p><code>dissect</code> 根据提供的 <strong>模式字符串</strong>，对输入的 event 基于位置进行字段提取。例如以下日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2023-08-01 12:34:56 INFO &quot;This is a sample log message.&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以使用以下 <strong>模式字符串</strong> 对其进行字段格式化</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">processors:</span><br><span class="line">  - dissect:</span><br><span class="line">      tokenizer: &#x27;%&#123;data&#125; %&#123;time&#125; %&#123;loglevel&#125; &quot;%&#123;message&#125;&quot;&#x27; </span><br><span class="line">      field: &quot;message&quot;</span><br><span class="line">      target_prefix: &quot;dissect_&quot;</span><br></pre></td></tr></table></figure>
<p>格式化后，可以提取到以下字段：</p>
<ul>
<li><code>data</code> - 匹配到 <code>2023-08-01</code></li>
<li><code>time</code> - 匹配到 <code>12:34:56</code></li>
<li><code>loglevel</code> - 匹配到 <code>INFO</code></li>
<li><code>message</code> - 匹配到 <code>This is a sample log message.</code></li>
</ul>
<p>以上示例中实际使用了 <strong>空格</strong> 和 <code>&quot;</code> 作为了分隔符，基于此对数据进行了位置分割。</p>
<p><code>dissect</code> 常用参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>使用示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>tokenizer</code></td>
<td>对 event 进行字段提取的 <strong>模式字符串</strong></td>
<td></td>
</tr>
<tr>
<td><code>field</code></td>
<td>要匹配的目标字段。默认为 <code>message</code></td>
<td></td>
</tr>
<tr>
<td><code>target_prefix</code></td>
<td>可以配置提取出来的字段放置的位置。<br/>- 默认为 <code>dissect</code><br/>- 如果为空字符串(<code>&quot;&quot;</code>)，字段将被放置在 event 的根下面。<br/><em><strong>如果提取出来的新字段名称已经存在，processor 不会替换它，而是记录错误。要正确使用 <code>dissect</code>，必须 <code>drop</code> 或者 <code>rename</code> key。或者使用参数 <code>overwrite_keys</code></strong></em></td>
<td></td>
</tr>
<tr>
<td><code>overwrite_keys</code></td>
<td>默认为 <code>false</code>，如果新提取的字段和已有字段冲突，<code>dissect</code> 会格式化失败。<br/>配置为 <code>true</code> 时，processor 将会覆盖在 event 中已经存在的 keys。</td>
<td></td>
</tr>
</tbody></table>
<h4 id="使用-dissect-对-Ingress-Nginx-Controller-的-access-日志进行格式化"><a href="#使用-dissect-对-Ingress-Nginx-Controller-的-access-日志进行格式化" class="headerlink" title="使用 dissect 对 Ingress-Nginx-Controller 的 access 日志进行格式化"></a>使用 dissect 对 Ingress-Nginx-Controller 的 access 日志进行格式化</h4><p>Ingress-Nginx-Controller 的默认 access 日志示例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2023-08-01T15:28:03.884140739+08:00 stdout F 172.31.14.59 - - [01/Aug/2023:07:28:03 +0000] \&quot;POST /v1/addHistory HTTP/1.0\&quot; 200 498 \&quot;\&quot; \&quot;okhttp/4.9.1\&quot; 1362 0.048 [agmjys-agmjys-api-service-10302] [] 10.244.4.207:10302 498 0.047 200 caf7ad95851d8f9b21a320d21ba6b1ec</span><br></pre></td></tr></table></figure>

<p>要实现此需求，可以参考以下 <code>dissect</code> 配置</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">processors:</span><br><span class="line">  - dissect:</span><br><span class="line">      tokenizer: &#x27;%&#123;timestamp&#125; stdout F %&#123;client_ip&#125; - - [%&#123;http_timestamp&#125; +0000] &quot;%&#123;http_method&#125; %&#123;http_path&#125; HTTP/%&#123;http_version&#125;&quot; %&#123;http_status&#125; %&#123;response_size&#125; &quot;%&#123;http_referer&#125;&quot; &quot;%&#123;http_user_agent&#125;&quot; %&#123;request_process_time_ms&#125; %&#123;response_trans_time&#125; [%&#123;upstream_service&#125;] [] %&#123;upstream_server&#125; %&#123;upstream_response_size&#125; %&#123;upstream_trans_time&#125; %&#123;upstream_status&#125; %&#123;request_id&#125;&#x27; </span><br><span class="line">      field: &quot;message&quot;</span><br><span class="line">      target_prefix: &quot;dissect_&quot;</span><br></pre></td></tr></table></figure>

<p>应用此 <code>processor</code> 后，输出内容如下，在 <code>dissect_</code> 字段中包含了格式化后的字段：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2023-08-01T09:03:38.393Z&quot;,</span><br><span class="line">  &quot;@metadata&quot;: &#123;</span><br><span class="line">    &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;8.8.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;log&quot;: &#123;</span><br><span class="line">    &quot;offset&quot;: 4347060,</span><br><span class="line">    &quot;file&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;/var/log/pods/ingress-nginx_ingress-nginx-controller-pjk7v_2be52934-9900-4b32-ac64-70c78cfd01d6/controller/1.log&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;message&quot;: &quot;2023-08-01T17:01:09.062716851+08:00 stdout F 13.56.120.120 - - [01/Aug/2023:09:01:09 +0000] \&quot;GET /play?&amp;id=7866 HTTP/1.0\&quot; 200 58614 \&quot;-\&quot; \&quot;Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.179 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\&quot; 850 0.178 [test-test-front-service-20205] [] 10.244.3.190:20205 58614 0.178 200 154bae6847b0dc2bcc280cb995d00737&quot;,</span><br><span class="line">  &quot;input&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;filestream&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;project&quot;: &quot;k8s&quot;,</span><br><span class="line">  &quot;application&quot;: &quot;ingress-nginx-controller&quot;,</span><br><span class="line">  &quot;agent&quot;: &#123;</span><br><span class="line">    &quot;ephemeral_id&quot;: &quot;dd393210-3904-4c2b-a133-f11f5ef44319&quot;,</span><br><span class="line">    &quot;id&quot;: &quot;a52985d8-08ed-4ea1-a60b-c1a8e3c16ca1&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;k8s-c1-worker2&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;8.8.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;host&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;k8s-c1-worker2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;data-type&quot;: &quot;access-log&quot;,</span><br><span class="line">  &quot;department&quot;: &quot;US&quot;,</span><br><span class="line">  &quot;environment&quot;: &quot;PRO&quot;,</span><br><span class="line">  &quot;ecs&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;8.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dissect_&quot;: &#123;</span><br><span class="line">    &quot;http_user_agent&quot;: &quot;Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.179 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot;,</span><br><span class="line">    &quot;http_version&quot;: &quot;1.0&quot;,</span><br><span class="line">    &quot;response_trans_time&quot;: &quot;0.178&quot;,</span><br><span class="line">    &quot;upstream_status&quot;: &quot;200&quot;,</span><br><span class="line">    &quot;http_referer&quot;: &quot;-&quot;,</span><br><span class="line">    &quot;http_timestamp&quot;: &quot;01/Aug/2023:09:01:09&quot;,</span><br><span class="line">    &quot;response_size&quot;: &quot;58614&quot;,</span><br><span class="line">    &quot;client_ip&quot;: &quot;13.56.120.120&quot;,</span><br><span class="line">    &quot;timestamp&quot;: &quot;2023-08-01T17:01:09.062716851+08:00&quot;,</span><br><span class="line">    &quot;upstream_service&quot;: &quot;test-test-front-service-20205&quot;,</span><br><span class="line">    &quot;http_path&quot;: &quot;/play?&amp;id=7866&quot;,</span><br><span class="line">    &quot;upstream_response_size&quot;: &quot;58614&quot;,</span><br><span class="line">    &quot;upstream_server&quot;: &quot;10.244.3.190:20205&quot;,</span><br><span class="line">    &quot;request_id&quot;: &quot;154bae6847b0dc2bcc280cb995d00737&quot;,</span><br><span class="line">    &quot;http_status&quot;: &quot;200&quot;,</span><br><span class="line">    &quot;request_process_time_ms&quot;: &quot;850&quot;,</span><br><span class="line">    &quot;http_method&quot;: &quot;GET&quot;,</span><br><span class="line">    &quot;upstream_trans_time&quot;: &quot;0.178&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p><code>replace</code> 可以在指定的字段中使用正则表达式匹配内容，将其替换为新的内容 <sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[replace fields from events](https://www.elastic.co/guide/en/beats/filebeat/8.8/replace-fields.html)">[10]</span></a></sup></p>
<p><code>replace</code> 语法格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- replace:</span><br><span class="line">    fields:</span><br><span class="line">      - field: &quot;file.path&quot;</span><br><span class="line">        pattern: &quot;/usr/&quot;</span><br><span class="line">        replacement: &quot;/usr/local/&quot;</span><br><span class="line">    ignore_missing: false</span><br><span class="line">    fail_on_error: true</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>fields</code></td>
<td>一个或者多个替换项组成的列表，每个项保护参数：<code>field</code>、<code>pattern</code>、<code>replacement</code></td>
<td></td>
</tr>
<tr>
<td><code>fields.field</code></td>
<td>指定要匹配替换的字段</td>
<td></td>
</tr>
<tr>
<td><code>fields.pattern</code></td>
<td>要匹配值的正则表达式。<em><strong>其中的元字符需要使用 \ 转义</strong></em>，否则会报错:<code>found unknown escape character</code></td>
<td><a href="#replace-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">replace 使用示例</a></td>
</tr>
<tr>
<td><code>fields.replacement</code></td>
<td>要替换的新值。可以在 <code>pattern</code> 中使用正则表达式的捕获组 <code>()</code> 来引用(<code>$n</code>)匹配到的内容</td>
<td><a href="#replace-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">replace 使用示例</a></td>
</tr>
</tbody></table>
<h4 id="replace-使用示例"><a href="#replace-使用示例" class="headerlink" title="replace 使用示例"></a>replace 使用示例</h4><p>假如有以下内核日志，其中 <em><strong>时间字段的长度不一样</strong></em>，<code>Jun 21 14:22:28</code> 使用 <strong>一个空格</strong> 分割，而 <code>Dec  6 09:54:55</code> 使用了 <strong>两个空格</strong> 分割。如果对这种格式的日志直接使用 <code>dissect</code> 模式字符串匹配，不能同时匹配到这两种格式的日志。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Jun 21 14:22:28 ip-172-31-26-116 kernel: ip_set: protocol 7</span><br><span class="line">Dec  6 09:54:55 ip-172-31-26-116 kernel: cni0: port 1(veth44bbfb78) entered blocking state</span><br></pre></td></tr></table></figure>

<p>要解决这种问题，可以使用 Filebeat 的 <code>replace</code> processor 进行处理，将 event 中的空格改为一个。然后再使用 <code>dissect</code> 进行字段格式化提取。</p>
<p>参考配置文件如下：</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level: debug</span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: filestream</span><br><span class="line">  id: k8s-c1-pro-master1-kernel-log</span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/messages</span><br><span class="line">  include_lines: [&quot;.*kernel:.*&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    department: US</span><br><span class="line">    project: k8s</span><br><span class="line">    environment: PRO</span><br><span class="line">    application: system</span><br><span class="line">    data-type: message-log</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">  processors:</span><br><span class="line">    - replace:</span><br><span class="line">        fields:</span><br><span class="line">          - field: &quot;message&quot;</span><br><span class="line">            pattern: &quot;^(\\w&#123;3&#125;)\\s\\s(\\d)&quot;</span><br><span class="line">            replacement: &quot;$1 $2&quot;</span><br><span class="line">        fail_on_error: true</span><br><span class="line">    - dissect:</span><br><span class="line">        tokenizer: &#x27;%&#123;M&#125; %&#123;D&#125; %&#123;time&#125; %&#123;hostname&#125; %&#123;message&#125;&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">output.console:</span></span><br><span class="line">  pretty: true</span><br></pre></td></tr></table></figure>
<p>格式化后的 <code>dissect</code> 字段内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;dissect&quot;: &#123;</span><br><span class="line">    &quot;time&quot;: &quot;09:59:49&quot;,</span><br><span class="line">    &quot;hostname&quot;: &quot;ip-172-31-19-164&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;kernel: IPVS: [sh] scheduler registered.&quot;,</span><br><span class="line">    &quot;M&quot;: &quot;Dec&quot;,</span><br><span class="line">    &quot;D&quot;: &quot;6&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;dissect&quot;: &#123;</span><br><span class="line">    &quot;message&quot;: &quot;kernel: cni0: port 1(vethb13b7f14) entered blocking state&quot;,</span><br><span class="line">    &quot;M&quot;: &quot;May&quot;,</span><br><span class="line">    &quot;D&quot;: &quot;27&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;07:14:06&quot;,</span><br><span class="line">    &quot;hostname&quot;: &quot;ip-172-31-19-164&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出中包含的字段 <code>&quot;dissect.M&quot;,&quot;dissect.D&quot;,&quot;dissect.time&quot;</code> 如果不需要，可以 Drop 掉无用字段，参考以下配置</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level: debug</span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: filestream</span><br><span class="line">  id: k8s-c1-pro-master1-kernel-log</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/messages</span><br><span class="line">  include_lines: [&quot;.*kernel:.*&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    department: US</span><br><span class="line">    project: k8s</span><br><span class="line">    environment: PRO</span><br><span class="line">    application: system</span><br><span class="line">    data-type: message-log</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">  processors:</span><br><span class="line">    - replace:</span><br><span class="line">        fields:</span><br><span class="line">          - field: &quot;message&quot;</span><br><span class="line">            pattern: &quot;^(\\w&#123;3&#125;)\\s\\s(\\d)&quot;</span><br><span class="line">            replacement: &quot;$1 $2&quot;</span><br><span class="line">        fail_on_error: true</span><br><span class="line">    - dissect:</span><br><span class="line">        tokenizer: &#x27;%&#123;M&#125; %&#123;D&#125; %&#123;time&#125; %&#123;hostname&#125; %&#123;message&#125;&#x27;</span><br><span class="line"></span><br><span class="line">    - drop_fields:</span><br><span class="line">        fields: [&quot;dissect.M&quot;,&quot;dissect.D&quot;,&quot;dissect.time&quot;]</span><br><span class="line">      #ignore_missing: false</span><br><span class="line"></span><br><span class="line">output.console:</span><br><span class="line">  pretty: true</span><br></pre></td></tr></table></figure>

<p>格式化输出字段如下，只包含 <code>hostname</code> 和 <code>message</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2023-08-02T03:43:25.911Z&quot;,</span><br><span class="line">  &quot;@metadata&quot;: &#123;</span><br><span class="line">    &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;8.8.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;application&quot;: &quot;system&quot;,</span><br><span class="line">  &quot;data-type&quot;: &quot;message-log&quot;,</span><br><span class="line">  &quot;agent&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;8.8.2&quot;,</span><br><span class="line">    &quot;ephemeral_id&quot;: &quot;58ce1563-4eee-4a9d-98b8-575d16bfc0ce&quot;,</span><br><span class="line">    &quot;id&quot;: &quot;c30f5b44-bc21-41d3-ba20-df97120c0be9&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;k8s-c1-master1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;host&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;k8s-c1-master1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;log&quot;: &#123;</span><br><span class="line">    &quot;offset&quot;: 9948561,</span><br><span class="line">    &quot;file&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;/var/log/messages&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;input&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;filestream&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dissect&quot;: &#123;</span><br><span class="line">    &quot;hostname&quot;: &quot;ip-172-31-26-116&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;kernel: IPv6: ADDRCONF(NETDEV_CHANGE): veth1ab5d2d1: link becomes ready&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;ecs&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;8.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;message&quot;: &quot;Dec 6 09:54:55 ip-172-31-26-116 kernel: IPv6: ADDRCONF(NETDEV_CHANGE): veth1ab5d2d1: link becomes ready&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h1><h2 id="同一主机上将不同路径的日志上传到-ES-的不同的索引中"><a href="#同一主机上将不同路径的日志上传到-ES-的不同的索引中" class="headerlink" title="同一主机上将不同路径的日志上传到 ES 的不同的索引中"></a>同一主机上将不同路径的日志上传到 ES 的不同的索引中</h2><ul>
<li><p><strong>环境信息</strong></p>
<blockquote>
<p>filebeat version 7.5.2 (amd64), libbeat 7.5.2 </p>
</blockquote>
</li>
<li><p><strong>需求描述</strong></p>
<blockquote>
<ol>
<li>将日志数据 <code>/home/www/project1/logs/*.log</code> 上传到 ES 的索引 <code>logstash-project1-api-%&#123;+yyyy.MM.dd&#125;</code> 中</li>
<li><code>将日志数据 /home/www/project2/logs/*.log</code> 上传到 ES 的索引 <code>logstash-project2-api-%&#123;+yyyy.MM.dd&#125;</code> 中</li>
</ol>
</blockquote>
</li>
</ul>
<p>由于 Filebeat 的配置不直接支持基于输入标签或路径动态更改输出索引名，需要对每个日志路径配置单独的输入，<em><strong>可以通过在每个输入中添加一个字段来区分它们</strong></em>，然后在输出到 Elasticsearch 时使用这个字段来动态构建索引名。参考配置文件如下</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /home/www/project1/logs/*.log</span><br><span class="line">  tags: [&quot;project1-api-log&quot;]</span><br><span class="line">  fields: </span><br><span class="line">    log_type: &quot;project1-api&quot;</span><br><span class="line">  fields_under_root: true</span><br><span class="line">  close_timeout: 3h</span><br><span class="line">  clean_inactive: 72h</span><br><span class="line">  ignore_older: 70h</span><br><span class="line">  close_inactive: 5m</span><br><span class="line"></span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /home/www/project2/logs/*.log</span><br><span class="line">  tags: [&quot;project2-api-log&quot;]</span><br><span class="line">  fields: </span><br><span class="line">    log_type: &quot;project2-api&quot;</span><br><span class="line">  fields_under_root: true</span><br><span class="line">  close_timeout: 3h</span><br><span class="line">  clean_inactive: 72h</span><br><span class="line">  ignore_older: 70h</span><br><span class="line">  close_inactive: 5m</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;13.5.4.5:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;password&quot;</span><br><span class="line">  index: &quot;logstash-%&#123;[log_type]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">setup.ilm.enabled: false</span><br><span class="line">setup.template.enabled: true</span><br><span class="line">setup.template.name: &quot;project&quot;</span><br><span class="line">setup.template.pattern: &quot;logstash-*&quot;</span><br></pre></td></tr></table></figure>

<p>在这个配置中，每个 <code>input</code> 部分都添加了 <code>fields</code> 配置，其中包含一个 <code>log_type</code> 的自定义字段，用于标识日志类型。然后在 <code>output.elasticsearch</code> 部分，<code>index</code> 配置使用了这个字段来动态构建索引名。这样，基于每个日志文件的 <code>log_type</code>，Filebeat 将数据发送到正确的 Elasticsearch 索引中。</p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="Failed-to-start-crawler"><a href="#Failed-to-start-crawler" class="headerlink" title="Failed to start crawler"></a>Failed to start crawler</h2><p><code>filebeat</code> 服务启动失败，手动启动 <code>filebeat</code> ，报错如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">filebeat run -c /etc/filebeat/filebeat.yml</span></span><br><span class="line">Exiting: Failed to start crawler: starting input failed: error while initializing input: no path is configured accessing &#x27;filebeat.inputs.2&#x27; (source:&#x27;/etc/filebeat/filebeat.yml&#x27;)</span><br></pre></td></tr></table></figure>

<p>根据输出提示，<code>input</code> 中的第 3 个位置的路径配置有问题，查看配置文件如下，第三个 <code>input</code> 中 <code>pathes</code> 书写错误，修改为 <code>paths</code> 后服务启动正常。</p>
<figure class="highlight shell"><figcaption><span>filebeat.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: filestream</span><br><span class="line">  id: project-app1-message</span><br><span class="line">  paths:</span><br><span class="line">    - /root/temp/project-app1/messages.log</span><br><span class="line">  fields:</span><br><span class="line">    project: project-app1</span><br><span class="line">    log_type: system-message</span><br><span class="line">  fields_under_root: true</span><br><span class="line">- type: filestream</span><br><span class="line">  id: project-app1-web</span><br><span class="line">  paths:</span><br><span class="line">    - /root/temp/project-app1/web.log</span><br><span class="line">  fields:</span><br><span class="line">    project: project-app1</span><br><span class="line">    log_type: web</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">- type: filestream</span><br><span class="line">  id: project-app2-message</span><br><span class="line">  pathes:</span><br><span class="line">    - /root/temp/project-app2/messages.log</span><br><span class="line">  fields:</span><br><span class="line">    project: project-app2</span><br><span class="line">    log_type: system-message</span><br><span class="line">  fields_under_root: true</span><br><span class="line">- type: filestream</span><br><span class="line">  id: project-app2-app</span><br><span class="line">  paths:</span><br><span class="line">    - /root/temp/project-app2/app.log</span><br><span class="line">  fields:</span><br><span class="line">    project: project-appa</span><br><span class="line">    log_type: app</span><br><span class="line">  fields_under_root: true</span><br></pre></td></tr></table></figure>

<h2 id="Elasticsearch-is-too-old"><a href="#Elasticsearch-is-too-old" class="headerlink" title="Elasticsearch is too old"></a>Elasticsearch is too old</h2><p>Filebeat 启动后未上传数据到 Elasticsearch，检查 <code>filebeat</code> 服务日志如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl status filebeat -l</span></span><br><span class="line">Aug 01 13:43:54 fm-k8s-c1-worker2 filebeat[30739]: &#123;&quot;log.level&quot;:&quot;error&quot;,&quot;@timestamp&quot;:&quot;2023-08-01T13:43:54.731+0800&quot;,&quot;log.logger&quot;:&quot;publisher_pipeline_output&quot;,&quot;log.origin&quot;:&#123;&quot;file.name&quot;:&quot;pipeline/client_worker.go&quot;,&quot;file.line&quot;:148&#125;,&quot;message&quot;:&quot;Failed to connect to backoff(elasticsearch(http://172.31.21.3:9200)): Connection marked as failed because the onConnect callback failed: Elasticsearch is too old. Please upgrade the instance. If you would like to connect to older instances set output.elasticsearch.allow_older_versions to true. ES=8.8.2, Beat=8.9.0&quot;,&quot;service.name&quot;:&quot;filebeat&quot;,&quot;ecs.version&quot;:&quot;1.6.0&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>根据报错信息可知，<code>Elasticsearch</code> 版本太旧。检查环境信息，其中 <code>elasticsearch</code> 版本为 <code>8.8.2</code>，<code>filebeat</code> 版本为 <code>8.9</code>，版本不一致。重新安装 <code>filebeat</code> 版本到 <code>8.8.2</code></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html">Filebeat 官网</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html">Filebeat 总览</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation-configuration.html">Filebeat 官方安装文档</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/beats/filebeat/current/command-line-options.html#command-line-options">Filebeat command reference</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/beats/filebeat/current/how-filebeat-works.html">How Filebeat works</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/beats/filebeat/current/configuration-general-options.html#configuration-global-options">Global Filebeat configurations</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/beats/filebeat/current/configuring-output.html">Configure the output</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/beats/filebeat/current/defining-processors.html">Processors</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-filestream.html">filestream input</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/beats/filebeat/8.8/drop-fields.html#drop-fields">Drop fields from events</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/beats/filebeat/8.8/replace-fields.html">replace fields from events</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>firewalld 使用</title>
    <url>/202302220932/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7 3.10.0-1160</li>
</ul>
<p><code>firewalld</code> 是 <code>iptables</code> 的一个封装，可以让你更容易地管理 <code>iptables</code> 规则， 它并不是 <code>iptables</code> 的替代品。虽然 <code>iptables</code> 命令仍可用于 <code>firewalld</code> ，但建议使用 <code>firewalld</code> 时仅使用 <code>firewalld</code> 命令。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[FirewallD入门手册](https://www.linuxprobe.com/centos-firewalld.html)">[1]</span></a></sup></p>
<p><code>firewalld</code> 是 <code>iptables</code> 的前端控制器，用于实现持久的网络流量规则。它提供命令行和图形界面，在大多数 Linux 发行版的仓库中都有。与直接控制 <code>iptables</code> 相比，使用 <code>firewalld</code> 有两个主要区别：</p>
<ul>
<li><code>firewalld</code> 使用区域和服务而不是链式规则。</li>
<li>它动态管理规则集，允许更新规则而不破坏现有会话和连接。</li>
</ul>
<h1 id="firewalld-配置说明"><a href="#firewalld-配置说明" class="headerlink" title="firewalld 配置说明"></a>firewalld 配置说明</h1><h2 id="配置文件目录"><a href="#配置文件目录" class="headerlink" title="配置文件目录"></a>配置文件目录</h2><p>配置文件位于两个目录中：</p>
<ul>
<li><code>/usr/lib/firewalld/</code> 下保存默认配置，如默认区域和公用服务。避免修改它们，因为每次 <code>firewall</code> 软件包更新时都会覆盖这些文件。</li>
<li><code>/etc/firewalld</code> 下保存系统配置文件。 这些文件将覆盖默认配置。</li>
</ul>
<h2 id="配置集说明"><a href="#配置集说明" class="headerlink" title="配置集说明"></a>配置集说明</h2><p><code>firewalld</code> 使用两个配置集： <code>运行时</code> 和 <code>持久</code></p>
<p>在系统重新启动或重新启动 <code>firewalld</code> 服务时，不会保留 <code>运行时</code> 的配置更改，而对 <code>持久</code> 配置集的更改不会应用于正在运行的系统。</p>
<p>默认情况下，<code>firewall-cmd</code> 命令适用于 <code>运行时</code> 配置，但使用 <code>--permanent</code> 选项将保存配置到  <code>持久</code> 配置中。</p>
<p>要添加和激活持久性规则，你可以使用以下两种方法之一：</p>
<ol>
<li>将规则同时添加到持久规则集和运行时规则集中<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-service=http --permanent</span><br><span class="line">sudo firewall-cmd --zone=public --add-service=http</span><br></pre></td></tr></table></figure></li>
<li>将规则添加到持久规则集中并重新加载 <code>firewalld</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-service=http --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<code>--reload</code> 选项会删除所有 <code>运行时</code> 配置并应用 <code>持久</code> 配置。因为 <code>firewalld</code> 动态管理规则集，所以它不会破坏现有的连接和会话。<span id="more"></span></li>
</ol>
<h2 id="区域说明"><a href="#区域说明" class="headerlink" title="区域说明"></a>区域说明</h2><p><code>区域</code> 是针对给定位置或场景（例如家庭、公共、受信任等）可能具有的各种信任级别的预构建规则集。不同的区域允许不同的网络服务和入站流量类型，而拒绝其他任何流量。 首次启用 <code>firewalld</code> 后，<code>public</code> 将是默认区域。</p>
<p>区域也可以用于不同的网络接口。例如，要分离内部网络和互联网的接口，你可以在 <code>internal</code> 区域上允许 DHCP，但在 <code>external</code> 区域仅允许 HTTP 和 SSH。未明确设置为特定区域的任何接口将添加到默认区域。</p>
<h3 id="查看默认区域"><a href="#查看默认区域" class="headerlink" title="查看默认区域"></a>查看默认区域</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --get-default-zone</span></span><br><span class="line">public</span><br></pre></td></tr></table></figure>
<h3 id="修改默认区域"><a href="#修改默认区域" class="headerlink" title="修改默认区域"></a>修改默认区域</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --set-default-zone=internal</span><br></pre></td></tr></table></figure>
<h3 id="查看激活的区域及网络接口使用的区域"><a href="#查看激活的区域及网络接口使用的区域" class="headerlink" title="查看激活的区域及网络接口使用的区域"></a>查看激活的区域及网络接口使用的区域</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --get-active-zones</span></span><br><span class="line">public</span><br><span class="line">  interfaces: eth0</span><br></pre></td></tr></table></figure>
<h3 id="查看指定区域的所有规则集-默认查看-运行时"><a href="#查看指定区域的所有规则集-默认查看-运行时" class="headerlink" title="查看指定区域的所有规则集(默认查看 运行时)"></a>查看指定区域的所有规则集(默认查看 <code>运行时</code>)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --zone=public --list-all</span></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: eth0</span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports: 20/tcp 21/tcp 22/tcp 80/tcp 443/tcp 32210/tcp 39000-40000/tcp</span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules:</span><br></pre></td></tr></table></figure>
<h3 id="查看指定区域-持久-配置集的所有规则"><a href="#查看指定区域-持久-配置集的所有规则" class="headerlink" title="查看指定区域 持久 配置集的所有规则"></a>查看指定区域 <code>持久</code> 配置集的所有规则</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --zone=public --list-all --permanent</span></span><br><span class="line">public</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports: 20/tcp 21/tcp 22/tcp 80/tcp 443/tcp 32210/tcp 39000-40000/tcp</span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看所有区域的配置"><a href="#查看所有区域的配置" class="headerlink" title="查看所有区域的配置"></a>查看所有区域的配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --list-all-zones</span></span><br><span class="line">block</span><br><span class="line">  target: %%REJECT%%</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: </span><br><span class="line">  services: </span><br><span class="line">  ports: </span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">dmz</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: </span><br><span class="line">  services: ssh</span><br><span class="line">  ports: </span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">drop</span><br><span class="line">  target: DROP</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: </span><br><span class="line">  services: </span><br><span class="line">  ports: </span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">external</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: </span><br><span class="line">  services: ssh</span><br><span class="line">  ports: </span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: yes</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">home</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client mdns samba-client ssh</span><br><span class="line">  ports: </span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">internal</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client mdns samba-client ssh</span><br><span class="line">  ports: </span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: eth0</span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports: 20/tcp 21/tcp 22/tcp 80/tcp 443/tcp 32210/tcp 39000-40000/tcp</span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">trusted</span><br><span class="line">  target: ACCEPT</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: </span><br><span class="line">  services: </span><br><span class="line">  ports: </span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">work</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports: </span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p><code>firewalld</code> 可以根据特定网络服务的预定义规则来允许相关流量。你可以创建自己的自定义系统规则，并将它们添加到任何区域。 默认支持的服务的配置文件位于 <code>/usr/lib/firewalld/services/</code>，用户创建的服务文件在 <code>/etc/firewalld/services/</code> 中</p>
<h3 id="查看默认的可用服务"><a href="#查看默认的可用服务" class="headerlink" title="查看默认的可用服务"></a>查看默认的可用服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --get-services</span></span><br><span class="line">RH-Satellite-6 RH-Satellite-6-capsule amanda-client amanda-k5-client amqp amqps apcupsd audit bacula bacula-client \</span><br><span class="line">bgp bitcoin bitcoin-rpc bitcoin-testnet bitcoin-testnet-rpc ceph ceph-mon cfengine condor-collector ctdb dhcp dhcpv6 \</span><br><span class="line">dhcpv6-client distcc dns docker-registry docker-swarm dropbox-lansync elasticsearch etcd-client etcd-server finger \</span><br><span class="line">freeipa-ldap freeipa-ldaps freeipa-replication freeipa-trust ftp ganglia-client ganglia-master git gre high-availability \</span><br><span class="line">http https imap imaps ipp ipp-client ipsec irc ircs iscsi-target isns jenkins kadmin kerberos kibana klogin kpasswd \</span><br><span class="line">kprop kshell ldap ldaps libvirt libvirt-tls lightning-network llmnr managesieve matrix mdns minidlna mongodb mosh mountd \</span><br><span class="line">mqtt mqtt-tls ms-wbt mssql murmur mysql nfs nfs3 nmea-0183 nrpe ntp nut openvpn ovirt-imageio ovirt-storageconsole \</span><br><span class="line">ovirt-vmconsole plex pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxy proxy-dhcp ptp pulseaudio puppetmaster \</span><br><span class="line">quassel radius redis rpc-bind rsh rsyncd rtsp salt-master samba samba-client samba-dc sane sip sips slp smtp smtp-submission \</span><br><span class="line">smtps snmp snmptrap spideroak-lansync squid ssh steam-streaming svdrp svn syncthing syncthing-gui synergy syslog syslog-tls \</span><br><span class="line">telnet tftp tftp-client tinc tor-socks transmission-client upnp-client vdsm vnc-server wbem-http wbem-https wsman wsmans \</span><br><span class="line">xdmcp xmpp-bosh xmpp-client xmpp-local xmpp-server zabbix-agent zabbix-server</span><br></pre></td></tr></table></figure>

<h3 id="启用或禁用-HTTP-服务"><a href="#启用或禁用-HTTP-服务" class="headerlink" title="启用或禁用 HTTP 服务"></a>启用或禁用 HTTP 服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-service=http --permanent</span><br><span class="line">firewall-cmd --zone=public --remove-service=http --permanent</span><br></pre></td></tr></table></figure>

<h3 id="允许或者拒绝任意端口-x2F-协议"><a href="#允许或者拒绝任意端口-x2F-协议" class="headerlink" title="允许或者拒绝任意端口&#x2F;协议"></a>允许或者拒绝任意端口&#x2F;协议</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=12345/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --remove-port=12345/tcp --permanent</span><br></pre></td></tr></table></figure>

<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><h3 id="同一台服务器上将-80-端口的流量转发到-12345-端口"><a href="#同一台服务器上将-80-端口的流量转发到-12345-端口" class="headerlink" title="同一台服务器上将 80 端口的流量转发到 12345 端口"></a>同一台服务器上将 80 端口的流量转发到 12345 端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=&quot;public&quot; --add-forward-port=port=80:proto=tcp:toport=12345</span><br></pre></td></tr></table></figure>

<h3 id="将端口转发到另外一台服务器上"><a href="#将端口转发到另外一台服务器上" class="headerlink" title="将端口转发到另外一台服务器上"></a>将端口转发到另外一台服务器上</h3><ol>
<li>在需要的区域中激活 <code>masquerade</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-masquerade</span><br></pre></td></tr></table></figure></li>
<li>添加转发规则<br>例子中是将 IP 地址为 ：123.456.78.9 的远程服务器上 80 端口的流量转发到 8080 上<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=&quot;public&quot; --add-forward-port=port=80:proto=tcp:toport=8080:toaddr=123.456.78.9</span><br></pre></td></tr></table></figure>
要删除规则，用 <code>--remove</code> 替换 <code>--add</code>。比如：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-masquerade</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.linuxprobe.com/centos-firewalld.html">FirewallD入门手册</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>fswatch 安装使用</title>
    <url>/202306081308/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>fswatch-1.17.1</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Centos 7 默认安装的 gcc 版本太低，无法满足 fswatch-1.17.1 的编译配置要求，需要首先<a href="https://csms.tech/202306081314/#安装-gcc-8.3.0">升级 gcc 版本</a>，本示例中 gcc-8.3.0 安装位置为 <code>/usr/local/gcc-8.3.0/</code>，如果系统安装的 gcc 版本符合要求，无需在 <code>./configure</code> 时指定 gcc 环境变量 <code>CXX=/usr/local/gcc-8.3.0/bin/g++</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/emcrisostomo/fswatch/archive/refs/tags/1.17.1.tar.gz</span><br><span class="line">tar -xf 1.17.1.tar.gz</span><br><span class="line">cd fswatch-1.17.1/</span><br><span class="line">sh autogen.sh</span><br><span class="line"></span><br><span class="line">./configure CXX=/usr/local/gcc-8.3.0/bin/g++ --prefix=/usr/local/fswatch-1.17.1</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>常用选项。<a href="https://csms.tech/202306091031/">参考文档安装 <code>man</code> 手册</a> 后可以查看详细的帮助文档</p>
<p><code>fswatch</code> 会为监控到的每条事件记录以下信息</p>
<ul>
<li><code>timestamp</code> - 事件发生的时间戳</li>
<li><code>path</code> - 触发事件的文件（夹）路径</li>
<li><code>event types</code> - 空格分割的事件类型</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-0, --print0</code></td>
<td>ASCII NUL character (<code>\0</code>) as line separator<br/>Since file names can potentially contain any character but <code>NUL</code>, this option assures that the output of fswatch can be safely parsed using <code>NUL</code> as delimiter, such as using <code>xargs -0</code> and the shell builtin <code>read -d &#39;&#39;</code>.</td>
<td><a href="#%E8%BE%93%E5%87%BA%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%A1%8C%E5%88%86%E9%9A%94%E7%AC%A6">使用示例</a></td>
</tr>
<tr>
<td><code>-1, --one-event</code></td>
<td>Exit fswatch after the first set of events is received</td>
<td></td>
</tr>
<tr>
<td><code>--event name</code></td>
<td>can be used multiple times</td>
<td></td>
</tr>
<tr>
<td><code>-e, --exclude regexp</code></td>
<td>Exclude paths matching regexp, Multiple exclude filters can be specified using this option multiple times</td>
<td></td>
</tr>
<tr>
<td><code>-i, --include regexp</code></td>
<td>Include paths matching regexp</td>
<td></td>
</tr>
<tr>
<td><code>-f, --format-time format</code></td>
<td>Print the event time using the specified format</td>
<td></td>
</tr>
<tr>
<td><code>-I, --insensitive</code></td>
<td>Use case insensitive regular expressions</td>
<td></td>
</tr>
<tr>
<td><code>-m, --monitor name</code></td>
<td>Uses the monitor specified by name<br/> 可用的 monitor： <br/>- <code>inotify_monitor</code><br/>- <code>poll_monitor</code></td>
<td></td>
</tr>
<tr>
<td><code>-r, --recursive</code></td>
<td>Watch subdirectories recursively</td>
<td></td>
</tr>
<tr>
<td><code>-t, --timestamp</code></td>
<td>Print the event timestamp.</td>
<td></td>
</tr>
<tr>
<td><code>-u, --utf-time</code></td>
<td>Print the event time in UTC format.  When this option is not specified, the time is printed using the system local time, as defined by localtime</td>
<td></td>
</tr>
<tr>
<td><code>-l, --latency latency</code></td>
<td>监听间隔，默认1s</td>
<td></td>
</tr>
</tbody></table>
<p>常用事件</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>NoOp</code></td>
<td>Idle event, optionally issued when no changes were detected</td>
<td></td>
</tr>
<tr>
<td><code>Created</code></td>
<td>The object has been created.</td>
<td></td>
</tr>
<tr>
<td><code>Updated</code></td>
<td>The object has been updated. The kind of update is monitor-dependent.</td>
<td></td>
</tr>
<tr>
<td><code>Removed</code></td>
<td>The object has been removed.</td>
<td></td>
</tr>
<tr>
<td><code>Renamed </code></td>
<td>The object has been renamed.</td>
<td></td>
</tr>
<tr>
<td><code>OwnerModified</code></td>
<td>The object’s owner has changed.</td>
<td></td>
</tr>
<tr>
<td><code>AttributeModified</code></td>
<td>An object’s attribute has changed.</td>
<td></td>
</tr>
<tr>
<td><code>MovedFrom  </code></td>
<td>The object has moved from this location to a new location of the same file system.</td>
<td></td>
</tr>
<tr>
<td><code>MovedTo </code></td>
<td>The object has moved from another location in the same file system into this location.</td>
<td></td>
</tr>
<tr>
<td><code>IsFile </code></td>
<td>The object is a regular file.</td>
<td></td>
</tr>
<tr>
<td><code>IsDir  </code></td>
<td>The object is a directory.</td>
<td></td>
</tr>
<tr>
<td><code>IsSymLink</code></td>
<td>The object is a symbolic link.</td>
<td></td>
</tr>
<tr>
<td><code>Link </code></td>
<td>The object link count has changed.</td>
<td></td>
</tr>
<tr>
<td><code>Overflow</code></td>
<td>The monitor has overflowed.</td>
<td></td>
</tr>
</tbody></table>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="输出事件的行分隔符"><a href="#输出事件的行分隔符" class="headerlink" title="输出事件的行分隔符"></a>输出事件的行分隔符</h3><p>以下示例中监视文件 <code>nohup.out</code>，输出事件的每一行使用 <code>\0</code> 分割，<code>read</code> 读取时也使用 <code>\0</code> (<code>&quot;&quot;</code>) 分割，可以防止文件名中包含了空格，使用 <code>read</code> 时读取文件名不全。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fswatch -0 nohup.out | <span class="keyword">while</span> <span class="built_in">read</span> -d <span class="string">&quot;&quot;</span> file; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$&#123;file&#125;</span>; <span class="keyword">done</span></span></span><br><span class="line">/root/nohup.out</span><br><span class="line">/root/nohup.out</span><br><span class="line">/root/nohup.out</span><br></pre></td></tr></table></figure>

<h3 id="使用-xargs-处理监听事件"><a href="#使用-xargs-处理监听事件" class="headerlink" title="使用 xargs 处理监听事件"></a>使用 xargs 处理监听事件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fswatch -0 [opts] [paths] | xargs -0 -n 1 -I &#123;&#125; [<span class="built_in">command</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>fswatch -0</code> will split records using the NUL character.</p>
</li>
<li><p><code>xargs -0</code> will split records using the NUL character. This is required to correctly match impedance with fswatch.</p>
</li>
<li><p><code>xargs -n 1</code> will invoke command every record.  If you want to do it every x records, then use xargs -n x.</p>
</li>
<li><p><code>xargs -I &#123;&#125;</code> will substitute occurrences of {} in command with the parsed argument.  If the command you are running<br>       does not need the event path name, just delete this option.  If you prefer using another replacement string, substi‐<br>       tute {} with yours.</p>
</li>
</ul>
<p>以下示例监视文件变化后进行备份</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fswatch -0 nohup.out | xargs -0 -I &#123;&#125; cp &#123;&#125; &#123;&#125;.`date +%Y%m%d%H%M%S`</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上命令中 <code>date +%Y%m%d%H%M%S</code> 只会被计算一次，假如第一次执行时 <code>date +%Y%m%d%H%M%S</code> &#x3D; <code>nohup.out.20230609132143</code>，那么之后每次触发 <code>xargs</code>，变量 <code>date +%Y%m%d%H%M%S</code> 的值都是 <code>nohup.out.20230609132143</code>，<strong>不会被重新计算</strong></p>
</blockquote>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="Event-queue-overflow"><a href="#Event-queue-overflow" class="headerlink" title="Event queue overflow"></a>Event queue overflow</h2><p>执行以下命令，过一段时间后会输出 <code>Event queue overflow</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fswatch -0 nohup.out | xargs -0 -I &#123;&#125; <span class="built_in">cp</span> &#123;&#125; &#123;&#125;.`<span class="built_in">date</span> +%Y%m%d%H%M%S`</span></span><br><span class="line">Event queue overflow.</span><br><span class="line">Status code: 1</span><br></pre></td></tr></table></figure>

<p><strong>解决方法</strong> 可以选择以下之一。</p>
<ol>
<li><p>使用 <code>poll_monitor</code> monitor 而不是默认的 <code>inotify_monitor</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fswatch -0 --monitor=poll_monitor nohup.out | xargs -0 -I &#123;&#125; cp &#123;&#125; &#123;&#125;.`date +%Y%m%d%H%M%S`</span><br></pre></td></tr></table></figure></li>
<li><p>此限制是因为内核参数限制，主要参数 <code>fs.inotify.max_queued_events</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[OVERFLOW in event queue - Solution is to tune fs.inotify.max_queued_events](https://stackoverflow.com/questions/62501928/lsyncd-overflow-in-event-queue-solution-is-to-tune-fs-inotify-max-queued-eve)">[1]</span></a></sup></p>
<p> 查看内核参数 <code>fs.inotify.max_queued_events</code> 的值，默认值为 16384</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysctl fs.inotify.max_queued_events</span></span><br><span class="line">fs.inotify.max_queued_events = 16384</span><br></pre></td></tr></table></figure>
<p>修改默认值后，重新测试，结果正常</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysctl fs.inotify.max_queued_events=1000000</span></span><br><span class="line">fs.inotify.max_queued_events = 1000000</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysctl fs.inotify.max_queued_events</span></span><br><span class="line">fs.inotify.max_queued_events = 1000000</span><br></pre></td></tr></table></figure>
<p> 永久修改此参数的值，可以将其写入内核配置文件 <code>/etc/sysctl.conf</code></p>
</li>
</ol>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://stackoverflow.com/questions/62501928/lsyncd-overflow-in-event-queue-solution-is-to-tune-fs-inotify-max-queued-eve">OVERFLOW in event queue - Solution is to tune fs.inotify.max_queued_events</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>git 常见错误</title>
    <url>/202209131721/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="error-RPC-failed-HTTP-403-curl-22-The-requested-URL-returned-error-403"><a href="#error-RPC-failed-HTTP-403-curl-22-The-requested-URL-returned-error-403" class="headerlink" title="error: RPC failed; HTTP 403 curl 22 The requested URL returned error: 403"></a>error: RPC failed; HTTP 403 curl 22 The requested URL returned error: 403</h2><p><strong>错误场景</strong> ： windows 系统中 <code>git push</code> 报错<br><img src="https://i.csms.tech/img_55.png"></p>
<p><strong>错误原因</strong> ： 大概率为用户密码错误</p>
<p><strong>排查步骤</strong> ： </p>
<ol>
<li>清除 windows 凭据管理中的 git 密码，或更改为正确的密码</li>
<li>编辑 <code>.git/config</code> 文件，对 <code>url</code> 按照如下格式配置：<figure class="highlight shell"><figcaption><span>.git/config</span></figcaption><table><tr><td class="code"><pre><span class="line">url = http://USERNAME@git.server.com/test.git</span><br></pre></td></tr></table></figure>
其中 <code>USERNAME</code> 为用户名，重新执行 <code>git push</code>，此时会要求输入用户密码，输入正确的用户密码后，可正常执行</li>
</ol>
<h2 id="There-is-no-tracking-information-for-the-current-branch"><a href="#There-is-no-tracking-information-for-the-current-branch" class="headerlink" title="There is no tracking information for the current branch"></a>There is no tracking information for the current branch</h2><p>执行 <code>git pull</code> 命令时报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull</span></span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; activity</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>此错误原因为本地的分支（<code>activity</code>）未和远程分支建立关联，根据提示，执行以下命令建立关联关系</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --set-upstream-to=origin/activity origin/xhy-activity</span></span><br><span class="line">warning: refname &#x27;origin/activity&#x27; is ambiguous.</span><br><span class="line">fatal: Ambiguous object name: &#x27;origin/activity&#x27;.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行报错： <code>fatal: Ambiguous object name: &#39;origin/activity&#39;.</code>，此报错原因为本地已存在分支 <code>origin/activity</code>，远程也存在此分支，导致 git 无法分辨。可以执行以下命令重命名本地分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -m origin/activity activity</span><br></pre></td></tr></table></figure>
<p>重新建立关联关系</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --set-upstream-to=origin/activity activity</span></span><br><span class="line">Branch activity set up to track remote branch activity from origin.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>关联正常后，执行 <code>git pull</code> 正常。</p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab 安装配置及 git 命令使用</title>
    <url>/8db58ebc/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://about.gitlab.com/install/#centos-7">安装步骤</a></p>
<blockquote>
<p>安装完成之后使用 <code>gitlab-ctl reconfigure</code> 启动服务<br>访问页面，默认使用 <code>root</code> 登录<br>每次重新更改配置，都需要使用 <code>reconfigure</code> 重新启动</p>
</blockquote>
<span id="more"></span>

<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>启动所有 gitlab 组件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl start </span><br></pre></td></tr></table></figure>
<p>停止所有 gitlab 组件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl stop </span><br></pre></td></tr></table></figure>
<p>重启所有 gitlab 组件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl restart  </span><br></pre></td></tr></table></figure>
<p>查看服务状态；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl status    </span><br></pre></td></tr></table></figure>
<p>启动服务；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure    </span><br></pre></td></tr></table></figure>
<p>修改默认的配置文件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/gitlab/gitlab.rb </span><br></pre></td></tr></table></figure>
<p>检查gitlab；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:check SANITIZE=true --trace  </span><br></pre></td></tr></table></figure>
<p>查看日志；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl tail</span><br></pre></td></tr></table></figure>

<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="初始化空目录-通过-git-init-命令把这个目录变成-git-可以管理的仓库"><a href="#初始化空目录-通过-git-init-命令把这个目录变成-git-可以管理的仓库" class="headerlink" title="初始化空目录,通过 git init 命令把这个目录变成 git 可以管理的仓库"></a>初始化空目录,通过 <code>git init</code> 命令把这个目录变成 git 可以管理的仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<h2 id="已有文件的目录创建为-git-仓库"><a href="#已有文件的目录创建为-git-仓库" class="headerlink" title="已有文件的目录创建为 git 仓库"></a>已有文件的目录创建为 git 仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init </span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;XX&quot;</span><br><span class="line">git remote add origin https://a.com/p.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h2 id="更改-git-仓库地址"><a href="#更改-git-仓库地址" class="headerlink" title="更改 git 仓库地址"></a>更改 git 仓库地址</h2><ol>
<li>方法1   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://a.com/p.git</span><br></pre></td></tr></table></figure></li>
<li>方法2 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin https://a.com/p.git</span><br></pre></td></tr></table></figure></li>
<li>方法3<br> 编辑 <code>.git/config</code> 文件, 修改 <code>[remote “origin”]</code> 下面的url即可 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = true</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = https://a.com/p.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;main&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/main</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/master</span><br><span class="line">[pull]</span><br><span class="line">        rebase = true</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><p>查看当前分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure>
<p>查看所有分支，结果中 <code>*</code> 表示当前分支  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>切换到指定分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b origin/master-dev</span><br></pre></td></tr></table></figure>
<p>切换主分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<h2 id="撤销当前工作区中对指定文件的修改"><a href="#撤销当前工作区中对指定文件的修改" class="headerlink" title="撤销当前工作区中对指定文件的修改"></a>撤销当前工作区中对指定文件的修改</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout FILE</span><br><span class="line">git checkout .</span><br></pre></td></tr></table></figure>

<h2 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h2><p>显示当前分支的 commit 历史</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
<p>查看 git 命令记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog --date=iso</span><br></pre></td></tr></table></figure>

<p>查看指定 commit 的代码变化记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git show 048bc53e65dda5</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_2.png"></p>
<h2 id="git-clone-指定分支"><a href="#git-clone-指定分支" class="headerlink" title="git clone 指定分支"></a>git clone 指定分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b $&#123;branch&#125; https://git.com/daemo.git</span><br></pre></td></tr></table></figure>
<h2 id="gitignore-配置"><a href="#gitignore-配置" class="headerlink" title=".gitignore 配置"></a>.gitignore 配置</h2><h3 id="gitignore-语法规范"><a href="#gitignore-语法规范" class="headerlink" title=".gitignore 语法规范"></a>.gitignore 语法规范</h3><ul>
<li>空行或是以 <code>#</code> 开头的行即注释行将被忽略。</li>
<li>可以在前面添加正斜杠 <code>/</code> 来避免递归,下面的例子中可以很明白的看出来与下一条的区别。</li>
<li>可以在后面添加正斜杠 <code>/</code> 来忽略文件夹，例如 <code>build/</code> 即忽略 <code>build文件夹</code>。</li>
<li>可以使用 <code>!</code> 来否定忽略，即比如在前面用了 <code>*.apk</code>，然后使用 <code>!a.apk</code>，则这个 <code>a.apk</code> 不会被忽略。</li>
<li><code>*</code> 用来匹配零个或多个字符，如 <code>*.[oa]</code> 忽略所有以 <code>.o</code> 或 <code>.a</code> 结尾，<code>*~</code> 忽略所有以 <code>~</code> 结尾的文件（这种文件通常被许多编辑器标记为临时文件）；</li>
<li><code>[]</code> 用来匹配括号内的任一字符，如 <code>[abc]</code>，也可以在括号内加连接符，如 <code>[0-9]</code> 匹配0至9的数；</li>
<li><code>?</code> 用来匹配单个字符。</li>
</ul>
<h3 id="gitignore-示例"><a href="#gitignore-示例" class="headerlink" title=".gitignore 示例"></a>.gitignore 示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略 .a 文件</span></span><br><span class="line">*.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但否定忽略 lib.a, 尽管已经在前面忽略了 .a 文件</span></span><br><span class="line">!lib.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅在当前目录下忽略 TODO 文件， 但不包括子目录下的 subdir/TODO</span></span><br><span class="line">/TODO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略 build/ 文件夹下的所有文件</span></span><br><span class="line">build/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略 doc/notes.txt, 不包括 doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略所有的 .pdf 文件 在 doc/ directory 下的</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure>

<h3 id="gitignore-不生效的原因及处理办法"><a href="#gitignore-不生效的原因及处理办法" class="headerlink" title=".gitignore 不生效的原因及处理办法"></a>.gitignore 不生效的原因及处理办法</h3><p>原因是 <code>.gitignore</code> 只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改 <code>.gitignore</code> 是无效的。</p>
<p>解决方法就是先把本地缓存删除（改变成未 track 状态），然后再提交。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &#x27;update .gitignore&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="强制同步-Git-仓库代码到本地"><a href="#强制同步-Git-仓库代码到本地" class="headerlink" title="强制同步 Git 仓库代码到本地"></a>强制同步 Git 仓库代码到本地</h2><ol>
<li>确保您已经保存了本地的更改，并且没有其他未提交的更改。可以使用以下命令查看本地代码的状态： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 1 commit.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">nothing to commit, working directory clean</span></span><br></pre></td></tr></table></figure>
 确保所有更改都已经被提交或者存储起来，以便后续操作。</li>
<li>然后，执行以下命令来强制拉取远程仓库的最新代码 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line"></span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>
 <code>git fetch --all</code> 将获取远程仓库的最新代码，而 <code>git reset --hard origin/master</code> 将强制将本地分支重置为与远程分支完全相同的状态。<blockquote>
<p>这将丢弃本地分支上的任何未提交更改，并将其重置为与远程分支相同的状态。请确保您了解操作的后果，并且您的本地更改已经保存或提交。</p>
</blockquote>
</li>
<li>在需要时，执行以下命令将本地分支的更改强制推送到远程仓库 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push -f origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="客户端账号密码管理"><a href="#客户端账号密码管理" class="headerlink" title="客户端账号密码管理"></a>客户端账号密码管理</h2><h3 id="明文保存帐户名密码"><a href="#明文保存帐户名密码" class="headerlink" title="明文保存帐户名密码"></a>明文保存帐户名密码</h3><p>使用以下方式会将用户账号密码以明文保存在 <code>~/.git-credentials</code> 中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>存储在明文文件中的凭据存在安全风险，确保该文件的访问权限仅限于当前用户(<code>chmod 600 ~/.git-credentials</code>)</strong></p>
</blockquote>
<h3 id="将帐户名密码保存在内存中"><a href="#将帐户名密码保存在内存中" class="headerlink" title="将帐户名密码保存在内存中"></a>将帐户名密码保存在内存中</h3><p>如果在多人使用的系统上，为了防止自己的账号密码信息泄露，可以参考以下方式将用户密码保存在内存中，并设置密码保存的期限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --unset credential.helper store</span><br><span class="line"></span><br><span class="line">rm -f ~/.git-credentials</span><br><span class="line"></span><br><span class="line">git config --global credential.helper &#x27;cache --timeout=31536000&#x27;</span><br></pre></td></tr></table></figure>
<p>配置完成后，拉取代码，第一次需要输入用户名密码，用户名密码会被记录到内存中。后续拉取无需再次输入密码。</p>
<blockquote>
<p>因为是保存在内存中，<strong>系统重启后会丢失，在系统重启后需要重新输入一次密码</strong>  </p>
<p>假如系统中保存了多个账户名密码，在使用 <code>git pull</code> 或者 <code>.git/config</code> 中不指定用户的情况下 <strong>默认会使用第一个帐户名密码</strong>，此中情况可能出现使用错误账号的原因无法拉取代码（<code>repository not found</code>）。要规避此问题，需要拉取代码时指定用户名。建议在 <code>.git/config</code> 中配置用户名 <code>http://username@git.com:8800/project1/api.git</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = true</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = http://username@git.com:8800/project1/api.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/master</span><br><span class="line">[branch &quot;test&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/test</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="查看帐户名密码配置信息"><a href="#查看帐户名密码配置信息" class="headerlink" title="查看帐户名密码配置信息"></a>查看帐户名密码配置信息</h3><p>查看当前配置的 <code>credential helper</code> 以及其他 Git 配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git config --list</span></span><br><span class="line">user.email=you@example.com</span><br><span class="line">user.name=Your Name</span><br><span class="line">credential.helper=cache --timeout=31536000</span><br></pre></td></tr></table></figure>

<p>或者，查看特定的配置项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper</span><br></pre></td></tr></table></figure>

<h3 id="清除缓存中的凭据"><a href="#清除缓存中的凭据" class="headerlink" title="清除缓存中的凭据"></a>清除缓存中的凭据</h3><p>可以使用以下命令清除缓存中的所有凭据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git credential-cache exit</span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="Git-fatal-Unable-to-find-remote-helper-for-‘https’"><a href="#Git-fatal-Unable-to-find-remote-helper-for-‘https’" class="headerlink" title="Git fatal: Unable to find remote helper for ‘https’"></a>Git fatal: Unable to find remote helper for ‘https’</h2><p><strong>问题原因</strong>: 未安装curl-devel，安装curl-devel后重新编译<br><strong>解决方法</strong>： 安装curl-devel后重新编译</p>
<h2 id="error-failed-to-push-some-refs-to-‘http-git-39"><a href="#error-failed-to-push-some-refs-to-‘http-git-39" class="headerlink" title="error: failed to push some refs to ‘http://git&#39;"></a>error: failed to push some refs to ‘<a href="http://git&/#39;">http://git&#39;</a></h2><p>push 代码到 Git 仓库报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">To http://git/domain.git</span><br><span class="line"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed to push some refs to &#x27;http://git/domain.git&#x27;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Merge the remote changes (e.g. &#x27;git pull&#x27;)</span><br><span class="line">hint: before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure>
<p>原因为 Git 仓库中的代码比本地代码更新。如要强制同步本地代码到 Git 仓库，可参考以下步骤</p>
<ol>
<li>确保您已经保存了本地的更改，并且没有其他未提交的更改。可以使用以下命令查看本地代码的状态： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 1 commit.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">nothing to commit, working directory clean</span></span><br></pre></td></tr></table></figure>
 确保所有更改都已经被提交或者存储起来，以便后续操作。</li>
<li>执行以下命令来拉取远程分支的最新更改，此处要同步的分支为 master。这将拉取远程分支的最新更改并尝试将其合并到本地分支。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></li>
<li>如果发生合并冲突并且您已经解决了冲突，请执行以下命令标记冲突已解决 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li>
<li>接下来，提交您的更改： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;Merge remote changes&quot;</span><br></pre></td></tr></table></figure></li>
<li>最后，将本地更改强制推送到远程仓库 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push -f origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 部署使用</title>
    <url>/202306231515/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>执行以下命令安装 Go 环境</p>
<p><a href="https://go.dev/dl/">Go 安装包下载地址</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://go.dev/dl/go1.14.15.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xf go1.14.15.linux-amd64.tar.gz -C /usr/local/</span><br><span class="line"></span><br><span class="line">echo &quot;export PATH=$PATH:/usr/local/go/bin&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>执行 <code>go</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go version</span></span><br><span class="line">go version go1.20.5 linux/amd64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="bad-ELF-interpreter"><a href="#bad-ELF-interpreter" class="headerlink" title="bad ELF interpreter"></a>bad ELF interpreter</h2><p>安装后执行 <code>go</code> 报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-bash: /usr/local/go/bin/go: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em><strong>问题原因</strong></em> 为下载的 <code>go</code> 与运行的目标系统不兼容，比如下载了 <code>x86</code> 的安装包，安装到了 64 位的 OS 上。 </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Godaddy api 使用</title>
    <url>/202302251333/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://developer.godaddy.com/getstarted">Godaddy API 参考文档</a></p>
<p>根据参考文档说明，获取到 <code>key</code> 和 <code>secret</code></p>
<p>Python3 sdk 可以使用 <code>godaddypy</code></p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3.11.2</li>
<li>godaddypy</li>
</ul>
<p><code>godaddypy</code> 主要提供了 2 个类，分别为</p>
<ul>
<li><code>account</code> - 使用 <code>key</code> 和 <code>secret</code> 为 <code>client</code> 生成鉴权头部</li>
<li><code>client</code> - 连接 Godaddy API 并执行相应的请求</li>
</ul>
<p>具体使用方法可以查看帮助信息，或者查看 Godaddy API 参考文档</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(godaddypy)</span><br></pre></td></tr></table></figure>
<h1 id="godaddypy-常见用法示例"><a href="#godaddypy-常见用法示例" class="headerlink" title="godaddypy 常见用法示例"></a>godaddypy 常见用法示例</h1><h2 id="获取账号中的所有域名"><a href="#获取账号中的所有域名" class="headerlink" title="获取账号中的所有域名"></a>获取账号中的所有域名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> godaddypy</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ak = <span class="string">&#x27;AAAAAAAAAAAAAA&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sk = <span class="string">&#x27;BBBBBBBBBBBBBBB&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>account = godaddypy.Account(ak, sk)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = godaddypy.Client(account)</span><br></pre></td></tr></table></figure>
<p>根据 Godaddy API 文档说明，获取域名，每次默认获取 500 个，最多可以一次性获取 1000 个。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取域名，默认 100 个。如果账户内的域名数量少于 100，则一次性可以获取完毕，多于 100，获取前 100 个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.get_domains()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取前 1000 个，最多一次性获取 1000 个。如果账户内的域名数量少于 1000，则一次性可以获取完毕，多于 1000，获取前 1000 个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.get_domains(limit=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 超过 1000 会报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.get_domains(limit=<span class="number">1001</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.11/site-packages/godaddypy/client.py&quot;</span>, line <span class="number">105</span>, <span class="keyword">in</span> _validate_response_success</span><br><span class="line">    response.raise_for_status()</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.11/site-packages/requests/models.py&quot;</span>, line <span class="number">1021</span>, <span class="keyword">in</span> raise_for_status</span><br><span class="line">    <span class="keyword">raise</span> HTTPError(http_error_msg, response=self)</span><br><span class="line">requests.exceptions.HTTPError: <span class="number">422</span> Client Error: Unprocessable Entity <span class="keyword">for</span> url: https://api.godaddy.com/v1/domains?limit=<span class="number">1001</span></span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.11/site-packages/godaddypy/client.py&quot;</span>, line <span class="number">149</span>, <span class="keyword">in</span> get_domains</span><br><span class="line">    data = self._get_json_from_response(url, params=params)</span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.11/site-packages/godaddypy/client.py&quot;</span>, line <span class="number">75</span>, <span class="keyword">in</span> _get_json_from_response</span><br><span class="line">    <span class="keyword">return</span> self._request_submit(requests.get, url=url, json=json, **kwargs).json()</span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.11/site-packages/godaddypy/client.py&quot;</span>, line <span class="number">97</span>, <span class="keyword">in</span> _request_submit</span><br><span class="line">    self._validate_response_success(resp)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.11/site-packages/godaddypy/client.py&quot;</span>, line <span class="number">107</span>, <span class="keyword">in</span> _validate_response_success</span><br><span class="line">    <span class="keyword">raise</span> BadResponse(response.json())</span><br><span class="line">godaddypy.client.BadResponse: Response Data: &#123;<span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;VALUE_OVER&#x27;</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Limit must have a value no greater than 1000&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>如果账户内域名数量大于 1000，可以通过 API 提供的 <code>marker</code> 标记，获取到所有域名。流程为获取到前 100 个域名，使用第 100 个域名作为 <code>marker</code>，会获取到第 101 - 200 个域名，以此类推，获取所有域名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.get_domains()</span><br><span class="line">[..., <span class="string">&#x27;100.com&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.get_domains(limit=<span class="number">100</span>, marker=<span class="string">&#x27;100.com&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;101.com&#x27;</span>, ..., <span class="string">&#x27;200.com&#x27;</span>]</span><br></pre></td></tr></table></figure>


<h2 id="获取指定域名的详细信息"><a href="#获取指定域名的详细信息" class="headerlink" title="获取指定域名的详细信息"></a>获取指定域名的详细信息</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.get_domain_info(<span class="string">&#x27;test.app&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h1 id="API-REST-接口用法示例"><a href="#API-REST-接口用法示例" class="headerlink" title="API REST 接口用法示例"></a>API REST 接口用法示例</h1><p><code>godaddypy</code> 库无法实现的功能需要调用原生的 API 实现。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Using the GoDaddy API](https://developer.godaddy.com/getstarted)
">[1]</span></a></sup></p>
<p>API 调用示例 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Using the GoDaddy API](https://developer.godaddy.com/getstarted)
">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -X GET -H <span class="string">&quot;Authorization: sso-key TtbYHEHLWmyVvXB:CrezwNmyEsh&quot;</span> <span class="string">&quot;https://api.godaddy.com/v1/domains/available?domain=example.guru&quot;</span></span></span><br><span class="line">&#123;&quot;available&quot;:false,&quot;definitive&quot;:true,&quot;domain&quot;:&quot;example.guru&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>部分接口需要传入 <code>customerId</code>，需要通过 <code>shopperId</code> 来获取到 <code>customerId</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Documentation: Shoppers API](https://developer.godaddy.com/doc/endpoint/shoppers#/v1/get)">[2]</span></a></sup></p>
<blockquote>
<p><code>shopperId</code> 登陆 godaddy 账号后，在账号信息中可以看到<br><img src="https://i.csms.tech/img_147.png"></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -X GET -H <span class="string">&quot;Authorization: sso-key e42pmipGG8rv:JYHg2i&quot;</span> <span class="string">&quot;https://api.godaddy.com/v1/shoppers/208231111/?includes=customerId&quot;</span></span></span><br><span class="line">&#123;&quot;shopperId&quot;:&quot;208231111&quot;,&quot;marketId&quot;:&quot;en-PH&quot;,&quot;email&quot;:&quot;kdjgies@163.com&quot;,&quot;externalId&quot;:null,&quot;nameFirst&quot;:&quot;dgeaf&quot;,&quot;nameLast&quot;:&quot;F&quot;,&quot;customerId&quot;:&quot;5d072871-6f2d-42d6-96ed-kd09rkjkkg&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>以下示例查询域名的续费信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -X GET -H <span class="string">&quot;Authorization: sso-key e42pmipGG8rv:JYHg2i&quot;</span> <span class="string">&quot;https://api.godaddy.com/v2/customers/5d072871-6f2d-42d6-96ed-kd09rkjkkg/domains/1af7.com&quot;</span></span></span><br><span class="line">&#123;&quot;createdAt&quot;:&quot;2020-12-23T06:26:02.000Z&quot;,&quot;domain&quot;:&quot;1af7.com&quot;,&quot;domainId&quot;:335211690,&quot;expirationProtected&quot;:false,&quot;expiresAt&quot;:&quot;2023-12-23T06:26:02.000Z&quot;,&quot;holdRegistrar&quot;:false,&quot;locked&quot;:true,&quot;modifiedAt&quot;:&quot;2022-11-13T18:54:35.730Z&quot;,&quot;nameServers&quot;:[&quot;b.ns.cloudflare.com&quot;,&quot;d.ns.cloudflare.com&quot;],&quot;privacy&quot;:true,&quot;redemption&quot;:&#123;&quot;redeemable&quot;:false&#125;,&quot;registrarCreatedAt&quot;:&quot;2020-12-23T04:20:54.913Z&quot;,&quot;renewAuto&quot;:false,&quot;renewDeadline&quot;:&quot;2024-02-06T06:26:02.000Z&quot;,&quot;renewal&quot;:&#123;&quot;currency&quot;:&quot;USD&quot;,&quot;price&quot;:9450000,&quot;renewable&quot;:true&#125;,&quot;status&quot;:&quot;ACTIVE&quot;,&quot;transferProtected&quot;:false&#125;</span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.godaddy.com/getstarted">Using the GoDaddy API</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.godaddy.com/doc/endpoint/shoppers#/v1/get">Documentation: Shoppers API</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>云平台</category>
        <category>Godaddy</category>
      </categories>
      <tags>
        <tag>云平台</tag>
        <tag>Godaddy</tag>
      </tags>
  </entry>
  <entry>
    <title>Grafana 使用</title>
    <url>/202306051707/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Grafana 是一款用 GO 语言开发的开源数据可视化工具，可以做数据监控和数据统计，带有告警功能。</p>
<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="组织-Organization-与用户-User"><a href="#组织-Organization-与用户-User" class="headerlink" title="组织(Organization) 与用户(User)"></a>组织(Organization) 与用户(User)</h2><p><strong>Organization</strong> 相当于一个 Namespace，一个 Organization 完全独立于另一个 Organization，包括 <code>datasource</code>、<code>dashboard</code> 等，创建一个 Organization 就相当于打开了一个全新的视图，所有的 <code>datasource</code>、<code>dashboard</code> 等都需要重新创建。一个用户(User) 可以属于多个 Organization。</p>
<p><strong>User</strong> 是 Grafana 里面的用户，用户可以有以下 <strong>角色</strong></p>
<ul>
<li><code>admin</code> - 管理员权限，可以执行任何操作。</li>
<li><code>editor</code> - <em>p</em>不可以创建用户<strong>、</strong>不可以新增 <code>Datasource</code><strong>、</strong>可以创建 Dashboard**</li>
<li><code>viewer</code> - 仅可以查看 Dashboard</li>
<li><code>read only editor</code> - 允许用户修改 Dashboard，但是 <strong>不允许保存</strong></li>
</ul>
<h2 id="数据源-Datasource"><a href="#数据源-Datasource" class="headerlink" title="数据源 Datasource"></a>数据源 Datasource</h2><p>Grafana 中操作的数据集、可视化数据的来源</p>
<h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><p>在 Dashboard 页面中，可以组织可视化数据图表。</p>
<ul>
<li><code>Panel</code> - 在一个 Dashboard 中，Panel 是最基本的可视化单元。通过 Panel 的 <code>Query Editor</code> 可以为每一个 Panel 添加查询的数据源以及数据查询方式。每一个 Panel 都是独立的，可以选择一种或者多种数据源进行查询。<strong>一个 Panel 中可以有多个 <code>Query Editor</code> 来汇聚多个可视化数据集</strong></li>
<li><code>Row</code> - 在 Dashboard 中，可以定义一个 <code>Row</code>，来组织和管理一组相关的 <code>Panel</code></li>
</ul>
<h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>在 Dashboard 的设置页面中，有 <code>Variables</code> 页面，在其中可以为 Dashboard 配置变量，之后可以在 Panel 的 <code>Query Editor</code> 中使用这些预定义的变量。<strong>变量的值也可以是通过表达式获取的值</strong>。也可以在 <strong>Panel 的标题中使用变量</strong></p>
<p>例如以下 Variables 配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Node    label_values(kubernetes_io_hostname)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.csms.tech/img_169.png"></p>
<p><img src="https://i.csms.tech/img_168.png"></p>
<p>在 Dashboard 中定义了这些变量后，可以在 Panel 的 <code>Query Editor</code> 中使用，在 <code>Query Editor</code> 中使用了 Variables 中定义的变量后，在 Dashboard 的顶部下拉菜单中可以选择预定义的变量的值（<strong>需要在定义 Variables 时配置 <code>Show on dashboard</code> 为 <code>Label and Value</code> 以使在 Dashboard 顶部显示下拉菜单</strong>），Panel 中的 <code>Query</code> 表达式就会使用这些变量的值进行计算以及显示图表。<br><img src="https://i.csms.tech/img_170.png"></p>
<span id="more"></span>

<h4 id="变量关联查询"><a href="#变量关联查询" class="headerlink" title="变量关联查询"></a>变量关联查询</h4><p>有时候需要在一个变量中使用另一个变量的值来筛选结果。例如以下场景：</p>
<blockquote>
<p>假如有 2 个 k8s 集群，第一个 k8s 集群名为 <code>k8s-cluster1</code>，其中有 3 个节点: <code>k8s-cluster1-1</code>, <code>k8s-cluster1-2</code>, <code>k8s-cluster1-3</code>,</p>
<p>第二个 k8s 集群名为 <code>k8s-cluster2</code>, 其中有 3 个节点: <code>k8s-cluster2-1</code>, <code>k8s-cluster2-2</code>, <code>k8s-cluster2-3</code>,</p>
<p>从 <code>k8s-cluster1</code> 集群采集的指标都有 <code>cluster=k8s-cluster1</code> 的标签，</p>
<p>从 <code>k8s-cluster2</code> 集群采集的指标都有 <code>cluster=k8s-cluster2</code> 的标签，</p>
<p>grafana 中定义变量 <code>cluster</code>，其值是 <code>cluster</code> 标签的值，</p>
<p>如何定义变量 <code>node</code>，其值根据 <code>cluster</code> 变量来决定，例如当 <code>cluster</code> 的值是 <code>k8s-cluster1</code> 时，<code>node</code> 的值只能选择 <code>k8s-cluster1-1</code>, <code>k8s-cluster1-2</code>, <code>k8s-cluster1-3</code>,</p>
<p>当 <code>cluster</code> 的值是 <code>k8s-cluster2</code> 时，<code>node</code> 的值只能选择 <code>k8s-cluster2-1</code>, <code>k8s-cluster2-2</code>, <code>k8s-cluster2-3</code>, </p>
</blockquote>
<p>要实现以上需求，可以使用如下的表达式定义 <code>node</code> 变量</p>
<ol>
<li>添加 Variables，<code>variable type</code> 选择 <code>Query</code></li>
<li><code>Data source</code> 选择对应的 Prometheus</li>
<li><code>Query</code> 中选择 <code>Query Type</code> 为 <code>Label values</code>，<code>Label *</code> 选择 <code>kubernetes_io_hostname</code>，<strong>后面的 <code>Metric</code> 中配置表达式 <code>up&#123;cluster=~&quot;$cluster&quot;&#125;</code> 以限制筛选结果</strong><blockquote>
<p>这里的 <strong>主要配置为 <code>Metric</code> 中配置表达式 <code>up&#123;cluster=~&quot;$cluster&quot;&#125;</code>，用来限制 <code>Label values</code> 是从 <code>up&#123;cluster=~&quot;$cluster&quot;&#125;</code> 的结果中筛选值</strong></p>
</blockquote>
</li>
</ol>
<p><img src="https://i.csms.tech/img_185.png"></p>
<p>对应的 Variables Definition 为 <code>label_values(up&#123;cluster_name=~&quot;$k8sClusterName&quot;&#125;,kubernetes_io_hostname)</code></p>
<h1 id="常用配置示例"><a href="#常用配置示例" class="headerlink" title="常用配置示例"></a>常用配置示例</h1><h2 id="Gauge-类型"><a href="#Gauge-类型" class="headerlink" title="Gauge 类型"></a>Gauge 类型</h2><p>Gauge 类型的数据是一个标量值，代表了当前的值。</p>
<h3 id="选择图标显示的数据格式"><a href="#选择图标显示的数据格式" class="headerlink" title="选择图标显示的数据格式"></a>选择图标显示的数据格式</h3><p>例如要配置百分比类型的图标，可以在 <code>Panel</code> 配置中的 <code>Standard options</code> 中选择 <code>Unit</code> 为 <code>Misc</code> -&gt; <code>Percent(0-100)</code></p>
<p><img src="https://i.csms.tech/img_171.png"></p>
<h3 id="配置-Gauge-图标显示渐变色"><a href="#配置-Gauge-图标显示渐变色" class="headerlink" title="配置 Gauge 图标显示渐变色"></a>配置 Gauge 图标显示渐变色</h3><p>要配置 Gauge 仪表盘的渐变色，可以在 <code>Panel</code> 配置中的 <code>Thresholds</code> 中添加渐变颜色<br><img src="https://i.csms.tech/img_172.png"></p>
<p>要使 Gauge 仪表盘内部显示度量值，需要配置 <code>Standard options</code> –&gt; <code>Min</code>、<code>Standard options</code> –&gt; <code>Max</code>、 <code>Standard options</code> –&gt; <code>Decimals</code><br><img src="https://i.csms.tech/img_173.png"></p>
<h2 id="Time-series"><a href="#Time-series" class="headerlink" title="Time series"></a>Time series</h2><h3 id="自定义图形的-Legend"><a href="#自定义图形的-Legend" class="headerlink" title="自定义图形的 Legend"></a>自定义图形的 Legend</h3><p>默认情况下，Legend 会显示指标中的所有标签，会比较长，为了缩短简化 Legend，需要自定义 Legend。在 <strong>图形的编辑界面</strong>，表达式下的 Options 中，选择 <code>Legend</code> 进行自定义，可以使用已有的标签 <code>&#123;&#123;label&#125;&#125;</code>，或者 Variables <code>$variable</code> 来格式化 Lengend</p>
<p>下图为默认的 Legend<br><img src="https://i.csms.tech/img_178.png"></p>
<p>下图为为自定义后的 Legend<br><img src="https://i.csms.tech/img_180.png"></p>
<h1 id="Grafana-展示-Zabbix-监控数据"><a href="#Grafana-展示-Zabbix-监控数据" class="headerlink" title="Grafana 展示 Zabbix 监控数据"></a>Grafana 展示 Zabbix 监控数据</h1><h2 id="安装-Zabbix-插件"><a href="#安装-Zabbix-插件" class="headerlink" title="安装 Zabbix 插件"></a>安装 Zabbix 插件</h2><p>在 Grafana 的 <code>Administration</code> –&gt; <code>Plugins</code> 中搜索 <code>Zabbix</code> 插件并 <code>install</code>。安装后在插件中找到 <code>Zabbix</code> 插件并 <code>Enable</code></p>
<h2 id="添加-Data-source"><a href="#添加-Data-source" class="headerlink" title="添加 Data source"></a>添加 Data source</h2><p>直接使用 Zabbix 的 API 性能较差，建议让 Zabbix 的 Data Source 直连 Zabbix 数据库。</p>
<ol>
<li><p>首先要添加一个 Mysql 的数据源（此处示例 Zabbix 数据库为 Mysql）</p>
</li>
<li><p>Mysql 配置成功后，选择 <code>Zabbix</code> 添加为 Data Source，使用 Zabbix 的 API 链接及认证用户名和密码配置 Data source，配置 <code>Direct DB Connection</code> 为 <code>Enable</code> 并选择数据库为第一步配置的 Mysql Data source<br> <img src="https://i.csms.tech/img_191.png"><br> <img src="https://i.csms.tech/img_192.png"></p>
</li>
</ol>
<h2 id="常用查询"><a href="#常用查询" class="headerlink" title="常用查询"></a>常用查询</h2><p>因为 Grafana 直连了 Zabbix 数据库，有些查询可以直接查询 Zabbix 的 Mysql 数据库</p>
<h3 id="Zabbix-监控的主机数量"><a href="#Zabbix-监控的主机数量" class="headerlink" title="Zabbix 监控的主机数量"></a>Zabbix 监控的主机数量</h3><p>SQL ： <code>SELECT COUNT(*) AS host_count FROM hosts;</code><br><img src="https://i.csms.tech/img_193.png"></p>
<h1 id="使用-Prometheus-数据源展示-Kubernetes-中-Ingress-Nginx-Controller-监控数据"><a href="#使用-Prometheus-数据源展示-Kubernetes-中-Ingress-Nginx-Controller-监控数据" class="headerlink" title="使用 Prometheus 数据源展示 Kubernetes 中 Ingress Nginx Controller 监控数据"></a>使用 Prometheus 数据源展示 Kubernetes 中 Ingress Nginx Controller 监控数据</h1><p><a href="https://csms.tech/202212141608/#配置-Prometheus-抓取-Ingress-Nginx-指标">Prometheus 监控 Kubernetes 中 Ingress Nginx Controller 指标配置参考</a>.</p>
<p>在 Grafana Dashboard 中配置以下 Variables</p>
<ul>
<li><code>k8sClusterName label_values(cluster_name)</code></li>
<li><code>k8sNamespace  label_values(kube_namespace_labels&#123;cluster_name=~&quot;$k8sClusterName&quot;&#125;,namespace)</code></li>
<li><code>Ingress  label_values(kube_ingress_info&#123;cluster_name=~&quot;$&#123;k8sClusterName&#125;&quot;, namespace=~&quot;$&#123;k8sNamespace&#125;&quot;&#125;,ingress)</code></li>
<li><code>Host  label_values(kube_ingress_path&#123;cluster_name=~&quot;$k8sClusterName&quot;,namespace=~&quot;$k8sNamespace&quot;,ingress=~&quot;$Ingress&quot;&#125;,host)</code></li>
</ul>
<h2 id="Ingress-Nginx-Controller-发送的数据总和"><a href="#Ingress-Nginx-Controller-发送的数据总和" class="headerlink" title="Ingress Nginx Controller 发送的数据总和"></a>Ingress Nginx Controller 发送的数据总和</h2><p>使用表达式： <code>sum(rate(nginx_ingress_controller_bytes_sent_sum&#123;cluster_name=~&quot;$k8sClusterName&quot;, namespace=~&quot;$k8sNamespace&quot;, ingress=~&quot;$Ingress&quot;,host=~&quot;$Host&quot;&#125;[2m]))</code></p>
<p><img src="https://i.csms.tech/img_217.png"></p>
<h2 id="Ingress-Nginx-Controller-各个实例的连接数"><a href="#Ingress-Nginx-Controller-各个实例的连接数" class="headerlink" title="Ingress Nginx Controller 各个实例的连接数"></a>Ingress Nginx Controller 各个实例的连接数</h2><p><code>sum by (instance)(rate(nginx_ingress_controller_nginx_process_connections&#123;cluster_name=~&quot;$k8sClusterName&quot;&#125;[2m]))</code><br><img src="https://i.csms.tech/img_218.png"></p>
<h2 id="Ingress-Nginx-Controller-请求成功率"><a href="#Ingress-Nginx-Controller-请求成功率" class="headerlink" title="Ingress Nginx Controller 请求成功率"></a>Ingress Nginx Controller 请求成功率</h2><p><code>sum(rate(nginx_ingress_controller_requests&#123;cluster_name=~&quot;$k8sClusterName&quot;,ingress=~&quot;$Ingress&quot;,namespace=~&quot;$k8sNamespace&quot;,status!~&quot;[4-5].*&quot;&#125;[2m])) / sum(rate(nginx_ingress_controller_requests&#123;cluster_name=~&quot;$k8sClusterName&quot;,ingress=~&quot;$Ingress&quot;,namespace=~&quot;$k8sNamespace&quot;&#125;[2m]))</code><br><img src="https://i.csms.tech/img_219.png"></p>
<h2 id="Ingress-Nginx-Controller-请求持续时间"><a href="#Ingress-Nginx-Controller-请求持续时间" class="headerlink" title="Ingress Nginx Controller 请求持续时间"></a>Ingress Nginx Controller 请求持续时间</h2><p>计算平均请求持续时间：<br><code>sum by (namespace, ingress) (nginx_ingress_controller_request_duration_seconds_sum) / sum by (namespace, ingress) (nginx_ingress_controller_request_duration_seconds_count)</code></p>
<p>计算平均上游占用时间：<br><code>sum by (namespace, ingress) (nginx_ingress_controller_ingress_upstream_latency_seconds_sum) / sum by (namespace, ingress) (nginx_ingress_controller_ingress_upstream_latency_seconds_count)</code></p>
<h1 id="Grafana-Notification-Template-语法总结"><a href="#Grafana-Notification-Template-语法总结" class="headerlink" title="Grafana Notification Template 语法总结"></a>Grafana Notification Template 语法总结</h1><ul>
<li>使用版本 Grafana v10.4.1</li>
</ul>
<p>Grafana 集成的 Alert Rule 和 Notification Policies 在发送告警时一般是以 Group 的形式发送告警信息。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Namespaces, folders, and groups](https://grafana.com/docs/grafana-cloud/alerting-and-irm/alerting/fundamentals/alert-rules/organising-alerts/)
">[1]</span></a></sup></p>
<h2 id="Alerts"><a href="#Alerts" class="headerlink" title=".Alerts"></a>.Alerts</h2><p>告警和恢复消息存放在 <code>.Alerts</code> 中，为 <code>切片（slice）</code> 类型</p>
<ul>
<li><code>.Alerts.Firing</code> - 存放了告警消息对象</li>
<li><code>.Alerts.Resolved</code> - 存放了告警恢复消息对象</li>
</ul>
<p>以下语句打印出所有的告警及其标签，标签以 <code>,</code> 分割： <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Using Go’s templating language](https://grafana.com/docs/grafana-cloud/alerting-and-irm/alerting/configure-notifications/template-notifications/using-go-templating-language/)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; range .Alerts &#125;&#125;</span><br><span class="line">&#123;&#123; .Labels &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_226.png"></p>
<p>参考以下语句打印出所有的告警以及对应实例的标签，标签按行分割 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Using Go’s templating language](https://grafana.com/docs/grafana-cloud/alerting-and-irm/alerting/configure-notifications/template-notifications/using-go-templating-language/)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; range .Alerts &#125;&#125;</span><br><span class="line">********************************</span><br><span class="line">&#123;&#123; range .Labels.SortedPairs &#125;&#125;</span><br><span class="line"> &#123;&#123; .Name &#125;&#125; = &#123;&#123; .Value &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; range .Annotations.SortedPairs &#125;&#125;</span><br><span class="line"> &#123;&#123; .Name &#125;&#125; = &#123;&#123; .Value &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_227.png"></p>
<p>参考以下语句可以获取到告警列表中指定的 Labels 或者 Annotations 的所有值 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Using Go’s templating language](https://grafana.com/docs/grafana-cloud/alerting-and-irm/alerting/configure-notifications/template-notifications/using-go-templating-language/)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; range .Alerts &#125;&#125;</span><br><span class="line">The name of the alert is &#123;&#123; index .Labels &quot;instance&quot; &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; range .Alerts &#125;&#125;</span><br><span class="line">The name of the alert is &#123;&#123; index .Annotations &quot;summary&quot; &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_228.png"></p>
<p>参考以下语句获取告警消息的数量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; len .Alerts &#125;&#125;</span><br><span class="line">&#123;&#123; len .Alerts.Firing &#125;&#125;</span><br><span class="line">&#123;&#123; len .Alerts.Resolved &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>使用以下语句获取告警及恢复告警的时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">UTC 时间</span></span><br><span class="line">StartTime: &#123;&#123; .StartsAt &#125;&#125;</span><br><span class="line">EndTime: &#123;&#123; .EndsAt &#125;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改为东八区的时间并指定时间显示格式</span></span><br><span class="line">StartTime: &#123;&#123; (.StartsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">EndTime:&#123;&#123; (.EndsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br></pre></td></tr></table></figure>


<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="Grafana-集成的-Telegram-发送消息失败"><a href="#Grafana-集成的-Telegram-发送消息失败" class="headerlink" title="Grafana 集成的 Telegram 发送消息失败"></a>Grafana 集成的 Telegram 发送消息失败</h2><ul>
<li>Grafana v10.4.1</li>
</ul>
<p>Grafana 配置 <code>Contact points</code>，<code>Integration</code> 选择 <code>Telegram</code>，<code>Parse Mode</code> 选择 <code>HTML</code>，使用以下模板发送消息失败 <code>Failed to send test alert.: failed to send telegram message: webhook response status 400 Bad Request</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; define &quot;MyNotificationTemplate&quot; &#125;&#125;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    There are &#123;&#123; len .Alerts.Firing &#125;&#125; firing alert(s), and &#123;&#123; len .Alerts.Resolved &#125;&#125; resolved alert(s).</span><br><span class="line">    </span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>修改为以下内容后（<em><strong>去掉 <code>html</code> 和 <code>body</code> 标签</strong></em>），可以正常发送消息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; define &quot;MyNotificationTemplate&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line">    There are &#123;&#123; len .Alerts.Firing &#125;&#125; firing alert(s), and &#123;&#123; len .Alerts.Resolved &#125;&#125; resolved alert(s).</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>经测试，在 Grafana <code>notification template</code> 中使用 <code>HTML</code> 格式发送消息到 Telegram，不能使用以下标签，否则报错： <code>Failed to send test alert.: failed to send telegram message: webhook response status 400 Bad Request</code></p>
<ul>
<li><code>html</code></li>
<li><code>body</code></li>
<li><code>br</code></li>
<li><code>p</code></li>
</ul>
<p>支持以下标签：</p>
<ul>
<li><code>&lt;b&gt;粗体&lt;/b&gt;</code></li>
<li><code>&lt;i&gt;斜体&lt;/i&gt;</code></li>
<li><code>&lt;u&gt;下划线&lt;/u&gt;</code></li>
<li><code>&lt;s&gt;删除线&lt;/s&gt;</code></li>
</ul>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="Dashboard-顶部的选择下拉单初始值无法固定"><a href="#Dashboard-顶部的选择下拉单初始值无法固定" class="headerlink" title="Dashboard 顶部的选择下拉单初始值无法固定"></a>Dashboard 顶部的选择下拉单初始值无法固定</h2><p>使用 Variables 后，Dashboard 顶部的选择下拉单中想让初始值为 <code>All</code>（假设所有变量都有 All 选项），在 Dashboard 选择所有的下拉选项选择 <code>All</code>，然后保存 Dashboard。重新刷新页面或者重新登陆后，很多下拉选项都不是保存是设置的 <code>All</code> 选项。</p>
<p>要解决此问题，参考以下方法：</p>
<ol>
<li>在 Dashboard 选择所有的下拉选项选择 <code>All</code></li>
<li>点击 <code>Dashboard settings</code>，在设置页面中选择 <code>JSON Model</code>，点击左下角的 <code>Save changes</code> 。重新刷新或者重新登陆后，Dashboard 顶部的选择下拉选项默认值都为 <code>All</code><br><img src="https://i.csms.tech/img_230.png"></li>
</ol>
<h2 id="Grafana-Table-中对字段排序"><a href="#Grafana-Table-中对字段排序" class="headerlink" title="Grafana Table 中对字段排序"></a>Grafana Table 中对字段排序</h2><p>Grafana 中的 Table 类型的数据，默认的列顺序是和查询语句返回的顺序一致，像 Prometheus 返回的列不支持通过 ProQL 调整结果中标签的顺序，此种情况下要在 Grafana Table 中调整列的排列顺序，需要使用 Grafana 提供的 <code>Transform data</code> 功能，具体操作步骤如下：</p>
<ol>
<li>在 <code>Transform data</code> 标签页中点击 <code>Add transformation</code>。</li>
<li>在弹出的子页面中找到或者搜索 <code>Organize fields by name</code>。</li>
<li>在页面中拖动调整字段的顺序，即可完成调整 Table 中列顺序的目的。</li>
</ol>
<h2 id="Grafana-统一告警发送的通知中时区修改为东八区"><a href="#Grafana-统一告警发送的通知中时区修改为东八区" class="headerlink" title="Grafana 统一告警发送的通知中时区修改为东八区"></a>Grafana 统一告警发送的通知中时区修改为东八区</h2><p>Grafana 统一告警发送的通知中时区固定为 UTC 时间，要修改为东八区，参考以下模板(<code>(.StartsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot;</code>)将时间改为东八区时间并指定时间显示的格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#123; define &quot;MyNotificationTemplate&quot; &#125;&#125;</span><br><span class="line">There are &lt;b&gt;&lt;u&gt;&#123;&#123; len .Alerts.Firing &#125;&#125;&lt;/u&gt; firing&lt;/b&gt; alert(s), and &lt;b&gt;&#123;&#123; len .Alerts.Resolved &#125;&#125; &lt;s&gt;resolved&lt;/s&gt;&lt;/b&gt; alert(s). </span><br><span class="line">    </span><br><span class="line">    &#123;&#123; if .Alerts.Firing &#125;&#125;</span><br><span class="line">&lt;code&gt;Firing Alerts&lt;/code&gt;:</span><br><span class="line">    &#123;&#123; range .Alerts.Firing &#125;&#125;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">Name: &#123;&#123; index .Labels &quot;alertname&quot; &#125;&#125;</span><br><span class="line">StartTime: &#123;&#123; (.StartsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">Severity: &#123;&#123; index .Labels &quot;Severity&quot; &#125;&#125;</span><br><span class="line">Status: &#123;&#123; .Status &#125;&#125;</span><br><span class="line">Summary: &#123;&#123; index .Annotations &quot;summary&quot; &#125;&#125;</span><br><span class="line">Details: </span><br><span class="line">&#123;&#123; index .Annotations &quot;description&quot; &#125;&#125;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">GeneratorURL: &#123;&#123; .GeneratorURL &#125;&#125;</span><br><span class="line">PanelURL: &#123;&#123; .PanelURL &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;- end &#125;&#125;</span><br><span class="line">    &#123;&#123;- end &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; if .Alerts.Resolved &#125;&#125;</span><br><span class="line">&lt;code&gt;Resolved Alerts&lt;/code&gt;:</span><br><span class="line">    &#123;&#123; range .Alerts.Resolved &#125;&#125;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">Name: &#123;&#123; index .Labels &quot;alertname&quot; &#125;&#125;</span><br><span class="line">EndTime:&#123;&#123; (.EndsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">Severity: &#123;&#123; index .Labels &quot;Severity&quot; &#125;&#125;</span><br><span class="line">Status: &#123;&#123; .Status &#125;&#125;</span><br><span class="line">Summary: &#123;&#123; index .Annotations &quot;summary&quot; &#125;&#125;</span><br><span class="line">Details: </span><br><span class="line">&#123;&#123; index .Annotations &quot;description&quot; &#125;&#125;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">GeneratorURL: &#123;&#123; .GeneratorURL &#125;&#125;</span><br><span class="line">PanelURL: &#123;&#123; .PanelURL &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;- end &#125;&#125;</span><br><span class="line">    &#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://grafana.com/docs/grafana-cloud/alerting-and-irm/alerting/fundamentals/alert-rules/organising-alerts/">Namespaces, folders, and groups</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://grafana.com/docs/grafana-cloud/alerting-and-irm/alerting/configure-notifications/template-notifications/using-go-templating-language/">Using Go’s templating language</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title>helm 安装及使用</title>
    <url>/202210071543/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>centos7 5.4.212-1.el7</li>
<li>kubernetes Server Version: v1.25.0</li>
<li>Helm 3.10.0</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li><p>下载 <a href="https://github.com/helm/helm/releases">需要的版本</a></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://get.helm.sh/helm-v3.10.0-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>解压</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xf helm-v3.10.0-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>在解压目中找到 <code>helm</code> 程序，移动到需要的目录中</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp linux-amd64/helm /usr/local/bin/</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ helm version</span><br><span class="line"> version.BuildInfo&#123;Version:&quot;v3.10.0&quot;, GitCommit:&quot;ce66412a723e4d89555dc67217607c6579ffcb21&quot;, GitTreeState:&quot;clean&quot;, GoVersion:&quot;go1.18.6&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h1><h2 id="查看已安装的-release"><a href="#查看已安装的-release" class="headerlink" title="查看已安装的 release"></a>查看已安装的 release</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm ls</span><br><span class="line"></span><br><span class="line">helm ls -A</span><br></pre></td></tr></table></figure>

<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm <span class="built_in">ls</span> -A</span></span><br><span class="line">NAME        	NAMESPACE    	REVISION	UPDATED                                	STATUS	CHART                APP VERSION</span><br><span class="line">cert-manager	cert-manager 	1       	2022-11-01 09:57:11.373366484 +0800 CST	failed	cert-manager-v1.7.1  v1.7.1     </span><br><span class="line">rancher     	cattle-system	1       	2022-11-01 10:05:07.370131566 +0800 CST	failed	rancher-2.6.9        v2.6.9     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm uninstall rancher -n cattle-system</span></span><br><span class="line">W1101 10:21:32.764269   11113 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+</span><br><span class="line">W1101 10:21:34.043445   11113 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+</span><br><span class="line">W1101 10:21:39.809766   11113 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+</span><br><span class="line">release &quot;rancher&quot; uninstalled</span><br></pre></td></tr></table></figure>

<h2 id="查看导入的-repo"><a href="#查看导入的-repo" class="headerlink" title="查看导入的 repo"></a>查看导入的 repo</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm repo <span class="built_in">ls</span></span></span><br><span class="line">NAME          	URL                                              </span><br><span class="line">rancher-stable	https://releases.rancher.com/server-charts/stable</span><br><span class="line">jetstack      	https://charts.jetstack.io                       </span><br><span class="line">hashicorp     	https://helm.releases.hashicorp.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>搜索&#x2F;查看可用的 repo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm search repo hashicorp/vault</span></span><br><span class="line">NAME                            	CHART VERSION	APP VERSION	DESCRIPTION                          </span><br><span class="line">hashicorp/vault                 	0.25.0       	1.14.0     	Official HashiCorp Vault Chart       </span><br><span class="line">hashicorp/vault-secrets-operator	0.1.0        	0.1.0      	Official Vault Secrets Operator Chart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看可用的 releases</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm search repo hashicorp/vault -l</span></span><br><span class="line">NAME                            	CHART VERSION	APP VERSION	DESCRIPTION                               </span><br><span class="line">hashicorp/vault                 	0.25.0       	1.14.0     	Official HashiCorp Vault Chart            </span><br><span class="line">hashicorp/vault                 	0.24.1       	1.13.1     	Official HashiCorp Vault Chart            </span><br><span class="line">hashicorp/vault                 	0.24.0       	1.13.1     	Official HashiCorp Vault Chart            </span><br><span class="line">hashicorp/vault                 	0.23.0       	1.12.1     	Official HashiCorp Vault Chart            </span><br><span class="line">hashicorp/vault                 	0.22.1       	1.12.0     	Official HashiCorp Vault Chart            </span><br><span class="line">hashicorp/vault                 	0.22.0       	1.11.3     	Official HashiCorp Vault Chart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm install vault hashicorp/vault --version 0.25.0</span></span><br><span class="line">NAME: vault</span><br><span class="line">LAST DEPLOYED: Mon Jul 10 14:59:13 2023</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">NOTES:</span><br><span class="line">Thank you for installing HashiCorp Vault!</span><br><span class="line"></span><br><span class="line">Now that you have deployed Vault, you should look over the docs on using</span><br><span class="line">Vault with Kubernetes available here:</span><br><span class="line"></span><br><span class="line">https://www.vaultproject.io/docs/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your release is named vault. To learn more about the release, try:</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  $ </span><span class="language-bash">helm status vault</span></span><br><span class="line"><span class="meta prompt_">  $ </span><span class="language-bash">helm get manifest vault</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>helm</tag>
      </tags>
  </entry>
  <entry>
    <title>和田玉知识归纳</title>
    <url>/202401171333/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="和田玉的分类"><a href="#和田玉的分类" class="headerlink" title="和田玉的分类"></a>和田玉的分类</h1><h2 id="山料和籽料"><a href="#山料和籽料" class="headerlink" title="山料和籽料"></a>山料和籽料</h2><p>按照矿产分类，主要分为籽料与山料两种。</p>
<p><em><strong>山料，是籽料的前身</strong></em>。</p>
<h3 id="山料"><a href="#山料" class="headerlink" title="山料"></a>山料</h3><p><strong>和田玉山料</strong> 产自昆仑山脉之中，属于原生矿，被称为 <code>璞玉</code></p>
<p>从质地上说，有的山料的结构较为粗糙，颗粒比较明显或带石性，不带皮色，油性差，有的山料靠近外部有红糖的颜色。也有结构细密，油润度极好的优质山料。</p>
<p>山料因为没有受到河流的冲刷，自始至终都深藏在岩体中，缺乏外力的打磨，看起来比较干涩，所以外形大多平淡无奇，有棱有角，表面也比较干涩，绺裂现象明显。</p>
<h3 id="籽料"><a href="#籽料" class="headerlink" title="籽料"></a>籽料</h3><p><strong>和田玉籽料</strong> 是采自河床或者河床泥土中，经过几十万年的侵蚀打磨而得到的玉石。有时又被称为 <code>水籽</code></p>
<p>籽料是由山料在地质活动时冲刷或滚落到河里，由河水冲刷（还有风化、风干等物理反应一起作用）形成的。籽料产自 <em><strong>河流中下游</strong></em>，是次生矿。产自河流上游的被称为 <em><strong>山流水料</strong></em>。籽料因为长久受到河流的冲刷，一般为卵石形状，表面很光滑圆润，带皮色。</p>
<p><img src="https://i.csms.tech/img_224.png"></p>
<p>和山料的存在环境不同，导致籽料有了以下特性：</p>
<ul>
<li>籽料常年在河水中浸泡，水流的压力使它的肉质变得更加紧密，水流的冲刷使它变的更加温润油腻，形成了它独特的质地和油润感；</li>
<li>河水中存在很多的矿物质和微量元素，长时间的水流冲刷和加压过程中，部分矿物质会沉淀到籽料中，形成各种颜色的籽料皮子。带有皮子的籽料，价格有大大提升</li>
</ul>
<p>籽料开采出来，外观上看就与鹅卵石一般无二，各个颜色都有，只不过他是和田玉再形成的鹅卵石。仔细观察籽料表面会发现上面密密麻麻都是一些小孔，因为这些小孔跟我们皮肤上的毛孔相似被称之为毛孔或者皮孔。和田玉籽料一般有皮色和皮孔，就算没有皮色，籽料上还是能够找到均匀的毛细孔，这是籽料独有的标志。而山料则没有皮色皮孔。</p>
<p>一般情况下，籽料都会拥有或深或浅的皮色，表面还会有明显的小凹坑（也就是俗称的皮孔），这是玉石长时间在水中冲刷、浸泡和磕碰造成的。而山料由于生长环境固定，不存在皮色和皮孔。</p>
<p>同时，由于籽料长年累月泡在水中，水里的微生物和微量元素会渗入到玉石中，所以会造成局部呈现或黄或红或黑的颜色，也就是 <code>沁色</code>。而这一点在山料身上，就非常不明显。</p>
<p><strong>籽料的水润度是明显高于山料的</strong>，如果比较籽料和山料制作的成品，会很容易发现籽料表面质地非常润泽、光滑、细腻。而山料作品，即使经过抛光处理，表面仍会干涩，缺乏光滑的油润感，这一点用手触摸时尤为明显。</p>
<p>由于 <strong>和田玉籽料的密度比山料大</strong>，所以同等体积的情况下，籽料相对山料比较重</p>
<p>山料也有很多可以跟顶级籽料相媲美的。比如 1995 年于田县开采的 8 吨和田玉山料，白度细度等各个方面都是顶级。因品质极佳，入市后引起了轰动，后被称之位“95于田料”。时至今日，“95于田料” 在业内也是传说中的料子，被很多业内人士公认为 <strong>羊脂级</strong>。著名的和氏璧就是一块山料。</p>
<p>和田玉器的市场价格中羊脂玉最高、籽料高、山流水次之、山料更次之。</p>
<h1 id="和田玉结构"><a href="#和田玉结构" class="headerlink" title="和田玉结构"></a>和田玉结构</h1><p>和田玉籽料内部结构致密，用肉眼几乎看不到内部结构；而再好的山料，还是能看到其松软质地的结构。</p>
<p>籽料由于有外力的挤压、打磨，所以密度要明显高过山料。籽料的话，无论是青籽还是白籽，内部结构都是致密的，用肉眼几乎看不到内部结构。而山料，无论结构多致密，在强光手电筒下，总是能看到松软的质地结构。</p>
<h1 id="广义的籽料"><a href="#广义的籽料" class="headerlink" title="广义的籽料"></a>广义的籽料</h1><p>今天的籽料已不是传统意义上的和田籽料了。在广义和田玉的范围内，籽料也有了更多种类。</p>
<h2 id="新疆产的岫玉籽料"><a href="#新疆产的岫玉籽料" class="headerlink" title="新疆产的岫玉籽料"></a>新疆产的岫玉籽料</h2><p>新疆除了有和田玉籽料，还出产一种颜色或绿或黑绿色等，里面也有黑点存在的岫玉。岫玉中品质好的，外观与和田玉籽料很相似，并且在市场上的和田籽料中也能看到相当数量的岫玉籽料，大家要留意。</p>
<h2 id="来自俄罗斯的“籽料”"><a href="#来自俄罗斯的“籽料”" class="headerlink" title="来自俄罗斯的“籽料”"></a>来自俄罗斯的“籽料”</h2><p>俄罗斯玉，近年来随着和田料的减少而逐渐成为软玉舞台的有力竞争者。</p>
<p>从玉材来看，俄料95%都是山料，但也有籽料，只是俄料中的“籽料”并未达到籽料定义的产状玉料：籽料由于长期的冲刷搬运碰撞，玉质形态韧性都达到了特别的质感，而俄料中的“籽料”其实没有这个长期的过程，严格意义上只能算和田玉的山流水料。</p>
<h2 id="辽宁产的河磨料"><a href="#辽宁产的河磨料" class="headerlink" title="辽宁产的河磨料"></a>辽宁产的河磨料</h2><p>河磨料是国内确切命名的两种籽料之一，另一种是和田籽料。“河磨”，从河里磨出来的玉，名字起得很传神，可能因为河水的冲击力较小，河磨料多见厚皮料。</p>
<p>另外，近几年贵州罗甸也出产白度尚可的软玉，透闪石含量达95%，也是广义和田玉中的一种。罗甸玉石性很重，料子干涩，缺乏油性，其实所谓的“籽料”也只能用来骗骗小白玩友；广西大化玉则是这几年才出现的玉种，也是广义和田玉中的一种，大化玉里有籽料，质地也很细腻，有兴趣的宝友可以玩一玩。</p>
]]></content>
      <categories>
        <category>生活日常</category>
      </categories>
      <tags>
        <tag>生活日常</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 添加 canvas-nest 特效</title>
    <url>/b12589273/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>os: linux 3.10.0-1160.62.1.el7.x86_64 CentOS Linux 7 (Core)</li>
<li>hexo: 6.2.0</li>
<li>hexo-cli: 4.3.0</li>
<li>node: 16.16.0</li>
<li>Next 8.12.2</li>
</ul>
<h3 id="安装-canvas-nest"><a href="#安装-canvas-nest" class="headerlink" title="安装 canvas-nest"></a>安装 canvas-nest</h3><p>参考 <a href="https://github.com/hustcc/canvas-nest.js#install">canva-nest 官网</a> 安装</p>
<figure class="highlight shell"><figcaption><span>npm</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install --save canvas-nest.js</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可选操作，主要是为了生成 <code>canvas-nest.js</code> 文件</p>
</blockquote>
<h3 id="配置-Next"><a href="#配置-Next" class="headerlink" title="配置 Next"></a>配置 Next</h3><p>编辑 <code>next配置文件</code>，新增以下配置</p>
<figure class="highlight shell"><figcaption><span>_config.next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">background settings</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add canvas-nest effect</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest: </span><br><span class="line">  enable: true </span><br><span class="line">  url: https://s.csms.tech/js/canvas-nest.js</span><br><span class="line">  color: 0,0,255</span><br><span class="line">  opacity: 0.7</span><br><span class="line">  zIndex: -2</span><br><span class="line">  count: 99</span><br></pre></td></tr></table></figure>

<h3 id="引入-canvas-nest-js"><a href="#引入-canvas-nest-js" class="headerlink" title="引入 canvas-nest.js"></a>引入 canvas-nest.js</h3><p>编辑文件 <code>themes/next/layout/_layout.njk</code>, 在<code>&lt;/body&gt;</code> 之前新增以下内容</p>
<figure class="highlight shell"><figcaption><span>themes/next/layout/_layout.njk</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest.enable %&#125;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; color=&quot;&#123;&#123; theme.canvas_nest.color &#125;&#125;&quot; opacity=&#x27;&#123;&#123; theme.canvas_nest.opacity &#125;&#125;&#x27; zIndex=&quot;&#123;&#123; theme.canvas_nest.zIndex &#125;&#125;&quot; count=&quot;&#123;&#123; theme.canvas_nest.count &#125;&#125;&quot; src=&quot;&#123;&#123; theme.canvas_nest.url &#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>canvas-nest</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Modular Admin HTML 模板使用注意事项</title>
    <url>/202308071022/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Django 4.4</li>
<li>Modular Admin v1.4.0</li>
</ul>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="because-its-MIME-type-‘text-x2F-html’-is-not-a-supported-stylesheet-MIME-type"><a href="#because-its-MIME-type-‘text-x2F-html’-is-not-a-supported-stylesheet-MIME-type" class="headerlink" title="because its MIME type (‘text&#x2F;html’) is not a supported stylesheet MIME type"></a>because its MIME type (‘text&#x2F;html’) is not a supported stylesheet MIME type</h2><p>使用 Django 模板语法加载 <code>index.html</code> 中的静态文件后，有个 <code>app.css</code> 文件请求 404，Console 中报错： <code>because its MIME type (&#39;text/html&#39;) is not a supported stylesheet MIME type</code></p>
<p><em><strong>问题原因</strong></em> 在 Modular Admin 代码中搜索 <code>app.css</code>，除了 <code>index.html</code> 引用了此文件，<code>js/app.js</code> 也引用了此文件。在 Django 中使用次模板，需要修改此处的路径正确。<br><img src="https://i.csms.tech/img_213.png"></p>
<h1 id="常用修改事项说明"><a href="#常用修改事项说明" class="headerlink" title="常用修改事项说明"></a>常用修改事项说明</h1><h2 id="菜单项的展开标签"><a href="#菜单项的展开标签" class="headerlink" title="菜单项的展开标签"></a>菜单项的展开标签</h2><p>要在页面中让菜单处于展开状态，需要给菜单应用 <code>active open</code> 的 class<br><img src="https://i.csms.tech/img_214.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;</span><br><span class="line">    &lt;a href=&quot;&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-area-chart&quot;&gt;&lt;/i&gt; Charts &lt;i class=&quot;fa arrow&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;ul class=&quot;sidebar-nav&quot;&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=&quot;charts-flot.html&quot;&gt; Flot Charts &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=&quot;charts-morris.html&quot;&gt; Morris Charts &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;active open&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-table&quot;&gt;&lt;/i&gt; Tables &lt;i class=&quot;fa arrow&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;ul class=&quot;sidebar-nav&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;active&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;static-tables.html&quot;&gt; Static Tables &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=&quot;responsive-tables.html&quot;&gt; Responsive Tables &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">    &lt;a href=&quot;forms.html&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-pencil-square-o&quot;&gt;&lt;/i&gt; Forms &lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Huawei 云 SDK 使用</title>
    <url>/202301270909/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3.10</li>
<li>huaweicloudsdk 3.1.23</li>
</ul>
<h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><p><a href="https://console.huaweicloud.com/apiexplorer/#/sdkcenter/ECS?lang=Python">华为云 Python SDK 安装方法官网说明</a></p>
<h2 id="ECS"><a href="#ECS" class="headerlink" title="ECS"></a>ECS</h2><h3 id="获取云服务器-ECS-实例信息"><a href="#获取云服务器-ECS-实例信息" class="headerlink" title="获取云服务器 (ECS) 实例信息"></a>获取云服务器 (ECS) 实例信息</h3><p>通过华为云提供的 Python SDK 获取云服务器实例信息 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[查询云服务器详情列表](https://console.huaweicloud.com/apiexplorer/#/apidebug/ECS/sdk?api=ListServersDetails)">[1]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkcore.auth.credentials import BasicCredentials</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkecs.v2.region.ecs_region import EcsRegion</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkcore.exceptions import exceptions</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkecs.v2 import *</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ak = <span class="string">&#x27;QONOKCeljdngdsEGSAM&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sk = <span class="string">&#x27;uD4ndlLqP5xDGSrgRRRPJGF8hg^HGkGl2&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; credentials = BasicCredentials(ak, sk)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; client = EcsClient.new_builder().with_credentials(credentials).with_region(EcsRegion.value_of(<span class="string">&quot;cn-east-2&quot;</span>)).build()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request = ListServersDetailsRequest()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = client.list_servers_details(request)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>response</code> 返回一个 <code>huaweicloudsdkecs.v2.model.list_servers_details_response.ListServersDetailsResponse</code> 对象，其中包含了服务器数量和服务器详情列表，要转换为 Python 字典对象，可以通过以下方法</p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import json</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; server_info = json.loads(str(response))</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">type</span>(server_info)</span></span><br><span class="line">&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 获取查询出的机器数量</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; server_info[<span class="string">&#x27;count&#x27;</span>]</span></span><br><span class="line">2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 云服务器列表 list[dict]</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; server_info[<span class="string">&#x27;servers&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 获取云服务器的名称及 id</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; server_info[<span class="string">&#x27;servers&#x27;</span>][0][<span class="string">&#x27;name&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; server_info[<span class="string">&#x27;servers&#x27;</span>][0][<span class="string">&#x27;id&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 获取云服务器的配置规格信息</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; server_info[<span class="string">&#x27;servers&#x27;</span>][0][<span class="string">&#x27;flavor&#x27;</span>]</span></span><br><span class="line">&#123;&#x27;id&#x27;: &#x27;c3.xlarge.2&#x27;, &#x27;name&#x27;: &#x27;c3.xlarge.2&#x27;, &#x27;disk&#x27;: &#x27;0&#x27;, &#x27;vcpus&#x27;: &#x27;4&#x27;, &#x27;ram&#x27;: &#x27;8192&#x27;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 获取云服务器挂载的磁盘id</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; server_info[<span class="string">&#x27;servers&#x27;</span>][0][<span class="string">&#x27;os-extended-volumes:volumes_attached&#x27;</span>]</span></span><br><span class="line">[&#123;&#x27;id&#x27;: &#x27;1fd566f2-82bb-49d3-95d1-7452a5868f80&#x27;, &#x27;delete_on_termination&#x27;: &#x27;false&#x27;, &#x27;device&#x27;: &#x27;/dev/vdb&#x27;&#125;, &#123;&#x27;id&#x27;: &#x27;2deefa5c-e92b-4ec5-9914-10af9919c121&#x27;, &#x27;delete_on_termination&#x27;: &#x27;false&#x27;, &#x27;bootIndex&#x27;: &#x27;0&#x27;, &#x27;device&#x27;: &#x27;/dev/vda&#x27;&#125;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 获取云服务器 IP 信息</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 首先在 &#x27;metadata&#x27; 中获取云服务器的 VPC id 信息，根据 VPC id 获取对应的 ip 信息</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; server_info[<span class="string">&#x27;servers&#x27;</span>][0][<span class="string">&#x27;metadata&#x27;</span>]</span></span><br><span class="line">&#123;&#x27;lockScene&#x27;: &#x27;&#x27;, &#x27;charging_mode&#x27;: &#x27;1&#x27;, &#x27;vpc_id&#x27;: &#x27;6827d6f5-4614-42a5-9762-15d3d173411c&#x27;, &#x27;metering.product_id&#x27;: &#x27;00301-15033-0--0&#x27;, &#x27;lockSource&#x27;: &#x27;&#x27;, &#x27;lockSourceId&#x27;: &#x27;&#x27;, &#x27;metering.imagetype&#x27;: &#x27;gold&#x27;, &#x27;metering.order_id&#x27;: &#x27;CS23010203413KRGB&#x27;, &#x27;image_name&#x27;: &#x27;Windows Server 2016 Standard 64bit&#x27;, &#x27;metering.resourcespeccode&#x27;: &#x27;c3.xlarge.2.win&#x27;, &#x27;os_type&#x27;: &#x27;Windows&#x27;, &#x27;metering.resourcetype&#x27;: &#x27;1&#x27;, &#x27;metering.image_id&#x27;: &#x27;dd714f2c-f470-43b6-afc8-34d8ec689516&#x27;, &#x27;os_bit&#x27;: &#x27;64&#x27;, &#x27;EcmResStatus&#x27;: &#x27;&#x27;, &#x27;lockCheckEndpoint&#x27;: &#x27;&#x27;, &#x27;cascaded.instance_extrainfo&#x27;: &#x27;clock_adjustment:28800,pcibridge:1&#x27;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; server_info[<span class="string">&#x27;servers&#x27;</span>][0][<span class="string">&#x27;metadata&#x27;</span>][<span class="string">&#x27;vpc_id&#x27;</span>]</span></span><br><span class="line">&#x27;6827d6f5-4614-42a5-9762-15d3d173411c&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 其中 &#123;&#x27;OS-EXT-IPS:type&#x27;: &#x27;floating&#x27;&#125; 表示公网 IP</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; server_info[<span class="string">&#x27;servers&#x27;</span>][0][<span class="string">&#x27;addresses&#x27;</span>][<span class="string">&#x27;6827d6f5-4614-42a5-9762-15d3d173411c&#x27;</span>]</span></span><br><span class="line">[&#123;&#x27;version&#x27;: &#x27;4&#x27;, &#x27;addr&#x27;: &#x27;192.168.0.65&#x27;, &#x27;OS-EXT-IPS:type&#x27;: &#x27;fixed&#x27;, &#x27;OS-EXT-IPS-MAC:mac_addr&#x27;: &#x27;fa:16:3e:00:76:2a&#x27;, &#x27;OS-EXT-IPS:port_id&#x27;: &#x27;c1ec2783-6d3c-4d8a-9c55-abb59c2c648d&#x27;&#125;, &#123;&#x27;version&#x27;: &#x27;4&#x27;, &#x27;addr&#x27;: &#x27;159.138.38.203&#x27;, &#x27;OS-EXT-IPS:type&#x27;: &#x27;floating&#x27;, &#x27;OS-EXT-IPS-MAC:mac_addr&#x27;: &#x27;fa:16:3e:00:76:2a&#x27;, &#x27;OS-EXT-IPS:port_id&#x27;: &#x27;c1ec2783-6d3c-4d8a-9c55-abb59c2c648d&#x27;&#125;]</span><br></pre></td></tr></table></figure>

<p>根据云服务器 id，查询云服务器挂载的磁盘信息 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[查询弹性云服务器磁盘信息](https://console.huaweicloud.com/apiexplorer/#/apidebug/EVS/sdk?api=ListVolumes)">[2]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request = ListServerBlockDevicesRequest(server_id=<span class="string">&#x27;a7dd4502-cb3e-4754-b7b7-73bcb5696a1c&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = client.list_server_block_devices(request)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response</span></span><br><span class="line">&#123;&quot;attachableQuantity&quot;: &#123;&quot;free_scsi&quot;: 58, &quot;free_blk&quot;: 22, &quot;free_disk&quot;: 58&#125;, \</span><br><span class="line"> &quot;volumeAttachments&quot;: [&#123;&quot;bootIndex&quot;: 0, &quot;pciAddress&quot;: &quot;0000:02:01.0&quot;, &quot;volumeId&quot;: &quot;2deefa5c-e92b-4ec5-9914-10af9919c121&quot;, &quot;device&quot;: &quot;/dev/vda&quot;, &quot;serverId&quot;: &quot;a7dd4502-cb3e-4754-b7b7-73bcb5696a1c&quot;, \</span><br><span class="line">                        &quot;id&quot;: &quot;2deefa5c-e92b-4ec5-9914-10af9919c121&quot;, &quot;size&quot;: 100, &quot;bus&quot;: &quot;virtio&quot;&#125;, \</span><br><span class="line">                        &#123;&quot;pciAddress&quot;: &quot;0000:02:02.0&quot;, &quot;volumeId&quot;: &quot;1fd566f2-82bb-49d3-95d1-7452a5868f80&quot;, \</span><br><span class="line">                        &quot;device&quot;: &quot;/dev/vdb&quot;, &quot;serverId&quot;: &quot;a7dd4502-cb3e-4754-b7b7-73bcb5696a1c&quot;, &quot;id&quot;: &quot;1fd566f2-82bb-49d3-95d1-7452a5868f80&quot;, &quot;size&quot;: 100, &quot;bus&quot;: &quot;virtio&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><h3 id="CDN-数据统计"><a href="#CDN-数据统计" class="headerlink" title="CDN 数据统计"></a>CDN 数据统计</h3><p>获取 CDN 域名统计数据 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[查询加速域名](https://apiexplorer.developer.intl.huaweicloud.com/apiexplorer/sdk?product=CDN&version=v1&api=ListDomains)">[3]</span></a></sup> </p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkcore.auth.credentials import GlobalCredentials</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkcdn.v1.region.cdn_region import CdnRegion</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkcore.exceptions import exceptions</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkcdn.v1 import *</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ak = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sk = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; credentials = GlobalCredentials(ak, sk)</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; client = CdnClient.new_builder() \</span></span><br><span class="line"><span class="language-bash">...         .with_credentials(credentials) \</span></span><br><span class="line"><span class="language-bash">...         .with_region(CdnRegion.value_of(<span class="string">&quot;cn-north-1&quot;</span>)) \</span></span><br><span class="line"><span class="language-bash">...         .build()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request = ListDomainsRequest()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = client.list_domains(request)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">response 数据转换为 Python 数据格式</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = json.loads(str(response))</span></span><br></pre></td></tr></table></figure>
<p>输出中包含已经配置在 CDN 上面的域名列表。</p>
<p>查询 CDN 加速域名的流量 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[查询域名统计数据-区域运营商](https://apiexplorer.developer.intl.huaweicloud.com/apiexplorer/sdk?product=CDN&version=v1&api=ShowDomainLocationStats)">[4]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line">request = ShowDomainLocationStatsRequest(action=&#x27;location_summary&#x27;, interval=86400, \</span><br><span class="line">                                         start_time=1669852800000, end_time=1672531200000, \</span><br><span class="line">                                         domain_name=&quot;test.a.com&quot;, stat_type=&quot;flux&quot;)</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = client.show_domain_location_stats(request)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response</span></span><br><span class="line">&#123;&quot;result&quot;: &#123;&quot;flux&quot;: 1050601&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加-CDN-域名"><a href="#添加-CDN-域名" class="headerlink" title="添加 CDN 域名"></a>添加 CDN 域名</h3><p>代码示例。<a href="https://console.huaweicloud.com/apiexplorer/#/openapi/CDN/sdk?version=v1&api=CreateDomain">参考文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">credentials = GlobalCredentials(ak, sk)</span><br><span class="line">client = CdnClient.new_builder().with_credentials(credentials).with_region(CdnRegion.value_of(<span class="string">&quot;cn-north-1&quot;</span>)).build()</span><br><span class="line"></span><br><span class="line">domain_name = <span class="string">&quot;test1.test.com&quot;</span></span><br><span class="line">business_type = <span class="string">&quot;web&quot;</span></span><br><span class="line">service_area = <span class="string">&quot;global&quot;</span></span><br><span class="line">origin_type = <span class="string">&quot;ipaddr&quot;</span></span><br><span class="line">ip_or_domain = <span class="string">&quot;11.33.5.76&quot;</span></span><br><span class="line"></span><br><span class="line">sources=[Sources(origin_type=origin_type, ip_or_domain=ip_or_domain, active_standby=<span class="number">1</span>)]</span><br><span class="line">domain = DomainBody(domain_name=domain_name, business_type=business_type, service_area=service_area, sources=sources)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">request = CreateDomainRequest()</span><br><span class="line">request.body = CreateDomainRequestBody(domain=domain)</span><br><span class="line">response = client.create_domain(request)</span><br></pre></td></tr></table></figure>

<h2 id="EIP"><a href="#EIP" class="headerlink" title="EIP"></a>EIP</h2><h3 id="获取-EIP-信息及统计-IP-流量"><a href="#获取-EIP-信息及统计-IP-流量" class="headerlink" title="获取 EIP 信息及统计 IP 流量"></a>获取 EIP 信息及统计 IP 流量</h3><p>本示例演示获取到指定账号和区域的所有 EIP 信息，并根据 EIP ID 统计对应 IP 的公网出口流量。<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[查询弹性公网IP列表](https://apiexplorer.developer.intl.huaweicloud.com/apiexplorer/sdk?product=EIP&version=v2&api=ListPublicips)">[5]</span></a></sup> </p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkcore.auth.credentials import BasicCredentials</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkeip.v2.region.eip_region import EipRegion</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkcore.exceptions import exceptions</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkeip.v2 import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import json</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; zone = <span class="string">&#x27;ap-southeast-1&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; credentials = BasicCredentials(ak, sk)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; client = EipClient.new_builder() \</span></span><br><span class="line"><span class="language-bash">...         .with_credentials(credentials) \</span></span><br><span class="line"><span class="language-bash">...         .with_region(EipRegion.value_of(zone)) \</span></span><br><span class="line"><span class="language-bash">...         .build()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request = ListPublicipsRequest()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = client.list_publicips(request)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; r = json.loads(str(response))</span></span><br></pre></td></tr></table></figure>
<p>输出中包含了此区域内的所有 EIP 信息，查询 IP 的流量统计信息需要 EIP ID，以下输出 EIP ID</p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; r[<span class="string">&#x27;publicips&#x27;</span>][0][<span class="string">&#x27;id&#x27;</span>]</span></span><br><span class="line">&#x27;3fda9feb-b8e3-440d-8fda-16b5728a6e1f&#x27;</span><br></pre></td></tr></table></figure>

<p>根据 EIP ID 信息获取 IP 公网流量统计数据，<code>ShowMetricDataRequest</code> 方法的帮助信息可以通过 <code>help(ShowMetricDataRequest)</code> 查看 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[查询监控数据](https://apiexplorer.developer.intl.huaweicloud.com/apiexplorer/doc?product=CES&version=v1&api=ShowMetricData)">[6]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkcore.auth.credentials import BasicCredentials</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkces.v1.region.ces_region import CesRegion</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkcore.exceptions import exceptions</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from huaweicloudsdkces.v1 import *</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; name_space = <span class="string">&quot;SYS.VPC&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; metric_name = <span class="string">&quot;up_stream&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dim_01 = <span class="string">&quot;publicip_id,f0304346-2388-4c9b-a9d0-6f321238f2be&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; credentials = BasicCredentials(ak, sk)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; client = CesClient.new_builder() \</span></span><br><span class="line"><span class="language-bash">...         .with_credentials(credentials) \</span></span><br><span class="line"><span class="language-bash">...         .with_region(CesRegion.value_of(zone)) \</span></span><br><span class="line"><span class="language-bash">...         .build()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request = ShowMetricDataRequest()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request.namespace = name_space</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request.metric_name = metric_name</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request.dim_0 = dim_01</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request.filter = <span class="string">&#x27;sum&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request.period = 86400</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request._from = start_timestamp</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; request.to = end_timestamp</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = client.show_metric_data(request)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; r  = json.loads(str(response))</span></span><br></pre></td></tr></table></figure>
<p>输出中包含了按天分割的流量数据</p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; r</span></span><br><span class="line">&#123;&#x27;datapoints&#x27;: [&#123;&#x27;sum&#x27;: 4768802.0, &#x27;timestamp&#x27;: 1672531200000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 1331712163.0, &#x27;timestamp&#x27;: 1672617600000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 12761506.0, &#x27;timestamp&#x27;: 1672704000000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 17119425.0, &#x27;timestamp&#x27;: 1672790400000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 16735886.0, &#x27;timestamp&#x27;: 1672876800000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 186881526.0, &#x27;timestamp&#x27;: 1672963200000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 22091616.0, &#x27;timestamp&#x27;: 1673049600000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 9926109.0, &#x27;timestamp&#x27;: 1673136000000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 14668113.0, &#x27;timestamp&#x27;: 1673222400000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 4655251.0, &#x27;timestamp&#x27;: 1673308800000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 151734721.0, &#x27;timestamp&#x27;: 1673395200000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 65481126.0, &#x27;timestamp&#x27;: 1673481600000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 1236561691.0, &#x27;timestamp&#x27;: 1673568000000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 47856976.0, &#x27;timestamp&#x27;: 1673654400000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 1352841.0, &#x27;timestamp&#x27;: 1673740800000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 265917499.0, &#x27;timestamp&#x27;: 1673827200000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 35810298.0, &#x27;timestamp&#x27;: 1673913600000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 23425333.0, &#x27;timestamp&#x27;: 1674000000000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 20177091.0, &#x27;timestamp&#x27;: 1674086400000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 18610343.0, &#x27;timestamp&#x27;: 1674172800000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 8464183.0, &#x27;timestamp&#x27;: 1674259200000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 4749783.0, &#x27;timestamp&#x27;: 1674345600000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 12750334.0, &#x27;timestamp&#x27;: 1674432000000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 12662461.0, &#x27;timestamp&#x27;: 1674518400000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 15664751.0, &#x27;timestamp&#x27;: 1674604800000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 16539739.0, &#x27;timestamp&#x27;: 1674691200000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 27175842.0, &#x27;timestamp&#x27;: 1674777600000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 784220244.0, &#x27;timestamp&#x27;: 1674864000000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 23921455.0, &#x27;timestamp&#x27;: 1674950400000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 30317158.0, &#x27;timestamp&#x27;: 1675036800000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 141162735.0, &#x27;timestamp&#x27;: 1675123200000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;, &#123;&#x27;sum&#x27;: 309507524.0, &#x27;timestamp&#x27;: 1675209600000, &#x27;unit&#x27;: &#x27;Byte&#x27;&#125;], &#x27;metric_name&#x27;: &#x27;up_stream&#x27;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://console.huaweicloud.com/apiexplorer/#/apidebug/ECS/sdk?api=ListServersDetails">查询云服务器详情列表</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://console.huaweicloud.com/apiexplorer/#/apidebug/EVS/sdk?api=ListVolumes">查询弹性云服务器磁盘信息</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://apiexplorer.developer.intl.huaweicloud.com/apiexplorer/sdk?product=CDN&amp;version=v1&amp;api=ListDomains">查询加速域名</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://apiexplorer.developer.intl.huaweicloud.com/apiexplorer/sdk?product=CDN&amp;version=v1&amp;api=ShowDomainLocationStats">查询域名统计数据-区域运营商</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://apiexplorer.developer.intl.huaweicloud.com/apiexplorer/sdk?product=EIP&amp;version=v2&amp;api=ListPublicips">查询弹性公网IP列表</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://apiexplorer.developer.intl.huaweicloud.com/apiexplorer/doc?product=CES&amp;version=v1&amp;api=ShowMetricData">查询监控数据</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>云平台</category>
        <category>Huawei</category>
      </categories>
      <tags>
        <tag>Huawei</tag>
      </tags>
  </entry>
  <entry>
    <title>inotify 安装使用</title>
    <url>/512c7c5/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>使用系统软件包管理器安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y inotify-tools</span><br></pre></td></tr></table></figure>
<p>安装后包含2个命令： <code>inotifywait </code>, <code>inotifywatch</code>,较为常用的命令是 <code>inotifywait</code></p>
</li>
<li><p>编译安装<br>此处安装版本 <code>3.22.6.0</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[源码安装官方文档](https://github.com/inotify-tools/inotify-tools/wiki#everyone-else)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/inotify-tools/inotify-tools/archive/refs/tags/3.22.6.0.tar.gz</span><br><span class="line">tar -xf 3.22.6.0.tar.gz</span><br><span class="line">cd inotify-tools-3.22.6.0/</span><br><span class="line">yum install -y dh-autoreconf</span><br><span class="line">./autogen.sh &amp;&amp; ./configure --prefix=/usr/local/inotify-tools-3.22.6.0  &amp;&amp; make &amp;&amp; su -c &#x27;make install&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<h1 id="inotifywait-参数说明"><a href="#inotifywait-参数说明" class="headerlink" title="inotifywait 参数说明"></a>inotifywait 参数说明</h1><p>语法：<br>inotifywait [-hcmrq] [-e modify,access…] [-t ] [–format ] [–timefmt ] [ … ]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@</span><br><span class="line">排除不需要监视的文件，可以是相对路径，也可以是绝对路径。</span><br><span class="line"></span><br><span class="line">--fromfile</span><br><span class="line">从文件读取需要监视的文件或排除的文件，一个文件一行，排除的文件以 @ 开头。</span><br><span class="line"></span><br><span class="line">-m|--monitor</span><br><span class="line">接收到一个事情而不退出，无限期地执行。默认的行为是接收到一个事情后立即退出。</span><br><span class="line"></span><br><span class="line">-d|--daemon</span><br><span class="line">跟 –-monitor 一样，除了是在后台运行，需要指定 -–outfile 把事情输出到一个文件。也意味着使用了 –-syslog。</span><br><span class="line"></span><br><span class="line">-o|--outfile</span><br><span class="line">输出事情到一个文件而不是标准输出。</span><br><span class="line"></span><br><span class="line">-s|--syslog</span><br><span class="line">输出错误信息到系统日志</span><br><span class="line"></span><br><span class="line">-r|--recursive</span><br><span class="line">监视一个目录下的所有子目录。</span><br><span class="line"></span><br><span class="line">-q|--quiet</span><br><span class="line">指定一次，不会输出详细信息，指定二次，除了致命错误，不会输出任何信息。</span><br><span class="line"></span><br><span class="line">--exclude</span><br><span class="line">正则匹配需要排除的文件，大小写敏感。</span><br><span class="line"></span><br><span class="line">--excludei</span><br><span class="line">正则匹配需要排除的文件，忽略大小写。</span><br><span class="line"></span><br><span class="line">-t|--timeout</span><br><span class="line">设置超时时间，如果为 0，则无限期地执行下去。</span><br><span class="line"></span><br><span class="line">-e|--event</span><br><span class="line">指定监视的事件。</span><br><span class="line"></span><br><span class="line">-c|--csv </span><br><span class="line">输出 csv 格式。</span><br><span class="line"></span><br><span class="line">--timefmt </span><br><span class="line">指定时间格式，用于 –-format 选项中的%T格式。</span><br><span class="line"></span><br><span class="line">--format</span><br><span class="line">指定输出格式。</span><br><span class="line">    %w 表示发生事件的目录</span><br><span class="line">    %f 表示发生事件的文件</span><br><span class="line">    %e 表示发生的事件</span><br><span class="line">    %Xe 事件以“X”分隔</span><br><span class="line">    %T 使用由 --timefmt 定义的时间格式</span><br></pre></td></tr></table></figure>

<h1 id="可监听事件列表"><a href="#可监听事件列表" class="headerlink" title="可监听事件列表"></a>可监听事件列表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">access	文件读取</span><br><span class="line">modify	文件更改。</span><br><span class="line">attrib	文件属性更改，如权限，时间戳等。</span><br><span class="line">close_write	以可写模式打开的文件被关闭，不代表此文件一定已经写入数据。</span><br><span class="line">close_nowrite	以只读模式打开的文件被关闭。</span><br><span class="line">close	文件被关闭，不管它是如何打开的。</span><br><span class="line">open	文件打开。</span><br><span class="line">moved_to	一个文件或目录移动到监听的目录，即使是在同一目录内移动，此事件也触发。</span><br><span class="line">moved_from	一个文件或目录移出监听的目录，即使是在同一目录内移动，此事件也触发。</span><br><span class="line">move	包括moved_to和 moved_from</span><br><span class="line">move_self	文件或目录被移除，之后不再监听此文件或目录。</span><br><span class="line">create	文件或目录创建</span><br><span class="line">delete	文件或目录删除</span><br><span class="line">delete_self	文件或目录移除，之后不再监听此文件或目录</span><br><span class="line">unmount	文件系统取消挂载，之后不再监听此文件系统。</span><br></pre></td></tr></table></figure>

<h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">inotifywait -m -r -e modify /source/ | while read dir action filename</span><br><span class="line">do </span><br><span class="line">  echo $&#123;dir&#125;</span><br><span class="line">  echo $&#123;action&#125;</span><br><span class="line">  echo $&#123;filename&#125;</span><br><span class="line">  rsync -a -u /source/ /dest/</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="inotify-监听文件-modify-一段时间后监控不到文件的变化"><a href="#inotify-监听文件-modify-一段时间后监控不到文件的变化" class="headerlink" title="inotify 监听文件 modify 一段时间后监控不到文件的变化"></a>inotify 监听文件 modify 一段时间后监控不到文件的变化</h2><p>使用 <code>inotifywait</code> 监听文件内容的变化，开始时正常，过几分钟后，文件发生了变化，<code>inotifywait</code> 未监控到任何事件，亦未退出或中断。</p>
<p>inotify 的支持，依赖于，以下内核参数</p>
<ul>
<li><code>fs.inotify.max_queued_events</code> - 默认值 16384。inotify 的事件队列大小。超出后会报 <code>Event queue overflow</code></li>
<li><code>fs.inotify.max_user_watches</code> - 默认值 8192。指定了当前文件系统允许的最大监控数量。</li>
<li><code>fs.inotify.max_user_instances</code> - 默认值 128。单个用户可以创建的 inotify 实例的最大数量。当遇到 <code>inotify_init: Too many open files</code> 报错，需要修改此值。</li>
</ul>
<p>inotify 无法监控文件或者目录的变动时，很可能是以上内核参数的限制导致。</p>
<p>本示例通过修改 <code>sysctl fs.inotify.max_queued_events=1000000</code> 后，inotify 功能正常。</p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/inotify-tools/inotify-tools/wiki#everyone-else">源码安装官方文档</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>internetbs API 使用</title>
    <url>/202303071425/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://internetbs.net/internet-bs-api.pdf">internetbs 域名注册平台 API 接口稳定</a></p>
<p>调用 API 接口需要使用 API key 及账号密码。API 接口申请 key 时需要添加 IP 白名单，只允许从添加的白名单 IP 请求 API。</p>
<h1 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h1><h2 id="获取域名数量"><a href="#获取域名数量" class="headerlink" title="获取域名数量"></a>获取域名数量</h2><p>API 默认返回的数据格式为 <code>TEXT</code>，建议指定数据返回格式为 <code>JSON</code>，通过 <code>eval(response.content)</code> 将返回的字节类型数据转换为字典类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>params = &#123;<span class="string">&#x27;ApiKey&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;Password&#x27;</span>: <span class="string">&#x27;pswd&#x27;</span>, <span class="string">&#x27;ResponseFormat&#x27;</span>: <span class="string">&#x27;JSON&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response = requests.get(<span class="string">&#x27;https://api.internet.bs/Domain/Count&#x27;</span>, params=params, )</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.content</span><br><span class="line"><span class="string">b&#x27;&#123;&quot;transactid&quot;:&quot;3b3df8bfdfcc215ea7e6575a97adcea3&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;app&quot;:9,&quot;com&quot;:6,&quot;de&quot;:1,&quot;in&quot;:1,&quot;live&quot;:1,&quot;tv&quot;:2,&quot;vip&quot;:1,&quot;world&quot;:1,&quot;totaldomains&quot;:22&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(response.content)</span><br><span class="line">&#123;<span class="string">&#x27;transactid&#x27;</span>: <span class="string">&#x27;3b3df8bfdfcc215ea7e6575a97adcea3&#x27;</span>, <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;SUCCESS&#x27;</span>, <span class="string">&#x27;app&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;com&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;de&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;in&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;live&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;tv&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;vip&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;world&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;totaldomains&#x27;</span>: <span class="number">22</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取所有域名"><a href="#获取所有域名" class="headerlink" title="获取所有域名"></a>获取所有域名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>params = &#123;<span class="string">&#x27;ApiKey&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;Password&#x27;</span>: <span class="string">&#x27;pswd&#x27;</span>, <span class="string">&#x27;ResponseFormat&#x27;</span>: <span class="string">&#x27;JSON&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response = requests.get(<span class="string">&#x27;https://api.internet.bs/Domain/List&#x27;</span>, params=params, )</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>云平台</category>
        <category>internetbs</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 上部署 cert-manager 及使用</title>
    <url>/202301050935/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Kubernetes 1.24</li>
<li>cert-manager v1.7.1</li>
</ul>
<p>随着 HTTPS 不断普及，越来越多的网站都在从 HTTP 升级到 HTTPS，使用 HTTPS 就需要向权威机构申请证书，需要付出一定的成本，如果需求数量多，也是一笔不小的开支。cert-manager 是 Kubernetes 上的全能证书管理工具，如果对安全级别和证书功能要求不高，可以利用 cert-manager 基于 ACME 协议与 Let’s Encrypt 来签发免费证书并自动续期，实现永久免费使用证书。</p>
<h1 id="cert-manager-工作原理"><a href="#cert-manager-工作原理" class="headerlink" title="cert-manager 工作原理"></a>cert-manager 工作原理</h1><p>cert-manager 部署到 Kubernetes 集群后，它会 watch 它所支持的 CRD 资源，我们通过创建 CRD 资源来指示 cert-manager 为我们签发证书并自动续期: <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[cert-manager 工作原理](https://imroc.cc/k8s/trick/sign-free-certs-with-cert-manager/#cert-manager-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86)">[1]</span></a></sup><br><img src="https://i.csms.tech/img_111.png"></p>
<p>解释下几个关键的资源:</p>
<ul>
<li><code>Issuer/ClusterIssuer</code>: 用于指示 cert-manager 用什么方式签发证书，本文主要讲解签发免费证书的 ACME 方式。<code>ClusterIssuer</code> 与 <code>Issuer</code> 的唯一区别就是 <code>Issuer</code> 只能用来签发自己所在 <code>namespace</code> 下的证书，<code>ClusterIssuer</code> 可以签发任意 <code>namespace</code> 下的证书。</li>
<li><code>Certificate</code>: 用于告诉 cert-manager 我们想要什么域名的证书以及签发证书所需要的一些配置，包括对 <code>Issuer/ClusterIssuer</code> 的引用。</li>
</ul>
<span id="more"></span>

<h1 id="免费证书签发原理"><a href="#免费证书签发原理" class="headerlink" title="免费证书签发原理"></a>免费证书签发原理</h1><p>Let’s Encrypt 利用 ACME 协议来校验域名是否真的属于你，校验成功后就可以自动颁发免费证书，证书有效期只有 90 天，在到期前需要再校验一次来实现续期，幸运的是 cert-manager 可以自动续期，这样就可以使用永久免费的证书了。如何校验这个域名是否属于你呢？主流的两种校验方式是 HTTP-01 和 DNS-01，详细校验原理可参考 Let’s Encrypt 的运作方式，下面将简单描述下。</p>
<h2 id="HTTP-01-校验原理"><a href="#HTTP-01-校验原理" class="headerlink" title="HTTP-01 校验原理"></a>HTTP-01 校验原理</h2><p>HTTP-01 的校验原理是给你域名指向的 HTTP 服务增加一个临时 location ，Let’s Encrypt 会发送 http 请求到 http:&#x2F;&#x2F;<YOUR_DOMAIN>&#x2F;.well-known&#x2F;acme-challenge&#x2F;<TOKEN>，YOUR_DOMAIN 就是被校验的域名，TOKEN 是 ACME 协议的客户端负责放置的文件，在这里 ACME 客户端就是 cert-manager，它通过修改或创建 Ingress 规则来增加这个临时校验路径并指向提供 TOKEN 的服务。Let’s Encrypt 会对比 TOKEN 是否符合预期，校验成功后就会颁发证书。此方法仅适用于给使用 Ingress 暴露流量的服务颁发证书，并且不支持泛域名证书。</p>
<h2 id="DNS-01-校验原理"><a href="#DNS-01-校验原理" class="headerlink" title="DNS-01 校验原理"></a>DNS-01 校验原理</h2><p>DNS-01 的校验原理是利用 DNS 提供商的 API Key 拿到你的 DNS 控制权限， 在 Let’s Encrypt 为 ACME 客户端提供令牌后，ACME 客户端 (cert-manager) 将创建从该令牌和您的帐户密钥派生的 TXT 记录，并将该记录放在 _acme-challenge.<YOUR_DOMAIN>。 然后 Let’s Encrypt 将向 DNS 系统查询该记录，如果找到匹配项，就可以颁发证书。此方法不需要你的服务使用 Ingress，并且支持泛域名证书。</p>
<h2 id="校验方式对比"><a href="#校验方式对比" class="headerlink" title="校验方式对比"></a>校验方式对比</h2><p>HTTP-01 的校验方式的优点是: 配置简单通用，不管使用哪个 DNS 提供商都可以使用相同的配置方法；缺点是：需要依赖 Ingress，如果你的服务不是用 Ingress 暴露流量的就不适用，而且不支持泛域名证书。</p>
<p>DNS-01 的校验方式的优点是没有 HTTP-01 校验方式缺点，不依赖 Ingress，也支持泛域名；缺点就是不同 DNS 提供商的配置方式不一样，而且 DNS 提供商有很多，cert-manager 的 Issuer 不可能每个都去支持，不过有一些可以通过部署实现了 cert-manager 的 Webhook 的服务来扩展 Issuer 进行支持，比如 DNSPod 和 阿里 DNS，详细 Webhook 列表请参考: <a href="https://cert-manager.io/docs/configuration/acme/dns01/#webhook">https://cert-manager.io/docs/configuration/acme/dns01/#webhook</a></p>
<p>选择哪种方式呢？条件允许的话，建议是尽量用 DNS-01 的方式，限制更少，功能更全。 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[免费证书签发原理](https://imroc.cc/k8s/trick/sign-free-certs-with-cert-manager/#%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%8F%91%E5%8E%9F%E7%90%86)">[2]</span></a></sup></p>
<h1 id="cert-manager-部署"><a href="#cert-manager-部署" class="headerlink" title="cert-manager 部署"></a>cert-manager 部署</h1><p><a href="https://csms.tech/202210071716/#安装-cert-manager">安装参考文档</a></p>
<h1 id="cert-manager-使用"><a href="#cert-manager-使用" class="headerlink" title="cert-manager 使用"></a>cert-manager 使用</h1><h2 id="DNS-01-校验方式签发证书"><a href="#DNS-01-校验方式签发证书" class="headerlink" title="DNS-01 校验方式签发证书"></a>DNS-01 校验方式签发证书</h2><p>下面以 cloudflare 为例来签发证书：</p>
<ol>
<li><p>登录 cloudflare，点到 My Profile &gt; API Tokens &gt; Create Token 来创建 Token:<br><img src="https://i.csms.tech/img_112.png"><br>复制 Token 并妥善保管:<br><img src="https://i.csms.tech/img_113.png"></p>
</li>
<li><p>将 Token 保存到 Secret 中:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: cloudflare-api-token-secret</span><br><span class="line">  namespace: cert-manager</span><br><span class="line">type: Opaque</span><br><span class="line">stringData:</span><br><span class="line">  api-token: &lt;API Token&gt; # 粘贴 Token 到这里，不需要 base64 加密。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果是要创建 ClusterIssuer，Secret 需要创建在 cert-manager 所在命名空间中，如果是 Issuer，那就创建在 Issuer 所在命名空间中。 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[DNS-01 校验方式签发证书](https://imroc.cc/k8s/trick/sign-free-certs-with-cert-manager/#dns-01-%E6%A0%A1%E9%AA%8C%E6%96%B9%E5%BC%8F%E7%AD%BE%E5%8F%91%E8%AF%81%E4%B9%A6)">[3]</span></a></sup></p>
</blockquote>
</li>
<li><p>创建 ClusterIssuer:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: cert-manager.io/v1</span><br><span class="line">kind: ClusterIssuer</span><br><span class="line">metadata:</span><br><span class="line">  name: letsencrypt-dns01</span><br><span class="line">spec:</span><br><span class="line">  acme:</span><br><span class="line">    privateKeySecretRef:</span><br><span class="line">      name: letsencrypt-dns01     # 用于储存 ACME Account 私钥的 Secret</span><br><span class="line">    email: my-cloudflare-acc@example.com</span><br><span class="line">    server: https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">    solvers:</span><br><span class="line">    - dns01:</span><br><span class="line">        cloudflare:</span><br><span class="line">          email: my-cloudflare-acc@example.com # 替换成你的 cloudflare 邮箱账号，API Token 方式认证非必需，API Keys 认证是必需</span><br><span class="line">          apiTokenSecretRef:</span><br><span class="line">            key: api-token               # 引用 secret 中的配置数据，key 为 secret 中配置的名称</span><br><span class="line">            name: cloudflare-api-token-secret    # 引用保存 cloudflare 认证信息的 Secret</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 Certificate:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: cert-manager.io/v1</span><br><span class="line">kind: Certificate</span><br><span class="line">metadata:</span><br><span class="line">  name: test-mydomain-com</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  dnsNames:</span><br><span class="line">  - test.mydomain.com # 要签发证书的域名</span><br><span class="line">  - &quot;*.mydomain.com&quot; </span><br><span class="line">  issuerRef:</span><br><span class="line">    kind: ClusterIssuer</span><br><span class="line">    name: letsencrypt-dns01 # 引用 ClusterIssuer，指示采用 dns01 方式进行校验</span><br><span class="line">  secretName: test-mydomain-com-tls # 最终签发出来的证书会保存在这个 Secret 里面</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取和使用证书</p>
<p>创建好 Certificate 后，等一小会儿，我们可以 kubectl 查看是否签发成功:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get certificate -n prod</span><br><span class="line"> NAME                READY   SECRET                  AGE</span><br><span class="line"> test-mydomain-com   True    test-mydomain-com-tls   1m</span><br></pre></td></tr></table></figure>
<p> 如果 READY 为 <code>False</code> 表示失败，可以通过 <code>describe</code> 查看 <code>event</code> 来排查失败原因:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl describe certificate test-mydomain-com -n prod</span><br></pre></td></tr></table></figure>
<p> 如果为 <code>True</code> 表示签发成功，证书就保存在我们所指定的 <code>Secret 中</code> (上面的例子是 <code>default/test-mydomain-com-tls</code>)，可以通过 <code>kubectl</code> 查看:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get secret test-mydomain-com-tls -n default</span><br><span class="line"> ...</span><br><span class="line"> data:</span><br><span class="line">   tls.crt: &lt;cert&gt;</span><br><span class="line">   tls.key: &lt;private key&gt;</span><br></pre></td></tr></table></figure>
<p> 其中 <code>tls.crt</code> 就是证书，<code>tls.key</code> 是密钥。</p>
<p> 你可以将它们挂载到你需要证书的应用中，或者使用 Ingress，可以直接在 Ingress 中引用 <code>secret</code>，示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: test-ingress</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/Ingress.class: nginx</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: test.mydomain.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /web</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: web</span><br><span class="line">          servicePort: 80</span><br><span class="line">  tls:</span><br><span class="line">    hosts:</span><br><span class="line">    - test.mydomain.com</span><br><span class="line">    secretName: test-mydomain-com-tls</span><br></pre></td></tr></table></figure>
<p>签发证书异常，可以检查 cert-manager 的 pod 的日志，查看报错信息。</p>
<p>nginx 使用 cert-manager 颁发的证书，可以将 cert 和 key 文件内容追加到同一个文件中(pem)，Nginx 配置证书和 key 都使用此文件。</p>
</li>
</ol>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://imroc.cc/k8s/trick/sign-free-certs-with-cert-manager/#cert-manager-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">cert-manager 工作原理</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://imroc.cc/k8s/trick/sign-free-certs-with-cert-manager/#%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%8F%91%E5%8E%9F%E7%90%86">免费证书签发原理</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://imroc.cc/k8s/trick/sign-free-certs-with-cert-manager/#dns-01-%E6%A0%A1%E9%AA%8C%E6%96%B9%E5%BC%8F%E7%AD%BE%E5%8F%91%E8%AF%81%E4%B9%A6">DNS-01 校验方式签发证书</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins + gitlab 自动构建</title>
    <url>/202210261456/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Jenkins jenkinsci&#x2F;blueocean:2.346.3</li>
<li>GitLab Community Edition 13.9.6</li>
<li>Docker 19.03.15</li>
</ul>
<p>本文档记录 GitLab 上面的代码更新时，使用 Jenkins 自动构建 Docker 镜像的过程。 </p>
<h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><h2 id="使用-docker-启动-Jenkins-容器"><a href="#使用-docker-启动-Jenkins-容器" class="headerlink" title="使用 docker 启动 Jenkins 容器"></a>使用 docker 启动 Jenkins 容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name jenkins \</span><br><span class="line">          -v /var/run/docker.sock:/var/run/docker.sock  \</span><br><span class="line">          -v /data/JenkinsData_blueocean/:/var/jenkins_home/ \</span><br><span class="line">          -u root \</span><br><span class="line">          jenkinsci/blueocean</span><br></pre></td></tr></table></figure>

<h2 id="Jenkins-配置"><a href="#Jenkins-配置" class="headerlink" title="Jenkins 配置"></a>Jenkins 配置</h2><p>以下分别记录使用 <code>freestyle</code> 和 <code>Pipeline</code> 类型的构建镜像的配置过程</p>
<h3 id="创建-freestyle-类型的-Item-构建镜像"><a href="#创建-freestyle-类型的-Item-构建镜像" class="headerlink" title="创建 freestyle 类型的 Item 构建镜像"></a>创建 <code>freestyle</code> 类型的 Item 构建镜像</h3><p>在 <code>源码管理（Source Code Management）</code> 中配置 git 地址，并配置认证</p>
<blockquote>
<p>默认情况下，在构建时，Jenkins 会先从配置的 Git 地址拉取代码到 Jenkins 目录： <code>/var/jenkins_home/workspace/$&#123;PROJECT_NAME&#125;</code></p>
</blockquote>
<p>在 <code>构建（Build）</code> 中 <code>Add build step</code> ，选择构建类型为 <code>Execute shell</code>，此处构建的示例项目代码结构如下，其中 Dockerfile 路径为 <code>k8s/server/Dockerfile</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.:</span><br><span class="line">index.html	k8s</span><br><span class="line"></span><br><span class="line">./k8s:</span><br><span class="line">server</span><br><span class="line"></span><br><span class="line">./k8s/server:</span><br><span class="line">Dockerfile</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用如下 shell 脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">DATA=`date +%Y%m%d%H%M`</span><br><span class="line"></span><br><span class="line">DIR=&#x27;.&#x27;</span><br><span class="line"></span><br><span class="line">LOG=$&#123;DIR&#125;/docker_build_result.log</span><br><span class="line"></span><br><span class="line">DOCKER_REGISTRY=&#x27;harbor.a.com&#x27;</span><br><span class="line"></span><br><span class="line">DOCKER_REGISTRY_PROJECT=&#x27;test&#x27;</span><br><span class="line"></span><br><span class="line">PROJECT=&#x27;test_project&#x27;</span><br><span class="line">ENV=&#x27;uat&#x27;</span><br><span class="line"></span><br><span class="line">docker build -t $&#123;PROJECT&#125;-$&#123;ENV&#125;-$&#123;Branch&#125;:$&#123;DATA&#125; -f k8s/server/Dockerfile $&#123;DIR&#125; | tee $&#123;LOG&#125;</span><br><span class="line"></span><br><span class="line">docker tag $&#123;PROJECT&#125;-$&#123;ENV&#125;-$&#123;Branch&#125;:$&#123;DATA&#125; $&#123;DOCKER_REGISTRY&#125;/$&#123;DOCKER_REGISTRY_PROJECT&#125;/$&#123;PROJECT&#125;-$&#123;ENV&#125;-$&#123;Branch&#125;:$&#123;DATA&#125;</span><br><span class="line"></span><br><span class="line">docker login -u admin -p Harbor12345 $&#123;DOCKER_REGISTRY&#125;</span><br><span class="line"></span><br><span class="line">docker push $&#123;DOCKER_REGISTRY&#125;/$&#123;DOCKER_REGISTRY_PROJECT&#125;/$&#123;PROJECT&#125;-$&#123;ENV&#125;-$&#123;Branch&#125;:$&#123;DATA&#125;</span><br><span class="line"></span><br><span class="line">RESULT=`cat $&#123;LOG&#125; | tail -n 1`</span><br><span class="line"></span><br><span class="line">grep &quot;Successfully tagged &quot; $&#123;LOG&#125;</span><br><span class="line"></span><br><span class="line">exit $?</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_71.png"></p>
<blockquote>
<p>其中的 <code>$&#123;Branch&#125;</code> 来自 <strong>参数化的构建</strong><br><img src="https://i.csms.tech/img_69.png"></p>
</blockquote>
<span id="more"></span>

<h3 id="使用-Jenkins-Pipeline-构建镜像"><a href="#使用-Jenkins-Pipeline-构建镜像" class="headerlink" title="使用 Jenkins Pipeline 构建镜像"></a>使用 Jenkins Pipeline 构建镜像</h3><p>创建 <code>Pipeline</code> 类型的工程</p>
<p><code>Advanced Project Options</code> 中选择 <code>Pipeline from SCM</code>，并配置 Git 的 url 及认证信息。<code>Script Path</code> 默认为 <code>Jenkinsfile</code>(位于代码根目录)</p>
<p><code>Jenkinsfile</code> 内容如下：</p>
<figure class="highlight shell"><figcaption><span>Jenkinsfile</span></figcaption><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123;</span><br><span class="line">        PROJECT=&#x27;test_admin&#x27;</span><br><span class="line">        </span><br><span class="line">        HARBOR_CREDENTIALS = credentials(&#x27;habor&#x27;)</span><br><span class="line">		GIT_CREDENTIALS = credentials(&#x27;git&#x27;)</span><br><span class="line">		</span><br><span class="line">        GIT_URL = &quot;http://$&#123;GIT_CREDENTIALS_USR&#125;:$&#123;GIT_CREDENTIALS_PSW&#125;@git.wkctrlsys.com:18081/jiafeimao/api.git&quot;</span><br><span class="line">        </span><br><span class="line">        DATA=&quot;$&#123;sh(script: &#x27;date +%Y%m%d%H%M&#x27;, returnStdout:true)&#125;&quot;</span><br><span class="line">        LOG=&#x27;./docker_build_result.log&#x27;</span><br><span class="line">        </span><br><span class="line">        DOCKER_REGISTRY=&#x27;harbor.my.com&#x27;</span><br><span class="line">        DOCKER_REGISTRY_PROJECT=&#x27;test&#x27;</span><br><span class="line">        </span><br><span class="line">        BRANCH = &quot;$&#123;params.Branch&#125;&quot;</span><br><span class="line">        </span><br><span class="line">        DIR = &#x27;.&#x27;</span><br><span class="line">		</span><br><span class="line">		TAG = &quot;$&#123;PROJECT&#125;-$&#123;BRANCH&#125;:$&#123;DATA&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;CHECKOUT&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // 清空 workspace</span><br><span class="line">                sh &quot;rm -rf $&#123;env.WORKSPACE&#125;/*&quot;</span><br><span class="line">                sh &quot;rm -rf $&#123;env.WORKSPACE&#125;/.git&quot;</span><br><span class="line">                sh &quot;git clone -b $&#123;BRANCH&#125; $&#123;GIT_URL&#125; .&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;BUILD&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;docker build -t $&#123;TAG&#125; -f k8s/server/Dockerfile $&#123;DIR&#125; | tee $&#123;LOG&#125;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;PUSH&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;docker tag $&#123;TAG&#125; $&#123;DOCKER_REGISTRY&#125;/$&#123;DOCKER_REGISTRY_PROJECT&#125;/$&#123;TAG&#125;&#x27;</span><br><span class="line">                </span><br><span class="line">                sh &#x27;docker login -u $&#123;HARBOR_CREDENTIALS_USR&#125; -p $&#123;HARBOR_CREDENTIALS_PSW&#125; $&#123;DOCKER_REGISTRY&#125;&#x27;</span><br><span class="line">                </span><br><span class="line">                sh &#x27;docker push $&#123;DOCKER_REGISTRY&#125;/$&#123;DOCKER_REGISTRY_PROJECT&#125;/$&#123;TAG&#125;&#x27;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">		</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="Cannot-connect-to-the-Docker-daemon-at-unix-x2F-x2F-x2F-var-x2F-run-x2F-docker-sock-Is-the-docker-daemon-running"><a href="#Cannot-connect-to-the-Docker-daemon-at-unix-x2F-x2F-x2F-var-x2F-run-x2F-docker-sock-Is-the-docker-daemon-running" class="headerlink" title="Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?"></a>Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?</h2><p><strong>错误场景</strong></p>
<p>使用 Docker 部署的 Jenkins，在构建 Docker 镜像时，Jenkins 中的 docker 为客户端，使用的 Server 端是宿主机的 Docker Daemon，默认情况下，docker 客户端是通过 <code>unix:///var/run/docker.sock</code> 连接 Docker 服务端，此文件在 Jenkins 容器中不能直接访问，所以导致出现上述错误。</p>
<p><strong>解决思路</strong></p>
<p>针对此种情况，需要让 docker 客户端可以正确的连接到 docker 服务端</p>
<p><strong>解救方法</strong></p>
<p>为 docker 客户端指定 docker 服务端，可以采取以下方法</p>
<ul>
<li>将宿主机的 <code>/var/run/docker.sock</code> 挂载到 Jenkins 容器<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name jenkins -v /var/run/docker.sock:/var/run/docker.sock  jenkinsci/blueocean</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Got-permission-denied-while-trying-to-connect-to-the-Docker-daemon-socket-at-unix-x2F-x2F-x2F-var-x2F-run-x2F-docker-sock"><a href="#Got-permission-denied-while-trying-to-connect-to-the-Docker-daemon-socket-at-unix-x2F-x2F-x2F-var-x2F-run-x2F-docker-sock" class="headerlink" title="Got permission denied while trying to connect to the Docker daemon socket at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock"></a>Got permission denied while trying to connect to the Docker daemon socket at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock</h2><p><strong>错误场景</strong></p>
<p>使用 Docker 部署的 Jenkins，默认情况下，容器中使用 <code>jenkins</code> 用户运行，无权限访问 <code>/var/run/docker.sock</code>，可以使用如下命令，在启动容器时使用 <code>root</code> 用户运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name jenkins \</span><br><span class="line">          -v /var/run/docker.sock:/var/run/docker.sock  \</span><br><span class="line">          -v /data/JenkinsData_blueocean/:/var/jenkins_home/ \</span><br><span class="line">          -u root \</span><br><span class="line">          jenkinsci/blueocean</span><br></pre></td></tr></table></figure>

<h2 id="WorkflowScript-3-Invalid-agent-type-“docker”-specified-Must-be-one-of-any-label-none"><a href="#WorkflowScript-3-Invalid-agent-type-“docker”-specified-Must-be-one-of-any-label-none" class="headerlink" title="WorkflowScript: 3: Invalid agent type “docker” specified. Must be one of [any, label, none]"></a>WorkflowScript: 3: Invalid agent type “docker” specified. Must be one of [any, label, none]</h2><p><strong>错误原因</strong></p>
<p>没有 docker 相关的插件导致，安装插件 <code>Docker Pipeline</code></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes 常用命令示例</title>
    <url>/202209131536/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos-7 3.10.0-1062.9.1</li>
<li>Docker 19.03.15</li>
<li>containerd.io-1.4.13</li>
<li>kubectl-1.25.0</li>
<li>kubeadm-1.25.0</li>
<li>kubelet-1.25.0</li>
</ul>
<h1 id="kubeadm-常用命令"><a href="#kubeadm-常用命令" class="headerlink" title="kubeadm 常用命令"></a>kubeadm 常用命令</h1><p><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/">kubeadm 命令官方参考文档</a></p>
<h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket=unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--pod-network-cidr</code></td>
<td>指定 pod 的 cidr，安装 CNI 插件时，配置的 CIDR 要和此处一致</td>
<td></td>
</tr>
<tr>
<td><code>--service-cidr</code></td>
<td><code>service</code> 使用的 CIDR</td>
<td></td>
</tr>
<tr>
<td><code>--cri-socket</code></td>
<td>配置集群使用的 CRI，不指定时系统会扫描主机，如果有多个可用 CRI，会出现提示</td>
<td></td>
</tr>
<tr>
<td><code>--apiserver-advertise-address</code></td>
<td>手动配置 <code>api-server</code> 的 Advertise IP 地址。<br/>不配置的情况下，系统默认选择主机上的默认路由对应网卡上面的 IP</td>
<td></td>
</tr>
<tr>
<td><code>--control-plane-endpoint</code></td>
<td>配置  <code>api-server</code> 的共享地址，可以是域名或者负载均衡器的 IP<br/>单节点的 Master 后期需要扩展为多节点（高可用）时，需要有此配置，否则不支持(<code>kubeadm</code>)扩展</td>
<td></td>
</tr>
</tbody></table>
<h2 id="添加节点到集群"><a href="#添加节点到集群" class="headerlink" title="添加节点到集群"></a>添加节点到集群</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join 172.31.10.19:6443 --token 8ca35s.butdpihinkdczvqb --discovery-token-ca-cert-hash sha256:b2793f9a6bea44a64640f99042f11c4ff6 \ </span><br><span class="line">        --cri-socket=unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure>
<p>其中的 <code>token</code> 可以在 master 上使用以下命令查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubeadm token list</span></span><br><span class="line">TOKEN                     TTL         EXPIRES                USAGES                   DESCRIPTION                                                EXTRA GROUPS</span><br><span class="line">8ca35s.butdpihinkdczvqb   19h         2022-09-14T02:54:55Z   authentication,signing   The default bootstrap token generated by &#x27;kubeadm init&#x27;.   system:bootstrappers:kubeadm:default-node-token</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>默认情况下，令牌会在 24 小时后过期。如果要在当前令牌过期后将节点加入集群， 则可以通过在控制平面节点上运行以下命令来创建新令牌：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm token create</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果你没有 <code>--discovery-token-ca-cert-hash</code> 的值，则可以通过在控制平面节点上执行以下命令链来获取它<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用 kubeadm 创建集群](https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#join-nodes)">[1]</span></a></sup>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | \</span><br><span class="line">   openssl dgst -sha256 -hex | sed &#x27;s/^.* //&#x27;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="kubectl-常用命令"><a href="#kubectl-常用命令" class="headerlink" title="kubectl 常用命令"></a>kubectl 常用命令</h1><p>kubectl 常用选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-n, --namespace=&#39;&#39;</code></td>
<td>指定操作的 namespace</td>
<td></td>
</tr>
<tr>
<td><code>-A, --all-namespaces</code></td>
<td>列出所有的 namespace 中的资源</td>
<td></td>
</tr>
<tr>
<td><code>-o, --output=</code></td>
<td>输出格式，常用值包含：<br/>- <code>json</code><br/>- <code>yaml</code><br/>- <code>wide</code></td>
<td><a href="#%E6%9F%A5%E7%9C%8B-Pod-%E7%9A%84-yaml-%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6">显示 Pod 详细信息</a></td>
</tr>
<tr>
<td><code>--show-labels</code></td>
<td>显示资源对象的标签</td>
<td><a href="#label">label</a></td>
</tr>
<tr>
<td><code>-l, --selector=&#39;&#39;</code></td>
<td>使用标签选择算符选择对象</td>
<td><a href="#%E4%BD%BF%E7%94%A8%E6%A0%87%E7%AD%BE%E9%80%89%E6%8B%A9%E5%99%A8%E5%88%97%E5%87%BA-Pod">使用标签选择器列出 Pod</a>    <br/>具体用法可以参考帮助信息 <code>kubectl get --help | grep &#39;\-l&#39;</code></td>
</tr>
</tbody></table>
<h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><h3 id="查看-node-信息"><a href="#查看-node-信息" class="headerlink" title="查看 node 信息"></a>查看 node 信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME              STATUS   ROLES           AGE     VERSION</span><br><span class="line">ops-kubernetes1   Ready    control-plane   5h31m   v1.25.0</span><br><span class="line">ops-kubernetes2   Ready    &lt;none&gt;          3h6m    v1.25.0</span><br><span class="line">ops-kubernetes3   Ready    &lt;none&gt;          179m    v1.25.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看指定节点的状态及其他详细信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl describe node &lt;节点名称&gt;</span><br></pre></td></tr></table></figure>

<h3 id="标记-node-为不可调度"><a href="#标记-node-为不可调度" class="headerlink" title="标记 node 为不可调度"></a>标记 node 为不可调度</h3><p>如果标记节点为不可调度（unschedulable），将阻止新 Pod 调度到该 Node 之上， 但不会影响任何已经在其上的 Pod。 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl cordon $NODENAME</span><br></pre></td></tr></table></figure>
<h2 id="检查集群控制组件的健康状态"><a href="#检查集群控制组件的健康状态" class="headerlink" title="检查集群控制组件的健康状态"></a>检查集群控制组件的健康状态</h2><p>API 服务器对外暴露了一个名为 <code>componentstatuses</code> 的 <a href="#%E6%9F%A5%E7%9C%8B%E9%9B%86%E7%BE%A4%E4%B8%AD%E5%8F%AF%E4%BD%BF%E7%94%A8%E7%9A%84%E8%B5%84%E6%BA%90%E9%A1%B9">API 资源</a>，用来显示每个控制平面组件的健康状态。可以通过以下命令列出各个控制平面组件的健康状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get componentstatuses</span></span><br><span class="line">Warning: v1 ComponentStatus is deprecated in v1.19+</span><br><span class="line">NAME                 STATUS    MESSAGE                         ERROR</span><br><span class="line">controller-manager   Healthy   ok                              </span><br><span class="line">scheduler            Healthy   ok                              </span><br><span class="line">etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;,&quot;reason&quot;:&quot;&quot;&#125; </span><br></pre></td></tr></table></figure>

<h2 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h2><h3 id="列出所有-pod"><a href="#列出所有-pod" class="headerlink" title="列出所有 pod"></a>列出所有 pod</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A</span></span><br><span class="line">NAMESPACE      NAME                                      READY   STATUS              RESTARTS         AGE</span><br><span class="line">kube-flannel   kube-flannel-ds-7q2hp                     0/1     CrashLoopBackOff    52 (86s ago)     4h3m</span><br><span class="line">kube-flannel   kube-flannel-ds-k8wd6                     0/1     CrashLoopBackOff    47 (16s ago)     135m</span><br><span class="line">kube-flannel   kube-flannel-ds-x6ck2                     0/1     CrashLoopBackOff    29 (3m57s ago)   128m</span><br><span class="line">kube-system    coredns-565d847f94-b4sgn                  0/1     ContainerCreating   0                4h39m</span><br><span class="line">kube-system    coredns-565d847f94-ml6k5                  0/1     ContainerCreating   0                4h39m</span><br><span class="line">kube-system    etcd-ops-kubernetes1                      1/1     Running             0                4h39m</span><br><span class="line">kube-system    kube-apiserver-ops-kubernetes1            1/1     Running             0                4h39m</span><br><span class="line">kube-system    kube-controller-manager-ops-kubernetes1   1/1     Running             0                4h39m</span><br><span class="line">kube-system    kube-proxy-9vwxl                          1/1     Running             0                135m</span><br><span class="line">kube-system    kube-proxy-qxsc7                          1/1     Running             0                128m</span><br><span class="line">kube-system    kube-proxy-v5msf                          1/1     Running             0                4h39m</span><br><span class="line">kube-system    kube-scheduler-ops-kubernetes1            1/1     Running             0                4h39m</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="查看-Pod-的-yaml-描述文件"><a href="#查看-Pod-的-yaml-描述文件" class="headerlink" title="查看 Pod 的 yaml 描述文件"></a>查看 Pod 的 yaml 描述文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pod -n testns test-pod-d6bd6996c-dcfgq -o yaml</span><br></pre></td></tr></table></figure>
<p>输出中也会包含 Pod 内部容器的详细状态</p>
<h3 id="使用-kubectl-重启-pod"><a href="#使用-kubectl-重启-pod" class="headerlink" title="使用 kubectl 重启 pod"></a>使用 kubectl 重启 pod</h3><p>以下命令重启 kubernetes-dashboard</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pod kubernetes-dashboard -n kubernetes-dashboard -o yaml | kubectl replace --force -f -</span><br></pre></td></tr></table></figure>

<p>这条命令的意思是 <code>get</code> 当前运行的 pod 的 yaml 声明，并管道重定向输出到 <code>kubectl replace</code> 命令的标准输入，从而达到重启的目的。</p>
<h3 id="连接-Pod-中的容器"><a href="#连接-Pod-中的容器" class="headerlink" title="连接 Pod 中的容器"></a>连接 Pod 中的容器</h3><p><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#exec">命令格式参考</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> test-nginx-deployment-59d795fbf6-bjgcz -it -n default -- bash</span></span><br><span class="line">root@test-nginx-deployment-59d795fbf6-bjgcz:/#</span><br></pre></td></tr></table></figure>
<p>使用 root 用户登陆容器。分别使用以下命令查询 POD 所在的节点和 容器 ID</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -n spinnaker -o wide</span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE     IP            NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">spin-clouddriver-85d4985d4c-5rj4d   1/1     Running   0          6d20h   10.244.1.29   k8s-work1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe pod -n spinnaker spin-clouddriver-85d4985d4c-5rj4d</span></span><br><span class="line">...</span><br><span class="line">Containers:</span><br><span class="line">  clouddriver:</span><br><span class="line">    Container ID:   docker://010226eaa372bab53c30f82af6a5918ebc46f158ecc6e379ed44f9e2994ed432</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如上命令可以查到所在节点和容器 ID （<code>010226eaa372bab53c30f82af6a5918ebc46f158ecc6e379ed44f9e2994ed432</code>），登陆到对应节点，使用 <code>docker</code> 命令以 <code>root</code> 用户登陆容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it -u root 010226eaa372bab53c bash</span><br></pre></td></tr></table></figure>

<h3 id="实时监控-Pod-资源状态的变化"><a href="#实时监控-Pod-资源状态的变化" class="headerlink" title="实时监控 Pod 资源状态的变化"></a>实时监控 Pod 资源状态的变化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -n frtg --watch</span></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">frtg-admin-698bfc4998-8mccv   1/1     Running   0          13d</span><br><span class="line">frtg-api-748dc4bf87-dptbb     1/1     Running   0          43d</span><br><span class="line">frtg-api-748dc4bf87-xnsbr     1/1     Running   0          12d</span><br><span class="line">frtg-front-58796b88f7-k58sz   1/1     Running   0          13d</span><br><span class="line">frtg-search-d6bd6996c-dcfgq   1/1     Running   0          13d</span><br></pre></td></tr></table></figure>
<p>使用 <code>--watch</code> 选项可以实时监听资源的变化情况。其原理是通过 API Server 的通知客户端资源变更的能力实现。当资源请求变更，API Server 处理变更后，会像订阅了资源变更的客户端发送资源变更的通知。</p>
<h2 id="查看集群中可使用的资源项"><a href="#查看集群中可使用的资源项" class="headerlink" title="查看集群中可使用的资源项"></a>查看集群中可使用的资源项</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl api-resources</span></span><br><span class="line">NAME                              SHORTNAMES   APIVERSION                             NAMESPACED   KIND</span><br><span class="line">bindings                                       v1                                     true         Binding</span><br><span class="line">endpoints                         ep           v1                                     true         Endpoints</span><br><span class="line">events                            ev           v1                                     true         Event</span><br><span class="line">namespaces                        ns           v1                                     false        Namespace</span><br><span class="line">nodes                             no           v1                                     false        Node</span><br><span class="line">pods                              po           v1                                     true         Pod</span><br><span class="line">podtemplates                                   v1                                     true         PodTemplate</span><br><span class="line">secrets                                        v1                                     true         Secret</span><br><span class="line">serviceaccounts                   sa           v1                                     true         ServiceAccount</span><br><span class="line">services                          svc          v1                                     true         Service</span><br><span class="line">apiservices                                    apiregistration.k8s.io/v1              false        APIService</span><br><span class="line">controllerrevisions                            apps/v1                                true         ControllerRevision</span><br><span class="line">deployments                       deploy       apps/v1                                true         Deployment</span><br><span class="line">replicasets                       rs           apps/v1                                true         ReplicaSet</span><br><span class="line">jobs                                           batch/v1                               true         Job</span><br><span class="line">endpointslices                                 discovery.k8s.io/v1                    true         EndpointSlice</span><br><span class="line">events                            ev           events.k8s.io/v1                       true         Event</span><br><span class="line">ingresses                         ing          networking.k8s.io/v1                   true         Ingress</span><br><span class="line">networkpolicies                   netpol       networking.k8s.io/v1                   true         NetworkPolicy</span><br><span class="line">runtimeclasses                                 node.k8s.io/v1                         false        RuntimeClass</span><br><span class="line">clusterrolebindings                            rbac.authorization.k8s.io/v1           false        ClusterRoleBinding</span><br><span class="line">clusterroles                                   rbac.authorization.k8s.io/v1           false        ClusterRole</span><br><span class="line">rolebindings                                   rbac.authorization.k8s.io/v1           true         RoleBinding</span><br><span class="line">roles                                          rbac.authorization.k8s.io/v1           true         Role</span><br><span class="line">csidrivers                                     storage.k8s.io/v1                      false        CSIDriver</span><br><span class="line">csinodes                                       storage.k8s.io/v1                      false        CSINode</span><br><span class="line">storageclasses                    sc           storage.k8s.io/v1                      false        StorageClass</span><br><span class="line">volumeattachments                              storage.k8s.io/v1                      false        VolumeAttachment</span><br></pre></td></tr></table></figure>
<p>以下命令可以分别查看在 namespace 中的资源和不在 namespace 中的资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">位于名字空间中的资源</span></span><br><span class="line">kubectl api-resources --namespaced=true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不在名字空间中的资源</span></span><br><span class="line">kubectl api-resources --namespaced=false</span><br></pre></td></tr></table></figure>

<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>查看指定 namespace 中的指定 pod 的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl logs kube-flannel-ds-7q2hp -n kube-flannel</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>默认将显示当前容器的日志，如果要看前一个已经被终止的容器的日志，可以使用选项 <code>--previous</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl logs -n spinnaker spin-clouddriver-cd5999f64-ktxkp --previous</span><br></pre></td></tr></table></figure>

<h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><h3 id="删除-namespace"><a href="#删除-namespace" class="headerlink" title="删除 namespace"></a>删除 namespace</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl delete ns kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><p>查看 Pod 的 lables</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pod --show-labels</span><br></pre></td></tr></table></figure>
<p>查看 Pod 中指定的 lables 的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pod -L app,project -n agmjys</span><br></pre></td></tr></table></figure>

<h3 id="使用标签选择器列出-Pod"><a href="#使用标签选择器列出-Pod" class="headerlink" title="使用标签选择器列出 Pod"></a>使用标签选择器列出 Pod</h3><p><a href="https://csms.tech/202209241108/#标签和选择算符">标签选择器</a>允许我们选择标记有特定标签的资源对象的子集</p>
<p>以下示例，选择<strong>拥有标签</strong> <code>app</code> 的 Pod，不管其值为何。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod -n <span class="built_in">test</span> -l app</span></span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">testpod-admin-698bfc4998-8mccv   1/1     Running   0          8d</span><br><span class="line">testpod-api-748dc4bf87-dptbb     1/1     Running   0          38d</span><br><span class="line">testpod-api-748dc4bf87-xnsbr     1/1     Running   0          7d3h</span><br><span class="line">testpod-front-58796b88f7-k58sz   1/1     Running   0          8d</span><br><span class="line">testpod-search-d6bd6996c-dcfgq   1/1     Running   0          8d</span><br></pre></td></tr></table></figure>
<p>以下示例，选择<strong>没有标签</strong> <code>app</code> 的 Pod。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pod -n test -l &#x27;!app&#x27;</span><br></pre></td></tr></table></figure>

<p>以下示例，选择<strong>符合标签和值</strong> <code>app=testpod-api</code> 的 Pod</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod -n <span class="built_in">test</span> -l app=testpod-api</span></span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">testpod-api-748dc4bf87-dptbb   1/1     Running   0          38d</span><br><span class="line">testpod-api-748dc4bf87-xnsbr   1/1     Running   0          7d3h</span><br></pre></td></tr></table></figure>

<p>以下示例，选择<strong>具体有标签 <code>app</code>，但是值不为 <code>testpod-api</code> 的 Pod</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod -n <span class="built_in">test</span> -l app!=testpod-api</span></span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">testpod-admin-698bfc4998-8mccv   1/1     Running   0          8d</span><br><span class="line">testpod-front-58796b88f7-k58sz   1/1     Running   0          8d</span><br><span class="line">testpod-search-d6bd6996c-dcfgq   1/1     Running   0          8d</span><br></pre></td></tr></table></figure>
<p>以下示例，列出<strong>拥有标签 <code>app</code>，且其值为 <code>testpod-api</code> 或者 <code>testpod-front</code> 的 Pod</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod -n <span class="built_in">test</span> -l <span class="string">&#x27;app in (testpod-api,testpod-front)&#x27;</span></span></span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">testpod-api-748dc4bf87-dptbb     1/1     Running   0          38d</span><br><span class="line">testpod-api-748dc4bf87-xnsbr     1/1     Running   0          7d3h</span><br><span class="line">testpod-front-58796b88f7-k58sz   1/1     Running   0          8d</span><br></pre></td></tr></table></figure>
<p>以下示例，列出<strong>拥有标签 <code>app</code>，且其值不为 <code>testpod-api</code> 或者 <code>testpod-front</code> 的 Pod</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod -n <span class="built_in">test</span> -l <span class="string">&#x27;app notin (testpod-api,testpod-front)&#x27;</span></span> </span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">testpod-admin-698bfc4998-8mccv  1/1     Running   0          8d</span><br><span class="line">testpod-search-d6bd6996c-dcfgq  1/1     Running   0          8d</span><br></pre></td></tr></table></figure>
<p>以下示例，列出<strong>同时拥有标签 <code>app=testpod-api</code> 和 <code>project=testpod</code> 的 Pod</strong>。使用逗号分割的多个条件时，必须满足所有匹配才算成功匹配到选择算符。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod -n <span class="built_in">test</span> -l <span class="string">&#x27;app=testpod-api,project=testpod&#x27;</span></span></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">testpod-api-748dc4bf87-dptbb   1/1     Running   0          38d</span><br><span class="line">testpod-api-748dc4bf87-xnsbr   1/1     Running   0          7d3h</span><br></pre></td></tr></table></figure>

<h2 id="证书管理"><a href="#证书管理" class="headerlink" title="证书管理"></a>证书管理</h2><h3 id="查看集群证书过期时间"><a href="#查看集群证书过期时间" class="headerlink" title="查看集群证书过期时间"></a>查看集群证书过期时间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubeadm certs check-expiration</span></span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Sep 24, 2024 08:15 UTC   364d                                    no      </span><br><span class="line">apiserver                  Sep 24, 2024 07:21 UTC   364d            ca                      no      </span><br><span class="line">apiserver-etcd-client      Sep 24, 2024 07:21 UTC   364d            etcd-ca                 no      </span><br><span class="line">apiserver-kubelet-client   Sep 24, 2024 07:21 UTC   364d            ca                      no      </span><br><span class="line">controller-manager.conf    Sep 24, 2024 07:21 UTC   364d                                    no      </span><br><span class="line">etcd-healthcheck-client    Sep 24, 2024 07:21 UTC   364d            etcd-ca                 no      </span><br><span class="line">etcd-peer                  Sep 24, 2024 07:21 UTC   364d            etcd-ca                 no      </span><br><span class="line">etcd-server                Sep 24, 2024 07:21 UTC   364d            etcd-ca                 no      </span><br><span class="line">front-proxy-client         Sep 24, 2024 07:21 UTC   364d            front-proxy-ca          no      </span><br><span class="line">scheduler.conf             Sep 24, 2024 07:21 UTC   364d                                    no      </span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Sep 19, 2032 05:55 UTC   8y              no      </span><br><span class="line">etcd-ca                 Sep 19, 2032 05:55 UTC   8y              no      </span><br><span class="line">front-proxy-ca          Sep 19, 2032 05:55 UTC   8y              no</span><br></pre></td></tr></table></figure>

<h3 id="查看-secret-中证书的信息"><a href="#查看-secret-中证书的信息" class="headerlink" title="查看 secret 中证书的信息"></a>查看 secret 中证书的信息</h3><p>Kubenetes 系统中，TLS 证书都是以 <code>secret</code> 的形式加密存储，要检查证书信息。参考以下命令</p>
<p>查看 <code>secret</code> ，其中 <code>TYPE</code> 为 <code>kubernetes.io/tls</code> 的是 <code>ssl/tls</code> 证书加密后的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get secret -n cattle-system</span></span><br><span class="line">NAME                         TYPE                                  DATA   AGE</span><br><span class="line">cattle-credentials-0ce519b   Opaque                                3      368d</span><br><span class="line">cattle-credentials-3ab0831   Opaque                                3      168d</span><br><span class="line">cattle-credentials-52bbb17   Opaque                                3      168d</span><br><span class="line">cattle-credentials-67b55ac   Opaque                                3      368d</span><br><span class="line">cattle-token-6sh6m           kubernetes.io/service-account-token   3      368d</span><br><span class="line">default-token-9qw6z          kubernetes.io/service-account-token   3      368d</span><br><span class="line">serving-cert                 kubernetes.io/tls                     2      368d</span><br><span class="line">stv-aggregation              Opaque                                5      368d</span><br><span class="line">tls-rancher                  kubernetes.io/tls                     2      368d</span><br><span class="line">tls-rancher-internal         kubernetes.io/tls                     2      87d</span><br><span class="line">tls-rancher-internal-ca      kubernetes.io/tls                     2      368d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get secret tls-rancher -n cattle-system -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJxRENDQVUyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQTdNUnd3R2dZRFZRUUtFeE5rZVc1aGJXbGoKYkdsemRHVnVaWEl0YjNKbk1Sc3dHUVlEVlFRREV4SmtlVzVoYldsamJHbHpkR1Z1WlhJdFkyRXdIaGNOTWpJdwpPVEl5TURjd09ERTBXaGNOTXpJd09URTVNRGN3T0RFMFdqQTdNUnd3R2dZRFZRUUtFeE5rZVc1aGJXbGpiR2x6CmRHVnVaWEl0YjNKbk1Sc3dHUVlEVlFRREV4SmtlVzVoYldsamJHbHpkR1Z1WlhJdFkyRXdXVEFUQmdjcWhrak8KUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVFWWHN5NHpjak9CTE0wMVltTmlJSlhaQVVibVBxMUpRbGRSYmZSMEp0UQpCTFNZWlQxSUV4cmFRc1pwNjRoSGIzdTdQQTFxZ1p6ZVVmZy8wVTN2ZlFTcG8wSXdRREFPQmdOVkhROEJBZjhFCkJBTUNBcVF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVdjJiOWRrRGtudmZjQXNEMXplSEEKTE5XdGJJQXdDZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBTUpGVHZ3aXE0YWkxUkhTZEx5cWt6dHBVblFSeFV4LwpMRDRRcVJEVXJhMDZBaUVBNk5lTkxIZHhhLzI4UDRra21uU0ZnN2Fhb0wwYytwanVDY2ZqVkxGZFNlND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=</span><br><span class="line">  tls.key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUEwMTFEeDg1bERackdNamJSNlpPVmlHeUN0OWUweWdaZW1FNUdoOUNlTitvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFRlY3TXVNM0l6Z1N6Tk5XSmpZaUNWMlFGRzVqNnRTVUpYVVczMGRDYlVBUzBtR1U5U0JNYQoya0xHYWV1SVIyOTd1endOYW9HYzNsSDRQOUZONzMwRXFRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    field.cattle.io/projectId: c-m-d8r2b4x5:p-8csc7</span><br><span class="line">  creationTimestamp: &quot;2022-09-22T07:08:14Z&quot;</span><br><span class="line">  name: tls-rancher</span><br><span class="line">  namespace: cattle-system</span><br><span class="line">  resourceVersion: &quot;11533&quot;</span><br><span class="line">  uid: 2d2410f3-0325-45c2-9a2a-5937c8fd7a53</span><br><span class="line">type: kubernetes.io/tls</span><br></pre></td></tr></table></figure>
<p>要解密其中的数据并查看证书信息，参考以下步骤</p>
<ul>
<li>提取证书内容。使用 <code>kubectl</code> 命令提取 Secret 中的 <code>tls.crt</code> 字段（这是证书内容），然后使用 <code>base64</code> 解码它  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get secret tls-rancher -n cattle-system -o jsonpath=&quot;&#123;.data.tls\.crt&#125;&quot; | base64 --decode &gt; tls-rancher.crt</span><br></pre></td></tr></table></figure></li>
<li>查看证书信息  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openssl x509 -<span class="keyword">in</span> tls-rancher.crt -noout -enddate</span></span><br><span class="line">notAfter=Sep 19 07:08:14 2032 GMT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openssl x509 -<span class="keyword">in</span> tls-rancher.crt -text</span></span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number: 0 (0x0)</span><br><span class="line">    Signature Algorithm: ecdsa-with-SHA256</span><br><span class="line">        Issuer: O=dynamiclistener-org, CN=dynamiclistener-ca</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Sep 22 07:08:14 2022 GMT</span><br><span class="line">            Not After : Sep 19 07:08:14 2032 GMT</span><br><span class="line">        Subject: O=dynamiclistener-org, CN=dynamiclistener-ca</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: id-ecPublicKey</span><br><span class="line">                Public-Key: (256 bit)</span><br><span class="line">                pub: </span><br><span class="line">                    04:15:5e:cc:b8:cd:c8:ce:04:b3:34:d5:89:8d:88:</span><br><span class="line">                    82:57:64:05:1b:98:fa:b5:25:09:5d:45:b7:d1:d0:</span><br><span class="line">                    9b:50:04:b4:98:65:3d:48:13:1a:da:42:c6:69:eb:</span><br><span class="line">                    88:47:6f:7b:bb:3c:0d:6a:81:9c:de:51:f8:3f:d1:</span><br><span class="line">                    4d:ef:7d:04:a9</span><br><span class="line">                ASN1 OID: prime256v1</span><br><span class="line">                NIST CURVE: P-256</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Key Usage: critical</span><br><span class="line">                Digital Signature, Key Encipherment, Certificate Sign</span><br><span class="line">            X509v3 Basic Constraints: critical</span><br><span class="line">                CA:TRUE</span><br><span class="line">            X509v3 Subject Key Identifier: </span><br><span class="line">                BF:66:FD:76:40:E4:9E:F7:DC:02:C0:F5:CD:E1:C0:2C:D5:AD:6C:80</span><br><span class="line">    Signature Algorithm: ecdsa-with-SHA256</span><br><span class="line">         30:46:02:21:00:c2:45:4e:fc:22:ab:86:a2:d5:11:d2:74:bc:</span><br><span class="line">         aa:93:3b:69:52:74:11:c5:4c:7f:2c:3e:10:a9:10:d4:ad:ad:</span><br><span class="line">         3a:02:21:00:e8:d7:8d:2c:77:71:6b:fd:bc:3f:89:24:9a:74:</span><br><span class="line">         85:83:b6:9a:a0:bd:1c:fa:98:ee:09:c7:e3:54:b1:5d:49:ee</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIBqDCCAU2gAwIBAgIBADAKBggqhkjOPQQDAjA7MRwwGgYDVQQKExNkeW5hbWlj</span><br><span class="line">bGlzdGVuZXItb3JnMRswGQYDVQQDExJkeW5hbWljbGlzdGVuZXItY2EwHhcNMjIw</span><br><span class="line">OTIyMDcwODE0WhcNMzIwOTE5MDcwODE0WjA7MRwwGgYDVQQKExNkeW5hbWljbGlz</span><br><span class="line">LNWtbIAwCgYIKoZIzj0EAwIDSQAwRgIhAMJFTvwiq4ai1RHSdLyqkztpUnQRxUx/</span><br><span class="line">LD4QqRDUra06AiEA6NeNLHdxa/28P4kkmnSFg7aaoL0c+pjuCcfjVLFdSe4=</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h2><h3 id="Pod-更新后的回退管理"><a href="#Pod-更新后的回退管理" class="headerlink" title="Pod 更新后的回退管理"></a>Pod 更新后的回退管理</h3><p>在 Kubernetes 中，使用 Deployment 管理的 Pod，在通过 Delpoyment 更新后，会记录 Pod 的更新记录，可以查看 Pod 更新记录并根据更新记录进行回退。核心命令为 <code>kubectl rollout</code></p>
<h4 id="查看-Pod-更新记录"><a href="#查看-Pod-更新记录" class="headerlink" title="查看 Pod 更新记录"></a>查看 Pod 更新记录</h4><p>要查看 Pod 更新记录，使用以下命令。<strong>需要注意 Deployment 的格式: <code>deployment/&lt;deployment-name&gt;</code>，否则报 <code>error: the server doesn&#39;t have a resource type</code> 错误</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl rollout <span class="built_in">history</span> deployment/ops-test -n ops-test</span></span><br><span class="line">deployment.apps/ops-test </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line">4         &lt;none&gt;</span><br><span class="line">5         &lt;none&gt;</span><br><span class="line">6         &lt;none&gt;</span><br><span class="line">7         &lt;none&gt;</span><br><span class="line">8         &lt;none&gt;</span><br><span class="line">9         &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p><code>CHANGE-CAUSE</code> 列显示 <code>&lt;none&gt;</code>，意味着没有记录每个修订的变更原因。要记录变更原因，需要在应用配置中包含正确的注解。例如，你可以在你的 Kubernetes manifests 中添加 <code>kubernetes.io/change-cause</code> 注解来记录变更原因。</p>
<p>如果要查看某个历史版本的详细信息，使用以下命令，要指定的版本使用参数 <code>--revision=1</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl rollout <span class="built_in">history</span> deployment/ops-test -n ops-test --revision=1</span></span><br><span class="line">deployment.apps/ops-test with revision #1</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:	app.kubernetes.io/managed-by=spinnaker</span><br><span class="line">	app.kubernetes.io/name=ops-test</span><br><span class="line">	env=prod</span><br><span class="line">	pod-template-hash=f47477b78</span><br><span class="line">	project=ops-test</span><br><span class="line">  Annotations:	artifact.spinnaker.io/location: ops-test</span><br><span class="line">	artifact.spinnaker.io/name: ops-test</span><br><span class="line">	artifact.spinnaker.io/type: kubernetes/deployment</span><br><span class="line">	artifact.spinnaker.io/version: </span><br><span class="line">	moniker.spinnaker.io/application: ops-test</span><br><span class="line">	moniker.spinnaker.io/cluster: deployment ops-test</span><br><span class="line">  Init Containers:</span><br></pre></td></tr></table></figure>

<h4 id="Pod-回退操作"><a href="#Pod-回退操作" class="headerlink" title="Pod 回退操作"></a>Pod 回退操作</h4><p>在确定好要回退的版本后，执行以下命令，可回退到指定的版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl rollout undo deployment/ops-test --to-revision=&lt;revision-number&gt; -n ops-test</span><br></pre></td></tr></table></figure>

<h1 id="其他常见操作"><a href="#其他常见操作" class="headerlink" title="其他常见操作"></a>其他常见操作</h1><h2 id="获取节点上的-kube-proxy-代理模式"><a href="#获取节点上的-kube-proxy-代理模式" class="headerlink" title="获取节点上的 kube-proxy 代理模式"></a>获取节点上的 kube-proxy 代理模式</h2><p><code>kube-proxy</code> 负责 Service 到后端 Pod 的转发规则管理，默认使用 <code>iptables</code>，可选模式还包括 <code>IPVS</code> 和 <code>userspace</code> （性能太差，几乎不使用），要查看节点使用的 <code>kube-proxy</code> 模式，可以执行以下命令查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME                           STATUS     ROLES    AGE     VERSION</span><br><span class="line">kubernetes-node-6jst   Ready      &lt;none&gt;   2h      v1.13.0</span><br><span class="line">kubernetes-node-cx31   Ready      &lt;none&gt;   2h      v1.13.0</span><br><span class="line">kubernetes-node-jj1t   Ready      &lt;none&gt;   2h      v1.13.0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>例如查看节点 <code>kubernetes-node-jj1t</code> 上的 <code>kube-proxy</code> 的模式，登陆到节点 <code>kubernetes-node-jj1t</code>，执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl http://localhost:10249/proxyMode</span></span><br><span class="line">iptables</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>kube-proxy</code> 监听在端口 <code>127.0.0.1:10249</code>，只能本机访问。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands"><code>kubectl</code> 命令参考</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#join-nodes">使用 kubeadm 创建集群</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes 常见错误总结</title>
    <url>/202209281614/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7 5.4.212-1</li>
<li>Docker 20.10.18</li>
<li>containerd.io-1.6.8</li>
<li>kubectl-1.25.0</li>
<li>kubeadm-1.25.0</li>
<li>kubelet-1.25.0</li>
</ul>
<h1 id="POD-状态异常"><a href="#POD-状态异常" class="headerlink" title="POD 状态异常"></a>POD 状态异常</h1><h2 id="CrashLoopBackOff"><a href="#CrashLoopBackOff" class="headerlink" title="CrashLoopBackOff"></a>CrashLoopBackOff</h2><p><strong>错误场景</strong> ： </p>
<p><code>Pod</code> 状态显示 <code>CrashLoopBackOff</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods</span></span><br><span class="line">NAME                                     READY   STATUS             RESTARTS       AGE</span><br><span class="line">test-centos7-7cc5dc6987-jz486            0/1     CrashLoopBackOff   8 (111s ago)   17m</span><br></pre></td></tr></table></figure>
<p>查看 <code>Pod</code> 详细信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe pod test-centos7-7cc5dc6987-jz486</span></span><br><span class="line">...</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age                  From               Message</span><br><span class="line">  ----     ------     ----                 ----               -------</span><br><span class="line">  Normal   Scheduled  18m                  default-scheduler  Successfully assigned default/test-centos7-7cc5dc6987-jz486 to ops-kubernetes3</span><br><span class="line">  Normal   Pulled     16m (x5 over 18m)    kubelet            Container image &quot;centos:centos7.9.2009&quot; already present on machine</span><br><span class="line">  Normal   Created    16m (x5 over 18m)    kubelet            Created container centos7</span><br><span class="line">  Normal   Started    16m (x5 over 18m)    kubelet            Started container centos7</span><br><span class="line">  Warning  BackOff    3m3s (x71 over 18m)  kubelet            Back-off restarting failed container</span><br></pre></td></tr></table></figure>
<p>结果显示，<code>Reason</code> 为 <code>BackOff</code>，<code>Message</code> 显示 <code>Back-off restarting failed container</code></p>
<p><strong>可能原因</strong> ：</p>
<p><code>Back-off restarting failed container</code> 的原因，通常是因为，容器内 PID 为 1 的进程退出导致（通常用户在构建镜像执行 <code>CMD</code> 时，启动的程序，均是 PID 为1）<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Back-off restarting failed container 怎么办](https://cloud.tencent.com/developer/article/1931089)">[1]</span></a></sup></p>
<p>容器进程退出（命令执行结束或者进程异常结束），则容器生命周期结束。kubernetes 控制器检查到容器退出，会持续重启容器。针对此种情况，需要检查镜像，是否不存在常驻进程，或者常驻进程异常。</p>
<p>针对此种情况，可以单独使用 <code>docker</code> 客户端部署镜像，查看镜像的运行情况，如果部署后，容器中的进程立马结束或退出，则容器也会随之结束。</p>
<p>定位中也可以使用 <code>kubectl describe pod</code> 命令检查 Pod 的退出状态码。Kubernetes 中的 Pod ExitCode 状态码是容器退出时返回的退出状态码，这个状态码通常用来指示容器的执行结果，以便 Kubernetes 和相关工具可以根据它来采取后续的操作。以下是一些常见的 ExitCode 状态码说明：</p>
<ul>
<li><code>ExitCode 0</code> : 这表示容器正常退出，没有错误。这通常是期望的结果。</li>
<li><code>ExitCode 1</code> ： 通常表示容器以非正常方式退出，可能是由于应用程序内部错误或异常导致的。通常是容器中 pid 为 1 的进程错误而失败</li>
<li><code>ExitCode 非零</code> ： 任何非零的状态码都表示容器退出时发生了错误。ExitCode 的具体值通常是自定义的，容器内的应用程序可以根据需要返回不同的状态码来表示不同的错误情况。你需要查看容器内应用程序的文档或日志来了解具体的含义。</li>
<li><code>ExitCode 137</code> ： 通常表示容器因为被操作系统终止（例如，<code>OOM-killer</code>）而非正常退出。这可能是由于内存不足等资源问题导致的。</li>
<li><code>ExitCode 139</code> ： 通常表示容器因为接收到了一个信号而非正常退出。这个信号通常是 <code>SIGSEGV</code>（段错误），表示应用程序试图访问无效的内存。</li>
<li><code>ExitCode 143</code> ： 通常表示容器因为接收到了 <code>SIGTERM</code> 信号而正常退出。这是 Kubernetes 在删除 Pod 时发送的信号，容器应该在接收到该信号后做一些清理工作然后退出。</li>
<li><code>ExitCode 130</code> ： 通常表示容器因为接收到了 <code>SIGINT</code> 信号而正常退出。这是当用户在命令行中按下 <code>Ctrl+C</code> 时发送的信号。</li>
<li><code>ExitCode 255</code> ：通常表示未知错误，或者容器无法启动。这个状态码通常是容器运行时的问题，比如容器镜像不存在或者启动命令有问题。</li>
</ul>
<span id="more"></span>
<h2 id="ImagePullBackOff"><a href="#ImagePullBackOff" class="headerlink" title="ImagePullBackOff"></a>ImagePullBackOff</h2><p>Harbor 证书过期后，更新了证书，<a href="https://csms.tech/202302201557/#SEC_ERROR_UNKNOWN_ISSUER">更新证书后相关问题参考</a>，Kubernetes 中更新 Pod 失败，<em><strong>节点上使用了 <code>containerd</code> 做为 CRI</strong></em>，具体报错信息如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pods -n ops</span></span><br><span class="line">NAME                                   READY   STATUS                  RESTARTS      AGE</span><br><span class="line">get-cloud-cdn-statistics-pjfsc-6jnzl   0/1     Init:ImagePullBackOff   0             2m28s</span><br><span class="line">get-cloud-cdn-statistics-r67s2-qs8kj   0/1     Init:ImagePullBackOff   0             81m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe pod -n ops get-cloud-cdn-statistics-pjfsc-x9mh7</span></span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age               From               Message</span><br><span class="line">  ----     ------     ----              ----               -------</span><br><span class="line">  Normal   Scheduled  17s               default-scheduler  Successfully assigned ops/get-cloud-cdn-statistics-pjfsc-x9mh7 to k8s-worker1</span><br><span class="line">  Normal   BackOff    17s               kubelet            Back-off pulling image &quot;harbor1.mydomain.com/ops/all/cloud-server-cdn-statistics-code:master-0.0-20230207143540&quot;</span><br><span class="line">  Warning  Failed     17s               kubelet            Error: ImagePullBackOff</span><br><span class="line">  Normal   Pulling    2s (x2 over 18s)  kubelet            Pulling image &quot;harbor1.mydomain.com/ops/all/cloud-server-cdn-statistics-code:master-0.0-20230207143540&quot;</span><br><span class="line">  Warning  Failed     2s (x2 over 18s)  kubelet            Failed to pull image &quot;harbor1.mydomain.com/ops/all/cloud-server-cdn-statistics-code:master-0.0-20230207143540&quot;: rpc error: code = Unknown desc = failed to pull and unpack image &quot;harbor1.mydomain.com/ops/all/cloud-server-cdn-statistics-code:master-0.0-20230207143540&quot;: failed to resolve reference &quot;harbor1.mydomain.com/ops/all/cloud-server-cdn-statistics-code:master-0.0-20230207143540&quot;: failed to do request: Head &quot;https://harbor1.mydomain.com/v2/ops/all/cloud-server-cdn-statistics-code/manifests/master-0.0-20230207143540&quot;: x509: certificate signed by unknown authority</span><br><span class="line">  Warning  Failed     2s (x2 over 18s)  kubelet            Error: ErrImagePull</span><br></pre></td></tr></table></figure>

<p>在节点 <code>k8s-worker1</code> 上使用 <code>docker</code> 及 <code>curl</code> 测试访问 Harbor 域名均正常。因此判断问题出现在 <code>containerd</code> 未识别到证书导致。</p>
<p>对于 Kubernetes 使用 <code>containerd</code> 作为容器运行时，如果需要配置额外的证书（如信任自签名的 Harbor 仓库证书），可能需要修改或创建 <code>containerd</code> 的配置文件，通常为 <code>/etc/containerd/config.toml</code>。在配置文件中添加证书配置，<em><strong>在这个示例中，<code>ca_file</code> 应该指向 Harbor 证书。确保该路径正确且证书格式为 PEM</strong></em>。</p>
<figure class="highlight shell"><figcaption><span>/etc/containerd/config.toml</span></figcaption><table><tr><td class="code"><pre><span class="line">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry]</span><br><span class="line">  [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs.&quot;harbor1.mydomain.com&quot;.tls]</span><br><span class="line">    ca_file = &quot;/etc/docker/certs.d/harbor1.mydomain.com/ca.crt&quot;</span><br></pre></td></tr></table></figure>
<p>重启 <code>containerd</code> 服务，然后重新部署 Pod</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure>


<h2 id="POD-状态为-InvalidImageName"><a href="#POD-状态为-InvalidImageName" class="headerlink" title="POD 状态为 InvalidImageName"></a>POD 状态为 InvalidImageName</h2><p><strong>错误场景</strong> ： </p>
<p><code>Pod</code> 状态显示 <code>InvalidImageName</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods -n cs</span><br><span class="line">NAME               READY   STATUS              RESTARTS   AGE</span><br><span class="line">54fdc56754-qrlt6   0/2     InvalidImageName    0          14s</span><br><span class="line">8486f49b89-zp25b   0/2     Init:ErrImagePull   0          7s</span><br></pre></td></tr></table></figure>

<p><strong>可能原因</strong> ：</p>
<p>镜像的 url 地址中，以 <code>http://</code> 或 <code>https://</code> 开头。配置中镜像的 url 地址中无需指定协议（<code>http://</code> 或 <code>https://</code>） </p>
<h2 id="Pod-状态为-Error"><a href="#Pod-状态为-Error" class="headerlink" title="Pod 状态为 Error"></a>Pod 状态为 Error</h2><h3 id="The-node-was-low-on-resource-ephemeral-storage"><a href="#The-node-was-low-on-resource-ephemeral-storage" class="headerlink" title="The node was low on resource: ephemeral-storage"></a>The node was low on resource: ephemeral-storage</h3><p><strong>错误场景</strong>：</p>
<p>查看 Pod 状态，显示 Error</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods</span></span><br><span class="line">NAME                     READY   STATUS                   RESTARTS   AGE</span><br><span class="line">front-7df8ccc4c7-xhp6s    0/1     Error                    0          5h42m</span><br></pre></td></tr></table></figure>
<p>检查 Pod 的具体信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe pod front-7df8ccc4c7-xhp6s</span></span><br><span class="line">...</span><br><span class="line">Status:       Failed</span><br><span class="line">Reason:       Evicted</span><br><span class="line">Message:      The node was low on resource: ephemeral-storage. Container php was using 394, which exceeds its request of 0. </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>其中包含异常的关键信息：<code>Status:       Failed</code>，<code>Reason:       Evicted</code>，具体原因为 <code>The node was low on resource: ephemeral-storage</code></p>
<p>检查节点上的 Kuberlet 日志，搜索关键字 <code>evicte</code> 或者 <code>disk</code> ，也可以看到系统上文件系统空间使用率超过了阈值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -u kubelet  | grep -i -e disk -e evict</span></span><br><span class="line"> image_gc_manager.go:310] &quot;Dis usage on image filesystem is over the high threshold, trying to free bytes down to the low threshold&quot; usage=85 highThreshold=85 amountToFree=5122092236 lowThreshold=80</span><br><span class="line"> eviction_manager.go:349] &quot;Eviction manager: must evict pod(s) to reclaim&quot; resourceName=&quot;ephemeral-storage&quot;</span><br><span class="line"> eviction_manager.go:338] &quot;Eviction manager: attempting to reclaim&quot; resourceName=&quot;ephemeral-storage&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>可能原因</strong> ：</p>
<p>根据以上信息，可知 Pod 异常是因为 <code>The node was low on resource: ephemeral-storage</code>，表示 <strong>临时存储资源</strong> 不足导致节点处于 <code>Tainted</code> ，其上的 Pod 被驱逐(<code>Evicted</code>)</p>
<p><strong><a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/manage-resources-containers/#local-ephemeral-storage">本地临时存储说明</a></strong></p>
<p>针对此种情况，如果某 Pod 的临时存储用量超出了你所允许的范围，kubelet 会向其发出逐出（<code>eviction</code>）信号，触发该 Pod 被逐出所在节点。</p>
<p>如果用于可写入容器镜像层、节点层面日志或者 <code>emptyDir</code> 卷的文件系统中可用空间太少， 节点会为自身设置本地存储不足的污点(<code>Tainted</code>)标签。 这一污点会触发对那些无法容忍该污点的 Pod 的逐出操作。</p>
<p><strong>解决方法</strong> ：</p>
<ul>
<li><p>增加磁盘空间</p>
</li>
<li><p>调整 <code>kubelet</code> 的 <code>nodefs.available</code> 的 threshold 值</p>
<p>  修改节点上的 <code>kubelet</code> 的启动配置文件 <code>/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf</code>，添加以下启动参数，主要为定义环境变量 <code>KUBELET_EVICT_NODEFS_THRESHOLD_ARGS</code>，并将其添加到启动参数中</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Environment=&quot;KUBELET_EVICT_NODEFS_THRESHOLD_ARGS=--eviction-hard=nodefs.available&lt;5%&quot;</span><br><span class="line">ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS $KUBELET_EVICT_NODEFS_THRESHOLD_ARGS</span><br></pre></td></tr></table></figure>
<p>  修改之后重启 <code>kubelet</code> 服务，并通过日志查看 <code>nodefs.available</code> 的新值是否生效</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart kubelet</span><br><span class="line"></span><br><span class="line">$ journalctl -u kubelet | grep -i nodefs</span><br><span class="line">17604 container_manager_linux.go:267] &quot;Creating Container Manager object based on Node Config&quot; nodeConfig=&#123;RuntimeCgroupsName: SystemCgroupsName: KubeletCgroupsName: KubeletOOMScoreAdj:-999 ContainerRuntime: CgroupsPerQOS:true CgroupRoot:/ CgroupDriver:systemd KubeletRootDir:/var/lib/kubelet ProtectKernelDefaults:false NodeAllocatableConfig:&#123;KubeReservedCgroupName: SystemReservedCgroupName: ReservedSystemCPUs: EnforceNodeAllocatable:map[pods:&#123;&#125;] KubeReserved:map[] SystemReserved:map[] HardEvictionThresholds:[&#123;Signal:nodefs.available Operator:LessThan Value:&#123;Quantity:&lt;nil&gt; Percentage:0.05&#125; GracePeriod:0s MinReclaim:&lt;nil&gt;&#125;]&#125; QOSReserved:map[] ExperimentalCPUManagerPolicy:none ExperimentalCPUManagerPolicyOptions:map[] ExperimentalTopologyManagerScope:container ExperimentalCPUManagerReconcilePeriod:10s ExperimentalMemoryManagerPolicy:None ExperimentalMemoryManagerReservedMemory:[] ExperimentalPodPidsLimit:-1 EnforceCPULimits:true CPUCFSQuotaPeriod:100ms ExperimentalTopologyManagerPolicy:none&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>日志中看到 <code>Signal:nodefs.available Operator:LessThan Value:&#123;Quantity:&lt;nil&gt; Percentage:0.05</code>，表明更改生效。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ephemeral-storage 问题](https://tonybai.com/2017/10/16/out-of-node-resource-handling-in-kubernetes-cluster/)">[2]</span></a></sup></p>
</li>
</ul>
<h2 id="Pod-状态为-Init"><a href="#Pod-状态为-Init" class="headerlink" title="Pod 状态为 Init"></a>Pod 状态为 Init</h2><h3 id="Unable-to-attach-or-mount-volumes"><a href="#Unable-to-attach-or-mount-volumes" class="headerlink" title="Unable to attach or mount volumes"></a>Unable to attach or mount volumes</h3><p>Pod 启动异常，查看 Pod 状态为 <code>Init:0/1</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods</span></span><br><span class="line">NAME                          READY   STATUS     RESTARTS   AGE</span><br><span class="line">admin-cbb479556-j9qg2    0/1     Init:0/1   0          3m37s</span><br></pre></td></tr></table></figure>
<p>查看 Pod 的详细描述信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe pod admin-cbb479556-j9qg2</span></span><br><span class="line">Events:</span><br><span class="line">  Type     Reason       Age    From               Message</span><br><span class="line">  ----     ------       ----   ----               -------</span><br><span class="line">  Normal   Scheduled    3m41s  default-scheduler  Successfully assigned admin-cbb479556-j9qg2 to k8s-work2</span><br><span class="line">  Warning  FailedMount  99s    kubelet            Unable to attach or mount volumes: unmounted volumes=[logs], unattached volumes=[wwwroot kube-api-access-z8745 logs]: timed out waiting for the condition</span><br><span class="line">  Warning  FailedMount  42s    kubelet            MountVolume.SetUp failed for volume &quot;uat-nfs-pv&quot; : mount failed: exit status 32</span><br><span class="line">Mounting command: mount</span><br><span class="line">Mounting arguments: -t nfs 34.230.1.1:/data/NFSDataHome /var/lib/kubelet/pods/9d9a4807-706c-4369-b8be-b5727ee6aa8f/volumes/kubernetes.io~nfs/uat-nfs-pv</span><br><span class="line">Output: mount.nfs: Connection timed out</span><br></pre></td></tr></table></figure>

<p>根据 <code>Events</code> 中输出的信息，<code>MountVolume.SetUp failed for volume &quot;uat-nfs-pv&quot; : mount failed: exit status 32</code>，显示挂载卷失败，输出中包含了挂载卷时使用的命令和参数（<code>mount -t nfs 34.230.1.1:/data/NFSDataHome /var/lib/kubelet/pods/9d9a4807-706c-4369-b8be-b5727ee6aa8f/volumes/kubernetes.io~nfs/uat-nfs-pv</code>）及命令失败后的返回结果（<code>mount.nfs: Connection timed out</code>）</p>
<p>根据 <code>Events</code> 中的信息，查看配置，发现此卷为 NFS 类型的 PV，根据报错排查，此例原因为 NFS 的服务器地址填写错误，更新 PV 配置中的 NFS Server 的地址后，Pod 正常启动。</p>
<h2 id="ContainerCreating"><a href="#ContainerCreating" class="headerlink" title="ContainerCreating"></a>ContainerCreating</h2><h3 id="dbus-connection-closed-by-user"><a href="#dbus-connection-closed-by-user" class="headerlink" title="dbus: connection closed by user"></a>dbus: connection closed by user</h3><p>更新 <code>DaemonSet</code> 类型的 <code>node_exporter</code>，其中一个节点上的 Pod 未创建成功，状态一直保持在 <code>ContainerCreating</code>，检查 Pod 的详细描述信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -n prometheus -o wide</span></span><br><span class="line">NAME                         READY   STATUS              RESTARTS   AGE     IP              NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">node-exporter-glnk5          1/1     Running             0          28h     172.31.8.197    work2       &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-exporter-kzs2r          1/1     Running             1          28h     172.31.100.86   work1       &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-exporter-nxz9v          0/1     ContainerCreating   0          5m30s   172.31.100.38   master      &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-exporter-vpkwt          1/1     Running             0          31m     172.31.100.69   work4       &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-exporter-wft7v          1/1     Running             0          14m     172.31.14.7     work3       &lt;none&gt;           &lt;none&gt;</span><br><span class="line">prometheus-67ccbbd78-zqw9x   1/1     Running             0          46h     10.244.14.75    work2       &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe pod -n prometheus node-exporter-nxz9v</span></span><br><span class="line">Name:         node-exporter-nxz9v</span><br><span class="line">Namespace:    prometheus</span><br><span class="line">Priority:     0</span><br><span class="line"></span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Pending</span><br><span class="line">IP:           172.31.100.38</span><br><span class="line">IPs:</span><br><span class="line">  IP:           172.31.100.38</span><br><span class="line">Controlled By:  DaemonSet/node-exporter</span><br><span class="line">Containers:</span><br><span class="line">  node-exporter:</span><br><span class="line">    Container ID:  </span><br><span class="line">    Image:         prom/node-exporter</span><br><span class="line">    Image ID:      </span><br><span class="line">    Port:          9100/TCP</span><br><span class="line">    Host Port:     9100/TCP</span><br><span class="line">    Args:</span><br><span class="line">      --path.procfs</span><br><span class="line">      /host/proc</span><br><span class="line">      --path.sysfs</span><br><span class="line">      /host/sys</span><br><span class="line">      --collector.disable-defaults</span><br><span class="line">      --collector.cpu</span><br><span class="line">      --collector.cpufreq</span><br><span class="line">      --collector.meminfo</span><br><span class="line">      --collector.diskstats</span><br><span class="line">      --collector.filesystem</span><br><span class="line">      --collector.filefd</span><br><span class="line">      --collector.loadavg</span><br><span class="line">      --collector.netdev</span><br><span class="line">      --collector.netstat</span><br><span class="line">      --collector.nfs</span><br><span class="line">      --collector.os</span><br><span class="line">      --collector.stat</span><br><span class="line">      --collector.time</span><br><span class="line">      --collector.udp_queues</span><br><span class="line">      --collector.uname</span><br><span class="line">      --collector.xfs</span><br><span class="line">      --collector.netclass</span><br><span class="line">      --collector.vmstat</span><br><span class="line">      --collector.systemd</span><br><span class="line">      --collector.systemd.unit-include</span><br><span class="line">      (sshd|crond|iptables|systemd-journald|kubelet|containerd).service</span><br><span class="line">    State:          Waiting</span><br><span class="line">      Reason:       ContainerCreating</span><br><span class="line">    Ready:          False</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">Events:</span><br><span class="line">  Type     Reason                    Age                  From               Message</span><br><span class="line">  ----     ------                    ----                 ----               -------</span><br><span class="line">  Normal   Scheduled                 5m24s                default-scheduler  Successfully assigned prometheus/node-exporter-nxz9v to master</span><br><span class="line">  Warning  FailedCreatePodContainer  1s (x26 over 5m24s)  kubelet            unable to ensure pod container exists: failed to create container for [kubepods besteffort pode526f19a-57d6-417c-ba5a-fb0f232d31c6] : dbus: connection closed by user</span><br></pre></td></tr></table></figure>
<p>错误信息显示为 <code>unable to ensure pod container exists: failed to create container for [kubepods besteffort pode526f19a-57d6-417c-ba5a-fb0f232d31c6] : dbus: connection closed by user</code></p>
<p>查看 <code>kubelet</code> 日志，显示同样的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -u kubelet</span></span><br><span class="line">master kubelet[1160]: E0707 14:40:55.036424    1160 qos_container_manager_linux.go:328] &quot;Failed to update QoS cgroup configuration&quot; err=&quot;dbus: connection closed by user&quot;</span><br><span class="line">master kubelet[1160]: I0707 14:40:55.036455    1160 qos_container_manager_linux.go:138] &quot;Failed to reserve QoS requests&quot; err=&quot;dbus: connection closed by user&quot;</span><br><span class="line">master kubelet[1160]: E0707 14:41:00.263041    1160 qos_container_manager_linux.go:328] &quot;Failed to update QoS cgroup configuration&quot; err=&quot;dbus: connection closed by user&quot;</span><br><span class="line">master kubelet[1160]: E0707 14:41:00.263152    1160 pod_workers.go:190] &quot;Error syncing pod, skipping&quot; err=&quot;failed to ensure that the pod: 0cdaf660-bb6a-40ee-99ae-21dff3b55411 cgroups exist and are correctly applied: failed to create container for [kubepods besteffort pod0cdaf660-bb6a-40ee-99ae-21dff3b55411] : dbus: connection closed by user&quot; pod=&quot;prometheus/node-exporter-rcd8x&quot; podUID=0cdaf660-bb6a-40ee-99ae-21dff3b55411</span><br></pre></td></tr></table></figure>
<p>根据以上日志信息，问题原因为 <code>kubelet</code> 和系统服务 <code>dbus</code> 通信异常，可以 <strong>通过重启 <code>kubelet</code> 服务</strong> 的方法解决此问题。</p>
<h3 id="“cni0”-already-has-an-IP-address-different-from"><a href="#“cni0”-already-has-an-IP-address-different-from" class="headerlink" title="“cni0” already has an IP address different from"></a>“cni0” already has an IP address different from</h3><p>集群中创建的 POD 状态一直处于 <code>ContainerCreating</code>，检查 Pod 详细信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># kubectl describe pod -n cattle-system cattle-cluster-agent-7d766b5476-hsq45</span><br><span class="line">...</span><br><span class="line">FailedCreatePodSandBox  82s (x4 over 85s)   kubelet            (combined from similar events): Failed to create pod sandbox: rpc error: code = Unknown desc = failed to set up sandbox container &quot;2d58156e838349a79da91e0a6d8bccdec0e62c5f5c9ca6a1c30af6186d6253b1&quot; network for pod &quot;cattle-cluster-agent-7d766b5476-hsq45&quot;: networkPlugin cni failed to set up pod &quot;cattle-cluster-agent-7d766b5476-hsq45_cattle-system&quot; network: failed to delegate add: failed to set bridge addr: &quot;cni0&quot; already has an IP address different from 10.244.2.1/24</span><br></pre></td></tr></table></figure>
<p>关键信息 <code>failed to set bridge addr: &quot;cni0&quot; already has an IP address different from 10.244.2.1/24</code>。</p>
<p>检查节点上的 IP 信息，发现 <code>flannel.1</code> 网段和 <code>cni0</code> 网段不一致。可能因为 <code>flannel</code> 读取的配置错误，<em><strong>重启节点后恢复</strong></em>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># ip add</span><br><span class="line">4: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 8951 qdisc noqueue state UNKNOWN group default </span><br><span class="line">    link/ether b2:b1:12:2d:8c:66 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.244.2.0/32 scope global flannel.1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::b0b1:12ff:fe2d:8c66/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: cni0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 8951 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether ca:88:b1:51:0f:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.244.0.1/24 brd 10.244.2.255 scope global cni0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::c888:b1ff:fe51:f02/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<h2 id="PodInitializing"><a href="#PodInitializing" class="headerlink" title="PodInitializing"></a>PodInitializing</h2><p>新部署的 Pod 状态一直处于 <code>PodInitializing</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># kubectl get pods</span><br><span class="line">ops           ops-admin-5656d7bb64-mpqz5               0/2     PodInitializing   0          2m55s</span><br></pre></td></tr></table></figure>
<p>登陆到 Pod 所在节点，检查 <code>kubelet</code> 服务日志</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># journalctl -f -u kubelet</span><br><span class="line">Sep 11 17:09:19 ops-k8s-admin kubelet[22700]: &#123;&quot;cniVersion&quot;:&quot;0.3.1&quot;,&quot;hairpinMode&quot;:true,&quot;ipMasq&quot;:false,&quot;ipam&quot;:&#123;&quot;ranges&quot;:[[&#123;&quot;subnet&quot;:&quot;10.244.3.0/24&quot;&#125;]],&quot;routes&quot;:[&#123;&quot;dst&quot;:&quot;10.244.0.0/16&quot;&#125;],&quot;type&quot;:&quot;host-local&quot;&#125;,&quot;isDefaultGateway&quot;:true,&quot;isGateway&quot;:true,&quot;mtu&quot;:8951,&quot;name&quot;:&quot;cbr0&quot;,&quot;type&quot;:&quot;bridge&quot;&#125;E0911 17:09:19.245283   22700 kuberuntime_manager.go:864] container &amp;Container&#123;Name:php,Image:54.236.67.117:5000/comm/ops-php:20221205093123-,Command:[],Args:[],WorkingDir:,Ports:[]ContainerPort&#123;ContainerPort&#123;Name:,HostPort:0,ContainerPort:9000,Protocol:TCP,HostIP:,&#125;,&#125;,Env:[]EnvVar&#123;&#125;,Resources:ResourceRequirements&#123;Limits:ResourceList&#123;&#125;,Requests:ResourceList&#123;&#125;,&#125;,VolumeMounts:[]VolumeMount&#123;VolumeMount&#123;Name:wwwroot,ReadOnly:false,MountPath:/home/www,SubPath:,MountPropagation:nil,SubPathExpr:,&#125;,VolumeMount&#123;Name:uploads,ReadOnly:false,MountPath:/home/www/public/uploads,SubPath:,MountPropagation:nil,SubPathExpr:,&#125;,VolumeMount&#123;Name:log-code,ReadOnly:false,MountPath:/home/www/storage/logs,SubPath:,MountPropagation:nil,SubPathExpr:,&#125;,VolumeMount&#123;Name:kube-api-access-z4cxp,ReadOnly:true,MountPath:/var/run/secrets/kubernetes.io/serviceaccount,SubPath:,MountPropagation:nil,SubPathExpr:,&#125;,&#125;,LivenessProbe:nil,ReadinessProbe:nil,Lifecycle:&amp;Lifecycle&#123;PostStart:&amp;Handler&#123;Exec:&amp;ExecAction&#123;Command:[/bin/sh -c php /home/www/artisan command:apollo.sync &gt;&gt; apollo.log;php /home/www/artisan queue:restart],&#125;,HTTPGet:nil,TCPSocket:nil,&#125;,PreStop:nil,&#125;,TerminationMessagePath:/dev/termination-log,ImagePullPolicy:IfNotPresent,SecurityContext:nil,Stdin:false,StdinOnce:false,TTY:false,EnvFrom:[]EnvFromSource&#123;&#125;,TerminationMessagePolicy:File,VolumeDevices:[]VolumeDevice&#123;&#125;,StartupProbe:nil,&#125; start failed in pod ops-admin-5656d7bb64-kvvmx_ops(a44af28c-3a39-439b-97c1-7e78b03ccd91): PostStartHookError: command &#x27;/bin/sh -c php /home/www/artisan command:apollo.sync &gt;&gt; apollo.log;php /home/www/artisan queue:restart&#x27; exited with 137: : Exec lifecycle hook ([/bin/sh -c php /home/www/artisan command:apollo.sync &gt;&gt; apollo.log;php /home/www/artisan queue:restart]) for Container &quot;php&quot; in Pod &quot;ops-admin-5656d7bb64-kvvmx_ops(a44af28c-3a39-439b-97c1-7e78b03ccd91)&quot; failed - error: command &#x27;/bin/sh -c php /home/www/artisan command:apollo.sync &gt;&gt; apollo.log;php /home/www/artisan queue:restart&#x27; exited with 137: , message: &quot;队列延迟启动，因为.env配置不完善，rows=7，等待Apollo获取配置或手动完善</span><br></pre></td></tr></table></figure>
<p>从日志中可以看到关键错误日志信息： <code>start failed in pod ops-admin-5656d7bb64-kvvmx_ops</code>，<code>exited with 137: : Exec lifecycle hook ([/bin/sh -c php /home/www/artisan command:apollo.sync &gt;&gt; apollo.log;php /home/www/artisan queue:restart]) for Container &quot;php&quot; in Pod &quot;ops-admin-5656d7bb64-kvvmx_ops(a44af28c-3a39-439b-97c1-7e78b03ccd91)&quot; failed - error: command &#39;/bin/sh -c php /home/www/artisan command:apollo.sync &gt;&gt; apollo.log;php /home/www/artisan queue:restart&#39; exited with 137</code></p>
<p>由此可以判断 Pod 无法正常启动的原因为 Pod 中的容器中的进程执行错误导致。</p>
<h3 id="Failed-to-update-QoS-cgroup-configuration"><a href="#Failed-to-update-QoS-cgroup-configuration" class="headerlink" title="Failed to update QoS cgroup configuration"></a>Failed to update QoS cgroup configuration</h3><p>集群中某个节点上面的 Pod 状态显示为 <code>Init</code> 或者 <code>PodInitializing</code>，其他节点正常，登陆异常节点，检查 <code>kubelet</code> 服务日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">journalctl -f -u kubelet</span></span><br><span class="line">kubelet[26451]: E1109 13:32:04.385251   26451 qos_container_manager_linux.go:328] &quot;Failed to update QoS cgroup configuration&quot; err=&quot;dbus: connection closed by user&quot;</span><br><span class="line">kubelet[26451]: E1109 13:32:04.385307   26451 pod_workers.go:190] &quot;Error syncing pod, skipping&quot; err=&quot;failed to ensure that the pod: e31980b5-849b-4a95-b93d-983c1df31034 cgroups exist and are correctly applied: failed to create container for [kubepods besteffort pode31980b5-849b-4a95-b93d-983c1df31034] : dbus: connection closed by user&quot; pod=&quot;6fd86565c6-4wn7k&quot; podUID=e31980b5-849b-4a95-b93d-983c1df31034</span><br><span class="line">kubelet[26451]: E1109 13:32:04.385416   26451 pod_workers.go:190] &quot;Error syncing pod, skipping&quot; err=&quot;failed to ensure that the pod: f9e342d5-9f69-41bc-bb5e-df46c37b7bcd cgroups exist and are correctly applied: failed to create container for [kubepods besteffort podf9e342d5-9f69-41bc-bb5e-df46c37b7bcd] : dbus: connection closed by user&quot; pod=&quot;5bfffd564f-sn82t&quot; podUID=f9e342d5-9f69-41bc-bb5e-df46c37b7bcd</span><br><span class="line">kubelet[26451]: E1109 13:32:04.385777   26451 qos_container_manager_linux.go:328] &quot;Failed to update QoS cgroup configuration&quot; err=&quot;dbus: connection closed by user&quot;</span><br><span class="line">kubelet[26451]: E1109 13:32:04.385962   26451 pod_workers.go:190] &quot;Error syncing pod, skipping&quot; err=&quot;failed to ensure that the pod: 541c88a3-cf05-40ce-b0db-80bf07f542b6 cgroups exist and are correctly applied: failed to create container for [kubepods besteffort pod541c88a3-cf05-40ce-b0db-80bf07f542b6] : dbus: connection closed by user&quot; pod=&quot;5994c65989-zkn2w&quot; podUID=541c88a3-cf05-40ce-b0db-80bf07f542b6</span><br><span class="line">kubelet[26451]: E1109 13:32:08.385429   26451 qos_container_manager_linux.go:328] &quot;Failed to update QoS cgroup configuration&quot; err=&quot;dbus: connection closed by user&quot;</span><br><span class="line">kubelet[26451]: E1109 13:32:08.385657   26451 pod_workers.go:190] &quot;Error syncing pod, skipping&quot; err=&quot;failed to ensure that the pod: 255ce122-804c-4bcc-9f12-0a3abce77db5 cgroups exist and are correctly applied: failed to create container for [kubepods besteffort pod255ce122-804c-4bcc-9f12-0a3abce77db5] : dbus: connection closed by user&quot; pod=&quot;67d89cf47f-x4wp7&quot; podUID=255ce122-804c-4bcc-9f12-0a3abce77db5</span><br></pre></td></tr></table></figure>

<p>关键日志 <code>&quot;Failed to update QoS cgroup configuration&quot; err=&quot;dbus: connection closed by user&quot;</code>，根据此信息，可能是因为要与 DBus 服务通信更新容器的 QoS cgroup 配置失败。具体来说，<code>kubelet</code> 在尝试更新容器的 QoS cgroup 配置时遇到了 <code>dbus: connection closed by user</code> 错误，并且无法正确创建容器。</p>
<p><strong>这种情况可能是由于系统上的 DBus 服务异常导致的</strong>。本示例中在先后重启了 <code>dbus</code> 服务和 <code>kubelet</code> 服务后问题恢复。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart dbus</span><br><span class="line"></span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure>

<h2 id="集群中-Pod-状态为-Pending"><a href="#集群中-Pod-状态为-Pending" class="headerlink" title="集群中 Pod 状态为 Pending"></a>集群中 Pod 状态为 Pending</h2><p>Kubernetes 集群节点信息如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME                STATUS   ROLES           AGE    VERSION</span><br><span class="line">test-k8s-master1   Ready    control-plane   366d   v1.24.7</span><br><span class="line">test-k8s-master2   Ready    control-plane   366d   v1.24.7</span><br><span class="line">test-k8s-master3   Ready    control-plane   366d   v1.24.7</span><br><span class="line">test-k8s-worker1   Ready    &lt;none&gt;          366d   v1.24.7</span><br><span class="line">test-k8s-worker2   Ready    &lt;none&gt;          366d   v1.24.7</span><br></pre></td></tr></table></figure>
<p>集群中 coredns 状态处于 Pending。通常，<strong>Pod 处于 Pending 状态意味着 Kubernetes 调度程序未能将 Pod 分配给任何节点</strong>。查询 Pod 状态如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pods -n kube-system -o wide</span></span><br><span class="line">NAME                                  READY   STATUS    RESTARTS      AGE   IP              NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-6d4b75cb6d-7np4c              0/1     Pending   0             68m   &lt;none&gt;          &lt;none&gt;        &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-6d4b75cb6d-ckl6f              0/1     Pending   0             68m   &lt;none&gt;          &lt;none&gt;        &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-k8s-master1                      1/1     Running   1 (65d ago)   68m   172.31.26.116   k8s-master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-k8s-master2                      1/1     Running   0             68m   172.31.19.164   k8s-master2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-k8s-master3                      1/1     Running   0             68m   172.31.21.3     k8s-master3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-apiserver-k8s-master1            1/1     Running   2 (65d ago)   68m   172.31.26.116   k8s-master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-apiserver-k8s-master2            1/1     Running   4 (65d ago)   68m   172.31.19.164   k8s-master2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-apiserver-k8s-master3            1/1     Running   4 (65d ago)   68m   172.31.21.3     k8s-master3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-controller-manager-k8s-master1   1/1     Running   1 (41h ago)   68m   172.31.26.116   k8s-master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-controller-manager-k8s-master2   1/1     Running   0             68m   172.31.19.164   k8s-master2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-controller-manager-k8s-master3   1/1     Running   1 (41h ago)   68m   172.31.21.3     k8s-master3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-84l4v                      0/1     Pending   0             68m   &lt;none&gt;          &lt;none&gt;        &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-pfwd5                      0/1     Pending   0             68m   &lt;none&gt;          &lt;none&gt;        &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-qbzq8                      0/1     Pending   0             68m   &lt;none&gt;          &lt;none&gt;        &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-qfplm                      0/1     Pending   0             68m   &lt;none&gt;          &lt;none&gt;        &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-w4t62                      0/1     Pending   0             68m   &lt;none&gt;          &lt;none&gt;        &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-scheduler-k8s-master1            1/1     Running   0             68m   172.31.26.116   k8s-master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-scheduler-k8s-master2            1/1     Running   0             68m   172.31.19.164   k8s-master2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-scheduler-k8s-master3            1/1     Running   1 (41h ago)   68m   172.31.21.3     k8s-master3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-state-metrics-6d44cbdb56-kv8bm   0/1     Pending   0             68m   &lt;none&gt;          &lt;none&gt;        &lt;none&gt;           &lt;none&gt;</span><br><span class="line">metrics-server-6cd9f9f4cf-rqlzf       0/2     Pending   0             68m   &lt;none&gt;          &lt;none&gt;        &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>
<p>看到除了 <code>kube-controller-manager</code>、<code>kube-scheduler</code>、<code>etcd</code>、<code>kube-apiserver</code> 外，其他 Pod 状态都为 <code>Pending</code>，并且 <code>Node</code> 列显示为 <code>&lt;none&gt;</code>，说明集群未将新创建的 Pod 调度到某个节点上。以 <code>coredns-6d4b75cb6d-7np4c</code> 为例查看其描述信息，<code>Events</code> 中未包含任何事件信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe pod -n kube-system coredns-6d4b75cb6d-7np4c</span></span><br><span class="line">Name:                 coredns-6d4b75cb6d-7np4c</span><br><span class="line">Namespace:            kube-system</span><br><span class="line">Priority:             2000000000</span><br><span class="line">Priority Class Name:  system-cluster-critical</span><br><span class="line">Node:                 &lt;none&gt;</span><br><span class="line">Labels:               k8s-app=kube-dns</span><br><span class="line">                      pod-template-hash=6d4b75cb6d</span><br><span class="line">Annotations:          &lt;none&gt;</span><br><span class="line">Status:               Pending</span><br><span class="line">IP:                   </span><br><span class="line">IPs:                  &lt;none&gt;</span><br><span class="line">Controlled By:        ReplicaSet/coredns-6d4b75cb6d</span><br><span class="line">Containers:</span><br><span class="line">  coredns:</span><br><span class="line">    Image:       k8s.gcr.io/coredns/coredns:v1.8.6</span><br><span class="line">    Ports:       53/UDP, 53/TCP, 9153/TCP</span><br><span class="line">    Host Ports:  0/UDP, 0/TCP, 0/TCP</span><br><span class="line">    Args:</span><br><span class="line">      -conf</span><br><span class="line">      /etc/coredns/Corefile</span><br><span class="line">    Limits:</span><br><span class="line">      memory:  170Mi</span><br><span class="line">    Requests:</span><br><span class="line">      cpu:        100m</span><br><span class="line">      memory:     70Mi</span><br><span class="line">    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5</span><br><span class="line">    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /etc/coredns from config-volume (ro)</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-4hm48 (ro)</span><br><span class="line">Volumes:</span><br><span class="line">  config-volume:</span><br><span class="line">    Type:      ConfigMap (a volume populated by a ConfigMap)</span><br><span class="line">    Name:      coredns</span><br><span class="line">    Optional:  false</span><br><span class="line">  kube-api-access-4hm48:</span><br><span class="line">    Type:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    TokenExpirationSeconds:  3607</span><br><span class="line">    ConfigMapName:           kube-root-ca.crt</span><br><span class="line">    ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">    DownwardAPI:             true</span><br><span class="line">QoS Class:                   Burstable</span><br><span class="line">Node-Selectors:              kubernetes.io/os=linux</span><br><span class="line">Tolerations:                 CriticalAddonsOnly op=Exists</span><br><span class="line">                             node-role.kubernetes.io/control-plane:NoSchedule</span><br><span class="line">                             node-role.kubernetes.io/master:NoSchedule</span><br><span class="line">                             node.kubernetes.io/not-ready:NoExecute op=Exists for 300s</span><br><span class="line">                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s</span><br><span class="line">Events:                      &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>鉴于以上信息，怀疑这可能是集群级别的问题。Pod 调度主要由 <code>kube-scheduler</code> 进行，因此首先查看 <code>kube-scheduler</code> 组件日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl logs -n kube-system kube-scheduler-fm-k8s-c1-master1 | <span class="built_in">tail</span> -n 20</span></span><br><span class="line">reflector.go:138] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Pod: failed to list *v1.Pod: Unauthorized</span><br><span class="line">reflector.go:324] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.PersistentVolumeClaim: Unauthorized</span><br><span class="line">reflector.go:138] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: Unauthorized</span><br><span class="line">leaderelection.go:330] error retrieving resource lock kube-system/kube-scheduler: Unauthorized</span><br><span class="line">reflector.go:324] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.StatefulSet: Unauthorized</span><br><span class="line">reflector.go:138] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: Unauthorized</span><br><span class="line">reflector.go:324] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.ReplicaSet: Unauthorized</span><br><span class="line">reflector.go:138] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicaSet: failed to list *v1.ReplicaSet: Unauthorized</span><br><span class="line">leaderelection.go:330] error retrieving resource lock kube-system/kube-scheduler: Unauthorized</span><br><span class="line">reflector.go:324] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.CSINode: Unauthorized</span><br><span class="line">reflector.go:138] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSINode: failed to list *v1.CSINode: Unauthorized</span><br><span class="line">reflector.go:324] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.StorageClass: Unauthorized</span><br><span class="line">reflector.go:138] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: Unauthorized</span><br><span class="line">leaderelection.go:330] error retrieving resource lock kube-system/kube-scheduler: Unauthorized</span><br><span class="line">leaderelection.go:330] error retrieving resource lock kube-system/kube-scheduler: Unauthorized</span><br><span class="line">reflector.go:324] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.Service: Unauthorized</span><br><span class="line">reflector.go:138] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Service: failed to list *v1.Service: Unauthorized</span><br><span class="line">reflector.go:324] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.PersistentVolume: Unauthorized</span><br><span class="line">reflector.go:138] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: Unauthorized</span><br><span class="line">leaderelection.go:330] error retrieving resource lock kube-system/kube-scheduler: Unauthorized</span><br></pre></td></tr></table></figure>
<p><em><strong>根据日志内容，显示 <code>kube-scheduler</code> 无法获取到集群资源，原因为 <code>Unauthorized</code>。</strong></em></p>
<p>一般 <code>Unauthorized</code> 常见原因可能是因为 RBAC 或者证书。先检查 RBAC，<code>kube-scheduler</code> 默认使用用户 <code>system:kube-scheduler</code>，下面查看用户绑定的 Role 及权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe clusterrole system:kube-scheduler</span></span><br><span class="line">Name:         system:kube-scheduler</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: true</span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources                                  Non-Resource URLs  Resource Names    Verbs</span><br><span class="line">  ---------                                  -----------------  --------------    -----</span><br><span class="line">  events                                     []                 []                [create patch update]</span><br><span class="line">  events.events.k8s.io                       []                 []                [create patch update]</span><br><span class="line">  bindings                                   []                 []                [create]</span><br><span class="line">  endpoints                                  []                 []                [create]</span><br><span class="line">  pods/binding                               []                 []                [create]</span><br><span class="line">  tokenreviews.authentication.k8s.io         []                 []                [create]</span><br><span class="line">  subjectaccessreviews.authorization.k8s.io  []                 []                [create]</span><br><span class="line">  leases.coordination.k8s.io                 []                 []                [create]</span><br><span class="line">  pods                                       []                 []                [delete get list watch]</span><br><span class="line">  namespaces                                 []                 []                [get list watch]</span><br><span class="line">  nodes                                      []                 []                [get list watch]</span><br><span class="line">  persistentvolumeclaims                     []                 []                [get list watch]</span><br><span class="line">  persistentvolumes                          []                 []                [get list watch]</span><br><span class="line">  replicationcontrollers                     []                 []                [get list watch]</span><br><span class="line">  services                                   []                 []                [get list watch]</span><br><span class="line">  replicasets.apps                           []                 []                [get list watch]</span><br><span class="line">  statefulsets.apps                          []                 []                [get list watch]</span><br><span class="line">  replicasets.extensions                     []                 []                [get list watch]</span><br><span class="line">  poddisruptionbudgets.policy                []                 []                [get list watch]</span><br><span class="line">  csidrivers.storage.k8s.io                  []                 []                [get list watch]</span><br><span class="line">  csinodes.storage.k8s.io                    []                 []                [get list watch]</span><br><span class="line">  csistoragecapacities.storage.k8s.io        []                 []                [get list watch]</span><br><span class="line">  endpoints                                  []                 [kube-scheduler]  [get update]</span><br><span class="line">  leases.coordination.k8s.io                 []                 [kube-scheduler]  [get update]</span><br><span class="line">  pods/status                                []                 []                [patch update]</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe clusterrolebinding system:kube-scheduler</span></span><br><span class="line">Name:         system:kube-scheduler</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: true</span><br><span class="line">Role:</span><br><span class="line">  Kind:  ClusterRole</span><br><span class="line">  Name:  system:kube-scheduler</span><br><span class="line">Subjects:</span><br><span class="line">  Kind  Name                   Namespace</span><br><span class="line">  ----  ----                   ---------</span><br><span class="line">  User  system:kube-scheduler</span><br></pre></td></tr></table></figure>
<p>查看 RBAC 权限，并无异常。检查集群证书，集群证书已经更新过，显示正常。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubeadm certs check-expiration</span></span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Dec 07, 2024 06:05 UTC   364d            ca                      no      </span><br><span class="line">apiserver                  Dec 07, 2024 07:17 UTC   364d            ca                      no      </span><br><span class="line">apiserver-etcd-client      Dec 07, 2024 07:15 UTC   364d            etcd-ca                 no      </span><br><span class="line">apiserver-kubelet-client   Dec 07, 2024 07:15 UTC   364d            ca                      no      </span><br><span class="line">controller-manager.conf    Dec 07, 2024 06:05 UTC   364d            ca                      no      </span><br><span class="line">etcd-healthcheck-client    Dec 07, 2024 07:15 UTC   364d            etcd-ca                 no      </span><br><span class="line">etcd-peer                  Dec 07, 2024 07:15 UTC   364d            etcd-ca                 no      </span><br><span class="line">etcd-server                Dec 07, 2024 07:15 UTC   364d            etcd-ca                 no      </span><br><span class="line">front-proxy-client         Dec 07, 2024 07:15 UTC   364d            front-proxy-ca          no      </span><br><span class="line">scheduler.conf             Dec 07, 2024 06:05 UTC   364d            ca                      no      </span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Dec 03, 2032 09:50 UTC   8y              no      </span><br><span class="line">etcd-ca                 Dec 05, 2033 07:15 UTC   9y              no      </span><br><span class="line">front-proxy-ca          Dec 05, 2033 07:15 UTC   9y              no</span><br></pre></td></tr></table></figure>

<p>查看下 <code>kube-apiserver</code> 日志信息，从日志中看到连接 <code>etcd</code> （<code>127.0.0.1:2379</code>）异常，主要为证书问题，并且 <code>kube-apiserver</code> 日志中显示证书并未更新。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clientconn.go:1331] [core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1 &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err: connection error: desc = &quot;transport: authentication handshake failed: remote error: tls: internal error&quot;. Reconnecting...</span><br><span class="line">authentication.go:63] &quot;Unable to authenticate the request&quot; err=&quot;[x509: certificate has expired or is not yet valid: current time 2023-12-08T08:40:26Z is after 2023-12-06T09:58:58Z, verifying certificate SN=4790061324473323615, SKID=, AKID=08:39:2B:D0:14:00:F4:7F:3F:58:26:36:32:BA:F8:0E:0E:B4:D4:83 failed: x509: certificate has expired or is not yet valid: current time 2023-12-08T08:40:26Z is after 2023-12-06T09:58:58Z]&quot;</span><br></pre></td></tr></table></figure>

<p>检查 <code>etcd</code> 日志，日志中显示找不到证书：<code>open /etc/kubernetes/pki/etcd/peer.crt: no such file or directory</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2023-12-08T07:54:23.780Z&quot;,&quot;caller&quot;:&quot;embed/config_logging.go:169&quot;,&quot;msg&quot;:&quot;rejected connection&quot;,&quot;remote-addr&quot;:&quot;172.31.21.3:30426&quot;,&quot;server-name&quot;:&quot;&quot;,&quot;error&quot;:&quot;open /etc/kubernetes/pki/etcd/peer.crt: no such file or directory&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2023-12-08T07:54:24.195Z&quot;,&quot;caller&quot;:&quot;embed/config_logging.go:169&quot;,&quot;msg&quot;:&quot;rejected connection&quot;,&quot;remote-addr&quot;:&quot;172.31.19.164:28650&quot;,&quot;server-name&quot;:&quot;&quot;,&quot;error&quot;:&quot;open /etc/kubernetes/pki/etcd/peer.crt: no such file or directory&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>堆叠（Stack）高可用模式下 <code>etcd</code> 组件启动时会挂载 Master 节点的 <code>/etc/kubernetes/pki/etcd/</code> 目录作为自己的证书文件，具体配置可以查看静态 Pod 的配置 <code>/etc/kubernetes/manifests/</code></p>
<figure class="highlight shell"><figcaption><span>/etc/kubernetes/manifests/etcd.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    component: etcd</span><br><span class="line">    tier: control-plane</span><br><span class="line">  name: etcd</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - etcd</span><br><span class="line">    - --advertise-client-urls=https://172.31.19.164:2379</span><br><span class="line">    - --cert-file=/etc/kubernetes/pki/etcd/server.crt</span><br><span class="line">    - --client-cert-auth=true</span><br><span class="line">    - --data-dir=/var/lib/etcd</span><br><span class="line">    - --experimental-initial-corrupt-check=true</span><br><span class="line">    - --initial-advertise-peer-urls=https://172.31.19.164:2380</span><br><span class="line">    - --initial-cluster=k8s-master1=https://172.31.26.116:2380,k8s-master3=https://172.31.21.3:2380,k8s-master2=https://172.31.19.164:2380</span><br><span class="line">    - --initial-cluster-state=existing</span><br><span class="line">    - --key-file=/etc/kubernetes/pki/etcd/server.key</span><br><span class="line">    - --listen-client-urls=https://127.0.0.1:2379,https://172.31.19.164:2379</span><br><span class="line">    - --listen-metrics-urls=http://0.0.0.0:2381</span><br><span class="line">    - --listen-peer-urls=https://172.31.19.164:2380</span><br><span class="line">    - --name=k8s-master2</span><br><span class="line">    - --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt</span><br><span class="line">    - --peer-client-cert-auth=true</span><br><span class="line">    - --peer-key-file=/etc/kubernetes/pki/etcd/peer.key</span><br><span class="line">    - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line">    - --snapshot-count=10000</span><br><span class="line">    - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line">    image: k8s.gcr.io/etcd:3.5.3-0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /var/lib/etcd</span><br><span class="line">      name: etcd-data</span><br><span class="line">    - mountPath: /etc/kubernetes/pki/etcd</span><br><span class="line">      name: etcd-certs</span><br><span class="line">  hostNetwork: true</span><br><span class="line">  priorityClassName: system-node-critical</span><br><span class="line">  securityContext:</span><br><span class="line">    seccompProfile:</span><br><span class="line">      type: RuntimeDefault</span><br><span class="line">  volumes:</span><br><span class="line">  - hostPath:</span><br><span class="line">      path: /etc/kubernetes/pki/etcd</span><br><span class="line">      type: DirectoryOrCreate</span><br><span class="line">    name: etcd-certs</span><br><span class="line">  - hostPath:</span><br><span class="line">      path: /var/lib/etcd</span><br><span class="line">      type: DirectoryOrCreate</span><br><span class="line">    name: etcd-data</span><br></pre></td></tr></table></figure>

<p>登陆到 <code>etcd</code> 的容器中，检查目录 <code>/etc/kubernetes/pki/etcd</code>，发现下面为空，没有文件。原因未找到，重启系统后挂载正常。</p>
<h1 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h1><h2 id="同一个节点上的-Pod-之间网络不通"><a href="#同一个节点上的-Pod-之间网络不通" class="headerlink" title="同一个节点上的 Pod 之间网络不通"></a>同一个节点上的 Pod 之间网络不通</h2><p><strong>问题现象</strong>：</p>
<p>同一个节点上的 <code>Pod</code> 之间网络不通</p>
<p><strong>排查思路</strong>：</p>
<ul>
<li>检查系统内核配置是否开启转发 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysctl -a | grep net.ipv4.ip_forward</span></span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure></li>
<li>检查 <code>iptables</code> 是否禁止转发，<a href="https://csms.tech/202209121102/#集群中所有计算机之间具有完全的网络连接"><code>iptables</code> 防火墙配置参考</a></li>
<li>为了定位是否为 <code>iptables</code> 影响，开关闭 <code>iptables</code> 再进行测试，如果关闭防火墙后可以通信，可以确定是防火墙规则导致，需要检查防火墙规则。</li>
<li>更深入的排查，可以部署 <a href="https://hub.docker.com/r/antrea/netshoot/tags"><code>netshoot</code> 容器</a> 进行抓包定位，</li>
</ul>
<h2 id="Pod-无法访问到外部-Internet-网络"><a href="#Pod-无法访问到外部-Internet-网络" class="headerlink" title="Pod 无法访问到外部 Internet 网络"></a>Pod 无法访问到外部 Internet 网络</h2><p>某个节点上，Pod 无法外部主机的服务（端口 6603&#x2F;tcp）。分别在 Pod ，节点 <code>cni0</code> 网卡，节点出口网卡 <code>eth0</code> ，目标服务网卡上抓包。此例中 Pod IP 为 <code>10.244.4.173</code>，目标服务的 IP 地址为 <code>50.18.6.225</code></p>
<p>查看 Pod 抓包结果</p>
<p><img src="https://i.csms.tech/img_102.png"></p>
<p>可以看到源 IP 为 Pod 地址，目标为服务 IP 的 <code>6603/tcp</code> 的请求发送后，未收到 TCP 连接建立的响应。查看 节点 <code>cni0</code> 网卡 的抓包</p>
<p><img src="https://i.csms.tech/img_103.png"></p>
<p>可以看到源 IP 为 Pod 地址，目标为服务 IP 的 <code>6603/tcp</code> 的请求发送后，未收到 TCP 连接建立的响应。查看节点出口网卡 <code>eth0</code> 的抓包。</p>
<p><img src="https://i.csms.tech/img_104.png"></p>
<p><strong>此处看到的源 IP 依然是  Pod 的 IP 地址，此处存在问题</strong>。在云主机的场景中，如果数据包以这种结构发送出去，数据包到了 Internet 网关将拒绝它，因为网关 NAT（将 VM 的 IP 转换为公网 IP） 只了解连接到 VM 的 IP 地址。</p>
<p>正常情况下，Pod 的流量到节点的出口网卡之前，是应该经过 <code>iptables</code> 执行源 NAT - <strong>更改数据包源，使数据包看起来来自 VM 而不是 Pod</strong>。有了正确的源 IP，数据包才可以离开 VM 进入 Internet</p>
<p>此种情况下，数据包可以从节点的出口网卡发送出去，但是到了 Internet 网关将会被丢弃，因此目标服务无法接收到请求，查看目标服务器上的抓包，确实未收到来自此 Pod 的请求。</p>
<p>此处的 <strong>源 NAT</strong> 是由 <code>iptables</code>  负责执行，流入节点出口网卡的数据包未被正确的 <strong>源 NAT</strong>，有可能是因为 <code>kube-proxy</code> 维护的网络规则错误，或者因为 <code>iptables</code> 规则配置错误。可以通过重启 <code>kube-proxy</code> （由服务 <code>kubelet</code> 管理）和 <code>iptables</code> 服务尝试恢复。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl restart iptables</span><br></pre></td></tr></table></figure>
<p>本示例中，重启这 2 个服务后，Pod 恢复正常。</p>
<h2 id="Pod-间歇性无法连接外部数据库"><a href="#Pod-间歇性无法连接外部数据库" class="headerlink" title="Pod 间歇性无法连接外部数据库"></a>Pod 间歇性无法连接外部数据库</h2><p>集群中的 Pod 出现连接集群之外的数据库服务超时，且出现频率较高</p>
<p><a href="https://blog.csdn.net/qq_42684642/article/details/105775436">参考文章</a></p>
<h2 id="跨节点-Pod-无法访问"><a href="#跨节点-Pod-无法访问" class="headerlink" title="跨节点 Pod 无法访问"></a>跨节点 Pod 无法访问</h2><h3 id="环境信息-1"><a href="#环境信息-1" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos 7 5.4.242-1</li>
<li>Kubernetes v1.25.4</li>
<li>kubernetes-cni-1.2.0-0</li>
<li>flannel v0.21.4</li>
</ul>
<p>集群中有 1 个 master 节点， 2 个 work 节点，节点状态均正常，master 无法 ping worker1 上面的 Pod，可以 ping 通 worker2 节点上面的 Pod</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes -A -o wide</span></span><br><span class="line">NAME          STATUS   ROLES           AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME</span><br><span class="line">k8s-master1   Ready    control-plane   23h   v1.25.4   192.168.142.10   &lt;none&gt;        CentOS Linux 7 (Core)   5.4.242-1.el7.elrepo.x86_64   docker://20.10.9</span><br><span class="line">k8s-worker1   Ready    &lt;none&gt;          23h   v1.25.4   192.168.142.11   &lt;none&gt;        CentOS Linux 7 (Core)   5.4.242-1.el7.elrepo.x86_64   docker://20.10.9</span><br><span class="line">k8s-worker2   Ready    &lt;none&gt;          22h   v1.25.4   192.168.142.12   &lt;none&gt;        CentOS Linux 7 (Core)   5.4.242-1.el7.elrepo.x86_64   docker://20.10.9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A -o wide</span></span><br><span class="line">NAMESPACE      NAME                                  READY   STATUS    RESTARTS        AGE   IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">default        tet-deployment-fbc96cc5d-hlqkg        1/1     Running   1 (4m17s ago)   28m   10.244.1.4       k8s-worker1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">default        tet-deployment-fbc96cc5d-mcjzg        1/1     Running   0               50m   10.244.2.3       k8s-worker2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping 10.244.1.4</span></span><br><span class="line">PING 10.244.1.4 (10.244.1.4) 56(84) bytes of data.</span><br><span class="line">^C</span><br><span class="line">--- 10.244.1.4 ping statistics ---</span><br><span class="line">2 packets transmitted, 0 received, 100% packet loss, time 1001ms</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping 10.244.2.3</span></span><br><span class="line">PING 10.244.2.3 (10.244.2.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.244.2.3: icmp_seq=1 ttl=63 time=4.27 ms</span><br><span class="line">64 bytes from 10.244.2.3: icmp_seq=2 ttl=63 time=0.468 ms</span><br><span class="line">64 bytes from 10.244.2.3: icmp_seq=3 ttl=63 time=0.443 ms</span><br><span class="line">^C</span><br><span class="line">--- 10.244.2.3 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2056ms</span><br><span class="line">rtt min/avg/max/mdev = 0.443/1.729/4.277/1.801 ms</span><br></pre></td></tr></table></figure>
<p>由此可判断问题大概率出现在 worker1 节点，首先检查 worker1 节点上的 <code>flannel</code> 容器是否正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A -o wide</span></span><br><span class="line">NAMESPACE      NAME                                  READY   STATUS    RESTARTS      AGE    IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">default        tet-deployment-fbc96cc5d-hlqkg        1/1     Running   0             9m8s   10.244.1.4       k8s-worker1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">default        tet-deployment-fbc96cc5d-mcjzg        1/1     Running   0             31m    10.244.2.3       k8s-worker2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel   kube-flannel-ds-d42lm                 1/1     Running   0             22h    192.168.142.11   k8s-worker1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel   kube-flannel-ds-lqp5v                 1/1     Running   0             22h    192.168.142.10   k8s-master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel   kube-flannel-ds-w675f                 1/1     Running   0             70m    192.168.142.12   k8s-worker2   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>
<p>看到 worker1 节点上的 flannel 容器运行正常。在 worker1 节点上检查 <code>flannel</code> 进程及端口信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -anutp</span></span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 127.0.0.1:10248         0.0.0.0:*               LISTEN      1817/kubelet        </span><br><span class="line">tcp        0      0 127.0.0.1:10249         0.0.0.0:*               LISTEN      2224/kube-proxy     </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1039/sshd           </span><br><span class="line">tcp        0      0 192.168.142.11:47468    192.168.142.10:6443     ESTABLISHED 2224/kube-proxy     </span><br><span class="line">tcp        0      0 192.168.142.11:56584    192.168.142.10:6443     ESTABLISHED 1817/kubelet        </span><br><span class="line">tcp        0     44 192.168.142.11:22       192.168.142.1:62099     ESTABLISHED 1108/sshd: root@pts </span><br><span class="line">tcp        0      0 192.168.142.11:40574    10.96.0.1:443           ESTABLISHED 2566/flanneld       </span><br><span class="line">tcp6       0      0 :::34939                :::*                    LISTEN      1433/cri-dockerd    </span><br><span class="line">tcp6       0      0 :::10250                :::*                    LISTEN      1817/kubelet        </span><br><span class="line">tcp6       0      0 :::10256                :::*                    LISTEN      2224/kube-proxy     </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1039/sshd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -elf | grep flannel</span></span><br><span class="line">4 S root       2566   2539  0  80   0 - 353654 futex_ 14:44 ?       00:00:02 /opt/bin/flanneld --ip-masq --kube-subnet-mgr</span><br></pre></td></tr></table></figure>
<p>检查发现 <code>flanneld</code> 进程存在，但是端口未启动，检查 <code>flannel</code> 容器日志输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps -a | grep flannel | grep -v <span class="string">&quot;Exited&quot;</span></span></span><br><span class="line">92fab879c75b   11ae74319a21                 &quot;/opt/bin/flanneld -…&quot;   34 minutes ago      Up 34 minutes                           k8s_kube-flannel_kube-flannel-ds-77bwd_kube-flannel_078dde8c-573b-4db4-939e-d3dd353477f7_1</span><br><span class="line">237a82c1378a   registry.k8s.io/pause:3.6    &quot;/pause&quot;                 34 minutes ago      Up 34 minutes                           k8s_POD_kube-flannel-ds-77bwd_kube-flannel_078dde8c-573b-4db4-939e-d3dd353477f7_1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker logs 92fab879c75b</span></span><br><span class="line">failed to add vxlanRoute</span><br><span class="line"></span><br><span class="line">network is down</span><br></pre></td></tr></table></figure>
<p>关键错误信息 <code>failed to add vxlanRoute</code>, <code>network is down</code>，<a href="https://github.com/flannel-io/flannel/issues/844">参考案例</a>，重启服务器。恢复正常。</p>
<h2 id="coredns-无法解析域名"><a href="#coredns-无法解析域名" class="headerlink" title="coredns 无法解析域名"></a>coredns 无法解析域名</h2><p>Pod 中无法解析域名。</p>
<p>集群相关信息如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get svc -A</span></span><br><span class="line">NAMESPACE     NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">default       kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP                  25h</span><br><span class="line">kube-system   kube-dns     ClusterIP   10.96.0.10   &lt;none&gt;        53/UDP,53/TCP,9153/TCP   25h</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在容器中测试 dns 相关信息，访问外部 IP 和 Kubernetes API Server 的 Service 地址均正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping 8.8.8.8</span></span><br><span class="line">PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=1 ttl=127 time=37.2 ms</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=2 ttl=127 time=36.9 ms</span><br><span class="line">^C</span><br><span class="line">--- 8.8.8.8 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1001ms</span><br><span class="line">rtt min/avg/max/mdev = 36.946/37.085/37.224/0.139 ms</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v 10.96.0.1:443</span></span><br><span class="line">* About to connect() to 10.96.0.1 port 443 (#0)</span><br><span class="line">*   Trying 10.96.0.1...</span><br><span class="line">* Connected to 10.96.0.1 (10.96.0.1) port 443 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: 10.96.0.1:443</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">* HTTP 1.0, assume close after body</span></span><br><span class="line">&lt; HTTP/1.0 400 Bad Request</span><br><span class="line">&lt; </span><br><span class="line">Client sent an HTTP request to an HTTPS server.</span><br><span class="line">* Closing connection 0</span><br></pre></td></tr></table></figure>
<p>容器中的 dns 配置为 <code>kube-dns</code> 的 Service 的 IP，测试其端口，显示 <code>Connection refused</code>。测试解析集群内部域名，结果无法解析。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/resolv.conf</span> </span><br><span class="line">nameserver 10.96.0.10</span><br><span class="line">search default.svc.cluster.local svc.cluster.local cluster.local</span><br><span class="line">options ndots:5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl 10.96.0.10:53</span></span><br><span class="line">curl: (7) Failed connect to 10.96.0.10:53; Connection refused</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping svc.cluster.local</span></span><br><span class="line">ping: svc.cluster.local: Name or service not known</span><br></pre></td></tr></table></figure>
<p>通过以上步骤，大概可以确定，Pod 的网络正常，应该是 <code>kube-dns</code> 出问题，导致 Pod 无法解析域名。</p>
<p>Service 是通过 Endpoint 和后端的具体的 Pod 关联起来向外提供服务，首先检查 <code>kube-dns</code> 的 Service 对应的 Endpoint，看是否正常。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get ep -A</span></span><br><span class="line">NAMESPACE     NAME         ENDPOINTS             AGE</span><br><span class="line">default       kubernetes   192.168.142.10:6443   25h</span><br><span class="line">kube-system   kube-dns                           25h</span><br></pre></td></tr></table></figure>
<p>检查发现，<code>kube-dns</code> 对应的 ENDPOINTS 列表为空。删除 <code>coredns</code> 容器，重新创建。再次检查后，发现 <code>kube-dns</code> 的 Service 对应的 Endpoint 恢复正常。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete pod -n kube-system coredns-565d847f94-bzr62 coredns-565d847f94-vmddh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A</span></span><br><span class="line">NAMESPACE      NAME                                  READY   STATUS    RESTARTS       AGE</span><br><span class="line">default        tet-deployment-fbc96cc5d-hlqkg        1/1     Running   1 (115m ago)   139m</span><br><span class="line">default        tet-deployment-fbc96cc5d-mcjzg        1/1     Running   0              162m</span><br><span class="line">kube-flannel   kube-flannel-ds-77bwd                 1/1     Running   1 (115m ago)   129m</span><br><span class="line">kube-flannel   kube-flannel-ds-lqp5v                 1/1     Running   0              25h</span><br><span class="line">kube-flannel   kube-flannel-ds-w675f                 1/1     Running   0              3h21m</span><br><span class="line">kube-system    coredns-565d847f94-8wmg7              1/1     Running   0              9s</span><br><span class="line">kube-system    coredns-565d847f94-csc9f              0/1     Running   0              9s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get ep -A</span></span><br><span class="line">NAMESPACE     NAME         ENDPOINTS                                     AGE</span><br><span class="line">default       kubernetes   192.168.142.10:6443                           25h</span><br><span class="line">kube-system   kube-dns     10.244.1.7:53,10.244.1.7:53,10.244.1.7:9153   25h</span><br></pre></td></tr></table></figure>

<p>在 Pod 中重新测试解析，结果正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v 10.96.0.10:53</span></span><br><span class="line">* About to connect() to 10.96.0.10 port 53 (#0)</span><br><span class="line">*   Trying 10.96.0.10...</span><br><span class="line">* Connected to 10.96.0.10 (10.96.0.10) port 53 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: 10.96.0.10:53</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">* Empty reply from server</span></span><br><span class="line">* Connection #0 to host 10.96.0.10 left intact</span><br><span class="line">curl: (52) Empty reply from server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping qq.com</span></span><br><span class="line">PING qq.com (61.129.7.47) 56(84) bytes of data.</span><br><span class="line">64 bytes from 61.129.7.47 (61.129.7.47): icmp_seq=1 ttl=127 time=308 ms</span><br><span class="line">64 bytes from 61.129.7.47 (61.129.7.47): icmp_seq=2 ttl=127 time=312 ms</span><br><span class="line">64 bytes from 61.129.7.47 (61.129.7.47): icmp_seq=3 ttl=127 time=312 ms</span><br><span class="line">^C</span><br><span class="line">--- qq.com ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2001ms</span><br><span class="line">rtt min/avg/max/mdev = 308.493/310.873/312.106/1.743 ms</span><br></pre></td></tr></table></figure>

<h3 id="dns-文件定位参考文档"><a href="#dns-文件定位参考文档" class="headerlink" title="dns 文件定位参考文档"></a>dns 文件定位参考文档</h3><p><a href="https://www.gylinux.cn/4299.html">故障排查：Kubernetes 中 Pod 无法正常解析域名</a></p>
<h1 id="集群状态异常"><a href="#集群状态异常" class="headerlink" title="集群状态异常"></a>集群状态异常</h1><h2 id="节点状态-NotReady"><a href="#节点状态-NotReady" class="headerlink" title="节点状态 NotReady"></a>节点状态 NotReady</h2><h3 id="PLEG-is-not-healthy-pleg-was-last-seen-active-10m13-755045415s-ago"><a href="#PLEG-is-not-healthy-pleg-was-last-seen-active-10m13-755045415s-ago" class="headerlink" title="PLEG is not healthy: pleg was last seen active 10m13.755045415s ago"></a>PLEG is not healthy: pleg was last seen active 10m13.755045415s ago</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME          STATUS     ROLES           AGE   VERSION</span><br><span class="line">k8s-master1   Ready      control-plane   14d   v1.24.7</span><br><span class="line">k8s-master2   Ready      control-plane   14d   v1.24.7</span><br><span class="line">k8s-master3   Ready      control-plane   14d   v1.24.7</span><br><span class="line">k8s-work1     NotReady   &lt;none&gt;          14d   v1.24.7</span><br><span class="line">k8s-work2     Ready      &lt;none&gt;          14d   v1.24.7</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看节点详细信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe node k8s-work1</span></span><br><span class="line">...</span><br><span class="line">Conditions:</span><br><span class="line">  Ready                False   Tue, 15 Nov 2022 10:14:49 +0800   Tue, 15 Nov 2022 10:07:39 +0800   KubeletNotReady              PLEG is not healthy: pleg was last seen active 10m13.755045415s ago; threshold is 3m0s</span><br></pre></td></tr></table></figure>

<h4 id="异常原因"><a href="#异常原因" class="headerlink" title="异常原因"></a>异常原因</h4><p>集群因为此原因（<code>PLEG is not healthy: pleg was last seen active ***h**m***s ago;</code>）状态变为 <code>NotReady</code>，通常是因为节点超负载。</p>
<h3 id="container-runtime-is-down-container-runtime-not-ready"><a href="#container-runtime-is-down-container-runtime-not-ready" class="headerlink" title="container runtime is down, container runtime not ready"></a>container runtime is down, container runtime not ready</h3><p><strong>排查过程</strong>：</p>
<p>检查集群中的 Pod 分布情况时，发现某一节点上几乎所有的 Pod 都被调度去了其他节点，当前检查时此节点的状态已经是 <code>Ready</code>，针对此情况进行分析。</p>
<ol>
<li><p>确定问题发生的大概时间段</p>
<p> 根据 Pod 在其他节点上面被启动的时间，可以大概确定节点异常的时间，根据此时间段可以缩小排查的时间范围。此示例中问题发生的时间大概在 <code>Nov 25 04:49:00</code> 前后。</p>
</li>
<li><p>检查 <code>kubelet</code> 日志</p>
<p> 根据已经推断出的时间段，在 <strong>问题节点</strong> 上，检查 <code>kubelet</code> 日志</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ journalctl -u kubelet --since &quot;2022-11-25 4:40&quot; | grep -v -e &quot;failed to get fsstats&quot; -e &quot;invalid bearer token&quot; | more</span><br><span class="line">Nov 25 04:49:00 k8s-work2 kubelet[17604]: E1125 04:49:00.153132   17604 generic.go:205] &quot;GenericPLEG: Unable to retrieve pods&quot; err=&quot;rpc error: code = Unknown desc = operation timeout: context deadline exceeded&quot;</span><br><span class="line">Nov 25 04:49:00 k8s-work2 kubelet[17604]: E1125 04:49:00.375524   17604 remote_runtime.go:356] &quot;ListPodSandbox with filter from runtime service failed&quot; err=&quot;rpc error: code = Unknown desc = operation timeout: context deadline exceeded&quot; filter=&quot;&amp;PodSandboxFilter&#123;Id:,State:&amp;PodSandboxStateValue&#123;State:SANDBOX_READY,&#125;,LabelSelector:map[string]string&#123;&#125;,&#125;&quot;</span><br><span class="line">Nov 25 04:49:00 k8s-work2 kubelet[17604]: E1125 04:49:00.375559   17604 kuberuntime_sandbox.go:292] &quot;Failed to list pod sandboxes&quot; err=&quot;rpc error: code = Unknown desc = operation timeout: context deadline exceeded&quot;</span><br><span class="line">Nov 25 04:49:00 k8s-work2 kubelet[17604]: E1125 04:49:00.375578   17604 kubelet_pods.go:1153] &quot;Error listing containers&quot; err=&quot;rpc error: code = Unknown desc = operation timeout: context deadline exceeded&quot;</span><br><span class="line">Nov 25 04:49:00 k8s-work2 kubelet[17604]: E1125 04:49:00.375589   17604 kubelet.go:2162] &quot;Failed cleaning pods&quot; err=&quot;rpc error: code = Unknown desc = operation timeout: context deadline exceeded&quot;</span><br><span class="line">Nov 25 04:49:00 k8s-work2 kubelet[17604]: E1125 04:49:00.375603   17604 kubelet.go:2166] &quot;Housekeeping took longer than 15s&quot; err=&quot;housekeeping took too long&quot; seconds=119.005290203</span><br><span class="line">Nov 25 04:49:00 k8s-work2 kubelet[17604]: E1125 04:49:00.476011   17604 kubelet.go:2010] &quot;Skipping pod synchronization&quot; err=&quot;container runtime is down&quot;</span><br><span class="line">Nov 25 04:49:00 k8s-work2 kubelet[17604]: E1125 04:49:00.507861   17604 remote_runtime.go:680] &quot;ExecSync cmd from runtime service failed&quot; err=&quot;rpc error: code = Unknown desc = operation timeout: context deadline exceeded&quot; containerID=&quot;5cd867ce2a52311e79a20a113c7cedd2a233b3a52b556065b479f2dd11a14eac&quot; cmd=[wget --no-check-certificate --spider -q http://localhost:8088/health]</span><br><span class="line">Nov 25 04:49:00 k8s-work2 kubelet[17604]: E1125 04:49:00.676271   17604 kubelet.go:2010] &quot;Skipping pod synchronization&quot; err=&quot;container runtime is down&quot;</span><br><span class="line"></span><br><span class="line">Nov 25 04:49:01 k8s-work2 kubelet[17604]: E1125 04:49:01.076918   17604 kubelet.go:2010] &quot;Skipping pod synchronization&quot; err=&quot;container runtime is down&quot;</span><br><span class="line">Nov 25 04:49:01 k8s-work2 kubelet[17604]: E1125 04:49:01.178942   17604 kubelet.go:2359] &quot;Container runtime not ready&quot; runtimeReady=&quot;RuntimeReady=false reason:DockerDaemonNotReady message:docker: failed to get docker version: operation timeout: context deadline exceeded&quot;</span><br><span class="line">Nov 25 04:49:01 k8s-work2 kubelet[17604]: E1125 04:49:01.878007   17604 kubelet.go:2010] &quot;Skipping pod synchronization&quot; err=&quot;[container runtime is down, container runtime not ready: RuntimeReady=false reason:DockerDaemonNotReady message:docker: failed to get docker version: operation timeout: context deadline exceeded]&quot;</span><br><span class="line">Nov 25 04:49:03 k8s-work2 kubelet[17604]: E1125 04:49:03.329558   17604 remote_runtime.go:536] &quot;ListContainers with filter from runtime service failed&quot; err=&quot;rpc error: code = Unknown desc = operation timeout: context deadline exceeded&quot; filter=&quot;&amp;ContainerFilter&#123;Id:,State:nil,PodSandboxId:,LabelSelector:map[string]string&#123;&#125;,&#125;&quot;</span><br><span class="line">Nov 25 04:49:03 k8s-work2 kubelet[17604]: E1125 04:49:03.329585   17604 container_log_manager.go:183] &quot;Failed to rotate container logs&quot; err=&quot;failed to list containers: rpc error: code = Unknown desc = operation timeout: context deadline exceeded&quot;</span><br><span class="line"></span><br><span class="line">Nov 25 04:49:09 k8s-work2 kubelet[17604]: E1125 04:49:09.485356   17604 remote_runtime.go:168] &quot;Version from runtime service failed&quot; err=&quot;rpc error: code = Unknown desc = failed to get docker version: operation timeout: context deadline exceeded&quot;</span><br><span class="line">Nov 25 04:49:09 k8s-work2 kubelet[17604]: I1125 04:49:09.485486   17604 setters.go:532] &quot;Node became not ready&quot; node=&quot;k8s-work2&quot; condition=&#123;Type:Ready Status:False LastHeartbeatTime:2022-11-25 04:49:09.485445614 +0800 CST m=+227600.229789769 LastTransitionTime:2022-11-25 04:49:09.485445614 +0800 CST m=+227600.229789769 Reason:KubeletNotReady Message:[container runtime is down, container runtime not ready: RuntimeReady=false reason:DockerDaemonNotReady message:docker: failed to get docker version: operation timeout: context deadline exceeded]&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p> 从以上日志中，可以看到关键的日志信息：</p>
<p> <code>&quot;Skipping pod synchronization&quot; err=&quot;container runtime is down&quot;</code></p>
<p> <code>setters.go:532] &quot;Node became not ready&quot;</code>，    <code>Reason:KubeletNotReady Message:[container runtime is down, container runtime not ready: RuntimeReady=false reason:DockerDaemonNotReady message:docker: failed to get docker version: operation timeout: context deadline exceeded]&#125;</code></p>
<p> 从以上日志信息可以看出，节点状态变为了 <code>not ready</code>，原因为 <code>container runtime is down, container runtime not ready</code>，本示例中 <code>container runtime</code> 为 <code>docker</code></p>
</li>
<li><p>检查 docker 服务日志</p>
<p> 根据上面的日志时间，检查 docker 服务的日志</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">journalctl -u docker --since &quot;2022-11-25 04:0&quot; | more</span><br><span class="line">Nov 25 04:49:06 k8s-work2 dockerd[15611]: http: superfluous response.WriteHeader call from github.com/docker/docker/api/server/httputils.WriteJSON (httputils_write_json.go:11)</span><br><span class="line">Nov 25 04:49:06 k8s-work2 dockerd[15611]: time=&quot;2022-11-25T04:49:06.410127201+08:00&quot; level=error msg=&quot;Handler for GET /v1.40/containers/5cd867ce2a52311e79a20a113c7cedd2a233b3a52b556065b479f2dd11a14eac/json returned error: write unix /var/run/docker.sock-&gt;@: write: broken pipe&quot;</span><br><span class="line">Nov 25 04:49:06 k8s-work2 dockerd[15611]: time=&quot;2022-11-25T04:49:06.410342223+08:00&quot; level=error msg=&quot;Handler for GET /v1.40/containers/41e0dfe97b87c2b8ae941653fa8adbf93bf9358d91e967646e4549ab71b2f004/json returned error: write unix /var/run/docker.sock-&gt;@: write: broken pipe&quot;</span><br><span class="line">Nov 25 04:49:06 k8s-work2 dockerd[15611]: http: superfluous response.WriteHeader call from github.com/docker/docker/api/server/httputils.WriteJSON (httputils_write_json.go:11)</span><br><span class="line">Nov 25 04:49:06 k8s-work2 dockerd[15611]: time=&quot;2022-11-25T04:49:06.414773158+08:00&quot; level=error msg=&quot;Handler for GET /v1.40/containers/json returned error: write unix /var/run/docker.sock-&gt;@: write: broken pipe&quot;</span><br><span class="line">Nov 25 04:49:06 k8s-work2 dockerd[15611]: http: superfluous response.WriteHeader call from github.com/docker/docker/api/server/httputils.WriteJSON (httputils_write_json.go:11)</span><br><span class="line">Nov 25 04:49:06 k8s-work2 dockerd[15611]: time=&quot;2022-11-25T04:49:06.416474238+08:00&quot; level=error msg=&quot;Handler for GET /v1.40/containers/json returned error: write unix /var/run/docker.sock-&gt;@: write: broken pipe&quot;</span><br><span class="line">Nov 25 04:49:06 k8s-work2 dockerd[15611]: http: superfluous response.WriteHeader call from github.com/docker/docker/api/server/httputils.WriteJSON (httputils_write_json.go:11)</span><br><span class="line">Nov 25 04:49:06 k8s-work2 dockerd[15611]: time=&quot;2022-11-25T04:49:06.422844592+08:00&quot; level=error msg=&quot;Handler for GET /v1.40/containers/json returned error: write unix /var/run/docker.sock-&gt;@: write: broken pipe&quot;</span><br></pre></td></tr></table></figure>
<p>根据日志可以看到关键日志 <code>write unix /var/run/docker.sock-&gt;@: write: broken pipe</code></p>
</li>
<li><p>检查 messages 日志</p>
<p> 查看对应时间段的系统日志</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nov 25 04:49:00 k8s-work2 kubelet: E1125 04:49:00.153089   17604 remote_runtime.go:356] &quot;ListPodSandbox with filter from runtime service failed&quot; err=&quot;rpc error: code = Unknown desc = operation timeout: context deadline exceeded&quot; filter=&quot;nil&quot;</span><br><span class="line">Nov 25 04:49:00 k8s-work2 kubelet: E1125 04:49:00.375603   17604 kubelet.go:2166] &quot;Housekeeping took longer than 15s&quot; err=&quot;housekeeping took too long&quot; seconds=119.005290203</span><br><span class="line">Nov 25 04:49:00 k8s-work2 kubelet: E1125 04:49:00.375614   17604 kubelet.go:2010] &quot;Skipping pod synchronization&quot; err=&quot;container runtime is down&quot;</span><br><span class="line">Nov 25 04:49:01 k8s-work2 kubelet: E1125 04:49:01.178942   17604 kubelet.go:2359] &quot;Container runtime not ready&quot; runtimeReady=&quot;RuntimeReady=false reason:DockerDaemonNotReady message:docker: failed to get docker version: operation timeout: context deadline exceeded&quot;</span><br><span class="line">Nov 25 04:49:01 k8s-work2 kubelet: E1125 04:49:01.878007   17604 kubelet.go:2010] &quot;Skipping pod synchronization&quot; err=&quot;[container runtime is down, container runtime not ready: RuntimeReady=false reason:DockerDaemonNotReady message:docker: failed to get docker version: operation timeout: context deadline exceeded]&quot;</span><br><span class="line">Nov 25 04:49:06 k8s-work2 dockerd: time=&quot;2022-11-25T04:49:06.410127201+08:00&quot; level=error msg=&quot;Handler for GET /v1.40/containers/5cd867ce2a52311e79a20a113c7cedd2a233b3a52b556065b479f2dd11a14eac/json returned error: write unix /var/run/docker.sock-&gt;@: write: broken pipe&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>根据 <code>kubelet</code> 服务日志，节点 <code>Not Ready</code> 的原因为 <code>docker down</code>，根据 docker 服务日志，docker 存在异常，但是此时执行 <code>docker</code> 相关命令，未发现异常。此问题多次出现，<code>docker engine</code> 版本为 <code>19.03.15-3</code>，之后尝试将 <code>docker engine</code> 版本升级为最新版本 <code>20.10.9</code>，问题未在出现。<a href="https://csms.tech/202208041317/#docker-ce-19-03-15-升级到-docker-ce-20-10-9"><code>docker engine</code> 升级参考</a> </p>
<h3 id="“Container-runtime-network-not-ready”-networkReady-x3D-”NetworkReady-x3D-false-reason-NetworkPluginNotReady-message-docker-network-plugin-is-not-ready-cni-config-uninitialized”"><a href="#“Container-runtime-network-not-ready”-networkReady-x3D-”NetworkReady-x3D-false-reason-NetworkPluginNotReady-message-docker-network-plugin-is-not-ready-cni-config-uninitialized”" class="headerlink" title="“Container runtime network not ready” networkReady&#x3D;”NetworkReady&#x3D;false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized”"></a>“Container runtime network not ready” networkReady&#x3D;”NetworkReady&#x3D;false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized”</h3><h4 id="环境信息-2"><a href="#环境信息-2" class="headerlink" title="环境信息"></a>环境信息</h4><ul>
<li>Kubernetes v1.21.2</li>
</ul>
<p>新增节点后，节点状态为 <code>NotReady</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME            STATUS     ROLES                  AGE     VERSION</span><br><span class="line">work2           Ready      &lt;none&gt;                 17d     v1.21.2</span><br><span class="line">work3           Ready      &lt;none&gt;                 17d     v1.21.2</span><br><span class="line">work4           Ready      &lt;none&gt;                 10d     v1.21.2</span><br><span class="line">work5           NotReady   &lt;none&gt;                 8m36s   v1.21.2</span><br><span class="line">master          Ready      control-plane,master   191d    v1.21.2</span><br></pre></td></tr></table></figure>
<p>Master 上查看节点的描述信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe node k8s-api-work5</span> </span><br><span class="line">Name:               work5</span><br><span class="line">Roles:              &lt;none&gt;</span><br><span class="line">Labels:             beta.kubernetes.io/arch=amd64</span><br><span class="line">                    beta.kubernetes.io/os=linux</span><br><span class="line">                    kubernetes.io/arch=amd64</span><br><span class="line">                    kubernetes.io/hostname=work5</span><br><span class="line">                    kubernetes.io/os=linux</span><br><span class="line"></span><br><span class="line">Taints:             node.kubernetes.io/not-ready:NoExecute</span><br><span class="line">                    node.kubernetes.io/not-ready:NoSchedule</span><br><span class="line">Unschedulable:      false</span><br><span class="line">Lease:</span><br><span class="line">  HolderIdentity:  work5</span><br><span class="line">  AcquireTime:     &lt;unset&gt;</span><br><span class="line">  RenewTime:       Wed, 05 Apr 2023 13:50:16 +0800</span><br><span class="line">Conditions:</span><br><span class="line">  Type                 Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message</span><br><span class="line">  ----                 ------  -----------------                 ------------------                ------                       -------</span><br><span class="line">  NetworkUnavailable   False   Wed, 05 Apr 2023 13:48:19 +0800   Wed, 05 Apr 2023 13:48:19 +0800   FlannelIsUp                  Flannel is running on this node</span><br><span class="line">  MemoryPressure       False   Wed, 05 Apr 2023 13:48:33 +0800   Wed, 05 Apr 2023 13:48:03 +0800   KubeletHasSufficientMemory   kubelet has sufficient memory available</span><br><span class="line">  DiskPressure         False   Wed, 05 Apr 2023 13:48:33 +0800   Wed, 05 Apr 2023 13:48:03 +0800   KubeletHasNoDiskPressure     kubelet has no disk pressure</span><br><span class="line">  PIDPressure          False   Wed, 05 Apr 2023 13:48:33 +0800   Wed, 05 Apr 2023 13:48:03 +0800   KubeletHasSufficientPID      kubelet has sufficient PID available</span><br><span class="line">  Ready                False   Wed, 05 Apr 2023 13:48:33 +0800   Wed, 05 Apr 2023 13:48:03 +0800   KubeletNotReady              container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized</span><br></pre></td></tr></table></figure>
<p>看到异常原因为 <code>container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized</code></p>
<p>在 <code>work5</code> 节点上查看 <code>kubelet</code> 日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -u kubelet -f</span></span><br><span class="line">Apr 05 13:52:03 work5 kubelet[19520]: E0405 13:52:03.952395   19520 kubelet.go:2211] &quot;Container runtime network not ready&quot; networkReady=&quot;NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized&quot;</span><br><span class="line"></span><br><span class="line">Apr 05 13:52:08 work5 kubelet[19520]: I0405 13:52:08.498481   19520 cni.go:204] &quot;Error validating CNI config list&quot; configList=&quot;&#123;\n  \&quot;name\&quot;: \&quot;cbr0\&quot;,\n  \&quot;cniVersion\&quot;: \&quot;0.3.1\&quot;,\n  \&quot;plugins\&quot;: [\n    &#123;\n      \&quot;type\&quot;: \&quot;flannel\&quot;,\n      \&quot;delegate\&quot;: &#123;\n        \&quot;hairpinMode\&quot;: true,\n        \&quot;isDefaultGateway\&quot;: true\n      &#125;\n    &#125;,\n    &#123;\n      \&quot;type\&quot;: \&quot;portmap\&quot;,\n      \&quot;capabilities\&quot;: &#123;\n        \&quot;portMappings\&quot;: true\n      &#125;\n    &#125;\n  ]\n&#125;\n&quot; err=&quot;[failed to find plugin \&quot;flannel\&quot; in path [/opt/cni/bin]]&quot;</span><br><span class="line">Apr 05 13:52:08 work5 kubelet[19520]: I0405 13:52:08.498501   19520 cni.go:239] &quot;Unable to update cni config&quot; err=&quot;no valid networks found in /etc/cni/net.d&quot;</span><br></pre></td></tr></table></figure>

<p>在 Master 节点上查看异常节点上的 <code>kube-flannel</code> POD 状态正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -o wide -n kube-system</span></span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE    IP              NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-558bd4d5db-6wf7m         1/1     Running   0          18d    10.244.4.132    admin           &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-558bd4d5db-zh9mw         1/1     Running   0          18d    10.244.4.144    admin           &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-master                      1/1     Running   1          191d   192.168.100.38   master          &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-apiserver-master            1/1     Running   1          191d   192.168.100.38   master          &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-controller-manager-master   1/1     Running   1          191d   192.168.100.38   master          &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-2lg9x            1/1     Running   0          18d    192.168.100.38   master          &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-5fpn8            1/1     Running   0          10d    192.168.100.69   work4       	  &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-7ln98            1/1     Running   0          30m    192.168.100.59   work5   		  &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-kvhhq            1/1     Running   0          17d    192.168.14.7     work3           &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-vz4th            1/1     Running   0          17d    192.168.8.197    work2           &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-xr84k            1/1     Running   0          18d    192.168.100.86   admin           &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-9b7kt                 1/1     Running   0          30m    192.168.100.59   work5           &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-c6ggk                 1/1     Running   1          191d   192.168.100.38   master          &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-gtlqt                 1/1     Running   0          17d    192.168.14.7     work3           &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-n6s7p                 1/1     Running   0          10d    192.168.100.69   work4           &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-p8m9d                 1/1     Running   0          17d    192.168.8.197    work2           &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-qvks4                 1/1     Running   2          191d   192.168.100.86   admin           &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-scheduler-master            1/1     Running   1          191d   192.168.100.38   master          &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>
<p>接着检查新增节点上提供 <code>flannel</code> 组件的安装包，及相关目录中的文件是否存在异常 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -qa | grep kubernetes</span></span><br><span class="line">kubernetes-cni-1.2.0-0.x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> /opt/cni/bin/</span></span><br><span class="line">bandwidth  dhcp   firewall     host-local  loopback  portmap  sbr     tuning  vrf</span><br><span class="line">bridge     dummy  host-device  ipvlan      macvlan   ptp      static  vlan</span><br></pre></td></tr></table></figure>

<p>比对其他已存在的正常节点上的 <code>kubernetes-cni</code> 信息，发现其他节点上的 <code>kubernetes-cni</code> 版本为 <code>kubernetes-cni-0.8.7-0</code>，怀疑为版本问题导致，卸载问题节点上的 <code>kubernetes-cni-1.2.0-0</code>，重新安装 <code>kubernetes-cni-0.8.7-0</code>。卸载 <code>kubernetes-cni</code> 会导致之前安装的 <code>kubeadm</code> 和 <code>kubelet</code> 被卸载，也需要重新安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum remove kubernetes-cni-1.2.0-0</span></span><br><span class="line">...</span><br><span class="line">Removed:</span><br><span class="line">  kubernetes-cni.x86_64 0:1.2.0-0                                                                                                      </span><br><span class="line"></span><br><span class="line">Dependency Removed:</span><br><span class="line">  kubeadm.x86_64 0:1.21.2-0                                          kubelet.x86_64 0:1.21.2-0</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install -y kubelet-1.21.2 kubeadm-1.21.2 kubectl-1.21.2 kubernetes-cni-0.8.7-0</span></span><br></pre></td></tr></table></figure>

<p>安装 <code>kubernetes-cni-0.8.7-0</code> 版本后，再次查看节点状态，变为 <code>Ready</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME            STATUS     ROLES                  AGE     VERSION</span><br><span class="line">work2           Ready      &lt;none&gt;                 17d     v1.21.2</span><br><span class="line">work3           Ready      &lt;none&gt;                 17d     v1.21.2</span><br><span class="line">work4           Ready      &lt;none&gt;                 10d     v1.21.2</span><br><span class="line">work5           Ready      &lt;none&gt;                 8m36s   v1.21.2</span><br><span class="line">master          Ready      control-plane,master   191d    v1.21.2</span><br></pre></td></tr></table></figure>

<h3 id="Container-runtime-network-not-ready”-networkReady-x3D-”NetworkReady-x3D-false-reason-NetworkPluginNotReady-message-docker-network-plugin-is-not-ready-cni-config-uninitialized”"><a href="#Container-runtime-network-not-ready”-networkReady-x3D-”NetworkReady-x3D-false-reason-NetworkPluginNotReady-message-docker-network-plugin-is-not-ready-cni-config-uninitialized”" class="headerlink" title="Container runtime network not ready” networkReady&#x3D;”NetworkReady&#x3D;false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized”"></a>Container runtime network not ready” networkReady&#x3D;”NetworkReady&#x3D;false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized”</h3><p>节点状态 NotReady，检查节点上的 kubelet日志，显示 <code>Container runtime network not ready&quot; networkReady=&quot;NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized&quot;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes -o wide</span></span><br><span class="line">NAME          STATUS     ROLES           AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME</span><br><span class="line">k8s-master1   Ready      control-plane   35m   v1.25.4   192.168.142.10   &lt;none&gt;        CentOS Linux 7 (Core)   5.4.242-1.el7.elrepo.x86_64   docker://20.10.9</span><br><span class="line">k8s-worker1   Ready      &lt;none&gt;          30m   v1.25.4   192.168.142.11   &lt;none&gt;        CentOS Linux 7 (Core)   5.4.242-1.el7.elrepo.x86_64   docker://20.10.9</span><br><span class="line">k8s-worker2   NotReady   &lt;none&gt;          21m   v1.25.4   192.168.142.12   &lt;none&gt;        CentOS Linux 7 (Core)   5.4.242-1.el7.elrepo.x86_64   docker://20.10.9</span><br></pre></td></tr></table></figure>

<p>检查发现节点上没有 CNI 配置文件 <code>/etc/cni/net.d/10-flannel.conflist</code>，拷贝正常节点上的配置到异常节点后，状态恢复正常。</p>
<h2 id="api-server-启动失败"><a href="#api-server-启动失败" class="headerlink" title="api-server 启动失败"></a>api-server 启动失败</h2><h3 id="No-such-file-or-directory"><a href="#No-such-file-or-directory" class="headerlink" title="No such file or directory"></a>No such file or directory</h3><p>api server 启动失败，执行 <code>kubectl</code> 命令输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">The connection to the server kube-apiserver:6443 was refused - did you specify the right host or port?</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>检查 Api Server 监听的端口 6443 ，显示端口未启动。</p>
<p>检查 Api Server 对应的容器状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps -a | grep api</span></span><br><span class="line">81688b9cbe45  1f38c0b6a9d1   &quot;kube-apiserver --ad…&quot;   14 seconds ago      Exited (1) 13 seconds ago                       k8s_kube-apiserver_kube-apiserver-k8s-uat-master1.kube-system_c8a87f4921623c7bff57f5662ea486cc_25</span><br></pre></td></tr></table></figure>

<p>容器状态为 <code>Exited</code>，检查容器日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker logs 81688b9cbe45</span></span><br><span class="line">I1116 07:43:53.775588       1 server.go:558] external host was not specified, using 172.31.30.123</span><br><span class="line">I1116 07:43:53.776035       1 server.go:158] Version: v1.24.7</span><br><span class="line">I1116 07:43:53.776057       1 server.go:160] &quot;Golang settings&quot; GOGC=&quot;&quot; GOMAXPROCS=&quot;&quot; GOTRACEBACK=&quot;&quot;</span><br><span class="line">E1116 07:43:53.776298       1 run.go:74] &quot;command failed&quot; err=&quot;open /etc/kubernetes/pki/apiserver.crt: no such file or directory&quot;</span><br></pre></td></tr></table></figure>
<p>日志显示 <code>err=&quot;open /etc/kubernetes/pki/apiserver.crt: no such file or directory&quot;</code>，检查文件 <code>/etc/kubernetes/pki/apiserver.crt</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> /etc/kubernetes/pki/apiserver.crt</span></span><br><span class="line">ls: cannot access /etc/kubernetes/pki/apiserver.crt: No such file or directory</span><br></pre></td></tr></table></figure>

<p>解决方法参考</p>
<ul>
<li>发现此文件确实不存在。若有备份，从备份中恢复此文件。如果没有备份，<a href="https://cloud.tencent.com/developer/article/1801882">参考文档</a> 恢复证书<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /k8s/backup/pki/apiserver.key /etc/kubernetes/pki/</span><br><span class="line">cp /k8s/backup/pki/apiserver.crt /etc/kubernetes/pki/</span><br></pre></td></tr></table></figure>
重启 <code>kubelet</code> 后检查 Api Server，发现服务正常启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>如果只是缺少了 <code>apiserver.key</code>，<code>apiserver.crt</code> 证书文件，可通过以下命令重新生成证书文件，<a href="https://csms.tech/202209121102/#集群之外的服务器使用-kubectl-报错">生成原理参考</a><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubeadm init phase certs apiserver \</span></span><br><span class="line"><span class="language-bash">     --apiserver-advertise-address  10.150.0.21 \</span></span><br><span class="line"><span class="language-bash">     --apiserver-cert-extra-sans  10.96.0.1 \</span></span><br><span class="line"><span class="language-bash">     --apiserver-cert-extra-sans 34.150.1.1</span></span><br><span class="line"> </span><br><span class="line">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed for DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.150.0.21 34.150.1.1]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="context-deadline-exceeded"><a href="#context-deadline-exceeded" class="headerlink" title="context deadline exceeded"></a>context deadline exceeded</h3><p><code>kube-apiserver</code> 无法正常启动，检查 <code>kube-apiserver</code> 相关容器日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">The connection to the server kube-apiserver:6443 was refused - did you specify the right host or port?</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker logs  -f f39205f67e71</span></span><br><span class="line">server.go:558] external host was not specified, using 172.31.29.250</span><br><span class="line">server.go:158] Version: v1.24.7</span><br><span class="line">server.go:160] &quot;Golang settings&quot; GOGC=&quot;&quot; GOMAXPROCS=&quot;&quot; GOTRACEBACK=&quot;&quot;</span><br><span class="line">shared_informer.go:255] Waiting for caches to sync for node_authorizer</span><br><span class="line">plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.</span><br><span class="line">plugins.go:161] Loaded 11 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,PodSecurity,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.</span><br><span class="line">plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.</span><br><span class="line">plugins.go:161] Loaded 11 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,PodSecurity,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.</span><br><span class="line">run.go:74] &quot;command failed&quot; err=&quot;context deadline exceeded&quot;</span><br><span class="line">clientconn.go:1331] [core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1 &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err: connection error: desc = &quot;transport: authentication handshake failed: context deadline exceeded&quot;. Reconnecting...</span><br></pre></td></tr></table></figure>
<p>查看到日志中的关键错误信息: <code>&quot;command failed&quot; err=&quot;context deadline exceeded&quot;</code>，<code>[core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1 &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err: connection error: desc = &quot;transport: authentication handshake failed: context deadline exceeded&quot;. Reconnecting...</code>，由此可知，主要问题在于连接 <code>etcd</code> 组件异常，因 <code>transport: authentication handshake failed</code> 无法和 <code>etcd</code> 建立连接，<code>kube-apiserver</code> 连接 <code>etcd</code> 的认证依赖于证书，因此去检查集群证书，发现证书过期，相关操作参考以下命令及输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /etc/kubernetes/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openssl x509 -text -<span class="keyword">in</span> apiserver.crt</span> </span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number: 2154708302505735210 (0x1de70fc8f570742a)</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: CN=kubernetes</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Nov  1 01:11:01 2022 GMT</span><br><span class="line">            Not After : Nov  1 01:24:48 2023 GMT</span><br><span class="line">        Subject: CN=kube-apiserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubeadm certs check-expiration</span></span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class="line">[check-expiration] Error reading configuration from the Cluster. Falling back to default configuration</span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Nov 01, 2023 01:24 UTC   &lt;invalid&gt;       ca                      no      </span><br><span class="line">apiserver                  Nov 01, 2023 01:24 UTC   &lt;invalid&gt;       ca                      no      </span><br><span class="line">apiserver-etcd-client      Nov 01, 2023 01:24 UTC   &lt;invalid&gt;       etcd-ca                 no      </span><br><span class="line">apiserver-kubelet-client   Nov 01, 2023 01:24 UTC   &lt;invalid&gt;       ca                      no      </span><br><span class="line">controller-manager.conf    Nov 01, 2023 01:24 UTC   &lt;invalid&gt;       ca                      no      </span><br><span class="line">etcd-healthcheck-client    Nov 01, 2023 01:24 UTC   &lt;invalid&gt;       etcd-ca                 no      </span><br><span class="line">etcd-peer                  Nov 01, 2023 01:24 UTC   &lt;invalid&gt;       etcd-ca                 no      </span><br><span class="line">etcd-server                Nov 01, 2023 01:24 UTC   &lt;invalid&gt;       etcd-ca                 no      </span><br><span class="line">front-proxy-client         Nov 01, 2023 01:24 UTC   &lt;invalid&gt;       front-proxy-ca          no      </span><br><span class="line">scheduler.conf             Nov 01, 2023 01:24 UTC   &lt;invalid&gt;       ca                      no      </span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Oct 29, 2032 01:11 UTC   8y              no      </span><br><span class="line">etcd-ca                 Oct 29, 2032 01:11 UTC   8y              no      </span><br><span class="line">front-proxy-ca          Oct 29, 2032 01:11 UTC   8y              no</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考以下命令，备份及更新集群证书，并重启 <code>kubelet</code> 后，<code>kube-apiserver</code> 恢复正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tar -cf /etc/kubernetes/kubernetes.20231115.tar /etc/kubernetes/kubernetes</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubeadm certs renew all</span></span><br><span class="line">[renew] Reading configuration from the cluster...</span><br><span class="line">[renew] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class="line">[renew] Error reading configuration from the Cluster. Falling back to default configuration</span><br><span class="line"></span><br><span class="line">certificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewed</span><br><span class="line">certificate for serving the Kubernetes API renewed</span><br><span class="line">certificate the apiserver uses to access etcd renewed</span><br><span class="line">certificate for the API server to connect to kubelet renewed</span><br><span class="line">certificate embedded in the kubeconfig file for the controller manager to use renewed</span><br><span class="line">certificate for liveness probes to healthcheck etcd renewed</span><br><span class="line">certificate for etcd nodes to communicate with each other renewed</span><br><span class="line">certificate for serving etcd renewed</span><br><span class="line">certificate for the front proxy client renewed</span><br><span class="line">certificate embedded in the kubeconfig file for the scheduler manager to use renewed</span><br><span class="line"></span><br><span class="line">Done renewing certificates. You must restart the kube-apiserver, kube-controller-manager, kube-scheduler and etcd, so that they can use the new certificates.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl restart kubelet</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">error: You must be logged in to the server (Unauthorized)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME          STATUS     ROLES           AGE    VERSION</span><br><span class="line">k8s-master1   Ready      control-plane   379d   v1.24.7</span><br><span class="line">k8s-master2   Ready      control-plane   379d   v1.24.7</span><br><span class="line">k8s-master3   Ready      control-plane   379d   v1.24.7</span><br><span class="line">k8s-work1     NotReady   &lt;none&gt;          379d   v1.24.7</span><br><span class="line">k8s-work2     Ready      &lt;none&gt;          379d   v1.24.7</span><br></pre></td></tr></table></figure>

<h2 id="kubelet-启动失败"><a href="#kubelet-启动失败" class="headerlink" title="kubelet 启动失败"></a>kubelet 启动失败</h2><h3 id="failed-to-parse-kubelet-flag"><a href="#failed-to-parse-kubelet-flag" class="headerlink" title="failed to parse kubelet flag"></a>failed to parse kubelet flag</h3><p><code>kubelet</code> 重启失败，查看 <code>kubelet</code> 服务日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -f -u kubelet</span></span><br><span class="line">&quot;command failed&quot; err=&quot;failed to parse kubelet flag: unknown flag: --network-plugin&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>问题原因</strong> 为 <strong>版本不匹配</strong>。集群版本为 <code>1.21.2</code>，检查问题节点上的组件版本信息，<code>kubelet</code> 变为了 <code>kubelet-1.27.3</code>，可能是升级了 <code>kubelet</code> 软件包版本导致。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -qa | grep kube</span></span><br><span class="line">kubernetes-cni-1.2.0-0.x86_64</span><br><span class="line">kubectl-1.25.2-0.x86_64</span><br><span class="line">kubelet-1.27.3-0.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看正常节点上的组件版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -qa | grep kube</span></span><br><span class="line">kubectl-1.21.2-0.x86_64</span><br><span class="line">kubernetes-cni-0.8.7-0.x86_64</span><br><span class="line">kubelet-1.21.2-0.x86_64</span><br><span class="line">kubeadm-1.21.2-0.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>解决方法</strong> 为恢复问题节点上的组件版本和集群版本一致。</p>
<ol>
<li>在正常节点上下载软件安装包并拷贝到问题节点上 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yumdownloader kubernetes-cni-0.8.7-0 kubectl-1.21.2-0 kubeadm-1.21.2-0 kubelet-1.21.2-0</span><br></pre></td></tr></table></figure></li>
<li>在问题节点上卸载软件包并安装和集群一致版本的软件包 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove kubelet-1.27.3-0 kubectl-1.25.2-0.x86_64 kubernetes-cni-1.2.0-0.x86_64</span><br><span class="line"></span><br><span class="line">yum localinstall kubectl-1.21.2-0.x86_64.rpm  kubeadm-1.21.2-0.x86_64.rpm kubelet-1.21.2-0.x86_64.rpm kubernetes-cni-0.8.7-0.x86_64.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>重启服务，恢复正常 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="misconfiguration-kubelet-cgroup-driver-quot-systemd-quot-is-different-from-docker-cgroup-driver-quot-cgroupfs-quot-“"><a href="#misconfiguration-kubelet-cgroup-driver-quot-systemd-quot-is-different-from-docker-cgroup-driver-quot-cgroupfs-quot-“" class="headerlink" title="misconfiguration: kubelet cgroup driver: &quot;systemd&quot; is different from docker cgroup driver: &quot;cgroupfs&quot;“"></a>misconfiguration: kubelet cgroup driver: &quot;systemd&quot; is different from docker cgroup driver: &quot;cgroupfs&quot;“</h3><p><code>kubelet</code> 服务启动失败</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl status kubelet</span></span><br><span class="line">● kubelet.service - kubelet: The Kubernetes Node Agent</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: /usr/lib/systemd/system/kubelet.service.d</span><br><span class="line">           └─10-kubeadm.conf</span><br><span class="line">   Active: activating (auto-restart) (Result: exit-code) since Thu 2023-07-13 14:18:33 CST; 2s ago</span><br><span class="line">     Docs: https://kubernetes.io/docs/</span><br><span class="line">  Process: 28476 ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS (code=exited, status=1/FAILURE)</span><br><span class="line"> Main PID: 28476 (code=exited, status=1/FAILURE)</span><br><span class="line"></span><br><span class="line">Jul 13 14:18:33 k8s-node-5 systemd[1]: Unit kubelet.service entered failed state.</span><br><span class="line">Jul 13 14:18:33 k8s-node-5 systemd[1]: kubelet.service failed.</span><br></pre></td></tr></table></figure>

<p>检查 <code>kubelet</code> 服务日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -f -u kubelet</span></span><br><span class="line">Jul 13 14:18:43 k8s-node-5 kubelet[28572]: E0713 14:18:43.328660   28572 server.go:292] &quot;Failed to run kubelet&quot; err=&quot;failed to run Kubelet: misconfiguration: kubelet cgroup driver: \&quot;systemd\&quot; is different from docker cgroup driver: \&quot;cgroupfs\&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>根据日志信息可知，<code>kubelet</code> 服务启动失败是因为 <code>kubelet</code> 使用的 <code>cgroup</code> 驱动是 <code>systemd</code>，而 docker 服务使用的是 <code>cgroupfs</code>。二者不一致导致 <code>kubelet</code> 无法启动。</p>
<p>修改 <code>docker</code> 服务使用的 <code>cgroup</code> 驱动为 <code>systemd</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/docker/daemon.json</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>重启 <code>docker</code> 服务后，<code>kubelet</code> 服务运行正常。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="misconfiguration"><a href="#misconfiguration" class="headerlink" title="misconfiguration"></a>misconfiguration</h3><p><code>kubelet</code> 服务启动失败，检查日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">journalctl -f -u kubelet</span></span><br><span class="line">kubelet[22771]: E0908 14:10:08.325316   22771 server.go:292] &quot;Failed to run kubelet&quot; err=&quot;failed to run Kubelet: misconfiguration: kubelet cgroup driver: \&quot;cgroupfs\&quot; is different from docker cgroup driver: \&quot;systemd\&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>从日志可知，是因为 <code>kubelet</code> 和 <code>docker</code> 使用的 cgroup 驱动不一致导致。<code>kubelet</code> 使用了 <code>cgroupfs</code>，而 <code>docker</code> 使用了 <code>systemd</code></p>
<p>参考以下步骤修改 <code>kubelet</code> 使用 <code>systemd</code> 驱动</p>
<ol>
<li>修改 <code>kubelet</code> 配置 <code>/var/lib/kubelet/config.yaml</code> 中的 <code>cgroupDriver</code> <figure class="highlight shell"><figcaption><span>/var/lib/kubelet/config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">cgroupDriver: systemd</span><br></pre></td></tr></table></figure></li>
<li>重启 <code>kubelet</code> 服务</li>
</ol>
<h2 id="其他控制平面故障"><a href="#其他控制平面故障" class="headerlink" title="其他控制平面故障"></a>其他控制平面故障</h2><h3 id="高可用集群中一个-master-节点异常导致整个集群中的所有应用服务不可用"><a href="#高可用集群中一个-master-节点异常导致整个集群中的所有应用服务不可用" class="headerlink" title="高可用集群中一个 master 节点异常导致整个集群中的所有应用服务不可用"></a>高可用集群中一个 master 节点异常导致整个集群中的所有应用服务不可用</h3><a href="/202209121102/" title="参考此文档安装的高可用集群">参考此文档安装的高可用集群</a>，在 [创建高可用控制平面集群](https://csms.tech/202209121102/#创建高可用控制平面的集群)中，要 为 `kube-apiserver` 创建负载均衡器，本次问题环境中未创建负载均衡器，而是使用主机 hosts (`/etc/hosts`) 写入了 `kube-apiserver` 的域名及 IP 映射关系，示例如下

<figure class="highlight shell"><figcaption><span>/etc/hosts</span></figcaption><table><tr><td class="code"><pre><span class="line">172.31.26.116 k8s-master1 kube-api-svr-c1.mydomain.com</span><br><span class="line">172.31.19.164 k8s-master2 kube-api-svr-c1.mydomain.com</span><br><span class="line">172.31.21.3 k8s-master3 kube-api-svr-c1.mydomain.com</span><br><span class="line">172.31.16.124 k8s-worker1</span><br><span class="line">172.31.22.159 k8s-worker2</span><br></pre></td></tr></table></figure>
<p>集群中的所有节点都写入了以上内容，实现了节点通过 <code>/etc/hosts</code> 中的配置解析 <code>kube-apiserver</code> 的域名(<code>kube-api-svr-c1.mydomain.com</code>)。</p>
<p>正常情况下，所有节点都会将 <code>kube-apiserver</code> 解析为 <code>172.31.26.116 kube-api-svr-c1.mydomain.com</code>。</p>
<p>本次故障中，<code>k8s-master1</code> 节点因为 CPU 和内存满载，<code>k8s-master1</code> 异常，无法提供 <code>kube-apiserver</code> 服务。同时，集群中所有的应用都响应异常 ：<code>503 Service Temporarily Unavailable</code></p>
<p>理论上，本环境为 <em>高可用</em> 的Kubernetes 集群，一个 master 节点异常，不会影响集群提供正常的功能，但是此次只是因为 <code>k8s-master1</code> 这一个 master 节点异常，就导致了整个集群无法提供正常的功能。</p>
<p>复现问题分析，发现 <code>k8s-master1</code> 异常后，在其他主节点上使用 <code>kubectl</code> 命令，无法使用，原因为 <em>根据节点 <code>/etc/hosts</code> 配置，<code>kube-apiserver</code> 解析到了异常的 <code>k8s-master1</code> 节点</em>，修改 <code>k8s-master2</code> 上面的 <code>/etc/hosts</code> 配置，将 <code>172.31.19.164 k8s-master2 kube-api-svr-c1.mydomain.com</code> 放在第一行，以使 <code>kube-apiserver</code> 域名解析到 <code>k8s-master2</code>，<code>kubectl</code> 命令连接到 <code>k8s-master2</code> 即可正常查看集群状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME          STATUS     ROLES           AGE    VERSION</span><br><span class="line">k8s-master1   NotReady   control-plane   224d   v1.24.7</span><br><span class="line">k8s-master2   Ready      control-plane   224d   v1.24.7</span><br><span class="line">k8s-master3   NotReady   control-plane   224d   v1.24.7</span><br><span class="line">k8s-worker1   NotReady   &lt;none&gt;          224d   v1.24.7</span><br><span class="line">k8s-worker2   NotReady   &lt;none&gt;          224d   v1.24.7</span><br></pre></td></tr></table></figure>
<p>可以看到，集群中除了 <code>k8s-master2</code> ，其他所有节点都异常，原因为 <strong>除了 <code>k8s-master2</code> 其他节点都将 <code>apiserver</code> 解析到了异常的 <code>k8s-master1</code> 节点</strong>。修改所有节点的 <code>/etc/hosts</code> 文件，将 <code>kube-api-svr-c1.mydomain.com</code> 解析到 <code>k8s-master1</code> 之外的 master 节点，集群恢复正常。</p>
<p>本次故障的根本原因为<em><strong>本环境中未实现 Kubernetes 的高可用，虽然已经部署了高可用环境，但是因为 <code>apiserver</code> 的域名未实现高可用(负载均衡)，导致 <code>apiserver</code> 请求全部到了异常节点</strong></em>。要从根本上解决此问题，需要为 <code>apiserver</code> 的请求域名部署负载均衡实现真正的高可用。<em><strong>使用 <code>/etc/hosts</code> 将域名解析到多个 IP 不能实现高可用</strong></em>。</p>
<h3 id="deployment-部署后未创建对应的-Pod"><a href="#deployment-部署后未创建对应的-Pod" class="headerlink" title="deployment 部署后未创建对应的 Pod"></a>deployment 部署后未创建对应的 Pod</h3><p>deployment 部署成功后，检查对应的 Pod，发现未创建对应的 Pod。查看 <code>deployment</code> 描述信息如下，<code>Events</code> 内容为空。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe deployment ops-admin -n ops</span></span><br><span class="line">Name:                   ops-admin</span><br><span class="line">Namespace:              ops</span><br><span class="line">Labels:                 env=prod</span><br><span class="line">                        project=ops-admin</span><br><span class="line">Selector:               env=prod,project=ops-admin</span><br><span class="line">Replicas:               1 desired | 0 updated | 0 total | 0 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  env=prod</span><br><span class="line">           project=ops-admin</span><br><span class="line">... </span><br><span class="line">OldReplicaSets:    &lt;none&gt;</span><br><span class="line">NewReplicaSet:     &lt;none&gt;</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>检查 <code>replicaset</code> 信息，未发现任何的相关 <code>replicaset</code> 资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe replicaset -l <span class="built_in">env</span>=prod,project=ops-admin -n ops</span></span><br><span class="line">No resources found in ops namespace.</span><br></pre></td></tr></table></figure>

<p>检查事件列表，内容为空</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get events -n ops</span></span><br><span class="line">No resources found in ops namespace.</span><br></pre></td></tr></table></figure>

<p>继续检查控制平面组件的状态，看到 <code>controller-manager</code> 和 <code>scheduler</code> 状态异常(此异常可能是因为配置原因，具体见 <a href="#controller-manager-%E5%92%8C-scheduler-%E7%BB%84%E4%BB%B6%E7%8A%B6%E6%80%81-Unhealthy">controller-manager 和 scheduler 组件状态 Unhealthy</a>)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get componentstatuses</span></span><br><span class="line">Warning: v1 ComponentStatus is deprecated in v1.19+</span><br><span class="line">NAME                 STATUS      MESSAGE                                                                                       ERROR</span><br><span class="line">controller-manager   Unhealthy   Get &quot;http://127.0.0.1:10252/healthz&quot;: dial tcp 127.0.0.1:10252: connect: connection refused   </span><br><span class="line">scheduler            Unhealthy   Get &quot;http://127.0.0.1:10251/healthz&quot;: dial tcp 127.0.0.1:10251: connect: connection refused   </span><br><span class="line">etcd-0               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>接着查看 <code>controller-manager</code> 和 <code>scheduler</code> 对应的 Pod 的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl logs -n kube-system -l component=kube-controller-manager</span></span><br><span class="line">E0925 04:44:40.190504       1 leaderelection.go:325] error retrieving resource lock kube-system/kube-controller-manager: Unauthorized</span><br><span class="line">E0925 04:44:43.861798       1 leaderelection.go:325] error retrieving resource lock kube-system/kube-controller-manager: Unauthorized</span><br><span class="line">E0925 04:44:48.017384       1 leaderelection.go:325] error retrieving resource lock kube-system/kube-controller-manager: Unauthorized</span><br><span class="line">E0925 04:44:52.260888       1 leaderelection.go:325] error retrieving resource lock kube-system/kube-controller-manager: Unauthorized</span><br><span class="line">E0925 04:44:54.825907       1 leaderelection.go:325] error retrieving resource lock kube-system/kube-controller-manager: Unauthorized</span><br><span class="line">E0925 04:44:58.502754       1 leaderelection.go:325] error retrieving resource lock kube-system/kube-controller-manager: Unauthorized</span><br><span class="line">E0925 04:45:02.539845       1 leaderelection.go:325] error retrieving resource lock kube-system/kube-controller-manager: Unauthorized</span><br><span class="line">E0925 04:45:06.623081       1 leaderelection.go:325] error retrieving resource lock kube-system/kube-controller-manager: Unauthorized</span><br><span class="line">E0925 04:45:09.166492       1 leaderelection.go:325] error retrieving resource lock kube-system/kube-controller-manager: Unauthorized</span><br><span class="line">E0925 04:45:12.507228       1 leaderelection.go:325] error retrieving resource lock kube-system/kube-controller-manager: Unauthorized</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl logs -n kube-system -l component=kube-scheduler</span></span><br><span class="line">E0925 04:45:30.669008       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: Unauthorized</span><br><span class="line">E0925 04:45:30.986953       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: Unauthorized</span><br><span class="line">E0925 04:45:31.297694       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicationController: failed to list *v1.ReplicationController: Unauthorized</span><br><span class="line">E0925 04:45:36.275267       1 reflector.go:138] k8s.io/apiserver/pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to watch *v1.ConfigMap: failed to list *v1.ConfigMap: Unauthorized</span><br><span class="line">E0925 04:45:36.839025       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Node: failed to list *v1.Node: Unauthorized</span><br><span class="line">E0925 04:45:37.365357       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1beta1.CSIStorageCapacity: failed to list *v1beta1.CSIStorageCapacity: Unauthorized</span><br><span class="line">E0925 04:45:45.008682       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: Unauthorized</span><br><span class="line">E0925 04:45:52.514736       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicaSet: failed to list *v1.ReplicaSet: Unauthorized</span><br><span class="line">E0925 04:45:52.698173       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSIDriver: failed to list *v1.CSIDriver: Unauthorized</span><br><span class="line">E0925 04:45:54.558346       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSINode: failed to list *v1.CSINode: Unauthorized  </span><br></pre></td></tr></table></figure>
<p>日志显示存在鉴权问题（<code>Unauthorized</code>），本示例中此问题主要是由集群证书过期导致。</p>
<h3 id="controller-manager-和-scheduler-组件状态-Unhealthy"><a href="#controller-manager-和-scheduler-组件状态-Unhealthy" class="headerlink" title="controller-manager 和 scheduler 组件状态 Unhealthy"></a>controller-manager 和 scheduler 组件状态 Unhealthy</h3><h4 id="环境信息-3"><a href="#环境信息-3" class="headerlink" title="环境信息"></a>环境信息</h4><ul>
<li>Kubernetes 1.21</li>
</ul>
<p>检查集群组件状态，显示 <code>controller-manager</code> 和 <code>scheduler</code> 组件状态 <code>Unhealthy</code>。集群功能正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get componentstatuses</span></span><br><span class="line">Warning: v1 ComponentStatus is deprecated in v1.19+</span><br><span class="line">NAME                 STATUS      MESSAGE                                                                                       ERROR</span><br><span class="line">controller-manager   Unhealthy   Get &quot;http://127.0.0.1:10252/healthz&quot;: dial tcp 127.0.0.1:10252: connect: connection refused   </span><br><span class="line">scheduler            Unhealthy   Get &quot;http://127.0.0.1:10251/healthz&quot;: dial tcp 127.0.0.1:10251: connect: connection refused   </span><br><span class="line">etcd-0               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>出现此情况是因为 <code>/etc/kubernetes/manifests/kube-controller-manager.yaml</code> 和 <code>/etc/kubernetes/manifests/kube-scheduler.yaml</code> 设置的默认端口是 <code>0</code>，修改此配置文件，注释 <code>- --port=0</code> 即可（修改此配置文件后，系统会自动加载配置，无需重启），等待大概一分钟后重新查看，状态正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get componentstatuses</span></span><br><span class="line">Warning: v1 ComponentStatus is deprecated in v1.19+</span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">scheduler            Healthy   ok                  </span><br><span class="line">controller-manager   Healthy   ok                  </span><br><span class="line">etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Kubernetes-集群证书相关问题"><a href="#Kubernetes-集群证书相关问题" class="headerlink" title="Kubernetes 集群证书相关问题"></a>Kubernetes 集群证书相关问题</h1><h2 id="Kubernetes-相关证书"><a href="#Kubernetes-相关证书" class="headerlink" title="Kubernetes 相关证书"></a>Kubernetes 相关证书</h2><p>Kubernetes 集群中使用了多种证书来保证各种组件间的安全通信。以下是 Kubernetes 中使用的主要证书：</p>
<blockquote>
<p><em><strong>证书默认存放路径</strong></em> <code>/etc/kubernetes/pki</code>，以下文件相对路径基于此默认存放路径</p>
</blockquote>
<h3 id="Kubernetes-集群证书"><a href="#Kubernetes-集群证书" class="headerlink" title="Kubernetes 集群证书"></a>Kubernetes 集群证书</h3><ul>
<li><p><em><strong>kubernetes CA 证书</strong></em></p>
<p>Kubernetes CA 证书用于签发集群中的其他证书，例如 <code>kube-apiserver</code> 服务器证书、<code>kubelet</code> 证书、<code>controller-manager</code> 证书等。</p>
<ul>
<li><code>ca.crt</code>  CA 的公钥证书。</li>
<li><code>ca.key</code>  CA 的私钥。</li>
</ul>
<p>在使用 <code>kubeadm</code> 初始化 Kubernetes 集群时，CA 证书通常会自动生成。</p>
</li>
<li><p><em><strong>kube-apiserver 组件证书</strong></em></p>
<p>加密 Kubernetes API 服务器的 HTTPS 接口。</p>
<ul>
<li><code>apiserver.crt</code></li>
<li><code>apiserver.key</code></li>
</ul>
<p>证书的 SANs 中包含了 Kubernetes API 服务器的 IP 地址、DNS 名称等。要更新 SANs 的值，使用命令 <code>kubeadm init phase certs apiserver</code>，<a href="https://csms.tech/202209121102/#集群之外的服务器使用-kubectl-报错">参考示例</a></p>
<p>要单独更新 <code>kube-apiserver</code> 的证书，参考命令 <code>kubeadm certs renew </code></p>
</li>
<li><p>Kube Proxy、Controller Manager 和 Scheduler 默认不使用 TLS 和 API Server 进行身份验证，而是使用 Kubernetes Service Account。</p>
</li>
<li><p><em><strong>Kubelet  组件证书</strong></em></p>
<p>加密 Kubelet 与 API 服务器的通信。kubelet 使用这些证书来安全地与 Kubernetes API 服务器通信。这包括节点状态的报告、Pod 的创建和管理等。当 kubelet 首次加入集群时，它会使用这些证书进行 TLS 认证。API 服务器通过这些证书验证节点的身份，并基于此授予相应的权限。</p>
<p>Kubernetes 支持自动证书轮换，这意味着 kubelet 会在证书接近过期时自动请求新的证书。这个过程是自动的，确保了长期运行的集群保持安全。</p>
<p>通常为节点的 <code>/var/lib/kubelet/pki/kubelet-client-current.pem</code> 和对应的 Key 文件。</p>
</li>
<li><p><em><strong>Service Account Keys</strong></em>  </p>
<p>在初始化 Kubernetes 集群时，这些密钥通常由 <code>kubeadm</code> 或相似的工具自动生成。</p>
<ul>
<li><code>sa.key</code> 用于签发新的 Service Account JWT Tokens。通常由集群管理员或自动化工具（如 <code>kubeadm</code>）安全地生成和管理。</li>
<li><code>sa.pub</code>（<strong>非 TLS 证书，而是密钥对</strong>）。  由 Kubernetes API 服务器用来验证 Token 的合法性。与私钥配对使用。</li>
</ul>
<p>在 Kubernetes 中，Service Account Keys 是一对公钥和私钥，用于验证和签发 Service Account Tokens。这些令牌允许 Pod 以特定的 Service Account 身份与 Kubernetes API 服务器进行认证和授权。</p>
</li>
<li><p><em><strong>apiserver-kubelet-client</strong></em></p>
<p>这对证书和密钥用于 API 服务器请求集群中每个节点上的 <code>kubelet</code> 时的安全通信。API 服务器使用这些证书与 <code>kubelet</code> 通信，进行诸如启动 Pod、获取节点状态等操作。</p>
<ul>
<li><code>apiserver-kubelet-client.crt</code></li>
<li><code>apiserver-kubelet-client.key</code></li>
</ul>
</li>
</ul>
<h3 id="etcd-集群证书"><a href="#etcd-集群证书" class="headerlink" title="etcd 集群证书"></a>etcd 集群证书</h3><ul>
<li><p><em><strong>etcd CA 证书</strong></em></p>
<p>Etcd CA 证书用于签发 etcd 集群相关的证书，如 <code>etcd</code> 服务器证书、<code>etcd</code> 客户端证书、Peer 实体证书等。</p>
<ul>
<li><code>etcd/ca.crt</code></li>
<li><code>etcd/ca.key</code></li>
</ul>
</li>
<li><p><em><strong>apiserver-etcd-client</strong></em></p>
<p> 这对证书和密钥用于 Kubernetes API 服务器请求 <code>etcd</code> 数据库时的加密通信</p>
<ul>
<li><code>apiserver-etcd-client.crt </code></li>
<li><code>apiserver-etcd-client.key</code></li>
</ul>
</li>
</ul>
<h2 id="Found-multiple-CRI-endpoints-on-the-host"><a href="#Found-multiple-CRI-endpoints-on-the-host" class="headerlink" title="Found multiple CRI endpoints on the host"></a>Found multiple CRI endpoints on the host</h2><p>使用 <code>kubeadm</code> 重置集群证书时报错，具体操作如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo kubeadm init phase certs all</span></span><br><span class="line">Found multiple CRI endpoints on the host. Please define which one do you wish to use by setting the &#x27;criSocket&#x27; field in the kubeadm configuration file: unix:///var/run/containerd/containerd.sock, unix:///var/run/cri-dockerd.sock</span><br><span class="line">To see the stack trace of this error execute with --v=5 or higher</span><br></pre></td></tr></table></figure>
<p>原因为系统上存在多个可用的 CRI，需要手动配置使用哪一个。这通常是在 <code>kubeadm</code> 配置文件中设置 <code>criSocket</code> 字段来完成。如果集群正在使用 <code>containerd</code> 作为容器运行时，参考以下配置解决</p>
<ol>
<li>创建 <code>kubeadm</code> 配置文件。创建一个 <code>kubeadm</code> 配置文件（如果还没有的话，如 <code>kubeadm-config.yaml</code>），并在其中指定 <code>criSocket</code> 字段。例如，如果使用 <code>containerd</code>，则文件内容如下： <figure class="highlight shell"><figcaption><span>kubeadm-config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: /var/run/containerd/containerd.sock</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>运行 <code>kubeadm</code> 命令 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo kubeadm init phase certs all --config=./kubeadm-config.yaml</span> </span><br><span class="line">W1208 14:19:51.376721   13737 common.go:84] your configuration file uses a deprecated API spec: &quot;kubeadm.k8s.io/v1beta2&quot;. Please use &#x27;kubeadm config migrate --old-config old.yaml --new-config new.yaml&#x27;, which will write the new, similar spec using a newer API version.</span><br><span class="line">W1208 14:19:51.376972   13737 initconfiguration.go:120] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme &quot;unix&quot; to the &quot;criSocket&quot; with value &quot;/var/run/containerd/containerd.sock&quot;. Please update your configuration!</span><br><span class="line">I1208 14:19:51.517814   13737 version.go:255] remote version is much newer: v1.28.4; falling back to: stable-1.24</span><br><span class="line">[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;</span><br><span class="line">[certs] Using existing ca certificate authority</span><br><span class="line">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed for DNS names [fm-k8s-c1-master1 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 172.31.26.116]</span><br><span class="line">[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/server&quot; certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed for DNS names [fm-k8s-c1-master1 localhost] and IPs [172.31.26.116 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd/peer&quot; certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed for DNS names [fm-k8s-c1-master1 localhost] and IPs [172.31.26.116 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class="line">[certs] Using the existing &quot;sa&quot; key</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="kubeadm-更新-apiserver-证书报错"><a href="#kubeadm-更新-apiserver-证书报错" class="headerlink" title="kubeadm 更新 apiserver 证书报错"></a>kubeadm 更新 apiserver 证书报错</h2><p>使用以下方式更新 <code>kube-apiserver</code> 的证书时报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubeadm init phase certs apiserver --apiserver-advertise-address --apiserver-cert-extra-sans kubernetes --apiserver-cert-extra-sans kubernetes.default --apiserver-cert-extra-sans kubernetes.default.svc  --config=/home/username/kubeadm-config.yaml</span></span><br><span class="line">can not mix &#x27;--config&#x27; with arguments [apiserver-advertise-address apiserver-cert-extra-sans]</span><br><span class="line">To see the stack trace of this error execute with --v=5 or higher</span><br></pre></td></tr></table></figure>
<p>根据报错提示，不能同时使用 <code>--config</code> 和 <code>apiserver-advertise-address apiserver-cert-extra-sans</code>。</p>
<p>本示例中使用 <code>--config</code> 是用来解决 <a href="#Found-multiple-CRI-endpoints-on-the-host">Found multiple CRI endpoints on the host</a>。要简单解决，只需要确保主机上只有 <strong>一个可用的 CRI 即可</strong>。</p>
<blockquote>
<p>如果在 <code>kubeadm init</code> 命令中使用了 <code>--config</code> 选项指定配置文件，那么所有的选项配置都要写入此配置中。<a href="https://kubernetes.io/docs/reference/config-api/kubeadm-config.v1beta3/">相关配置项参考</a> <strong>不同的 Kubernetes 版本对此配置版本要求不一样，具体要参考官网</strong> </p>
</blockquote>
<h2 id="etcd-集群证书异常导致-etcd-和-Kubernetes-集群不可用"><a href="#etcd-集群证书异常导致-etcd-和-Kubernetes-集群不可用" class="headerlink" title="etcd 集群证书异常导致 etcd 和 Kubernetes 集群不可用"></a>etcd 集群证书异常导致 etcd 和 Kubernetes 集群不可用</h2><p><code>etcd</code> 堆叠(Stack)架构的 Kubernetes 集群无法访问，获取不到集群状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">The connection to the server kube-apiserver.uat.148962587001:6443 was refused - did you specify the right host or port?</span><br></pre></td></tr></table></figure>
<p>通过 CRI（以 <code>docker</code> 为例）查看 <code>kube-apiserver</code> 容器状态，显示为 <code>Exited</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                       COMMAND                  CREATED              STATUS                          PORTS     NAMES</span><br><span class="line">cf4bf9f2c4a3   9efa6dff568f                &quot;kube-scheduler --au…&quot;   About a minute ago   Exited (1) About a minute ago             k8s_kube-scheduler_kube-scheduler-k8s-master3_kube-system_a3a06a8f4bb3d9a7a753421061337314_808</span><br><span class="line">27e06d290dbb   9e2bfc195de6                &quot;kube-controller-man…&quot;   2 minutes ago        Exited (1) 2 minutes ago                  k8s_kube-controller-manager_kube-controller-manager-k8s-master3_kube-system_1d62164acfdda6946d09aa8255b4b191_808</span><br><span class="line">b0aa1a2e24ee   c7cbaca6e63b                &quot;kube-apiserver --ad…&quot;   3 minutes ago        Exited (1) 3 minutes ago                  k8s_kube-apiserver_kube-apiserver-k8s-master3_kube-system_fd413ffd28d3bcce4b1330c38307ebe2_791</span><br></pre></td></tr></table></figure>
<p>查看 <code>kube-apiserver</code> 容器日志信息。错误日志中有关键错误信息 <code>failed to connect to &#123;127.0.0.1:2379 127.0.0.1 &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err: connection error: desc = &quot;transport: authentication handshake failed: remote error: tls: internal error&quot;. Reconnecting...</code>，这显示了 <code>kube-apiserver</code> 因为 TLS 证书原因无法连接到 <code>etcd</code>。 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker logs b0aa1a2e24ee</span></span><br><span class="line">clientconn.go:1331] [core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1 &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err: connection error: desc = &quot;transport: authentication handshake failed: remote error: tls: internal error&quot;. Reconnecting...</span><br><span class="line">authentication.go:63] &quot;Unable to authenticate the request&quot; err=&quot;[x509: certificate has expired or is not yet valid: current time 2023-12-08T07:21:21Z is after 2023-12-06T09:58:58Z, verifying certificate SN=1505375741374655454, SKID=, AKID=08:39:2B:D0:14:00:F4:7F:3F:58:26:36:32:BA:F8:0E:0E:B4:D4:83 failed: x509: certificate has expired or is not yet valid: current time 2023-12-08T07:21:21Z is after 2023-12-06T09:58:58Z]&quot;</span><br><span class="line">clientconn.go:1331] [core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1 &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err: connection error: desc = &quot;transport: authentication handshake failed: remote error: tls: internal error&quot;. Reconnecting...</span><br><span class="line">authentication.go:63] &quot;Unable to authenticate the request&quot; err=&quot;[x509: certificate has expired or is not yet valid: current time 2023-12-08T07:21:22Z is after 2023-12-06T09:58:58Z, verifying certificate SN=1505375741374655454, SKID=, AKID=08:39:2B:D0:14:00:F4:7F:3F:58:26:36:32:BA:F8:0E:0E:B4:D4:83 failed: x509: certificate has expired or is not yet valid: current time 2023-12-08T07:21:22Z is after 2023-12-06T09:58:58Z]&quot;  </span><br></pre></td></tr></table></figure>

<p>根据日志指向，首先来确定集群中 <code>etcd</code> 的状态。<code>etcd</code> 集群暴露了健康状态检查的 Endpoint，可以通过请求此接口检查 <code>etcd</code> 集群的状态。检查结果显示集群状态不正常，原因为未选举出 Leader </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl 127.0.0.1:2381/health</span></span><br><span class="line">&#123;&quot;health&quot;:&quot;false&quot;,&quot;reason&quot;:&quot;RAFT NO LEADER&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据当前的排查结果，可以确定 <code>etcd</code> 集群异常，<code>etcd</code> 集群是 Kubernetes 集群的配置核心，其异常会导致整个 Kubernetes 集群不可用。为了确定 <code>etcd</code> 集群异常原因，检查 <code>etcd</code> 集群中节点的日志，以查找有用信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker logs etcd</span></span><br><span class="line">&#123;&quot;logger&quot;:&quot;raft&quot;,&quot;caller&quot;:&quot;etcdserver/zap_raft.go:77&quot;,&quot;msg&quot;:&quot;651e0623614c0f76 is starting a new election at term 13&quot;&#125;</span><br><span class="line">&#123;&quot;logger&quot;:&quot;raft&quot;,&quot;caller&quot;:&quot;etcdserver/zap_raft.go:77&quot;,&quot;msg&quot;:&quot;651e0623614c0f76 became pre-candidate at term 13&quot;&#125;</span><br><span class="line">&#123;&quot;logger&quot;:&quot;raft&quot;,&quot;caller&quot;:&quot;etcdserver/zap_raft.go:77&quot;,&quot;msg&quot;:&quot;651e0623614c0f76 received MsgPreVoteResp from 651e0623614c0f76 at term 13&quot;&#125;</span><br><span class="line">&#123;&quot;logger&quot;:&quot;raft&quot;,&quot;caller&quot;:&quot;etcdserver/zap_raft.go:77&quot;,&quot;msg&quot;:&quot;651e0623614c0f76 [logterm: 13, index: 216516485] sent MsgPreVote request to 71e91a3cb0d95be8 at term 13&quot;&#125;</span><br><span class="line">&#123;&quot;logger&quot;:&quot;raft&quot;,&quot;caller&quot;:&quot;etcdserver/zap_raft.go:77&quot;,&quot;msg&quot;:&quot;651e0623614c0f76 [logterm: 13, index: 216516485] sent MsgPreVote request to d0ca64fcbfb25318 at term 13&quot;&#125;</span><br><span class="line">&#123;&quot;caller&quot;:&quot;rafthttp/probing_status.go:68&quot;,&quot;msg&quot;:&quot;prober detected unhealthy status&quot;,&quot;round-tripper-name&quot;:&quot;ROUND_TRIPPER_SNAPSHOT&quot;,&quot;remote-peer-id&quot;:&quot;d0ca64fcbfb25318&quot;,&quot;rtt&quot;:&quot;0s&quot;,&quot;error&quot;:&quot;x509: certificate signed by unknown authority (possibly because of \&quot;crypto/rsa: verification error\&quot; while trying to verify candidate authority certificate \&quot;etcd-ca\&quot;)&quot;&#125;</span><br><span class="line">&#123;&quot;caller&quot;:&quot;rafthttp/probing_status.go:68&quot;,&quot;msg&quot;:&quot;prober detected unhealthy status&quot;,&quot;round-tripper-name&quot;:&quot;ROUND_TRIPPER_RAFT_MESSAGE&quot;,&quot;remote-peer-id&quot;:&quot;d0ca64fcbfb25318&quot;,&quot;rtt&quot;:&quot;0s&quot;,&quot;error&quot;:&quot;x509: certificate signed by unknown authority (possibly because of \&quot;crypto/rsa: verification error\&quot; while trying to verify candidate authority certificate \&quot;etcd-ca\&quot;)&quot;&#125;</span><br><span class="line">&#123;&quot;caller&quot;:&quot;rafthttp/probing_status.go:68&quot;,&quot;msg&quot;:&quot;prober detected unhealthy status&quot;,&quot;round-tripper-name&quot;:&quot;ROUND_TRIPPER_RAFT_MESSAGE&quot;,&quot;remote-peer-id&quot;:&quot;71e91a3cb0d95be8&quot;,&quot;rtt&quot;:&quot;0s&quot;,&quot;error&quot;:&quot;x509: certificate signed by unknown authority (possibly because of \&quot;crypto/rsa: verification error\&quot; while trying to verify candidate authority certificate \&quot;etcd-ca\&quot;)&quot;&#125;</span><br><span class="line">&#123;&quot;caller&quot;:&quot;rafthttp/probing_status.go:68&quot;,&quot;msg&quot;:&quot;prober detected unhealthy status&quot;,&quot;round-tripper-name&quot;:&quot;ROUND_TRIPPER_SNAPSHOT&quot;,&quot;remote-peer-id&quot;:&quot;71e91a3cb0d95be8&quot;,&quot;rtt&quot;:&quot;0s&quot;,&quot;error&quot;:&quot;x509: certificate signed by unknown authority (possibly because of \&quot;crypto/rsa: verification error\&quot; while trying to verify candidate authority certificate \&quot;etcd-ca\&quot;)&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>检查 <code>etcd</code> 节点容器日志，日志中有报错显示证书认证问题：<code>x509: certificate signed by unknown authority (possibly because of \&quot;crypto/rsa: verification error\&quot; while trying to verify candidate authority certificate \&quot;etcd-ca\&quot;)&quot;</code>，根据错误提示，<em><strong>可能是 <code>etcd</code> 集群使用的证书存在问题，具体错误说明 <code>etcd</code> 节点之间在尝试相互验证对方证书时遇到了问题。这通常发生在节点使用不同的 CA 证书，或者配置不正确时。</strong></em>。</p>
<p>通常情况下，在启用了 <code>--client-cert-auth=true</code> 和 <code>--peer-client-cert-auth=true</code> 的 <code>etcd</code> 集群中，<code>etcd</code> 对等节点间需要使用 HTTPS 证书进行加密通信，对等实体间需要验证客户端证书，这个过程中需要相同的 CA 证书进行 CA 机构的签名校验。根据日志提示，问题应集中在 <code>etcd</code> 集群中的证书上。</p>
<p>根据以上日志及思路引导，首先检查 <code>etcd</code> 各个节点的 CA 证书是否一致，结果发现 3 个 <code>etcd</code> 节点上面的 CA 证书不同</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master1 ~]# md5sum /etc/kubernetes/pki/etcd/ca.crt </span><br><span class="line">65fec4a08b77132febabfef3ca4eaafa  /etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line"></span><br><span class="line">[root@k8s-master2 ~]# md5sum /etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line">1b6330a0acacd09dabeff2ff0c97451f  /etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line"></span><br><span class="line">[root@k8s-master3 ~]# md5sum /etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line">3f398e445a4844e6c2a3fee6f24203aa  /etc/kubernetes/pki/etcd/ca.crt</span><br></pre></td></tr></table></figure>

<p>在一个正常配置的 <code>etcd</code> 集群中，所有节点应该使用由同一个根 CA 签发的证书，以便它们能够相互验证和信任。这是因为节点之间的通信（包括 Raft 协议的通信和快照传输）使用 TLS 加密，而且节点需要能够验证彼此的证书。如果每个节点上的 CA 证书不同，它们将无法验证其他节点的证书，从而导致通信失败。</p>
<p>为了解决这个 <code>etcd</code> 集群中各个节点使用的 CA 证书不一致的问题，参考以下步骤</p>
<ol>
<li>备份 Kubernets 集群中的证书目录 <code>/etc/kubernetes/pki/</code>。<em><strong>在所有的 Master 节点上操作</strong></em> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -czf /ops/kubernetes_backup/pki.tar /etc/kubernetes/pki/</span><br></pre></td></tr></table></figure></li>
<li>删除 <code>etcd</code> 节点上的所有证书。<em><strong>在所有的 Master 节点上操作</strong></em> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/kubernetes/pki/etcd/*</span><br></pre></td></tr></table></figure></li>
<li>使用 <code>kubeadm</code> 重新生成 <code>etcd-ca</code> 证书。<em><strong>只需在一个 Master 节点上操作</strong></em> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm init phase certs etcd-ca</span><br></pre></td></tr></table></figure></li>
<li>将重新生成的 <code>etcd-ca</code> 证书对（证书 <code>/etc/kubernetes/pki/etcd/ca.crt</code> 和私钥 <code>/etc/kubernetes/pki/etcd/ca.key</code>） 拷贝到另外 2 台 <code>etcd</code> 节点的相同路径下（<code>/etc/kubernetes/pki/etcd/</code>）</li>
<li>重新生成 <code>etcd</code> 集群使用的证书文件。<em><strong>在所有的 Master 节点上操作</strong></em>。执行以下操作，基于以上步骤中重新生成的 CA 证书，签发 <code>etcd</code> 集群所需的其他证书 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm init phase certs etcd-healthcheck-client</span><br><span class="line">kubeadm init phase certs etcd-peer</span><br><span class="line">kubeadm init phase certs etcd-server</span><br></pre></td></tr></table></figure></li>
<li>重新检查 <code>etcd</code> 集群及 Kubernetes 集群的状态 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl 127.0.0.1:2381/health</span></span><br><span class="line">&#123;&quot;health&quot;:&quot;true&quot;,&quot;reason&quot;:&quot;&quot;&#125;</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME          STATUS   ROLES           AGE    VERSION</span><br><span class="line">k8s-master1   Ready    control-plane   369d   v1.24.7</span><br><span class="line">k8s-master2   Ready    control-plane   369d   v1.24.7</span><br><span class="line">k8s-master3   Ready    control-plane   369d   v1.24.7</span><br><span class="line">k8s-worker1   Ready    &lt;none&gt;          369d   v1.24.7</span><br><span class="line">k8s-worker2   Ready    &lt;none&gt;          369d   v1.24.7</span><br></pre></td></tr></table></figure></li>
</ol>
<p>安装以上步骤操作后，检查 Kubernetes 集群中管理节点 Pod 状态发现 <code>master3</code> 节点上面的 <code>kube-apiserver</code>、<code>kube-scheduler</code> 和 <code>kube-controller-manager</code> 处于 <code>CrashLoopBackOff</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pods -n kube-system</span></span><br><span class="line">NAME                                  READY   STATUS             RESTARTS          AGE</span><br><span class="line">coredns-6d4b75cb6d-57jhk              0/1     Pending            0                 2d23h</span><br><span class="line">coredns-6d4b75cb6d-w6wgg              0/1     Pending            0                 2d23h</span><br><span class="line">etcd-k8s-master1                      1/1     Running            1 (68d ago)       2d22h</span><br><span class="line">etcd-k8s-master2                      1/1     Running            0                 2d23h</span><br><span class="line">etcd-k8s-master3                      1/1     Running            0                 2d23h</span><br><span class="line">kube-apiserver-k8s-master1            1/1     Running            792 (12m ago)     2d23h</span><br><span class="line">kube-apiserver-k8s-master2            1/1     Running            4 (68d ago)       2d23h</span><br><span class="line">kube-apiserver-k8s-master3            0/1     CrashLoopBackOff   807 (18s ago)     2d23h</span><br><span class="line">kube-controller-manager-k8s-master1   1/1     Running            825 (14m ago)     2d23h</span><br><span class="line">kube-controller-manager-k8s-master2   1/1     Running            0                 2d23h</span><br><span class="line">kube-controller-manager-k8s-master3   0/1     CrashLoopBackOff   823 (4m35s ago)   2d23h</span><br><span class="line">kube-scheduler-k8s-master3            0/1     CrashLoopBackOff   823 (3m53s ago)   2d23h</span><br></pre></td></tr></table></figure>
<p>检查 <code>kube-apiserver-k8s-master3</code> 日志发现是因为证书问题无法连接到 <code>etcd</code>。<strong>原因可能是因为 这些组件连接 <code>etcd</code> 的证书导致</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl logs -n kube-system kube-apiserver-k8s-master3</span></span><br><span class="line">clientconn.go:1331] [core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1 &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err: connection error: desc = &quot;transport: authentication handshake failed: remote error: tls: bad certificate&quot;. Reconnecting...</span><br><span class="line">clientconn.go:1331] [core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1 &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err: connection error: desc = &quot;transport: authentication handshake failed: remote error: tls: bad certificate&quot;. Reconnecting...</span><br><span class="line">clientconn.go:1331] [core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1 &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err: connection error: desc = &quot;transport: authentication handshake failed: remote error: tls: bad certificate&quot;. Reconnecting...</span><br><span class="line">clientconn.go:1331] [core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1 &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err: connection error: desc = &quot;transport: authentication handshake failed: remote error: tls: bad certificate&quot;. Reconnecting...</span><br><span class="line">clientconn.go:1331] [core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1 &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err: connection error: desc = &quot;transport: authentication handshake failed: remote error: tls: bad certificate&quot;. Reconnecting...</span><br></pre></td></tr></table></figure>
<p><strong>在 <code>master3</code>节点上</strong>执行以下命令更新 <code>kube-apiserver</code> 连接 <code>etcd</code> 时使用的客户端证书 <code>/etc/kubernetes/pki/apiserver-etcd-client.crt</code>，需要先删除 <code>/etc/kubernetes/pki/apiserver-etcd-client.crt</code> 和 <code>/etc/kubernetes/pki/apiserver-etcd-client.key</code>，否则更新时会报错：<code>error execution phase certs/apiserver-etcd-client: [certs] certificate apiserver-etcd-client not signed by CA certificate etcd/ca: x509: certificate signed by unknown authority (possibly because of &quot;crypto/rsa: verification error&quot; while trying to verify candidate authority certificate &quot;etcd-ca&quot;)</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubeadm init phase certs apiserver-etcd-client --config=/root/kubeadm-config.yaml</span> </span><br><span class="line">W1211 15:06:57.911002    1401 common.go:84] your configuration file uses a deprecated API spec: &quot;kubeadm.k8s.io/v1beta2&quot;. Please use &#x27;kubeadm config migrate --old-config old.yaml --new-config new.yaml&#x27;, which will write the new, similar spec using a newer API version.</span><br><span class="line">W1211 15:06:57.911751    1401 initconfiguration.go:120] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme &quot;unix&quot; to the &quot;criSocket&quot; with value &quot;/var/run/containerd/containerd.sock&quot;. Please update your configuration!</span><br><span class="line">I1211 15:06:58.238799    1401 version.go:255] remote version is much newer: v1.28.4; falling back to: stable-1.24</span><br><span class="line">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>检查 <code>kube-controller-manager-k8s-master3</code> 日志和 <code>kube-scheduler-k8s-master3</code> 日志，显示相关端口已经绑定，kill 掉被占用端口的进程后重试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl logs -n kube-system kube-controller-manager-k8s-master3</span></span><br><span class="line">I1211 07:04:37.643782       1 serving.go:348] Generated self-signed cert in-memory</span><br><span class="line">failed to create listener: failed to listen on 0.0.0.0:10257: listen tcp 0.0.0.0:10257: bind: address already in use</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl logs -n kube-system kube-scheduler-k8s-master3</span></span><br><span class="line">I1211 07:10:21.304329       1 serving.go:348] Generated self-signed cert in-memory</span><br><span class="line">E1211 07:10:21.304587       1 run.go:74] &quot;command failed&quot; err=&quot;failed to create listener: failed to listen on 0.0.0.0:10259: listen tcp 0.0.0.0:10259: bind: address already in use&quot;</span><br></pre></td></tr></table></figure>

<h3 id="更新证书后，kube-apiserver-报证书过期错误"><a href="#更新证书后，kube-apiserver-报证书过期错误" class="headerlink" title="更新证书后，kube-apiserver 报证书过期错误"></a>更新证书后，kube-apiserver 报证书过期错误</h3><p>在更新集群证书后，<code>kube-apiserver</code> 异常，检查日志，有证书过期的错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">authentication.go:63] &quot;Unable to authenticate the request&quot; err=&quot;[x509: certificate has expired or is not yet valid: current time 2023-12-11T07:35:22Z is after 2023-12-06T09:50:35Z, verifying certificate SN=2750116196247444292, SKID=, AKID=08:39:2B:D0:14:00:F4:7F:3F:58:26:36:32:BA:F8:0E:0E:B4:D4:83 failed: x509: certificate has expired or is not yet valid: current time 2023-12-11T07:35:22Z is after 2023-12-06T09:50:35Z]&quot;</span><br><span class="line">authentication.go:63] &quot;Unable to authenticate the request&quot; err=&quot;[x509: certificate has expired or is not yet valid: current time 2023-12-11T07:35:22Z is after 2023-12-06T09:50:35Z, verifying certificate SN=2750116196247444292, SKID=, AKID=08:39:2B:D0:14:00:F4:7F:3F:58:26:36:32:BA:F8:0E:0E:B4:D4:83 failed: x509: certificate has expired or is not yet valid: current time 2023-12-11T07:35:22Z is after 2023-12-06T09:50:35Z]&quot;</span><br><span class="line">authentication.go:63] &quot;Unable to authenticate the request&quot; err=&quot;[x509: certificate has expired or is not yet valid: current time 2023-12-11T07:35:22Z is after 2023-12-06T09:50:35Z, verifying certificate SN=2750116196247444292, SKID=, AKID=08:39:2B:D0:14:00:F4:7F:3F:58:26:36:32:BA:F8:0E:0E:B4:D4:83 failed: x509: certificate has expired or is not yet valid: current time 2023-12-11T07:35:22Z is after 2023-12-06T09:50:35Z]&quot;</span><br><span class="line">authentication.go:63] &quot;Unable to authenticate the request&quot; err=&quot;[x509: certificate has expired or is not yet valid: current time 2023-12-11T07:35:22Z is after 2023-12-06T09:50:35Z, verifying certificate SN=2750116196247444292, SKID=, AKID=08:39:2B:D0:14:00:F4:7F:3F:58:26:36:32:BA:F8:0E:0E:B4:D4:83 failed: x509: certificate has expired or is not yet valid: current time 2023-12-11T07:35:22Z is after 2023-12-06T09:50:35Z]&quot;</span><br><span class="line">authentication.go:63] &quot;Unable to authenticate the request&quot; err=&quot;[x509: certificate has expired or is not yet valid: current time 2023-12-11T07:35:22Z is after 2023-12-06T09:50:35Z, verifying certificate SN=2750116196247444292, SKID=, AKID=08:39:2B:D0:14:00:F4:7F:3F:58:26:36:32:BA:F8:0E:0E:B4:D4:83 failed: x509: certificate has expired or is not yet valid: current time 2023-12-11T07:35:22Z is after 2023-12-06T09:50:35Z]&quot;</span><br><span class="line">authentication.go:63] &quot;Unable to authenticate the request&quot; err=&quot;[invalid bearer token, service account token has been invalidated]&quot;</span><br><span class="line">authentication.go:63] &quot;Unable to authenticate the request&quot; err=&quot;[invalid bearer token, service account token has been invalidated]&quot;</span><br></pre></td></tr></table></figure>
<p>这个可能是因为更新证书后，其他节点依旧使用旧的证书在请求 <code>kube-apiserver</code>，此时可以重启所有节点上的 <code>kubelet</code> 服务。</p>
<h1 id="Ingress-接入异常"><a href="#Ingress-接入异常" class="headerlink" title="Ingress 接入异常"></a>Ingress 接入异常</h1><h2 id="503-Service-Temporarily-Unavailable"><a href="#503-Service-Temporarily-Unavailable" class="headerlink" title="503 Service Temporarily Unavailable"></a>503 Service Temporarily Unavailable</h2><p><code>Deployment</code>，<code>Service</code>，<code>Ingress</code> 部署后，通过 <code>Ingress</code> 配置的域名访问，显示 <code>503 Service Temporarily Unavailable</code><br><img src="https://i.csms.tech/img_110.png"></p>
<p><strong>排查步骤</strong></p>
<p>检查 <code>Ingress-Nginx</code> Pod 的日志，检索对应域名日志，显示返回码为 503</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">52.77.198.154 - - [15/Dec/2022:02:10:59 +0000] &quot;GET /graph HTTP/1.1&quot; 503 592 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot; 507 0.000 [prometheus-prometheus-service-8080] [] - - - - 00b07fe234401054153fdbd0ffafb158</span><br></pre></td></tr></table></figure>

<p>查看 Ingress 对应的 <code>Service</code>，从以下输出中可以看到对应的 <code>Service</code> 为 <code>prometheus-service</code>，端口为 8080</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get ingress -n prometheus -o wide</span></span><br><span class="line">NAME            CLASS   HOSTS                     ADDRESS                      PORTS   AGE</span><br><span class="line">prometheus-ui   nginx   prometheus.example.com    172.31.23.72,172.31.27.193   80      19h</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe ingress prometheus-ui -n prometheus</span> </span><br><span class="line">Name:             prometheus-ui</span><br><span class="line">Labels:           &lt;none&gt;</span><br><span class="line">Namespace:        prometheus</span><br><span class="line">Address:          172.31.23.72,172.31.27.193</span><br><span class="line">Ingress Class:    nginx</span><br><span class="line">Default backend:  &lt;default&gt;</span><br><span class="line">Rules:</span><br><span class="line">  Host                     Path  Backends</span><br><span class="line">  ----                     ----  --------</span><br><span class="line">  prometheus.example.com  </span><br><span class="line">                           /   prometheus-service:8080 ()</span><br><span class="line">Annotations:               field.cattle.io/publicEndpoints:</span><br><span class="line">                             [&#123;&quot;addresses&quot;:[&quot;172.31.23.72&quot;,&quot;172.31.27.193&quot;],&quot;port&quot;:80,&quot;protocol&quot;:&quot;HTTP&quot;,&quot;serviceName&quot;:&quot;prometheus:prometheus-service&quot;,&quot;ingressName&quot;:&quot;pr...</span><br><span class="line">Events:                    &lt;none&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看 <code>Service</code> 信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get services -n prometheus -o wide</span></span><br><span class="line">NAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE   SELECTOR</span><br><span class="line">prometheus-service   ClusterIP   10.99.75.232   &lt;none&gt;        8090/TCP   19h   app=prometheus-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe service -n prometheus prometheus-service</span></span><br><span class="line">Name:              prometheus-service</span><br><span class="line">Namespace:         prometheus</span><br><span class="line">Labels:            &lt;none&gt;</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          app=prometheus-server</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP Family Policy:  SingleStack</span><br><span class="line">IP Families:       IPv4</span><br><span class="line">IP:                10.99.75.232</span><br><span class="line">IPs:               10.99.75.232</span><br><span class="line">Port:              prometheus-port  8090/TCP</span><br><span class="line">TargetPort:        9090/TCP</span><br><span class="line">Endpoints:         10.244.3.95:9090</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure>
<p>从以上信息可以看到，服务的端口为 <code>Port: prometheus-port  8090/TCP</code>，而 Ingress 中配置的服务端口为 <code>8080</code> ，修改 Ingress 配置，将服务端口修改正确。修改后访问正常。</p>
<h1 id="其他错误"><a href="#其他错误" class="headerlink" title="其他错误"></a>其他错误</h1><h2 id="invalid-Host-header"><a href="#invalid-Host-header" class="headerlink" title="invalid Host header"></a>invalid Host header</h2><p>在 Master 节点上执行以下命令时报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it -n kube-system coredns-6d4b75cb6d-kdlqg -- sh</span></span><br><span class="line">error: Internal error occurred: error executing command in container: http: invalid Host header</span><br></pre></td></tr></table></figure>
<p>此错误主要是因为 Kubernetes 和 <code>cri-docker</code> 版本问题导致 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[GO 1.20.6 breaks cri-dockerd](https://github.com/k3s-io/k3s/issues/8089)
">[3]</span></a></sup></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://cloud.tencent.com/developer/article/1456389">相关参考</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://cloud.tencent.com/developer/article/1931089">Back-off restarting failed container 怎么办</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://tonybai.com/2017/10/16/out-of-node-resource-handling-in-kubernetes-cluster/">ephemeral-storage 问题</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/k3s-io/k3s/issues/8089">GO 1.20.6 breaks cri-dockerd</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes 配置文件说明</title>
    <url>/202211291130/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7 5.4.212-1</li>
<li>Docker 20.10.18</li>
<li>containerd.io-1.6.8</li>
<li>kubectl-1.25.0</li>
<li>kubeadm-1.25.0</li>
<li>kubelet-1.25.0</li>
<li>kube-flannel</li>
</ul>
<h1 id="常见配置文件说明"><a href="#常见配置文件说明" class="headerlink" title="常见配置文件说明"></a>常见配置文件说明</h1><table>
<thead>
<tr>
<th>文件&#x2F;目录</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>/etc/kubernetes/&#123;admin.conf, controller-manager.conf, kubelet.conf, scheduler.conf &#125;</code></td>
<td>master 管理节点上的管理节点（<code>admin</code>，<code>controller-manager</code>，<code>kubelet</code>，<code>scheduler</code>）配置文件 <br/><code>admin</code> 配置文件具有全局管理员权限，可以跳过 RBAC 权限控制系统，应该禁止其共享。</td>
<td></td>
</tr>
<tr>
<td><code>/etc/kubernetes/kubelet.conf</code></td>
<td>worker 节点上，<code>kubelet</code> 配置文件</td>
<td></td>
</tr>
<tr>
<td><code>/etc/kubernetes/manifests/</code></td>
<td>管理节点上，管理节点的启动参数配置文件，主要包括 <code>etcd.yaml</code>，  <code>kube-apiserver.yaml</code>，  <code>kube-controller-manager.yaml</code>，  <code>kube-scheduler.yaml</code>。是静态 Pod 的主要配置路径</td>
<td></td>
</tr>
<tr>
<td><code>/etc/kubernetes/pki/</code></td>
<td>- 管理节点上，存放所有节点之间的通信证书文件， <br/>- worker 节点上，存放集群 CA 证书文件。  只有 <code>ca.crt</code></td>
<td></td>
</tr>
<tr>
<td><code>/etc/cni/net.d/10-flannel.conflist</code></td>
<td>管理节点上，<code>flannel</code> 配置文件</td>
<td></td>
</tr>
</tbody></table>
<span id="more"></span>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes ConfigMap 使用说明</title>
    <url>/202212071353/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Kubernetes 1.24</li>
</ul>
<p><code>ConfigMap</code> 是 Kubernetes 用来向应用 Pod 中注入配置数据的方法。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[配置 Pod 使用 ConfigMap](https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/)">[1]</span></a></sup></p>
<h1 id="使用-ConfigMap-数据定义容器环境变量"><a href="#使用-ConfigMap-数据定义容器环境变量" class="headerlink" title="使用 ConfigMap 数据定义容器环境变量"></a>使用 ConfigMap 数据定义容器环境变量</h1><h2 id="使用单个-ConfigMap-中的数据定义容器环境变量"><a href="#使用单个-ConfigMap-中的数据定义容器环境变量" class="headerlink" title="使用单个 ConfigMap 中的数据定义容器环境变量"></a>使用单个 ConfigMap 中的数据定义容器环境变量</h2><ol>
<li>在 <code>ConfigMap</code> 中将环境变量定义为键值对: <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create configmap special-config --from-literal=special.how=very</span><br></pre></td></tr></table></figure></li>
<li>将 ConfigMap 中定义的 special.how 赋值给 Pod 规约中的 SPECIAL_LEVEL_KEY 环境变量。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">   </span><br><span class="line">kind: Pod</span><br><span class="line">   </span><br><span class="line">metadata:</span><br><span class="line">   </span><br><span class="line">  name: dapi-test-pod</span><br><span class="line">   </span><br><span class="line">spec:</span><br><span class="line">   </span><br><span class="line">  containers:</span><br><span class="line">   </span><br><span class="line">    - name: test-container</span><br><span class="line">   </span><br><span class="line">      image: registry.k8s.io/busybox</span><br><span class="line">   </span><br><span class="line">      command: [ &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;env&quot; ]</span><br><span class="line">   </span><br><span class="line">      env:</span><br><span class="line">   </span><br><span class="line">        # 定义环境变量</span><br><span class="line">   </span><br><span class="line">        - name: SPECIAL_LEVEL_KEY</span><br><span class="line">   </span><br><span class="line">          valueFrom:</span><br><span class="line">   </span><br><span class="line">            configMapKeyRef:</span><br><span class="line">   </span><br><span class="line">              # ConfigMap 包含你要赋给 SPECIAL_LEVEL_KEY 的值</span><br><span class="line">   </span><br><span class="line">              name: special-config</span><br><span class="line">   </span><br><span class="line">              # 指定与取值相关的键名</span><br><span class="line">   </span><br><span class="line">              key: special.how</span><br><span class="line">   </span><br><span class="line">  restartPolicy: Never</span><br></pre></td></tr></table></figure>
 现在，Pod 的输出包含环境变量 <code>SPECIAL_LEVEL_KEY=very</code>。</li>
</ol>
<span id="more"></span>

<h2 id="使用来自多个-ConfigMap-的数据定义容器环境变量"><a href="#使用来自多个-ConfigMap-的数据定义容器环境变量" class="headerlink" title="使用来自多个 ConfigMap 的数据定义容器环境变量"></a>使用来自多个 ConfigMap 的数据定义容器环境变量</h2><p>创建 <code>ConfigMap</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用来自多个 ConfigMap 的数据定义容器环境变量](https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/#define-container-environment-variables-with-data-from-multiple-configmaps)
">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">  </span><br><span class="line">kind: ConfigMap</span><br><span class="line">  </span><br><span class="line">metadata:</span><br><span class="line">  </span><br><span class="line">  name: special-config</span><br><span class="line">  </span><br><span class="line">  namespace: default</span><br><span class="line">  </span><br><span class="line">data:</span><br><span class="line">  </span><br><span class="line">  special.how: very</span><br><span class="line">  </span><br><span class="line">---</span><br><span class="line">  </span><br><span class="line">apiVersion: v1</span><br><span class="line">  </span><br><span class="line">kind: ConfigMap</span><br><span class="line">  </span><br><span class="line">metadata:</span><br><span class="line">  </span><br><span class="line">  name: env-config</span><br><span class="line">  </span><br><span class="line">  namespace: default</span><br><span class="line">  </span><br><span class="line">data:</span><br><span class="line">  </span><br><span class="line">  log_level: INFO</span><br></pre></td></tr></table></figure>
<p>在 Pod 规约中定义环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">  </span><br><span class="line">kind: Pod</span><br><span class="line">  </span><br><span class="line">metadata:</span><br><span class="line">  </span><br><span class="line">  name: dapi-test-pod</span><br><span class="line">  </span><br><span class="line">spec:</span><br><span class="line">  </span><br><span class="line">  containers:</span><br><span class="line">  </span><br><span class="line">    - name: test-container</span><br><span class="line">  </span><br><span class="line">      image: registry.k8s.io/busybox</span><br><span class="line">  </span><br><span class="line">      command: [ &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;env&quot; ]</span><br><span class="line">  </span><br><span class="line">      env:</span><br><span class="line">  </span><br><span class="line">        - name: SPECIAL_LEVEL_KEY</span><br><span class="line">  </span><br><span class="line">          valueFrom:</span><br><span class="line">  </span><br><span class="line">            configMapKeyRef:</span><br><span class="line">  </span><br><span class="line">              name: special-config</span><br><span class="line">  </span><br><span class="line">              key: special.how</span><br><span class="line">  </span><br><span class="line">        - name: LOG_LEVEL</span><br><span class="line">  </span><br><span class="line">          valueFrom:</span><br><span class="line">  </span><br><span class="line">            configMapKeyRef:</span><br><span class="line">  </span><br><span class="line">              name: env-config</span><br><span class="line">  </span><br><span class="line">              key: log_level</span><br><span class="line">  </span><br><span class="line">  restartPolicy: Never</span><br></pre></td></tr></table></figure>
<h2 id="将-ConfigMap-中的所有键值对配置为容器环境变量"><a href="#将-ConfigMap-中的所有键值对配置为容器环境变量" class="headerlink" title="将 ConfigMap 中的所有键值对配置为容器环境变量"></a>将 ConfigMap 中的所有键值对配置为容器环境变量</h2><p>创建一个包含多个键值对的 ConfigMap。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">  </span><br><span class="line">kind: ConfigMap</span><br><span class="line">  </span><br><span class="line">metadata:</span><br><span class="line">  </span><br><span class="line">  name: special-config</span><br><span class="line">  </span><br><span class="line">  namespace: default</span><br><span class="line">  </span><br><span class="line">data:</span><br><span class="line">  </span><br><span class="line">  SPECIAL_LEVEL: very</span><br><span class="line">  </span><br><span class="line">  SPECIAL_TYPE: charm</span><br></pre></td></tr></table></figure>
<p>使用 <code>envFrom</code> 将所有 <code>ConfigMap</code> 的数据定义为容器环境变量，<code>ConfigMap</code> 中的键成为 Pod 中的环境变量名称。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">  </span><br><span class="line">kind: Pod</span><br><span class="line">  </span><br><span class="line">metadata:</span><br><span class="line">  </span><br><span class="line">  name: dapi-test-pod</span><br><span class="line">  </span><br><span class="line">spec:</span><br><span class="line">  </span><br><span class="line">  containers:</span><br><span class="line">  </span><br><span class="line">    - name: test-container</span><br><span class="line">  </span><br><span class="line">      image: registry.k8s.io/busybox</span><br><span class="line">  </span><br><span class="line">      command: [ &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;env&quot; ]</span><br><span class="line">  </span><br><span class="line">      envFrom:</span><br><span class="line">  </span><br><span class="line">      - configMapRef:</span><br><span class="line">  </span><br><span class="line">          name: special-config</span><br><span class="line">  </span><br><span class="line">  restartPolicy: Never</span><br></pre></td></tr></table></figure>

<h2 id="将-ConfigMap-内容挂载到容器中的文件"><a href="#将-ConfigMap-内容挂载到容器中的文件" class="headerlink" title="将 ConfigMap 内容挂载到容器中的文件"></a>将 ConfigMap 内容挂载到容器中的文件</h2><p>下面是一个将 ConfigMap 以卷的形式进行挂载的 Pod 示例： <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[在 Pod 中将 ConfigMap 当做文件使用](https://kubernetes.io/zh-cn/docs/concepts/configuration/configmap/#%E5%9C%A8-pod-%E4%B8%AD%E5%B0%86-configmap-%E5%BD%93%E5%81%9A%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8)">[3]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mypod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: mypod</span><br><span class="line">    image: redis</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: foo</span><br><span class="line">      mountPath: &quot;/etc/foo&quot;</span><br><span class="line">      readOnly: true</span><br><span class="line">  volumes:</span><br><span class="line">  - name: foo</span><br><span class="line">    configMap:</span><br><span class="line">      name: myconfigmap</span><br></pre></td></tr></table></figure>

<p>挂载之后，<code>configMap</code> 中的每个键会变成 <code>spec.containers[].volumeMounts[].mountPath</code> 下面的一个文件名。</p>
<p>将 <code>configMap</code> 暴露为卷可以达到配置热更新的效果，当 <code>configMap</code> 更新后，卷中引用它的所有文件也会相应更新，进程发现文件被改变后进行重载（需要进程有此功能），无需重新创建 Pod 或者重启容器。</p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/">配置 Pod 使用 ConfigMap</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/#define-container-environment-variables-with-data-from-multiple-configmaps">使用来自多个 ConfigMap 的数据定义容器环境变量</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/configmap/#%E5%9C%A8-pod-%E4%B8%AD%E5%B0%86-configmap-%E5%BD%93%E5%81%9A%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8">在 Pod 中将 ConfigMap 当做文件使用</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes dns</title>
    <url>/202305031339/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 5.4.225-1</li>
<li>Kubernetes v1.24.7</li>
</ul>
<p>Kubernetes DNS 服务的功能，是用来解析 Kubernetes 集群内的 Pod 和 Service 的域名，一般只供集群内部使用，不给外部使用。</p>
<p>默认情况下，Kubernetes DNS 应用部署后，会对外暴露一个 Service，集群内的容器通过访问该 Service 获得域名解析服务，这个 Service 的 ClusterIP 一般情况下都是固定的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get services -n kube-system -o wide</span></span><br><span class="line">NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE    SELECTOR</span><br><span class="line">kube-dns   ClusterIP   10.96.0.10   &lt;none&gt;        53/UDP,53/TCP,9153/TCP   147d   k8s-app=kube-dns</span><br></pre></td></tr></table></figure>

<p>当 Kubernetes DNS 服务获得 ClusterIP 后，系统会给 Kubelet 配置启动参数指定 DNS Service 的 ClusterIP，DNS Service 的 IP 会在容器启动时传入，并写入容器系统的 DNS 配置中（一般为 <code>/etc/resolv.conf</code> 文件）</p>
<p>根据 <code>kubelet</code> 服务的启动命令，配置参数可以写在以下相关配置文件中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl status kubelet -l</span></span><br><span class="line">● kubelet.service - kubelet: The Kubernetes Node Agent</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: /usr/lib/systemd/system/kubelet.service.d</span><br><span class="line">           └─10-kubeadm.conf</span><br><span class="line">   Active: active (running) since Tue 2023-05-02 16:06:16 CST; 21h ago</span><br><span class="line">     Docs: https://kubernetes.io/docs/</span><br><span class="line"> Main PID: 1413 (kubelet)</span><br><span class="line">    Tasks: 29</span><br><span class="line">   Memory: 203.0M</span><br><span class="line">   CGroup: /system.slice/kubelet.service</span><br><span class="line">           └─1413 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \</span><br><span class="line">                                   --kubeconfig=/etc/kubernetes/kubelet.conf \</span><br><span class="line">                                   --config=/var/lib/kubelet/config.yaml \</span><br><span class="line">                                   --container-runtime=remote \</span><br><span class="line">                                   --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock \</span><br><span class="line">                                   --pod-infra-container-image=k8s.gcr.io/pause:3.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps aux | grep kubelet</span></span><br><span class="line">/usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf 、</span><br><span class="line">                 --kubeconfig=/etc/kubernetes/kubelet.conf \</span><br><span class="line">                 --config=/var/lib/kubelet/config.yaml \</span><br><span class="line">                 --container-runtime=remote \</span><br><span class="line">                 --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock \</span><br><span class="line">                 --pod-infra-container-image=k8s.gcr.io/pause:3.7</span><br></pre></td></tr></table></figure>
<p>DNS 的相关配置在文件 <code>/var/lib/kubelet/config.yaml</code> 中，主要选项为 <code>clusterDNS</code></p>
<figure class="highlight shell"><figcaption><span>/var/lib/kubelet/config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">authentication:</span><br><span class="line">  anonymous:</span><br><span class="line">    enabled: false</span><br><span class="line">  webhook:</span><br><span class="line">    cacheTTL: 0s</span><br><span class="line">    enabled: true</span><br><span class="line">  x509:</span><br><span class="line">    clientCAFile: /etc/kubernetes/pki/ca.crt</span><br><span class="line">authorization:</span><br><span class="line">  mode: Webhook</span><br><span class="line">  webhook:</span><br><span class="line">    cacheAuthorizedTTL: 0s</span><br><span class="line">    cacheUnauthorizedTTL: 0s</span><br><span class="line">cgroupDriver: systemd</span><br><span class="line">clusterDNS:</span><br><span class="line">- 10.96.0.10</span><br><span class="line">clusterDomain: cluster.local</span><br><span class="line">cpuManagerReconcilePeriod: 0s</span><br><span class="line">evictionPressureTransitionPeriod: 0s</span><br><span class="line">fileCheckFrequency: 0s</span><br><span class="line">healthzBindAddress: 127.0.0.1</span><br><span class="line">healthzPort: 10248</span><br><span class="line">httpCheckFrequency: 0s</span><br><span class="line">imageMinimumGCAge: 0s</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">logging:</span><br><span class="line">  flushFrequency: 0</span><br><span class="line">  options:</span><br><span class="line">    json:</span><br><span class="line">      infoBufferSize: &quot;0&quot;</span><br><span class="line">  verbosity: 0</span><br><span class="line">memorySwap: &#123;&#125;</span><br><span class="line">nodeStatusReportFrequency: 0s</span><br><span class="line">nodeStatusUpdateFrequency: 0s</span><br><span class="line">rotateCertificates: true</span><br><span class="line">runtimeRequestTimeout: 0s</span><br><span class="line">shutdownGracePeriod: 0s</span><br><span class="line">shutdownGracePeriodCriticalPods: 0s</span><br><span class="line">staticPodPath: /etc/kubernetes/manifests</span><br><span class="line">streamingConnectionIdleTimeout: 0s</span><br><span class="line">syncFrequency: 0s</span><br><span class="line">volumeStatsAggPeriod: 0s</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="Kubernetes-DNS-解析基本原理"><a href="#Kubernetes-DNS-解析基本原理" class="headerlink" title="Kubernetes DNS 解析基本原理"></a>Kubernetes DNS 解析基本原理</h1><p>对于 Service，Kubernetes NDS 会生成三类记录，分别是 A 记录、SRV 记录、CNAME 记录。</p>
<h2 id="A-记录"><a href="#A-记录" class="headerlink" title="A 记录"></a>A 记录</h2><p>A 记录用于做正向解析，将域名解析到对应的 IP 地址。Kubernetes 为 <code>normal</code> 和 <a href="https://csms.tech/202209241108/#无头服务（Headless-Services）"><code>headless</code></a> 类型的服务分配不同的 A 记录，不同之处在于 <code>headless</code> 类型的服务未分配 ClusterIP 且不执行负载均衡。</p>
<ul>
<li>DNS 为 <code>normal</code> 类型的 Service 分配一个 A 记录，域名遵循 <code>$&#123;your-svc-name&#125;.$&#123;your-namespace&#125;.svc.cluster.local</code>（其中 <code>cluster.local</code> 为集群默认的根域，可在 <code>kubelet</code> 设置 <code>clusterDomain</code> 中更改），A 记录指向 Service 的 ClusterIP。</li>
<li>DNS 为 <code>headless</code> 类型的 Service 分配一个 A 记录，域名遵循 <code>$&#123;your-svc-name&#125;.$&#123;your-namespace&#125;.svc.cluster.local</code>（其中 <code>cluster.local</code> 为集群默认的根域，可在 <code>kubelet</code> 设置 <code>clusterDomain</code> 中更改），A 记录指向就绪的 Pod 的 IP。DNS 不会自动将此 IP 配置为特定 Pod 的 IP，后端如果有多个就绪的 Pod，DNS 会添加所有解析。</li>
</ul>
<p>在集群内部，可以通过 <code>$&#123;your-svc-name&#125;.$&#123;your-namespace&#125;.svc.cluster.local</code> 访问任何服务，也可以通过简写 <code>$&#123;your-svc-name&#125;.$&#123;your-namespace&#125;</code> 直接访问。如果 Pod 和 Service 在同一个 namespace，可以通过 Service name （${your-svc-name}） 直接访问</p>
<h3 id="Pod-IP-的-A-记录"><a href="#Pod-IP-的-A-记录" class="headerlink" title="Pod IP 的 A 记录"></a>Pod IP 的 A 记录</h3><p>启用了 DNS 后，Pod 将被分配一个 DNS A 记录，格式如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;Pod-ip&#125;.<span class="variable">$&#123;Pod namespace&#125;</span>.pod.<span class="variable">$&#123;clusterDomain &#125;</span> --&gt; Pod IP</span></span><br></pre></td></tr></table></figure>
<p>${Pod-ip} 为 Pod 的 IP 地址使用 <code>-</code> 替换 <code>.</code>，如 Pod IP 为 <code>1.2.3.4</code>，${Pod-ip} 为 <code>1-2-3-4</code></p>
<p>如果在 Pod Spec 中指定了 <code>hostname</code> 和 <code>subdomain</code>，那么 Kubernetes DNS 会为 Pod 额外生产 A 记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;hostname&#125;.<span class="variable">$&#123;subdomain&#125;</span>.<span class="variable">$&#123;Pod namespace&#125;</span>.pod.<span class="variable">$&#123;clusterDomain &#125;</span> --&gt; Pod IP</span></span><br></pre></td></tr></table></figure>

<h2 id="SRV-记录"><a href="#SRV-记录" class="headerlink" title="SRV 记录"></a>SRV 记录</h2><p>SRV 记录通过在 DNS 中定义服务协议和地址（域名及端口）来促进服务发现。SRV 记录通常定义了 服务名称、协议、请求端口、请求域名（主机）、权重、优先级等内容。以下是一个 SRV 记录的示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">_sip._tcp.example.com    3600    IN    SRV    10    70  5060    srvrecord.example.com</span><br><span class="line">_sip._tcp.example.com    3600    IN    SRV    10    30  5060    srvrecord2.example.com</span><br></pre></td></tr></table></figure>

<p>在上面的示例中：</p>
<ul>
<li><code>_sip</code> - 是服务的名称</li>
<li><code>_tcp</code> - 服务使用的协议</li>
<li><code>10</code> - 表示优先级</li>
<li><code>70</code> - 表示权重</li>
<li><code>5060</code> - 服务要连接的 端口</li>
<li><code>srvrecord.example.com</code> - 服务要连接的主机</li>
</ul>
<p>Kubernetes 的 DNS 服务遵循以下规则为 Service 提供了服务端口的解析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">_$</span><span class="language-bash">&#123;port name&#125;._tcp.<span class="variable">$&#123;service name&#125;</span>.<span class="variable">$&#123;service namespace&#125;</span>.svc.cluster.local --&gt; Service Port</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>解析到的域名（主机）是 <code>$&#123;service name&#125;.$&#123;service namespace&#125;.svc.cluster.local</code><br>如果是 <code>headless</code> 类型的 Service ，解析到的域名（主机）是 Pod 的 域名。</p>
</blockquote>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>ingress-nginx 安装配置</title>
    <url>/202209301604/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7 5.4.212-1</li>
<li>Docker 20.10.18</li>
<li>containerd.io-1.6.8</li>
<li>kubectl-1.25.0</li>
<li>kubeadm-1.25.0</li>
<li>kubelet-1.25.0</li>
</ul>
<h1 id="安装-ingress-nginx-controller"><a href="#安装-ingress-nginx-controller" class="headerlink" title="安装 ingress-nginx controller"></a>安装 ingress-nginx controller</h1><p>此文档中的配置主要针对基于部署在裸机（安装通用 Linux 发行版的物理机或者云主机系统）上的 Kebernetes 集群</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.1/deploy/static/provider/cloud/deploy.yaml</span><br><span class="line">mv deploy.yaml ingress-nginx-controller-v1.3.1.yaml</span><br></pre></td></tr></table></figure>

<h2 id="基于-hostNetwork-的-ingress-nginx-controller"><a href="#基于-hostNetwork-的-ingress-nginx-controller" class="headerlink" title="基于 hostNetwork 的 ingress-nginx controller"></a>基于 hostNetwork 的 ingress-nginx controller</h2><p>编辑 <code>ingress-nginx-controller</code> 的 <code>Deployment</code> 配置文件，在 <code>Deployment</code> 中的 <code>.spec.template.spec</code> 下添加字段 <code>hostNetwork: true</code>，以使 <code>ingress-nginx-controller</code> 可以使用节点的主机网络提供对外访问<br><img src="https://i.csms.tech/img_61.png"></p>
<span id="more"></span>

<p>默认情况下，使用了 <code>hostNetwork: true</code> 配置的 <code>Pod</code>，无法使用集群内部的 DNS （如 <code>CoreDNS</code>）进行域名解析，除非 <code>dnsPolicy</code> 字段配置值为 <code>ClusterFirstWithHostNet</code>。</p>
<p>如果 <code>ingress-nginx-controller</code> 需要解析集群内部的域名，需要在 <code>Deployment</code> 中的 <code>.spec.template.spec</code> 修改以下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnsPolicy: ClusterFirstWithHostNet</span><br></pre></td></tr></table></figure>


<p>此种模式之下，<code>ingress-nginx-controller</code> 的 <code>Pod</code> 会绑定主机端口的 80 和 443 端口。此方式不需要创建暴露 <code>ingress-nginx-controller</code> 的 <code>Service</code>，如果有，建议删除<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Via the host network](https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network)">[1]</span></a></sup> </p>
<figure class="highlight shell"><figcaption><span>ingress-nginx-controller-v1.3.1.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">---</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">apiVersion: v1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kind: Service</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">metadata:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> labels:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   app.kubernetes.io/component: controller</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   app.kubernetes.io/instance: ingress-nginx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   app.kubernetes.io/name: ingress-nginx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   app.kubernetes.io/part-of: ingress-nginx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   app.kubernetes.io/version: 1.3.1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> name: ingress-nginx-controller</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> namespace: ingress-nginx</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">spec:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> externalTrafficPolicy: Local</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> ipFamilies:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> - IPv4</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> ipFamilyPolicy: SingleStack</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> ports:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> - appProtocol: http</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   name: http</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   port: 80</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   protocol: TCP</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   targetPort: http</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> - appProtocol: https</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   name: https</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   port: 443</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   protocol: TCP</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   targetPort: https</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> selector:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   app.kubernetes.io/component: controller</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   app.kubernetes.io/instance: ingress-nginx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   app.kubernetes.io/name: ingress-nginx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> <span class="built_in">type</span>: LoadBalancer</span></span><br></pre></td></tr></table></figure>

<p>在没有 <code>Service</code> 暴露 <code>ingress-nginx-controller</code> 的 <code>Pod</code> 情况下，容器启动参数中的 <code>--publish-service</code> 将会为空（未使用），需要注释或删除此启动参数。部署之后 <code>Ingress</code> 对象中的 <code>ADDRESS</code> 将为空</p>
<figure class="highlight shell"><figcaption><span>Deployment.spec.template.spec.containers[*].args</span></figcaption><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  hostNetwork: true</span><br><span class="line">  containers:</span><br><span class="line">  - args:</span><br><span class="line">    - /nginx-ingress-controller</span><br><span class="line">    #- --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller</span><br><span class="line">    - --election-id=ingress-controller-leader</span><br><span class="line">    - --controller-class=k8s.io/ingress-nginx</span><br><span class="line">    - --ingress-class=nginx</span><br><span class="line">    - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller</span><br><span class="line">    - --validating-webhook=:8443</span><br><span class="line">    - --validating-webhook-certificate=/usr/local/certificates/cert</span><br><span class="line">    - --validating-webhook-key=/usr/local/certificates/key</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>部署成功后，查看 <code>Service</code> 对象，结果中不包含 <code>service/ingress-nginx-controller</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get services -n ingress-nginx</span></span><br><span class="line">NAME                                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">ingress-nginx-controller-admission   ClusterIP   10.103.195.162   &lt;none&gt;        443/TCP   39s</span><br></pre></td></tr></table></figure>
<p>查看 <code>Ingress</code> 对象，<code>ADDRESS</code> 为空</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get ingress -A</span></span><br><span class="line">NAMESPACE   NAME              CLASS   HOSTS          ADDRESS   PORTS   AGE</span><br><span class="line">default     example-ingress   nginx   cs1.k8s.info             80      26h</span><br></pre></td></tr></table></figure>
<p>如果希望显示节点 IP 地址，可以为容器添加启动参数 <code>- --report-node-internal-ip-address</code></p>
<figure class="highlight shell"><figcaption><span>Deployment.spec.template.spec.containers[*].args</span></figcaption><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  hostNetwork: true</span><br><span class="line">  containers:</span><br><span class="line">  - args:</span><br><span class="line">    - /nginx-ingress-controller</span><br><span class="line">    #- --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller</span><br><span class="line">    - --election-id=ingress-controller-leader</span><br><span class="line">    - --controller-class=k8s.io/ingress-nginx</span><br><span class="line">    - --ingress-class=nginx</span><br><span class="line">    - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller</span><br><span class="line">    - --validating-webhook=:8443</span><br><span class="line">    - --validating-webhook-certificate=/usr/local/certificates/cert</span><br><span class="line">    - --validating-webhook-key=/usr/local/certificates/key</span><br><span class="line">    - --report-node-internal-ip-address</span><br></pre></td></tr></table></figure>
<p>成功部署后，再次查看 <code>Ingress</code> 资源，<code>ADDRESS</code> 会上报节点的 IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get ingress -o wide</span></span><br><span class="line">NAME              CLASS   HOSTS          ADDRESS        PORTS   AGE</span><br><span class="line">example-ingress   nginx   cs1.k8s.info   172.31.0.230   80      27h</span><br></pre></td></tr></table></figure>

<p>此种模式下，集群中的每个节点上，只能有一个 <code>ingress-nginx-controller</code> 的 <code>Pod</code> 存在，因为不可能让同一个端口绑定多次。为了确保每个节点上只能调度一个 <code>ingress-nginx-controller</code> ，可以使用 <code>DaemonSet</code> 代替 <code>Deployment</code> 的方式来部署 <code>ingress-nginx-controller</code></p>
<p>默认情况下，<code>ingress-nginx-controller</code> 日志输出到 <code>stdout</code>，可以添加启动参数 <code>--log_dir=/var/log/nginx/</code> 指定日志输出目录</p>
<figure class="highlight shell"><figcaption><span>Deployment.spec.template.spec.containers[*].args</span></figcaption><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  hostNetwork: true</span><br><span class="line">  containers:</span><br><span class="line">  - args:</span><br><span class="line">    - /nginx-ingress-controller</span><br><span class="line">    #- --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller</span><br><span class="line">    - --election-id=ingress-controller-leader</span><br><span class="line">    - --controller-class=k8s.io/ingress-nginx</span><br><span class="line">    - --ingress-class=nginx</span><br><span class="line">    - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller</span><br><span class="line">    - --validating-webhook=:8443</span><br><span class="line">    - --validating-webhook-certificate=/usr/local/certificates/cert</span><br><span class="line">    - --validating-webhook-key=/usr/local/certificates/key</span><br><span class="line">    - --report-node-internal-ip-address</span><br><span class="line">    </span><br><span class="line">    # controller 日志选项</span><br><span class="line">    - --log_dir=/var/log/nginx/</span><br><span class="line">    - --logtostderr=false</span><br></pre></td></tr></table></figure>
<p>修改配置后，使用以下命令使配置生效：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ingress-nginx-controller-v1.3.1.yaml</span><br></pre></td></tr></table></figure>
<p>使用以下命令删除此配置部署得相关资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl delete -f ingress-nginx-controller-v1.3.1.yaml</span><br></pre></td></tr></table></figure>

<h1 id="ingress-nginx-相关配置"><a href="#ingress-nginx-相关配置" class="headerlink" title="ingress-nginx 相关配置"></a>ingress-nginx 相关配置</h1><p>自定义 nginx 配置，可以使用以下 3 种方式</p>
<ul>
<li><code>ConfigMap</code> - 使用 <code>Configmap</code> 配置部署 nginx 全局配置</li>
<li><code>Annotations</code> - 使用 <code>Annotations</code> 为特定的 <code>Ingress rule</code> 部署个性化的配置</li>
<li><code>Custom template</code> -</li>
</ul>
<h2 id="Annotations-配置说明"><a href="#Annotations-配置说明" class="headerlink" title="Annotations 配置说明"></a>Annotations 配置说明</h2><p><strong><code>Annotation</code> 配置中，<code>key</code> 和 <code>value</code> 只能是字符串类型的值</strong>。 </p>
<h3 id="rewrite-target"><a href="#rewrite-target" class="headerlink" title="rewrite-target"></a>rewrite-target</h3><p><code>rewrite-target</code> 示例 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Rewrite Target](https://kubernetes.github.io/ingress-nginx/examples/rewrite/#examples)">[3]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/rewrite-target: /$2</span><br><span class="line">  name: rewrite</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">  - host: rewrite.bar.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /something(/|$)(.*)</span><br><span class="line">        pathType: Prefix</span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: http-svc</span><br><span class="line">            port: </span><br><span class="line">              number: 80</span><br></pre></td></tr></table></figure>
<p><code>path</code> 中捕获到的匹配组会被分别放置在 <code>$1</code>,<code>$2</code>,’$3’…<code>$n</code>，可在 <code>rewrite-target</code> 中使用</p>
<p>本示例中，会产生如下效果：</p>
<ul>
<li><code>rewrite.bar.com/something</code> rewrites to <code>rewrite.bar.com/</code></li>
<li><code>rewrite.bar.com/something/</code> rewrites to <code>rewrite.bar.com/</code></li>
<li><code>rewrite.bar.com/something/new</code> rewrites to <code>rewrite.bar.com/new</code></li>
</ul>
<h3 id="app-root"><a href="#app-root" class="headerlink" title="app-root"></a>app-root</h3><p>将 <code>path</code> 中的 <code>/</code> 重写为 <code>nginx.ingress.kubernetes.io/app-root</code> 定义的内容 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[App Root](https://kubernetes.github.io/ingress-nginx/examples/rewrite/#app-root)">[4]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/app-root: /app1</span><br><span class="line">  name: approot</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">  - host: approot.bar.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: http-svc</span><br><span class="line">            port: </span><br><span class="line">              number: 80</span><br></pre></td></tr></table></figure>
<p>验证结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -I -k http://approot.bar.com/</span></span><br><span class="line">HTTP/1.1 302 Moved Temporarily</span><br><span class="line">Server: nginx/1.11.10</span><br><span class="line">Date: Mon, 13 Mar 2017 14:57:15 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 162</span><br><span class="line">Location: http://approot.bar.com/app1</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure>

<h3 id="ssl-redirect"><a href="#ssl-redirect" class="headerlink" title="ssl-redirect"></a>ssl-redirect</h3><p>默认情况下，如果 <code>Ingress</code> 中配置了 tls ，HTTP 请求会被重定向到 HTTPS （308），要更改此行为，可以配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx.ingress.kubernetes.io/ssl-redirect: &quot;false&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Redirect-from-x2F-to-www"><a href="#Redirect-from-x2F-to-www" class="headerlink" title="Redirect from&#x2F;to www"></a>Redirect from&#x2F;to www</h3><p>将 <code>www.domain.com</code> 重定向到 <code>domain.com</code>，或者将 <code>domain.com</code> 重定向到 <code>www.domain.com</code> <sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Redirect from/to www](https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#redirect-fromto-www)">[7]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx.ingress.kubernetes.io/from-to-www-redirect: &quot;true&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Session-Affinity"><a href="#Session-Affinity" class="headerlink" title="Session Affinity"></a>Session Affinity</h3><ul>
<li><code>nginx.ingress.kubernetes.io/affinity: cookie</code><br>会话亲和性，会话保持。<code>ingress-nginx</code> 支持的值唯有 <code>cookie</code> <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Session Affinity](https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#session-affinity)">[5]</span></a></sup></li>
<li><code>nginx.ingress.kubernetes.io/affinity-mode</code><br>定义会话保持的黏合程度。可取以下值：<ul>
<li><code>balanced</code> - <code>Pod</code> 扩容或缩减后重新分配 sessions</li>
<li><code>persistent</code> - <code>Pod</code> 扩容或缩减后依旧保持会话，不重新分配 sessions</li>
</ul>
</li>
</ul>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>跨域相关配置 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Enable CORS](https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#enable-cors)">[6]</span></a></sup></p>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>cors-allow-methods</code></td>
<td>默认值 <code>GET, PUT, POST, DELETE, PATCH, OPTIONS</code> <br/><em><strong>当值配置为 <code>*</code> 时要注意，<code>*</code> 不代表所有方法，而是代表默认值中的基本方法</strong></em></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>cors-allow-headers</code></td>
<td>Default: <code>DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization</code><br/><em><strong>当值配置为 <code>*</code> 时要注意，<code>*</code> 不代表所有头部，而只表示基本标头，即默认标头。如果要使用自定义标头，需要在这里显示配置，否则会被拦截</strong></em></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>cors-allow-origin</code></td>
<td>Default: <code>*</code></td>
<td></td>
<td><code>nginx.ingress.kubernetes.io/cors-allow-origin: &quot;https://origin-site.com:4443, http://origin-site.com, https://example.org:1199&quot;</code></td>
</tr>
</tbody></table>
<h3 id="Server-snippet"><a href="#Server-snippet" class="headerlink" title="Server snippet"></a>Server snippet</h3><p>通过此配置，可以添加自定义配置到 nginx 的 <code>server</code> 配置中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/server-snippet: |</span><br><span class="line">        set $agentflag 0;</span><br><span class="line"></span><br><span class="line">        if ($http_user_agent ~* &quot;(Mobile)&quot; )&#123;</span><br><span class="line">          set $agentflag 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ( $agentflag = 1 ) &#123;</span><br><span class="line">          return 301 https://m.example.com;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<h3 id="Client-Body-Buffer-Size"><a href="#Client-Body-Buffer-Size" class="headerlink" title="Client Body Buffer Size"></a>Client Body Buffer Size</h3><figure class="highlight shell"><figcaption><span>Example</span></figcaption><table><tr><td class="code"><pre><span class="line">nginx.ingress.kubernetes.io/client-body-buffer-size: &quot;1000&quot; # 1000 bytes</span><br><span class="line">nginx.ingress.kubernetes.io/client-body-buffer-size: 1k # 1 kilobyte</span><br><span class="line">nginx.ingress.kubernetes.io/client-body-buffer-size: 1K # 1 kilobyte</span><br><span class="line">nginx.ingress.kubernetes.io/client-body-buffer-size: 1m # 1 megabyte</span><br><span class="line">nginx.ingress.kubernetes.io/client-body-buffer-size: 1M # 1 megabyte</span><br></pre></td></tr></table></figure>
<h3 id="Permanent-Redirect"><a href="#Permanent-Redirect" class="headerlink" title="Permanent Redirect"></a>Permanent Redirect</h3><p>返回永久重定向 （301）</p>
<figure class="highlight shell"><figcaption><span>Example</span></figcaption><table><tr><td class="code"><pre><span class="line">nginx.ingress.kubernetes.io/permanent-redirect: &#x27;https://www.google.com&#x27;</span><br></pre></td></tr></table></figure>


<h3 id="Temporal-Redirect"><a href="#Temporal-Redirect" class="headerlink" title="Temporal Redirect"></a>Temporal Redirect</h3><p>临时重定向 （302）</p>
<figure class="highlight shell"><figcaption><span>Example</span></figcaption><table><tr><td class="code"><pre><span class="line">nginx.ingress.kubernetes.io/temporal-redirect: &#x27;https://www.google.com&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="Whitelist-source-range"><a href="#Whitelist-source-range" class="headerlink" title="Whitelist source range"></a>Whitelist source range</h3><p>访问白名单配置 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Whitelist source range](https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#whitelist-source-range)">[8]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx.ingress.kubernetes.io/whitelist-source-range: &#x27;10.0.0.0/24,172.10.0.1&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="Custom-timeouts"><a href="#Custom-timeouts" class="headerlink" title="Custom timeouts"></a>Custom timeouts</h3><p>自定义超时时间，所有的超时时间单位为秒 <sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Custom timeouts](https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#custom-timeouts)">[9]</span></a></sup></p>
<ul>
<li><code>nginx.ingress.kubernetes.io/proxy-connect-timeout</code></li>
<li><code>nginx.ingress.kubernetes.io/proxy-send-timeout</code></li>
<li><code>nginx.ingress.kubernetes.io/proxy-read-timeout</code></li>
<li><code>nginx.ingress.kubernetes.io/proxy-next-upstream</code></li>
<li><code>nginx.ingress.kubernetes.io/proxy-next-upstream-timeout</code></li>
<li><code>nginx.ingress.kubernetes.io/proxy-next-upstream-tries</code></li>
<li><code>nginx.ingress.kubernetes.io/proxy-request-buffering</code></li>
</ul>
<h3 id="Custom-max-body-size"><a href="#Custom-max-body-size" class="headerlink" title="Custom max body size"></a>Custom max body size</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx.ingress.kubernetes.io/proxy-body-size: 8m</span><br></pre></td></tr></table></figure>

<h3 id="ssl-配置示例"><a href="#ssl-配置示例" class="headerlink" title="ssl 配置示例"></a>ssl 配置示例</h3><p>首先需要使用生成的证书配置 <code>type: kubernetes.io/tls</code> 类型的资源，产生对应的 Secret，此处假设证书的 Secret 名称为 <code>test-tls-secret</code>，证书中包含多个域名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: nginx</span><br><span class="line">    nginx.ingress.kubernetes.io/proxy-body-size: 3000m</span><br><span class="line">    nginx.ingress.kubernetes.io/ssl-redirect: &quot;true&quot;</span><br><span class="line">  </span><br><span class="line">  name: ingress-api</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  tls:</span><br><span class="line">  - hosts:</span><br><span class="line">    - api1.test.com</span><br><span class="line">    - api2.test.com</span><br><span class="line">    - api3.test.com</span><br><span class="line">    </span><br><span class="line">    secretName: test-tls-secret</span><br><span class="line">  rules:</span><br><span class="line">  - host: api1.test.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: api-svc</span><br><span class="line">            port:</span><br><span class="line">              number: 8080</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line">  - host: api2.test.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: api-svc</span><br><span class="line">            port:</span><br><span class="line">              number: 8080</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line">  - host: api3.test.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: api-svc</span><br><span class="line">            port:</span><br><span class="line">              number: 8080</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line">  - host: api4.test.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: api-svc</span><br><span class="line">            port:</span><br><span class="line">              number: 8080</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line">  - host: api5.test.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: api-svc</span><br><span class="line">            port:</span><br><span class="line">              number: 8080</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br></pre></td></tr></table></figure>

<h2 id="ConfigMaps-配置说明"><a href="#ConfigMaps-配置说明" class="headerlink" title="ConfigMaps 配置说明"></a>ConfigMaps 配置说明</h2><p>使用 <code>ConfigMaps</code> 方式配置 nginx 参数 <sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Configuration options](https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#configuration-options)">[10]</span></a></sup></p>
<blockquote>
<p>The key and values in a ConfigMap can only be strings. This means that we want a value with boolean values we need to quote the values, like “true” or “false”. Same for numbers, like “100”.</p>
</blockquote>
<h3 id="Log-format"><a href="#Log-format" class="headerlink" title="Log format"></a>Log format</h3><p>默认情况下，Access 日至输出到 <code>/var/log/nginx/access.log</code>，软链接到了 <code>/dev/stdout</code> <sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[access-log-path](https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#access-log-path)">[11]</span></a></sup></p>
<p><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/log-format/">默认日志格式及可用变量</a></p>
<p>要更改默认的日志格式，编辑 <code>ingress-nginx-controller</code> 的部署配置文件，部署 <code>ConfigMap</code> </p>
<figure class="highlight shell"><figcaption><span>ingress-nginx-controller-v1.3.1.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/component: controller</span><br><span class="line">    app.kubernetes.io/instance: ingress-nginx</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">    app.kubernetes.io/version: 1.3.1</span><br><span class="line">  name: ingress-nginx-controller</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">data:</span><br><span class="line">  allow-snippet-annotations: &quot;true&quot;</span><br><span class="line"></span><br><span class="line">  log-format-upstream: &quot;&#123; time: $time_iso8601|http_host:$http_host|cdn_ip:$remote_addr|request:$request|request_method:$request_method|http_user_agent:$http_user_agent|size:$body_bytes_sent|responsetime:$request_time|upstreamtime:$upstream_response_time|upstreamhost:$upstream_addr|upstreamstatus:$upstream_status|url:$http_host$uri|http_x_forwarded_for:$http_x_forwarded_for|referer:$http_referer|server_protocol:$server_protocol|status:$status&#125;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>部署 <code>ingress-nginx-controller</code> 后，检查 nginx 配置中的 <code>log-format</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">cp</span> -n ingress-nginx ingress-nginx-controller-nxkwq:/etc/nginx/nginx.conf temp.nginx.conf</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> temp.nginx.conf</span></span><br><span class="line">...</span><br><span class="line">log_format upstreaminfo &#x27;&#123; time: $time_iso8601|http_host:$http_host|cdn_ip:$remote_addr|request:$request|reque</span><br><span class="line">st_method:$request_method|http_user_agent:$http_user_agent|size:$body_bytes_sent|responsetime:$request_time|upstreamti</span><br><span class="line">me:$upstream_response_time|upstreamhost:$upstream_addr|upstreamstatus:$upstream_status|url:$http_host$uri|http_x_forwa</span><br><span class="line">rded_for:$http_x_forwarded_for|referer:$http_referer|server_protocol:$server_protocol|status:$status&#125;&#x27;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>在 <code>Ingress</code> 资源中使用此 <code>log_format</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kind: Ingress</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: example-ingress</span><br><span class="line">  namespace: default</span><br><span class="line"></span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/configuration-snippet: |</span><br><span class="line">      access_log /var/log/nginx/example-ingress.access.log upstreaminfo;</span><br><span class="line">      error_log /var/log/nginx/example-ingress.err.log;</span><br></pre></td></tr></table></figure>
<p>部署成功后，查看 nginx 配置中关于域名的配置，在此 <code>Ingress</code> 资源中配置的每个域名的 <code>server</code> 配置段中会包含此日志配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">cp</span> -n ingress-nginx ingress-nginx-controller-nxkwq:/etc/nginx/nginx.conf temp.nginx.conf</span></span><br><span class="line">cat temp.nginx.conf</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">access_log /var/log/nginx/example-ingress.access.log upstreaminfo if=$loggable;</span><br><span class="line">error_log /var/log/nginx/example-ingress.err.log;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>





<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://kubernetes.github.io/ingress-nginx/deploy/baremetal/">裸机注意事项</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network">Via the host network</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/">Ingress NGINX Configuration</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.github.io/ingress-nginx/examples/rewrite/#examples">Rewrite Target</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.github.io/ingress-nginx/examples/rewrite/#app-root">App Root</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#session-affinity">Session Affinity</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#enable-cors">Enable CORS</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#redirect-fromto-www">Redirect from/to www</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#whitelist-source-range">Whitelist source range</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#custom-timeouts">Custom timeouts</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#configuration-options">Configuration options</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#access-log-path">access-log-path</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 监控</title>
    <url>/202305231329/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>Kubernetes 1.24</li>
</ul>
<h1 id="Kubernetes-Metrics-Server"><a href="#Kubernetes-Metrics-Server" class="headerlink" title="Kubernetes Metrics Server"></a>Kubernetes Metrics Server</h1><p>Kubernetes Metrics Server 从 <code>kubelet</code> 收集资源使用指标（情况）并通过 Metrics API 将其暴露给 Kubernetes API Server，以供 HPA(Horizontal Pod Autoscaler) 和 VPA(Vertical Pod Autoscaler) 使用。<code>kubectl top</code> 也使用 Metrics API。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[metrics-server](https://github.com/kubernetes-sigs/metrics-server)">[1]</span></a></sup></p>
<h2 id="安装-Kubernetes-Metrics-Server"><a href="#安装-Kubernetes-Metrics-Server" class="headerlink" title="安装 Kubernetes Metrics Server"></a>安装 Kubernetes Metrics Server</h2><p>Kubernetes Metrics Server 安装之前必须要开启 kube api-server 的聚合层功能以及认证鉴权功能 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[配置聚合层](https://kubernetes.io/zh-cn/docs/tasks/extend-kubernetes/configure-aggregation-layer/)">[3]</span></a></sup> </p>
<p>检查 Kubernetes API Server 是否启用了聚合层功能及认证鉴权功能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -ef | grep apiserver | grep -E <span class="string">&quot;authorization-mode|enable-aggregator-routing&quot;</span></span></span><br><span class="line">root       390   369  7 13:55 ?        00:00:37 kube-apiserver --advertise-address=172.31.26.116 \</span><br><span class="line">                                                               --allow-privileged=true \</span><br><span class="line">                                                               --authorization-mode=Node,RBAC \</span><br><span class="line">                                                               --client-ca-file=/etc/kubernetes/pki/ca.crt \</span><br><span class="line">                                                               --enable-admission-plugins=NodeRestriction \</span><br><span class="line">                                                               --enable-bootstrap-token-auth=true \</span><br><span class="line">                                                               --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt \</span><br><span class="line">                                                               --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt \</span><br><span class="line">                                                               --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key \</span><br><span class="line">                                                               --etcd-servers=https://127.0.0.1:2379 \</span><br><span class="line">                                                               --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key \</span><br><span class="line">                                                               --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname \</span><br><span class="line">                                                               --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt \</span><br><span class="line">                                                               --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key \</span><br><span class="line">                                                               --requestheader-allowed-names=front-proxy-client \</span><br><span class="line">                                                               --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt \</span><br><span class="line">                                                               --requestheader-extra-headers-prefix=X-Remote-Extra- \</span><br><span class="line">                                                               --requestheader-group-headers=X-Remote-Group \</span><br><span class="line">                                                               --requestheader-username-headers=X-Remote-User \</span><br><span class="line">                                                               --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local \</span><br><span class="line">                                                               --service-account-key-file=/etc/kubernetes/pki/sa.pub \</span><br><span class="line">                                                               --service-account-signing-key-file=/etc/kubernetes/pki/sa.key \</span><br><span class="line">                                                               --service-cluster-ip-range=10.96.0.0/12 \</span><br><span class="line">                                                               --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key \</span><br><span class="line">                                                               --enable-aggregator-routing=true</span><br></pre></td></tr></table></figure>
<p>输出中包含了 <code>--authorization-mode=Node,RBAC</code> 和 <code>--enable-aggregator-routing=true</code>，表示已开启对应功能。如若未开启，修改 <code>api-server</code> 的 manifest 文件 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code>，在 <code>kube-apiserver</code> 的启动参数中添加 <code>--enable-aggregator-routing=true</code> 和 <code>--authorization-mode=Node,RBAC</code></p>
<p>以下命令使用 yaml 文件安装最新版本 Metrics Server <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[metrics-server installation](https://github.com/kubernetes-sigs/metrics-server#installation)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br></pre></td></tr></table></figure>

<h2 id="Kubernetes-Metrics-Server-部署配置常见错误"><a href="#Kubernetes-Metrics-Server-部署配置常见错误" class="headerlink" title="Kubernetes Metrics Server 部署配置常见错误"></a>Kubernetes Metrics Server 部署配置常见错误</h2><h3 id="Failed-to-scrape-node"><a href="#Failed-to-scrape-node" class="headerlink" title="Failed to scrape node"></a>Failed to scrape node</h3><p><a href="#%E5%AE%89%E8%A3%85-Kubernetes-Metrics-Server">参考部署步骤</a> 部署后，Metrics Server 的 Pod 一直处于未就绪状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A | grep metrics</span></span><br><span class="line">kube-system                 metrics-server-5cdf47479d-rwtd6             0/1     Running       0              5m53s</span><br></pre></td></tr></table></figure>
<p>检查 Pod 日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs -n kube-system metrics-server-5cdf47479d-rwtd6</span></span><br><span class="line">1 scraper.go:140] &quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://172.31.21.3:10250/metrics/resource\&quot;: x509: cannot validate certificate for 172.31.21.3 because it doesn&#x27;t contain any IP SANs&quot; node=&quot;k8smaster3&quot;</span><br><span class="line">1 scraper.go:140] &quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://172.31.26.116:10250/metrics/resource\&quot;: x509: cannot validate certificate for 172.31.26.116 because it doesn&#x27;t contain any IP SANs&quot; node=&quot;k8smaster1&quot;</span><br><span class="line">1 scraper.go:140] &quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://172.31.19.164:10250/metrics/resource\&quot;: x509: cannot validate certificate for 172.31.19.164 because it doesn&#x27;t contain any IP SANs&quot; node=&quot;k8smaster2&quot;</span><br></pre></td></tr></table></figure>
<p>根据日志提示，由于 metrics-server 未获得TLS Bootstrap 签发证书的导致访问各节点资源时报错。</p>
<ol>
<li><a href="https://www.modb.pro/db/408792">参考解决办法</a></li>
<li>添加选项 <code>--kubelet-insecure-tls</code> 不验证 Kubelet 的 CA 证书 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - args:</span><br><span class="line">    - --cert-dir=/tmp</span><br><span class="line">    - --secure-port=4443</span><br><span class="line">    - --kubelet-preferred-address-types=InternalIP</span><br><span class="line">    - --kubelet-use-node-status-port</span><br><span class="line">    - --metric-resolution=15s</span><br><span class="line">    - --kubelet-insecure-tls</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="no-such-host"><a href="#no-such-host" class="headerlink" title="no such host"></a>no such host</h3><p><a href="#%E5%AE%89%E8%A3%85-Kubernetes-Metrics-Server">参考部署步骤</a> 部署后，Metrics Server 的 Pod 一直处于未就绪状态，检查 Pod 日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs -n kube-system metrics-server-5cdf47479d-rwtd6</span></span><br><span class="line">&quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://k8smaster1:10250/metrics/resource\&quot;: dial tcp: lookup k8smaster1 on 10.96.0.10:53: no such host&quot; node=&quot;k8smaster1&quot;</span><br><span class="line">&quot;Failed probe&quot; probe=&quot;metric-storage-ready&quot; err=&quot;no metrics to serve&quot;</span><br><span class="line">&quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://k8smaster1:10250/metrics/resource\&quot;: dial tcp: lookup k8smaster1 on 10.96.0.10:53: no such host&quot; node=&quot;k8smaster1&quot;</span><br><span class="line">&quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://k8smaster3:10250/metrics/resource\&quot;: dial tcp: lookup k8smaster3 on 10.96.0.10:53: no such host&quot; node=&quot;k8smaster3&quot;</span><br><span class="line">&quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://k8sworker1:10250/metrics/resource\&quot;: dial tcp: lookup k8sworker1 on 10.96.0.10:53: no such host&quot; node=&quot;k8sworker1&quot;</span><br><span class="line">&quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://k8sworker2:10250/metrics/resource\&quot;: dial tcp: lookup k8sworker2 on 10.96.0.10:53: no such host&quot; node=&quot;k8sworker2&quot;</span><br><span class="line">&quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://k8smaster2:10250/metrics/resource\&quot;: dial tcp: lookup k8smaster2 on 10.96.0.10:53: no such host&quot; node=&quot;k8smaster2&quot;</span><br><span class="line">&quot;Failed probe&quot; probe=&quot;metric-storage-ready&quot; err=&quot;no metrics to serve&quot;</span><br><span class="line">I0524 09:32:43.033797       1 server.go:187] &quot;Failed probe&quot; probe=&quot;metric-storage-ready&quot; err=&quot;no metrics to serve&quot;</span><br></pre></td></tr></table></figure>
<p>根据日志显示，API Server 的主机名解析存在问题。这是因为节点主机名在集群的 DNS 中无法解析导致，可以通过在 Metrics Server 的 Pod 中手动添加解析解决</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">spec:</span><br><span class="line">  hostAliases:</span><br><span class="line">  - ip: &#x27;172.31.26.116&#x27;</span><br><span class="line">    hostnames:</span><br><span class="line">    - &#x27;fm-k8s-c1-master1&#x27;</span><br><span class="line">  - ip: &#x27;172.31.19.164&#x27;</span><br><span class="line">    hostnames:</span><br><span class="line">    - &#x27;fm-k8s-c1-master2&#x27;</span><br><span class="line">  - ip: &#x27;172.31.21.3&#x27;</span><br><span class="line">    hostnames:</span><br><span class="line">    - &#x27;fm-k8s-c1-master3&#x27;</span><br><span class="line">  - ip: &#x27;172.31.16.124&#x27;</span><br><span class="line">    hostnames:</span><br><span class="line">    - &#x27;fm-k8s-c1-worker1&#x27;</span><br><span class="line">  - ip: &#x27;172.31.22.159&#x27;</span><br><span class="line">    hostnames:</span><br><span class="line">    - &#x27;fm-k8s-c1-worker2&#x27;</span><br><span class="line">  containers:</span><br><span class="line">  - args:</span><br><span class="line">    - --cert-dir=/tmp</span><br><span class="line">    - --secure-port=4443</span><br><span class="line">    - --kubelet-preferred-address-types=Hostname</span><br><span class="line">    - --kubelet-use-node-status-port</span><br><span class="line">    - --metric-resolution=15s</span><br><span class="line">    image: registry.k8s.io/metrics-server/metrics-server:v0.6.3</span><br></pre></td></tr></table></figure>

<h2 id="Metrics-Server-无法获取所在节点的主机的监控信息"><a href="#Metrics-Server-无法获取所在节点的主机的监控信息" class="headerlink" title="Metrics Server 无法获取所在节点的主机的监控信息"></a>Metrics Server 无法获取所在节点的主机的监控信息</h2><p>Metrics Server 部署成功后，无法获取所在节点的主机的监控信息，获取其他主机的监控信息正常，具体信息如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes -o wide</span></span><br><span class="line">NAME          STATUS   ROLES           AGE    VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME</span><br><span class="line">k8s-master1   Ready    control-plane   169d   v1.24.7   172.31.26.116   &lt;none&gt;        CentOS Linux 7 (Core)   5.4.225-1.el7.elrepo.x86_64   docker://20.10.9</span><br><span class="line">k8s-master2   Ready    control-plane   169d   v1.24.7   172.31.19.164   &lt;none&gt;        CentOS Linux 7 (Core)   5.4.225-1.el7.elrepo.x86_64   docker://20.10.9</span><br><span class="line">k8s-master3   Ready    control-plane   169d   v1.24.7   172.31.21.3     &lt;none&gt;        CentOS Linux 7 (Core)   5.4.225-1.el7.elrepo.x86_64   docker://20.10.9</span><br><span class="line">k8s-worker1   Ready    &lt;none&gt;          169d   v1.24.7   172.31.16.124   &lt;none&gt;        CentOS Linux 7 (Core)   5.4.225-1.el7.elrepo.x86_64   docker://20.10.9</span><br><span class="line">k8s-worker2   Ready    &lt;none&gt;          169d   v1.24.7   172.31.22.159   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.80.1.el7.x86_64   docker://20.10.9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A | grep met</span></span><br><span class="line">metrics-server-c48655c66-jxwpt             1/1     Running   0              12m    10.244.4.138    k8s-worker1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl top node</span></span><br><span class="line">NAME          CPU(cores)   CPU%        MEMORY(bytes)   MEMORY%     </span><br><span class="line">k8s-master1   381m         9%          3263Mi          43%         </span><br><span class="line">k8s-master2   149m         3%          3432Mi          45%         </span><br><span class="line">k8s-master3   166m         4%          3163Mi          41%         </span><br><span class="line">k8s-worker2   2093m        13%         21933Mi         71%         </span><br><span class="line">k8s-worker1   &lt;unknown&gt;    &lt;unknown&gt;   &lt;unknown&gt;       &lt;unknown&gt; </span><br></pre></td></tr></table></figure>

<p>查看 Metrics Server Pod 日志，显示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs -n kube-system metrics-server-c48655c66-jxwpt</span></span><br><span class="line">E0525 05:19:42.085468       1 scraper.go:140] &quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://172.31.16.124:10250/metrics/resource\&quot;: dial tcp 172.31.16.124:10250: connect: no route to host&quot; node=&quot;fm-k8s-c1-worker1&quot;</span><br><span class="line">E0525 05:19:57.125457       1 scraper.go:140] &quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://172.31.16.124:10250/metrics/resource\&quot;: dial tcp 172.31.16.124:10250: connect: no route to host&quot; node=&quot;fm-k8s-c1-worker1&quot;</span><br><span class="line">E0525 05:20:12.101468       1 scraper.go:140] &quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://172.31.16.124:10250/metrics/resource\&quot;: dial tcp 172.31.16.124:10250: connect: no route to host&quot; node=&quot;fm-k8s-c1-worker1&quot;</span><br><span class="line">E0525 05:20:27.077495       1 scraper.go:140] &quot;Failed to scrape node&quot; err=&quot;Get \&quot;https://172.31.16.124:10250/metrics/resource\&quot;: dial tcp 172.31.16.124:10250: connect: no route to host&quot; node=&quot;fm-k8s-c1-worker1&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据日志显示，是因为无法连接节点的 kubelet (端口 10250) 导致。为了定位问题，修改 Metrics Server 的部署 Yaml 文件，在其中加入一个容器，来方便使用工具测试问题。参考以下内容，在 Pod 中加入容器 <code>centos:centos7.9.2009</code></p>
<figure class="highlight shell"><figcaption><span>metrics-server.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: metrics-server</span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxUnavailable: 0</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: metrics-server</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: centos:centos7.9.2009</span><br><span class="line">        command:</span><br><span class="line">        - ping</span><br><span class="line">        - 127.0.0.1</span><br><span class="line">        name: centos7</span><br><span class="line">      - args:</span><br><span class="line">        - --cert-dir=/tmp</span><br><span class="line">        - --secure-port=4443</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br><span class="line">        - --kubelet-use-node-status-port</span><br><span class="line">        - --metric-resolution=15s</span><br><span class="line">        - --kubelet-insecure-tls</span><br><span class="line">        image: registry.k8s.io/metrics-server/metrics-server:v0.6.3</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
<p>重新部署后，登陆容器 <code>centos7</code>，安装所需工具进行测试。根据日志信息，首先测试 Pod 是否能连接到节点的 kubelet</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v 172.31.16.124:10250</span></span><br><span class="line">* About to connect() to 172.31.16.124 port 10250 (#0)</span><br><span class="line">*   Trying 172.31.16.124...</span><br><span class="line">* No route to host</span><br><span class="line">* Failed connect to 172.31.16.124:10250; No route to host</span><br><span class="line">* Closing connection 0</span><br><span class="line">curl: (7) Failed connect to 172.31.16.124:10250; No route to host</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v 172.31.22.159:10250</span></span><br><span class="line">* About to connect() to 172.31.22.159 port 10250 (#0)</span><br><span class="line">*   Trying 172.31.22.159...</span><br><span class="line">* Connected to 172.31.22.159 (172.31.22.159) port 10250 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: 172.31.22.159:10250</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">* HTTP 1.0, assume close after body</span></span><br><span class="line">&lt; HTTP/1.0 400 Bad Request</span><br><span class="line">&lt; </span><br><span class="line">Client sent an HTTP request to an HTTPS server.</span><br><span class="line">* Closing connection 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据以上测试，Metrics Server 的 Pod 无法连接所在节点 k8s-worker1（<code>172.31.16.124</code>）的 kubelet （<code>172.31.16.124:10250</code>），可以正常连接其他节点的 kubelet。由此可以确定问题原因。</p>
<p>考虑到 Metrics Server 的 Pod 只是访问不到宿主节点所在的 kubelet，可以访问其他节点的 kubelet，梳理其中的网络连同流程发现，<strong>在访问其他节点的 kubelet 时，Metrics Server Pod 的报文在流出宿主节点前，会被 SNAT 为宿主节点的出口 IP，报文源 IP 为 宿主节点的 IP。而访问宿主节点的 kubelet 的报文，其源 IP 为 Metrics Server Pod 的 IP，目的 IP 为宿主节点的 IP。怀疑可能因为集群节点上的 iptables 允许集群节点的 IP 访问 kubelet，而 Pod 的 IP 未被允许访问 kubelet</strong>。为验证此猜想，在节点 <code>k8s-worker1</code> 的 iptables 添加允许 Metrics Server Pod 的 IP 访问的规则进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT 7 -s 10.244.4.138 -j ACCEPT</span><br></pre></td></tr></table></figure>
<p>再次测试和 kubelet 的连通性，发现可以正常连通，再次检查 <code>kubectl top node</code>，可以查到所有节点的监控数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v 172.31.16.124:10250</span></span><br><span class="line">* About to connect() to 172.31.16.124 port 10250 (#0)</span><br><span class="line">*   Trying 172.31.16.124...</span><br><span class="line">* Connected to 172.31.16.124 (172.31.16.124) port 10250 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: 172.31.16.124:10250</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">* HTTP 1.0, assume close after body</span></span><br><span class="line">&lt; HTTP/1.0 400 Bad Request</span><br><span class="line">&lt; </span><br><span class="line">Client sent an HTTP request to an HTTPS server.</span><br><span class="line">* Closing connection 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl top node</span></span><br><span class="line">NAME                CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   </span><br><span class="line">fm-k8s-c1-master1   286m         7%     3242Mi          42%       </span><br><span class="line">fm-k8s-c1-master2   150m         3%     3262Mi          43%       </span><br><span class="line">fm-k8s-c1-master3   251m         6%     3247Mi          42%       </span><br><span class="line">fm-k8s-c1-worker1   166m         1%     4317Mi          13%       </span><br><span class="line">fm-k8s-c1-worker2   2013m        12%    21684Mi         70%</span><br></pre></td></tr></table></figure>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/kubernetes-sigs/metrics-server">metrics-server</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/kubernetes-sigs/metrics-server#installation">metrics-server installation</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/tasks/extend-kubernetes/configure-aggregation-layer/">配置聚合层</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 网络数据包抓包分析</title>
    <url>/202210250956/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7</li>
<li>Kubernetes 1.21</li>
<li>flannel 0.20</li>
</ul>
<p>为观察 Kubernetes 集群中跨主机 POD 之间的网络通信数据流，本文通过 tcpdump 抓包，对数据流向进行记录观察。</p>
<p>本示例中的 Kubernetes 集群由以下节点组成：</p>
<table>
<thead>
<tr>
<th>节点主机名</th>
<th>节点角色</th>
<th>节点 IP</th>
<th>节点上测试 POD IP</th>
</tr>
</thead>
<tbody><tr>
<td>master</td>
<td>master</td>
<td>eth0： 10.150.0.21</td>
<td>10.244.0.2</td>
</tr>
<tr>
<td>worker1</td>
<td>worker</td>
<td>eth0： 10.150.0.19</td>
<td>10.244.1.38</td>
</tr>
<tr>
<td>worker2</td>
<td>worker</td>
<td>eth0： 10.150.0.20</td>
<td>10.244.2.27</td>
</tr>
</tbody></table>
<h1 id="Flannel-简介"><a href="#Flannel-简介" class="headerlink" title="Flannel 简介"></a>Flannel 简介</h1><p>Kubernetes 系统上 POD 网络的实现依赖于第三方插件，Kubernetes 只负责提供了 CNI（容器网络接口），只要符合 CNI 规则的第三方插件都可以用于为 POD 提供网络实现。而 Flannel 是由 CoreOS 主推的目前比较主流的容器网络解决方案。</p>
<p>Flannel 支持三种不同后端实现，分别是：</p>
<ul>
<li>UDP</li>
<li>VXLAN</li>
<li>host-gw</li>
</ul>
<p>UDP 是 Flannel 项目最早支持的一种方式，是性能最差的方式，目前已被废弃。</p>
<p>用的最多的是 VXLAN 和 host-gw 模式的部署。</p>
<span id="more"></span>

<h2 id="VXLAN"><a href="#VXLAN" class="headerlink" title="VXLAN"></a>VXLAN</h2><p>Flannel 默认使用 VXLAN 模式。flannel 运行后，在各个宿主机配置了一个网络接口 <code>flannel.1</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig flannel.1</span></span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1410</span><br><span class="line">        inet 10.244.0.0  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        inet6 fe80::7c63:25ff:fea9:a780  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 7e:63:25:a9:a7:80  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 2857781  bytes 1505969406 (1.4 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1946111  bytes 1603736503 (1.4 GiB)</span><br><span class="line">        TX errors 0  dropped 8 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>默认分配给集群 POD 的网段为 <code>10.244.0.0/16</code></p>
<p>flannel 给 master 节点配置的 Pod 网络为 <code>10.244.0.0/24</code> 段，给 <code>worker1</code> 节点配置的 Pod 网络为 <code>10.244.1.0/24</code> 段，如果有更多的节点，以此类推。</p>
<p>当有容器运行之后，flannel 会在节点上配置虚拟接口 <code>cni0</code>，比如在节点 <code>worker1</code>，IP 地址默认为 <code>10.244.1.1</code>，在 master 节点上 IP 为 <code>10.244.0.1</code>。</p>
<p>此 <code>cni0</code> 接口是一个网桥设备，会作为此节点上的 POD 的默认网关</p>
<p>在 POD 启动时，flannel 会创建一对 veth 虚拟设备，一端连接到容器，一端连接到 <code>cni0</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig cni0</span></span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1410</span><br><span class="line">        inet 10.244.0.1  netmask 255.255.255.0  broadcast 10.244.0.255</span><br><span class="line">        inet6 fe80::f054:6bff:fe0e:f9ef  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether f2:54:6b:0e:f9:ef  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 3795780  bytes 469016599 (447.2 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 3832558  bytes 408850763 (389.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一旦节点启动并加入集群后，其他节点上的 flanneld 会添加路由规则，将到其他节点上的 POD 网段的流量路由到本节点的 flannel.1 接口，即进入二层隧道，然后封装 VXLAN 包，到达目标节点后(pod 网段和节点 ip 的映射关系，flannel 保存在 etcd 或者 k8s 中)，由目标节点上的 flannel.1 解封装，这就是 flannel 默认的 VXLAN 模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip route show</span></span><br><span class="line">default via 10.150.0.1 dev eth0 </span><br><span class="line">10.150.0.1 dev eth0 scope link </span><br><span class="line">10.244.0.0/24 dev cni0 proto kernel scope link src 10.244.0.1 </span><br><span class="line">10.244.1.0/24 via 10.244.1.0 dev flannel.1 onlink </span><br><span class="line">10.244.2.0/24 via 10.244.2.0 dev flannel.1 onlink </span><br><span class="line">169.254.0.0/16 dev eth0 scope link metric 1002 </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>由于 VXLAN 额外的封包解包，导致其性能较差，所以 Flannel 就有了 <code>host-gw</code> 模式，即把宿主机当作网关，除了本地路由之外没有额外开销，性能和 calico 差不多，由于没有叠加来实现报文转发，这样会导致路由表庞大。因为一个节点对应一个网络，也就对应一条路由条目。</p>
<p><code>host-gw</code> 虽然比 VXLAN 网络性能要强很多，但是种方式有个缺陷：<strong>要求各物理节点必须在同一个二层网络中</strong>。物理节点必须在同一网段中。这样会使得一个网段中的主机量会非常多，万一发一个广播报文就会产生干扰。在私有云场景下，宿主机不在同一网段是很常见的状态，所以就不能使用 <code>host-gw</code> 了。</p>
<p>VXLAN 还有另外一种功能，VXLAN 也支持类似 host-gw 的方案，如果两个节点在同一网段时使用 host-gw 通信，如果不在同一网段中，即当前 pod 所在节点与目标 pod 所在节点中间有路由器，就使用 VXLAN 这种方式，使用叠加网络。</p>
<p>结合了 Host-gw 和 VXLAN，这就是 VXLAN 的 <code>Directrouting</code> 模式</p>
<p>因此 Flannel 的 VXLAN 模式有两种：</p>
<ul>
<li>VXLAN： 原生的 VXLAN，即扩展的虚拟 LAN</li>
<li>Directrouting：直接路由型</li>
</ul>
<p>配置 Directrouting 模式</p>
<p>修改 <code>kube-flannel.yml</code>，修改以下内容：</p>
<figure class="highlight shell"><figcaption><span>kube-flannel.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">net-conf.json: |</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span><br><span class="line">    &quot;Backend&quot;: &#123;</span><br><span class="line">      &quot;Type&quot;: &quot;vxlan&quot;,</span><br><span class="line">      &quot;Directrouting&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="抓包示例"><a href="#抓包示例" class="headerlink" title="抓包示例"></a>抓包示例</h1><p>在 Flannel 的 VXLAN 模式下，overlay 流量需要通过节点的 <code>8472/udp</code> 端口（隧道）进行跨节点通信，如果跨节点 POD 网络通信存在异常，可以在两个节点上对 <code>8472/udp</code> 抓包观察流量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0 -nnn &#x27;udp port 8472 and host 10.150.0.19&#x27;</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://juejin.cn/post/6963106745468059684">详解Kubernetes网络原理</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>tcpdump</tag>
        <tag>Flannel</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 网络</title>
    <url>/202212020941/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7 3.10.0-1160</li>
<li>Docker Engine - Community 23.0.3</li>
<li>kubernetes 1.21.2-0</li>
<li>kubernetes-cni-0.8.7-0</li>
</ul>
<p>Kubernetes 对任何网络实现都规定了以下要求： <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[万字长文，带你搞懂 Kubernetes 网络模型](https://www.51cto.com/article/714336.html)">[1]</span></a></sup></p>
<ul>
<li><p><strong>所有 Pod 都可以在不使用网络地址转换 (NAT) 的情况下与所有其他 Pod 通信。</strong></p>
<p>  容器之间直接通信，不需要额外的 NAT，不存在源地址伪装的情况</p>
</li>
<li><p><strong>所有节点都可以在没有 NAT 的情况下与所有 Pod 通信。</strong></p>
<p>  Node 与容器直接通信，不需要额外的 NAT</p>
</li>
<li><p><strong>Pod 认为自己的 IP 与其他人认为的 IP 相同。</strong></p>
</li>
</ul>
<h1 id="CNI"><a href="#CNI" class="headerlink" title="CNI"></a>CNI</h1><p>CNI 是 Kubernetes 容器网络的标准，CNI 是 Kubernetes 和底层网络插件之间的一个抽象层，为 Kubernetes 屏蔽了底层网络实现的负责度，同时解耦了 Kubernetes 和具体的网络插件实现。</p>
<h2 id="安装-CNI"><a href="#安装-CNI" class="headerlink" title="安装 CNI"></a>安装 CNI</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install kubernetes-cni</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -qa | grep kube</span></span><br><span class="line">kubeadm-1.21.2-0.x86_64</span><br><span class="line">kubectl-1.21.2-0.x86_64</span><br><span class="line">kubelet-1.21.2-0.x86_64</span><br><span class="line">kubernetes-cni-0.8.7-0.x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -ql kubernetes-cni-0.8.7-0</span></span><br><span class="line">/opt/cni</span><br><span class="line">/opt/cni/bin</span><br><span class="line">/opt/cni/bin/bandwidth</span><br><span class="line">/opt/cni/bin/bridge</span><br><span class="line">/opt/cni/bin/dhcp</span><br><span class="line">/opt/cni/bin/firewall</span><br><span class="line">/opt/cni/bin/flannel</span><br><span class="line">/opt/cni/bin/host-device</span><br><span class="line">/opt/cni/bin/host-local</span><br><span class="line">/opt/cni/bin/ipvlan</span><br><span class="line">/opt/cni/bin/loopback</span><br><span class="line">/opt/cni/bin/macvlan</span><br><span class="line">/opt/cni/bin/portmap</span><br><span class="line">/opt/cni/bin/ptp</span><br><span class="line">/opt/cni/bin/sbr</span><br><span class="line">/opt/cni/bin/static</span><br><span class="line">/opt/cni/bin/tuning</span><br><span class="line">/opt/cni/bin/vlan</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Kubernetes 要使用 CNI，需要在 kubelet 启动时配置启动参数 <code>--network-plugin=cni</code>（默认配置，可使用 <code>systemctl status kubelet -l</code> 查看启动参数）。</p>
<p>kubelet 从 <code>--cni-config-dir</code> （默认为 <code>/etc/cni/net.d/</code>）中读取网络插件的配置文件，并使用该文件中的 CNI 配置来配置每个 Pod 网络。如果该目录 （<code>/etc/cni/net.d/</code>）中有多个配置文件，则使用文件名字典序列中的第一个文件。</p>
<p>CNI 插件的二进制文件放置的目录是通过 kubelet 的 <code>--cni-bin-dir</code> 参数指定，默认为 <code>/opt/cni/bin/</code></p>
<span id="more"></span>

<h1 id="flannel"><a href="#flannel" class="headerlink" title="flannel"></a>flannel</h1><p>flannel 最早由 CoreOS 开发，它是容器编排系统中最成熟的网络插件之一。随着 CNI 概念的兴起，flannel 也是最早实现 CNI 标准的网络插件，CNI 标准也是由 CoreOS 提出的。flannel 的功能非常明确，主要解决以下容器跨接点访问的问题</p>
<ul>
<li><strong>容器 IP 地址的重复问题</strong>。由于 Docker 等容器管理工具只是利用 Linux 内核的 network namespace 实现了网络隔离，各个节点上的容器 IP 由各个节点自动分配，可能出现重复。为了解决这个问题，flannel 设计了一种全局的 IP 地址分配机制，即使用 etcd 存储网段和节点 IP 之间的映射关系，然后配置 docker 只在当前节点对应的网段里面为容器分配 IP。</li>
<li><strong>容器 IP 地址的路由问题</strong>。flannel 使用多种后端（底层）技术（如 overlay 网络、Host-Gateway 网络等）解决了容器跨节点的直接通信问题。</li>
</ul>
<p>flannel 在架构上分为<strong>管理面</strong>和<strong>数据面</strong>。</p>
<ul>
<li><strong>管理面</strong>主要是 <code>etcd</code>。用于存储各个节点的 IP 及其上容器应该分配的网段</li>
<li><strong>数据面</strong>是每个节点上运行一个 <code>flanneld</code> 进程，负责从管理面读取节点 IP 及对应的网段信息，并根据这些信息对容器跨接点通信的数据包进行路由转发。</li>
</ul>
<p>集群内所有的 flannel 节点共享一个大网段，比如 <code>10.0.0.0/16</code>，flanneld 启动后便会读取 etcd 中的信息，得知其他节点的 IP 及其使用的子网段，然后向 etcd 申请本节点可使用的子网段（在大网段中划分一个子网段），比如 10.0.0.1&#x2F;24，并将该信息上报记录到 etcd。</p>
<p>flannel 目前已经支持的底层网络实现（backend）包括：</p>
<ul>
<li><code>UDP</code></li>
<li><code>VXLAN</code></li>
<li><code>Host-Gateway</code></li>
<li><code>Alloc</code></li>
<li><code>AWS VPC</code></li>
<li><code>GCE 路由</code></li>
</ul>
<p>其中，性能最好的是 <code>Host-Gateway</code>。<code>AWS VPC</code> 和 <code>GCE 路由</code>都需要 L2 网络支持，并且最好是接入云服务。<code>Alloc</code> 只为本机创建子网，多个节点上的子网之间不能通信。</p>
<h2 id="flannel-backend-详解"><a href="#flannel-backend-详解" class="headerlink" title="flannel backend 详解"></a>flannel backend 详解</h2><p>flannel 通过在每个节点上启动 <code>flanneld</code> 进程，负责每个节点上的子网划分，并将相关配置（如节点的 IP，划分的子网网段等）上报保存到 etcd，而具体的网络报文转发交给具体的 backend 实现。</p>
<p><code>flanneld</code> 可以在启动时通过配置文件指定不同的 backend 进行跨节点的容器之间的网络报文的路由转发，目前比较成熟的 backend 有  <code>UDP</code>、 <code>VXLAN</code> 、<code>Host-Gateway</code>，也有 <code>AWS VPC</code>、<code>GCE 路由</code> 等专门针对云服务的 backend。目前 <code>VXLAN</code> 是官方最推崇的 backend 实现，<code>Host-Gateway</code> 是网络性能最好的 backend 实现，但是需要所有节点在同一个二层网络中互通。<code>UDP</code> 性能相对较差，建议用于测试及比较老的不支持 VXLAN 的 Linux 内核。</p>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP 模式基于 <a href="/202304241633/" title="Linux tun 设备">Linux tun 设备</a>。</p>
<p>当采用 UDP 模式时，<code>flanneld</code> 启动时会通过打开 <code>/dev/net/tun</code> 的方式生成一个 tun 设备。当 <code>flanneld</code> 进程运行之后，查看系统上的网卡信息，可以看到多了 <code>flannel0</code> 的网卡，通过命令 <code>ip -d link show flannel0</code>，可以看到其类型为 <code>tun</code> 设备。此模式下 <code>flanneld</code> 进程监听 8285 端口。</p>
<h4 id="flannel-UDP-模式跨主机通信流程详解"><a href="#flannel-UDP-模式跨主机通信流程详解" class="headerlink" title="flannel UDP 模式跨主机通信流程详解"></a>flannel UDP 模式跨主机通信流程详解</h4><p>本说明使用架构图形如下<br><img src="https://i.csms.tech/img_140.png"></p>
<p>以 ICMP 报文为例，<code>container A</code> 和 <code>container B</code> 的通信过程如下</p>
<ol>
<li><p><code>container A</code> 发起 ICMP 请求报文，根据 <code>container A</code> 中的路由信息，报文被发送到网关 <code>10.244.1.1</code>，对应设备为 <code>Host A</code> 主机上面的 <code>cni0</code> 网卡。此时报文内容如下<br>  <img src="https://i.csms.tech/img_141.png"></p>
</li>
<li><p>到达 cni0 的报文，目的 IP 为 <code>10.244.2.149</code>，内核根据 <code>host A</code> 上的路由信息（<code>10.244.0.0 0.0.0.0 255.255.0.0 U 0 0 0 flannel0</code>），应该将报文发送到 <code>flannel0</code> 网卡。</p>
</li>
<li><p><code>flannel0</code> 是个 tun  设备，数据会被 <code>flanneld</code> 接受，<code>flanneld</code> 会对数据包进行 UDP 封装。</p>
<ul>
<li>报文会被添加上 UDP 头部，其源端口为 <code>host A</code> 上的随机端口，目标端口为 8285</li>
<li>添加 IP 头部，源 IP 为本节点出口 IP （eth0：172.16.130.140），目标 IP 为目标容器所在节点的 IP（eth0：172.16.130.146）。<blockquote>
<p><code>flanneld</code> 进程是如何知道目标容器所在节点的 IP 地址？<strong>是通过 etcd 中的记录，<code>flanneld</code> 进程很容易根据目标容器的 IP 子网段，获取到对应节点的 IP</strong><br>  <img src="https://i.csms.tech/img_142.png"></p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>flanneld</code> 进程封装后的报文重新进入内核协议栈，内核根据主机上的路由信息，从主机 eth0 网卡发送出去，到达了目标主机 <code>host B</code></p>
</li>
<li><p><code>host B</code> 主机内核接收到此网络数据报文，通过 UDP 端口号 8285 将数据包交给监听在此端口上的 <code>flanneld</code> 进程。</p>
</li>
<li><p><code>host B</code> 主机上的 <code>flanneld</code> 进程对数据报文解封，获取到下图所示的报文，在网络层，源 IP 为容器 A 的 IP：10.244.1.96，目标 IP 为容器 B 的 IP：10.244.2.194。解封后的数据报文重新进入内核路由，根据主机 B 的主机路由表（<code>10.244.2.0 0.0.0.0 255.255.255.0 U 0 0 0 cni0</code>），报文被路由到 cni0<br> <img src="https://i.csms.tech/img_143.png"></p>
</li>
<li><p>cni0 网桥将数据包根据 MAC 地址（可以 ARP 寻址得到）将报文转发到容 B。</p>
</li>
<li><p>回程报文将按照上面的数据流原路返回。</p>
</li>
</ol>
<p>纵观以上整个过程，<code>flanneld</code> 进程在其中主要有以下作用</p>
<ul>
<li>UDP 封包解封包，根据目标容器的 IP，将其转发到正确的主机节点（IP）</li>
<li>主机节点上动态更新路由表，根据 etcd 的数据刷新本节点路由表</li>
</ul>
<p>容器 A 和容器 B 虽然物理上网络未相连，但是逻辑上确是在一个三层网络，这种在物理网络之上构建的上层网络称之为 <strong>overlay 网络或者隧道网络</strong></p>
<p><strong>flannel UDP 模式的缺点</strong></p>
<ul>
<li>数据报文先通过 tun 设备从内核态复制到了用户态 <code>flanneld</code> 进行封装，然后再传输到了内核，仅一次网络传输就进行了 2 次用户态到内核态的切换，效率不高。</li>
<li>因为报文封装的关系，flannel0 网卡的 MTU 要比主机 eth0 网卡小 28 个字节。</li>
</ul>
<h3 id="VXLAN"><a href="#VXLAN" class="headerlink" title="VXLAN"></a>VXLAN</h3><p><code>flanneld</code> 进程配置为 <code>vxlan</code> 类型的 backend ，<code>flanneld</code> 进程启动时会在主机上创建名为 <code>flannel.1</code> 的网卡（VTEP），网卡命名格式遵循 <code>flannel.[VNI]</code>，VNI 默认为 1。</p>
<p>通过以下命令查看 VTEP 设备 <code>flannel.1</code> 的信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -d <span class="built_in">link</span> show flannel.1</span></span><br><span class="line">6: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 8951 qdisc noqueue state UNKNOWN mode DEFAULT group default </span><br><span class="line">    link/ether 8a:32:fc:1d:b8:88 brd ff:ff:ff:ff:ff:ff promiscuity 0 </span><br><span class="line">    vxlan id 1 local 172.31.16.124 dev eth0 srcport 0 0 dstport 8472 nolearning ageing 300 udpcsum noudp6zerocsumtx noudp6zerocsumrx addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -d add show flannel.1</span></span><br><span class="line">6: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 8951 qdisc noqueue state UNKNOWN group default </span><br><span class="line">    link/ether 8a:32:fc:1d:b8:88 brd ff:ff:ff:ff:ff:ff promiscuity 0 </span><br><span class="line">    vxlan id 1 local 172.31.16.124 dev eth0 srcport 0 0 dstport 8472 nolearning ageing 300 udpcsum noudp6zerocsumtx noudp6zerocsumrx numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">    inet 10.244.4.0/32 scope global flannel.1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::8832:fcff:fe1d:b888/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>从以上信息可以看到，<code>flannel.1</code> 类型为 <code>vxlan</code>，local IP 为 172.31.16.124，使用的是 UDP 端口 8472</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -anutp</span> </span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">udp        0      0 0.0.0.0:8472            0.0.0.0:*                           -</span><br></pre></td></tr></table></figure>
<p>以上使用 <code>netstat -anutp</code> 命令的输出中，<code>PID/Program name</code> 显示的是 <code>-</code>，说明 8472 这个 UDP 端口不是由用户态的程序监听，而是 <strong>flannel 的 VXLAN 模式工作在内核态</strong>。</p>
<p>Kubernetes 中，VXLAN 模式的 <code>flanneld</code> 的工作流程：</p>
<ol>
<li><p><code>flanneld</code> 启动时，先确保 <code>flannel.1</code> 存在，若已存在则跳过，并将 VTEP 设备的相关信息（ip，节点 IP，MAC 地址等）上报到 etcd 中</p>
</li>
<li><p>当 flannel 网络中的其他节点加入集群并向 etcd 上报注册时，各个节点的 <code>flanneld</code> 会从 etcd 得到通知，并依次执行下面的步骤</p>
</li>
<li><p>在本节点添加一条新网段的路由信息，主要是让 Pod 中的流量能路由到 <code>flannel.1</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ route -n</span><br><span class="line"> Kernel IP routing table</span><br><span class="line"> Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line"> 0.0.0.0         172.31.16.1     0.0.0.0         UG    100    0        0 eth0</span><br><span class="line"> 10.244.0.0      10.244.0.0      255.255.255.0   UG    0      0        0 flannel.1</span><br><span class="line"> 10.244.1.0      10.244.1.0      255.255.255.0   UG    0      0        0 flannel.1</span><br><span class="line"> 10.244.2.0      10.244.2.0      255.255.255.0   UG    0      0        0 flannel.1</span><br><span class="line"> 10.244.3.0      10.244.3.0      255.255.255.0   UG    0      0        0 flannel.1</span><br><span class="line"> 10.244.4.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0</span><br><span class="line"> 172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0</span><br><span class="line"> 172.31.16.0     0.0.0.0         255.255.240.0   U     100    0        0 eth0</span><br></pre></td></tr></table></figure>
</li>
<li><p>在本节点添加一条新增节点的 VTEP 设备的静态 ARP 缓存</p>
</li>
</ol>
<h4 id="flannel-VXLAN-模式跨主机通信流程详解"><a href="#flannel-VXLAN-模式跨主机通信流程详解" class="headerlink" title="flannel VXLAN 模式跨主机通信流程详解"></a>flannel VXLAN 模式跨主机通信流程详解</h4><p>flannel VXLAN 模式时容器跨节点网络通信实现流程<br><img src="https://i.csms.tech/img_144.png"></p>
<ol>
<li>同 UDP Backend 模式，容器 A 当中的 IP 包通过容器 A 内的路由表被发送到 cni0</li>
<li>到达 cni0 当中的 IP 包通过匹配 host A 当中的路由表发现通往 10.244.2.194 的 IP 包应该交给 flannel.1 接口</li>
<li>flannel.1 作为一个 VTEP 设备，收到报文后将按照 VTEP 的配置进行封包，首先通过 etcd 得知 10.244.2.194 属于节点 B，并得到节点 B 的 IP，通过节点 A 当中的转发表得到节点 B 对应的 VTEP 的 MAC，根据 flannel.1 设备创建时的设置的参数（VNI、local IP、Port）进行 VXLAN 封包</li>
<li>通过 host A 跟 host B 之间的网络连接，VXLAN 包到达 host B 的 eth1 接口</li>
<li>通过端口 8472，VXLAN 包被转发给 VTEP 设备 flannel.1 进行解包</li>
<li>解封装后的 IP 包匹配 host B 当中的路由表（10.244.2.0），内核将 IP 包转发给 cni0</li>
<li>cni0 将 IP 包转发给连接在 cni0 上的容器 B</li>
</ol>
<p>在 VXLAN 模式下，数据包的封装解封装及路由转发都是由内核完成，<code>flanneld</code> 不再进行数据包的封装和路由转发，仅动态设置主机的路由表项、ARP 表及 FDB 表项。其效率相比 UDP 模式高效。</p>
<h3 id="host-gw"><a href="#host-gw" class="headerlink" title="host-gw"></a>host-gw</h3><p>要配置使用 <code>host-gw</code> 模式，将 Backend 中的 <code>type</code> 改为 <code>host-gw</code> 即可。</p>
<p>使用 <code>host-gw</code> Backend 的 Flannel 网络的网络包传输过程如下图所示：<br><img src="https://i.csms.tech/img_145.png"></p>
<ol>
<li>同 UDP、VXLAN 模式一致，通过容器 A 的路由表， IP 包到达 cni0</li>
<li>到达 cni0 的 IP 包匹配到 host A 当中的路由规则（10.244.2.0），并且网关为 172.16.130.164，即 host B，所以内核将 IP 包发送给 host B（172.16.130.164）</li>
<li>IP 包通过物理网络到达 host B 的 eth1</li>
<li>到达 host B eth1 的 IP 包匹配到 host B 当中的路由表（10.244.2.0），IP 包被转发给 cni0</li>
<li>cni0 将 IP 包转发给连接在 cni0 上的容器 B</li>
</ol>
<p><code>host-gw</code> 模式其中一个局限性就是，由于是通过节点上的路由表来实现各个节点之间的跨节点网络通信，那么就得保证两个节点是可以直接路由过去的。按照内核当中的路由规则，网关必须在跟主机当中至少一个 IP 处于同一网段，故造成的结果就是采用 <code>host-gw</code> 这种 Backend 方式时集群中所有的节点必须处于同一个网络当中，这对于集群规模比较大时需要对节点进行网段划分的话会存在一定的局限性。另外一个则是随着集群当中节点规模的增大，<code>flanneld</code> 需要维护主机上成千上万条路由表的动态更新也是一个不小的压力。</p>
<p>采用 <code>host-gw</code> 模式后 <code>flanneld</code> 的唯一作用就是负责主机上路由表的动态更新。</p>
<h2 id="Kubernetes-中-flannel-相关配置"><a href="#Kubernetes-中-flannel-相关配置" class="headerlink" title="Kubernetes 中 flannel 相关配置"></a>Kubernetes 中 flannel 相关配置</h2><p>CNI 调用 flannel 插件是通过其配置文件 <code>/etc/cni/net.d/10-flannel.conflist</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/cni/net.d/10-flannel.conflist</span> </span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;cbr0&quot;,</span><br><span class="line">  &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;flannel&quot;,</span><br><span class="line">      &quot;delegate&quot;: &#123;</span><br><span class="line">        &quot;hairpinMode&quot;: true,</span><br><span class="line">        &quot;isDefaultGateway&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;portmap&quot;,</span><br><span class="line">      &quot;capabilities&quot;: &#123;</span><br><span class="line">        &quot;portMappings&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>flannel 安装好启动之后，查看 flannel 的配置，可以看到配置的网段信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /run/flannel/subnet.env</span> </span><br><span class="line">FLANNEL_NETWORK=10.244.0.0/16</span><br><span class="line">FLANNEL_SUBNET=10.244.0.1/24</span><br><span class="line">FLANNEL_MTU=8951</span><br><span class="line">FLANNEL_IPMASQ=true</span><br></pre></td></tr></table></figure>

<p>在 Kubernetes 中，要查看 flannel 详细的配置，可以查看以下 configmap</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl edit configmap -n kube-flannel kube-flannel-cfg</span></span><br><span class="line">data:</span><br><span class="line">  cni-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;cbr0&quot;,</span><br><span class="line">      &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span><br><span class="line">      &quot;plugins&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;type&quot;: &quot;flannel&quot;,</span><br><span class="line">          &quot;delegate&quot;: &#123;</span><br><span class="line">            &quot;hairpinMode&quot;: true,</span><br><span class="line">            &quot;isDefaultGateway&quot;: true</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;type&quot;: &quot;portmap&quot;,</span><br><span class="line">          &quot;capabilities&quot;: &#123;</span><br><span class="line">            &quot;portMappings&quot;: true</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span><br><span class="line">      &quot;Backend&quot;: &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;vxlan&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从中可以看到 flannel 使用的大网段 <code>10.244.0.0/16</code>，以及其使用的底层（后端）网络通信的实现技术（<code>Backend</code>）</p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.51cto.com/article/714336.html">万字长文，带你搞懂 Kubernetes 网络模型</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.infoq.cn/article/qduqfhrisblob7textxe">Kubernetes 网络模型进阶</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Volume 使用方法</title>
    <url>/202211291450/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="常用-Volume-类型"><a href="#常用-Volume-类型" class="headerlink" title="常用 Volume 类型"></a>常用 Volume 类型</h1><p>以下是几种可用卷类型：</p>
<ul>
<li><code>emptyDir</code> - 用于存储临时数据的简单空目录，生命周期和 Pod 一致。</li>
<li><code>hostPath</code> - 用于将宿主机中的文件系统挂载到 Pod 中，生命周期不与 Pod 绑定。</li>
<li><code>gitRepo</code> - 通过拉取 Git 仓库的内容来初始化的卷。<strong>已弃用</strong></li>
<li><code>nfs</code> - 挂载到 Pod 中的 NFS 共享文件系统。</li>
<li><code>configMap</code>、<code>secret</code> - 用于将 Kubernetes 中的部分资源和集群信息公开给 Pod 的特殊类型的卷</li>
<li><code>persistentVolumeClaim</code> - 简称 PVC，使用预置和动态配置的持久卷。</li>
<li><code>downwardAPI</code> - 在不使用 Kubernetes 客户端或 API 服务器的情况下获得自己或集群的信息 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Downward API](https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/downward-api/)">[5]</span></a></sup></li>
</ul>
<h1 id="emptyDir-卷"><a href="#emptyDir-卷" class="headerlink" title="emptyDir 卷"></a>emptyDir 卷</h1><p><code>emptyDir</code> 表示与 Pod 生命周期相同的临时目录。<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[emptyDir](https://kubernetes.io/zh-cn/docs/concepts/storage/volumes/#emptydir)
">[4]</span></a></sup></p>
<p>emptyDir 配置示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: test-pd</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: registry.k8s.io/test-webserver</span><br><span class="line">    name: test-container</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /cache</span><br><span class="line">      name: cache-volume</span><br><span class="line">  volumes:</span><br><span class="line">  - name: cache-volume</span><br><span class="line">    emptyDir:</span><br><span class="line">      sizeLimit: 500Mi</span><br><span class="line">      medium: Memory</span><br></pre></td></tr></table></figure>
<ul>
<li><code>emptyDir.medium</code> - 表示此目录应使用哪种类别的存储介质，默认为 <code>&quot;&quot;</code>，表示使用节点的默认介质（一般是节点的本地磁盘）。可选值必须为 <code>&quot;&quot;</code> 或者 <code>Memory</code>， <code>Memory</code> 表示使用 <code>tmfs</code> (存在内存而非硬盘)</li>
</ul>
<h1 id="PersistentVolume-和-PersistentVolumeClaim"><a href="#PersistentVolume-和-PersistentVolumeClaim" class="headerlink" title="PersistentVolume 和 PersistentVolumeClaim"></a>PersistentVolume 和 PersistentVolumeClaim</h1><p><code>PersistentVolume (PV)</code>（持久化卷），是对底层的共享存储的一种抽象，PV 由管理员进行创建和配置，它和具体的底层的共享存储技术的实现方式有关，比如 <code>Ceph</code>、<code>GlusterFS</code>、<code>NFS</code> 等，都是通过插件机制完成与共享存储的对接。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用 PersistentVolume 作为存储](https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-persistent-volume-storage/)">[1]</span></a></sup></p>
<p><code>PersistentVolumeClaim（PVC）</code>是由用户发起的对存储的请求。 它类似于 Pod。 Pod 消耗节点资源，PVC 消耗 PV 资源。Pod 可以请求特定级别的资源（CPU和内存）。PVC 可以请求特定的存储大小和访问模式（例如，可以一次读&#x2F;写或多次只读）匹配的 PV。</p>
<p><code>PVC</code> 和 <code>PV</code> 中的 <code>spec</code> 关键字段要匹配，比如存储（storage）大小、读写模式，才能申请到对应的 PV 中的资源。PV 和 PVC 处于一一对应的关系。 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[k8s存储持久化（nfs用例）](https://blog.51cto.com/u_15064627/4251683)">[2]</span></a></sup></p>
<p><code>PV</code> 可以设置三种回收策略：</p>
<ul>
<li>保留（Retain） - 保留产生的数据，PV 不进行处理</li>
<li>回收（Recycle） - 将执行清除操作，之后可以被新的pvc使用，需要插件支持。NFS 支持全部 3 种。</li>
<li>删除（Delete） - 删除pv和外部关联的存储资源，需要插件支持。</li>
</ul>
<p>PV卷阶段状态</p>
<ul>
<li><code>Available</code> – 资源尚未被 claim 使用</li>
<li><code>Bound</code> – 卷已经被绑定到 claim 了</li>
<li><code>Released</code> – claim 被删除，卷处于释放状态，但未被集群回收。</li>
<li><code>Failed</code> – 卷自动回收失败</li>
</ul>
<span id="more"></span>

<h2 id="NFS-作为-PV"><a href="#NFS-作为-PV" class="headerlink" title="NFS 作为 PV"></a>NFS 作为 PV</h2><a href="/202210251713/" title="NFS 服务部署参考">NFS 服务部署参考</a>

<h3 id="创建-PV"><a href="#创建-PV" class="headerlink" title="创建 PV"></a>创建 PV</h3><p><strong><code>PV</code> 属于集群级别的资源，不属于任何 namespace</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-pv-1</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteMany</span><br><span class="line">  - ReadOnlyMany</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 100Gi</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/NFSDataHome</span><br><span class="line">    server: 34.230.1.1</span><br><span class="line">  persistentVolumeReclaimPolicy: Retain</span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">  </span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-pv-2</span><br><span class="line">  labels:</span><br><span class="line">    name: nfs-pv-2</span><br><span class="line">spec:</span><br><span class="line">  nfs:</span><br><span class="line">    path: /k8s_volumes/v2</span><br><span class="line">    server: 192.168.0.3</span><br><span class="line">  accessModes: [&quot;ReadWriteOnce&quot;]</span><br><span class="line">  persistentVolumeReclaimPolicy: Retain</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 5Gi</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以上配置分别创建了 PV</p>
<ul>
<li><code>nfs-pv-1</code> - <code>accessModes</code> 为 <code>[&quot;ReadWriteMany&quot;, &quot;ReadOnlyMany&quot;]</code>，大小为 <code>100Gi</code></li>
<li><code>nfs-pv-2</code> - <code>accessModes</code> 为 <code>[&quot;ReadWriteOnce&quot;]</code>，大小为 <code>5Gi</code></li>
</ul>
<p>查看 PV</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pv</span></span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">uat-nfs   100Gi      RWX            Retain           Available                                   100s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建对应的-PVC-申请-PV-存储资源"><a href="#创建对应的-PVC-申请-PV-存储资源" class="headerlink" title="创建对应的 PVC 申请 PV 存储资源"></a>创建对应的 PVC 申请 PV 存储资源</h3><p><code>PVC</code> 属于 <code>Namespace</code> 基本的资源，需要在相应的 <code>Namespace</code> 中使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: mypvc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  accessModes: [&quot;ReadWriteMany&quot;]</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 100Gi</span><br></pre></td></tr></table></figure>
<p>以上 PVC 会匹配到持久卷 <code>nfs-pv-1</code></p>
<p>查看 PVC</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pvc -A</span><br></pre></td></tr></table></figure>

<h3 id="使用-PVC"><a href="#使用-PVC" class="headerlink" title="使用 PVC"></a>使用 PVC</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: vol-pvc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: html</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: mypvc</span><br><span class="line">  containers:</span><br><span class="line">  - name: myapp</span><br><span class="line">    image: nginx</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: html</span><br><span class="line">      mountPath: /usr/share/nginx/html/</span><br><span class="line">      # subPath: logs/admin</span><br></pre></td></tr></table></figure>
<p><strong>k8s 该 Pod 所在 NODE 节点服务器需要安装 <code>nfs-utils</code>，否则挂载会报错，POD 无法运行。建议每台节点都安装</strong></p>
<p>Pod 成功运行后，进入对应容器，会看到容器中通过 NFS 方式挂载了 NFS 共享存储。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it vol-pvc -- <span class="built_in">df</span> -h</span></span><br><span class="line">Filesystem                   Size  Used Avail Use% Mounted on</span><br><span class="line">overlay                       36G  3.4G   32G  10% /</span><br><span class="line">tmpfs                         64M     0   64M   0% /dev</span><br><span class="line">tmpfs                        2.0G     0  2.0G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root       36G  3.4G   32G  10% /etc/hosts</span><br><span class="line">shm                           64M     0   64M   0% /dev/shm</span><br><span class="line">192.168.0.3:/k8s_volumes/v4  3.6T  1.9T  1.6T  55% /usr/share/nginx/html</span><br><span class="line">tmpfs                        2.0G   12K  2.0G   1% /run/secrets/kubernetes.io/serviceaccount</span><br><span class="line">tmpfs                        2.0G     0  2.0G   0% /proc/acpi</span><br><span class="line">tmpfs                        2.0G     0  2.0G   0% /proc/scsi</span><br><span class="line">tmpfs                        2.0G     0  2.0G   0% /sys/firmware</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>以上方法创建的 PV 为静态 PV，此种情况下，PV 和 PVC 具有一对一的绑定关系</strong>，即一个 PV 只能绑定到一个 PVC，如果要在另一个 Namespace 中使用同一个的 PV，是不被允许的，此时 PVC 会绑定失败： <code>no persistent volumes available for this claim and no storage class is set</code></p>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><h4 id="PV-处于-Released-状态，新建-PVC-处于-Pending-状态"><a href="#PV-处于-Released-状态，新建-PVC-处于-Pending-状态" class="headerlink" title="PV 处于 Released 状态，新建 PVC 处于 Pending 状态"></a>PV 处于 Released 状态，新建 PVC 处于 Pending 状态</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pv</span></span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                   STORAGECLASS   REASON   AGE</span><br><span class="line">uat-nfs   100Gi      ROX,RWX        Retain           Bound    default/pvc-admin                               62m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pvc -A</span></span><br><span class="line">NAMESPACE   NAME             STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">default     pvc-admin        Bound    uat-nfs   100Gi      ROX,RWX                       29s</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如上所示，创建 PVC 后，PV 处于 <code>Bound</code> 状态，此时创建其他内容一样，只是 <code>matadata.name</code> 不同的 PVC ，PVC 无法成功创建，状态为 <code>Pending</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pvc -A</span></span><br><span class="line">NAMESPACE   NAME        STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">default     pvc-api     Pending                                                      2m30s</span><br><span class="line">default     pvc-admin   Bound     uat-nfs   100Gi      ROX,RWX                       71m</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看新建的 PVC <code>pvc-api</code> 的描述信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe pvc pvc-api -n default</span></span><br><span class="line">Name:          pvc-api</span><br><span class="line">Namespace:     default</span><br><span class="line">StorageClass:  </span><br><span class="line">Status:        Pending</span><br><span class="line">...</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason         Age                   From                         Message</span><br><span class="line">  ----    ------         ----                  ----                         -------</span><br><span class="line">  Normal  FailedBinding  14s (x12 over 2m48s)  persistentvolume-controller  no persistent volumes available for this claim and no storage class is set</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果显示 <code>no persistent volumes available for this claim and no storage class is set</code>，这是因为 PV 已经分配到了 PVC，无法再进行分配。</p>
<p>此时查看 PV 状态，处于 <code>Bound</code> 状态，<code>CLAIM</code> 为第一次创建 PVC</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pv</span></span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                   STORAGECLASS   REASON   AGE</span><br><span class="line">uat-nfs   100Gi      ROX,RWX        Retain           Bound    default/pvc-admin                               135m</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此种情况下，执行以下命令手动删除已分配的 PVC</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl delete pvc -n default      pvc-admin</span><br></pre></td></tr></table></figure>
<p>再次查看 PVC</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pvc -A</span></span><br><span class="line">NAMESPACE   NAME       STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">default     pvc-api   Pending</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pv</span></span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM                   STORAGECLASS   REASON   AGE</span><br><span class="line">uat-nfs   100Gi      ROX,RWX        Retain           Released   default/pvc-admin                               140m</span><br></pre></td></tr></table></figure>
<p>发现 PVC 依然处于 <code>Pending</code> 状态，而 PV 状态变为了 <code>Released</code>，无法再分配给其他 PVC。</p>
<h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><ul>
<li>删除 PV<br>  手动删除 PV，因为之前创建的 PV，其回收策略为 <code>Retain</code>，PV 删除后，数据依然存在。如果需要此存储作为 PV，创建新的 PV 即可，然后针对不同的 Namespace 创建对应的 PVC</li>
<li>修改 PV 的回收策略<br>  执行以下命令，修改 PV 的回收策略 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[What to do with Released persistent volume](https://stackoverflow.com/questions/50667437/what-to-do-with-released-persistent-volume)
">[3]</span></a></sup>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl patch pv PV_NAME -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;claimRef&quot;: null&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-persistent-volume-storage/">使用 PersistentVolume 作为存储</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.51cto.com/u_15064627/4251683">k8s存储持久化（nfs用例）</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://stackoverflow.com/questions/50667437/what-to-do-with-released-persistent-volume">What to do with Released persistent volume</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/volumes/#emptydir">emptyDir</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/downward-api/">Downward API</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes 对象的 yaml 描述语法说明</title>
    <url>/202209241108/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7 5.4.212-1</li>
<li>Docker 20.10.18</li>
<li>containerd.io-1.6.8</li>
<li>kubectl-1.25.0</li>
<li>kubeadm-1.25.0</li>
<li>kubelet-1.25.0</li>
</ul>
<p>几乎所有的 Kubernetes 对象都包含两个嵌套的对象字段：</p>
<ul>
<li><code>spec</code> - 对象的期望状态（<code>desired state</code>）的描述信息</li>
<li><code>status</code> - 对象当前的状态（<code>current state</code>）</li>
</ul>
<p>Kubernetes 系统的目标就是不停的调整对象的当前状态（<code>current state</code>）直到和期望状态（<code>desired state</code>）匹配。</p>
<h1 id="常用字段说明"><a href="#常用字段说明" class="headerlink" title="常用字段说明"></a>常用字段说明</h1><h2 id="必需字段"><a href="#必需字段" class="headerlink" title="必需字段"></a>必需字段</h2><p>在想要创建的 Kubernetes 对象所对应的 <code>.yaml</code> 文件中，必须配置的字段如下：<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[必需字段](https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/kubernetes-objects/#required-fields)">[1]</span></a></sup></p>
<ul>
<li><code>apiVersion</code> - 创建该对象所使用的 Kubernetes API 的版本</li>
<li><code>kind</code> - 想要创建的对象的类别</li>
<li><code>metadata</code> - 帮助唯一标识对象的一些数据，包括一个 <code>name</code> 字符串、<code>UID</code> 和可选的 <code>namespace</code></li>
<li><code>spec</code> - 你所期望的该对象的状态</li>
</ul>
<h2 id="metadata"><a href="#metadata" class="headerlink" title="metadata"></a>metadata</h2><p>帮助唯一标识对象的一些数据，包括一个 <code>name</code> 字符串、<code>UID</code> 和可选的 <code>namespace</code> </p>
<p>集群中的每一个对象都有一个 <strong>名称</strong>（<code>name</code>）来标识在同类资源中的唯一性。<code>name</code> 也用来作为 url 中的资源名称 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[对象名称和 IDs](https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/names/)">[2]</span></a></sup></p>
<p>每个 Kubernetes 对象也有一个 <strong>UID</strong>（<code>uid</code>）来标识在整个集群中的唯一性。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels: </span><br><span class="line">    app: nginx-deployment</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  replicas: 2 </span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.14.2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure>


<h2 id="标签和选择算符"><a href="#标签和选择算符" class="headerlink" title="标签和选择算符"></a>标签和选择算符</h2><p><strong>标签（labels）</strong> 是附加到 Kubernetes 对象（比如 Pod）上的键值对。 标签旨在用于指定对用户有意义且相关的对象的标识属性，但不直接对核心系统有语义含义。 标签可以用于组织和选择对象的子集。标签可以在创建时附加到对象，随后可以随时添加和修改。 每个对象都可以定义一组键&#x2F;值标签。每个键对于给定对象必须是唯一的。<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[标签和选择算符](https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/)">[3]</span></a></sup></p>
<p>通过 <strong>标签选择算符</strong>，客户端&#x2F;用户可以识别一组对象。<strong>标签选择算符</strong> 是 Kubernetes 中的核心分组原语。</p>
<blockquote>
<p>对于某些 API 类别（例如 <code>ReplicaSet</code>）而言，两个实例的标签选择算符不得在命名空间内重叠， 否则它们的控制器将互相冲突，无法确定应该存在的副本个数。</p>
</blockquote>
<p>比较新的资源，例如 <code>Job</code>、 <code>Deployment</code>、 <code>ReplicaSet</code> 和 <code>DaemonSet</code>， 也支持基于集合的需求。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">selector:</span><br><span class="line">  matchLabels:</span><br><span class="line">    component: redis</span><br><span class="line">  matchExpressions:</span><br><span class="line">    - &#123;key: tier, operator: In, values: [cache]&#125;</span><br><span class="line">    - &#123;key: environment, operator: NotIn, values: [dev]&#125;</span><br></pre></td></tr></table></figure>
<p><code>matchLabels</code> 是由 <code>&#123;key,value&#125;</code> 对组成的映射。 <code>matchLabels</code> 映射中的单个 <code>&#123;key,value&#125;</code> 等同于 <code>matchExpressions</code> 的元素， 其 <code>key</code> 字段为 <code>key</code>，<code>operator</code> 为 <code>In</code>，而 <code>values</code> 数组仅包含 <code>value</code>。 <code>matchExpressions</code> 是 Pod 选择算符需求的列表。 有效的运算符包括 <code>In</code>、<code>NotIn</code>、<code>Exists</code> 和 <code>DoesNotExist</code>。 在 <code>In</code> 和 <code>NotIn</code> 的情况下，设置的值必须是非空的。 来自 <code>matchLabels</code> 和 <code>matchExpressions</code> 的所有要求都按 <strong>逻辑与</strong> 的关系组合到一起 – <strong>它们必须都满足才能匹配</strong>。</p>
<h3 id="字段选择器"><a href="#字段选择器" class="headerlink" title="字段选择器"></a>字段选择器</h3><p><strong>字段选择器（Field selectors）</strong> 允许你根据一个或多个资源字段的值 <strong>筛选 Kubernetes 资源</strong></p>
<p>下面是一些使用字段选择器查询的例子：</p>
<ul>
<li><code>metadata.name=my-service</code></li>
<li><code>metadata.namespace!=default</code></li>
<li><code>status.phase=Pending</code></li>
</ul>
<p>下面这个 <code>kubectl</code> 命令将筛选出 <code>status.phase</code> 字段值为 <code>Running</code> 的所有 Pod：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods --field-selector status.phase=Running</span><br></pre></td></tr></table></figure>

<p>不同的 Kubernetes 资源类型支持不同的字段选择器。 所有资源类型都支持 <code>metadata.name</code> 和 <code>metadata.namespace</code> 字段。 使用不被支持的字段选择器会产生错误</p>
<p>你可在字段选择器中使用 <code>=</code>、<code>==</code> 和 <code>!=</code> （<code>=</code> 和 <code>==</code> 的意义是相同的）操作符。 例如，下面这个 <code>kubectl</code> 命令将筛选所有不属于 <code>default</code> 命名空间的 Kubernetes 服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get services  --all-namespaces --field-selector metadata.namespace!=default</span><br></pre></td></tr></table></figure>

<p>同标签和其他选择器一样， 字段选择器可以通过使用逗号分隔的列表组成一个选择链。 下面这个 <code>kubectl</code> 命令将筛选 <code>status.phase</code> 字段不等于 <code>Running</code> 同时 <code>spec.restartPolicy</code> 字段等于 <code>Always</code> 的所有 Pod：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods --field-selector=status.phase!=Running,spec.restartPolicy=Always</span><br></pre></td></tr></table></figure>
<p>你能够跨多种资源类型来使用字段选择器。 下面这个 <code>kubectl</code> 命令将筛选出所有不在 <code>default</code> 命名空间中的 <code>StatefulSet</code> 和 <code>Service</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get statefulsets,services --all-namespaces --field-selector metadata.namespace!=default</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="metadata-ownerReferences"><a href="#metadata-ownerReferences" class="headerlink" title="metadata.ownerReferences"></a>metadata.ownerReferences</h2><p>在 Kubernetes 中，一些对象是其他对象的 <strong>属主（Owner）</strong>。 例如，<code>ReplicaSet</code> 是一组 <code>Pod</code> 的属主。 具有属主的对象是属主的 <strong>附属（Dependent）</strong>。<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[属主与附属](https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/owners-dependents/)">[4]</span></a></sup></p>
<p>附属对象有一个 <code>metadata.ownerReferences</code> 字段，用于引用其属主对象。 一个有效的属主引用，包含与附属对象同在一个命名空间下的对象名称和一个 UID。 Kubernetes 自动为一些对象的附属资源设置属主引用的值， 这些对象包含 <code>ReplicaSet</code>、<code>DaemonSet</code>、<code>Deployment</code>、<code>Job</code>、<code>CronJob</code>、<code>ReplicationController</code> 等。</p>
<p>附属对象还有一个 <code>ownerReferences.blockOwnerDeletion</code> 字段，该字段使用布尔值， 用于控制特定的附属对象是否可以阻止垃圾收集删除其属主对象。 如果控制器（例如 Deployment 控制器） 设置了 <code>metadata.ownerReferences</code> 字段的值，Kubernetes 会自动设置 <code>blockOwnerDeletion</code> 的值为 <code>true</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ownerReferences:</span><br><span class="line">    - apiVersion: apps/v1</span><br><span class="line">      kind: ReplicaSet</span><br><span class="line">      name: test-nginx-deployment-54cb7448dc</span><br><span class="line">      uid: 34b3353a-bd05-4ac3-959f-d6fbc85a2d2e</span><br><span class="line">      controller: true</span><br><span class="line">      blockOwnerDeletion: true</span><br></pre></td></tr></table></figure>

<h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><p><a href="https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/workload-resources/pod-v1/">Pod 资源定义官网 API 说明</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: $&#123;NAME&#125;</span><br><span class="line">  namespace: $&#123;NAMESPACE&#125;</span><br><span class="line">spec:</span><br><span class="line">  restartPolicy: Always</span><br><span class="line">  containers:</span><br><span class="line">  - name: $&#123;NAME&#125;</span><br><span class="line">    image: nginx:1.14.2</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line">      name: http-web</span><br><span class="line">      </span><br><span class="line">    args:</span><br><span class="line">    - sh</span><br><span class="line">    - -c</span><br><span class="line">    - ping 127.0.0.1</span><br><span class="line">    </span><br><span class="line">    command:</span><br><span class="line">      - sh</span><br><span class="line">      - -c</span><br><span class="line">      - cd /code1/ &amp;&amp; python manage.py runserver localhost:8080</span><br><span class="line">    env:</span><br><span class="line">    - name: DEMO_GREETING</span><br><span class="line">      value: &quot;Hello from the environment&quot;</span><br><span class="line">    - name: DEMO_FAREWELL</span><br><span class="line">      value: &quot;Such a sweet sorrow&quot;</span><br><span class="line">    </span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: html</span><br><span class="line">      mountPath: /usr/share/nginx/html/</span><br><span class="line">      # subPath: logs/admin</span><br><span class="line">      </span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        cpu: 200m</span><br><span class="line">        memory: 10Mi</span><br><span class="line">      limits:</span><br><span class="line">        cpu: 200m</span><br><span class="line">        memory: 10Mi</span><br><span class="line">    </span><br><span class="line">  nodeSelector:</span><br><span class="line">      disktype: ssd</span><br><span class="line">      </span><br><span class="line">  nodeName: foo-node</span><br><span class="line">  </span><br><span class="line">  imagePullSecrets:</span><br><span class="line">  - name: $&#123;secret_name&#125;</span><br><span class="line">  </span><br><span class="line">  hostAliases:</span><br><span class="line">  - ip: &quot;50.18.1.1&quot;</span><br><span class="line">    hostnames:</span><br><span class="line">    - &quot;mysql.master&quot;</span><br><span class="line">    - &quot;mysql.slave&quot;</span><br><span class="line">    - &quot;mongo.com&quot;</span><br><span class="line">  - ip: &quot;50.18.1.2&quot;</span><br><span class="line">    hostnames:</span><br><span class="line">    - &quot;meta-service.apollo.com&quot;</span><br><span class="line">  - ip: &quot;172.31.88.78&quot;</span><br><span class="line">    hostnames:</span><br><span class="line">    - &quot;redis.com&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>.spec.containers[*].ports[*].containerPort</code> - <code>Pod</code> 暴露的端口</p>
</li>
<li><p><code>.spec.containers[*].ports[*].name</code> - <code>Pod</code> 暴露的端口的自定义名称，可在 <a href="#Service"><code>Service</code></a> 的 <code>targetPort</code> 属性中，Probe 等功能中引用这些名称</p>
</li>
<li><p><code>.spec.restartPolicy</code> -  重启策略，适用于 <code>Pod</code> 中的所有容器，可取值如下</p>
<ul>
<li><code>Always</code> - 默认值</li>
<li><code>OnFailure</code></li>
<li><code>Never</code></li>
</ul>
<blockquote>
<p>Sidecar Container（使用 <code>initContainers</code> 定义的容器） 会忽略 Pod 级别定义的 <code>restartPolicy</code>，<code>initContainers</code> 定义的容器有其容器级别的 <code>restartPolicy</code>，默认也为 <code>Always</code></p>
</blockquote>
<blockquote>
<p>当 Kubelet 使用 <code>restartPolicy</code> 重启 Pod 中的容器时，会使用指数级别的时间间隔（10s, 20s,40s, …），5m 封顶</p>
</blockquote>
</li>
<li><p><code>.spec.containers[*].args</code> - 定义容器启动后执行的命令，会替换镜像中定义的默认执行程序</p>
</li>
<li><p><code>.spec.nodeSelector</code>  - 根据节点标签将 <code>Pod</code> 调度到指定节点 <sup id="fnref:13"><a href="#fn:13" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[将 Pod 指派给节点](https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/assign-pod-node/#nodename)">[13]</span></a></sup></p>
</li>
<li><p><code>.spec.nodeName: foo-node</code> - 将 <code>Pod</code> 调度到指定节点。 使用 <code>nodeName</code> 规则的优先级会高于使用 <code>nodeSelector</code> 或亲和性与非亲和性的规则，如果所指代的节点不存在，则 Pod 无法运行，而且在某些情况下可能会被自动删除。如果所指代的节点无法提供用来运行 Pod 所需的资源，Pod 会失败， 而其失败原因中会给出是否因为内存或 CPU 不足而造成无法运行。<sup id="fnref:12"><a href="#fn:12" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[nodeName ](https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/assign-pod-node/#nodename)">[12]</span></a></sup></p>
</li>
<li><p><code>.spec.containers[*].env</code> - 创建 Pod 时，可以为其下的容器设置环境变量。通过配置文件的 <code>env</code> 或者 <code>envFrom</code> 字段来设置环境变量。 <sup id="fnref:15"><a href="#fn:15" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[为容器设置环境变量](https://kubernetes.io/zh-cn/docs/tasks/inject-data-application/define-environment-variable-container/)">[15]</span></a></sup></p>
</li>
<li><p><code>.spec.containers[*].volumeMounts</code> - 挂载卷，<code>subPath</code> 可用于指定挂载卷（<code>name: html</code>）的子目录到容器路径（<code>mountPath</code>），而不是直接挂载卷目录。</p>
</li>
<li><p><code>.spec.containers[*].resources</code> - <a href="https://csms.tech/202304271425/#Pod-计算资源限制">资源限制</a></p>
</li>
</ul>
<h3 id="容器探针"><a href="#容器探针" class="headerlink" title="容器探针"></a>容器探针</h3><p><strong>探针（Probe）</strong> 主要用来检测 <code>Pod</code> 的状态，主要有 <strong>活跃（Liveness）</strong>、<strong>就绪（Readiness）</strong> 和 <strong>启动（Startup）</strong> 探针 <sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[配置存活、就绪和启动探针](https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)">[10]</span></a></sup></p>
<ul>
<li><code>livenessProbe</code> - <code>kubelet</code> 使用 <strong>存活探针</strong> 来确定什么时候要重启容器，例如，存活探针可以探测到应用死锁（应用程序在运行，但是无法继续执行后面的步骤）情况。 重启这种状态下的容器有助于提高应用的可用性，即使其中存在缺陷。</li>
<li><code>readinessProbe</code> - <code>kubelet</code> 使用 <strong>就绪探针</strong> 可以知道容器何时准备好接受请求流量，当一个 <code>Pod</code> 内的所有容器都就绪时，才能认为该 <code>Pod</code> 就绪。 这种信号的一个用途就是控制哪个 <code>Pod</code> 作为 <code>Service</code> 的后端。 若 <code>Pod</code> 尚未就绪，会被从 <code>Service</code> 的负载均衡器中剔除。</li>
<li><code>startupProbe</code> - <code>kubelet</code> 使用 <strong>启动探针</strong> 来了解应用容器何时启动。 如果配置了这类探针，你就可以控制容器在启动成功后再进行存活性和就绪态检查， 确保这些存活、就绪探针不会影响应用的启动。 启动探针可以用于对慢启动容器进行存活性检测，避免它们在启动运行之前就被杀掉。</li>
</ul>
<p><code>Probe</code> 是由 <code>kubelet</code> 对容器执行的定期诊断。 要执行诊断，<code>kubelet</code> 既可以在容器内执行代码，也可以发出一个网络请求。<sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[容器探针](https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)">[11]</span></a></sup></p>
<p>使用探针来检查容器有四种不同的方法。 每个探针都必须准确定义为这四种机制中的一种：</p>
<ul>
<li><code>exec</code> - 在容器内执行指定命令。如果命令退出时返回码为 0 则认为诊断成功。</li>
<li><code>grpc</code> - 使用 gRPC 执行一个远程过程调用。 目标应该实现 gRPC健康检查。 如果响应的状态是 “SERVING”，则认为诊断成功。 gRPC 探针是一个 alpha 特性，只有在你启用了 “GRPCContainerProbe” 特性门控时才能使用。</li>
<li><code>httpGet</code> - 对容器的 IP 地址上指定端口和路径执行 HTTP GET 请求。如果响应的状态码大于等于 200 且小于 400，则诊断被认为是成功的。</li>
<li><code>tcpSocket</code> - 对容器的 IP 地址上的指定端口执行 TCP 检查。如果端口打开，则诊断被认为是成功的。 如果远程系统（容器）在打开连接后立即将其关闭，这算作是健康的</li>
</ul>
<blockquote>
<p><code>exec</code> 方式的探针，因为其实现涉及到对进程的 <code>creation/forking</code>，这会导致额外的资源消耗，如果主机上资源紧张，可能会导致探测失败。 <sup id="fnref:18"><a href="#fn:18" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Container probes](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)">[18]</span></a></sup></p>
</blockquote>
<p>每次探测都将获得以下三种结果之一：</p>
<ul>
<li><code>Success</code>（成功） - 容器通过了诊断。</li>
<li><code>Failure</code>（失败） - 容器未通过诊断。</li>
<li><code>Unknown</code>（未知） - 诊断失败，因此不会采取任何行动。</li>
</ul>
<h4 id="livenessProbe"><a href="#livenessProbe" class="headerlink" title="livenessProbe"></a>livenessProbe</h4><h5 id="exec-方式的-livenessProbe"><a href="#exec-方式的-livenessProbe" class="headerlink" title="exec 方式的 livenessProbe"></a>exec 方式的 livenessProbe</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    test: liveness</span><br><span class="line">  name: liveness-exec</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: registry.k8s.io/busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600</span><br><span class="line">    livenessProbe:</span><br><span class="line">      exec:</span><br><span class="line">        command:</span><br><span class="line">        - cat</span><br><span class="line">        - /tmp/healthy</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 5</span><br><span class="line">      timeoutSeconds: 10</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>.spec.containers[*].args</code> - 容器启动后执行的命令，取代镜像中默认的命令</p>
</li>
<li><p><code>.spec.containers[*].livenessProbe</code> - 配置存活探针</p>
<ul>
<li><code>exec.command</code> - 配置探测方式为 <code>exec</code> 以及在容器内执行的命令，如果命令执行成功并且返回值为 0，<code>kubelet</code> 就会认为这个容器是健康存活的。 如果这个命令返回非 0 值，<code>kubelet</code> 会杀死这个容器并 <strong>重新启动</strong> 它。</li>
<li><code>periodSeconds</code> - 指定 <code>kubelet</code> 应该每 5 秒执行一次存活探测，默认是 10 秒。最小值是 1</li>
<li><code>initialDelaySeconds</code> - <code>kubelet</code> 在执行第一次探测前等待 5 秒， 默认是 0 秒</li>
<li><code>timeoutSeconds</code> - 探测的超时后等待多少秒。默认值是 1 秒。最小值是 1。</li>
<li><code>successThreshold</code> - 探针在失败后，被视为成功的最小连续成功数。默认值是 1。 存活和启动探测的这个值必须是 1。最小值是 1。</li>
<li><code>failureThreshold</code> - 当探测失败时，Kubernetes 的重试次数。默认值是 3。最小值是 1</li>
</ul>
</li>
</ul>
<h5 id="httpGet-方式的-livenessProbe"><a href="#httpGet-方式的-livenessProbe" class="headerlink" title="httpGet 方式的 livenessProbe"></a>httpGet 方式的 livenessProbe</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    test: liveness</span><br><span class="line">  name: liveness-http</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: registry.k8s.io/liveness</span><br><span class="line">    args:</span><br><span class="line">    - /server</span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: /healthz</span><br><span class="line">        port: 8080</span><br><span class="line">        </span><br><span class="line">        # 非常用字段</span><br><span class="line">        host: test.domain</span><br><span class="line">        scheme: http </span><br><span class="line">        </span><br><span class="line">        httpHeaders:</span><br><span class="line">        - name: Custom-Header</span><br><span class="line">          value: Awesome</span><br><span class="line">        - name: Accept</span><br><span class="line">          value: application/json</span><br><span class="line">        - name: Host</span><br><span class="line">          value: test.domain</span><br><span class="line">        </span><br><span class="line">      initialDelaySeconds: 3</span><br><span class="line">      periodSeconds: 3</span><br></pre></td></tr></table></figure>

<ul>
<li><code>.spec.containers[*].livenessProbe</code> - 配置存活探针<ul>
<li><code>httpGet.path</code> - 配置存活探针的探测方式为 <code>httpGet</code> ，并指定 HTTP GET 请求的路径（默认为 <code>/</code>）。返回大于或等于 200 并且小于 400 的任何代码都标示成功。其它返回代码都标示失败，失败时 <code>kubelet</code> 会杀死这个容器并将其重启</li>
<li><code>httpGet.port</code> - 指定 HTTP GET 请求的端口</li>
<li><code>httpGet.httpHeaders</code> - 请求中自定义的 HTTP 头。HTTP 头字段允许重复。</li>
<li><code>host</code> - 连接使用的主机名，默认是 <code>Pod</code> 的 IP。也可以在 HTTP 头中设置 <code>Host</code> 来代替</li>
<li><code>scheme</code> - 用于设置连接主机的方式（HTTP 还是 HTTPS）。默认是 “HTTP”</li>
</ul>
</li>
</ul>
<h5 id="tcpSocket-方式的-livenessProbe"><a href="#tcpSocket-方式的-livenessProbe" class="headerlink" title="tcpSocket 方式的 livenessProbe"></a>tcpSocket 方式的 livenessProbe</h5><p><code>kubelet</code> 会尝试在指定端口和容器建立套接字链接。 如果能建立连接，这个容器就被看作是健康的，如果不能则这个容器就被看作是有问题的。</p>
<p>对于 TCP 探测而言，kubelet 在节点上（不是在 <code>Pod</code> 里面）发起探测连接， 这意味着你不能在 <code>host</code> 参数上配置服务名称，因为 <code>kubelet</code> 不能解析服务名称。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: goproxy</span><br><span class="line">  labels:</span><br><span class="line">    app: goproxy</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: goproxy</span><br><span class="line">    image: registry.k8s.io/goproxy:0.1</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 8080</span><br><span class="line">      name: goproxy-port</span><br><span class="line">    readinessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: goproxy-port</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 10</span><br><span class="line">    livenessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 8080</span><br><span class="line">      initialDelaySeconds: 15</span><br><span class="line">      periodSeconds: 20</span><br></pre></td></tr></table></figure>
<ul>
<li><code>.spec.containers[*].livenessProbe</code> - 配置存活探针<ul>
<li><code>tcpSocket.port</code> - 配置存活探针的探测方式为 <code>tcpSocket</code>，并指定 TCP 探测连接的端口，可以使用命名的端口</li>
</ul>
</li>
</ul>
<h3 id="Init-Containers"><a href="#Init-Containers" class="headerlink" title="Init Containers"></a>Init Containers</h3><p><code>Init Containers</code> 是 Pod 中的一个或多个特殊的容器，它会在应用容器 <strong>之前启动</strong>，<code>Init Containers</code> 中一般会包含一些工具或者是在应用容器启动之前需要执行的脚本或者初始化事项。 <sup id="fnref:19"><a href="#fn:19" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Init Containers](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)">[19]</span></a></sup></p>
<p><strong><code>sidecar container</code> 是会在应用容器启动之前启动，并且会一直持续运行的容器。而 <code>Init Containers</code> 要在 Pod 初始化阶段（应用容器就绪前）结束（completion）。</strong></p>
<p>在 Pod 的 Spec 配置中，<code>Init Containers</code>（使用 <code>initContainers</code> 字段） 处于和应用容器（使用 <code>containers</code> 字段) 同一级。</p>
<p>相比于普通的应用容器， <code>Init Containers</code> 有以下特征：</p>
<ul>
<li>在整个 Pod 就绪前， <code>Init Containers</code> 中的容器都要成功完成（completion）</li>
<li>每个 <code>init container</code> 都必须在另一个 <code>init container</code> 启动成功之后才能启动</li>
<li>如果 <code>init container</code> 启动失败，<code>kubelet</code> 会一直重启它（<code>restartPolicy</code> 是 <code>Always</code> 或 <code>OnFailure</code>），直到成功；如果 <code>Init Containers</code> 的 <code>restartPolicy</code> 是 <code>Never</code>，并且 <code>Init Containers</code> 中有容器启动失败，那么 Kubernetes 会判定此 Pod 启动失败。</li>
</ul>
<p><code>Init Containers</code> 支持和普通容器一样的配置项，如资源限制、volumes、安全配置等。 但是，**<code>init containers</code> 不支持 <code>lifecycle</code>、<code>livenessProbe</code>、<code>readinessProbe</code> 和 <code>startupProbe</code> 字段**。Init containers 必须在 Pod 准备就绪前成功执行完成（completion）。<code>sidecar containers </code> 会在 Pod 的生命周期中持续运行，支持探针。</p>
<p><code>Init Containers</code> 中如果有多个容器，<code>kubelet</code> 会按照顺序依次启动这些容器，前一个容器启动成功，后一个容器才能启动。所有的 <code>init containers</code> 都启动成功并完成后，<code>kubelet</code> 才会初始化应用容器。</p>
<h3 id="Pod-拓扑分布约束"><a href="#Pod-拓扑分布约束" class="headerlink" title="Pod 拓扑分布约束"></a>Pod 拓扑分布约束</h3><p>你可以使用 <strong>拓扑分布约束（Topology Spread Constraints）</strong> 来控制 Pod 在集群内故障域之间的分布， 例如区域（Region）、可用区（Zone）、节点和其他用户自定义拓扑域。 这样做有助于实现高可用并提升资源利用率。<sup id="fnref:16"><a href="#fn:16" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Pod 拓扑分布约束](https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/topology-spread-constraints/)">[16]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: example-pod</span><br><span class="line">spec:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">配置一个拓扑分布约束</span></span><br><span class="line">  topologySpreadConstraints:</span><br><span class="line">    - maxSkew: &lt;integer&gt;</span><br><span class="line">      minDomains: &lt;integer&gt; # 可选；自从 v1.25 开始成为 Beta</span><br><span class="line">      topologyKey: &lt;string&gt;</span><br><span class="line">      whenUnsatisfiable: &lt;string&gt;</span><br><span class="line">      labelSelector: </span><br><span class="line">        matchLabels:</span><br><span class="line">            app: my-app</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">## 其他 Pod 字段置于此处</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>maxSkew</code> - 描述 Pod 在 <strong>由 <code>topologyKey</code> 选中的节点组成的区域</strong> 中均匀分布的程度（最大偏差）。比如值为 1 表示 <strong>任何给定的区域与其他区域之间的 Pod 数量的差异不能超过 1</strong></li>
<li><code>topologyKey</code> - 节点标签的 <strong>键</strong>，如果节点使用此 <strong>键</strong> 标记并且具有相同的 <strong>标签值</strong>， 则将这些节点视为处于同一区中。</li>
<li><code>whenUnsatisfiable</code> - 指示如果 Pod 不满足分布约束时如何处理：<ul>
<li><code>DoNotSchedule</code> -（默认）告诉调度器不要调度。</li>
<li><code>ScheduleAnyway</code> - 告诉调度器仍然继续调度，只是根据如何能将偏差最小化来对节点进行排序。</li>
</ul>
</li>
<li><code>labelSelector</code> - 定这个约束应该应用于哪些 Pod</li>
</ul>
<h4 id="拓扑域说明"><a href="#拓扑域说明" class="headerlink" title="拓扑域说明"></a>拓扑域说明</h4><p><code>topologyKey</code> 中指定的 <em><strong>键</strong></em> 会用来获取每个 Node 上对应的 <em><strong>值</strong></em>，拥有 <em><strong>相同值的 Node</strong></em> 会被视为属于 <em><strong>同一个区域</strong></em>，而拥有 <em><strong>指定键(<code>topologyKey</code>)</strong></em> 的 Node 属于 <em><strong>同一个拓扑域</strong></em>。</p>
<p>Kubernetes 将会尽量确保 Pods 在这些 <em><strong>拓扑域 (拥有相同 <code>topologyKey</code> 的 Node)</strong></em> 中的 <em><strong>区域 (拥有 相同值的 Node)</strong></em> 上均匀分布。</p>
<p>假设有以下四个 Node，它们分别位于两个不同的可用区（Zone）：</p>
<ul>
<li><p>Node1：<code>topology.kubernetes.io/zone=zoneA</code></p>
</li>
<li><p>Node2：<code>topology.kubernetes.io/zone=zoneA</code></p>
</li>
<li><p>Node3：<code>topology.kubernetes.io/zone=zoneB</code></p>
</li>
<li><p>Node4：<code>topology.kubernetes.io/zone=zoneB</code></p>
</li>
</ul>
<p>如果你的 <code>topologyKey</code> 设置为 <code>topology.kubernetes.io/zone</code>，则 Kubernetes 将会认为 <code>Node1</code> 和 <code>Node2</code> 属于（拓扑域 <code>topology.kubernetes.io/zone</code>）的同一个区域，<code>Node3</code> 和 <code>Node4</code> 属于此拓扑域的另一个区域。因此，它会尽量保持这两个区域中的 Pod 数量均衡。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: my-deployment</span><br><span class="line">spec:</span><br><span class="line">  replicas: 8 # 假设你想运行8个Pods</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: my-app</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: my-app</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.14.2</span><br><span class="line">      topologySpreadConstraints:</span><br><span class="line">      - maxSkew: 1</span><br><span class="line">        topologyKey: topology.kubernetes.io/zone</span><br><span class="line">        whenUnsatisfiable: DoNotSchedule</span><br><span class="line">        labelSelector:</span><br><span class="line">          matchLabels:</span><br><span class="line">            app: my-app</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在这个例子中，Kubernetes 将会尽量确保 <code>zoneA</code> 和 <code>zoneB</code> 中的 Pod 数量差异不超过 <code>maxSkew（1</code>），从而确保这些 Pods 在不同的区域中均匀分布。</p>
<h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p><a href="https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/workload-resources/deployment-v1/">Deployment 资源定义官网 API 说明</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.14.2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        </span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 25%</span><br><span class="line">      maxUnavailable: 25%</span><br><span class="line">    type: RollingUpdate</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>.spec.replicas</code> - Pod 副本的数量，会根据配置产生 <strong><a href="#metadata.ownerReferences">附属对象</a> ReplicaSet</strong></p>
</li>
<li><p><code>.spec.selector</code> - 字段定义了 <code>Deployment</code> 如何查找要管理的 <code>Pod</code></p>
</li>
<li><p><code>.spec.template</code> - 定义了 <code>Pod</code> 相关的必要信息，本质上是定义一个 <a href="#Pod"><code>Pod</code> 对象</a></p>
<ul>
<li><code>.metadata.labels</code> - 为容器添加的标签，<code>slector</code> 可以使用此标签查找要管理的 <code>Pod</code> </li>
<li><code>.spec.containers</code> - 容器相关定义，包含启动的容器名称，使用的镜像，容器暴露的端口等</li>
</ul>
</li>
<li><p><code>.spec.strategy</code> - 指定用于用新 Pod 替换旧 Pod 的策略。<code>.spec.strategy.type</code> 可以是 <code>Recreate</code> 或 <code>RollingUpdate</code>。<code>RollingUpdate</code> 是默认值。<sup id="fnref:17"><a href="#fn:17" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[策略](https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/deployment/#strategy)">[17]</span></a></sup></p>
<ul>
<li><code>.spec.strategy.type==Recreate</code> - 如果值为 <code>Recreate</code>，在创建新 Pod 之前，所有现有的 Pod 会被杀死</li>
<li><code>.spec.strategy.type==RollingUpdate</code> - Deployment 会在 <code>.spec.strategy.type==RollingUpdate</code> 时，采取 滚动更新的方式更新 Pod。你可以指定 <code>maxUnavailable</code> 和 <code>maxSurge</code> 来控制滚动更新 过程。</li>
<li><code>.spec.strategy.rollingUpdate.maxUnavailable</code> -  是一个可选字段，用来指定 更新过程中不可用的 Pod 的个数上限，默认值为 25%。如果 <code>.spec.strategy.rollingUpdate.maxSurge</code> 为 0，则此值不能为 0</li>
<li><code>.spec.strategy.rollingUpdate.maxSurge</code> - 是一个可选字段，用来指定可以创建的超出期望 Pod 个数的 Pod 数量， 如果 <code>MaxUnavailable</code> 为 0，则此值不能为 0，此字段的默认值为 25%</li>
</ul>
</li>
</ul>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p><a href="https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/service-resources/service-v1/">Service 资源定义官网 API 说明</a></p>
<p>将运行在一组 Pods 上的应用程序公开为网络服务的抽象方法。主要为后端的一组 POD （通过选择算符选定）提供 <code>Cluster-IP</code> 和负载均衡（默认轮询）及高可用（只有就绪的 POD 才会被对外公布，未就绪的 POD 不会对外发布）。 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[服务（Service）](https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/)">[5]</span></a></sup></p>
<h3 id="有选择算符的-Service"><a href="#有选择算符的-Service" class="headerlink" title="有选择算符的 Service"></a>有选择算符的 Service</h3><p><code>Service</code> 所针对的 <code>Pod</code> 集合通常是通过 <strong><a href="#%E6%A0%87%E7%AD%BE%E5%92%8C%E9%80%89%E6%8B%A9%E7%AE%97%E7%AC%A6">选择算符</a></strong> 来确定的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: my-service</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app.kubernetes.io/name: MyApp</span><br><span class="line">  ports:</span><br><span class="line">    # 多端口 Service 时，必须提供所有的端口名称，以使端口无歧义</span><br><span class="line">    - name: http</span><br><span class="line">      protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 9376</span><br><span class="line">    - name: https</span><br><span class="line">      protocol: TCP</span><br><span class="line">      port: 443</span><br><span class="line">      targetPort: 9378</span><br><span class="line">      </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">非常用字段</span></span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  ipFamilies:</span><br><span class="line">    - IPv4</span><br><span class="line">  ipFamilyPolicy: SingleStack</span><br><span class="line">  internalTrafficPolicy: Cluster</span><br><span class="line">  </span><br><span class="line">  type: ClusterIP</span><br><span class="line">  clusterIPs:</span><br><span class="line">    - 10.107.120.122</span><br><span class="line">  clusterIP: 10.107.120.122</span><br><span class="line">  </span><br><span class="line">  externalTrafficPolicy: Cluster</span><br><span class="line">  internalTrafficPolicy: Cluster</span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="built_in">type</span> 为 NodePort 时</span></span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - nodePort: 30443</span><br><span class="line">      port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  externalTrafficPolicy: Local</span><br><span class="line">  internalTrafficPolicy: Local</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>.spec.selector</code> - 根据 <strong><a href="#%E6%A0%87%E7%AD%BE%E5%92%8C%E9%80%89%E6%8B%A9%E7%AE%97%E7%AC%A6">选择算符</a></strong> 选择后端的 <code>POD</code></p>
</li>
<li><p><code>.spec.ports[*].name</code> - 对于某些服务，可能需要公开多个端口。 Kubernetes 允许在 <code>Service</code> 对象上配置多个端口定义。 <strong>为服务使用多个端口时，必须提供所有端口名称，以使它们无歧义</strong>。</p>
</li>
<li><p><code>.spec.ports[*].protocol</code> - <code>Service</code> 监听的端口协议，默认为 TCP</p>
</li>
<li><p><code>.spec.ports[*].port</code> - <code>Service</code> 监听的端口</p>
</li>
<li><p><code>.spec.ports[*].targetPort</code> - 后端 <code>POD</code> 监听的端口，不指定的情况（默认）下，<code>targetPort</code> 将被设置为与 <code>port</code> 字段相同的值。</p>
</li>
<li><p><code>.spec.sessionAffinity</code> -  要确保每次都将来自特定客户端的连接传递到同一 <code>Pod</code>，可以设置为 <code>ClientIP</code> (默认为 <code>None</code>) 来基于客户端的 IP 地址选择会话亲和性。还可以通过适当设置 <code>.spec.sessionAffinityConfig.clientIP.timeoutSeconds</code> 来设置最大会话停留时间。（默认值为 10800 秒，即 3 小时）</p>
</li>
<li><p><code>.spec.ipFamilies</code> - 定义分配 ip 版本(IPv4,IPv6)的顺序，此字段是不可变的，因为系统无法为已经存在的服务重新分配 <code>.spec.ClusterIP</code>。如果你想改变 <code>.spec.ipFamilies</code>，则需要删除并重新创建服务。可以配置为以下值：</p>
<ul>
<li><code>IPv4</code></li>
<li><code>IPv6</code></li>
<li><code>&quot;IPv4&quot;,&quot;IPv6&quot;</code></li>
<li><code>&quot;IPv6&quot;,&quot;IPv4&quot;</code></li>
</ul>
</li>
<li><p><code>.spec.ipFamilyPolicy</code> - IP 地址族策略。<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[配置 IPv4/IPv6 双协议栈](https://kubernetes.io/zh-cn/docs/concepts/services-networking/dual-stack/#%E9%85%8D%E7%BD%AE-ipv4-ipv6-%E5%8F%8C%E5%8D%8F%E8%AE%AE%E6%A0%88)">[7]</span></a></sup></p>
<ul>
<li><code>SingleStack</code> - 默认值。单栈服务。控制面使用第一个配置的服务集群 IP 范围为服务分配集群 IP</li>
<li><code>PreferDualStack</code> - 为服务分配 IPv4 和 IPv6 集群 IP 地址</li>
<li><code>RequireDualStack</code> - 从基于在 <code>.spec.ipFamilies</code> 数组中第一个元素的地址族的 <code>.spec.ClusterIPs</code> 列表中选择 <code>.spec.ClusterIP</code></li>
</ul>
</li>
<li><p><code>.spec.clusterIPs</code> - IP 的主要字段，值根据 <code>ipFamilies</code>, <code>ipFamilyPolicy</code> 的配置计算而出，<a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/dual-stack/#dual-stack-options-on-new-services">规则参考</a></p>
</li>
<li><p><code>.spec.clusterIP</code> - IP 的次要字段，其取值从 <code>.spec.ClusterIPs</code> 计算而来。也可以通过此字段配置自定义的 IP 地址 <sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[选择自己的 IP 地址](https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#%E9%80%89%E6%8B%A9%E8%87%AA%E5%B7%B1%E7%9A%84-ip-%E5%9C%B0%E5%9D%80)">[9]</span></a></sup> </p>
</li>
<li><p><code>.spec.type</code> - 指定 <code>Service</code> 的类型，默认为 <code>ClusterIP</code>，可选值如下<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[NodePort 类型](https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#type-nodeport)">[8]</span></a></sup>：</p>
<ul>
<li><code>ClusterIP</code> - 通过集群的内部 IP 暴露服务，选择该值时服务只能够在集群内部访问。 这也是默认值。</li>
<li><code>NodePort</code> - 通过每个节点上的 IP 和静态端口（<code>NodePort</code>，默认范围 <code>30000-32767</code>）暴露服务。<code>NodePort</code> 服务会路由到自动创建的 <code>ClusterIP</code> 服务，此种类型，服务可通过节点 ip 和 <code>NodePort</code> (<code>nodeIP:.spec.ports[*].nodePort</code>)对外访问，也可以通过 <code>.spec.clusterIP:.spec.ports[*].port</code> 对外可见。<strong>1.24 及以后版本，<code>nodePort</code> 对应的端口不会在节点上监听</strong></li>
<li><code>LoadBalancer</code> - 使用云提供商的负载均衡器向外部暴露服务。 外部负载均衡器可以将流量路由到自动创建的 <code>NodePort</code> 服务和 <code>ClusterIP</code> 服务上。</li>
<li><code>ExternalName</code> - 通过返回 <code>CNAME</code> 和对应值，可以将服务映射到 <code>externalName</code> 字段的内容（例如，<code>foo.bar.example.com</code>）。 无需创建任何类型代理。</li>
</ul>
</li>
<li><p><code>.spec.externalTrafficPolicy</code> - 控制来自于外部的流量是如何路由的, 可选值有 <code>Cluster</code> 和 <code>Local</code></p>
<ul>
<li><code>Cluster</code> - 将外部流量路由到所有就绪的端点</li>
<li><code>Local</code> - 只路由到当前节点上就绪的端点，如果当前节点上没有就绪的端点，<code>kube-proxy</code> 不会转发请求相关服务的任何流量</li>
</ul>
</li>
<li><p><code>.spec.internalTrafficPolicy</code> - 控制内部来源的流量是如何转发的，可选值有 <code>Cluster</code> 和 <code>Local</code></p>
</li>
</ul>
<p>Kubernetes 为该服务分配一个 IP 地址（有时称为 “集群 IP”），该 IP 地址由服务代理使用。</p>
<p><code>Pod</code> 中的端口定义是有名字的，你可以在 <code>Service</code> 的 <code>targetPort</code> 属性中引用这些名称。 例如，我们可以通过以下方式将 <code>Service</code> 的 <code>targetPort</code> 绑定到 <code>Pod</code> 端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: proxy</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx:stable</span><br><span class="line">    ports:</span><br><span class="line">      - containerPort: 80</span><br><span class="line">        name: http-web-svc</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app.kubernetes.io/name: proxy</span><br><span class="line">  ports:</span><br><span class="line">  - name: name-of-service-port</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: http-web-svc</span><br></pre></td></tr></table></figure>

<h3 id="没有选择算符的-Service"><a href="#没有选择算符的-Service" class="headerlink" title="没有选择算符的 Service"></a>没有选择算符的 Service</h3><p>由于选择算符的存在，服务最常见的用法是为 Kubernetes Pod 的访问提供抽象， 但是当与相应的 <code>Endpoints</code> 对象一起使用且没有选择算符时， 服务也可以为其他类型的后端提供抽象，包括在集群外运行的后端 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[没有选择算符的 Service](https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#services-without-selectors)">[6]</span></a></sup></p>
<p>定义没有选择算符的 <code>Service</code> 实例:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: my-service</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 9376</span><br></pre></td></tr></table></figure>
<p>由于此服务没有选择算符，因此不会自动创建相应的 <code>Endpoints</code> 对象。 你可以通过手动添加 <code>Endpoints</code> 对象，将服务手动映射到运行该服务的网络地址和端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">这里的 name 要与 Service 的名字相同</span></span><br><span class="line">  name: my-service</span><br><span class="line">subsets:</span><br><span class="line">  - addresses:</span><br><span class="line">      - ip: 192.0.2.42</span><br><span class="line">    ports:</span><br><span class="line">      - port: 9376</span><br></pre></td></tr></table></figure>
<p><strong>当你为某个 <code>Service</code> 创建一个 <code>Endpoints</code> 对象时，你要将新对象的名称设置为与 <code>Service</code> 的名称相同。</strong></p>
<blockquote>
<p><strong>说明</strong>：<br>端点 IPs 必须不可以 是：本地回路（IPv4 的 127.0.0.0&#x2F;8, IPv6 的 ::1&#x2F;128） 或本地链接（IPv4 的 169.254.0.0&#x2F;16 和 224.0.0.0&#x2F;24，IPv6 的 fe80::&#x2F;64)。</p>
<p>端点 IP 地址不能是其他 Kubernetes 服务的集群 IP，因为 kube-proxy 不支持将虚拟 IP 作为目标。</p>
</blockquote>
<h3 id="无头服务（Headless-Services）"><a href="#无头服务（Headless-Services）" class="headerlink" title="无头服务（Headless Services）"></a>无头服务（Headless Services）</h3><p>有时不需要或不想要负载均衡，以及单独的 Service IP。 遇到这种情况，可以通过指定 Cluster IP（<code>spec.clusterIP</code>）的值为 <code>None</code> 来创建 <code>Headless Service</code>。<sup id="fnref:14"><a href="#fn:14" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[无头服务（Headless Services）](https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#headless-services)">[14]</span></a></sup></p>
<p>创建 <code>Headless Services</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kubia-headless</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: None              #这使得服务成为 headless service</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    app: kubia</span><br></pre></td></tr></table></figure>

<p>使用此配置创建的 <code>Headless Services</code>，系统不会为其分配 <code>CLUSTER-IP</code>。</p>
<p>当通过此服务的 FQDN <code>kubia-headless.default.svc.cluster.local</code> 解析时，系统会返回此服务 <strong>选择算符 <code>.spec.selector</code></strong> 选择的 <strong>就绪</strong> 的后端 POD 的 IP。</p>
<p>如果配置的是 <a href="#%E6%B2%A1%E6%9C%89%E9%80%89%E6%8B%A9%E7%AE%97%E7%AC%A6%E7%9A%84-Service">不带选择算符的服务</a>，<a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#without-selectors">解析规则如是</a>，如果查找到了和 Service 的 <code>name</code> 一样的 <code>endpoint</code>，则解析到此 <code>endpoint</code>。</p>
<h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p><code>Ingress</code> 可为 <code>Service</code> 提供外部可访问的 URL、负载均衡流量、终止 SSL&#x2F;TLS，以及基于名称的虚拟托管。</p>
<p><strong><code>Ingress</code> 不会公开任意端口或协议</strong>。 将 HTTP 和 HTTPS 以外的服务公开到 Internet 时，通常使用 <code>Service.Type=NodePort</code> 或 <code>Service.Type=LoadBalancer</code> 类型的 <code>Service</code>。</p>
<p>你必须拥有一个 <code>Ingress 控制器</code> 才能满足 <code>Ingress</code> 的要求。 仅创建 <code>Ingress</code> 资源本身没有任何效果。</p>
<h3 id="安装-ingress-nginx-controller"><a href="#安装-ingress-nginx-controller" class="headerlink" title="安装 ingress-nginx controller"></a>安装 ingress-nginx controller</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.1/deploy/static/provider/cloud/deploy.yaml</span><br></pre></td></tr></table></figure>
<p>编辑 <code>ingress-nginx</code> 的 <code>Deployment</code> 配置文件，在 <code>Deployment</code> 中的 <code>.spec.template.spec</code> 下添加字段 <code>hostNetwork: true</code>，以使 <code>ingress-nginx-controller</code> 可以使用节点的主机网络提供对外访问<br><img src="https://i.csms.tech/img_61.png"></p>
<p>创建 <code>Ingress</code> 对象</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: example-ingress</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/rewrite-target: /$1</span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">    - host: hello-world.info</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">          - path: /</span><br><span class="line">            pathType: Prefix</span><br><span class="line">            backend:</span><br><span class="line">              service:</span><br><span class="line">                name: web</span><br><span class="line">                port:</span><br><span class="line">                  number: 8080</span><br></pre></td></tr></table></figure>
<p>配置完成后，查看 <code>Ingress</code> 资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get ingress -o wide</span></span><br><span class="line">NAME              CLASS   HOSTS              ADDRESS   PORTS   AGE</span><br><span class="line">example-ingress   nginx   hello-world.info             80      131m</span><br></pre></td></tr></table></figure>
<p>将域名解析到 <code>ingress-nginx-controller</code> 所在节点的 IP，即可在外部访问服务。</p>
<p>为了将 <code>ingress-nginx-controller</code> 固定启动在边缘节点，可以使用 <code>DaemonSet</code> 替代 <code>Deployment</code>。</p>
<blockquote>
<p><code>Ingress Controller</code> 不会将请求转发给 <code>Service</code>，只通过 <code>Service</code> 获取到 <code>Endpoints</code>，从而决定将请求转发到哪个 Pod。从流量的流经路径看，流量是直接从 <code>Ingress Controller</code> 发送到了 Pod   </p>
</blockquote>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/kubernetes-objects/#required-fields">必需字段</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/names/">对象名称和 IDs</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/">标签和选择算符</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/owners-dependents/">属主与附属</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/">服务（Service）</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#services-without-selectors">没有选择算符的 Service</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/dual-stack/#%E9%85%8D%E7%BD%AE-ipv4-ipv6-%E5%8F%8C%E5%8D%8F%E8%AE%AE%E6%A0%88">配置 IPv4/IPv6 双协议栈</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#type-nodeport">NodePort 类型</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#%E9%80%89%E6%8B%A9%E8%87%AA%E5%B7%B1%E7%9A%84-ip-%E5%9C%B0%E5%9D%80">选择自己的 IP 地址</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">配置存活、就绪和启动探针</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle/#container-probes">容器探针</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/assign-pod-node/#nodename">nodeName </a><a href="#fnref:12" rev="footnote"> ↩</a></span></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">13.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/assign-pod-node/#nodename">将 Pod 指派给节点</a><a href="#fnref:13" rev="footnote"> ↩</a></span></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">14.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#headless-services">无头服务（Headless Services）</a><a href="#fnref:14" rev="footnote"> ↩</a></span></li><li id="fn:15"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">15.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/tasks/inject-data-application/define-environment-variable-container/">为容器设置环境变量</a><a href="#fnref:15" rev="footnote"> ↩</a></span></li><li id="fn:16"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">16.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/topology-spread-constraints/">Pod 拓扑分布约束</a><a href="#fnref:16" rev="footnote"> ↩</a></span></li><li id="fn:17"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">17.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/deployment/#strategy">策略</a><a href="#fnref:17" rev="footnote"> ↩</a></span></li><li id="fn:18"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">18.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes">Container probes</a><a href="#fnref:18" rev="footnote"> ↩</a></span></li><li id="fn:19"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">19.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/">Init Containers</a><a href="#fnref:19" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S 上安装 Prometheus 并监控 K8S 集群</title>
    <url>/202212141608/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h1><ul>
<li>Centos 7</li>
<li>Kubernetes 1.24</li>
<li>Prometheus 2.44.0</li>
<li>AlertManager 0.24.0</li>
</ul>
<h1 id="Prometheus-部署步骤"><a href="#Prometheus-部署步骤" class="headerlink" title="Prometheus 部署步骤"></a>Prometheus 部署步骤</h1><h2 id="为-Prometheus-创建专用的-Namespace，此处创建-prometheus"><a href="#为-Prometheus-创建专用的-Namespace，此处创建-prometheus" class="headerlink" title="为 Prometheus 创建专用的 Namespace，此处创建 prometheus"></a>为 Prometheus 创建专用的 Namespace，此处创建 <code>prometheus</code></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create namespace prometheus</span><br></pre></td></tr></table></figure>

<h2 id="创建集群角色"><a href="#创建集群角色" class="headerlink" title="创建集群角色"></a>创建集群角色</h2><p>Prometheus 使用 Kubernetes API 从 Nodes、Pods、Deployments 等等中读取所有可用的指标。因此，我们需要创建一个包含读取所需 API 组的 RBAC 策略，并将该策略绑定到新建的 <code>prometheus</code> 命名空间。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[如何部署 Prometheus 监控K8S](https://zhuanlan.zhihu.com/p/456205833)">[1]</span></a></sup></p>
<ol>
<li>创建一个名为 <code>prometheusClusterRole.yaml</code>的文件，并复制以下 RBAC 角色。<blockquote>
<p>在下面给出的角色中，可以看到，我们已经往 <code>nodes</code>, <code>services endpoints</code>, <code>pods</code> 和 <code>ingresses</code> 中添加了 <code>get</code>，<code>list</code> 以及 <code>watch</code> 权限。角色绑定被绑定到监控命名空间。如果有任何要从其他对象中检索指标的用例，则需要将其添加到此集群角色中。</p>
</blockquote>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;]</span><br><span class="line">  resources:</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes/proxy</span><br><span class="line">  - nodes/metrics</span><br><span class="line">  - services</span><br><span class="line">  - endpoints</span><br><span class="line">  - pods</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class="line">- apiGroups:</span><br><span class="line">  - extensions</span><br><span class="line">  resources:</span><br><span class="line">  - ingresses</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class="line">- nonResourceURLs: [&quot;/metrics&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;]</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: prometheus</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: default</span><br><span class="line">  namespace: prometheus</span><br></pre></td></tr></table></figure></li>
<li>使用下面的命令创建角色<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f prometheusClusterRole.yaml</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>
<h2 id="创建-ConfigMap-以外部化-Prometheus-配置"><a href="#创建-ConfigMap-以外部化-Prometheus-配置" class="headerlink" title="创建 ConfigMap 以外部化 Prometheus 配置"></a>创建 ConfigMap 以外部化 Prometheus 配置</h2><p>Prometheus 的所有配置都是 <code>prometheus.yaml</code> 文件的一部分，而 <code>Alertmanager</code> 的所有警报规则都配置在 <code>prometheus.rules</code></p>
<ul>
<li><code>prometheus.yaml</code> - 这是主要的 Prometheus 配置，包含所有抓取配置、服务发现详细信息、存储位置、数据保留配置等</li>
<li><code>*.rules</code> - 此文件包含所有 Prometheus 警报规则</li>
</ul>
<p>通过将 Prometheus 配置外部化到 Kubernetes 的 <code>ConfigMap</code>，那么就无需当需要添加或删除配置时，再来构建 Prometheus 镜像。这里需要更新配置映射并重新启动 Prometheus Pod 以应用新配置。</p>
<p>使用以下内容创建 <code>ConfigMap</code>。开始学习时可以先使用 <a href="/202211221610/" title="基础配置">基础配置</a>，熟悉之后逐步添加配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-server-conf</span><br><span class="line">  labels:</span><br><span class="line">    name: prometheus-server-conf</span><br><span class="line">  namespace: prometheus</span><br><span class="line">data:</span><br><span class="line">  prometheus.rules: |-</span><br><span class="line">    groups:</span><br><span class="line">    - name: devopscube demo alert</span><br><span class="line">      rules:</span><br><span class="line">      - alert: High Pod Memory</span><br><span class="line">        expr: sum(container_memory_usage_bytes) &gt; 1</span><br><span class="line">        for: 1m</span><br><span class="line">        labels:</span><br><span class="line">          severity: slack</span><br><span class="line">        annotations:</span><br><span class="line">          summary: High Memory Usage</span><br><span class="line">          </span><br><span class="line">  prometheus.yml: |-</span><br><span class="line">    global:</span><br><span class="line">      scrape_interval: 5s</span><br><span class="line">      evaluation_interval: 5s</span><br><span class="line">    </span><br><span class="line">    alerting:</span><br><span class="line">      alertmanagers:</span><br><span class="line">        - static_configs:</span><br><span class="line">            - targets: [&#x27;localhost:9093&#x27;]</span><br><span class="line">    </span><br><span class="line">    rule_files:</span><br><span class="line">      - /etc/prometheus/*.rules</span><br><span class="line">    </span><br><span class="line">    scrape_configs:</span><br><span class="line">      - job_name: &#x27;prometheus&#x27;</span><br><span class="line">        static_configs:</span><br><span class="line">        - targets: [&#x27;localhost:9090&#x27;]</span><br><span class="line">        </span><br><span class="line">      - job_name: &#x27;kubernetes-nodes&#x27;</span><br><span class="line">        tls_config:</span><br><span class="line">          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">        kubernetes_sd_configs:</span><br><span class="line">        - role: node</span><br><span class="line">        relabel_configs:</span><br><span class="line">        - source_labels: [__address__]</span><br><span class="line">          regex: &#x27;(.*):10250&#x27;</span><br><span class="line">          replacement: &#x27;$&#123;1&#125;:9100&#x27;</span><br><span class="line">          target_label: __address__</span><br><span class="line">          action: replace</span><br><span class="line">        - action: labelmap</span><br><span class="line">          regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">    </span><br><span class="line">      - job_name: &#x27;kubernetes-kubelet&#x27;</span><br><span class="line">        kubernetes_sd_configs:</span><br><span class="line">        - role: node</span><br><span class="line">        scheme: https</span><br><span class="line">        tls_config:</span><br><span class="line">          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">          insecure_skip_verify: true</span><br><span class="line">        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">        relabel_configs:</span><br><span class="line">        - action: labelmap</span><br><span class="line">          regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      - job_name: &#x27;kubernetes-cadvisor&#x27;</span><br><span class="line">        scheme: https</span><br><span class="line">        tls_config:</span><br><span class="line">          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">          insecure_skip_verify: true</span><br><span class="line">        kubernetes_sd_configs:</span><br><span class="line">        - role: node</span><br><span class="line">        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">        relabel_configs:</span><br><span class="line">        - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">          regex: (.+)</span><br><span class="line">          target_label: __metrics_path__</span><br><span class="line">          replacement: metrics/cadvisor</span><br><span class="line">        - action: labelmap</span><br><span class="line">          regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      </span><br></pre></td></tr></table></figure>

<p><code>prometheus.yaml</code> 包含了用以发现动态运行在 Kubernetes 集群中的资源的配置。</p>
<h2 id="部署-Prometheus-Server"><a href="#部署-Prometheus-Server" class="headerlink" title="部署 Prometheus Server"></a>部署 Prometheus Server</h2><p>使用以下内容创建 Deployment，在此配置中，我们将 Prometheus 的 <code>ConfigMap</code> 作为文件安装在 <code>/etc/prometheus</code> 中，持久化存储使用 PV。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-pod</span><br><span class="line">  namespace: prometheus</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus-server</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: prometheus-server</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus-server</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: prometheus</span><br><span class="line">          image: prom/prometheus</span><br><span class="line">          args:</span><br><span class="line">            - &quot;--storage.tsdb.retention.time=12h&quot;</span><br><span class="line">            - &quot;--config.file=/etc/prometheus/prometheus.yml&quot;</span><br><span class="line">            - &quot;--storage.tsdb.path=/prometheus/&quot;</span><br><span class="line">            - --web.enable-lifecycle</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 9090</span><br><span class="line">          resources:</span><br><span class="line">            requests:</span><br><span class="line">              cpu: 500m</span><br><span class="line">              memory: 500M</span><br><span class="line">            limits:</span><br><span class="line">              cpu: 1</span><br><span class="line">              memory: 1Gi</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: prometheus-config-volume</span><br><span class="line">              mountPath: /etc/prometheus/</span><br><span class="line">            - name: prometheus-storage-volume</span><br><span class="line">              mountPath: /prometheus/</span><br><span class="line">      volumes:</span><br><span class="line">        - name: prometheus-config-volume</span><br><span class="line">          configMap:</span><br><span class="line">            defaultMode: 420</span><br><span class="line">            name: prometheus-server-conf</span><br><span class="line">  </span><br><span class="line">        - name: prometheus-storage-volume</span><br><span class="line">          persistentVolumeClaim:</span><br><span class="line">            claimName: prometheus-pvc</span><br></pre></td></tr></table></figure>

<p>使用以下内容为 Prometheus Server 创建 Ingress</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-service</span><br><span class="line">  namespace: prometheus</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - name: prometheus-port</span><br><span class="line">      port: 8090</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: 9090</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus-server</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-ui</span><br><span class="line">  namespace: prometheus</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">  - host: prometheus.example.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: prometheus-service</span><br><span class="line">            port: </span><br><span class="line">              number: 8090</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>部署完成后，使用 <code>prometheus.example.com</code> 访问<br><img src="https://i.csms.tech/img_109.png"><br>可以通过 url <code>http://prometheus.example.com/config</code> 查看当前的 prometheus 配置</p>
<h2 id="部署-Grafana"><a href="#部署-Grafana" class="headerlink" title="部署 Grafana"></a>部署 Grafana</h2><p>如需部署 Grafana，可以使用以下配置，需要持久化数据目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-pod</span><br><span class="line">  namespace: prometheus</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus-server</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: prometheus-server</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus-server</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: prometheus</span><br><span class="line">          image: prom/prometheus</span><br><span class="line">          args:</span><br><span class="line">            - &quot;--storage.tsdb.retention.time=12h&quot;</span><br><span class="line">            - &quot;--config.file=/etc/prometheus/prometheus.yml&quot;</span><br><span class="line">            - &quot;--storage.tsdb.path=/prometheus/&quot;</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 9090</span><br><span class="line">          resources:</span><br><span class="line">            requests:</span><br><span class="line">              cpu: 500m</span><br><span class="line">              memory: 500M</span><br><span class="line">            limits:</span><br><span class="line">              cpu: 1</span><br><span class="line">              memory: 1Gi</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: prometheus-config-volume</span><br><span class="line">              mountPath: /etc/prometheus/</span><br><span class="line">            - name: prometheus-storage-volume</span><br><span class="line">              mountPath: /prometheus/</span><br><span class="line">              subPath: prometheus</span><br><span class="line">        - name: grafana</span><br><span class="line">          image: grafana/grafana</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 3000</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: prometheus-storage-volume</span><br><span class="line">              mountPath: /var/lib/grafana</span><br><span class="line">              subPath: grafana</span><br><span class="line">      volumes:</span><br><span class="line">        - name: prometheus-config-volume</span><br><span class="line">          configMap:</span><br><span class="line">            defaultMode: 420</span><br><span class="line">            name: prometheus-server-conf</span><br><span class="line">  </span><br><span class="line">        - name: prometheus-storage-volume</span><br><span class="line">          persistentVolumeClaim:</span><br><span class="line">            claimName: prometheus-pvc</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-service</span><br><span class="line">  namespace: prometheus</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - name: prometheus-port</span><br><span class="line">      port: 8090</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: 9090</span><br><span class="line">    - name: grafana-port</span><br><span class="line">      port: 3000</span><br><span class="line">      targetPort: 3000</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus-server</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-ui</span><br><span class="line">  namespace: prometheus</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">  - host: prometheus.example.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: prometheus-service</span><br><span class="line">            port: </span><br><span class="line">              number: 8090</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line">  - host: grafana.example.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: prometheus-service</span><br><span class="line">            port:</span><br><span class="line">              number: 3000</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="集群节点上部署-node-exporter-对集群节点进行监控"><a href="#集群节点上部署-node-exporter-对集群节点进行监控" class="headerlink" title="集群节点上部署 node-exporter 对集群节点进行监控"></a>集群节点上部署 node-exporter 对集群节点进行监控</h2><p>使用 <code>DaemonSet</code> 方式在每个 Node 上部署 <code>node-exporter</code>，本示例运行在 <code>prometheus</code> 的 Namespace 中。为了暴露 <code>node-exporter</code> 给 Prometheus Server ，可以使用以下方法。建议使用第 2 种方法。</p>
<ol>
<li><p>Service 的 port type 配置为 <code>NodePort</code>。<a href="https://csms.tech/202209121102/#修改-Service-可使用的-nodePort-端口范围">配置 Kubernetes API Server 允许 9100 端口配置为 NodePort 参考</a>，如此可以直接通过节点 IP 访问 <code>node-exporter</code></p>
<p>为了确保 Prometheus Server 请求查询指定节点的监控数据的流量都能被本节点上的 <code>node-exporter</code> 处理，建议配置 <code>externalTrafficPolicy: Local</code>、<code>internalTrafficPolicy: Local</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: node-exporter</span><br><span class="line">  namespace: prometheus</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: node-exporter</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: node-exporter</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: node-exporter</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: node-exporter</span><br><span class="line">        image: prom/node-exporter</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9100</span><br><span class="line">          protocol: TCP</span><br><span class="line">          name: http</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: node-exporter</span><br><span class="line">  name: node-exporter</span><br><span class="line">  namespace: prometheus</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 9100</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 9100</span><br><span class="line">    nodePort: 39100</span><br><span class="line">  selector:</span><br><span class="line">    name: node-exporter</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  type: NodePort</span><br><span class="line">  externalTrafficPolicy: Local</span><br><span class="line">  internalTrafficPolicy: Local</span><br></pre></td></tr></table></figure></li>
<li><p>不使用 Service，直接配置 Pod 网络为 <code>hostNetwork</code>，如此 Pod 的 Network Namespace 是在节点的 Root Network Namespace，可以直接使用节点的网络资源。同时配置 Pod 使用节点的 PID、IPC 资源。挂载主机的 <code>/dev</code>、<code>/proc</code>、<code>/sys</code> 等目录到容器中，以使 <code>node-exporter</code> 可以监控到节点上的数据。<strong>否则，node-expoter 因为权限问题无法监控到节点的资源</strong></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: node-exporter</span><br><span class="line">  namespace: prometheus</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: node-exporter</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: node-exporter</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: node-exporter</span><br><span class="line">    spec:</span><br><span class="line">      hostPid: true</span><br><span class="line">      hostIPC: true</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      containers:</span><br><span class="line">      - name: node-exporter</span><br><span class="line">        image: prom/node-exporter</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: true</span><br><span class="line">        args:</span><br><span class="line">          - --path.procfs</span><br><span class="line">          - /host/proc</span><br><span class="line">          - --path.sysfs</span><br><span class="line">          - /host/sys</span><br><span class="line">          - --collector.filesystem.ignored-mount-points</span><br><span class="line">          - &#x27;&quot;^/(sys|proc|dev|host|etc)($|/)&quot;&#x27;</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: dev</span><br><span class="line">          mountPath: /host/dev</span><br><span class="line">        - name: proc</span><br><span class="line">          mountPath: /host/proc</span><br><span class="line">        - name: sys</span><br><span class="line">          mountPath: /host/sys</span><br><span class="line">        - name: rootfs</span><br><span class="line">          mountPath: /rootfs</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9100</span><br><span class="line">          protocol: TCP</span><br><span class="line">          name: http</span><br><span class="line">      volumes:</span><br><span class="line">      - name: proc</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /proc</span><br><span class="line">      - name: dev</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /dev</span><br><span class="line">      - name: sys</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /sys</span><br><span class="line">      - name: rootfs</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /</span><br></pre></td></tr></table></figure></li>
</ol>
<p>部署之后通过 Grafana 导入 <a href="https://grafana.com/grafana/dashboards/8919">8919 Dashboard</a>，可以通过 <code>node exporter</code> 实现采集 node 节点上的监控数据。</p>
<p>如果部署之后，Dashboard 显示无数据，需要排查 <code>node-exporter</code> 相关的 <code>Service</code>，<code>EndPoint</code> 是否正常。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get services -n prometheus</span></span><br><span class="line">NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)             AGE</span><br><span class="line">node-exporter        ClusterIP   10.102.48.208   &lt;none&gt;        9100/TCP            44m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get endpoints -n prometheus</span></span><br><span class="line">NAME                 ENDPOINTS                             AGE</span><br><span class="line">node-exporter        10.244.3.107:9100,10.244.4.64:9100    49m</span><br></pre></td></tr></table></figure>

<h2 id="配置-Prometheus-支持-Kubernetes-服务发现"><a href="#配置-Prometheus-支持-Kubernetes-服务发现" class="headerlink" title="配置 Prometheus 支持 Kubernetes 服务发现"></a>配置 Prometheus 支持 Kubernetes 服务发现</h2><p>在 Kubernetes 下，Promethues 通过与 Kubernetes API 集成目前主要支持5种服务发现模式，分别是： <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Kubernetes 服务发现](https://yunlzheng.gitbook.io/prometheus-book/part-iii-prometheus-shi-zhan/readmd/service-discovery-with-kubernetes#fu-wu-fa-xian)">[3]</span></a></sup></p>
<ul>
<li><code>Node</code></li>
<li><code>Service</code></li>
<li><code>Pod</code></li>
<li><code>Endpoints</code></li>
<li><code>Ingress</code></li>
</ul>
<h3 id="配置-Prometheus-支持-Kubernetes-节点自动发现并抓取监控指标"><a href="#配置-Prometheus-支持-Kubernetes-节点自动发现并抓取监控指标" class="headerlink" title="配置 Prometheus 支持 Kubernetes 节点自动发现并抓取监控指标"></a>配置 Prometheus 支持 Kubernetes 节点自动发现并抓取监控指标</h3><p>为了让 Prometheus 能够获取到当前集群中所有节点的信息，在 Promtheus 的配置文件中，添加如下 Job 配置：</p>
<figure class="highlight shell"><figcaption><span>/etc/prometheus/prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;kubernetes-nodes&#x27;</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: node</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__address__]</span><br><span class="line">    regex: &#x27;(.*):10250&#x27;</span><br><span class="line">    replacement: &#x27;$&#123;1&#125;:9100&#x27;</span><br><span class="line">    target_label: __address__</span><br><span class="line">    action: replace</span><br></pre></td></tr></table></figure>
<p>通过指定 <code>kubernetes_sd_config</code> 的模式为 <code>node</code>，Prometheus 会自动从 Kubernetes 中发现到所有的 node 节点并作为当前 Job 监控的 Target 实例。这里需要指定用于 <a href="/202304271425/" title="访问 Kubernetes API 的 ca 以及 token 文件路径">访问 Kubernetes API 的 ca 以及 token 文件路径</a>。</p>
<p>通过以上配置，Prometheus 可以自动从 Kubernetes API Server 中发现节点的信息，并将其作为当前 Job 的 Target 实例，此配置下默认只存在 2 个标签<br><img src="https://i.csms.tech/img_155.png"></p>
<p>要将节点中的所有标签添加到 Prometheus 监控指标中，可以添加以下 <code>labelmap</code> 配置，意思为将正则表达式 <code>__meta_kubernetes_node_label_(.+)</code> 匹配的数据也添加到指标数据的 Lable 中去。</p>
<figure class="highlight shell"><figcaption><span>/etc/prometheus/prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;kubernetes-nodes&#x27;</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: node</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__address__]</span><br><span class="line">    regex: &#x27;(.*):10250&#x27;</span><br><span class="line">    replacement: &#x27;$&#123;1&#125;:9100&#x27;</span><br><span class="line">    target_label: __address__</span><br><span class="line">    action: replace</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_node_label_(.+)</span><br></pre></td></tr></table></figure>
<p>以上配置生效后，重新查看节点的标签信息，可以看到节点的的标签已经添加到了 Prometheus 监控指标中。<br><img src="https://i.csms.tech/img_156.png"></p>
<p>对于 <code>kubernetes_sd_configs</code> 下面可用的元信息标签如下：</p>
<ul>
<li><code>__meta_kubernetes_node_name</code> ：节点对象的名称</li>
<li><code>__meta_kubernetes_node_label</code> ：节点对象中的每个标签</li>
<li><code>__meta_kubernetes_node_annotation</code> ：来自节点对象的每个注释</li>
<li><code>__meta_kubernetes_node_address</code> ：每个节点地址类型的第一个地址（如果存在）</li>
</ul>
<h3 id="配置-Prometheus-自动发现-kube-apiserver-并读取监控指标"><a href="#配置-Prometheus-自动发现-kube-apiserver-并读取监控指标" class="headerlink" title="配置 Prometheus 自动发现 kube-apiserver 并读取监控指标"></a>配置 Prometheus 自动发现 kube-apiserver 并读取监控指标</h3><p><code>kube-apiserver</code> 监听在节点的 6443 端口，通过以下配置可以使 Prometheus 读取 <code>kube-apiserver</code> 的指标数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- job_name: &quot;kubernetes-apiservers&quot;</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">    - role: endpoints</span><br><span class="line">  scheme: https</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">  relabel_configs:</span><br><span class="line">    - source_labels:</span><br><span class="line">        [</span><br><span class="line">          __meta_kubernetes_namespace,</span><br><span class="line">          __meta_kubernetes_service_name,</span><br><span class="line">          __meta_kubernetes_endpoint_port_name,</span><br><span class="line">        ]</span><br><span class="line">      action: keep</span><br><span class="line">      regex: default;kubernetes;https</span><br></pre></td></tr></table></figure>

<h3 id="配置-Prometheus-自动发现-kubelet-并读取监控指标"><a href="#配置-Prometheus-自动发现-kubelet-并读取监控指标" class="headerlink" title="配置 Prometheus 自动发现 kubelet 并读取监控指标"></a>配置 Prometheus 自动发现 kubelet 并读取监控指标</h3><p>kubelet 监听在节点的 10250 端口，通过以下配置可以使 Prometheus 读取 <code>kubelet</code> 提供的监控数据。这里需要 <a href="#%E5%88%9B%E5%BB%BA%E9%9B%86%E7%BE%A4%E8%A7%92%E8%89%B2">配置好 <code>ServiceAccount</code>的权限，以使 Prometheus 有查询集群资源的权限</a>。</p>
<figure class="highlight shell"><figcaption><span>/etc/prometheus/prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  evaluation_interval: 5s</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;localhost:9090&#x27;]</span><br><span class="line">    </span><br><span class="line">  - job_name: &#x27;kubernetes-nodes&#x27;</span><br><span class="line">    tls_config:</span><br><span class="line">      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">    kubernetes_sd_configs:</span><br><span class="line">    - role: node</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels: [__address__]</span><br><span class="line">      regex: &#x27;(.*):10250&#x27;</span><br><span class="line">      replacement: &#x27;$&#123;1&#125;:9100&#x27;</span><br><span class="line">      target_label: __address__</span><br><span class="line">      action: replace</span><br><span class="line">    - action: labelmap</span><br><span class="line">      regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line"></span><br><span class="line">  - job_name: &#x27;kubernetes-kubelet&#x27;</span><br><span class="line">    kubernetes_sd_configs:</span><br><span class="line">    - role: node</span><br><span class="line">    scheme: https</span><br><span class="line">    tls_config:</span><br><span class="line">      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      insecure_skip_verify: true</span><br><span class="line">    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - action: labelmap</span><br><span class="line">      regex: __meta_kubernetes_node_label_(.+)</span><br></pre></td></tr></table></figure>
<p>以上配置生效后，查看 Prometheus 的 Targets，会看到多了 <code>kubernetes-kubelet</code><br><img src="https://i.csms.tech/img_157.png"></p>
<p>但是请求监控数据错误，返回：<code>server returned HTTP status 403 Forbidden</code>。根据日志提示，可能是因为权限原因被拒绝。</p>
<p>Prometheus 请求 Kubelet 使用的是 Token 鉴权 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Kubelet 鉴权](https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/kubelet-authn-authz/#kubelet-authorization)
">[5]</span></a></sup> 。基于 <a href="/202305161451/" title="Kubernetes API Server 的 RBAC">Kubernetes API Server 的 RBAC</a>，大体流程为： </p>
<ol>
<li>Pod 使用启动时系统挂载的 Token （<code>/var/run/secrets/kubernetes.io/serviceaccount/token</code>）向 kubelet 发起查询请求。 Prometheus 使用的 Token 路径是在配置文件中指定 <code>bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</code> </li>
<li>Kubelet 校验 Token 的权限</li>
</ol>
<p>根据错误消息，可以猜测 Token 权限存在问题。以下步骤针对此猜测进行验证，<a href="/202305161451/" title="其原理参考文档">其原理参考文档</a></p>
<ol>
<li>登陆到 Prometheus 所在的 Pod，执行以下命令，模拟请求 Kubelet，从响应可以看到 <code>Forbidden (user=system:serviceaccount:prometheus:default, verb=get, resource=nodes, subresource=metrics)</code>，说明 Pod 使用的 <code>user=system:serviceaccount:prometheus:default</code> ServiceAccount 账号没有权限，并且具体使用的权限为 <code>verb=get, resource=nodes, subresource=metrics</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v -k -H <span class="string">&quot;Authorization: Bearer `cat /var/run/secrets/kubernetes.io/serviceaccount/token`&quot;</span> https://172.31.19.164:10250/metrics</span></span><br><span class="line">*   Trying 172.31.19.164:10250...</span><br><span class="line">* Connected to 172.31.19.164 (172.31.19.164) port 10250 (#0)</span><br><span class="line">* using HTTP/2</span><br><span class="line">* h2h3 [:method: GET]</span><br><span class="line">* h2h3 [:path: /metrics]</span><br><span class="line">* h2h3 [:scheme: https]</span><br><span class="line">* h2h3 [:authority: 172.31.19.164:10250]</span><br><span class="line">* h2h3 [user-agent: curl/8.0.1]</span><br><span class="line">* h2h3 [accept: */*]</span><br><span class="line">* h2h3 [authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ik51eFpuNU9MUlp2QkxmWjlxRVpVMjRYYVRpV3RSQk1HanJsRnBjbjJBSzQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNzE2OTcwODc5LCJpYXQiOjE2ODU0MzQ4NzksImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlc]</span><br><span class="line">* Using Stream ID: 1 (easy handle 0x7f1038310af0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET /metrics HTTP/2</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: 172.31.19.164:10250</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">user-agent: curl/8.0.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ik51eFpuNU9MUlp2QkxmWjlxRVpVMjRYYVRpV3RSQk1HanJsRnBjbjJBSzQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNzE2OTcwODc5LCJpYXQiOjE2ODU0MzQ4NzksImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlc]</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):</span></span><br><span class="line">&lt; HTTP/2 403 </span><br><span class="line">&lt; content-type: text/plain; charset=utf-8</span><br><span class="line">&lt; content-length: 104</span><br><span class="line">&lt; date: Tue, 30 May 2023 08:22:34 GMT</span><br><span class="line">&lt; </span><br><span class="line">* Connection #0 to host 172.31.19.164 left intact</span><br><span class="line">Forbidden (user=system:serviceaccount:prometheus:default, verb=get, resource=nodes, subresource=metrics)</span><br></pre></td></tr></table></figure></li>
<li>检查 Prometheus Namespace 中的默认的 ServiceAccount 绑定的权限，其绑定到了名为 <code>prometheus</code> 的 ClusterRole <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl edit clusterrolebinding prometheus</span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: prometheus</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: default</span><br><span class="line">  namespace: prometheus</span><br></pre></td></tr></table></figure></li>
<li>检查名为 <code>prometheus</code> 的 ClusterRole 的权限信息，可以看到其中没有对 <code>verb=get, resource=nodes, subresource=metrics</code> 的授权，将其添加到授权中，重新查看 Prometheus 的 Targets 中 <code>kubernetes-kubelet</code> 的状态，请求正常。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl edit clusterrole prometheus</span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - &quot;&quot;</span><br><span class="line">  resources:</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes/proxy</span><br><span class="line">  - nodes/metrics</span><br><span class="line">  - services</span><br><span class="line">  - endpoints</span><br><span class="line">  - pods</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - extensions</span><br><span class="line">  resources:</span><br><span class="line">  - ingresses</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- nonResourceURLs:</span><br><span class="line">  - /metrics</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br></pre></td></tr></table></figure>
<img src="https://i.csms.tech/img_158.png"></li>
</ol>
<h3 id="配置-Prometheus-从-cAdvisor-读取监控数据"><a href="#配置-Prometheus-从-cAdvisor-读取监控数据" class="headerlink" title="配置 Prometheus 从 cAdvisor 读取监控数据"></a>配置 Prometheus 从 cAdvisor 读取监控数据</h3><p>各节点的 kubelet 组件中除了包含自身的监控指标信息以外，kubelet 组件还内置了对 cAdvisor 的支持。cAdvisor 能够获取当前节点上运行的所有容器的资源使用情况，通过访问 kubelet 的 <code>/metrics/cadvisor</code> 地址可以获取到 cadvisor 的监控指标，因此和获取 kubelet 监控指标类似，这里同样通过 node 模式自动发现所有的 kubelet 信息，并通过适当的 <code>relabel</code> 过程，修改监控采集任务的配置</p>
<figure class="highlight shell"><figcaption><span>/etc/prometheus/prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  evaluation_interval: 5s</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;localhost:9090&#x27;]</span><br><span class="line">    </span><br><span class="line">  - job_name: &#x27;kubernetes-nodes&#x27;</span><br><span class="line">    tls_config:</span><br><span class="line">      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">    kubernetes_sd_configs:</span><br><span class="line">    - role: node</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels: [__address__]</span><br><span class="line">      regex: &#x27;(.*):10250&#x27;</span><br><span class="line">      replacement: &#x27;$&#123;1&#125;:9100&#x27;</span><br><span class="line">      target_label: __address__</span><br><span class="line">      action: replace</span><br><span class="line">    - action: labelmap</span><br><span class="line">      regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line"></span><br><span class="line">  - job_name: &#x27;kubernetes-kubelet&#x27;</span><br><span class="line">    kubernetes_sd_configs:</span><br><span class="line">    - role: node</span><br><span class="line">    scheme: https</span><br><span class="line">    tls_config:</span><br><span class="line">      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      insecure_skip_verify: true</span><br><span class="line">    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - action: labelmap</span><br><span class="line">      regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      </span><br><span class="line">  - job_name: &#x27;kubernetes-cadvisor&#x27;</span><br><span class="line">    scheme: https</span><br><span class="line">    tls_config:</span><br><span class="line">      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      insecure_skip_verify: true</span><br><span class="line">    kubernetes_sd_configs:</span><br><span class="line">    - role: node</span><br><span class="line">    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">      regex: (.+)</span><br><span class="line">      target_label: __metrics_path__</span><br><span class="line">      replacement: metrics/cadvisor</span><br><span class="line">    - action: labelmap</span><br><span class="line">      regex: __meta_kubernetes_node_label_(.+)</span><br></pre></td></tr></table></figure>
<p>以上配置生效后，查看 Prometheus 的 Targets 信息，正常会看到 cAdvisor 的 Target</p>
<p><img src="https://i.csms.tech/img_159.png"></p>
<h3 id="配置-Prometheus-抓取-Kubernetes-集群资源状态指标"><a href="#配置-Prometheus-抓取-Kubernetes-集群资源状态指标" class="headerlink" title="配置 Prometheus 抓取 Kubernetes 集群资源状态指标"></a>配置 Prometheus 抓取 Kubernetes 集群资源状态指标</h3><p>要监控 Kubernetes 集群资源状态的相关指标，需要在 Kubernetes 中 <a href="https://csms.tech/202209121102/#部署-kube-state-metrics-组件">部署 <code>kube-state-metrics</code> 组件</a>。</p>
<p>在 Prometheus 配置文件中，添加一个新的监控目标以获取 <code>kube-state-metrics</code> 抓取的指标</p>
<figure class="highlight shell"><figcaption><span>/etc/prometheus/prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  evaluation_interval: 5s</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;localhost:9090&#x27;]</span><br><span class="line">    </span><br><span class="line">  - job_name: &#x27;kubernetes-nodes&#x27;</span><br><span class="line">    tls_config:</span><br><span class="line">      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">    kubernetes_sd_configs:</span><br><span class="line">    - role: node</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels: [__address__]</span><br><span class="line">      regex: &#x27;(.*):10250&#x27;</span><br><span class="line">      replacement: &#x27;$&#123;1&#125;:9100&#x27;</span><br><span class="line">      target_label: __address__</span><br><span class="line">      action: replace</span><br><span class="line">    - action: labelmap</span><br><span class="line">      regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line"></span><br><span class="line">  - job_name: &#x27;kubernetes-kubelet&#x27;</span><br><span class="line">    kubernetes_sd_configs:</span><br><span class="line">    - role: node</span><br><span class="line">    scheme: https</span><br><span class="line">    tls_config:</span><br><span class="line">      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      insecure_skip_verify: true</span><br><span class="line">    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - action: labelmap</span><br><span class="line">      regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      </span><br><span class="line">  - job_name: &#x27;kubernetes-cadvisor&#x27;</span><br><span class="line">    scheme: https</span><br><span class="line">    tls_config:</span><br><span class="line">      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      insecure_skip_verify: true</span><br><span class="line">    kubernetes_sd_configs:</span><br><span class="line">    - role: node</span><br><span class="line">    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">      regex: (.+)</span><br><span class="line">      target_label: __metrics_path__</span><br><span class="line">      replacement: metrics/cadvisor</span><br><span class="line">    - action: labelmap</span><br><span class="line">      regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      </span><br><span class="line">  - job_name: &#x27;kube-state-metrics&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;kube-state-metrics.kube-system.svc.cluster.local:8080&#x27;]  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p>要查看 <code>kube-state-metrics</code> 抓取的指标，可以在集群内访问 <code>kube-state-metrics.kube-system.svc.cluster.local:8080/metrics</code> 查看</p>
<h3 id="etcd-组件监控"><a href="#etcd-组件监控" class="headerlink" title="etcd 组件监控"></a>etcd 组件监控</h3><ol>
<li><p>修改 <code>etcd</code> 配置</p>
<p>Kubernetes 集群的 <code>etcd</code> 默认是开启暴露 <code>metrics</code> 数据的。查看 <code>etcd</code> 的 Pod 中容器的启动参数。其中 <code>--listen-metrics-urls=http://127.0.0.1:2381</code> 参数配置了 Metrics 接口运行在 <code>http://127.0.0.1:2381</code>。这里默认使用了 <code>127.0.0.1</code> 监听，需要修改（<strong>所有节点</strong>） <code>etcd</code> 的（静态 Pod）的配置文件 <code>/etc/kubernetes/manifests/etcd.yaml</code>，将 <code>- --listen-metrics-urls=http://127.0.0.1:2381</code> 修改为 Prometheus 可请求的 IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pods -n kube-system etcd -o yaml</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - etcd</span><br><span class="line">    - --advertise-client-urls=https://172.31.26.116:2379</span><br><span class="line">    - --cert-file=/etc/kubernetes/pki/etcd/server.crt</span><br><span class="line">    - --client-cert-auth=true</span><br><span class="line">    - --data-dir=/var/lib/etcd</span><br><span class="line">    - --experimental-initial-corrupt-check=true</span><br><span class="line">    - --initial-advertise-peer-urls=https://172.31.26.116:2380</span><br><span class="line">    - --initial-cluster=fm-k8s-c1-master1=https://172.31.26.116:2380</span><br><span class="line">    - --key-file=/etc/kubernetes/pki/etcd/server.key</span><br><span class="line">    - --listen-client-urls=https://127.0.0.1:2379,https://172.31.26.116:2379</span><br><span class="line">    - --listen-metrics-urls=http://127.0.0.1:2381</span><br><span class="line">    - --listen-peer-urls=https://172.31.26.116:2380</span><br><span class="line">    - --name=k8s-master1</span><br><span class="line">    - --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt</span><br><span class="line">    - --peer-client-cert-auth=true</span><br><span class="line">    - --peer-key-file=/etc/kubernetes/pki/etcd/peer.key</span><br><span class="line">    - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line">    - --snapshot-count=10000</span><br><span class="line">    - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line">    image: k8s.gcr.io/etcd:3.5.3-0</span><br></pre></td></tr></table></figure></li>
<li><p>为 <code>etcd</code> 的 Pod 创建 <code>service</code></p>
<p>在 <a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/ha-topology/#stacked-etcd-topology">堆叠（Stacked）<code>etcd</code> 拓扑</a> 的高可用控制平面的架构下，<code>etcd</code> 通常会运行在每个 master 控制节点上（多实例）。为了方便 Prometheus 监控，可以为 <code>etcd</code> Pod 创建 <a href="https://csms.tech/202209241108/#Service">Headless Service</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: k8s-etcd</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  clusterIP: None  #设置为None，不分配Service IP</span><br><span class="line">  ports:</span><br><span class="line">  - port: 2381</span><br><span class="line">    targetPort: 2381</span><br><span class="line">    name: etcd-metrics-port</span><br><span class="line">  selector:</span><br><span class="line">    component: etcd</span><br></pre></td></tr></table></figure>
<p>创建成功后，可以检查以下 Service、Endpoints 信息是否正确。Service 没问题后，即可在 Prometheus 中通过 FQDN <code>k8s-etcd.kube-system.svc:2381/metrics</code> 抓取到 <code>etcd</code> 的指标。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pods -A -l component=etcd</span></span><br><span class="line">NAMESPACE     NAME                   READY   STATUS    RESTARTS      AGE</span><br><span class="line">kube-system   etcd-ops-k8s-master1   1/1     Running   1 (17m ago)   20m</span><br><span class="line">kube-system   etcd-ops-k8s-master2   1/1     Running   0             15m</span><br><span class="line">kube-system   etcd-ops-k8s-master3   1/1     Running   0             15m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get services -n kube-system</span></span><br><span class="line">NAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">k8s-etcd             ClusterIP   None           &lt;none&gt;        2381/TCP                 15s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get endpoints -n kube-system</span></span><br><span class="line">NAME                 ENDPOINTS                                                AGE</span><br><span class="line">k8s-etcd             172.31.19.164:2381,172.31.21.3:2381,172.31.26.116:2381   33s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pods -n kube-system -o wide</span></span><br><span class="line">NAME                                      READY   STATUS    RESTARTS       AGE    IP              NODE                NOMINATED NODE   READINESS GATES</span><br><span class="line">etcd-ops-k8s-master1                      1/1     Running   1 (27m ago)    30m    172.31.26.116   ops-k8s-master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-ops-k8s-master2                      1/1     Running   0              25m    172.31.19.164   ops-k8s-master2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-ops-k8s-master3                      1/1     Running   0              25m    172.31.21.3     ops-k8s-master3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -v k8s-etcd.kube-system.svc:2381/metrics</span></span><br><span class="line">*   Trying 172.31.26.116:2381...</span><br><span class="line">* Connected to k8s-etcd.kube-system.svc (172.31.26.116) port 2381 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET /metrics HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: k8s-etcd.kube-system.svc:2381</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.80.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">* Mark bundle as not supporting multiuse</span></span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Content-Type: text/plain; version=0.0.4; charset=utf-8</span><br><span class="line">&lt; Date: Wed, 04 Oct 2023 02:15:01 GMT</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HELP etcd_cluster_version Which version is running. 1 <span class="keyword">for</span> <span class="string">&#x27;cluster_version&#x27;</span> label with current cluster version</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE etcd_cluster_version gauge</span></span><br><span class="line">etcd_cluster_version&#123;cluster_version=&quot;3.5&quot;&#125; 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HELP etcd_debugging_auth_revision The current revision of auth store.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE etcd_debugging_auth_revision gauge</span></span><br><span class="line">etcd_debugging_auth_revision 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HELP etcd_debugging_disk_backend_commit_rebalance_duration_seconds The latency distributions of commit.rebalance called by bboltdb backend.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE etcd_debugging_disk_backend_commit_rebalance_duration_seconds histogram</span></span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=&quot;0.001&quot;&#125; 5155</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=&quot;0.002&quot;&#125; 5155</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=&quot;0.004&quot;&#125; 5155</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=&quot;0.008&quot;&#125; 5155</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=&quot;0.016&quot;&#125; 5155</span><br></pre></td></tr></table></figure></li>
<li><p>Prometheus 中添加抓取 <code>etcd</code> 指标的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;kube-etcd&#x27;</span><br><span class="line">  metrics_path: /metrics</span><br><span class="line">  scheme: http</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: endpoints</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">    regex: k8s-etcd</span><br><span class="line">    action: keep</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_pod_label_(.+)</span><br></pre></td></tr></table></figure></li>
<li><p>Prometheus 中检查是否抓取到了 <code>etcd</code> 指标<br><img src="https://i.csms.tech/img_222.png"></p>
</li>
</ol>
<h3 id="Scheduler-组件监控"><a href="#Scheduler-组件监控" class="headerlink" title="Scheduler 组件监控"></a>Scheduler 组件监控</h3><ol>
<li><p>修改 Scheduler 监听 IP 地址</p>
<p> Scheduler 组件默认监听在 <code>127.0.0.1:10259</code>（<code>hostNetwork: true</code> 类型的网络，监听在主机 network Namespace）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">netstat -anutp | grep -v -E <span class="string">&quot;TIME_WAIT|ESTABLISHED&quot;</span> | grep schedule</span></span><br><span class="line">tcp        0      0 127.0.0.1:10259         0.0.0.0:*               LISTEN      24770/kube-schedule</span><br></pre></td></tr></table></figure>
<p>修改 <strong>所有 Master 节点</strong> 上的 <code>kube-scheduler</code> 配置 <code>/etc/kubernetes/manifests/kube-scheduler.yaml</code>，将监听地址修改为 <code>- --bind-address=0.0.0.0</code></p>
<figure class="highlight shell"><figcaption><span>/etc/kubernetes/manifests/kube-scheduler.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - kube-scheduler</span><br><span class="line">    - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf</span><br><span class="line">    - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf</span><br><span class="line">    - --bind-address=0.0.0.0</span><br><span class="line">    - --kubeconfig=/etc/kubernetes/scheduler.conf</span><br><span class="line">    - --leader-elect=true</span><br><span class="line">    image: k8s.gcr.io/kube-scheduler:v1.24.8</span><br></pre></td></tr></table></figure>
<p>修改后，<code>kube-scheduler</code> 的 Pod 会自动重启（静态 Pod），重启后 <code>kube-scheduler</code> 会监听所有 IP 地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">netstat -anutp | grep -v -E <span class="string">&quot;TIME_WAIT|ESTABLISHED&quot;</span> | grep schedule</span></span><br><span class="line">tcp6       0      0 :::10259                :::*                    LISTEN      27244/kube-schedule</span><br></pre></td></tr></table></figure></li>
<li><p>为 <code>kube-scheduler</code> 的 Pod 创建 <code>service</code></p>
<p>参考以下配置，为 <code>kube-scheduler</code> 的 Pod 创建 <code>service</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: k8s-scheduler</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  clusterIP: None  #设置为None，不分配Service IP</span><br><span class="line">  ports:</span><br><span class="line">  - port: 10259</span><br><span class="line">    targetPort: 10259</span><br><span class="line">    name: k8s-scheduler-metrics-port</span><br><span class="line">  selector:</span><br><span class="line">    component: kube-scheduler  </span><br></pre></td></tr></table></figure></li>
<li><p>Prometheus 中添加抓取 <code>kube-scheduler</code> 指标的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;kube-scheduler&#x27;</span><br><span class="line">  metrics_path: metrics</span><br><span class="line">  scheme: https</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">    insecure_skip_verify: true</span><br><span class="line">  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: endpoints</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">    regex: k8s-scheduler</span><br><span class="line">    action: keep</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_pod_label_(.+)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Controller-Manager-组件监控"><a href="#Controller-Manager-组件监控" class="headerlink" title="Controller Manager 组件监控"></a>Controller Manager 组件监控</h3><p>Controller Manager 组件默认监听 <code>127.0.0.1:10257</code>，修改 <code>kube-controller-manager</code> 配置 <code>/etc/kubernetes/manifests/kube-controller-manager.yaml</code>，将监听地址修改为 <code>- --bind-address=0.0.0.0</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">netstat -anutp | grep -v -E <span class="string">&quot;TIME_WAIT|ESTABLISHED&quot;</span> |grep contr</span></span><br><span class="line">tcp        0      0 127.0.0.1:10257         0.0.0.0:*               LISTEN      24786/kube-controll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /etc/kubernetes/manifests/kube-controller-manager.yaml</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - kube-controller-manager</span><br><span class="line">    - --allocate-node-cidrs=true</span><br><span class="line">    - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf</span><br><span class="line">    - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf</span><br><span class="line">    - --bind-address=0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">netstat -anutp | grep -v -E <span class="string">&quot;TIME_WAIT|ESTABLISHED&quot;</span> |grep contr</span></span><br><span class="line">tcp6       0      0 :::10257                :::*                    LISTEN      10489/kube-controll</span><br></pre></td></tr></table></figure>

<p>为 <code>kube-controller-manager</code> 创建 <code>service</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: k8s-controller-manager</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  clusterIP: None  #设置为None，不分配Service IP</span><br><span class="line">  ports:</span><br><span class="line">  - port: 10257</span><br><span class="line">    targetPort: 10257</span><br><span class="line">    name: k8s-controller-manager-metrics-port</span><br><span class="line">  selector:</span><br><span class="line">    component: kube-controller-manager</span><br></pre></td></tr></table></figure>
<p>Prometheus 中添加抓取 <code>kube-controller-manager</code> 指标的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;kube-controller-manager&#x27;</span><br><span class="line">  metrics_path: metrics</span><br><span class="line">  scheme: https</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">    insecure_skip_verify: true</span><br><span class="line">  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: endpoints</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">    regex: k8s-controller-manager</span><br><span class="line">    action: keep</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_pod_label_(.+)</span><br></pre></td></tr></table></figure>
<h3 id="kube-proxy-组件监控"><a href="#kube-proxy-组件监控" class="headerlink" title="kube-proxy 组件监控"></a>kube-proxy 组件监控</h3><p><code>kube-proxy</code> 的 Metrics 默认监听在 <code>127.0.0.1:10249</code>，执行命令 <code>kubectl edit configmap kube-proxy -n kube-system</code> 修改其监听地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">metricsBindAddress: &quot;0.0.0.0:10249&quot;</span><br></pre></td></tr></table></figure>
<p>修改配置后，重启 <code>kube-proxy</code>，检查监听地址，确定为 <code>:::10249</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pods -n kube-system</span></span><br><span class="line">NAME                                  READY   STATUS    RESTARTS        AGE</span><br><span class="line">kube-proxy-2cslw                      1/1     Running   8               301d</span><br><span class="line">kube-proxy-5nl5v                      1/1     Running   3               301d</span><br><span class="line">kube-proxy-m2b2x                      1/1     Running   3               301d</span><br><span class="line">kube-proxy-w5qh6                      1/1     Running   0               69s</span><br><span class="line">kube-proxy-zvrj4                      1/1     Running   3 (104d ago)    301d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl delete pod -n kube-system kube-proxy-2cslw kube-proxy-5nl5v kube-proxy-m2b2x kube-proxy-zvrj4</span></span><br><span class="line">pod &quot;kube-proxy-2cslw&quot; deleted</span><br><span class="line">pod &quot;kube-proxy-5nl5v&quot; deleted</span><br><span class="line">pod &quot;kube-proxy-m2b2x&quot; deleted</span><br><span class="line">pod &quot;kube-proxy-zvrj4&quot; deleted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">netstat -anutp | grep -v -E <span class="string">&quot;TIME_WAIT|ESTABLISHED&quot;</span> | grep pro</span></span><br><span class="line">tcp6       0      0 :::10249                :::*                    LISTEN      25831/kube-proxy    </span><br><span class="line">tcp6       0      0 :::10256                :::*                    LISTEN      25831/kube-proxy</span><br></pre></td></tr></table></figure>

<p>为 <code>kube-proxy</code> 创建 <code>service</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-proxy</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  clusterIP: None  #设置为None，不分配Service IP</span><br><span class="line">  ports:</span><br><span class="line">  - port: 10249</span><br><span class="line">    targetPort: 10249</span><br><span class="line">    name: kube-proxy-metrics-port</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kube-proxy</span><br></pre></td></tr></table></figure>

<p>Prometheus 中添加抓取 <code>kube-proxy</code> 指标的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;kube-proxy&#x27;</span><br><span class="line">  metrics_path: metrics</span><br><span class="line">  scheme: https</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">    insecure_skip_verify: true</span><br><span class="line">  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: endpoints</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">    regex: kube-proxy</span><br><span class="line">    action: keep</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_pod_label_(.+)</span><br></pre></td></tr></table></figure>

<h3 id="CoreDNS-组件监控"><a href="#CoreDNS-组件监控" class="headerlink" title="CoreDNS 组件监控"></a>CoreDNS 组件监控</h3><p>CoreDNS 组件默认就开启了 Metrics 接口，Endpoint 为 <code>kube-dns.kube-system.svc:9153/metrics</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get services -n kube-system</span></span><br><span class="line">NAME                     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">kube-dns                 ClusterIP   10.96.0.10     &lt;none&gt;        53/UDP,53/TCP,9153/TCP   301d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bash-5.1# curl kube-dns.kube-system.svc:9153/metrics</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HELP coredns_build_info A metric with a constant <span class="string">&#x27;1&#x27;</span> value labeled by version, revision, and goversion from <span class="built_in">which</span> CoreDNS was built.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE coredns_build_info gauge</span></span><br><span class="line">coredns_build_info&#123;goversion=&quot;go1.17.1&quot;,revision=&quot;13a9191&quot;,version=&quot;1.8.6&quot;&#125; 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HELP coredns_cache_entries The number of elements <span class="keyword">in</span> the cache.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE coredns_cache_entries gauge</span></span><br><span class="line">coredns_cache_entries&#123;server=&quot;dns://:53&quot;,type=&quot;denial&quot;&#125; 333</span><br><span class="line">coredns_cache_entries&#123;server=&quot;dns://:53&quot;,type=&quot;success&quot;&#125; 63</span><br></pre></td></tr></table></figure>
<p>因此监控 CoreDNS 只需要使用 Prometheus 的服务发现添加抓取 CoreDNS 的相关配置即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;kube-dns&#x27;</span><br><span class="line">  metrics_path: metrics</span><br><span class="line">  scheme: http</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">    insecure_skip_verify: false</span><br><span class="line">  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: endpoints</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">    regex: kube-dns</span><br><span class="line">    action: keep</span><br><span class="line">  - source_labels: [__meta_kubernetes_endpoint_port_name]</span><br><span class="line">    regex: metrics</span><br><span class="line">    action: keep </span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_pod_label_(.+)</span><br></pre></td></tr></table></figure>


<h3 id="配置-Prometheus-抓取-Ingress-Nginx-指标"><a href="#配置-Prometheus-抓取-Ingress-Nginx-指标" class="headerlink" title="配置 Prometheus 抓取 Ingress-Nginx 指标"></a>配置 Prometheus 抓取 Ingress-Nginx 指标</h3><ol>
<li><p>参考 <code>ingress-nginx</code> 官方提供的 Prometheus 自动发现 <code>ingress-nginx</code> 的配置 <sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ingress-nginx prometheus](https://github.com/kubernetes/ingress-nginx/blob/main/deploy/prometheus/prometheus.yaml)">[9]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval: 10s</span><br><span class="line">scrape_configs:</span><br><span class="line">- job_name: &#x27;ingress-nginx-endpoints&#x27;</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: pod</span><br><span class="line">    namespaces:</span><br><span class="line">      names:</span><br><span class="line">      - ingress-nginx</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span><br><span class="line">    action: keep</span><br><span class="line">    regex: true</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: __scheme__</span><br><span class="line">    regex: (https?)</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: __metrics_path__</span><br><span class="line">    regex: (.+)</span><br><span class="line">  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: __address__</span><br><span class="line">    regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">    replacement: $1:$2</span><br><span class="line">  - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">    regex: prometheus-server</span><br><span class="line">    action: drop</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 <code>ingress-nginx</code> 的 Deployment，添加端口配置，本示例中 Ingress-Nginx 端口类型为 <code>hostNetwork: true</code>。如果 Ingress-Nginx 使用了 Service，需要配置 Service 暴露相关端口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- containerPort: 10254</span><br><span class="line">  hostPort: 10254</span><br><span class="line">  name: prometheus</span><br><span class="line">  protocol: TCP</span><br></pre></td></tr></table></figure></li>
<li><p>配置 <code>ingress-nginx</code> 的 Deployment，添加 Pod 针对 Prometheus 监控的注释</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      annotations:</span><br><span class="line">        prometheus.io/scrape: &quot;true&quot;</span><br><span class="line">        prometheus.io/port: &quot;10254&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>部署后，在 Prometheus UI 中检查 <code>nginx_ingress.*</code> 相关指标<br><img src="https://i.csms.tech/img_177.png"></p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="failed-to-list-v1-Pod-pods-is-forbidden-User-quot-system-serviceaccount-prometheus-default-quot-cannot-list-resource-quot-pods-quot-in-API-group-quot-quot-at-the-cluster-scope”"><a href="#failed-to-list-v1-Pod-pods-is-forbidden-User-quot-system-serviceaccount-prometheus-default-quot-cannot-list-resource-quot-pods-quot-in-API-group-quot-quot-at-the-cluster-scope”" class="headerlink" title="failed to list *v1.Pod: pods is forbidden: User &quot;system:serviceaccount:prometheus:default&quot; cannot list resource &quot;pods&quot; in API group &quot;&quot; at the cluster scope”"></a>failed to list *v1.Pod: pods is forbidden: User &quot;system:serviceaccount:prometheus:default&quot; cannot list resource &quot;pods&quot; in API group &quot;&quot; at the cluster scope”</h2><p>部署 Prometheus 后，无法访问，检查 Pod 日志，显示错误： <code>failed to list *v1.Pod: pods is forbidden: User \&quot;system:serviceaccount:prometheus:default\&quot; cannot list resource \&quot;pods\&quot; in API group \&quot;\&quot; at the cluster scope&quot;</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Configure Prometheus for service discovery](https://uzimihsr.github.io/post/2022-11-28-kubernetes-prometheus-kube-state-metrics-cadvisor/)
">[2]</span></a></sup></p>
<p>根据输出，应该是因为 Namespace <code>prometheus</code>  中的 <code>ServiceAccount</code> 账号 <code>default</code> 无相关权限导致，此权限是于 <a href="#%E5%88%9B%E5%BB%BA%E9%9B%86%E7%BE%A4%E8%A7%92%E8%89%B2">此处配置</a>，检查相关账号权限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe clusterrole prometheus</span></span><br><span class="line">Name:         prometheus</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources             Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------             -----------------  --------------  -----</span><br><span class="line">  endpoints             []                 []              [get list watch]</span><br><span class="line">  nodes/proxy           []                 []              [get list watch]</span><br><span class="line">  nodes                 []                 []              [get list watch]</span><br><span class="line">  pods                  []                 []              [get list watch]</span><br><span class="line">  services              []                 []              [get list watch]</span><br><span class="line">  ingresses.extensions  []                 []              [get list watch]</span><br><span class="line">                        [/metrics]         []              [get]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe clusterrolebinding prometheus</span></span><br><span class="line">Name:         prometheus</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Role:</span><br><span class="line">  Kind:  ClusterRole</span><br><span class="line">  Name:  prometheus</span><br><span class="line">Subjects:</span><br><span class="line">  Kind            Name     Namespace</span><br><span class="line">  ----            ----     ---------</span><br><span class="line">  ServiceAccount  default  prometheus</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>正常配置的 RBAC 账号输出如上，如果权限显示异常，需要重新检查 <a href="#%E5%88%9B%E5%BB%BA%E9%9B%86%E7%BE%A4%E8%A7%92%E8%89%B2">此处配置</a> 是否正常，如文件格式是否正确。本示例中是因为 yaml 文件格式导致 <code>clusterrolebinding</code> 绑定异常，输出结果如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe clusterrolebinding prometheus</span></span><br><span class="line">Name:         prometheus</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Role:</span><br><span class="line">  Kind:  ClusterRole</span><br><span class="line">  Name:  prometheus</span><br><span class="line">Subjects:</span><br><span class="line">  Kind            Name     Namespace</span><br><span class="line">  ----            ----     ---------</span><br></pre></td></tr></table></figure>
<p>更正文件格式后，重新 <code>kubectl apply</code> ，Prometheus Server 部署正常。</p>
<h2 id="server-returned-HTTP-status-400-Bad-Request"><a href="#server-returned-HTTP-status-400-Bad-Request" class="headerlink" title="server returned HTTP status 400 Bad Request"></a>server returned HTTP status 400 Bad Request</h2><p>Prometheus 配置服务自动发现监控 Kubernetes 的 Node 后，Node 状态显示为 <code>DOWN</code>，Error 为 <code>server returned HTTP status 400 Bad Request</code><br><img src="https://i.csms.tech/img_152.png"><br>这个是因为 prometheus 去发现 Node 模式的服务的时候，访问的端口默认是10250。而默认是需要认证的 https 协议才有权访问的，但实际上我们并不是希望让去访问 10250 端口的 <code>/metrics</code> 接口，而是 <code>node-exporter</code> 绑定到节点的 9100 端口，所以我们应该将这里的 10250 替换成 9100。 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[服务发现](https://www.qikqiak.com/k8strain/monitor/prometheus/#_8)
">[4]</span></a></sup></p>
<h2 id="opening-storage-failed-lock-DB-directory-resource-temporarily-unavailable"><a href="#opening-storage-failed-lock-DB-directory-resource-temporarily-unavailable" class="headerlink" title="opening storage failed: lock DB directory: resource temporarily unavailable"></a>opening storage failed: lock DB directory: resource temporarily unavailable</h2><p>Prometheus Server 无法启动，查看 Pod 日志，显示以下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs prometheus-deployment-6967df46c6-znj2k -n prometheus</span></span><br><span class="line">ts=2023-05-27T09:22:14.967Z caller=main.go:1155 level=error err=&quot;opening storage failed: lock DB directory: resource temporarily unavailable&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>解决方法</strong> ： 删除 Prometheus Server 数据目录下的 <code>lock</code> 文件，重新启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">01H1CXS2BWTCBWA08HK9EFQ0FJ  01H1DBGBZP5SF2ENGTQV1CRVNM  01H1DS7Y4HQ9NPRDXEPYPM9BD0  01H1E6Z9Z1KTWCSDW75H3JW6Q7  lock            wal</span><br><span class="line">01H1D4MMQMSZHMQ31NN976SXEX  01H1DJC6WRMKJTGSTFQX262D75  01H1E03HZG28CZKB9YM0ZQPJ57  chunks_head                 queries.active</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -rf lock</span></span><br></pre></td></tr></table></figure>

<h2 id="cAdvisor-获取-Pod-指标元数据异常"><a href="#cAdvisor-获取-Pod-指标元数据异常" class="headerlink" title="cAdvisor 获取 Pod 指标元数据异常"></a>cAdvisor 获取 Pod 指标元数据异常</h2><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos 7</li>
<li>Kubernetes 1.24</li>
<li>Prometheus 2.44.0</li>
<li>Docker Engine - Community 20.10.9</li>
<li>containerd containerd.io 1.6.9</li>
</ul>
<p>在 Prometheus UI 中查询指标 <code>container_network_transmit_bytes_total</code>，输出中没有 <code>container</code>、<code>name</code>、<code>pod</code> 等指标，甚至未输出 Pod 的网卡流量的指标。<br><img src="https://i.csms.tech/img_176.png"></p>
<p><code>container_network_transmit_bytes_total</code> 指标是 Kubelet 从 cAdvisor 中读取到的，为了排查问题出现的地方，尝试直接访问 Kubelet 获取此指标的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -k -H <span class="string">&quot;Authorization: Bearer `cat /var/run/secrets/kubernetes.io/serviceaccount/token`&quot;</span> https://172.31.26.116</span></span><br><span class="line">:10250/metrics/cadvisor | grep container_network_transmit_bytes_total</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE container_network_transmit_bytes_total counter</span></span><br><span class="line">container_network_transmit_bytes_total&#123;container=&quot;&quot;,id=&quot;/&quot;,image=&quot;&quot;,interface=&quot;cni0&quot;,name=&quot;&quot;,namespace=&quot;&quot;,pod=&quot;&quot;&#125; 7.29571749e+09 1686126675185</span><br><span class="line">container_network_transmit_bytes_total&#123;container=&quot;&quot;,id=&quot;/&quot;,image=&quot;&quot;,interface=&quot;eth0&quot;,name=&quot;&quot;,namespace=&quot;&quot;,pod=&quot;&quot;&#125; 1.639010015553e+12 1686126675185</span><br><span class="line">container_network_transmit_bytes_total&#123;container=&quot;&quot;,id=&quot;/&quot;,image=&quot;&quot;,interface=&quot;flannel.1&quot;,name=&quot;&quot;,namespace=&quot;&quot;,pod=&quot;&quot;&#125; 7.967725528e+09 1686126675185</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从结果可以看到，Kubelet 就未获取到相关指标及标签。Kubelet 是从 cAdvisor 获取到的容器的 Lables。如果是 Docker，主要是读取容器的 Inspect 信息获取标签（<code>Config.Labels</code>），检查容器的 Inspect 信息，发现是存在完整的 Lables 信息 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[cAdvisor获取Pod指标元数据异常](https://juejin.cn/post/7208349474841198650)
">[8]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker inspect 6b2b9d1b3a62</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;6b2b9d1b3a62a9d070656841aaeb1bb0c43a83025295d69ec8d47618c717290b&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2023-06-02T09:42:23.197361826Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/coredns&quot;,</span><br><span class="line">        </span><br><span class="line">        &quot;Image&quot;: &quot;sha256:a4ca41631cc7ac19ce1be3ebf0314ac5f47af7c711f17066006db82ee3b75b03&quot;,</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;coredns-6d4b75cb6d-fzxmc&quot;,</span><br><span class="line">            </span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;53/tcp&quot;: &#123;&#125;,</span><br><span class="line">                &quot;53/udp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            </span><br><span class="line">            &quot;Image&quot;: &quot;sha256:a4ca41631cc7ac19ce1be3ebf0314ac5f47af7c711f17066006db82ee3b75b03&quot;,</span><br><span class="line">            </span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;annotation.io.kubernetes.container.hash&quot;: &quot;6208af3e&quot;,</span><br><span class="line">                &quot;annotation.io.kubernetes.container.ports&quot;: &quot;[&#123;\&quot;name\&quot;:\&quot;dns\&quot;,\&quot;containerPort\&quot;:53,\&quot;protocol\&quot;:\&quot;UDP\&quot;&#125;,&#123;\&quot;name\&quot;:\&quot;dns-tcp\&quot;,\&quot;containerPort\&quot;:53,\&quot;protocol\&quot;:\&quot;TCP\&quot;&#125;,&#123;\&quot;name\&quot;:\&quot;metrics\&quot;,\&quot;containerPort\&quot;:9153,\&quot;protocol\&quot;:\&quot;TCP\&quot;&#125;]&quot;,</span><br><span class="line">                &quot;annotation.io.kubernetes.container.restartCount&quot;: &quot;11&quot;,</span><br><span class="line">                &quot;annotation.io.kubernetes.container.terminationMessagePath&quot;: &quot;/dev/termination-log&quot;,</span><br><span class="line">                &quot;annotation.io.kubernetes.container.terminationMessagePolicy&quot;: &quot;File&quot;,</span><br><span class="line">                &quot;annotation.io.kubernetes.pod.terminationGracePeriod&quot;: &quot;30&quot;,</span><br><span class="line">                &quot;io.kubernetes.container.logpath&quot;: &quot;/var/log/pods/kube-system_coredns-6d4b75cb6d-fzxmc_d46b52b3-e38d-4f57-938e-a454aa70c846/coredns/11.log&quot;,</span><br><span class="line">                &quot;io.kubernetes.container.name&quot;: &quot;coredns&quot;,</span><br><span class="line">                &quot;io.kubernetes.docker.type&quot;: &quot;container&quot;,</span><br><span class="line">                &quot;io.kubernetes.pod.name&quot;: &quot;coredns-6d4b75cb6d-fzxmc&quot;,</span><br><span class="line">                &quot;io.kubernetes.pod.namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">                &quot;io.kubernetes.pod.uid&quot;: &quot;d46b52b3-e38d-4f57-938e-a454aa70c846&quot;,</span><br><span class="line">                &quot;io.kubernetes.sandbox.id&quot;: &quot;1ce33bdb40f6498ce7bd9f61802b3b51e9e13aaf50184130a40578ef7562b5ca&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>从以上分析可以确定，问题应该是出在 cAdvisor 未获取到 Docker 容器中的 Labels 信息。</p>
<p>问题原因一直未找到，尝试 <a href="https://csms.tech/202209121102/#修改-kubelet-使用的-CRI-为-containerd">将 Kubelet 使用的 CRI 由 Docker 更改为 Containerd</a>，更改后，再次在 Prometheus UI 中查看 <code>container_network_transmit_bytes_total</code>，发现改 Containerd 作为 CRI 的 Kubelet 节点采集的指标标签中已经包含了 <code>Pod</code>、<code>namespace</code>、<code>image</code> 等标签</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://zhangquan.me/2022/09/04/shi-yong-prometheus-jian-kong-kubernetes-ji-qun-jie-dian/">使用 Prometheus 监控 Kubernetes 集群节点</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/456205833">如何部署 Prometheus 监控K8S</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://uzimihsr.github.io/post/2022-11-28-kubernetes-prometheus-kube-state-metrics-cadvisor/">Configure Prometheus for service discovery</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunlzheng.gitbook.io/prometheus-book/part-iii-prometheus-shi-zhan/readmd/service-discovery-with-kubernetes#fu-wu-fa-xian">Kubernetes 服务发现</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.qikqiak.com/k8strain/monitor/prometheus/#_8">服务发现</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/kubelet-authn-authz/#kubelet-authorization">Kubelet 鉴权</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.mydlq.club/article/123/">Kubernetes 部署告警工具 AlertManager</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/alert-manager-config">Alertmanager 配置概述</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://juejin.cn/post/7208349474841198650">cAdvisor获取Pod指标元数据异常</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/kubernetes/ingress-nginx/blob/main/deploy/prometheus/prometheus.yaml">ingress-nginx prometheus</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Pod 调度</title>
    <url>/202305221527/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>Kubernetes 1.24</li>
</ul>
<h1 id="污点和容忍度"><a href="#污点和容忍度" class="headerlink" title="污点和容忍度"></a>污点和容忍度</h1><p>默认情况下，集群中的 master 节点被设置成了污点，以确保只有控制平面的 Pod 才能调度部署到主节点上。</p>
<h2 id="显示节点的污点信息"><a href="#显示节点的污点信息" class="headerlink" title="显示节点的污点信息"></a>显示节点的污点信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe node k8s-master1</span></span><br><span class="line">Name:               k8s-master1</span><br><span class="line">Roles:              control-plane</span><br><span class="line">Labels:             beta.kubernetes.io/arch=amd64</span><br><span class="line">                    beta.kubernetes.io/os=linux</span><br><span class="line">                    kubernetes.io/arch=amd64</span><br><span class="line">                    kubernetes.io/hostname=k8s-master1</span><br><span class="line">                    kubernetes.io/os=linux</span><br><span class="line">                    node-role.kubernetes.io/control-plane=</span><br><span class="line">                    node.kubernetes.io/exclude-from-external-load-balancers=</span><br><span class="line">Annotations:        flannel.alpha.coreos.com/backend-data: &#123;&quot;VNI&quot;:1,&quot;VtepMAC&quot;:&quot;de:75:a4:67:58:1f&quot;&#125;</span><br><span class="line">                    flannel.alpha.coreos.com/backend-type: vxlan</span><br><span class="line">                    flannel.alpha.coreos.com/kube-subnet-manager: true</span><br><span class="line">                    flannel.alpha.coreos.com/public-ip: 172.31.26.116</span><br><span class="line">                    kubeadm.alpha.kubernetes.io/cri-socket: unix:///var/run/cri-dockerd.sock</span><br><span class="line">                    management.cattle.io/pod-limits: &#123;&quot;cpu&quot;:&quot;100m&quot;,&quot;memory&quot;:&quot;390Mi&quot;&#125;</span><br><span class="line">                    management.cattle.io/pod-requests: &#123;&quot;cpu&quot;:&quot;950m&quot;,&quot;memory&quot;:&quot;290Mi&quot;,&quot;pods&quot;:&quot;8&quot;&#125;</span><br><span class="line">                    node.alpha.kubernetes.io/ttl: 0</span><br><span class="line">                    volumes.kubernetes.io/controller-managed-attach-detach: true</span><br><span class="line">CreationTimestamp:  Tue, 06 Dec 2022 17:50:49 +0800</span><br><span class="line">Taints:             node-role.kubernetes.io/control-plane:NoSchedule</span><br><span class="line">                    node-role.kubernetes.io/master:NoSchedule</span><br></pre></td></tr></table></figure>
<p>Master 节点包含 2 个污点 </p>
<ul>
<li><code>node-role.kubernetes.io/control-plane:NoSchedule</code></li>
<li><code>node-role.kubernetes.io/master:NoSchedule</code></li>
</ul>
<p>这 2 个污点将阻止 Pod 调度到这个节点上面，除非有 Pod 能够容忍这个污点(Taints)，通常能容忍这个污点的都是控制平面的 Pod。</p>
<h2 id="查看-Pod-的容忍度"><a href="#查看-Pod-的容忍度" class="headerlink" title="查看 Pod 的容忍度"></a>查看 Pod 的容忍度</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe pod -n kube-system kube-proxy-2cslw</span></span><br><span class="line">...</span><br><span class="line">Tolerations:                 op=Exists</span><br><span class="line">                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists</span><br><span class="line">                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists</span><br><span class="line">                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists</span><br><span class="line">                             node.kubernetes.io/not-ready:NoExecute op=Exists</span><br><span class="line">                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists</span><br><span class="line">                             node.kubernetes.io/unreachable:NoExecute op=Exists</span><br><span class="line">                             node.kubernetes.io/unschedulable:NoSchedule op=Exists</span><br><span class="line">Events:                      &lt;none&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes Service 详解</title>
    <url>/202305030923/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Kubernetes 的 Service 代表的是 Kubernetes 后端服务的入口，它主要包含服务的访问 IP（虚拟 IP）和端口，工作在 L4.</p>
<p>Service 只存储服务的入口信息（IP:PORT），不存储后端 Pod 信息，Service 是通过 <a href="https://csms.tech/202209241108/#标签和选择算符"><code>Label Selector</code></a> 选择与之匹配的后端 Pod。当被 Service 选择的后端 Pod 运行且能正常向外提供服务时，Kubernetes 的 <code>Endpoint Controller</code> 会生成一个新的 Endpoint 对象，指向此 Pod 的 IP:PORT。Service 接收到访问请求，会将请求转发到对应的 Endpoint。同时，Service 的访问 IP 和 Endpoint&#x2F;Pod 的 IP 都会在 Kubernetes 的 DNS 服务里面进行注册以记录域名和 IP 的对应关系，因此用户可以在集群中通过域名的方式访问 Service 和 Pod。</p>
<p>用户创建 Service 后，Kubernetes 会从集群的可用服务 IP 池中为 Service 分配一个稳定的集群内访问 IP，称为 <strong>Cluster IP</strong>。Kubernetes 还会通过注册 DNS 条目为 <strong>Cluster IP</strong> 分配 <strong>域名</strong>（主机名）。<strong>Cluster IP</strong> 和 <strong>域名</strong> 在集群内是独一无二的，并且在服务的整个生命周期中保持不变，直到将 Service 从集群中删除，Kubernetes 才会释放 <strong>Cluster IP</strong> 和 <strong>域名</strong> 。通过此方法，Service 作为代理，向客户端提供了稳定不变的访问后端服务的入口。</p>
<p>Service 除了作为 <strong>代理</strong> 功能，同时也提供了 <strong>负载均衡</strong> 和 <strong>高可用</strong>。当后端的 Pod 有多个时，默认会通过 <strong>轮询</strong> 将请求流量均匀分布到多个 Pod 上，当某个 Pod 不可用是，Service 不会将请求调度到问题节点。</p>
<p>Kubernetes 使用节点上运行的 <code>kube-proxy</code> 组件管理各 Service 和后端 Pod 的连接。<code>kube-proxy</code> 是一个基于出战流量的 <strong>负载均衡控制器</strong>，它监控 Kubernetes API Service 并持续将 Service IP （ClusterIP）映射到运行状况良好的后端 Pod，具体实现是通过主机上的 <code>iptables/IPVS</code> 的规则。访问 Service 的 IP 会被这些（路由）规则直接 DNAT 到后端 Pod 的 IP。</p>
<p><a href="https://csms.tech/202209241108/#Service">Service 配置语法参考</a></p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 3.10.0-1160</li>
<li>Kubernetes v1.24.7</li>
</ul>
<h1 id="kube-proxy-iptables-模式下的规则解析"><a href="#kube-proxy-iptables-模式下的规则解析" class="headerlink" title="kube-proxy iptables 模式下的规则解析"></a>kube-proxy iptables 模式下的规则解析</h1><p>kube-proxy 默认使用 <code>iptables</code> 模式实现 Service 的代理转发和负载均衡。<a href="https://csms.tech/202209131536/#获取节点上的-kube-proxy-代理模式">检查 <code>kube-proxy</code> 使用的代理模式</a></p>
<p>本示例使用相关信息如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get services</span> </span><br><span class="line">NAME             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)     AGE</span><br><span class="line">api-service      ClusterIP   10.106.126.96    &lt;none&gt;        10302/TCP   145d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get endpoints api-service</span></span><br><span class="line">NAME          ENDPOINTS                               AGE</span><br><span class="line">api-service   10.244.3.138:10302,10.244.4.120:10302   145d</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>针对 <code>api-service</code>，后端的 Pod 就绪后，生成了 ENDPOINTS，kube-proxy 会为该服务创建以下 iptables 规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-A PREROUTING -m comment --comment &quot;kubernetes service portals&quot; -j KUBE-SERVICES</span><br><span class="line"></span><br><span class="line">-A KUBE-SERVICES -d 10.106.126.96/32 -p tcp -m comment --comment &quot;default/api-service:api-pord cluster IP&quot; -m tcp --dport 10302 -j KUBE-SVC-DVTQLPR6DVOLBZS4</span><br><span class="line"></span><br><span class="line">-A KUBE-SVC-DVTQLPR6DVOLBZS4 ! -s 10.244.0.0/16 -d 10.106.126.96/32 -p tcp -m comment --comment &quot;default/api-service:api-pord cluster IP&quot; -m tcp --dport 10302 -j KUBE-MARK-MASQ</span><br><span class="line">-A KUBE-SVC-DVTQLPR6DVOLBZS4 -m comment --comment &quot;default/api-service:api-pord -&gt; 10.244.3.138:10302&quot; -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-JXBL7O23XHVFQV2I</span><br><span class="line">-A KUBE-SVC-DVTQLPR6DVOLBZS4 -m comment --comment &quot;default/api-service:api-pord -&gt; 10.244.4.120:10302&quot; -j KUBE-SEP-BBPDSOPRICLINLPY</span><br><span class="line"></span><br><span class="line">-A KUBE-SEP-JXBL7O23XHVFQV2I -s 10.244.3.138/32 -m comment --comment &quot;default/api-service:api-pord&quot; -j KUBE-MARK-MASQ</span><br><span class="line">-A KUBE-SEP-JXBL7O23XHVFQV2I -p tcp -m comment --comment &quot;default/api-service:api-pord&quot; -m tcp -j DNAT --to-destination 10.244.3.138:10302</span><br><span class="line"></span><br><span class="line">-A KUBE-SEP-BBPDSOPRICLINLPY -s 10.244.4.120/32 -m comment --comment &quot;default/api-service:api-pord&quot; -j KUBE-MARK-MASQ</span><br><span class="line">-A KUBE-SEP-BBPDSOPRICLINLPY -p tcp -m comment --comment &quot;default/api-service:api-pord&quot; -m tcp -j DNAT --to-destination 10.244.4.120:10302</span><br><span class="line"></span><br><span class="line">-A POSTROUTING -m comment --comment &quot;flanneld masq&quot; -j FLANNEL-POSTRTG</span><br><span class="line">-A POSTROUTING -m comment --comment &quot;kubernetes postrouting rules&quot; -j KUBE-POSTROUTING-A FLANNEL-POSTRTG -m mark --mark 0x4000/0x4000 -m comment --comment &quot;flanneld masq&quot; -j RETURN</span><br><span class="line">-A FLANNEL-POSTRTG -s 10.244.0.0/16 -d 10.244.0.0/16 -m comment --comment &quot;flanneld masq&quot; -j RETURN</span><br><span class="line">-A FLANNEL-POSTRTG -s 10.244.0.0/16 ! -d 224.0.0.0/4 -m comment --comment &quot;flanneld masq&quot; -j MASQUERADE</span><br><span class="line">-A FLANNEL-POSTRTG ! -s 10.244.0.0/16 -d 10.244.3.0/24 -m comment --comment &quot;flanneld masq&quot; -j RETURN</span><br><span class="line">-A FLANNEL-POSTRTG ! -s 10.244.0.0/16 -d 10.244.0.0/16 -m comment --comment &quot;flanneld masq&quot; -j MASQUERADE</span><br><span class="line"></span><br><span class="line">-A KUBE-POSTROUTING -m mark ! --mark 0x4000/0x4000 -j RETURN</span><br><span class="line">-A KUBE-POSTROUTING -j MARK --set-xmark 0x4000/0x0</span><br><span class="line">-A KUBE-POSTROUTING -m comment --comment &quot;kubernetes service traffic requiring SNAT&quot; -j MASQUERADE</span><br></pre></td></tr></table></figure>
<p>具体工作流程如下：</p>
<ol>
<li>所有进入 <code>PREROUTING</code> 链的流量会被跳转到 <code>KUBE-SERVICES</code> 自定义链</li>
<li>本示例中请求 <code>api-service</code> 的访问数据包（目的地址为 <code>10.106.126.96:10302</code>）在 <code>PREROUTING</code> 链中被 <code>-d 10.106.126.96/32 -p tcp -m comment --comment &quot;default/api-service:api-pord cluster IP&quot; -m tcp --dport 10302</code> 匹配到，根据规则跳转到自定义链 <code>KUBE-SVC-DVTQLPR6DVOLBZS4</code></li>
<li>在自定义链 <code>KUBE-SVC-DVTQLPR6DVOLBZS4</code> 中，实现了负载均衡，一半的流量会被跳转到链 <code>KUBE-SEP-JXBL7O23XHVFQV2I</code>，另一半的流量会被跳转到 <code>KUBE-SEP-BBPDSOPRICLINLPY</code></li>
<li>在自定义链 <code>KUBE-SEP-JXBL7O23XHVFQV2I</code> 和 <code>KUBE-SEP-BBPDSOPRICLINLPY</code> 中，流量分别被 DNAT 分配到了后端的 Pod（就绪的 Endpoints）。</li>
<li>Pod 处理完数据请求，向客户端返回请求结果时，在 <code>POSTROUTING</code> 链上要对数据包做 SNAT 处理，以确保客户端接收到的数据包的源地址是其发送请求时的目标地址。</li>
</ol>
<p>通过以上 kube-proxy 管理的规则，Service 实现了对后端 Pod 的服务代理及负载均衡功能。</p>
<p>综上所述，iptables 模式最主要的链是 <code>KUBE-SERVICES</code> 、<code>KUBE-SVC-*</code>、<code>KUBE-SEP-*</code></p>
<ul>
<li><code>KUBE-SERVICES</code> - 访问集群服务的数据包入口，它会根据匹配到的目标 IP:PORT 将数据包分发到相应的链 <code>KUBE-SVC-*</code></li>
<li><code>KUBE-SVC-*</code> - 相当于一个负载均衡器，它会将数据包平均分配到 <code>KUBE-SEP-*</code> 链。每个 <code>KUBE-SVC-*</code> 链后面的 <code>KUBE-SEP-*</code> 链的数量和 Service 后端就绪的 Pod 数量一致。</li>
<li><code>KUBE-SEP-*</code> - 通过 DNAT 将数据包的目的地址（IP:PORT）修改为后端就绪的 Pod 的 IP:PORT，从而将流量转发到相应的 Pod</li>
</ul>
<p><code>kube-proxy</code> 的 iptables 模式因为使用 DNAT 转发数据包，存在一定的性能损耗，另外，当集群中的 Service 数量上万时，节点上的 iptables rules 会非常庞大，对管理是个不小的负担，性能也会大打折扣。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes 理论知识点汇总</title>
    <url>/202401101016/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Kubernetes 1.29</li>
</ul>
<h1 id="kubeadm-初始化集群"><a href="#kubeadm-初始化集群" class="headerlink" title="kubeadm 初始化集群"></a>kubeadm 初始化集群</h1><h2 id="Network-setup"><a href="#Network-setup" class="headerlink" title="Network setup"></a>Network setup</h2><h3 id="组件的-advertise-IP-地址选择"><a href="#组件的-advertise-IP-地址选择" class="headerlink" title="组件的 advertise IP 地址选择"></a>组件的 advertise IP 地址选择</h3><p>Kubernetes 中的组件（如 <code>Kubeadm</code>、<code>Kube-apiserver</code> 等）在初始化启动时，都需要在节点（主机）上找到一个合适的 IP 作为组件的 <code>advertising</code>&#x2F;<code>listening</code> 的地址。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Network setup](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#network-setup)">[1]</span></a></sup></p>
<p>默认情况下，此 IP 是主机上默认路由对应的网卡所在的 IP。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ip route show</span></span><br><span class="line">default via 172.31.16.1 dev eth0 </span><br><span class="line">10.244.1.0/24 via 10.244.1.0 dev flannel.1 onlink </span><br><span class="line">10.244.2.0/24 via 10.244.2.0 dev flannel.1 onlink </span><br><span class="line">10.244.3.0/24 via 10.244.3.0 dev flannel.1 onlink </span><br><span class="line">10.244.4.0/24 via 10.244.4.0 dev flannel.1 onlink </span><br><span class="line">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 </span><br><span class="line">172.31.16.0/20 dev eth0 proto kernel scope link src 172.31.26.11</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果系统上有多个默认路由，组件会尝试使用第一个默认路由对应的网卡所在的 IP。<strong>如果系统上没有默认路由，并且未明确为组件配置 IP，组件会初始化失败并退出</strong></p>
</blockquote>
<p>组件选择的 IP 地址将会作为 X.509 证书的 SAN(Subject Alternative Name) 的一部分。因此在系统初始化运行之后修改 IP 需要重新签发证书并重启相关组件。</p>
<h3 id="Pod-网段选择"><a href="#Pod-网段选择" class="headerlink" title="Pod 网段选择"></a>Pod 网段选择</h3><p>Pod 的网段必须不能和主机网络重叠，如果选用的网络插件的网络和主机的网段重叠，必须为网络插件选择合适的和主机不同的网段，在集群初始化时通过参数 <code>--pod-network-cidr</code> 配置，并在安装网络插件时在其 YAML 文件中修改为对应的网段。 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Installing a Pod network add-on](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network)">[4]</span></a></sup></p>
<h2 id="control-plane-endpoint-参数说明"><a href="#control-plane-endpoint-参数说明" class="headerlink" title="control-plane-endpoint 参数说明"></a>control-plane-endpoint 参数说明</h2><p><code>--control-plane-endpoint</code> 选项用来配置 <code>api-server</code> 的共享地址，可以是域名或者负载均衡器的 IP。 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Initializing your control-plane node](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node)">[2]</span></a></sup></p>
<p><em><strong>如果是单主节点的 Kubernetes 集群，想要扩展成为多个 Master 节点（高可用），初始化时没有 <code>--control-plane-endpoint</code>，是不被支持的。</strong></em></p>
<p>因此为了后期可以由单个 Master 节点扩展为多个 Master 节点，即高可用，初始化节点时，建议加上此选项配置 <code>api-server</code> 的负载均衡地址。 </p>
<p>&lt;– more –&gt;</p>
<h2 id="admin-conf-的重要性"><a href="#admin-conf-的重要性" class="headerlink" title="admin.conf 的重要性"></a>admin.conf 的重要性</h2><p><code>kubeadm init</code> 初始化集群成功后，会产生一个 <code>kubeconfig</code> 文件 <code>/etc/kubernetes/admin.conf</code>，此配置中包含了一个绑定到 <code>cluster-admin</code> 的 ClusterRole 的组，其拥有对整个集群的控制权，<em><strong>不要将其共享给任何人</strong></em>。<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[admin.conf](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#more-information)">[3]</span></a></sup></p>
<p><code>kubeadm init</code> 初始化集群成功后，同时会生成一个名为 <code>super-admin.conf</code> 的 <code>kubeconfig</code> 文件，其中配置的超级用户可以跳过 <code>authorization layer</code>，比如 RBAC。<em><strong>不要将其共享给任何人</strong></em>。建议将其保存在一个安全的位置。</p>
<h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><h2 id="节点名称"><a href="#节点名称" class="headerlink" title="节点名称"></a>节点名称</h2><p>在 Kubernetes 集群中，节点名称（Node Name）唯一的标识一个节点。在一个集群中，不能有多个名称一样的节点，<strong>Kubernetes 系统默认同一个 <em>节点名（Node Name）</em> 的实例将具有同样的一个状态和属性</strong> <sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Node name uniqueness](https://kubernetes.io/docs/concepts/architecture/nodes/#node-name-uniqueness)">[7]</span></a></sup></p>
<h2 id="配置节点为不可调度"><a href="#配置节点为不可调度" class="headerlink" title="配置节点为不可调度"></a>配置节点为不可调度</h2><p>将节点标记为 <strong>不可调度（unschedulable ）</strong> 会阻止系统调度新的 Pod 到节点上，但是不会影响节点上已有的 Pod。</p>
<h1 id="Labels-Selectors-Annotations"><a href="#Labels-Selectors-Annotations" class="headerlink" title="Labels Selectors Annotations"></a>Labels Selectors Annotations</h1><p>Label 主要用来给 Kubernetes 中的对象添加 <em><strong>可识别属性</strong></em>。 Label 可以提供高效的查询和匹配以选择 Kubernetes 中的对象，Lables 可以在对象创建时或者运行过程中随时做变更。</p>
<p><strong>不具有识别属性的信息</strong> 不建议用作 Labels，而是应该写入 Annotations 中。<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)">[5]</span></a></sup></p>
<p>Label Key 由 2 部分构成：</p>
<ul>
<li>（可选的）前缀。系统组件（如 <code>kube-scheduler</code>, <code>kube-controller-manager</code>, <code>kube-apiserver</code>, <code>kubectl</code>） 或者第三方自动化组件为对象添加 labels 时必须带有前缀（prefix）。<code>kubernetes.io/</code> and <code>k8s.io/</code> 是为 Kubernetes 核心系统保留的前缀</li>
<li>（必须的）名字。<blockquote>
<p>Annotations 的 Key 命名规则和 Label Key 基本一致 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Annotations Key Syntax and character set](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set)">[6]</span></a></sup></p>
</blockquote>
</li>
</ul>
<p><a href="https://csms.tech/202209241108/#标签和选择算符">Label select 用法说明</a></p>
<h1 id="集群间通讯流量说明"><a href="#集群间通讯流量说明" class="headerlink" title="集群间通讯流量说明"></a>集群间通讯流量说明</h1><h2 id="API-Server-到-kubelet"><a href="#API-Server-到-kubelet" class="headerlink" title="API Server 到 kubelet"></a>API Server 到 kubelet</h2><p>API Server 请求 <code>kubelet</code> 的主要目的包括： <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[API server to kubelet](https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/#api-server-to-kubelet)">[8]</span></a></sup></p>
<ul>
<li>获取到 Pods 的日志</li>
<li>（比如使用 <code>kubectl</code>） Attach 到 Pods 中的容器</li>
<li>提供 <code>kubelet</code> 的端口转发功能。</li>
</ul>
<blockquote>
<p> 默认情况下，API 服务器不检查 <code>kubelet</code> 的服务证书。这使得此类连接容易受到中间人攻击， 在非受信网络或公开网络上运行也是 <strong>不安全的</strong>。<br>为了对这个连接进行认证，使用 <code>--kubelet-certificate-authority</code> 标志给 API 服务器提供一个根证书包，用于 <code>kubelet</code> 的服务证书。</p>
</blockquote>
<h2 id="API-Server-到-nodes-pods-和-services"><a href="#API-Server-到-nodes-pods-和-services" class="headerlink" title="API Server 到 nodes, pods 和 services"></a>API Server 到 nodes, pods 和 services</h2><p>从 API 服务器到节点、Pod 或服务的连接默认为纯 HTTP 方式，因此既没有认证，也没有加密。 这些连接可通过给 API URL 中的节点、Pod 或服务名称添加前缀 https: 来运行在安全的 HTTPS 连接上。 不过这些连接既不会验证 HTTPS 末端提供的证书，也不会提供客户端证书。 因此，虽然连接是加密的，仍无法提供任何完整性保证。 这些连接 目前还不能安全地 在非受信网络或公共网络上运行。 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[API server to kubelet](https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/#api-server-to-kubelet)">[8]</span></a></sup></p>
<p>Kubernetes 支持使用 <a href="https://www.ssh.com/academy/ssh/tunneling">SSH tunnels</a> 来加密从 API 到 nodes 的链接（目前已经处于废弃状态，推荐使用 <a href="https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/#konnectivity-service">Konnectivity service</a> 替代）。</p>
<h1 id="Leases"><a href="#Leases" class="headerlink" title="Leases"></a>Leases</h1><p>Kubernetes 使用 Lease API 来更新 <code>kubelet</code> 发送到 Kubernetes API Server 的心跳信息。Kubernetes 中的每一个节点在 <code>kube-node-lease</code> Namespace 中都有一个 <code>Lease</code> Object。<code>kubelet</code> 向系统上报心跳的过程，就是在更新对应的 <code>Lease</code> Object 的 <code>spec.renewTime</code> 字段，Kubernetes 控制平面会使用这个上报的时间戳来决定节点是否可用 <sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Node heartbeats](https://kubernetes.io/docs/concepts/architecture/leases/#node-heart-beats)">[9]</span></a></sup> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe lease -n kube-node-lease k8s-admin</span></span><br><span class="line">Name:         k8s-node1</span><br><span class="line">Namespace:    kube-node-lease</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">API Version:  coordination.k8s.io/v1</span><br><span class="line">Kind:         Lease</span><br><span class="line">Metadata:</span><br><span class="line">  Creation Timestamp:  2023-09-07T09:54:15Z</span><br><span class="line">  Managed Fields:</span><br><span class="line">    API Version:  coordination.k8s.io/v1</span><br><span class="line">    Fields Type:  FieldsV1</span><br><span class="line">	...</span><br><span class="line">  Owner References:</span><br><span class="line">    API Version:     v1</span><br><span class="line">    Kind:            Node</span><br><span class="line">    Name:            k8s-node1</span><br><span class="line">    UID:             db3dafee-1232-4c07-a1c6-524f86a96fbe</span><br><span class="line">  Resource Version:  46696081</span><br><span class="line">  UID:               053d9b79-81be-4f3f-801e-09192012c822</span><br><span class="line">Spec:</span><br><span class="line">  Holder Identity:         k8s-node1</span><br><span class="line">  Lease Duration Seconds:  40</span><br><span class="line">  Renew Time:              2024-02-03T02:30:11.760176Z</span><br><span class="line">Events:                    &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>Leases 也被用来确保 HA 的组件（类似 <code>kube-controller-manager</code> 和 <code>kube-scheduler</code>）在同一时刻只有一个实例提供服务，其他实例处于备用状态 <sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Node heartbeats](https://kubernetes.io/docs/concepts/architecture/leases/#node-heart-beats)">[9]</span></a></sup></p>
<h1 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h1><h2 id="串行和并行拉取镜像"><a href="#串行和并行拉取镜像" class="headerlink" title="串行和并行拉取镜像"></a>串行和并行拉取镜像</h2><p>Kubelet 默认（同一个节点）串行的拉取镜像，即同一时间只发送一个拉取镜像的请求到 Registry Server，其他的拉取镜像的请求保持等待，直到当前请求处理完成。多个节点上的镜像拉取请求是隔离的，即不同的节点在同一时间是并行的拉取镜像的。 <sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Serial and parallel image pulls](https://kubernetes.io/docs/concepts/containers/images/#serial-and-parallel-image-pulls)">[10]</span></a></sup></p>
<p>如果要配置一个节点上的 Kubelet 并行的拉取镜像，可以在 kubelet 的配置中配置 <code>serializeImagePulls</code> 为 <code>false</code>，前提是 Registry Server 和 CRI 支持并行拉取镜像。  </p>
<h1 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h1><h2 id="Pod-状态"><a href="#Pod-状态" class="headerlink" title="Pod 状态"></a>Pod 状态</h2><p>Pod 的状态字段（<code>status</code>） 是一个 <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.29/#podstatus-v1-core">PodStatus</a> Object。其中包含 <code>phase</code> 字段。<code>phase</code> 字段描述&#x2F;记录了 Pod 在其整个生命周期中所处的阶段 <sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Pod phase](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase)">[11]</span></a></sup></p>
<p><code>phase</code> 字段可以有以下值：</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>Pending</code></td>
<td>Kubernetes 集群已经接收到创建 Pod 的请求，并且开始调度到节点、下载容器镜像并启动容器，但是有一个或多个容器还未正常运行</td>
</tr>
<tr>
<td><code>Running</code></td>
<td>Pod 已经被调度到某个节点，并且 Pod 中所有的容器已经被创建，至少其中的一个容器已经处于运行状态或重启中</td>
</tr>
<tr>
<td><code>Succeeded</code></td>
<td>Pod 中所有的容器都已经成功终止，并且不会再被重启</td>
</tr>
<tr>
<td><code>Failed</code></td>
<td>Pod 中所有的容器都被终止，但至少有一个容器终止失败，也就是说，容器要么以非零状态码退出或者是被系统终止</td>
</tr>
<tr>
<td><code>Unknow</code></td>
<td>因为某些原因，Pod 的状态获取不到。这个经常发生在和 Pod 运行的节点通信异常时</td>
</tr>
</tbody></table>
<h3 id="Pod-中的容器的状态"><a href="#Pod-中的容器的状态" class="headerlink" title="Pod 中的容器的状态"></a>Pod 中的容器的状态</h3><p>Kubernetes 会跟踪 Pod 中每个容器的状态。一旦通过 Scheduler 将 Pod 分配到某个 Node，Kubernetes 会通过 CRI 创建 Pod 中的容器。</p>
<p>在 Kubernetes 中，容器可以有以下 3 种状态 <sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Pod phase](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase)">[11]</span></a></sup></p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>Waiting </code></td>
<td>表示容器正在进行必要的操作以正常启动，比如拉取镜像、应用 Secret 数据等。当容器处于此状态时，可以通过 <code>kubectl describe pod</code> 查看输出中对应容器的信息，一般会包含一个 <code>Reason </code> 字段简述 <code>Waiting</code> 的原因</td>
</tr>
<tr>
<td><code>Running</code></td>
<td>表示容器在正常运行</td>
</tr>
<tr>
<td><code>Terminated</code></td>
<td>表示容器运行结束或者因为某些原因失败。详细信息可以通过 <code>kubectl describe pod</code> 查看</td>
</tr>
</tbody></table>
<h1 id="QoS"><a href="#QoS" class="headerlink" title="QoS"></a>QoS</h1><p>Kubernetes 会根据 Pod 定义中的 <code>resource requests and limits</code> 将 Pod 划归到某一个 QoS 类中，Kubernetes 将会根据 QoS 类来决定在节点资源不足的情况下，哪些 Pod 将会被优先驱逐（Evict）。目前存在的 QoS 类主要有以下三个 <sup id="fnref:12"><a href="#fn:12" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Quality of Service](https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/)">[12]</span></a></sup></p>
<table>
<thead>
<tr>
<th>QoS Class</th>
<th>说明</th>
<th>被驱逐权重</th>
</tr>
</thead>
<tbody><tr>
<td><code>Guaranteed</code></td>
<td>Pod 中的 <strong>每个容器必须定义</strong> CPU &amp; Mem <code>request</code> 和 <code>limit</code>，并且 <code>request</code> 的值等于 <code>limit</code> 的值，确保系统会预留定义的资源给 Pod 和其中的容器</td>
<td>最后被驱逐</td>
</tr>
<tr>
<td><code>Burstable</code></td>
<td>Pod 中 <strong>至少有一个容器定义了</strong> CPU <em><strong>或</strong></em> Mem 的 <code>request</code>。可以不定义 <code>limit</code>， <strong>如果未定义 <code>limit</code>，默认可以使用节点上所有可用的资源</strong>。</td>
<td>中间级别</td>
</tr>
<tr>
<td><code>BestEffort</code></td>
<td>未定义任何 CPU <em><strong>或</strong></em> Mem 的 <code>request</code> 或   <code>limit</code></td>
<td>最先被驱逐</td>
</tr>
</tbody></table>
<blockquote>
<p>Memory QoS 基于系统内核的 cgroup v2 实现 <sup id="fnref:12"><a href="#fn:12" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Quality of Service](https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/)">[12]</span></a></sup></p>
<p>Pod 中如果有个容器因为 Limit 被 kill，系统只会 kill 掉这一个容器并重启之，不会影响其他容器</p>
</blockquote>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#network-setup">Network setup</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node">Initializing your control-plane node</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#more-information">admin.conf</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network">Installing a Pod network add-on</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/">Labels and Selectors</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set">Annotations Key Syntax and character set</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/architecture/nodes/#node-name-uniqueness">Node name uniqueness</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/#api-server-to-kubelet">API server to kubelet</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/architecture/leases/#node-heart-beats">Node heartbeats</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/containers/images/#serial-and-parallel-image-pulls">Serial and parallel image pulls</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase">Pod phase</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/">Quality of Service</a><a href="#fnref:12" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kibana 管理操作</title>
    <url>/202307281401/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Kibana 8.8</li>
</ul>
<h1 id="Space-管理"><a href="#Space-管理" class="headerlink" title="Space 管理"></a>Space 管理</h1><p><a href="https://www.elastic.co/guide/en/kibana/8.8/tutorial-secure-access-to-kibana.html#_create_a_space">创建 Space 参考</a></p>
<p><em><strong>space 不能隔离 <code>role</code> 和 <code>user</code>，这属于 Elasticsearch 的安全功能，<code>role</code> 和 <code>user</code> 对整个 Kibana 实例都可见，不与特定的 space 关联。也不能隔离 index，因为这是 Elasticsearch 中的资源</strong></em></p>
<p>space 隔离以下资源：</p>
<ul>
<li><code>data view</code> - 不同 space 中的 <code>data view</code> 互不可见。</li>
<li>Dashboard</li>
</ul>
<h1 id="Roles-管理"><a href="#Roles-管理" class="headerlink" title="Roles 管理"></a>Roles 管理</h1><p><a href="https://www.elastic.co/guide/en/kibana/8.8/tutorial-secure-access-to-kibana.html#_create_a_role">创建 role 参考</a></p>
<p>内置 role：</p>
<ul>
<li><code>view</code> - 此角色拥有对所有 Kibana space 的 <em><strong>只读权限</strong></em>。如果想要创建对 Kibana 所有 space 拥有只读权限的用户，只需要将用户绑定到此角色即可。</li>
</ul>
<h1 id="Users-管理"><a href="#Users-管理" class="headerlink" title="Users 管理"></a>Users 管理</h1><p><a href="https://www.elastic.co/guide/en/kibana/8.8/tutorial-secure-access-to-kibana.html#_create_a_role">创建 role 参考</a></p>
<h2 id="创建只读用户"><a href="#创建只读用户" class="headerlink" title="创建只读用户"></a>创建只读用户</h2><p>Kibana 内置的 <code>view</code> 角色拥有对所有 Kibana space 的 <em><strong>只读权限</strong></em>。如果想要创建 <strong>对 Kibana 所有 space 拥有只读权限</strong> 的用户，只需要将用户绑定到此角色即可。</p>
<p>如果需要创建对特定 space 拥有只读权限的用户，可以参考以下步骤：</p>
<ol>
<li>创建针对特定 space 具有只读权限的 role，如下图，创建 <code>ops</code> space 拥有只读权限的 role<br> <img src="https://i.csms.tech/img_208.png"></li>
<li>创建用户并绑定到新建的 role<br> <img src="https://i.csms.tech/img_209.png"></li>
</ol>
<h1 id="data-view"><a href="#data-view" class="headerlink" title="data view"></a>data view</h1><p><a href="https://www.elastic.co/guide/en/kibana/8.8/data-views.html">创建 data view</a></p>
<h1 id="Discover-管理"><a href="#Discover-管理" class="headerlink" title="Discover 管理"></a>Discover 管理</h1><h2 id="修改-Discover-中默认显示的最大文档数量"><a href="#修改-Discover-中默认显示的最大文档数量" class="headerlink" title="修改 Discover 中默认显示的最大文档数量"></a>修改 Discover 中默认显示的最大文档数量</h2><p>Discover 中默认最多显示 500 条文档，如果 Elasticsearch 中索引的文档数量超过500，默认不显示，也无法通过 Kibana 搜索到。要修改此值，参考以下步骤</p>
<ol>
<li>找到 Discover 页面的右上角的 <code>Options</code> 按钮，点击弹出的 <code>View Discover settings</code><br><img src="https://i.csms.tech/img_210.png"></li>
<li>在 <code>Space Settings</code> 中，找到选项 <code>Maximum rows per table</code>，起默认值为 <code>500</code>，修改此值<br><img src="https://i.csms.tech/img_211.png"></li>
</ol>
<h1 id="KQL"><a href="#KQL" class="headerlink" title="KQL"></a>KQL</h1><p>KQL（Kibana Query Language）是 Kibana 中用于进行查询的查询语言。KQL 可以帮助用户在 Kibana 的 “Discover”（发现）页面、”Visualize”（可视化）页面以及 “Dashboard”（仪表盘）页面等地方快速构建查询，并过滤和分析数据。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.elastic.co/guide/en/kibana/8.8/tutorial-secure-access-to-kibana.html">Kibana 官方文档</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>kibana 配置说明</title>
    <url>/202307251443/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Kibana 8.8</li>
</ul>
<h1 id="常用概念"><a href="#常用概念" class="headerlink" title="常用概念"></a>常用概念</h1><h2 id="Spaces"><a href="#Spaces" class="headerlink" title="Spaces"></a>Spaces</h2><p>在 Kibana 中，一个 space 相当于一个新的的 Kibana 实例，它分割了 Kibana 中的资源，使它和其他 space 隔离。 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Securing access to Kibana](https://www.elastic.co/guide/en/kibana/current/tutorial-secure-access-to-kibana.html)">[3]</span></a></sup></p>
<p>Kibana 默认的 Space 为 <code>Default</code></p>
<h2 id="Roles"><a href="#Roles" class="headerlink" title="Roles"></a>Roles</h2><p><code>Roles</code> 是一个权限集，可以将 Roles 分配给 <em>users</em>、*<code>system accounts</code>*。可以自定义 roles，或者使用系统内置的 roles。以下是一些常用的 <em>built-in roles</em></p>
<ul>
<li><code>kibana_admin</code> - 超级管理员组，绑定到这个组的用户对 Kibana 拥有完全权限，包括管理 Spaces</li>
</ul>
<h2 id="Users"><a href="#Users" class="headerlink" title="Users"></a>Users</h2><p><em>user</em> 可以绑定到一个或者多个 <em>roles</em>，</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h2><p>添加 yum 源，和 Elasticsearch、Logstash 使用同一个源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/yum.repos.d/elk.repo</span></span><br><span class="line">[kibana-8.x]</span><br><span class="line">name=Kibana repository for 8.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/8.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install kibana</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl <span class="built_in">enable</span> --now kibana</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>Kibana 主要的启动时配置文件为 <code>/etc/kibana/kibana.yml</code>。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[kibana 配置选项列表](https://www.elastic.co/guide/en/kibana/current/settings.html)">[1]</span></a></sup></p>
<p><em><strong>默认使用端口 5601</strong></em></p>
<p>配置汇总说明</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>server.host</code></td>
<td>监听的 IP，默认为 <code>localhost</code>，要监听所有 IP，可以使用 <code>0.0.0.0</code></td>
<td></td>
</tr>
<tr>
<td><code>server.port</code></td>
<td>Kibana 服务端口，默认 5601</td>
<td></td>
</tr>
<tr>
<td><code>server.name</code></td>
<td>Kibana 实例的标识，默认为 <em>主机名</em></td>
<td></td>
</tr>
<tr>
<td><code>elasticsearch.hosts</code></td>
<td>Elasticsearch 实例的访问地址，列表中的 Es 地址必须同属一个集群，默认为 <code>http://localhost:9200</code></td>
<td></td>
</tr>
<tr>
<td><code>elasticsearch.username</code><br/><code>elasticsearch.password</code></td>
<td>Elasticsearch 用户密码</td>
<td></td>
</tr>
</tbody></table>
<p>Kibana 服务启动后，可以通过 endpoint <code>http://localhost:5601/status</code> 查看 Kibana 状态 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Access Kibana](https://www.elastic.co/guide/en/kibana/current/access.html#status)">[2]</span></a></sup><br><img src="https://i.csms.tech/img_206.png"></p>
<p>Endpoint <code>http://localhost:5601/api/status</code> 列出了 JSON 格式的 Kibana 状态数据。</p>
<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="配置超级管理员账号登陆"><a href="#配置超级管理员账号登陆" class="headerlink" title="配置超级管理员账号登陆"></a>配置超级管理员账号登陆</h2><p>默认情况下，Kibana 没有预设管理员账号，在安装和启动 Kibana 后，可以通过 kibana 的身份验证和授权机制来设置管理员账号，Kibana 支持多种身份验证和授权机制，包括基于用户名密码的本地认证、Elasticsearch 的本地用户和角色、以及其他外部认证提供者</p>
<h3 id="Elasticsearch-本地用户认证"><a href="#Elasticsearch-本地用户认证" class="headerlink" title="Elasticsearch 本地用户认证"></a>Elasticsearch 本地用户认证</h3><p>此种认证方式下，Kibana 使用 Elasticsearch 中的用户身份来验证和授权。默认情况下，Elasticsearch 中已经为 Kibana 内置了用户和组。可以直接使用 Elasticsearch 中内置的用户 <code>kibana_system</code> 来认证登陆 Kibana</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -u elastic:password1 -XGET <span class="string">&quot;http://localhost:9200/_security/user?pretty&quot;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;elastic&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;elastic&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;superuser&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;kibana&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;kibana&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;kibana_system&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_deprecated_reason&quot; : &quot;Please use the [kibana_system] user instead.&quot;,</span><br><span class="line">      &quot;_deprecated&quot; : true,</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;kibana_system&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;kibana_system&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;kibana_system&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;logstash_system&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;logstash_system&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;logstash_system&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;beats_system&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;beats_system&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;beats_system&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;apm_system&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;apm_system&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;apm_system&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;remote_monitoring_user&quot; : &#123;</span><br><span class="line">    &quot;username&quot; : &quot;remote_monitoring_user&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">      &quot;remote_monitoring_collector&quot;,</span><br><span class="line">      &quot;remote_monitoring_agent&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;full_name&quot; : null,</span><br><span class="line">    &quot;email&quot; : null,</span><br><span class="line">    &quot;metadata&quot; : &#123;</span><br><span class="line">      &quot;_reserved&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;enabled&quot; : true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置 Kibana 配置文件中的 <code>elasticsearch.username</code> 和 <code>elasticsearch.password</code> 后重启 Kibana，重新登陆，需要账号密码。输入 Elasticsearch 中已有的账号密码或者 Kibana 中创建的账号和密码即可认证登陆 Kibana</p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="License-is-not-available"><a href="#License-is-not-available" class="headerlink" title="License is not available"></a>License is not available</h2><p>Kibana 异常，查看服务日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl status -l kibana</span></span><br><span class="line">**kibana[29149]: [2023-07-28T09:45:37.505+08:00][ERROR][plugins.security.authentication] License is not available, authentication is not possible.</span><br><span class="line">kibana[29149]: [2023-07-28T09:45:37.506+08:00][WARN ][plugins.licensing] License information could not be obtained from Elasticsearch due to ResponseError: security_exception</span><br><span class="line">kibana[29149]: Root causes:</span><br><span class="line">kibana[29149]: security_exception: missing authentication credentials for REST request [/_xpack] error</span><br><span class="line">kibana[29149]: [2023-07-28T09:45:58.352+08:00][WARN ][plugins.licensing] License information could not be obtained from Elasticsearch due to ResponseError: security_exception</span><br><span class="line">kibana[29149]: Root causes:</span><br><span class="line">kibana[29149]: security_exception: missing authentication credentials for REST request [/_xpack] error</span><br><span class="line">kibana[29149]: [2023-07-28T09:45:59.656+08:00][WARN ][plugins.licensing] License information could not be obtained from Elasticsearch due to ResponseError: security_exception</span><br><span class="line">kibana[29149]: Root causes:</span><br><span class="line">kibana[29149]: security_exception: missing authentication credentials for REST request [/_xpack] error**</span><br></pre></td></tr></table></figure>
<p><em><strong>错误原因</strong></em> <a href="https://csms.tech/202307171638/#安全相关配置">Elasticsearch 启用了安全特性</a>，Kibana 中未配置登陆 Elasticsearch 时的认证信息。<a href="#Elasticsearch-%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81">参考配置 Kibana 通过 Elasticsearch 认证登陆</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.elastic.co/guide/en/kibana/current/settings.html">kibana 官网</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/kibana/current/settings.html">kibana 配置选项列表</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/kibana/current/access.html#status">Access Kibana</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/kibana/current/tutorial-secure-access-to-kibana.html">Securing access to Kibana</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes 安装配置</title>
    <url>/202209121102/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/">Kubernetes 官网文档</a></p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 5.4.212-1</li>
<li>Docker 20.10.18</li>
<li>containerd.io-1.6.8</li>
<li>kubectl-1.24.7</li>
<li>kubeadm-1.24.7</li>
<li>kubelet-1.24.7</li>
</ul>
<h1 id="kubernetes-环境安装前配置"><a href="#kubernetes-环境安装前配置" class="headerlink" title="kubernetes 环境安装前配置"></a>kubernetes 环境安装前配置</h1><h2 id="升级内核版本"><a href="#升级内核版本" class="headerlink" title="升级内核版本"></a>升级内核版本</h2><p>Centos 7 默认的内核版本 3.10 在运行 kubernetes 时存在不稳定性，建议升级内核版本到新版本</p>
<a href="/202209140931/" title="Centos 7 升级内核">Centos 7 升级内核</a>

<blockquote>
<ul>
<li><p>Centos 7 默认的内核版本 3.10 使用的 cgroup 版本为 v1，Kubernetes 的部分功能必须使用 <code>cgroup v2</code> 来进行增强的资源管理和隔离 <sup id="fnref:13"><a href="#fn:13" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[About cgroup v2](https://kubernetes.io/docs/concepts/architecture/cgroups/)">[13]</span></a></sup></p>
<p>使用以下命令检查系统使用的 <code>cgroup</code> 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stat -fc %T /sys/fs/cgroup/</span><br></pre></td></tr></table></figure>
<p>如果输出是 <code>cgroup2fs</code>，<strong>表示使用 cgroup v2</strong></p>
<p>如果输出是 <code>tmpfs</code>，<strong>表示使用 cgroup v1</strong></p>
</li>
<li><p><code>User Namespaces</code> 功能需要 Linux 6.3 以上版本，<code>tmpfs</code> 才能支持 <code>idmap</code> 挂载。并且其他功能（如 ServiceAccount 的挂载）也需要此功能的支持 <sup id="fnref:14"><a href="#fn:14" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[User Namespaces](https://kubernetes.io/docs/concepts/workloads/pods/user-namespaces/)">[14]</span></a></sup></p>
</li>
</ul>
</blockquote>
<h2 id="关闭-SELinux"><a href="#关闭-SELinux" class="headerlink" title="关闭 SELinux"></a>关闭 SELinux</h2><p>kubernetes 目前未实现对 SELinux 的支持，因此必须要关闭 SELinux</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo setenforce 0</span><br><span class="line">sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=disabled/&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure>

<h2 id="集群中所有计算机之间具有完全的网络连接"><a href="#集群中所有计算机之间具有完全的网络连接" class="headerlink" title="集群中所有计算机之间具有完全的网络连接"></a>集群中所有计算机之间具有完全的网络连接</h2><p>配置集群所有节点的防火墙，确保所有集群节点之间具有完全的网络连接。</p>
<ul>
<li>放通节点之间的通信</li>
<li>确保防火墙允许 <code>FORWARD</code> 链的流量<figure class="highlight shell"><figcaption><span>/etc/sysconfig/iptables</span></figcaption><table><tr><td class="code"><pre><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [4:368]</span><br><span class="line"></span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubernetes nodes</span></span><br><span class="line">-A INPUT -m comment --comment &quot;kubernetes nodes&quot; -s 172.31.5.58 -j ACCEPT</span><br><span class="line">-A INPUT -m comment --comment &quot;kubernetes nodes&quot; -s 172.31.5.68 -j ACCEPT</span><br><span class="line">-A INPUT -m comment --comment &quot;kubernetes nodes&quot; -s 172.31.0.230 -j ACCEPT</span><br><span class="line"></span><br><span class="line">-A INPUT -p tcp -m multiport --dports 80,443 -j ACCEPT -m comment --comment &quot;k8s ingress http,https&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<p>集群通信 ( iptables ) 矩阵说明： <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[端口和协议](https://v1-25.docs.kubernetes.io/zh-cn/docs/reference/networking/ports-and-protocols/)">[6]</span></a></sup></p>
<table>
<thead>
<tr>
<th>Protocol</th>
<th>iptables table</th>
<th>ipables chain</th>
<th>Port Range</th>
<th>Purpose</th>
<th>Used by</th>
</tr>
</thead>
<tbody><tr>
<td>UDP</td>
<td>filter</td>
<td>INPUT</td>
<td>8472</td>
<td>flannel</td>
<td>network</td>
</tr>
<tr>
<td>TCP</td>
<td>filter</td>
<td>INPUT</td>
<td>6443</td>
<td>Kubernetes API server</td>
<td>ALL node</td>
</tr>
<tr>
<td>TCP</td>
<td>filter</td>
<td>INPUT</td>
<td>2379-2380</td>
<td>etcd server client API</td>
<td>kube-apiserver,etcd</td>
</tr>
<tr>
<td>TCP</td>
<td>filter</td>
<td>INPUT</td>
<td>10250</td>
<td>kubelet API</td>
<td>Control plane, Self ,kubectl exec</td>
</tr>
<tr>
<td>TCP</td>
<td>filter</td>
<td>INPUT</td>
<td>10251</td>
<td>kube-scheduler</td>
<td>self</td>
</tr>
<tr>
<td>TCP</td>
<td>filter</td>
<td>INPUT</td>
<td>10252</td>
<td>kube-controller-manager</td>
<td>self</td>
</tr>
<tr>
<td>TCP</td>
<td>filter</td>
<td>INPUT</td>
<td>30000-32767</td>
<td>NodePortService</td>
<td>All</td>
</tr>
</tbody></table>
<ul>
<li>不同节点之间的 <code>Pod</code> 通信需要经过 <code>flannel</code> 的 <code>8472/udp</code> </li>
<li><code>nodePort</code> 类型的 <code>service</code> ，默认可用的 <code>nodePort</code> 端口范围为 <code>30000-32767</code>，根据实际情况配置</li>
</ul>
<p>若对网络安全要求较为严格，可在 master 节点使用以下防火墙规则，本示例中 CNI 对接的网络插件为 flannel，若使用其他网络插件，则根据插件要求放通对应端口。</p>
<p>本示例中 <code>192.168.142.8 - 10</code> 为 master 节点，<code>192.168.142.11 - 12</code> 为 worker 节点</p>
<figure class="highlight shell"><figcaption><span>/etc/sysconfig/iptables</span></figcaption><table><tr><td class="code"><pre><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubernetes master</span></span><br><span class="line">-A INPUT -s 192.168.142.8 -p tcp -m multiport --dports 6443,2379:2380,10250,10259,10257 -j ACCEPT -m comment --comment &quot;for kubernetes master from kubernetes master&quot;</span><br><span class="line"></span><br><span class="line">-A INPUT -s 192.168.142.9 -p tcp -m multiport --dports 6443,2379:2380,10250,10259,10257 -j ACCEPT -m comment --comment &quot;for kubernetes master from kubernetes master&quot;</span><br><span class="line"></span><br><span class="line">-A INPUT -s 192.168.142.10 -p tcp -m multiport --dports 6443,2379:2380,10250,10259,10257 -j ACCEPT -m comment --comment &quot;for kubernetes master from kubernetes master&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-A INPUT -s 192.168.142.11 -p tcp -m multiport --dports 6443,2379:2380,10250 -j ACCEPT -m comment --comment &quot;for kubernetes master from k8s worker node&quot;</span><br><span class="line">-A INPUT -s 192.168.142.12 -p tcp -m multiport --dports 6443,2379:2380,10250 -j ACCEPT -m comment --comment &quot;for kubernetes master from k8s worker node&quot;</span><br><span class="line"></span><br><span class="line">-A INPUT -s 192.168.142.8 -p udp --dport 8472 -j ACCEPT -m comment --comment &quot;for flannel from kubernetes master&quot;</span><br><span class="line">-A INPUT -s 192.168.142.9 -p udp --dport 8472 -j ACCEPT -m comment --comment &quot;for flannel from kubernetes master&quot;</span><br><span class="line">-A INPUT -s 192.168.142.10 -p udp --dport 8472 -j ACCEPT -m comment --comment &quot;for flannel from kubernetes master&quot;</span><br><span class="line">-A INPUT -s 192.168.142.11 -p udp --dport 8472 -j ACCEPT -m comment --comment &quot;for flannel from kubernetes worker node&quot;</span><br><span class="line">-A INPUT -s 192.168.142.12 -p udp --dport 8472 -j ACCEPT -m comment --comment &quot;for flannel from kubernetes worker node&quot;</span><br><span class="line"></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure>
<p>在 node 节点使用以下防火墙规则</p>
<figure class="highlight shell"><figcaption><span>/etc/sysconfig/iptables</span></figcaption><table><tr><td class="code"><pre><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubernetes node</span></span><br><span class="line">-A INPUT -s 192.168.142.8 -p tcp -m multiport --dports 10250 -j ACCEPT -m comment --comment &quot;for kubernetes node from kubernetes master&quot;</span><br><span class="line">-A INPUT -s 192.168.142.9 -p tcp -m multiport --dports 10250 -j ACCEPT -m comment --comment &quot;for kubernetes node from kubernetes master&quot;</span><br><span class="line">-A INPUT -s 192.168.142.10 -p tcp -m multiport --dports 10250 -j ACCEPT -m comment --comment &quot;for kubernetes node from kubernetes master&quot;</span><br><span class="line"></span><br><span class="line">-A INPUT -s 192.168.142.8 -p udp --dport 8472 -j ACCEPT -m comment --comment &quot;for flannel from kubernetes master&quot;</span><br><span class="line">-A INPUT -s 192.168.142.9 -p udp --dport 8472 -j ACCEPT -m comment --comment &quot;for flannel from kubernetes master&quot;</span><br><span class="line">-A INPUT -s 192.168.142.10 -p udp --dport 8472 -j ACCEPT -m comment --comment &quot;for flannel from kubernetes master&quot;</span><br><span class="line">-A INPUT -s 192.168.142.11 -p udp --dport 8472 -j ACCEPT -m comment --comment &quot;for flannel from kubernetes master&quot;</span><br><span class="line">-A INPUT -s 192.168.142.12 -p udp --dport 8472 -j ACCEPT -m comment --comment &quot;for flannel from kubernetes worker nodes&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ingress Nginx Controller</span></span><br><span class="line">-A INPUT -p tcp -m multiport --dports 80,443,8443 -j ACCEPT -m comment --comment &quot;for Ingress Nginx Controller&quot;</span><br><span class="line"></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure>

<h2 id="禁止swap分区"><a href="#禁止swap分区" class="headerlink" title="禁止swap分区"></a>禁止swap分区</h2><p>以下命令临时关闭 swap，要永久关闭 swap，修改配置文件 <code>/etc/fstab</code>，删除或注释其中 <code>swap</code> 相关的行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swapoff -a</span><br></pre></td></tr></table></figure>

<h2 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h2><p>节点之中不可以有重复的主机名、MAC 地址或 product_uuid</p>
<p>配置集群中的 3 台主机名分别为 <code>kubernetes1</code>，<code>kubernetes2</code>，<code>kubernetes3</code>，本示例中 <code>kubernetes1</code> 作为 master </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname kubernetes1</span><br></pre></td></tr></table></figure>

<p>添加主机名和 ip 解析到 <code>/etc/hosts</code> 文件</p>
<figure class="highlight shell"><figcaption><span>/etc/hosts</span></figcaption><table><tr><td class="code"><pre><span class="line">172.31.10.19 kubernetes1</span><br><span class="line">172.31.9.241 kubernetes2</span><br><span class="line">172.31.14.115 kubernetes3</span><br></pre></td></tr></table></figure>

<h2 id="为-kube-proxy-开启-ipvs"><a href="#为-kube-proxy-开启-ipvs" class="headerlink" title="为 kube-proxy 开启 ipvs"></a>为 kube-proxy 开启 ipvs</h2><p><a href="https://blog.fleeto.us/post/iptables-or-ipvs/">kube-proxy 模式对比：iptables 还是 IPVS</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1890887">kube-proxy中使用ipvs与iptables的比较</a></p>
<p>此配置为<strong>可选操作</strong>，在不启用 ipvs 模式的情况下，kube-proxy 会使用 iptables 模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules </span><br></pre></td></tr></table></figure>

<h2 id="转发-IPv4-并让-iptables-看到桥接流量"><a href="#转发-IPv4-并让-iptables-看到桥接流量" class="headerlink" title="转发 IPv4 并让 iptables 看到桥接流量"></a>转发 IPv4 并让 iptables 看到桥接流量</h2><p>以下操作需要在 kubernetes 集群中的所有节点操作  </p>
<p>通过运行 <code>lsmod | grep br_netfilter</code> 来验证 <code>br_netfilter</code> 模块是否已加载。Kubernetes 通过 <code>bridge-netfilter</code> 配置使 iptables 规则可以应用在 Linux Bridge 上，对 Linux 内核进行宿主机和容器之间的数据包的地址转换是必须的，否则 Pod 进行外部服务网络请求时会出现目标主机不可达或者连接拒绝等错误（host unreachable 或者 connection refused）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lsmod | grep br_netfilter</span></span><br><span class="line">br_netfilter           22256  0 </span><br><span class="line">bridge                151336  1 br_netfilter</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>若要显式加载此模块，请运行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo modprobe overlay</span><br><span class="line">sudo modprobe br_netfilter</span><br></pre></td></tr></table></figure>


<p>为了让 Linux 节点的 iptables 能够正确查看桥接流量，请确认 <code>sysctl</code> 配置中的 <code>net.bridge.bridge-nf-call-iptables</code> 设置为 1</p>
<p>为配置永久生效，可以添加以下配置，<code>/etc/modules-load.d/k8s.conf</code> 中追加要加载的模块</p>
<figure class="highlight shell"><figcaption><span>/etc/modules-load.d/k8s.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">overlay</span><br><span class="line">br_netfilter</span><br></pre></td></tr></table></figure>

<p><code>/etc/sysctl.d/k8s.conf</code> 中追加内核参数</p>
<figure class="highlight shell"><figcaption><span>/etc/sysctl.d/k8s.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.ipv4.ip_forward                 = 1</span><br></pre></td></tr></table></figure>

<p>执行以下命令重新载入 sysctl 参数而无需重启系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure>

<!-- more -->

<h2 id="安装-Docker-Engine"><a href="#安装-Docker-Engine" class="headerlink" title="安装 Docker Engine"></a>安装 Docker Engine</h2><p>以下操作需要在 kubernetes 集群中的所有节点操作<br>参考以下链接，在每个节点上安装 Docker Engine<br><a href="https://docs.docker.com/engine/install/centos/">Centos 安装 Docker Engine 官网参考文档</a></p>
<a href="/202208041317/" title="docker 安装及常用命令介绍">docker 安装及常用命令介绍</a>

<h2 id="安装-cri-dockerd"><a href="#安装-cri-dockerd" class="headerlink" title="安装 cri-dockerd"></a>安装 cri-dockerd</h2><p>Docker Engine 没有实现 CRI，因此 Kubernetes 无法直接使用 Docker Engine，需要先安装 cri-dockerd，以让 Kubernetes 可以通过 Kubernetes 的 CRI 操作 Docker。</p>
<p>以下操作需要在 kubernetes 集群中的所有节点操作 </p>
<p>按照源代码仓库中的说明安装 <a href="https://github.com/Mirantis/cri-dockerd">cri-dockerd</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Mirantis/cri-dockerd.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run these commands as root</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##Install GO###</span></span></span><br><span class="line">wget https://storage.googleapis.com/golang/getgo/installer_linux</span><br><span class="line">chmod +x ./installer_linux</span><br><span class="line">./installer_linux</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line">cd cri-dockerd</span><br><span class="line">mkdir bin</span><br><span class="line">go build -o bin/cri-dockerd</span><br><span class="line">mkdir -p /usr/local/bin</span><br><span class="line">install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd</span><br><span class="line">cp -a packaging/systemd/* /etc/systemd/system</span><br><span class="line">sed -i -e &#x27;s,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,&#x27; /etc/systemd/system/cri-docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 使用 iptables 替换 firewalld</span></span></span><br><span class="line">sed -i -e &#x27;s,firewalld.service,iptables.service,&#x27; /etc/systemd/system/cri-docker.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable --now cri-docker.service</span><br><span class="line">systemctl enable --now cri-docker.socket</span><br></pre></td></tr></table></figure>

<p>对于 <code>cri-dockerd</code>，默认情况下，CRI 套接字是 <code>/run/cri-dockerd.sock</code></p>
<h1 id="Kubernetes-安装配置"><a href="#Kubernetes-安装配置" class="headerlink" title="Kubernetes 安装配置"></a>Kubernetes 安装配置</h1><h2 id="安装-kubeadm、kubelet-和-kubectl"><a href="#安装-kubeadm、kubelet-和-kubectl" class="headerlink" title="安装 kubeadm、kubelet 和 kubectl"></a>安装 kubeadm、kubelet 和 kubectl</h2><p>需要在每台机器上安装以下的软件包：</p>
<ul>
<li><p><code>kubeadm</code> ： 用来初始化集群的指令。</p>
</li>
<li><p><code>kubelet</code> ： 在集群中的每个节点上用来启动 Pod 和容器等。</p>
</li>
<li><p><code>kubectl</code> ： 用来与集群通信的命令行工具。</p>
</li>
</ul>
<p>添加 <code>yum</code> 源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">exclude=kubelet kubeadm kubectl</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>安装软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y kubelet-1.24.7 kubeadm-1.24.7 kubectl-1.24.7 --disableexcludes=kubernetes</span><br></pre></td></tr></table></figure>
<p>启动服务并配置开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable --now kubelet</span><br></pre></td></tr></table></figure>
<p>kubelet 现在每隔几秒就会重启，因为它陷入了一个等待 <code>kubeadm</code> 指令的死循环。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl status kubelet</span></span><br><span class="line">● kubelet.service - kubelet: The Kubernetes Node Agent</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: /usr/lib/systemd/system/kubelet.service.d</span><br><span class="line">           └─10-kubeadm.conf</span><br><span class="line">   Active: activating (auto-restart) (Result: exit-code) since Mon 2022-09-12 14:35:58 CST; 7s ago</span><br><span class="line">     Docs: https://kubernetes.io/docs/</span><br><span class="line">  Process: 2056 ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS (code=exited, status=1/FAILURE)</span><br><span class="line"> Main PID: 2056 (code=exited, status=1/FAILURE)</span><br><span class="line"></span><br><span class="line">Sep 12 14:35:58 ip-172-31-14-115.us-west-1.compute.internal systemd[1]: Unit kubelet.service entered failed state.</span><br><span class="line">Sep 12 14:35:58 ip-172-31-14-115.us-west-1.compute.internal systemd[1]: kubelet.service failed.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="初始化控制平面节点"><a href="#初始化控制平面节点" class="headerlink" title="初始化控制平面节点"></a>初始化控制平面节点</h2><h3 id="创建单控制平面集群"><a href="#创建单控制平面集群" class="headerlink" title="创建单控制平面集群"></a>创建单控制平面集群</h3><p>控制平面节点是运行控制平面组件的机器， 包括 etcd （集群数据库） 和 API Server （命令行工具 kubectl 与之通信）。</p>
<ol>
<li><p>初始化控制平面节点</p>
<p> 要初始化控制平面节点，请在 master 节点上（<code>kubernetes1</code>）运行以下命令，<a href="https://csms.tech/202209131536/#创建集群">命令参数说明</a>：</p>
 <figure class="highlight shell"><figcaption><span>kubernetes1</span></figcaption><table><tr><td class="code"><pre><span class="line">kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket=unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--pod-network-cidr=10.244.0.0/16</code> 指定 pod 使用的网络段，后面配置网络（CNI）时配置的网段要和此处一致</li>
<li><code>--cri-socket=unix:///var/run/cri-dockerd.sock</code> 指定使用的 CRI 为 Docker</li>
</ul>
<blockquote>
<p>使用 <code>kubeadm init --config=./kubeadm-config.yml</code> 的情况下，对应配置文件中内容示例：</p>
<figure class="highlight shell"><figcaption><span>kubeadm-config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: stable</span><br><span class="line">controlPlaneEndpoint: &quot;192.168.254.106:6443&quot;</span><br><span class="line">networking:</span><br><span class="line">  podSubnet: &quot;10.244.0.0/16&quot;</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: &quot;192.168.254.106&quot;</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: /var/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>
<p> 输出结果如下：<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[init] Using Kubernetes version: v1.25.0</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using &#x27;kubeadm config images pull&#x27;</span><br><span class="line">[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;</span><br><span class="line">[certs] Generating &quot;ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local kubernetes1] and IPs [10.96.0.1 172.31.10.19]</span><br><span class="line">[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/server&quot; certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed for DNS names [localhost kubernetes1] and IPs [172.31.10.19 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd/peer&quot; certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed for DNS names [localhost kubernetes1] and IPs [172.31.10.19 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;sa&quot; key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;</span><br><span class="line">[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class="line">[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 17.003297 seconds</span><br><span class="line">[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[upload-certs] Skipping phase. Please see --upload-certs</span><br><span class="line">[mark-control-plane] Marking the node kubernetes1 as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]</span><br><span class="line">[mark-control-plane] Marking the node kubernetes1 as control-plane by adding the taints [node-role.kubernetes.io/control-plane:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: 8ca35s.butdpihinkdczvqb</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class="line">[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, if you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">  beadm join 172.31.10.19:6443 --token 8ca35s.butdpihinkdczvqb \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:b2793f9a6bea44a64640f99042f11c4ff6e4fef99fa2407241e1a0e8ea652149 </span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p> 根据 <code>kubeadm init</code> 输出提示，配置 <code>kubectl</code> 需要的环境变量，root 用户执行以下命令<br> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><br> 为永久生效，可将其添加到 <code>~/.bash_profile</code></p>
<p> 此时，执行以下命令查看集群节点信息<br> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A</span></span><br><span class="line">NAMESPACE     NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-565d847f94-dc8tl                  0/1     Pending   0          5m42s</span><br><span class="line">kube-system   coredns-565d847f94-zqctg                  0/1     Pending   0          5m42s</span><br><span class="line">kube-system   etcd-kubernetes1                          1/1     Running   0          5m54s</span><br><span class="line">kube-system   kube-apiserver-kubernetes1                1/1     Running   0          5m53s</span><br><span class="line">kube-system   kube-controller-manager-kubernetes1       1/1     Running   0          5m54s</span><br><span class="line">kube-system   kube-proxy-6kwdx                          1/1     Running   0          5m43s</span><br><span class="line">kube-system   kube-scheduler-kubernetes1                1/1     Running   0          5m54s</span><br><span class="line"></span><br></pre></td></tr></table></figure><br> 其中，<code>coredns</code> 的 pod 处于 <code>Pending</code> 状态，是因为网络还没配置。</p>
<p> 因为 CRI 使用 docker，此时使用以下命令，可以查看到启动的所有容器<br> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                  COMMAND                  CREATED         STATUS         PORTS     NAMES</span><br><span class="line">741a6d32b2cd   58a9a0c6d96f           &quot;/usr/local/bin/kube…&quot;   5 minutes ago   Up 5 minutes             k8s_kube-proxy_kube-proxy-6kwdx_kube-system_93101b10-7ee5-437c-a234-3e31edc7cfa9_0</span><br><span class="line">31509b3f06cc   k8s.gcr.io/pause:3.6   &quot;/pause&quot;                 5 minutes ago   Up 5 minutes             k8s_POD_kube-proxy-6kwdx_kube-system_93101b10-7ee5-437c-a234-3e31edc7cfa9_0</span><br><span class="line">fb3ec15950b6   bef2cf311509           &quot;kube-scheduler --au…&quot;   6 minutes ago   Up 6 minutes             k8s_kube-scheduler_kube-scheduler-kubernetes1_kube-system_c455960b65afeadd009ff9ba9e7ab7b0_0</span><br><span class="line">333188677c01   4d2edfd10d3e           &quot;kube-apiserver --ad…&quot;   6 minutes ago   Up 6 minutes             k8s_kube-apiserver_kube-apiserver-kubernetes1_kube-system_11596873d958a699a1b923df2333eaad_0</span><br><span class="line">4bdbf8689bbb   1a54c86c03a6           &quot;kube-controller-man…&quot;   6 minutes ago   Up 6 minutes             k8s_kube-controller-manager_kube-controller-manager-kubernetes1_kube-system_23ce2f60ac97b06bde25c1662e88e409_0</span><br><span class="line">a399d3484c17   a8a176a5d5d6           &quot;etcd --advertise-cl…&quot;   6 minutes ago   Up 6 minutes             k8s_etcd_etcd-kubernetes1_kube-system_84da44e552601c02573afe1dc1e3b0a2_0</span><br><span class="line">28aae0e41a7d   k8s.gcr.io/pause:3.6   &quot;/pause&quot;                 6 minutes ago   Up 6 minutes             k8s_POD_kube-apiserver-kubernetes1_kube-system_11596873d958a699a1b923df2333eaad_0</span><br><span class="line">3f4f378ed731   k8s.gcr.io/pause:3.6   &quot;/pause&quot;                 6 minutes ago   Up 6 minutes             k8s_POD_kube-scheduler-kubernetes1_kube-system_c455960b65afeadd009ff9ba9e7ab7b0_0</span><br><span class="line">eaa6d312a174   k8s.gcr.io/pause:3.6   &quot;/pause&quot;                 6 minutes ago   Up 6 minutes             k8s_POD_etcd-kubernetes1_kube-system_84da44e552601c02573afe1dc1e3b0a2_0</span><br><span class="line">707e84291ac2   k8s.gcr.io/pause:3.6   &quot;/pause&quot;                 6 minutes ago   Up 6 minutes             k8s_POD_kube-controller-manager-kubernetes1_kube-system_23ce2f60ac97b06bde25c1662e88e409_0</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
</li>
<li><p><a href="#%E5%AE%89%E8%A3%85-kube-flannel">安装 kube-flannel</a></p>
<p> 在进行下一步之前，必须选择并部署合适的网络插件。 否则集群不会正常运行。</p>
</li>
<li><p>将节点加入集群</p>
<p> 在 work 节点上执行以下命令加入集群</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join 172.31.10.19:6443 --token 8ca35s.butdpihinkdczvqb --discovery-token-ca-cert-hash sha256:b2793f9a6bea44a64640f99042f11c4ff6 \ </span><br><span class="line">        --cri-socket=unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure>
<p> 加入集群成功后，在 master 上查看所有节点</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME          STATUS     ROLES           AGE   VERSION</span><br><span class="line">kubernetes1   Ready      control-plane   36m   v1.25.0</span><br><span class="line">kubernetes2   NotReady   &lt;none&gt;          21s   v1.25.0</span><br><span class="line">kubernetes3   NotReady   &lt;none&gt;          18s   v1.25.0</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="创建高可用控制平面的集群"><a href="#创建高可用控制平面的集群" class="headerlink" title="创建高可用控制平面的集群"></a>创建高可用控制平面的集群</h3><p>创建 <a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/ha-topology/#stacked-etcd-topology"><code>堆叠（Stacked）etcd 拓扑</code></a> 的高可用控制平面集群</p>
<p><code>堆叠（Stacked）etcd 拓扑</code> 主要有以下特点：</p>
<ul>
<li><code>etcd</code> 分布式数据存储集群堆叠在 <code>kubeadm</code> 管理的控制平面节点上，作为控制平面的一个组件运行。</li>
<li>每个控制平面节点运行 <code>etcd</code>、 <code>kube-apiserver</code>、<code>kube-scheduler</code> 和 <code>kube-controller-manager</code> 实例。 <code>kube-apiserver</code> 使用负载均衡器暴露给工作节点。</li>
<li>每个控制平面节点创建一个本地 <code>etcd</code> 成员（member），这个 <code>etcd</code> 成员只与该节点的 <code>kube-apiserver</code> 通信。 这同样适用于本地 <code>kube-controller-manager</code> 和 <code>kube-scheduler</code> 实例。</li>
<li>堆叠集群存在耦合失败的风险。如果一个节点发生故障，则 <code>etcd</code> 成员和控制平面实例都将丢失， 并且冗余会受到影响。你可以通过添加更多控制平面节点来降低此风险。</li>
</ul>
<p><code>堆叠（Stacked）etcd 拓扑</code><br><img src="https://i.csms.tech/img_77.png"></p>
<p>为 kube-apiserver 创建负载均衡器，该负载均衡器将流量分配给目标列表中所有运行状况良好的控制平面节点。 API 服务器的健康检查是在 kube-apiserver 的监听端口（默认值 :6443） 上进行的一个 TCP 检查。 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[为 kube-apiserver 创建负载均衡器](https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/high-availability/#%E4%B8%BA-kube-apiserver-%E5%88%9B%E5%BB%BA%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8)">[2]</span></a></sup></p>
<p>此处假设 kube-apiserver 的负载均衡地址为 <code>kube-apiserver.my.com:6443</code>。</p>
<ol>
<li><p>初始化控制平面：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket=unix:///var/run/cri-dockerd.sock \</span><br><span class="line">             --control-plane-endpoint &quot;kube-apiserver.my.com:6443&quot; \</span><br><span class="line">             --upload-certs</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>--upload-certs</code> 标志用来将在所有控制平面实例之间的共享证书上传到集群。<em><strong>如果不使用此选项，需要手动拷贝证书到其他节点</strong></em> <sup id="fnref:12"><a href="#fn:12" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Manual certificate distribution](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/#manual-certs)">[12]</span></a></sup></p>
<p> 根据 <code>kubeadm init</code> 输出提示，配置 <code>kubectl</code> 需要的环境变量，root 用户执行以下命令</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure>
<p> 为永久生效，可将其添加到 <code>~/.bash_profile</code></p>
</li>
<li><p><a href="#%E5%AE%89%E8%A3%85-kube-flannel">安装 kube-flannel</a></p>
<p> 在进行下一步之前，必须选择并部署合适的网络插件。 否则集群不会正常运行。</p>
<p> 输入以下内容，并查看控制平面组件的 Pod 启动：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pod -n kube-system -w</span><br></pre></td></tr></table></figure></li>
<li><p>其余控制平面节点上的操作</p>
<p> 执行先前由第一个节点上的 <code>kubeadm init</code> 输出提供给你的 <code>join</code> 命令。 在 CRI 是 <code>cri-dockerd</code> 的场景下，要添加 <code>--cri-socket=unix:///var/run/cri-dockerd.sock</code>。它看起来应该像这样：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.0.200:6443 --token 9vr73a.a8uxyaju799qwdjv \</span><br><span class="line">             --discovery-token-ca-cert-hash sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866 \</span><br><span class="line">             --control-plane \</span><br><span class="line">             --certificate-key f8902e114ef118304e561c3ecd4d0b543adc226b7a07f675f56564185ffe0c07 \</span><br><span class="line">             --cri-socket=unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure>
</li>
<li><p>工作节点上的操作</p>
<p> 在工作节点上执行以下命令，添加工作节点到集群中。在 CRI 是 <code>cri-dockerd</code> 的场景下，要添加 <code>--cri-socket=unix:///var/run/cri-dockerd.sock</code>。它看起来应该像这样：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm join kube-apiserver.uat.148962587001:6443 \</span><br><span class="line">        --token 0nf24o.fb98ll5qkhpcxd70 \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:a5d589a3476777df757e38334b035a93811d94e75131e3d9cc1d7efad22fc793 \</span><br><span class="line">        --cri-socket=unix:///var/run/cri-dockerd.sock</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="安装-kube-flannel"><a href="#安装-kube-flannel" class="headerlink" title="安装 kube-flannel"></a>安装 kube-flannel</h3><p>Kubernetes 安装时已经安装了网络相关驱动，位于 <code>/opt/cni/bin/flannel</code>，此时只需要根据相关配置文件生成 <code>kube-flannel</code> 的 pod 即可</p>
<p>请在 master 节点上（<code>kubernetes1</code>）运行以下命令创建 <code>kube-flannel</code> 相关 POD</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml</span></span><br><span class="line"></span><br><span class="line">namespace/kube-flannel created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.apps/kube-flannel-ds created</span><br></pre></td></tr></table></figure>
<p>使用默认的 <code>kube-flannel.yml</code>，默认的 Network 为 <code>10.244.0.0/16</code>，要变更默认网段，更改 <code>kube-flannel.yml</code> 中的以下内容即可：</p>
<figure class="highlight shell"><figcaption><span>kube-flannel.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">net-conf.json: |</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span><br><span class="line">    &quot;Backend&quot;: &#123;</span><br><span class="line">      &quot;Type&quot;: &quot;vxlan&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>此处的网段配置需要和 <a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2%E8%8A%82%E7%82%B9">初始化集群时定义的 pod 网段</a> 保持一致</p>
<p>创建完成 <code>kube-flannel</code> 后，再次查看集群中的 pod 信息，可以看到 <code>coredns</code> 已经处于运行状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A</span></span><br><span class="line">NAMESPACE      NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel   kube-flannel-ds-rg969                     1/1     Running   0          20s</span><br><span class="line">kube-system    coredns-565d847f94-dc8tl                  0/1     Running   0          22m</span><br><span class="line">kube-system    coredns-565d847f94-zqctg                  0/1     Running   0          22m</span><br><span class="line">kube-system    etcd-kubernetes1                          1/1     Running   0          22m</span><br><span class="line">kube-system    kube-apiserver-kubernetes1                1/1     Running   0          22m</span><br><span class="line">kube-system    kube-controller-manager-kubernetes1       1/1     Running   0          22m</span><br><span class="line">kube-system    kube-proxy-6kwdx                          1/1     Running   0          22m</span><br><span class="line">kube-system    kube-scheduler-kubernetes1                1/1     Running   0          22m</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="安装-dashboard"><a href="#安装-dashboard" class="headerlink" title="安装 dashboard"></a>安装 dashboard</h1><p><a href="https://github.com/kubernetes/dashboard">kubernetes-dashboard 项目地址</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.6.1/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>

<p>修改 <code>recommended.yaml</code> 以下内容</p>
<figure class="highlight shell"><figcaption><span>recommended.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort     </span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 30443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以上修改主要是新加以下 2 行，配置对外的端口，可用范围为 30000-32767：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type: NodePort </span><br><span class="line">    nodePort: 30443</span><br></pre></td></tr></table></figure>
<p>以下 2 处新增配置 <code>nodeName: kubernetes1</code>，其中 <code>kubernetes1</code> 为 master 节点名称，可以通过 <code>kubectl get nodes</code> 查看</p>
<figure class="highlight shell"><figcaption><span>recommended.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  securityContext:</span><br><span class="line">    seccompProfile:</span><br><span class="line">      type: RuntimeDefault</span><br><span class="line">  nodeName: kubernetes1</span><br><span class="line">  containers:</span><br><span class="line">    - name: kubernetes-dashboard</span><br><span class="line">      image: kubernetesui/dashboard:v2.6.1</span><br><span class="line">      imagePullPolicy: Always</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: 8443</span><br><span class="line">          protocol: TCP</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上 2 处修改主要是配置 <code>kubernetes-dashboard</code> 运行在 master 节点上，否则可能运行在其他节点上，会因为网络问题导致 <code>kubernetes-dashboard</code> 无法正常启动，查看日志会报以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs -n kubernetes-dashboard kubernetes-dashboard-66c887f759-5rbbb</span></span><br><span class="line">2022/09/14 06:59:17 Starting overwatch</span><br><span class="line">2022/09/14 06:59:17 Using namespace: kubernetes-dashboard</span><br><span class="line">2022/09/14 06:59:17 Using in-cluster config to connect to apiserver</span><br><span class="line">2022/09/14 06:59:17 Using secret token for csrf signing</span><br><span class="line">2022/09/14 06:59:17 Initializing csrf token from kubernetes-dashboard-csrf secret</span><br><span class="line">panic: Get &quot;https://10.96.0.1:443/api/v1/namespaces/kubernetes-dashboard/secrets/kubernetes-dashboard-csrf&quot;: dial tcp 10.96.0.1:443: connect: no route to host</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>关键日志 ： <code>panic: Get &quot;https://10.96.0.1:443/api/v1/namespaces/kubernetes-dashboard/secrets/kubernetes-dashboard-csrf&quot;: dial tcp 10.96.0.1:443: connect: no route to host </code></p>
<p>以上报错也有可能是因为防火墙未放通各个 <code>service</code> 的 <code>CLUSTER-IP</code> 网段导致，可以在防火墙中放通相应网段</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get services -A</span></span><br><span class="line">NAMESPACE              NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">default                kubernetes                  ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP                  3h9m</span><br><span class="line">kube-system            kube-dns                    ClusterIP   10.96.0.10      &lt;none&gt;        53/UDP,53/TCP,9153/TCP   3h9m</span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper   ClusterIP   10.107.39.231   &lt;none&gt;        8000/TCP                 88m</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard        NodePort    10.101.165.61   &lt;none&gt;        443:30443/TCP            88m</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>iptables</code> 中放通对应网段</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT 6 -s 10.0.0.0/8 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>使用修改后的配置文件 <code>recommended.yaml</code> 启动 <code>kubernetes-dashboard</code> pod</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f recommended.yaml</span></span><br><span class="line"></span><br><span class="line">namespace/kubernetes-dashboard created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">secret/kubernetes-dashboard-csrf created</span><br><span class="line">secret/kubernetes-dashboard-key-holder created</span><br><span class="line">configmap/kubernetes-dashboard-settings created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/dashboard-metrics-scraper created</span><br><span class="line">deployment.apps/dashboard-metrics-scraper created</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看 pod</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A</span></span><br><span class="line">NAMESPACE              NAME                                         READY   STATUS    RESTARTS      AGE</span><br><span class="line">kube-flannel           kube-flannel-ds-bdms5                        1/1     Running   1 (17h ago)   19h</span><br><span class="line">kube-flannel           kube-flannel-ds-kq7gz                        1/1     Running   1             19h</span><br><span class="line">kube-flannel           kube-flannel-ds-rg969                        1/1     Running   2 (17h ago)   19h</span><br><span class="line">kube-system            coredns-565d847f94-dc8tl                     1/1     Running   2 (17h ago)   20h</span><br><span class="line">kube-system            coredns-565d847f94-zqctg                     1/1     Running   2 (17h ago)   20h</span><br><span class="line">kube-system            etcd-kubernetes1                             1/1     Running   2 (17h ago)   20h</span><br><span class="line">kube-system            kube-apiserver-kubernetes1                   1/1     Running   2 (17h ago)   20h</span><br><span class="line">kube-system            kube-controller-manager-kubernetes1          1/1     Running   2 (17h ago)   20h</span><br><span class="line">kube-system            kube-proxy-6kwdx                             1/1     Running   2 (17h ago)   20h</span><br><span class="line">kube-system            kube-proxy-7lk7c                             1/1     Running   1 (17h ago)   19h</span><br><span class="line">kube-system            kube-proxy-rjr76                             1/1     Running   1 (17h ago)   19h</span><br><span class="line">kube-system            kube-scheduler-kubernetes1                   1/1     Running   3 (17h ago)   20h</span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper-746f6b45bf-ndvbr   1/1     Running   0             40s</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard-64f444d4f9-2mjdb        1/1     Running   0             40s</span><br></pre></td></tr></table></figure>

<p><code>kubernetes-dashboard</code> 运行正常后，在防火墙放通 <code>kubernetes-dashboard</code> 对外的端口（30443）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT 6 -p tcp --dport 30443  -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>浏览器通过访问 master 节点的公网 ip 地址和端口（<a href="https://ip:30443）">https://ip:30443）</a> ，可以打开 <code>kubernetes-dashboard</code> web 界面<br><img src="https://i.csms.tech/img_56.png"></p>
<p>此时要验证 Token。需要首先创建管理员用户，创建以下配置文件，文件命名为 <code>kubernetes-dashboard-adminuser.yaml</code>，<a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md">参考文档</a></p>
<figure class="highlight shell"><figcaption><span>kubernetes-dashboard-adminuser.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上配置创建了一个 <code>admin</code> 用户（用户名字随便起），赋予 <code>ClusterRoleBinding</code> 角色权限，关联到 <code>clusert-admin</code>（名称是固定的不能修改）。</p>
<p>根据此配置创建账号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f kubernetes-dashboard-adminuser.yaml</span></span><br><span class="line">serviceaccount/admin created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/admin created</span><br></pre></td></tr></table></figure>

<p>获取 <code>Bearer Token</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl -n kubernetes-dashboard create token admin</span></span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6InUxMDNNUmZmU3BFenZYTEZjNjk2LUR0S1Q..</span><br></pre></td></tr></table></figure>
<p>将生成的 <code>Token</code> 输入浏览器进行验证，验证成功后可以登入 Dashboard<br><img src="https://i.csms.tech/img_57.png"></p>
<p>默认的 token 有效期很短，要修改 token 的有限时间，可以在登陆 Dashboard 后，编辑 <code>kubernetes-dashboard</code> 的 <code>Deployment</code><br><img src="https://i.csms.tech/img_58.png"></p>
<p>在 <code>spec:template:spec:containers:args</code> 下新增 <code>- &#39;--token-ttl=2592000&#39;</code><br><img src="https://i.csms.tech/img_59.png"></p>
<h1 id="安装-Kubernetes-Metrics-Server"><a href="#安装-Kubernetes-Metrics-Server" class="headerlink" title="安装 Kubernetes Metrics Server"></a>安装 Kubernetes Metrics Server</h1><p>安装 <code>Kubernetes Metrics Server</code> 可以支持使用 <code>kubectl top</code> 命令来查看集群使用的资源情况。 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server)">[5]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br><span class="line">mv components.yaml kubernetes-mitrics-server.yaml</span><br><span class="line">kubectl apply -f kubernetes-mitrics-server.yaml</span><br></pre></td></tr></table></figure>
<p>部署后为了解决证书问题，可以临时配置不使用安全证书进行通信，修改 <code>metrics-server</code> 的 <code>Deployment</code>，在 <code>metrics-server</code> 启动时添加参数 <code>--kubelet-insecure-tls</code></p>
<figure class="highlight shell"><figcaption><span>kubernetes-mitrics-server.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - args:</span><br><span class="line">    - --cert-dir=/tmp</span><br><span class="line">    - --secure-port=4443</span><br><span class="line">    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br><span class="line">    - --kubelet-use-node-status-port</span><br><span class="line">    - --metric-resolution=15s</span><br><span class="line">    - --kubelet-insecure-tls</span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="Found-multiple-CRI-endpoints-on-the-host"><a href="#Found-multiple-CRI-endpoints-on-the-host" class="headerlink" title="Found multiple CRI endpoints on the host"></a>Found multiple CRI endpoints on the host</h2><p><strong>错误场景</strong> ： 执行以下命令将节点加入集群时报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubeadm <span class="built_in">join</span> 172.31.10.19:6443 --token 8ca35s.butdpihinkdczvqb --discovery-token-ca-cert-hash sha256:b2793f9a6bea44a64640f99042</span></span><br><span class="line"></span><br><span class="line">Found multiple CRI endpoints on the host. Please define which one do you wish to use by setting the &#x27;criSocket&#x27; field in the kubeadm configuration file: unix:///var/run/containerd/containerd.sock, unix:///var/run/cri-dockerd.sock</span><br><span class="line">To see the stack trace of this error execute with --v=5 or higher</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>报错原因</strong> ： 在没有明确指定 Kubernetes 要使用的 CRI 情况下，会自动扫描主机上面安装的 CRI，如果出现多个可用的 CRI，会报错并提示确定使用哪个 CRI。</p>
<p><strong>解决方法</strong> ： 使用如下命令，指定要使用的 CRI</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join 172.31.10.19:6443 --token 8ca35s.butdpihinkdczvqb --discovery-token-ca-cert-hash sha256:b2793f9a6bea44a64640f99042f11c4ff6 \ </span><br><span class="line">        --cri-socket=unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure>

<h2 id="kube-flannel-状态为-CrashLoopBackOff"><a href="#kube-flannel-状态为-CrashLoopBackOff" class="headerlink" title="kube-flannel 状态为 CrashLoopBackOff"></a>kube-flannel 状态为 CrashLoopBackOff</h2><p><strong>错误场景</strong> ：<br><code>kube-flannel</code> 一直重启，状态为 <code>CrashLoopBackOff</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods --all-namespaces</span></span><br><span class="line">NAMESPACE      NAME                                      READY   STATUS              RESTARTS         AGE</span><br><span class="line">kube-flannel   kube-flannel-ds-7q2hp                     0/1     CrashLoopBackOff    40 (3m39s ago)   3h4m</span><br><span class="line">kube-flannel   kube-flannel-ds-k8wd6                     0/1     CrashLoopBackOff    35 (53s ago)     76m</span><br><span class="line">kube-flannel   kube-flannel-ds-x6ck2                     0/1     CrashLoopBackOff    18 (106s ago)    69m</span><br><span class="line">kube-system    coredns-565d847f94-b4sgn                  0/1     ContainerCreating   0                3h40m</span><br><span class="line">kube-system    coredns-565d847f94-ml6k5                  0/1     ContainerCreating   0                3h40m</span><br><span class="line">kube-system    etcd-kubernetes1                          1/1     Running             0                3h40m</span><br><span class="line">kube-system    kube-apiserver-kubernetes1                1/1     Running             0                3h40m</span><br><span class="line">kube-system    kube-controller-manager-kubernetes1       1/1     Running             0                3h40m</span><br><span class="line">kube-system    kube-proxy-9vwxl                          1/1     Running             0                76m</span><br><span class="line">kube-system    kube-proxy-qxsc7                          1/1     Running             0                69m</span><br><span class="line">kube-system    kube-proxy-v5msf                          1/1     Running             0                3h40m</span><br><span class="line">kube-system    kube-scheduler-kubernetes1                1/1     Running             0                3h40m</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>排查步骤</strong> ：<br>查看日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs kube-flannel-ds-7q2hp -n kube-flannel</span></span><br><span class="line">Defaulted container &quot;kube-flannel&quot; out of: kube-flannel, install-cni-plugin (init), install-cni (init)</span><br><span class="line">I0913 06:42:19.799473       1 main.go:207] CLI flags config: &#123;etcdEndpoints:http://127.0.0.1:4001,http://127.0.0.1:2379 etcdPrefix:/coreos.com/network etcdKeyfile: etcdCertfile: etcdCAFile: etcdUsername: etcdPassword: version:false kubeSubnetMgr:true kubeApiUrl: kubeAnnotationPrefix:flannel.alpha.coreos.com kubeConfigFile: iface:[] ifaceRegex:[] ipMasq:true ifaceCanReach: subnetFile:/run/flannel/subnet.env publicIP: publicIPv6: subnetLeaseRenewMargin:60 healthzIP:0.0.0.0 healthzPort:0 iptablesResyncSeconds:5 iptablesForwardRules:true netConfPath:/etc/kube-flannel/net-conf.json setNodeNetworkUnavailable:true&#125;</span><br><span class="line">W0913 06:42:19.799563       1 client_config.go:614] Neither --kubeconfig nor --master was specified.  Using the inClusterConfig.  This might not work.</span><br><span class="line">I0913 06:42:19.903750       1 kube.go:120] Waiting 10m0s for node controller to sync</span><br><span class="line">I0913 06:42:19.903882       1 kube.go:401] Starting kube subnet manager</span><br><span class="line">I0913 06:42:20.903967       1 kube.go:127] Node controller sync successful</span><br><span class="line">I0913 06:42:20.903995       1 main.go:227] Created subnet manager: Kubernetes Subnet Manager - kubernetes1</span><br><span class="line">I0913 06:42:20.904004       1 main.go:230] Installing signal handlers</span><br><span class="line">I0913 06:42:20.904152       1 main.go:467] Found network config - Backend type: vxlan</span><br><span class="line">I0913 06:42:20.904195       1 match.go:206] Determining IP address of default interface</span><br><span class="line">I0913 06:42:20.904542       1 match.go:259] Using interface with name eth0 and address 172.31.10.19</span><br><span class="line">I0913 06:42:20.904570       1 match.go:281] Defaulting external address to interface address (172.31.10.19)</span><br><span class="line">I0913 06:42:20.904651       1 vxlan.go:138] VXLAN config: VNI=1 Port=0 GBP=false Learning=false DirectRouting=false</span><br><span class="line">E0913 06:42:20.904962       1 main.go:330] Error registering network: failed to acquire lease: node &quot;kubernetes1&quot; pod cidr not assigned</span><br><span class="line">I0913 06:42:20.905100       1 main.go:447] Stopping shutdownHandler...</span><br><span class="line">W0913 06:42:20.905251       1 reflector.go:436] github.com/flannel-io/flannel/subnet/kube/kube.go:402: watch of *v1.Node ended with: an error on the server (&quot;unable to decode an event from the watch stream: context canceled&quot;) has prevented the request from succeeding</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>关键日志： <code>Error registering network: failed to acquire lease: node &quot;kubernetes1&quot; pod cidr not assigned</code></p>
<p><strong>问题原因</strong> ： worker 节点的 flannel 组件无法正常获取 podCIDR 的定义</p>
<p><strong>解决方法</strong> ： 编辑控制节点上的配置文件 <code>/etc/kubernetes/manifests/kube-controller-manager.yaml</code>，在 <code>- command</code> 下添加以下内容：</p>
<figure class="highlight shell"><figcaption><span>/etc/kubernetes/manifests/kube-controller-manager.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">- --allocate-node-cidrs=true</span><br><span class="line">- --cluster-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>
<p>如果内容已存在的话，更改 cidr 的网段和 <a href="#%E5%AE%89%E8%A3%85-kube-flannel"><code>kube-flannel.yml</code> 中的 cidr</a> 一致</p>
<p>更改配置后，重启所有节点的 <code>kubelet</code> 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure>
<p>重新查看所有 pod 状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A</span></span><br><span class="line">NAMESPACE      NAME                                      READY   STATUS    RESTARTS         AGE</span><br><span class="line">kube-flannel   kube-flannel-ds-7q2hp                     1/1     Running   62 (2m20s ago)   4h43m</span><br><span class="line">kube-flannel   kube-flannel-ds-k8wd6                     1/1     Running   55 (4m33s ago)   175m</span><br><span class="line">kube-flannel   kube-flannel-ds-x6ck2                     1/1     Running   38 (2m43s ago)   168m</span><br><span class="line">kube-system    coredns-565d847f94-b4sgn                  0/1     Running   0                5h19m</span><br><span class="line">kube-system    coredns-565d847f94-ml6k5                  0/1     Running   0                5h19m</span><br><span class="line">kube-system    etcd-kubernetes1                          1/1     Running   0                5h19m</span><br><span class="line">kube-system    kube-apiserver-kubernetes1                1/1     Running   0                5h19m</span><br><span class="line">kube-system    kube-controller-manager-kubernetes1       1/1     Running   0                2m39s</span><br><span class="line">kube-system    kube-proxy-9vwxl                          1/1     Running   0                175m</span><br><span class="line">kube-system    kube-proxy-qxsc7                          1/1     Running   0                168m</span><br><span class="line">kube-system    kube-proxy-v5msf                          1/1     Running   0                5h19m</span><br><span class="line">kube-system    kube-scheduler-kubernetes1                1/1     Running   0                5h19m</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="master-节点状态为-NotReady"><a href="#master-节点状态为-NotReady" class="headerlink" title="master 节点状态为 NotReady"></a>master 节点状态为 NotReady</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME              STATUS     ROLES                  AGE    VERSION</span><br><span class="line">k8s-work1         Ready      &lt;none&gt;                 99m    v1.21.2</span><br><span class="line">k8s-master        NotReady   control-plane,master   102m   v1.21.2</span><br><span class="line">k8s-work2         Ready      &lt;none&gt;                 99m    v1.21.2</span><br></pre></td></tr></table></figure>

<p>查看节点详细信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe node k8s-master</span></span><br><span class="line"></span><br><span class="line">Conditions:</span><br><span class="line">  Type             Status    LastHeartbeatTime                 LastTransitionTime                Reason              Message</span><br><span class="line">  ----             ------    -----------------                 ------------------                ------              -------</span><br><span class="line">  MemoryPressure   Unknown   Tue, 11 Oct 2022 14:54:19 +0800   Tue, 11 Oct 2022 14:57:46 +0800   NodeStatusUnknown   Kubelet stopped posting node status.</span><br><span class="line">  DiskPressure     Unknown   Tue, 11 Oct 2022 14:54:19 +0800   Tue, 11 Oct 2022 14:57:46 +0800   NodeStatusUnknown   Kubelet stopped posting node status.</span><br><span class="line">  PIDPressure      Unknown   Tue, 11 Oct 2022 14:54:19 +0800   Tue, 11 Oct 2022 14:57:46 +0800   NodeStatusUnknown   Kubelet stopped posting node status.</span><br><span class="line">  Ready            Unknown   Tue, 11 Oct 2022 14:54:19 +0800   Tue, 11 Oct 2022 14:57:46 +0800   NodeStatusUnknown   Kubelet stopped posting node status.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看 <code>Pod</code> 状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A</span></span><br><span class="line">NAMESPACE      NAME                                 READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel   kube-flannel-ds-84s24                0/1     Pending   0          22m</span><br><span class="line">kube-flannel   kube-flannel-ds-qzd9g                1/1     Running   1          22m</span><br><span class="line">kube-flannel   kube-flannel-ds-sbtrr                1/1     Running   1          22m</span><br><span class="line">kube-system    coredns-558bd4d5db-8mbl5             1/1     Running   1          105m</span><br><span class="line">kube-system    coredns-558bd4d5db-gzrrx             1/1     Running   1          105m</span><br><span class="line">kube-system    etcd-k8s-master                      1/1     Running   0          105m</span><br><span class="line">kube-system    kube-apiserver-k8s-master            1/1     Running   0          105m</span><br><span class="line">kube-system    kube-proxy-747cx                     1/1     Running   1          103m</span><br><span class="line">kube-system    kube-proxy-8bs8l                     1/1     Running   1          103m</span><br><span class="line">kube-system    kube-proxy-mvqjq                     1/1     Running   0          105m</span><br><span class="line">kube-system    kube-scheduler-k8s-master            1/1     Running   0          105m</span><br></pre></td></tr></table></figure>
<p>结果显示 <code>kube-flannel</code> 位于 master 上的 <code>Pod</code> 状态异常。</p>
<p>查看 <code>kubelet</code> 日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -f -u kubelet</span></span><br><span class="line"> E1011 16:28:53.898132     796 kubelet_node_status.go:93] &quot;Unable to register node with API server&quot; err=&quot;nodes \&quot;k8s-admin\&quot; is forbidden: node \&quot;k8s-master\&quot; is not allowed to modify node \&quot;k8s-admin\&quot;&quot; node=&quot;k8s-admin&quot;</span><br><span class="line"> E1011 16:28:53.900459     796 kubelet.go:2291] &quot;Error getting node&quot; err=&quot;node \&quot;k8s-admin\&quot; not found&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看主机名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hostname status</span></span><br><span class="line"></span><br><span class="line">   Static hostname: k8s-master</span><br><span class="line">Transient hostname: k8s-admin</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: b1527a5456aab241a74a8a3dc31395c0</span><br><span class="line">           Boot ID: f8428003692349298cf2bb9efae8a664</span><br><span class="line">    Virtualization: kvm</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-1160.76.1.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据 <code>kubelet</code> 日志，Kubenetes 节点名称和主机名不一致。修改节点主机名。</p>
<h2 id="集群之外的服务器使用-kubectl-报错"><a href="#集群之外的服务器使用-kubectl-报错" class="headerlink" title="集群之外的服务器使用 kubectl 报错"></a>集群之外的服务器使用 kubectl 报错</h2><p><strong>问题场景</strong>：</p>
<p>将集群的管理配置文件 (<code>/etc/kubernetes/admin.conf</code>) 拷贝到集群之外的服务器，并命名为指定文件 <code>~/.kube/config</code>，修改 <code>~/.kube/config</code> 中 <code>server</code> 的 IP 为 Kubernetes API Server 的实际 IP，使用 <code>kubectl</code> 命令时，报错 <code>Unable to connect to the server: x509: certificate is valid for 10.96.0.1, 10.150.0.21, not </code>。</p>
<p><strong>问题原因</strong>：</p>
<p>报错表示，当使用安全端口 6443 访问 Kubernetes API Server 时，默认证书中的 DNS 包含了 API Server 服务的 CLUSTER-IP 和 服务器的 IP ，如果是云主机，则为云服务器的私有 IP，不包含其公网 IP，如果使用公网 IP 访问 6443 端口，会报此错误</p>
<p>通过以下命令，可以看到默认的 API Server 的 HTTPS 证书中包含的 DNS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /etc/kubernetes/pki</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl x509 -noout -text -<span class="keyword">in</span> apiserver.crt</span></span><br><span class="line">...</span><br><span class="line">    DNS:k8s-master, DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster.local, IP Address:10.96.0.1, IP Address:10.150.0.21</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>解决方法</strong>：</p>
<ul>
<li><p>使用 <code>kubectl</code> 的命令行选项 <code>--insecure-skip-tls-verify</code> 可跳过证书验证。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">Unable to connect to the server: x509: certificate is valid for 10.96.0.1, 10.150.0.21, not 34.150.1.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes --insecure-skip-tls-verify</span></span><br><span class="line"></span><br><span class="line">NAME         STATUS   ROLES                  AGE    VERSION</span><br><span class="line">k8s-master   Ready    control-plane,master   6d5h   v1.21.2</span><br><span class="line">k8s-work1    Ready    &lt;none&gt;                 6d5h   v1.21.2</span><br><span class="line">k8s-work2    Ready    &lt;none&gt;                 6d5h   v1.21.2</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>修改 <code>~/.kube/config</code> 中 <code>server</code> 地址为证书中包含的 DNS 名称，如 <code>k8s-master</code>，并确保域名本地可解析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep server .kube/config</span></span><br><span class="line">  server: https://k8s-master:6443</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">  NAME         STATUS   ROLES                  AGE    VERSION</span><br><span class="line">  k8s-master   Ready    control-plane,master   6d6h   v1.21.2</span><br><span class="line">  k8s-work1    Ready    &lt;none&gt;                 6d6h   v1.21.2</span><br><span class="line">  k8s-work2    Ready    &lt;none&gt;                 6d6h   v1.21.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新生成 API Server 证书</p>
<ol>
<li><p>备份当前证书，并删除 <code>apiserver.crt</code> 和 <code>apiserver.key</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/kubernetes/pki</span><br><span class="line">mkdir /data/k8s/backup/pki</span><br><span class="line">mv apiserver.* /data/k8s/backup/pki/</span><br></pre></td></tr></table></figure></li>
<li><p>生成新的 API Server 证书，默认 SAN 包括 <code>[节点名称 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1]</code>，如果不在此列表中的域名或者 IP 需要添加。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"> $ </span><span class="language-bash">kubeadm init phase certs apiserver \</span></span><br><span class="line"><span class="language-bash">         --apiserver-advertise-address  10.150.0.21 \</span></span><br><span class="line"><span class="language-bash">         --apiserver-cert-extra-sans 34.150.1.1</span></span><br><span class="line">     </span><br><span class="line">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed for DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.150.0.21 34.150.1.1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>10.150.0.21</code> - 为云主机的私有（内网） IP 地址，同时也是 <code>--apiserver-advertise-address</code>，必须要有</li>
<li><code>10.96.0.1</code> - 为 Kubernetes 集群中 API Server 对应的 Service 的 ClusterIP，必须要有</li>
<li><code>34.150.1.1</code> - 为云主机的公网（弹性） IP，是本次要添加的 IP</li>
</ul>
<p>如果还有其他 IP 或者域名，可以参照格式 <code>--apiserver-cert-extra-sans 34.150.1.1</code> 添加。</p>
<p> 命令执行成功后，会生成新的证书。<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls apiserver*</span><br><span class="line">   apiserver.crt              apiserver-etcd-client.key  apiserver-kubelet-client.crt</span><br><span class="line">   apiserver-etcd-client.crt  apiserver.key              apiserver-kubelet-client.key</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>重启 kubelet 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证</p>
<p> 在远端服务器执行以下命令验证效果 </p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -rf .kube/cache/</span><br><span class="line">     </span><br><span class="line">$ grep server .kube/config </span><br><span class="line">  server: https://34.150.1.1:6443</span><br><span class="line">     </span><br><span class="line">$ kubectl get nodes</span><br><span class="line">   NAME                  STATUS   ROLES         AGE    VERSION</span><br><span class="line">   k8s-master   Ready    control-plane,master   6d6h   v1.21.2</span><br><span class="line">   k8s-work1    Ready    &lt;none&gt;                 6d6h   v1.21.2</span><br><span class="line">   k8s-work2    Ready    &lt;none&gt;                 6d6h   v1.21.2</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="kubelet-启动失败"><a href="#kubelet-启动失败" class="headerlink" title="kubelet 启动失败"></a>kubelet 启动失败</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -u kubelet</span></span><br><span class="line">&quot;command failed&quot; err=&quot;failed to run Kubelet: running with swap on is not supported, please disable swap! or set --fail-swap-on flag to false. /proc/swas contained: [Filename\t\t\t\tType\t\tSize\tUsed\tPriority /dev/dm-1</span><br></pre></td></tr></table></figure>
<p>根据 kubelet 服务日志，导致失败的原因为系统启用了 swap，关闭 swap，重新启动正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1.9G        306M        120M        8.7M        1.5G        1.4G</span><br><span class="line">Swap:          3.9G        2.0M        3.9G</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">swapoff -a</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1.9G        350M         71M        9.0M        1.5G        1.4G</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>

<h1 id="其他常用配置"><a href="#其他常用配置" class="headerlink" title="其他常用配置"></a>其他常用配置</h1><h2 id="新增节点"><a href="#新增节点" class="headerlink" title="新增节点"></a>新增节点</h2><p>要为集群新增 worker 节点，参考以下步骤</p>
<ol>
<li>加入前准备工作<br><a href="#kubernetes-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%89%8D%E9%85%8D%E7%BD%AE">参考安装步骤，配置新节点</a></li>
<li>在集群的 master 节点执行以下命令，获取加入集群的命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubeadm token create --print-join-command</span></span><br><span class="line">kubeadm join cluster:6443 --token cuxvrexi24aejb --discovery-token-ca-cert-hash sha256:9e5b71bc392</span><br></pre></td></tr></table></figure></li>
<li>在新节点上执行加入集群的命令 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join cluster:6443 --token cuxvrexi24aejb --discovery-token-ca-cert-hash sha256:9e5b71bc392</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="将-CRI-由-containerd-变更为-Docker"><a href="#将-CRI-由-containerd-变更为-Docker" class="headerlink" title="将 CRI 由 containerd 变更为 Docker"></a>将 CRI 由 <code>containerd</code> 变更为 <code>Docker</code></h2><p>编辑 <code>/var/lib/kubelet/kubeadm-flags.env</code> 文件，在该文件中可以添加 <code>kubelet</code> 启动参数，将 <code>--container-runtime-endpoint</code> 标志，设置为 <code>unix:///var/run/cri-dockerd.sock</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[配置 kubelet 使用 cri-dockerd](https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/migrating-from-dockershim/migrate-dockershim-dockerd/#configure-the-kubelet-to-use-cri-dockerd)">[1]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>/var/lib/kubelet/kubeadm-flags.env</span></figcaption><table><tr><td class="code"><pre><span class="line">KUBELET_KUBEADM_ARGS=&quot;--container-runtime=remote --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock --pod-infra-container-image=registry.k8s.io/pause:3.8&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>kubeadm</code> 工具将节点上的套接字存储为控制面上 <code>Node</code> 对象的注解。 要为每个被影响的节点更改此套接字：</p>
<ol>
<li>编辑 Node 对象的 YAML 表示：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">KUBECONFIG=/path/to/admin.conf kubectl edit no &lt;NODE_NAME&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><code>/path/to/admin.conf</code> ：指向 <code>kubectl</code> 配置文件 <code>admin.conf</code> 的路径；</li>
<li><code>&lt;NODE_NAME&gt;</code> ：你要修改的节点的名称。</li>
</ul>
<ol start="2">
<li>将 <code>kubeadm.alpha.kubernetes.io/cri-socket</code> 标志更改为 <code>unix:///var/run/cri-dockerd.sock</code>；</li>
</ol>
<p>配置完成后，重启 kubelet</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet </span><br></pre></td></tr></table></figure>

<p>查看 node 使用的 CRI</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes -o wide</span></span><br><span class="line">NAME              STATUS   ROLES       AGE    VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME</span><br><span class="line">kubernetes1   Ready    control-plane   7d2h   v1.25.0   172.31.5.58    &lt;none&gt;        CentOS Linux 7 (Core)   5.4.212-1.el7.elrepo.x86_64   docker://20.10.18</span><br><span class="line">kubernetes2   Ready    &lt;none&gt;          7d1h   v1.25.0   172.31.5.68    &lt;none&gt;        CentOS Linux 7 (Core)   5.4.212-1.el7.elrepo.x86_64   docker://20.10.18</span><br><span class="line">kubernetes3   Ready    &lt;none&gt;          7d1h   v1.25.0   172.31.0.230   &lt;none&gt;        CentOS Linux 7 (Core)   5.4.212-1.el7.elrepo.x86_64   docker://20.10.18</span><br></pre></td></tr></table></figure>

<h2 id="修改-kubelet-使用的-CRI-为-containerd"><a href="#修改-kubelet-使用的-CRI-为-containerd" class="headerlink" title="修改 kubelet 使用的 CRI 为 containerd"></a>修改 kubelet 使用的 CRI 为 containerd</h2><p>修改之前，<code>kubelet</code> 使用的 CRI 为 <code>cri-docker</code>。修改步骤如下</p>
<ol>
<li><p>修改 kubelet 配置及相关节点配置。</p>
<p>编辑相关节点上的 kubelet 配置文件 <code>/var/lib/kubelet/kubeadm-flags.env</code> 修改 <code>--container-runtime-endpoint</code> 为 <code>containerd</code> 的 socket 地址</p>
 <figure class="highlight shell"><figcaption><span>/var/lib/kubelet/kubeadm-flags.env</span></figcaption><table><tr><td class="code"><pre><span class="line">--container-runtime-endpoint=unix:///run/containerd/containerd.sock</span><br></pre></td></tr></table></figure></li>
<li><p>在 Master 节点上，执行以下命令，编辑相关节点配置，修改配置 <code>kubeadm.alpha.kubernetes.io/cri-socket: unix:///run/containerd/containerd.sock</code> <sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[配置 kubelet 使用 containerd 作为其容器运行时](https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/migrating-from-dockershim/change-runtime-containerd/#%E9%85%8D%E7%BD%AE-kubelet-%E4%BD%BF%E7%94%A8-containerd-%E4%BD%9C%E4%B8%BA%E5%85%B6%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6)">[9]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl edit node master2</span></span><br><span class="line">kubeadm.alpha.kubernetes.io/cri-socket: unix:///run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启相关服务，无需使用 <code>docker</code> 时可停止 <code>docker</code> 服务</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart containerd  &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果启动 <code>kubelet</code> 失败，报错误： <code>Error: failed to run Kubelet: failed to create kubelet: get remote runtime typed version failed: rpc error: code = Unimplemented desc = unknown service runtime.v1alpha2.RuntimeService</code>，删除 <code>containerd</code> 的默认配置文件 <code>/etc/containerd/config.toml</code> 后，重新启动 <sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Kubeadm unknown service runtime.v1alpha2.RuntimeService](https://github.com/containerd/containerd/issues/4581)">[10]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/containerd/config.toml</span><br></pre></td></tr></table></figure></blockquote>
</li>
</ol>
<h2 id="修改-Service-可使用的-nodePort-端口范围"><a href="#修改-Service-可使用的-nodePort-端口范围" class="headerlink" title="修改 Service 可使用的 nodePort 端口范围"></a>修改 Service 可使用的 nodePort 端口范围</h2><p>默认情况下，<code>Service</code> 中可使用的 <code>nodePort</code> 端口的默认范围为 <code>30000-32767</code>，要修改此配置，参考以下步骤。</p>
<p>Master 节点上编辑 kube-apiserver 的 <code>Pod</code> 配置文件 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code>，在 <code>.spec.containers.command</code> 下添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- --service-node-port-range=1-65535</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_60.png"></p>
<p><code>apiserver</code> 是以静态 <code>Pod</code> 的形式运行，<code>/etc/kubernetes/manifests</code> 目录下是所有静态 <code>Pod</code> 文件的定义，<code>kubelet</code> 会监控该目录下文件的变动，只要发生变化，<code>Pod</code> 就会重建，响应相应的改动。所以我们修改 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code> 文件，添加 <code>nodePort</code> 范围参数后会自动生效，无需进行其他操作</p>
<p><strong>高可用场景下，所有 Master 节点上都要修改，否则可能遇到部分时候依然报错： <code>nodePort: Invalid value: 65500: provided port is not in the valid range. The range of valid ports is 30000-32767</code></strong></p>
<h2 id="开启-corndns-日志记录"><a href="#开启-corndns-日志记录" class="headerlink" title="开启 corndns 日志记录"></a>开启 corndns 日志记录</h2><p>默认的 coredns 配置没有开启日志插件，这导致 kubernetes 集群中一些 dns 解析超时问题难以定位。要打开 coredns 的日志功能，可以通过以下命令开启日志功能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl edit configmap -n kube-system  coredns</span><br></pre></td></tr></table></figure>
<p>添加以下配置：<br><img src="https://i.csms.tech/img_66.png"></p>
<p>接下来我们再使用命令查看日志，就可以看到 dns 解析的记录，无需重启 coredns</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs -f -n kube-system coredns-558bd4d5db-z6mst</span></span><br><span class="line">...</span><br><span class="line">[INFO] 10.244.2.23:39830 - 37988 &quot;A IN raw.githubusercontent.com.google.internal. udp 59 false 512&quot; NXDOMAIN qr,aa,rd,ra 164 0.000065843s</span><br><span class="line">[INFO] 10.244.2.23:56581 - 52144 &quot;A IN raw.githubusercontent.com. udp 43 false 512&quot; NOERROR qr,aa,rd,ra 207 0.000133489s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="升级-cri-dockerd"><a href="#升级-cri-dockerd" class="headerlink" title="升级 cri-dockerd"></a>升级 cri-dockerd</h2><p>如果需要升级 <code>cri-dockerd</code> 版本，可以执行以下操作，如果之前的安装目录还在，则直接 <code>git pull</code> 更新代码，否则 clone 代码 <sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[cri-dockerd 安装链接](https://github.com/Mirantis/cri-dockerd)">[11]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd cri-dockerd</span><br><span class="line">git pull</span><br><span class="line">make cri-dockerd</span><br><span class="line"></span><br><span class="line">install -o root -g root -m 0755 cri-dockerd /usr/local/bin/cri-dockerd</span><br><span class="line"></span><br><span class="line">install packaging/systemd/* /etc/systemd/system</span><br><span class="line">sed -i -e &#x27;s,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,&#x27; /etc/systemd/system/cri-docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 iptables 替换 firewalld</span></span><br><span class="line">sed -i -e &#x27;s,firewalld.service,iptables.service,&#x27; /etc/systemd/system/cri-docker.service</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable cri-docker.service --now</span><br><span class="line">systemctl enable --now cri-docker.socket</span><br></pre></td></tr></table></figure>

<h2 id="添加-Harbor-私有镜像仓库的认证信息"><a href="#添加-Harbor-私有镜像仓库的认证信息" class="headerlink" title="添加 Harbor 私有镜像仓库的认证信息"></a>添加 Harbor 私有镜像仓库的认证信息</h2><p>在命令行上提供凭证来创建 Secret <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[在命令行上提供凭证来创建 Secret](https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-secret-by-providing-credentials-on-the-command-line)">[3]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create secret docker-registry $&#123;secretname&#125; \</span><br><span class="line">  --namespace default</span><br><span class="line">  --docker-server=https://index.docker.io/v1/ \</span><br><span class="line">  --docker-username=&lt;你的用户名&gt; \</span><br><span class="line">  --docker-password=&lt;你的密码&gt; \</span><br><span class="line">  --docker-email=&lt;你的邮箱地址&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;your-registry-server&gt;</code> 是你的私有 Docker 仓库全限定域名（FQDN）。 DockerHub 使用 <code>https://index.docker.io/v1/</code>。</li>
<li><code>&lt;your-name&gt;</code> 是你的 Docker 用户名。</li>
<li><code>&lt;your-pword&gt;</code> 是你的 Docker 密码。</li>
<li><code>&lt;your-email&gt;</code> 是你的 Docker 邮箱。</li>
</ul>
<p>这样你就成功地将集群中的 Docker 凭证设置为名为 <code>$&#123;secretname&#125;</code> 的 Secret。</p>
<p>Secret 属于 namespace 级别的资源，不能跨 namespace 使用。</p>
<p>检查创建的 Secret</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get secret <span class="variable">$&#123;secretname&#125;</span> --output=yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  .dockerconfigjson: eyJhdXRocfX19</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2022-11-04T08:55:51Z&quot;</span><br><span class="line">  name: $&#123;secretname&#125;</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: &quot;1679647&quot;</span><br><span class="line">  uid: a780ac6d-9525-4620-a171-b818021cc6ca</span><br><span class="line">type: kubernetes.io/dockerconfigjson</span><br></pre></td></tr></table></figure>

<p><code>.dockerconfigjson</code> 字段的值是 Docker 凭证的 base64 表示。要了解 <code>dockerconfigjson</code> 字段中的内容，请将 Secret 数据转换为可读格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get secret <span class="variable">$&#123;secretname&#125;</span> --output=<span class="string">&quot;jsonpath=&#123;.data.\.dockerconfigjson&#125;&quot;</span> | <span class="built_in">base64</span> --decode</span></span><br><span class="line">&#123;&quot;auths&quot;:&#123;&quot;https://harbor1.my.com&quot;:&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;password&quot;,&quot;email&quot;:&quot;docker@q.com&quot;,&quot;auth&quot;:&quot;YWRdsUQ==&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置-Pod-拉取镜像的认证信息"><a href="#配置-Pod-拉取镜像的认证信息" class="headerlink" title="配置 Pod 拉取镜像的认证信息"></a>配置 Pod 拉取镜像的认证信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get secret -n frtg</span></span><br><span class="line">NAME                   TYPE                             DATA   AGE</span><br><span class="line">harbor1.1dergegh.com   kubernetes.io/dockerconfigjson   1      157d</span><br></pre></td></tr></table></figure>

<p>在 namespace 中配置了镜像仓库的 Secret 后，可以使用以下方法配置 Pod 拉取镜像时的认证信息</p>
<ol>
<li><p>在 Pod 的配置中使用 <code>imagePullSecrets</code> 指令，此种方式需要在每个 Pod 的配置中添加</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: $&#123;NAME&#125;</span><br><span class="line">  namespace: $&#123;NAMESPACE&#125;</span><br><span class="line">spec:</span><br><span class="line">  restartPolicy: Always</span><br><span class="line">  containers:</span><br><span class="line">  - name: $&#123;NAME&#125;</span><br><span class="line">    image: nginx:1.14.2</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line">      name: http-web</span><br><span class="line">      </span><br><span class="line">  imagePullSecrets:</span><br><span class="line">  - name: $&#123;secret_name&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通过 ServiceAccount 配置</p>
<p> 每个 namespace 都有个默认的 <a href="/202305161451/" title="ServiceAccount">ServiceAccount</a>，namespace 中的所有 Pod 默认情况下都会关联到此 ServiceAccount，ServiceAccount 的配置中包含了 <code>Image pull secrets</code>，在 ServiceAccount 中添加的镜像拉取密钥，会自动添加到所有使用这个 ServiceAccount 的 Pod 中。因此，向 ServiceAccount 中添加镜像拉取密钥可以不必对每个 Pod 都单独进行镜像拉取密钥的配置。 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[为服务账号添加 ImagePullSecrets](https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account)">[8]</span></a></sup></p>
<p> 执行命令 <code>kubectl edit serviceaccount default</code> 编辑默认的 ServiceAccount，删掉包含 <code>resourceVersion</code> 主键的行，添加包含 <code>imagePullSecrets:</code> 的行并保存文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2022-12-06T09:51:03Z&quot;</span><br><span class="line">  name: default</span><br><span class="line">  namespace: default</span><br><span class="line">  uid: b219bafc-e2f9-48bb-a9e4-6e0bfb4ab536</span><br><span class="line">imagePullSecrets:</span><br><span class="line">  - name: harbor1.1dergegh.com</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Pod-添加-hosts"><a href="#Pod-添加-hosts" class="headerlink" title="Pod 添加 hosts"></a>Pod 添加 hosts</h2><p>有时需要在启动 Pod 时为其 <code>/etc/hosts</code> 中添加解析，以覆盖对主机名的解析，此时可以通过 <code>PodSpec</code> 的 <code>HostAliases</code> 字段来 <strong>添加这些自定义条目</strong> <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用 HostAliases 向 Pod /etc/hosts 文件添加条目](https://kubernetes.io/zh-cn/docs/tasks/network/customize-hosts-file-for-pods/)">[4]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: hostaliases-pod</span><br><span class="line">spec:</span><br><span class="line">  restartPolicy: Never</span><br><span class="line">  hostAliases:</span><br><span class="line">  - ip: &quot;127.0.0.1&quot;</span><br><span class="line">    hostnames:</span><br><span class="line">    - &quot;foo.local&quot;</span><br><span class="line">    - &quot;bar.local&quot;</span><br><span class="line">  - ip: &quot;10.1.2.3&quot;</span><br><span class="line">    hostnames:</span><br><span class="line">    - &quot;foo.remote&quot;</span><br><span class="line">    - &quot;bar.remote&quot;</span><br><span class="line">  containers:</span><br><span class="line">  - name: cat-hosts</span><br><span class="line">    image: busybox:1.28</span><br><span class="line">    command:</span><br><span class="line">    - cat</span><br><span class="line">    args:</span><br><span class="line">    - &quot;/etc/hosts&quot;</span><br></pre></td></tr></table></figure>

<h2 id="配置-Pod-中的时区和时间"><a href="#配置-Pod-中的时区和时间" class="headerlink" title="配置 Pod 中的时区和时间"></a>配置 Pod 中的时区和时间</h2><p><a href="https://www.cnblogs.com/ssgeek/p/15192028.html">关于 OS 中的时间及时区的说明</a></p>
<p>通常情况下，我们的环境中，宿主机都是配置为 CST 时间（东八区），而使用的基础镜像中的默认时间都是 UTC 时间，而不是本地时间，通常需要确保系统中所有的时间格式一致，需将容器中的时间也修改为 CST 时间。</p>
<p>为此可使用以下方法中的一种来实现</p>
<ul>
<li><p>在 Dockerfile 中添加时区</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Set timezone</span><br><span class="line">RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span><br><span class="line">           &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br></pre></td></tr></table></figure></li>
<li><p>将时区文件挂载到 Pod 中</p>
<p>  在定义 Pod 上层控制器的时候，添加一个用于挂载时区的卷，挂载宿主机的时区文件</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line">containers:</span><br><span class="line">- name: xxx</span><br><span class="line">  ...</span><br><span class="line">  volumeMounts:</span><br><span class="line">    - name: timezone</span><br><span class="line">      mountPath: /etc/localtime</span><br><span class="line">volumes:</span><br><span class="line">  - name: timezone</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /usr/share/zoneinfo/Asia/Shanghai</span><br></pre></td></tr></table></figure></li>
<li><p>通过环境变量定义时区</p>
<p>  在定义 Pod 上层控制器的时候，添加一个用于指定时区的环境变量</p>
<p>  <code>TZ</code> 环境变量用于设置时区。它由各种时间函数用于计算相对于全球标准时间 UTC（以前称为格林威治标准时间 GMT）的时间。格式由操作系统指定</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line">containers:</span><br><span class="line">- name: xxx</span><br><span class="line">  ...</span><br><span class="line">  env:</span><br><span class="line">  - name: TZ</span><br><span class="line">    value: Asia/Shanghai</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="配置节点允许启动的最大-Pod-数"><a href="#配置节点允许启动的最大-Pod-数" class="headerlink" title="配置节点允许启动的最大 Pod 数"></a>配置节点允许启动的最大 Pod 数</h2><p>在 K8S 集群中，默认每个 Worker 节点最大可创建 110 个 Pod，实际可以根据节点资源情况调整范围。</p>
<p>在 Woker 节点上，可创建的最大的 Pod 数量是作为 Kubelet 的启动参数出现的，因此修改 Kubelet 服务的配置文件增加 <code>--max-pod</code> 参数即可。</p>
<p>修改 <code>kubelet</code> 服务的启动文件 <code>/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf</code>，添加以下环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Environment=&quot;KUBELET_NODE_MAX_PODS=--max-pods=200&quot;</span><br></pre></td></tr></table></figure>
<p>将新加的环境变量追加到 <code>/usr/bin/kubelet</code> 中</p>
<figure class="highlight shell"><figcaption><span>/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"> Note: This dropin only works with kubeadm and kubelet v1.11+</span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&quot;</span><br><span class="line">Environment=&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">Environment=&quot;KUBELET_EVICT_NODEFS_THRESHOLD_ARGS=--eviction-hard=nodefs.available&lt;5%&quot;</span><br><span class="line">Environment=&quot;KUBELET_NODE_MAX_PODS=--max-pods=200&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is a file that <span class="string">&quot;kubeadm init&quot;</span> and <span class="string">&quot;kubeadm join&quot;</span> generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically</span></span><br><span class="line">EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is a file that the user can use <span class="keyword">for</span> overrides of the kubelet args as a last resort. Preferably, the user should use</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the .NodeRegistration.KubeletExtraArgs object <span class="keyword">in</span> the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.</span></span><br><span class="line">EnvironmentFile=-/etc/sysconfig/kubelet</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS $KUBELET_EVICT_NODEFS_THRESHOLD_ARGS $KUBELET_NODE_MAX_PODS</span><br></pre></td></tr></table></figure>

<h2 id="重置集群"><a href="#重置集群" class="headerlink" title="重置集群"></a>重置集群</h2><p>要重置集群配置，可以参考以下步骤 <sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[清理](https://v1-25.docs.kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down)
">[7]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubeadm reset --cri-socket=unix:///var/run/cri-dockerd.sock</span></span><br><span class="line">[reset] Reading configuration from the cluster...</span><br><span class="line">[reset] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class="line">W0428 15:31:57.928077   38272 reset.go:103] [reset] Unable to fetch the kubeadm-config ConfigMap from cluster: failed to get config map: configmaps &quot;kubeadm-config&quot; not found</span><br><span class="line">W0428 15:31:57.928210   38272 preflight.go:55] [reset] WARNING: Changes made to this host by &#x27;kubeadm init&#x27; or &#x27;kubeadm join&#x27; will be reverted.</span><br><span class="line">[reset] Are you sure you want to proceed? [y/N]: y</span><br><span class="line">W0428 15:32:05.851830   38272 removeetcdmember.go:85] [reset] No kubeadm config, using etcd pod spec to get data directory</span><br><span class="line">[reset] Stopping the kubelet service</span><br><span class="line">[reset] Unmounting mounted directories in &quot;/var/lib/kubelet&quot;</span><br><span class="line">[reset] Deleting contents of directories: [/etc/kubernetes/manifests /etc/kubernetes/pki]</span><br><span class="line">[reset] Deleting files: [/etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/bootstrap-kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf]</span><br><span class="line">[reset] Deleting contents of stateful directories: [/var/lib/etcd /var/lib/kubelet]</span><br><span class="line"></span><br><span class="line">The reset process does not clean CNI configuration. To do so, you must remove /etc/cni/net.d</span><br><span class="line"></span><br><span class="line">The reset process does not reset or clean up iptables rules or IPVS tables.</span><br><span class="line">If you wish to reset iptables, you must do so manually by using the &quot;iptables&quot; command.</span><br><span class="line"></span><br><span class="line">If your cluster was setup to utilize IPVS, run ipvsadm --clear (or similar)</span><br><span class="line">to reset your system&#x27;s IPVS tables.</span><br><span class="line"></span><br><span class="line">The reset process does not clean your kubeconfig files and you must remove them manually.</span><br><span class="line">Please, check the contents of the $HOME/.kube/config file.</span><br></pre></td></tr></table></figure>

<h2 id="部署-kube-state-metrics-组件"><a href="#部署-kube-state-metrics-组件" class="headerlink" title="部署 kube-state-metrics 组件"></a>部署 kube-state-metrics 组件</h2><p><code>kube-state-metrics</code> 是一个用于导出 Kubernetes 集群的资源状态指标的开源项目，通过监听 API Server 生成有关资源对象(如 <code>Deployment</code>、<code>Node</code>、<code>Pod</code>)的状态指标，需要注意的是 <code>kube-state-metrics</code> 只是简单的提供一个 <code>metrics</code> 数据，并不会存储这些指标数据，所以我们可以使用 Prometheus 来抓取这些数据然后存储，主要关注的是业务相关的一些元数据，比如 <code>Deployment</code>、<code>Pod</code>、<code>RepliSet</code> 的状态等指标。</p>
<p><a href="https://github.com/kubernetes/kube-state-metrics/releases">下载链接</a> 下载对应版本的部署文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://github.com/kubernetes/kube-state-metrics/archive/refs/tags/v2.6.0.tar.gz</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -xf v2.6.0.tar.gz</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> kube-state-metrics-2.6.0/examples/standard/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f cluster-role.yaml</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f cluster-role-binding.yaml</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f service-account.yaml</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f deployment.yaml</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f service.yaml</span></span><br></pre></td></tr></table></figure>
<p>参考以上步骤部署后，会生成 <code>kube-state-metrics</code> 所需要的资源：<code>ClusterRole</code>、<code>ClusterRoleBinding</code>、<code>ServiceAccount</code>、<code>Deployment</code>、<code>Service</code></p>
<p>部署成功后，查看生成的 <code>Service</code>，会看到是一个 <a href="https://csms.tech/202209241108/#无头服务（Headless-Services）">Headless 的服务</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get services -n kube-system</span></span><br><span class="line">NAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">kube-dns             ClusterIP   10.96.0.10     &lt;none&gt;        53/UDP,53/TCP,9153/TCP   180d</span><br><span class="line">kube-state-metrics   ClusterIP   None           &lt;none&gt;        8080/TCP,8081/TCP        16m</span><br><span class="line">metrics-server       ClusterIP   10.99.58.171   &lt;none&gt;        443/TCP                  10d</span><br></pre></td></tr></table></figure>

<p>登陆一个 Pod，尝试在 Pod 中访问 <code>kube-state-metrics</code> 提供 Metrics 的 url （<code>kube-state-metrics.kube-system.svc.cluster.local:8080/metrics</code>）。对应的 Service 的 FQDN 为 <code>kube-state-metrics.kube-system.svc.cluster.local</code>，查看其解析，根据 <code>Headless Service</code> 的原理，会解析成 <code>kube-state-metrics</code> 的 Pod 的 IP。正常情况下会获取到 <code>kube-state-metrics</code> 监控的指标数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping kube-state-metrics.kube-system.svc.cluster.local</span></span><br><span class="line">PING kube-state-metrics.kube-system.svc.cluster.local (10.244.4.178) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10-244-4-178.kube-state-metrics.kube-system.svc.cluster.local (10.244.4.178): icmp_seq=1 ttl=62 time=0.160 ms</span><br><span class="line">64 bytes from 10-244-4-178.kube-state-metrics.kube-system.svc.cluster.local (10.244.4.178): icmp_seq=2 ttl=62 time=0.146 ms</span><br><span class="line">64 bytes from 10-244-4-178.kube-state-metrics.kube-system.svc.cluster.local (10.244.4.178): icmp_seq=3 ttl=62 time=0.143 ms</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl kube-state-metrics.kube-system.svc.cluster.local:8080/metrics</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE kube_certificatesigningrequest_annotations gauge</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HELP kube_certificatesigningrequest_labels Kubernetes labels converted to Prometheus labels.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE kube_certificatesigningrequest_labels gauge</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HELP kube_certificatesigningrequest_created Unix creation timestamp</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE kube_certificatesigningrequest_created gauge</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HELP kube_certificatesigningrequest_condition The number of each certificatesigningrequest condition</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE kube_certificatesigningrequest_condition gauge</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HELP kube_certificatesigningrequest_cert_length Length of the issued cert</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE kube_certificatesigningrequest_cert_length gauge</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HELP kube_configmap_annotations Kubernetes annotations converted to Prometheus labels.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE kube_configmap_annotations gauge</span></span><br><span class="line">kube_configmap_annotations&#123;namespace=&quot;cattle-impersonation-system&quot;,configmap=&quot;kube-root-ca.crt&quot;&#125; 1</span><br><span class="line">kube_configmap_annotations&#123;namespace=&quot;fleet-local&quot;,configmap=&quot;kube-root-ca.crt&quot;&#125; 1</span><br><span class="line">kube_configmap_annotations&#123;namespace=&quot;telegram-stream&quot;,configmap=&quot;kube-root-ca.crt&quot;&#125; 1</span><br><span class="line">kube_configmap_annotations&#123;namespace=&quot;cattle-system&quot;,configmap=&quot;admincreated&quot;&#125; 1</span><br><span class="line">kube_configmap_annotations&#123;namespace=&quot;cattle-fleet-system&quot;,configmap=&quot;gitjob&quot;&#125; 1</span><br><span class="line">kube_configmap_annotations&#123;namespace=&quot;cattle-system&quot;,configmap=&quot;forcesystemnamespaceassignment&quot;&#125; 1</span><br><span class="line">kube_configmap_annotations&#123;namespace=&quot;kube-flannel&quot;,configmap=&quot;kube-flannel-cfg&quot;&#125; 1</span><br><span class="line">kube_configmap_annotations&#123;namespace=&quot;p-76mvn&quot;,configmap=&quot;kube-root-ca.crt&quot;&#125; 1</span><br><span class="line">kube_configmap_annotations&#123;namespace=&quot;p-gqxm4&quot;,configmap=&quot;kube-root-ca.crt&quot;&#125; 1</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="集群证书过期后的处理步骤"><a href="#集群证书过期后的处理步骤" class="headerlink" title="集群证书过期后的处理步骤"></a>集群证书过期后的处理步骤</h2><p>假如集群 TLS 证书过期或者需要更新，可以参考以下步骤更新</p>
<ol>
<li><p>确定集群证书状态</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubeadm certs check-expiration</span></span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class="line">[check-expiration] Error reading configuration from the Cluster. Falling back to default configuration</span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Sep 26, 2023 01:43 UTC   &lt;invalid&gt;                               no      </span><br><span class="line">apiserver                  Sep 26, 2023 01:43 UTC   &lt;invalid&gt;       ca                      no      </span><br><span class="line">apiserver-etcd-client      Sep 26, 2023 01:43 UTC   &lt;invalid&gt;       etcd-ca                 no      </span><br><span class="line">apiserver-kubelet-client   Sep 26, 2023 01:43 UTC   &lt;invalid&gt;       ca                      no      </span><br><span class="line">controller-manager.conf    Sep 26, 2023 01:43 UTC   &lt;invalid&gt;                               no      </span><br><span class="line">etcd-healthcheck-client    Sep 26, 2023 01:43 UTC   &lt;invalid&gt;       etcd-ca                 no      </span><br><span class="line">etcd-peer                  Sep 26, 2023 01:43 UTC   &lt;invalid&gt;       etcd-ca                 no      </span><br><span class="line">etcd-server                Sep 26, 2023 01:43 UTC   &lt;invalid&gt;       etcd-ca                 no      </span><br><span class="line">front-proxy-client         Sep 26, 2023 01:43 UTC   &lt;invalid&gt;       front-proxy-ca          no      </span><br><span class="line">scheduler.conf             Sep 26, 2023 01:43 UTC   &lt;invalid&gt;                               no      </span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Sep 23, 2032 01:43 UTC   8y              no      </span><br><span class="line">etcd-ca                 Sep 23, 2032 01:43 UTC   8y              no      </span><br><span class="line">front-proxy-ca          Sep 23, 2032 01:43 UTC   8y              no</span><br></pre></td></tr></table></figure>
</li>
<li><p>备份集群证书。<br> 备份 <code>/etc/kubernetes/</code> 目录，确保在任何出现问题的情况下都可以恢复</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp -r /etc/kubernetes /etc/kubernetes-backup</span><br></pre></td></tr></table></figure></li>
<li><p>在每个 Master 节点上更新证书</p>
<ul>
<li>更新单个证书。如果只想更新特定的证书，可以使用 <code>kubeadm alpha certs renew</code> 命令。例如，要更新 <code>apiserver</code> 的证书，可以执行： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo kubeadm certs renew apiserver</span><br></pre></td></tr></table></figure></li>
<li>更新所有证书 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># kubeadm certs renew all</span><br><span class="line">[renew] Reading configuration from the cluster...</span><br><span class="line">[renew] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class="line">[renew] Error reading configuration from the Cluster. Falling back to default configuration</span><br><span class="line"></span><br><span class="line">certificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewed</span><br><span class="line">certificate for serving the Kubernetes API renewed</span><br><span class="line">certificate the apiserver uses to access etcd renewed</span><br><span class="line">certificate for the API server to connect to kubelet renewed</span><br><span class="line">certificate embedded in the kubeconfig file for the controller manager to use renewed</span><br><span class="line">certificate for liveness probes to healthcheck etcd renewed</span><br><span class="line">certificate for etcd nodes to communicate with each other renewed</span><br><span class="line">certificate for serving etcd renewed</span><br><span class="line">certificate for the front proxy client renewed</span><br><span class="line">certificate embedded in the kubeconfig file for the scheduler manager to use renewed</span><br><span class="line"></span><br><span class="line">Done renewing certificates. You must restart the kube-apiserver, kube-controller-manager, kube-scheduler and etcd, so that they can use the new certificates.</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>重启<strong>所有节点上的 <code>kubelet</code> 服务</strong>，以及 <code>kube-controller-manager</code>, <code>kube-scheduler</code>, <code>kube-apiserver</code></p>
</li>
<li><p>确定集群证书状态</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubeadm certs check-expiration</span></span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Sep 26, 2024 09:45 UTC   364d                                    no      </span><br><span class="line">apiserver                  Sep 26, 2024 09:45 UTC   364d            ca                      no      </span><br><span class="line">apiserver-etcd-client      Sep 26, 2024 09:45 UTC   364d            etcd-ca                 no      </span><br><span class="line">apiserver-kubelet-client   Sep 26, 2024 09:45 UTC   364d            ca                      no      </span><br><span class="line">controller-manager.conf    Sep 26, 2024 09:45 UTC   364d                                    no      </span><br><span class="line">etcd-healthcheck-client    Sep 26, 2024 09:45 UTC   364d            etcd-ca                 no      </span><br><span class="line">etcd-peer                  Sep 26, 2024 09:45 UTC   364d            etcd-ca                 no      </span><br><span class="line">etcd-server                Sep 26, 2024 09:45 UTC   364d            etcd-ca                 no      </span><br><span class="line">front-proxy-client         Sep 26, 2024 09:45 UTC   364d            front-proxy-ca          no      </span><br><span class="line">scheduler.conf             Sep 26, 2024 09:45 UTC   364d                                    no      </span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Sep 23, 2032 01:43 UTC   8y              no      </span><br><span class="line">etcd-ca                 Sep 23, 2032 01:43 UTC   8y              no      </span><br><span class="line">front-proxy-ca          Sep 23, 2032 01:43 UTC   8y              no</span><br></pre></td></tr></table></figure>
<blockquote>
<p><em><strong>如果集群证书更新后，Pod 内需要使用到集群证书，如果需要立即更新证书，需要重启节点上的 <code>kubelet</code> 服务，否则如果未重启节点上的 <code>kubelet</code> 服务，即使重启 Pod，Pod 使用的依旧是未更新的证书</strong></em></p>
</blockquote>
</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/">Kubernetes 官网文档</a><br><a href="https://github.com/Mirantis/cri-dockerd">cri-dockerd 安装链接</a><br><a href="https://juejin.cn/post/6844904148001882120">Centos7 集群部署k8s 版本v1.17.4及Dashboard </a><br><a href="https://github.com/kubernetes/dashboard/tree/master/docs">kubernetes-dashboard 配置官网说明</a><br><a href="https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/">部署和访问 Kubernetes 仪表板（Dashboard）</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/migrating-from-dockershim/migrate-dockershim-dockerd/#configure-the-kubelet-to-use-cri-dockerd">配置 kubelet 使用 cri-dockerd</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/high-availability/#%E4%B8%BA-kube-apiserver-%E5%88%9B%E5%BB%BA%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8">为 kube-apiserver 创建负载均衡器</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-secret-by-providing-credentials-on-the-command-line">在命令行上提供凭证来创建 Secret</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/tasks/network/customize-hosts-file-for-pods/">使用 HostAliases 向 Pod /etc/hosts 文件添加条目</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/kubernetes-sigs/metrics-server">Kubernetes Metrics Server</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://v1-25.docs.kubernetes.io/zh-cn/docs/reference/networking/ports-and-protocols/">端口和协议</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://v1-25.docs.kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down">清理</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account">为服务账号添加 ImagePullSecrets</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/migrating-from-dockershim/change-runtime-containerd/#%E9%85%8D%E7%BD%AE-kubelet-%E4%BD%BF%E7%94%A8-containerd-%E4%BD%9C%E4%B8%BA%E5%85%B6%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6">配置 kubelet 使用 containerd 作为其容器运行时</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/containerd/containerd/issues/4581">Kubeadm unknown service runtime.v1alpha2.RuntimeService</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/Mirantis/cri-dockerd">cri-dockerd 安装链接</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/#manual-certs">Manual certificate distribution</a><a href="#fnref:12" rev="footnote"> ↩</a></span></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">13.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/architecture/cgroups/">About cgroup v2</a><a href="#fnref:13" rev="footnote"> ↩</a></span></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">14.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/docs/concepts/workloads/pods/user-namespaces/">User Namespaces</a><a href="#fnref:14" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Pod</title>
    <url>/202304271425/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Pod 是由一个或多个容器构成的集合，被 Kubernetes 作为一个整体进行部署和调度，是 Kubernetes 调度的最小单元。同一个 Pod 内的容器共享 <a href="/202304031317/" title="network namespace">network namespace</a>、<a href="/202304191340/" title="UTS nanespace">UTS nanespace</a></p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7</li>
<li>Kubernetes v1.24.7</li>
</ul>
<h1 id="Pod-创建过程"><a href="#Pod-创建过程" class="headerlink" title="Pod 创建过程"></a>Pod 创建过程</h1><p>当用户在 Kubernetes 中创建了一个 Pod 后，CRI 和 CNI 协同创建 Pod 所属容器，并为 Pod 中的容器初始化网络协议栈的具体过程如下<br><img src="https://i.csms.tech/img_139.png"></p>
<ol>
<li><p>用户在 Kubernetes 中创建了一个 Pod 后，Kubelet 接收到创建新 Pod 的任务，首先调用 CRI 创建 Pod 内的容器</p>
</li>
<li><p>Pod 中第一个被创建的容器是 <code>pause</code> 容器。<code>pause</code> 容器中运行着一个功能非常简单的 C 程序，具体逻辑是把自己永远阻塞，没有实际的业务逻辑，主要功能是用来占用一个  <a href="/202304031317/" title="network namespace">network namespace</a>。</p>
<p> 创建 <code>pause</code> 容器，使用 <a href="https://csms.tech/202208301536/#None-模式">docker none 网络模式</a>，创建出来的容器除了 lo 回环网卡外没有其他网络设备。</p>
</li>
<li><p>Pod 内的其他用户容器通过加入 <code>pause</code> 容器已占用的 network namespace 的方式共享同一个 network namespace。对应于 docker 的 <a href="https://csms.tech/202208301536/#Container-模式">Container 模式</a></p>
<p> 其他用户容器都使用 <code>pause</code> 容器的主机名，但并不使用同一个 UTS namespace。</p>
</li>
<li><p>CNI 负责 Pod 中容器的网络初始化工作。主要为 Pod 内的 <code>pause</code> 容器添加 <code>eth0</code> 网卡、分配 IP、配置网关等。</p>
</li>
</ol>
<h1 id="pause-容器"><a href="#pause-容器" class="headerlink" title="pause 容器"></a>pause 容器</h1><p><code>pause</code> 容器是 Pod 中被创建的第一个容器，Pod 中的其他容器通过使用 <code>pause</code> 容器的 network namespace 共享网络协议栈和主机名。它是 Pod 中其他容器的父容器。</p>
<blockquote>
<p>1.8 以后版本默认不启用 PID namespace 共享。每个容器拥有独立的 PID namespace。</p>
</blockquote>
<p>以下步骤通过 docker 演示 Pod 容器创建的整个过程。首先，创建 <code>pause</code> 容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name=test-pause \</span><br><span class="line">	--hostname=test-pause \</span><br><span class="line">	--network=none \</span><br><span class="line">	--workdir=/ \</span><br><span class="line">	--log-opt max-size=100m \</span><br><span class="line">	--runtime=runc \</span><br><span class="line">	--detach=true \</span><br><span class="line">	k8s.gcr.io/pause:3.4.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后在 Pod 中运行其他容器，本示例启动 2 个应用容器，一个 nginx 容器，里面启动了 nginx 服务，一个自定义的容器，里面包含常用工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name=pod_nginx_test \</span></span><br><span class="line"><span class="language-bash">             --network=container:0eec8dd9d164 \</span></span><br><span class="line"><span class="language-bash">             --restart=no --log-opt max-size=100m \</span></span><br><span class="line"><span class="language-bash">             --runtime=runc --detach=<span class="literal">true</span> \</span></span><br><span class="line"><span class="language-bash">             nginx</span></span><br><span class="line">             </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name=pod_centos_test \</span></span><br><span class="line"><span class="language-bash">             --network=container:0eec8dd9d164 \</span></span><br><span class="line"><span class="language-bash">             --restart=no --log-opt max-size=100m \</span></span><br><span class="line"><span class="language-bash">             --runtime=runc --detach=<span class="literal">true</span> \</span></span><br><span class="line"><span class="language-bash">             centos7:my ping 127.1</span>             </span><br><span class="line">             </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">54d57add44d2   centos7:my               &quot;ping 127.1&quot;             3 seconds ago    Up 2 seconds              pod_centos_test</span><br><span class="line">cd0c661774e2   nginx                    &quot;/docker-entrypoint.…&quot;   2 minutes ago    Up 2 minutes              pod_nginx_test</span><br><span class="line">0eec8dd9d164   k8s.gcr.io/pause:3.4.1   &quot;/pause&quot;                 10 minutes ago   Up 10 minutes             test-pause             </span><br></pre></td></tr></table></figure>
<p>进入 <code>pod_centos_test</code> 容器，查看网络、端口、主机名信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hostname</span></span><br><span class="line">test-pause</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">s -elf</span></span><br><span class="line">F S UID         PID   PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD</span><br><span class="line">4 S root          1      0  0  80   0 -  6218 skb_wa 17:01 ?        00:00:00 ping 127.1</span><br><span class="line">4 S root          7      0  0  80   0 -  2959 do_wai 17:02 pts/0    00:00:00 bash</span><br><span class="line">0 R root         30      7  0  80   0 - 12935 -      17:08 pts/0    00:00:00 ps -elf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -anutp</span></span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      - </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl  localhost:80</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;       </span><br></pre></td></tr></table></figure>
<ul>
<li>Pod 中的容器主机名相同，都使用 <code>pause</code> 容器的主机名，但实际并未共享 UTS namespace。<blockquote>
<p>可以通过找到对应 docker 容器的进程 PID，找到对应进程的 namespace 信息对比确认</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -elf | grep ping</span></span><br><span class="line">4 S root      35333  35311  0  80   0 -  6218 skb_wa 01:01 ?        00:00:00 ping 127.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l /proc/35333/ns/</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:13 cgroup -&gt; cgroup:[4026531835]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:02 ipc -&gt; ipc:[4026532664]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:02 mnt -&gt; mnt:[4026532662]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:02 net -&gt; net:[4026532588]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:02 pid -&gt; pid:[4026532665]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:13 pid_for_children -&gt; pid:[4026532665]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:13 user -&gt; user:[4026531837]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:02 uts -&gt; uts:[4026532663]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -elf | grep nginx</span></span><br><span class="line">4 S root      34909  34887  0  80   0 -  2233 sigsus 00:59 ?        00:00:00 nginx: master process nginx -g daemon off;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l /proc/34909/ns/</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:14 cgroup -&gt; cgroup:[4026531835]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:00 ipc -&gt; ipc:[4026532660]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:00 mnt -&gt; mnt:[4026532658]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:00 net -&gt; net:[4026532588]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:00 pid -&gt; pid:[4026532661]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:14 pid_for_children -&gt; pid:[4026532661]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:14 user -&gt; user:[4026531837]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:00 uts -&gt; uts:[4026532659]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -elf | grep pause</span></span><br><span class="line">4 S root      34239  34221  0  80   0 -   241 ia32_s 00:51 ?        00:00:00 /pause</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l /proc/34239/ns/</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:15 cgroup -&gt; cgroup:[4026531835]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 00:51 ipc -&gt; ipc:[4026532585]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 00:51 mnt -&gt; mnt:[4026532583]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 00:51 net -&gt; net:[4026532588]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 00:51 pid -&gt; pid:[4026532586]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:15 pid_for_children -&gt; pid:[4026532586]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 01:15 user -&gt; user:[4026531837]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  8 00:51 uts -&gt; uts:[4026532584]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以上观察可以看到，Pod 中的容器共享了 network namespace，未共享 UTS namespace。Kubernetes 中 Pod 中的容器同理。</p>
</blockquote>
</li>
<li>Pod 中容器的 PID namespace 进行了隔离，各个容器的 PID 进行了隔离，PID namespace 不同。</li>
<li>Pod 中的容器共享了 network namespace，具有相同的网络信息（网卡、IP、端口资源）</li>
<li>Pod 中的容器直接可以通过 <code>localhost</code> 互相访问</li>
</ul>
<span id="more"></span>

<h1 id="Pod-和-Kubernetes-API-服务交互"><a href="#Pod-和-Kubernetes-API-服务交互" class="headerlink" title="Pod 和 Kubernetes API 服务交互"></a>Pod 和 Kubernetes API 服务交互</h1><p><a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/downward-api/"><code>downwardAPI</code></a> 提供了一种简单的方式，可以将 Pod 的 Metadata 和状态数据通过<strong>环境变量</strong>或者 <strong>Volume</strong> 传递（挂载）到 Pod 中，允许内部进程使用。但这种方式仅仅可以暴露一个 Pod 自身的 Metadata ，而且只能暴露一部分数据，某些情况下，应用可能需要知道其他 Pod 的信息，甚至集群中其他资源的信息，这种情况下，<code>downwardAPI</code> 的方式就无能为力了。</p>
<p>Pod 启动时，系统会主动将部分信息以环境变量的形式注入到每个 Pod 中，比如自定义的 Service 的部分信息，Kubernetes API Service 的信息等，可以登陆 Pod，检查系统环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">printenv</span> | grep <span class="string">&quot;SERVICE&quot;</span></span></span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=443</span><br><span class="line">TEST_API_SERVICE_PORT=tcp://10.106.126.96:10302</span><br><span class="line">KUBERNETES_SERVICE_PORT=443</span><br><span class="line">TEST_API_SERVICE_PORT_10302_TCP_PORT=10302</span><br><span class="line">TEST_API_SERVICE_PORT_10302_TCP_PROTO=tcp</span><br><span class="line">TEST_API_SERVICE_SERVICE_HOST=10.106.126.96</span><br><span class="line">TEST_API_SERVICE_SERVICE_PORT=10302</span><br><span class="line">TEST_API_SERVICE_PORT_10302_TCP=tcp://10.106.126.96:10302</span><br><span class="line">TEST_API_SERVICE_SERVICE_PORT_TEST_API_PORD=10302</span><br><span class="line">TEST_API_SERVICE_PORT_10302_TCP_ADDR=10.106.126.96</span><br><span class="line">KUBERNETES_SERVICE_HOST=10.96.0.1</span><br></pre></td></tr></table></figure>
<p>以上示例中的 Pod ，在启动时，系统主动注入了相同 namespace 中的 Service 的信息，包括 Service IP 地址、端口等信息，以及 Kubernetes API Service 的 IP 及端口信息。</p>
<blockquote>
<p>Pod 中要使用 Service 的环境变量，要确保 Service 在 Pod 启动之前被创建，否则 Pod 中不存在相关环境变量。</p>
</blockquote>
<p>Pod 启动时，系统除了主动注入环境变量，还通过创建 <code>projected</code> 的 Volume 的方式给每个 Pod 挂载了以下信息</p>
<ul>
<li>所属 namespace 的默认 ServiceAccount 的 token（<code>serviceAccountToken</code>）</li>
<li>集群的 CA 证书（<code>configMap</code>）</li>
<li>Pod 的所属 namespace 信息（<code>downwardAPI</code>）</li>
</ul>
<p>可以通过以下命令验证上述信息。其中的 Volume <code>kube-api-access-8ch7r</code> 为系统自动生成并挂载到了 Pod 中的容器的 <code>/var/run/secrets/kubernetes.io/serviceaccount</code> 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl edit pod -n ops ops-centos7-bfc4d75b5-kjcfs</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: ops-centos7</span><br><span class="line">  name: ops-centos7-bfc4d75b5-kjcfs</span><br><span class="line">  namespace: ops</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - ping</span><br><span class="line">    - 127.0.0.1</span><br><span class="line">    image: centos:centos7.9.2009</span><br><span class="line">    name: ops-centos7</span><br><span class="line">	</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount</span><br><span class="line">      name: kube-api-access-8ch7r</span><br><span class="line">      readOnly: true</span><br><span class="line"></span><br><span class="line">  volumes:</span><br><span class="line">  - name: kube-api-access-8ch7r</span><br><span class="line">    projected:</span><br><span class="line">      defaultMode: 420</span><br><span class="line">      sources:</span><br><span class="line">      - serviceAccountToken:</span><br><span class="line">          expirationSeconds: 3607</span><br><span class="line">          path: token</span><br><span class="line">      - configMap:</span><br><span class="line">          items:</span><br><span class="line">          - key: ca.crt</span><br><span class="line">            path: ca.crt</span><br><span class="line">          name: kube-root-ca.crt</span><br><span class="line">      - downwardAPI:</span><br><span class="line">          items:</span><br><span class="line">          - fieldRef:</span><br><span class="line">              apiVersion: v1</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">            path: namespace</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>卷 <code>kube-api-access-8ch7r</code> 主要包含 3 部分内容</p>
<ul>
<li><code>serviceAccountToken</code> 每个 namespace 都有个默认的 ServiceAccount，在没有为 Pod 配置 ServiceAccount 的情况下，系统会自动将默认的 ServiceAccount 挂载到 Pod 中的每个容器，作为运行在 Pod 中的进程和 API Server 交互时认证授权的身份（主体）。<a href="/202305161451/" title="ServiceAccount 使用说明参考">ServiceAccount 使用说明参考</a></li>
<li><code>configMap</code> - 以 <code>configMap</code> 的方式为 Pod 中的容器挂载了集群的 CA 证书</li>
<li><code>downwardAPI</code> - 以 <code>downwardAPI</code> 的方式，让 Pod 中的容器可以获取到 Pod 所在的 namespace 信息。</li>
</ul>
<p>以上内容被挂载到了容器的 <code>/var/run/secrets/kubernetes.io/serviceaccount</code> 目录中，可以在容器中检查此目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> /var/run/secrets/kubernetes.io/serviceaccount/</span></span><br><span class="line">ca.crt  namespace  token</span><br></pre></td></tr></table></figure>



<h2 id="在-Pod-中通过-curl-命令请求-Kubernetes-API"><a href="#在-Pod-中通过-curl-命令请求-Kubernetes-API" class="headerlink" title="在 Pod 中通过 curl 命令请求 Kubernetes API"></a>在 Pod 中通过 curl 命令请求 Kubernetes API</h2><p>默认情况下，Kubernetes API Service 的 Service 名称为 <code>kubernetes</code>，因此在集群内部，可以通过 FQDN <code>kubernetes.default.svc.cluster.local</code> 访问 Kubernetes API Service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get services</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   156d</span><br></pre></td></tr></table></figure>

<p>在 Pod 中尝试访问 Kubernetes API Service，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl https://kubernetes.default.svc.cluster.local</span></span><br><span class="line">curl: (60) SSL certificate problem: unable to get local issuer certificate</span><br><span class="line">More details here: https://curl.haxx.se/docs/sslcerts.html</span><br><span class="line"></span><br><span class="line">curl failed to verify the legitimacy of the server and therefore could not</span><br><span class="line">establish a secure connection to it. To learn more about this situation and</span><br><span class="line">how to fix it, please visit the web page mentioned above.</span><br></pre></td></tr></table></figure>
<p>以上报错，是因为通过 https 访问 Kubernetes API Service，但是无法验证证书。最简单的规避此问题的方法是使用 <code>curl</code> 命令的 <code>-k, --insecure</code> 选项忽略验证证书，但这是存在安全隐患的，不建议在生产环境使用。</p>
<p>Pod 启动时，系统已经将集群的 CA 证书注入到了每个容器，因此可以使用 CA 证书来验证服务器证书。执行以下命令，使用 CA 证书重新访问 Kubernetes API Service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://kubernetes.default.svc.cluster.local</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Status&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;&#125;,</span><br><span class="line">  &quot;status&quot;: &quot;Failure&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;forbidden: User \&quot;system:anonymous\&quot; cannot get path \&quot;/\&quot;&quot;,</span><br><span class="line">  &quot;reason&quot;: &quot;Forbidden&quot;,</span><br><span class="line">  &quot;details&quot;: &#123;&#125;,</span><br><span class="line">  &quot;code&quot;: 403</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到，使用 CA 证书后，HTTPS 连接成功，Kubernetes API 返回了响应。以上 Kubernetes API 输出中，表面此次请求使用的是匿名用户，不具有 API 服务器的授权，因此拒绝访问。</p>
<blockquote>
<p>默认情况下，Pod 使用的是 namespace 中的默认的 ServiceAccount token，默认不具有任何权限。</p>
</blockquote>
<p><a href="https://csms.tech/202305161451/#RBAC-配置示例">参考 RBAC 配置认证鉴权使 Pod 的容器可以和 Kubernetes API Server 通信</a></p>
<h1 id="Pod-计算资源限制"><a href="#Pod-计算资源限制" class="headerlink" title="Pod 计算资源限制"></a>Pod 计算资源限制</h1><p>创建 Pod 时，可以指定<strong>容器</strong>对 CPU 和 Memory 的资源请求量（<code>requests</code>）和资源限制量（’limits&#96;），他们不是针对 Pod，而是针对 Pod 中的容器。Pod 对资源的请求量和限制量是它所包含的所有容器的请求量和限制量之和。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: $&#123;NAME&#125;</span><br><span class="line">  namespace: $&#123;NAMESPACE&#125;</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: $&#123;NAME&#125;</span><br><span class="line">    image: nginx:1.14.2</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line">      name: http-web</span><br><span class="line">      </span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        cpu: 200m</span><br><span class="line">        memory: 10Mi</span><br><span class="line">      limits:</span><br><span class="line">        cpu: 200m</span><br><span class="line">        memory: 10Mi</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果为容器的资源申请指定了 <code>limits</code>，但未指定 <code>requests</code>，并且没有应用准入时机制为该资源设置默认请求， 然后 Kubernetes 将复制你所指定的限制值，将其用作资源的请求值。</p>
</blockquote>
<h2 id="资源类型"><a href="#资源类型" class="headerlink" title="资源类型"></a>资源类型</h2><p>CPU 和 内存 都是 资源类型。每种资源类型具有其基本单位。 CPU 表达的是计算处理能力，其单位是 Kubernetes CPU。内存的单位是字节。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[资源类型](https://kubernetes.io/zh-cn/docs/concepts/configuration/manage-resources-containers/#resource-types)
">[2]</span></a></sup></p>
<h3 id="CPU-资源单位"><a href="#CPU-资源单位" class="headerlink" title="CPU 资源单位"></a>CPU 资源单位</h3><p>CPU 资源的限制和请求以 “cpu” 为单位。 在 Kubernetes 中，一个 CPU 等于 1 个物理 CPU 核 或者 1 个虚拟核， 取决于节点是一台物理主机还是运行在某物理主机上的虚拟机。</p>
<blockquote>
<p>1 CPU &#x3D; 1000m 的 CPU 资源</p>
</blockquote>
<h3 id="Memory-资源单位"><a href="#Memory-资源单位" class="headerlink" title="Memory 资源单位"></a>Memory 资源单位</h3><p>memory 的限制和请求以字节为单位。 你可以使用普通的整数，或者带有以下 数量后缀 的定点数字来表示内存：E、P、T、G、M、k。 你也可以使用对应的 2 的幂数：Ei、Pi、Ti、Gi、Mi、Ki。</p>
<h2 id="查看节点资源总量"><a href="#查看节点资源总量" class="headerlink" title="查看节点资源总量"></a>查看节点资源总量</h2><p>通过以下命令输出，可以看到节点的资源总量和可分配资源量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">...</span><br><span class="line">Capacity:</span><br><span class="line">  cpu:                16</span><br><span class="line">  ephemeral-storage:  524276716Ki</span><br><span class="line">  hugepages-1Gi:      0</span><br><span class="line">  hugepages-2Mi:      0</span><br><span class="line">  memory:             32068748Ki</span><br><span class="line">  pods:               110</span><br><span class="line">Allocatable:</span><br><span class="line">  cpu:                16</span><br><span class="line">  ephemeral-storage:  483173420666</span><br><span class="line">  hugepages-1Gi:      0</span><br><span class="line">  hugepages-2Mi:      0</span><br><span class="line">  memory:             31966348Ki</span><br><span class="line">  pods:               110</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/workload-resources/pod-v1/#%E8%B5%84%E6%BA%90">resources</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/manage-resources-containers/#resource-types">资源类型</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 权限控制</title>
    <url>/202305161451/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>Kubernetes 1.24</li>
</ul>
<h1 id="ServiceAccount"><a href="#ServiceAccount" class="headerlink" title="ServiceAccount"></a>ServiceAccount</h1><p>ServiceAccount 就像 Pod、Secret、ConfigMap 等一样，都是资源，属于 namespace 级别，作用在单独的命名空间。默认情况，每个 namespace 都有一个默认的 ServiceAccount。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get serviceaccount</span></span><br><span class="line">NAME      SECRETS   AGE</span><br><span class="line">default   0         160d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe serviceaccount default</span></span><br><span class="line">Name:                default</span><br><span class="line">Namespace:           default</span><br><span class="line">Labels:              &lt;none&gt;</span><br><span class="line">Annotations:         &lt;none&gt;</span><br><span class="line">Image pull secrets:  &lt;none&gt;</span><br><span class="line">Mountable secrets:   &lt;none&gt;</span><br><span class="line">Tokens:              &lt;none&gt;</span><br><span class="line">Events:              &lt;none&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>namespace 中的每个 Pod 都和一个 ServiceAccount 关联，它代表了运行在 Pod 中的应用程序的身份证明。<strong>Pod 中的每个容器都会挂载此 ServiceAccount token</strong></p>
<p>在 Pod 的 manifest 定义文件中，可以通过指定账户名称的方式将一个 ServiceAccount 关联到 Pod。如果不显示指定 ServiceAccount 的账户名称，Pod 会使用 namespace 中默认的 ServiceAccount。可以将不同的 ServiceAccount 关联给不同的 Pod 来控制每个 Pod 可以访问的资源。</p>
<p>当 API 服务接收到一个带有认证 token 的请求时， API 会用这个 token 来验证发送请求的客户端所关联的 ServiceAccount 是否允许执行请求的操作。</p>
<h2 id="查看-ServiceAccount"><a href="#查看-ServiceAccount" class="headerlink" title="查看 ServiceAccount"></a>查看 ServiceAccount</h2><p>以 rancher 相关的 ServiceAccount 为例，查看 ServiceAccount 信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get serviceaccount -n cattle-system</span></span><br><span class="line">NAME                      SECRETS   AGE</span><br><span class="line">default                   0         160d</span><br><span class="line">git-webhook-api-service   0         160d</span><br><span class="line">rancher                   0         160d</span><br><span class="line">rancher-webhook           0         160d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe sa default -n cattle-system</span></span><br><span class="line">Name:                default</span><br><span class="line">Namespace:           cattle-system</span><br><span class="line">Labels:              &lt;none&gt;</span><br><span class="line">Annotations:         &lt;none&gt;</span><br><span class="line">Image pull secrets:  &lt;none&gt;</span><br><span class="line">Mountable secrets:   &lt;none&gt;</span><br><span class="line">Tokens:              &lt;none&gt;</span><br><span class="line">Events:              &lt;none&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以下输出名为 <code>rancher</code> 的 ServiceAccount 信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe sa rancher -n cattle-system</span></span><br><span class="line">Name:                rancher</span><br><span class="line">Namespace:           cattle-system</span><br><span class="line">Labels:              app=rancher</span><br><span class="line">                     app.kubernetes.io/managed-by=Helm</span><br><span class="line">                     chart=rancher-2.7.0</span><br><span class="line">                     heritage=Helm</span><br><span class="line">                     release=rancher</span><br><span class="line">Annotations:         meta.helm.sh/release-name: rancher</span><br><span class="line">                     meta.helm.sh/release-namespace: cattle-system</span><br><span class="line">Image pull secrets:  &lt;none&gt;</span><br><span class="line">Mountable secrets:   &lt;none&gt;</span><br><span class="line">Tokens:              rancher-token</span><br><span class="line">Events:              &lt;none&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>ServiceAccount 主要包含了密钥（token）信息，客户端 (Pod)请求 API Service 时使用的 token 文件（如 <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code>）持有 ServiceAccount 的 token 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe secret rancher-token -n cattle-system</span></span><br><span class="line">Name:         rancher-token</span><br><span class="line">Namespace:    cattle-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  field.cattle.io/projectId: local:p-76mvn</span><br><span class="line">              kubernetes.io/service-account.name: rancher</span><br><span class="line">              kubernetes.io/service-account.uid: 1e80ce10-2ba3-4bc3-81d9-ccc72001431b</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1099 bytes</span><br><span class="line">namespace:  13 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6Ik51eFpuNU9MUlp2Qkxm</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://csms.tech/202209121102/#配置-Pod-拉取镜像的认证信息">通过 ServiceAccount 配置镜像拉取密钥</a></p>
</blockquote>
<p>在新建了 ServiceAccount 之后，若要将它赋值给 Pod，通过在 Pod 定义中的 <code>spec.serviceAccountName</code> 字段上配置 ServiceAccount 名称来分配。<strong>Pod 的 ServiceAccount 必须在 Pod 创建时进行配置，后续不能被修改</strong></p>
<h1 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h1><p>从 Kubernetes 1.8.0 开始，RBAC（基于角色的权限控制）授权插件升级为 GA（通用可用性），并在大多数集群上默认开启（比如通过 <code>kubeadm</code> 部署的集群）。<a href="https://csms.tech/202304271425/#在-Pod-中通过-curl-命令请求-Kubernetes-API">RBAC 会阻止未授权的用户查看和修改集群状态，默认的 ServiceAccount 不允许查看集群状态</a>。</p>
<p>RBAC 授权规则是通过四种资源对象来进行配置的，他们可以分为 2 个组 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用 RBAC 鉴权](https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/rbac/#restrictions-on-role-creation-or-update)
">[1]</span></a></sup></p>
<ul>
<li><code>Role</code>、<code>ClusterRole</code> -  一组代表相关权限的规则，他们指定了在资源上可以执行哪些操作（动词）</li>
<li><code>RoleBinding</code>、<code>ClusterRoleBinding</code> - 将角色中定义的权限赋予一个或者一组用户。它包含若干主体（用户、组或者 ServiceAccount）的列表和对这些主体所获得的角色的引用。</li>
</ul>
<blockquote>
<p><code>Role</code> 和 <code>RoleBinding</code> 属于 namespace 范围的资源，必须在 namespace 中配置</p>
<p><code>ClusterRole</code> 和 <code>ClusterRoleBinding</code> 是集群作用域的资源</p>
<p><strong>一个 RoleBinding 可以引用某 ClusterRole 并将该 ClusterRole 绑定到 RoleBinding 所在的名字空间。但是，RoleBinding 不能授予主体集群级别的资源的访问权限，即使它引用了一个 ClusterRoleBinding</strong></p>
<hr>
</blockquote>
<span id="more"></span>
<h2 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h2><p><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/rbac/#role-example">下面是一个位于 <code>default</code> 名字空间的 <code>Role</code> 的示例，可用来授予对 Pod 的读访问权限 </a> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  namespace: default</span><br><span class="line">  name: pod-reader</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;] # &quot;&quot; 标明 core API 组</span><br><span class="line">  resources: [&quot;pods&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]</span><br></pre></td></tr></table></figure>

<h2 id="RoleBinding"><a href="#RoleBinding" class="headerlink" title="RoleBinding"></a>RoleBinding</h2><p><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/rbac/#rolebinding-example">下面的例子中的 <code>RoleBinding</code> 将 <code>pod-reader</code> 这个 <code>Role</code> 授予在 <code>default</code> 名字空间中的用户 <code>jane</code>。 这样，用户 <code>jane</code> 就具有了读取 <code>default</code> 名字空间中所有 Pod 的权限</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此角色绑定允许 <span class="string">&quot;jane&quot;</span> 读取 <span class="string">&quot;default&quot;</span> 名字空间中的 Pod</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">你需要在该命名空间中有一个名为 “pod-reader” 的 Role</span></span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: read-pods</span><br><span class="line">  namespace: default</span><br><span class="line">subjects:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">你可以指定不止一个“subject（主体）”</span></span><br><span class="line">- kind: User</span><br><span class="line">  name: jane # &quot;name&quot; 是区分大小写的</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">roleRef:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">&quot;roleRef&quot;</span> 指定与某 Role 或 ClusterRole 的绑定关系</span></span><br><span class="line">  kind: Role        # 此字段必须是 Role 或 ClusterRole</span><br><span class="line">  name: pod-reader  # 此字段必须与你要绑定的 Role 或 ClusterRole 的名称匹配</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>

<h2 id="RBAC-配置示例"><a href="#RBAC-配置示例" class="headerlink" title="RBAC 配置示例"></a>RBAC 配置示例</h2><p>以下示例演示通过给 namespace 中默认的 ServiceAccount 配置查看 Service 的权限，学习 RBAC 的使用。</p>
<p>本示例中的 namespace 为 <code>ops</code>，示例 Pod 为 <code>ops-centos7-bfc4d75b5-kjcfs</code>，配置信息如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl edit pod -n ops  ops-centos7-bfc4d75b5-kjcfs</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: ops-centos7</span><br><span class="line">  name: ops-centos7-bfc4d75b5-kjcfs</span><br><span class="line">  namespace: ops</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - ping</span><br><span class="line">    - 127.0.0.1</span><br><span class="line">    image: centos:centos7.9.2009</span><br><span class="line">	name: ops-centos7</span><br><span class="line">	</span><br><span class="line">	volumeMounts:</span><br><span class="line">    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount</span><br><span class="line">      name: kube-api-access-8ch7r</span><br><span class="line">      readOnly: true</span><br><span class="line"></span><br><span class="line">  volumes:</span><br><span class="line">  - name: kube-api-access-8ch7r</span><br><span class="line">    projected:</span><br><span class="line">      defaultMode: 420</span><br><span class="line">      sources:</span><br><span class="line">      - serviceAccountToken:</span><br><span class="line">          expirationSeconds: 3607</span><br><span class="line">          path: token</span><br><span class="line">      - configMap:</span><br><span class="line">          items:</span><br><span class="line">          - key: ca.crt</span><br><span class="line">            path: ca.crt</span><br><span class="line">          name: kube-root-ca.crt</span><br><span class="line">      - downwardAPI:</span><br><span class="line">          items:</span><br><span class="line">          - fieldRef:</span><br><span class="line">              apiVersion: v1</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">            path: namespace</span><br></pre></td></tr></table></figure>

<p>登陆到 Pod 中的容器，请求 Kubernetes API Server。默认的 token 没有查询集群信息的权限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://kubernetes.default.svc.cluster.local</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Status&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;&#125;,</span><br><span class="line">  &quot;status&quot;: &quot;Failure&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;forbidden: User \&quot;system:anonymous\&quot; cannot get path \&quot;/\&quot;&quot;,</span><br><span class="line">  &quot;reason&quot;: &quot;Forbidden&quot;,</span><br><span class="line">  &quot;details&quot;: &#123;&#125;,</span><br><span class="line">  &quot;code&quot;: 403</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://kubernetes.default.sv.cluster.local/api/v1/namespaces/ops/services</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Status&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;&#125;,</span><br><span class="line">  &quot;status&quot;: &quot;Failure&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;services is forbidden: User \&quot;system:anonymous\&quot; cannot list resource \&quot;services\&quot; in API group \&quot;\&quot; in the namespace \&quot;ops\&quot;&quot;,</span><br><span class="line">  &quot;reason&quot;: &quot;Forbidden&quot;,</span><br><span class="line">  &quot;details&quot;: &#123;</span><br><span class="line">    &quot;kind&quot;: &quot;services&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;code&quot;: 403</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上请求中，因为没有提供访问的凭据，认证系统会将请求者的身份标记为 <code>system:anonymous</code>，鉴权系统检查此用户是否有权限请求相应资源，没有权限则返回 403。</p>
<p>使用 Pod 中默认挂载的 token 进行请求，认证系统会识别请求者的身份为对应的 ServiceAccount（默认的 <code>default</code>），鉴权系统检查权限，返回 <code>Unauthorized</code> 表示请求未授权。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \</span></span><br><span class="line"><span class="language-bash">       -H <span class="string">&quot;Authorization: Bearer `cat /var/run/secrets/kubernetes.io/serviceaccount/token`&quot;</span> \</span></span><br><span class="line"><span class="language-bash">       https://kubernetes.default.svc.cluster.local</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Status&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;&#125;,</span><br><span class="line">  &quot;status&quot;: &quot;Failure&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;Unauthorized&quot;,</span><br><span class="line">  &quot;reason&quot;: &quot;Unauthorized&quot;,</span><br><span class="line">  &quot;code&quot;: 401</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建-Role"><a href="#创建-Role" class="headerlink" title="创建 Role"></a>创建 Role</h3><p>创建以下配置的 <code>Role</code>，名称为 <code>services-read</code>，<code>Role</code> 属于 namespace 资源，因此必须指定 namespace <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[API Role](https://v1-24.docs.kubernetes.io/zh-cn/docs/reference/kubernetes-api/authorization-resources/role-v1/)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  namespace: ops</span><br><span class="line">  name: services-read</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;]</span><br><span class="line">  resources: [&quot;services&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br></pre></td></tr></table></figure>

<h3 id="创建-RoleBinding"><a href="#创建-RoleBinding" class="headerlink" title="创建 RoleBinding"></a>创建 RoleBinding</h3><p><code>Role</code> 配置了允许的操作（动作），未指定可以执行动作的主体（用户，组，ServiceAccount），必须将 <code>Role</code> 绑定到一个主体，通过创建 <code>RoleBinding</code>，来实现将 <code>Role</code> 绑定到主体</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  namespace: ops</span><br><span class="line">  name: services-read</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: services-read</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: default</span><br><span class="line">  namespace: ops</span><br></pre></td></tr></table></figure>
<p>通过以上配置，namespace 中默认的 ServiceAccount <code>default</code> 的 token 拥有了 <code>services-read</code> 这个 <code>Role</code> 的权限，而默认情况下 <code>default</code> 这个 ServiceAccount 的 token 被挂载到了 Pod 的容器中，可用于容器中的进程和 Kubernetes API Server 通信的身份认证。</p>
<p>通过以下命令访问 Kubernetes API Server，已经可以获取到 <code>ops</code> namespace 中的 <code>Service</code> 资源。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H <span class="string">&quot;Authorization: Bearer `cat /var/run/secrets/kubernetes.io/serviceaccount/token`&quot;</span> https://kubernetes.default.svc.cluster.local/api/v1/namespaces/ops/services</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;ServiceList&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;86457226&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;items&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <code>Role</code> 为以下配置，使默认的 ServiceAccount <code>default</code> 可以查看 namespace 中的所有资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  namespace: ops</span><br><span class="line">  name: services-read</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;]</span><br><span class="line">  resources: [&quot;*&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br></pre></td></tr></table></figure>
<p>获取 Pods 资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \</span></span><br><span class="line"><span class="language-bash">       -H <span class="string">&quot;Authorization: Bearer `cat /var/run/secrets/kubernetes.io/serviceaccount/token`&quot;</span> \</span></span><br><span class="line"><span class="language-bash">       https://kubernetes.default.svc.cluster.local/api/v1/namespaces/ops/pods</span>    </span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;PodList&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;86457516&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;items&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;metadata&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;ops-centos7-bfc4d75b5-bc8xm&quot;,</span><br><span class="line">        &quot;generateName&quot;: &quot;ops-centos7-bfc4d75b5-&quot;,</span><br><span class="line">        &quot;namespace&quot;: &quot;ops&quot;,</span><br><span class="line">        &quot;uid&quot;: &quot;b35919d7-a227-4fe5-abd7-c7f426d97ab8&quot;,</span><br><span class="line">        &quot;resourceVersion&quot;: &quot;86425875&quot;,</span><br><span class="line">        &quot;creationTimestamp&quot;: &quot;2023-05-18T03:20:24Z&quot;,</span><br><span class="line">        &quot;labels&quot;: &#123;</span><br><span class="line">          &quot;app&quot;: &quot;ops-centos7&quot;,</span><br><span class="line">          &quot;pod-template-hash&quot;: &quot;bfc4d75b5&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ownerReferences&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;apiVersion&quot;: &quot;apps/v1&quot;,</span><br><span class="line">            &quot;kind&quot;: &quot;ReplicaSet&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;ops-centos7-bfc4d75b5&quot;,</span><br><span class="line">            &quot;uid&quot;: &quot;1d7a428d-8004-493b-b04c-2c4f996acf0c&quot;,</span><br><span class="line">            &quot;controller&quot;: true,</span><br><span class="line">            &quot;blockOwnerDeletion&quot;: true</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;managedFields&quot;: [</span><br><span class="line">          ...</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;spec&quot;: &#123;</span><br><span class="line">        &quot;volumes&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;name&quot;: &quot;kube-api-access-vsh5j&quot;,</span><br><span class="line">            &quot;projected&quot;: &#123;</span><br><span class="line">              &quot;sources&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;serviceAccountToken&quot;: &#123;</span><br><span class="line">                    &quot;expirationSeconds&quot;: 3607,</span><br><span class="line">                    &quot;path&quot;: &quot;token&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;configMap&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;kube-root-ca.crt&quot;,</span><br><span class="line">                    &quot;items&quot;: [</span><br><span class="line">                      &#123;</span><br><span class="line">                        &quot;key&quot;: &quot;ca.crt&quot;,</span><br><span class="line">                        &quot;path&quot;: &quot;ca.crt&quot;</span><br><span class="line">                      &#125;</span><br><span class="line">                    ]</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;downwardAPI&quot;: &#123;</span><br><span class="line">                    &quot;items&quot;: [</span><br><span class="line">                      &#123;</span><br><span class="line">                        &quot;path&quot;: &quot;namespace&quot;,</span><br><span class="line">                        &quot;fieldRef&quot;: &#123;</span><br><span class="line">                          &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">                          &quot;fieldPath&quot;: &quot;metadata.namespace&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                    ]</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              &quot;defaultMode&quot;: 420</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;containers&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;name&quot;: &quot;ops-centos7&quot;,</span><br><span class="line">            &quot;image&quot;: &quot;centos:centos7.9.2009&quot;,</span><br><span class="line">            &quot;command&quot;: [</span><br><span class="line">              &quot;ping&quot;,</span><br><span class="line">              &quot;127.0.0.1&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;resources&quot;: &#123;&#125;,</span><br><span class="line">            &quot;volumeMounts&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;name&quot;: &quot;kube-api-access-vsh5j&quot;,</span><br><span class="line">                &quot;readOnly&quot;: true,</span><br><span class="line">                &quot;mountPath&quot;: &quot;/var/run/secrets/kubernetes.io/serviceaccount&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;terminationMessagePath&quot;: &quot;/dev/termination-log&quot;,</span><br><span class="line">            &quot;terminationMessagePolicy&quot;: &quot;File&quot;,</span><br><span class="line">            &quot;imagePullPolicy&quot;: &quot;IfNotPresent&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;restartPolicy&quot;: &quot;Always&quot;,</span><br><span class="line">        &quot;terminationGracePeriodSeconds&quot;: 30,</span><br><span class="line">        &quot;dnsPolicy&quot;: &quot;ClusterFirst&quot;,</span><br><span class="line">        &quot;serviceAccountName&quot;: &quot;default&quot;,</span><br><span class="line">        &quot;serviceAccount&quot;: &quot;default&quot;,</span><br><span class="line">        &quot;nodeName&quot;: &quot;fm-k8s-c1-worker2&quot;,</span><br><span class="line">        &quot;securityContext&quot;: &#123;&#125;,</span><br><span class="line">        &quot;schedulerName&quot;: &quot;default-scheduler&quot;,</span><br><span class="line">        &quot;tolerations&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;key&quot;: &quot;node.kubernetes.io/not-ready&quot;,</span><br><span class="line">            &quot;operator&quot;: &quot;Exists&quot;,</span><br><span class="line">            &quot;effect&quot;: &quot;NoExecute&quot;,</span><br><span class="line">            &quot;tolerationSeconds&quot;: 300</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;key&quot;: &quot;node.kubernetes.io/unreachable&quot;,</span><br><span class="line">            &quot;operator&quot;: &quot;Exists&quot;,</span><br><span class="line">            &quot;effect&quot;: &quot;NoExecute&quot;,</span><br><span class="line">            &quot;tolerationSeconds&quot;: 300</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;priority&quot;: 0,</span><br><span class="line">        &quot;enableServiceLinks&quot;: true,</span><br><span class="line">        &quot;preemptionPolicy&quot;: &quot;PreemptLowerPriority&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;status&quot;: &#123;</span><br><span class="line">        &quot;phase&quot;: &quot;Running&quot;,</span><br><span class="line">        &quot;conditions&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;type&quot;: &quot;Initialized&quot;,</span><br><span class="line">            &quot;status&quot;: &quot;True&quot;,</span><br><span class="line">            &quot;lastProbeTime&quot;: null,</span><br><span class="line">            &quot;lastTransitionTime&quot;: &quot;2023-05-18T03:20:24Z&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;type&quot;: &quot;Ready&quot;,</span><br><span class="line">            &quot;status&quot;: &quot;True&quot;,</span><br><span class="line">            &quot;lastProbeTime&quot;: null,</span><br><span class="line">            &quot;lastTransitionTime&quot;: &quot;2023-05-18T03:20:25Z&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;type&quot;: &quot;ContainersReady&quot;,</span><br><span class="line">            &quot;status&quot;: &quot;True&quot;,</span><br><span class="line">            &quot;lastProbeTime&quot;: null,</span><br><span class="line">            &quot;lastTransitionTime&quot;: &quot;2023-05-18T03:20:25Z&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;type&quot;: &quot;PodScheduled&quot;,</span><br><span class="line">            &quot;status&quot;: &quot;True&quot;,</span><br><span class="line">            &quot;lastProbeTime&quot;: null,</span><br><span class="line">            &quot;lastTransitionTime&quot;: &quot;2023-05-18T03:20:24Z&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;hostIP&quot;: &quot;172.31.22.159&quot;,</span><br><span class="line">        &quot;podIP&quot;: &quot;10.244.3.159&quot;,</span><br><span class="line">        &quot;podIPs&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;ip&quot;: &quot;10.244.3.159&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;startTime&quot;: &quot;2023-05-18T03:20:24Z&quot;,</span><br><span class="line">        &quot;containerStatuses&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;name&quot;: &quot;ops-centos7&quot;,</span><br><span class="line">            &quot;state&quot;: &#123;</span><br><span class="line">              &quot;running&quot;: &#123;</span><br><span class="line">                &quot;startedAt&quot;: &quot;2023-05-18T03:20:25Z&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;lastState&quot;: &#123;&#125;,</span><br><span class="line">            &quot;ready&quot;: true,</span><br><span class="line">            &quot;restartCount&quot;: 0,</span><br><span class="line">            &quot;image&quot;: &quot;centos:centos7.9.2009&quot;,</span><br><span class="line">            &quot;imageID&quot;: &quot;docker-pullable://centos@sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4&quot;,</span><br><span class="line">            &quot;containerID&quot;: &quot;docker://4e689d3e4f48ad0a7b6829a155421d8425fb023a46aec1b71e6277dbfd557fb6&quot;,</span><br><span class="line">            &quot;started&quot;: true</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;qosClass&quot;: &quot;BestEffort&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在不能使用 <code>curl</code> 的情况下，可以使用 <code>wget</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget --no-check-certificate --header <span class="string">&quot;Authorization: Bearer `cat /var/run/secrets/kubernetes.io/serviceaccount/token`&quot;</span> https://172.31.30.123:10250/metrics</span></span><br><span class="line">Connecting to 172.31.30.123:10250 (172.31.30.123:10250)</span><br><span class="line">saving to &#x27;metrics&#x27;</span><br><span class="line">metrics              100% |***************************************************************************************|  135k  0:00:00 ETA</span><br><span class="line">&#x27;metrics&#x27; saved</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/rbac/#restrictions-on-role-creation-or-update">使用 RBAC 鉴权</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://v1-24.docs.kubernetes.io/zh-cn/docs/reference/kubernetes-api/authorization-resources/role-v1/">API Role</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>lftp 使用</title>
    <url>/202306080936/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<h1 id="lftp-安装"><a href="#lftp-安装" class="headerlink" title="lftp 安装"></a>lftp 安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y lftp</span><br></pre></td></tr></table></figure>

<h1 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h1><p>查看帮助信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lftp -h</span></span><br><span class="line">Usage: lftp [OPTS] &lt;site&gt;</span><br><span class="line">`lftp&#x27; is the first command executed by lftp after rc files</span><br><span class="line"> -f &lt;file&gt;           execute commands from the file and exit</span><br><span class="line"> -c &lt;cmd&gt;            execute the commands and exit</span><br><span class="line"> --help              print this help and exit</span><br><span class="line"> --version           print lftp version and exit</span><br><span class="line">Other options are the same as in `open&#x27; command</span><br><span class="line"> -e &lt;cmd&gt;            execute the command just after selecting</span><br><span class="line"> -u &lt;user&gt;[,&lt;pass&gt;]  use the user/password for authentication</span><br><span class="line"> -p &lt;port&gt;           use the port for connection</span><br><span class="line"> &lt;site&gt;              host name, URL or bookmark name</span><br></pre></td></tr></table></figure>

<h2 id="登陆-FTP"><a href="#登陆-FTP" class="headerlink" title="登陆 FTP"></a>登陆 FTP</h2><p>命令格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lftp $&#123;USER&#125;:$&#123;PASSWORD&#125;@$&#123;FTPIP&#125;:$&#123;FTPPORT&#125;</span><br></pre></td></tr></table></figure>

<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>在一条 shell 命令中执行登陆、上传、退出操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lftp -u $&#123;USER&#125;,$&#123;PASSWORD&#125; -p $&#123;FTPPORT&#125; $&#123;FTPIP&#125; -e &quot;put /1.mp4 &amp;&amp; exit&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 常用命令总结</title>
    <url>/202305311658/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<h1 id="查看系统启动时间"><a href="#查看系统启动时间" class="headerlink" title="查看系统启动时间"></a>查看系统启动时间</h1><h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><p>查看最后一次（上次）系统启动的时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">who</span> -b</span> </span><br><span class="line">system boot Dec 27 05:06</span><br></pre></td></tr></table></figure>

<p>查看最后一次（上次）系统启动的时间，及运行级别</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">who</span> -r</span> </span><br><span class="line">run-level 5 Dec 27 05:06</span><br></pre></td></tr></table></figure>

<h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>通过查看 <code>reboot</code> 用户的登陆记录，可以知道系统的启动时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">last reboot</span></span><br><span class="line">reboot   system boot  3.10.0-1160.76.1 Fri Jan 13 19:20 - 15:59 (236+20:38) </span><br><span class="line">reboot   system boot  3.10.0-1160.76.1 Fri Jan 13 19:00 - 15:59 (236+20:58) </span><br><span class="line">reboot   system boot  3.10.0-1160.76.1 Tue Dec 20 11:18 - 15:59 (261+04:40) </span><br><span class="line">reboot   system boot  3.10.0-1160.76.1 Thu Oct 27 12:04 - 11:17 (53+23:12)  </span><br><span class="line">reboot   system boot  3.10.0-1160.76.1 Fri Sep 16 16:26 - 11:28 (40+19:02)  </span><br><span class="line">reboot   system boot  3.10.0-1160.76.1 Mon Aug 22 17:52 - 16:15 (24+22:22)  </span><br><span class="line">reboot   system boot  3.10.0-1160.76.1 Mon Aug 22 17:15 - 17:51  (00:36)</span><br></pre></td></tr></table></figure>

<h1 id="分割文件"><a href="#分割文件" class="headerlink" title="分割文件"></a>分割文件</h1><p>文件太大，需要分割时，可以使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">split -b 100M -d test.file</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-b, --bytes=SIZE</code></td>
<td>按照指定大小分割文件</td>
<td></td>
</tr>
<tr>
<td><code>-d, --numeric-suffixes</code></td>
<td>指定分割后的文件后缀为数字</td>
<td></td>
</tr>
<tr>
<td><code>-a, --suffix-length=N</code></td>
<td>分割后的文件后缀的长度</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">split</span> -b 100M -d test.file</span></span><br><span class="line">x00  x03  x06  x09  x12  x15  x18  x21  x24  x27  x30  x33               </span><br><span class="line">x01  x04  x07  x10  x13  x16  x19  x22  x25  x28  x31  test.file</span><br><span class="line">x02  x05  x08  x11  x14  x17  x20  x23  x26  x29  x32  </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 常用文件说明</title>
    <url>/202208180923/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos 7</li>
</ul>
<h3 id="常用文件说明"><a href="#常用文件说明" class="headerlink" title="常用文件说明"></a>常用文件说明</h3><table>
<thead>
<tr>
<th>文件路径</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;etc&#x2F;motd</td>
<td>登录成功后的欢迎信息，ssh 登录和 console 登录成功后都会显示</td>
<td></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;issue</td>
<td>在登录系统输入用户名之前显示的信息，远程 ssh 连接的时候并不会显示此信息</td>
<td><a href="#x2F-etc-x2F-issue">说明示例</a></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;services</td>
<td>记录网络服务名和它们对应使用的端口号及协议</td>
<td></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;protocols</td>
<td>该文件是网络协议定义文件，里面记录了 <code>TCP/IP</code> 协议族的所有协议类型。文件中的每一行对应一个协议类型，它有3个字段，分别表示 <code>协议名称</code>、<code>协议号</code> 和 <code>协议别名</code></td>
<td></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;vimrc<br/>~&#x2F;.vimrc</td>
<td><code>vim</code> 启动时会读取 <code>/etc/vimrc</code>（全局配置） 和 <code>~/.vimrc</code> （用户配置）</td>
<td><a href="/202208181117/" title="vim">vim</a></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;passwd<br/>&#x2F;etc&#x2F;shadow<br/>&#x2F;etc&#x2F;group</td>
<td>用户数据库，其中记录了 <code>用户名</code>，<code>id</code>，<code>用户家目录</code>，<code>shell</code> 等<br/>用户密码文件<br/>组信息</td>
<td></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;fstab</td>
<td>系统启动时需要自动挂载的文件系统列表</td>
<td></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;mtab</td>
<td>当前系统已挂载的文件系统，并由 <code>mount</code> 命令自动更新。当需要当前挂载的文件系统的列表时使用(例如df命令)</td>
<td></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;shells</td>
<td>系统可使用的 <code>shell</code></td>
<td></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;filesystems</td>
<td>系统可使用的 <code>文件系统</code></td>
<td></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;hostname</td>
<td>存放这主机名</td>
<td></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;hosts</td>
<td>主机名查询静态表，域名和 ip 本地静态表</td>
<td></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;nsswitch.conf</td>
<td>它规定通过哪些途径以及按照什么顺序以及通过这些途径来查找特定类型的信息，还可以指定某个方法奏效或失效时系统将采取什么动作</td>
<td><code>hosts:      files dns myhostname</code><br/>此配置设定：在查找域名解析的时候，先查找本地 <code>/etc/hosts</code>，再发送给 DNS 服务器查询</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;rsyslog.conf</td>
<td><code>rsyslog</code> 服务的配置文件，用来托管其他服务的日志</td>
<td><a href="/202208191014/" title="linux rsyslog 服务">linux rsyslog 服务</a></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;logrotate.conf</td>
<td>linux 日志切割工具</td>
<td><a href="/202208191317/" title="linux logrotate 服务">linux logrotate 服务</a></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;rsyncd.conf</td>
<td><code>rsync</code> 服务的配置文件</td>
<td><a href="/36f703dc/" title="rsyncd 服务">rsyncd 服务</a></td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;sysctl.conf<br/>&#x2F;etc&#x2F;sysctl.d&#x2F;</td>
<td>内核的运行参数配置文件，<code>sysctl</code> 命令对内核参数的修改仅在当前生效，重启系统后参数丢失，如果希望参数永久生效可以修改此配置文件</td>
<td><a href="/202302131009/" title="Linux 常用内核参数说明">Linux 常用内核参数说明</a></td>
</tr>
</tbody></table>
<span id="more"></span>
<h3 id="说明示例"><a href="#说明示例" class="headerlink" title="说明示例"></a>说明示例</h3><h4 id="x2F-etc-x2F-issue"><a href="#x2F-etc-x2F-issue" class="headerlink" title="&#x2F;etc&#x2F;issue"></a>&#x2F;etc&#x2F;issue</h4><p><img src="https://i.csms.tech/img_40.png"></p>
<p>文件内容可使用的各个变量说明如下</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\d</td>
<td>显示当前日期</td>
</tr>
<tr>
<td>\l</td>
<td>显示虚拟控制台号</td>
</tr>
<tr>
<td>\m</td>
<td>显示机器类型，即 CPU 架构，如 i386 或 x86_64 等（相当于 uname -m）</td>
</tr>
<tr>
<td>\n</td>
<td>显示主机的网络名（相当于 uname -n）</td>
</tr>
<tr>
<td>\o</td>
<td>显示域名</td>
</tr>
<tr>
<td>\r</td>
<td>显示 Kernel 内核版本号（相当于 uname -r）</td>
</tr>
<tr>
<td>\t</td>
<td>显示当前时间</td>
</tr>
<tr>
<td>\s</td>
<td>显示当前操作系统名称</td>
</tr>
<tr>
<td>\u</td>
<td>显示当前登录用户的编号</td>
</tr>
<tr>
<td>\U</td>
<td>显示当前登录用户的编号和用户</td>
</tr>
<tr>
<td>\v</td>
<td>显示当前操作系统的版本日期</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 压缩解压缩</title>
    <url>/202209301257/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file test.gz</span> </span><br><span class="line">test.gz: gzip compressed data, from FAT filesystem (MS-DOS, OS/2, NT)</span><br><span class="line"></span><br><span class="line">gzip -d test.gz </span><br></pre></td></tr></table></figure>

<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gzip test.txt</span><br></pre></td></tr></table></figure>

<p>压缩后默认生成压缩文件 <code>test.txt.gz</code></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>cp 命令用法</title>
    <url>/202210281406/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>常用选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-R, -r, --recursive</code></td>
<td>递归拷贝</td>
<td></td>
</tr>
<tr>
<td><code>-p, --preserve</code></td>
<td>拷贝时保留文件信息（default: mode,ownership,timestamps）</td>
<td></td>
</tr>
</tbody></table>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="拷贝时包含隐藏文件一起"><a href="#拷贝时包含隐藏文件一起" class="headerlink" title="拷贝时包含隐藏文件一起"></a>拷贝时包含隐藏文件一起</h3><p><code>cp -rf dir1/* dir2/</code> </p>
<p>使用此格式拷贝时，假如 <code>dir1</code> 下面包含隐藏文件，拷贝时隐藏文件不会被拷贝过去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -a</span></span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│    ├── test1</span><br><span class="line">│    └── .test2</span><br><span class="line">└── dir2</span><br><span class="line"></span><br><span class="line">2 directories, 2 files</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如上所示的目录结构，执行命令 <code>cp -rf dir1/* dir2/</code>，观察目录结构:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -a</span></span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│    ├── test1</span><br><span class="line">│    └── .test2</span><br><span class="line">└── dir2</span><br><span class="line">    └── test1</span><br><span class="line"></span><br><span class="line">2 directories, 3 files</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>看见，<code>dir/.test</code> 未被拷贝，如果拷贝时希望同时保护隐藏文件，可以使用 <code>.</code> 代替 <code>*</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -a</span></span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│    ├── test1</span><br><span class="line">│    └── .test2</span><br><span class="line">└── dir2</span><br><span class="line"></span><br><span class="line">2 directories, 2 files</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> -rf dir1/. dir2/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -a</span></span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│    ├── test1</span><br><span class="line">│    └── .test2</span><br><span class="line">└── dir2</span><br><span class="line">    ├── test1</span><br><span class="line">    └── .test2</span><br><span class="line"></span><br><span class="line">2 directories, 4 files</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 系统崩溃问题分析</title>
    <url>/202304191031/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7 5.4.221-1.el7</li>
<li>Docker Engine - Community 20.10.9</li>
</ul>
<p>本文档中的日志分析主要依赖于 <code>journald</code> 服务记录的日志，因此首先需要对 <a href="/202211211437/" title="&#96;journald&#96; 服务记录的日志进行持久化配置">&#96;journald&#96; 服务记录的日志进行持久化配置</a></p>
<h1 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h1><h2 id="k8s-worker-节点经常死机-奔溃"><a href="#k8s-worker-节点经常死机-奔溃" class="headerlink" title="k8s worker 节点经常死机(奔溃)"></a>k8s worker 节点经常死机(奔溃)</h2><h3 id="环境信息-1"><a href="#环境信息-1" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos7 5.4.221-1.el7</li>
<li>Docker Engine - Community 20.10.9 </li>
<li>Kubernetes v1.24.7</li>
</ul>
<p>k8s 节点经常出现无响应(死机)，重启才能恢复正常。重启恢复后，检查系统 <code>messages</code> 日志。</p>
<figure class="highlight shell"><figcaption><span>/var/log/messages</span></figcaption><table><tr><td class="code"><pre><span class="line">Feb 10 12:21:40 k8s-work1 kernel: INFO: task dockerd:1443 blocked for more than 368 seconds.</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel:      Tainted: G            E     5.4.221-1.el7.elrepo.x86_64 #1</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: &quot;echo 0 &gt; /proc/sys/kernel/hung_task_timeout_secs&quot; disables this message.</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: dockerd         D    0  1443      1 0x00004080</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: Call Trace:</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: __schedule+0x2d2/0x730</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: schedule+0x42/0xb0</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: wb_wait_for_completion+0x56/0x90</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: ? finish_wait+0x80/0x80</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: sync_inodes_sb+0xd4/0x2c0</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: ? __filemap_fdatawrite_range+0xf1/0x110</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: sync_filesystem+0x5f/0xa0</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: ovl_sync_fs+0x39/0x60 [overlay]</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: sync_filesystem+0x79/0xa0</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: generic_shutdown_super+0x27/0x110</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: kill_anon_super+0x18/0x30</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: deactivate_locked_super+0x3b/0x80</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: deactivate_super+0x3e/0x50</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: cleanup_mnt+0x109/0x160</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: __cleanup_mnt+0x12/0x20</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: task_work_run+0x8f/0xb0</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: exit_to_usermode_loop+0x10c/0x130</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: do_syscall_64+0x170/0x1b0</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: entry_SYSCALL_64_after_hwframe+0x5c/0xc1</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: RIP: 0033:0x55cf9a53e13b</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: Code: Bad RIP value.</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: RSP: 002b:000000c252fea778 EFLAGS: 00000212 ORIG_RAX: 00000000000000a6</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: RAX: 0000000000000000 RBX: 000000c000070800 RCX: 000055cf9a53e13b</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: RDX: 0000000000000000 RSI: 0000000000000002 RDI: 000000c2d000c3f0</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: RBP: 000000c252fea7d0 R08: 0000000000000000 R09: 0000000000000000</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: R10: 0000000000000000 R11: 0000000000000212 R12: 0000000000000000</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: R13: 0000000000000001 R14: 000000000000000a R15: ffffffffffffffff</span><br></pre></td></tr></table></figure>
<p>从日志中可看出，<code>dockerd</code> 进程处于 <a href="/202304181637/" title="&#96;D&#96; 状态">&#96;D&#96; 状态</a>，说明 <code>dockerd</code> 在等待 IO 操作，根据进程调用的栈信息，显示存在对 <code>overlay</code> 文件系统的同步操作，初步猜测，可能是因为 <code>overlay</code> 文件系统中的某些操作未能及时完成，导致了 <code>dockerd</code> 进程的阻塞。</p>
<p>继续检查日志，看到系统连接 NFS 服务超时，怀疑可能是因为 NFS 异常导致。</p>
<figure class="highlight shell"><figcaption><span>/var/log/messages</span></figcaption><table><tr><td class="code"><pre><span class="line">Feb 10 12:21:40 k8s-work1 kernel: nfs: server 172.31.88.9 not responding, timed out</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: nfs: server 172.31.88.9 not responding, still trying</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: nfs: server 172.31.88.9 not responding, timed out</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: nfs: server 172.31.88.9 not responding, still trying</span><br><span class="line">Feb 10 12:21:40 k8s-work1 kernel: nfs: server 172.31.88.9 not responding, timed out</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>curl 命令常见用法</title>
    <url>/202302201557/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 3.10.0-1062</li>
</ul>
<h1 id="curl-命令示例"><a href="#curl-命令示例" class="headerlink" title="curl 命令示例"></a>curl 命令示例</h1><p>常见选项 </p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-v</code></td>
<td>输出详细信息</td>
<td></td>
</tr>
<tr>
<td><code>-0</code></td>
<td>内容输出到指定文件或设备</td>
<td><code>curl -o /dev/null</code></td>
</tr>
<tr>
<td><code>-s</code></td>
<td>不输出任何信息（http 响应内容除外）</td>
<td></td>
</tr>
<tr>
<td><code>-w</code></td>
<td>自定义输出内容</td>
<td><code>curl -s -o /dev/null -w %&#123;http_code&#125; https://csms.tech</code></td>
</tr>
<tr>
<td><code>-I</code></td>
<td>只获取响应头部信息</td>
<td><code>curl -I https://csms.tech</code></td>
</tr>
<tr>
<td><code>--resolve yourdomain.com:443:source_ip</code></td>
<td>将 <code>domain:port</code> 解析为指定的 IP</td>
<td><a href="#SSL_ERROR_BAD_CERT_DOMAIN">使用方法参考</a><br/><code>curl -v -H &quot;Host: admin.test.com&quot; --resolve admin.test.com:443:52.52.2.9 https://admin.test.com</code></td>
</tr>
<tr>
<td><code>-H, --header</code></td>
<td>自定义 http 请求头部</td>
<td><code>-H &quot;Host: admin.test.com&quot;</code></td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="输出响应状态码"><a href="#输出响应状态码" class="headerlink" title="输出响应状态码"></a>输出响应状态码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s -o /dev/null -w %&#123;http_code&#125; https://csms.tech</span><br></pre></td></tr></table></figure>

<h2 id="只获取响应头部"><a href="#只获取响应头部" class="headerlink" title="只获取响应头部"></a>只获取响应头部</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -I csms.tech</span><br></pre></td></tr></table></figure>

<h1 id="常见用法示例"><a href="#常见用法示例" class="headerlink" title="常见用法示例"></a>常见用法示例</h1><h2 id="使用-curl-定位多层跨域问题"><a href="#使用-curl-定位多层跨域问题" class="headerlink" title="使用 curl 定位多层跨域问题"></a>使用 curl 定位多层跨域问题</h2><p>线上域名前面使用了 Nginx 反向代理和 CDN，Nginx 上面配置了允许跨域，在域名使用过程中前段页面报跨域错误，错误信息如下图<br><img src="https://i.csms.tech/img_223.png"></p>
<p>主要报错：<code>The &#39;Access-Control-Allow-Origin&#39; header contains multiple values &#39;*, *&#39;, but only one is allowed.</code>，这个问题原因是域名请求的响应中包含了多层跨域配置，使用 <code>curl</code> 请求响应信息如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -I api.mydomain.com</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: api.mydomain.com</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 200 OK</span></span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Content-Length: 137</span><br><span class="line">&lt; Last-Modified: Wed, 01 Nov 2023 02:20:00 GMT</span><br><span class="line">&lt; ETag: &quot;6541b5d0-89&quot;</span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt; Access-Control-Allow-Origin: *</span><br><span class="line">&lt; Access-Control-Allow-Credentials: true</span><br><span class="line">&lt; Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS</span><br><span class="line">&lt; Access-Control-Allow-Headers: DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization</span><br><span class="line">&lt; Access-Control-Max-Age: 1728000</span><br><span class="line">&lt; Date: Thu, 16 Nov 2023 03:04:52 GMT</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Access-Control-Allow-Headers: *</span><br><span class="line">&lt; Access-Control-Allow-Methods: &#x27;GET, POST, OPTIONS&#x27;</span><br><span class="line">&lt; Access-Control-Allow-Origin: *</span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure>
<p>以上请求的响应中，跨域相关配置 <code>Access-Control-Allow-*</code> 有 2 个，形成了多层跨域配置。这种情况是因为请求响应经过的多个节点都配置了跨域相关参数，可能配置跨域参数的地方一般包括服务端（代码），反代，CDN 等。本示例中已知 Nginx 反代配置了跨域选项。为了定位到另一个跨域配置的来源，可以参考以下思路及命令</p>
<ol>
<li>确定跨越配置是否来自服务端（代码框架）。为了实现此目的，可以在服务端直接请求响应，使响应不经过反代及 CDN。参考命令如下 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -v -I <span class="string">&quot;Host: api.mydomain.com&quot;</span> --resolve api.mydomain.com:80:127.0.0.1 http://api.mydomain.com</span></span><br><span class="line">* Expire in 0 ms for 6 (transfer 0x55c2a4a1a0f0)</span><br><span class="line">* Added api.mydomain.com:80:127.0.0.1 to DNS cache</span><br><span class="line">* Closing connection -1</span><br><span class="line">curl: (3) URL using bad/illegal format or missing URL</span><br><span class="line">* Expire in 0 ms for 6 (transfer 0x55c2a4a1a0f0)</span><br><span class="line">* RESOLVE api.mydomain.com:80 is - old addresses discarded!</span><br><span class="line">* Added api.mydomain.com:80:127.0.0.1 to DNS cache</span><br><span class="line">* Hostname api.mydomain.com was found in DNS cache</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Expire in 200 ms for 4 (transfer 0x55c2a4a1a0f0)</span><br><span class="line">* Connected to api.mydomain.com (127.0.0.1) port 80 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HEAD / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: api.mydomain.com</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.64.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 200 OK</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">&lt; Server: nginx/1.21.6</span><br><span class="line">Server: nginx/1.21.6</span><br><span class="line">&lt; Date: Thu, 16 Nov 2023 03:34:46 GMT</span><br><span class="line">Date: Thu, 16 Nov 2023 03:34:46 GMT</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">Content-Type: text/html</span><br><span class="line">&lt; Content-Length: 137</span><br><span class="line">Content-Length: 137</span><br><span class="line">&lt; Last-Modified: Wed, 01 Nov 2023 02:20:50 GMT</span><br><span class="line">Last-Modified: Wed, 01 Nov 2023 02:20:50 GMT</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">Connection: keep-alive</span><br><span class="line">&lt; ETag: &quot;6541b602-89&quot;</span><br><span class="line">ETag: &quot;6541b602-89&quot;</span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">&lt; </span><br></pre></td></tr></table></figure>
 以上命令使用 <code>curl</code> 将域名直接解析为本地服务器并发送请求，获得的响应为服务器直接返回，不经过上层的反代服务器及 CDN。从响应结果中可以看到服务器响应中未包含跨域配置，说明服务端未配置跨域。</li>
<li>确定跨越配置是否来自反代服务器。参考以下命令，将域名直接解析到反代服务器，绕过 CDN 获得响应 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -v -I -H <span class="string">&quot;Host: api.mydomain.com&quot;</span> --resolve api.mydomain.com:443:13.1.1.9 https://api.mydomain.com</span></span><br><span class="line">* Added api.mydomain.com:443:13.1.1.9 to DNS cache</span><br><span class="line">* About to connect() to api.mydomain.com port 443 (#0)</span><br><span class="line">*   Trying 13.1.1.9...</span><br><span class="line">* Connected to api.mydomain.com (13.1.1.9) port 443 (#0)</span><br><span class="line">* Initializing NSS with certpath: sql:/etc/pki/nssdb</span><br><span class="line">*   CAfile: /etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">  CApath: none</span><br><span class="line">* SSL connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</span><br><span class="line">* Server certificate:</span><br><span class="line">* 	subject: CN=aapp.b3b5b07.com</span><br><span class="line">* 	start date: Sep 08 00:00:00 2023 GMT</span><br><span class="line">* 	expire date: Sep 07 23:59:59 2024 GMT</span><br><span class="line">* 	common name: aapp.b3b5b07.com</span><br><span class="line">* 	issuer: CN=Sectigo RSA Domain Validation Secure Server CA,O=Sectigo Limited,L=Salford,ST=Greater Manchester,C=GB</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">HEAD / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: api.mydomain.com</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 200 OK</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Thu, 16 Nov 2023 03:40:54 GMT</span><br><span class="line">Date: Thu, 16 Nov 2023 03:40:54 GMT</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">Content-Type: text/html</span><br><span class="line">&lt; Content-Length: 137</span><br><span class="line">Content-Length: 137</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">Connection: keep-alive</span><br><span class="line">&lt; Last-Modified: Wed, 01 Nov 2023 02:20:00 GMT</span><br><span class="line">Last-Modified: Wed, 01 Nov 2023 02:20:00 GMT</span><br><span class="line">&lt; ETag: &quot;6541b5d0-89&quot;</span><br><span class="line">ETag: &quot;6541b5d0-89&quot;</span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">&lt; Strict-Transport-Security: max-age=15724800; includeSubDomains</span><br><span class="line">Strict-Transport-Security: max-age=15724800; includeSubDomains</span><br><span class="line">&lt; Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">&lt; Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">&lt; Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS</span><br><span class="line">Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS</span><br><span class="line">&lt; Access-Control-Allow-Headers: DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization</span><br><span class="line">Access-Control-Allow-Headers: DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization</span><br><span class="line">&lt; Access-Control-Max-Age: 1728000</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure>
 从以上输出的响应中，可以看到，已经有了跨域的配置，这个配置来自反代服务器。</li>
<li>直接请求域名，因为域名配置了 CDN 加速，直接请求获得的响应是经过 CDN 返回<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -v api.mydomain.com</span></span><br><span class="line">* About to connect() to api.mydomain.com port 80 (#0)</span><br><span class="line">*   Trying 23.192.228.90...</span><br><span class="line">* Connected to api.mydomain.com (23.192.228.90) port 80 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: api.mydomain.com</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 200 OK</span></span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Content-Length: 137</span><br><span class="line">&lt; Last-Modified: Wed, 01 Nov 2023 02:20:00 GMT</span><br><span class="line">&lt; ETag: &quot;6541b5d0-89&quot;</span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt; Access-Control-Allow-Origin: *</span><br><span class="line">&lt; Access-Control-Allow-Credentials: true</span><br><span class="line">&lt; Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS</span><br><span class="line">&lt; Access-Control-Allow-Headers: DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization</span><br><span class="line">&lt; Access-Control-Max-Age: 1728000</span><br><span class="line">&lt; Date: Thu, 16 Nov 2023 03:04:52 GMT</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Access-Control-Allow-Headers: *</span><br><span class="line">&lt; Access-Control-Allow-Methods: &#x27;GET, POST, OPTIONS&#x27;</span><br><span class="line">&lt; Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>
以上直接请求 CDN 域名的响应结果中，包含了两层跨域。</li>
</ol>
<p>经过以上步骤，基本可以判断，本示例中的两层跨域配置分别来自于反代服务器和 CDN 配置。要解决此问题，只需要 <strong>在反代服务器或者 CDN 上取消跨域，只保持一个节点有跨域配置即可</strong></p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="SSL-ERROR-BAD-CERT-DOMAIN"><a href="#SSL-ERROR-BAD-CERT-DOMAIN" class="headerlink" title="SSL_ERROR_BAD_CERT_DOMAIN"></a>SSL_ERROR_BAD_CERT_DOMAIN</h2><h3 id="环境信息-1"><a href="#环境信息-1" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos7 5.4.225-1</li>
<li>curl 7.29.0</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl --version</span><br><span class="line">curl 7.29.0 (x86_64-redhat-linux-gnu) libcurl/7.29.0 NSS/3.53.1 zlib/1.2.7 libidn/1.28 libssh2/1.8.0</span><br><span class="line">Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp scp sftp smtp smtps telnet tftp </span><br><span class="line">Features: AsynchDNS GSS-Negotiate IDN IPv6 Largefile NTLM NTLM_WB SSL libz unix-sockets</span><br></pre></td></tr></table></figure>

<p>使用以下 <code>curl</code> 命令直接访问服务器来验证域名证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v -H <span class="string">&quot;Host: admin.test.com&quot;</span> https://52.52.2.9</span></span><br><span class="line">* About to connect() to 52.52.2.9 port 443 (#0)</span><br><span class="line">*   Trying 52.52.2.9...</span><br><span class="line">* Connected to 52.52.2.9 (52.52.2.9) port 443 (#0)</span><br><span class="line">* Initializing NSS with certpath: sql:/etc/pki/nssdb</span><br><span class="line">*   CAfile: /etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">  CApath: none</span><br><span class="line">* Server certificate:</span><br><span class="line">* 	subject: CN=admin.test.com</span><br><span class="line">* 	start date: Mar 14 00:00:00 2023 GMT</span><br><span class="line">* 	expire date: Mar 13 23:59:59 2024 GMT</span><br><span class="line">* 	common name: admin.test.com</span><br><span class="line">* 	issuer: CN=Sectigo RSA Domain Validation Secure Server CA,O=Sectigo Limited,L=Salford,ST=Greater Manchester,C=GB</span><br><span class="line">* NSS error -12276 (SSL_ERROR_BAD_CERT_DOMAIN)</span><br><span class="line">* Unable to communicate securely with peer: requested domain name does not match the server&#x27;s certificate.</span><br><span class="line">* Closing connection 0</span><br><span class="line">curl: (51) Unable to communicate securely with peer: requested domain name does not match the server&#x27;s certificate.</span><br></pre></td></tr></table></figure>
<p>结果显示，请求的域名和服务器中的域名证书不匹配（<code>requested domain name does not match the server&#39;s certificate.</code>），通过浏览器直接访问域名(可以将域名和其对应 IP 写入系统 hosts 文件)，显示证书正常，使用 <code>openssl s_client</code> 命令验证证书，结果也显示正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> | openssl s_client -servername  admin.test.com -connect 52.52.2.9:443</span></span><br><span class="line">CONNECTED(00000003)</span><br><span class="line">depth=3 C = GB, ST = Greater Manchester, L = Salford, O = Comodo CA Limited, CN = AAA Certificate Services</span><br><span class="line">verify return:1</span><br><span class="line">depth=2 C = US, ST = New Jersey, L = Jersey City, O = The USERTRUST Network, CN = USERTrust RSA Certification Authority</span><br><span class="line">verify return:1</span><br><span class="line">depth=1 C = GB, ST = Greater Manchester, L = Salford, O = Sectigo Limited, CN = Sectigo RSA Domain Validation Secure Server CA</span><br><span class="line">verify return:1</span><br><span class="line">depth=0 CN = admin.test.com</span><br><span class="line">verify return:1</span><br><span class="line">---</span><br><span class="line">Certificate chain</span><br><span class="line"> 0 s:/CN=admin.test.com</span><br><span class="line">   i:/C=GB/ST=Greater Manchester/L=Salford/O=Sectigo Limited/CN=Sectigo RSA Domain Validation Secure Server CA</span><br><span class="line"> 1 s:/C=GB/ST=Greater Manchester/L=Salford/O=Sectigo Limited/CN=Sectigo RSA Domain Validation Secure Server CA</span><br><span class="line">   i:/C=US/ST=New Jersey/L=Jersey City/O=The USERTRUST Network/CN=USERTrust RSA Certification Authority</span><br><span class="line"> 2 s:/C=US/ST=New Jersey/L=Jersey City/O=The USERTRUST Network/CN=USERTrust RSA Certification Authority</span><br><span class="line">   i:/C=GB/ST=Greater Manchester/L=Salford/O=Comodo CA Limited/CN=AAA Certificate Services</span><br><span class="line">---</span><br><span class="line">Server certificate</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIGQTCCBSmgAwIBAgIRAMrTCHWnCEPDYFZcToXLKC8wDQYJKoZIhvcNAQELBQAw</span><br><span class="line">gY8xCzAJBgNVBAYTAkdCMRswGQYDVQQIExJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAO</span><br><span class="line">BgNVBAcTB1NhbGZvcmQxGDAWBgNVBAoTD1NlY3RpZ28gTGltaXRlZDE3MDUGA1UE</span><br><span class="line">AxMuU2VjdGlnbyBSU0EgRG9tYWluIFZhbGlkYXRpb24gU2VjdXJlIFNlcnZlciBD</span><br><span class="line">...</span><br><span class="line">Srqh+IFfIKzcHX1eyPxluInUGxxHhVVPeLdzBGL2owLJ/u7YxMkmaiCaCZc9Tugt</span><br><span class="line">1aX61uQWmAUM1I4IhPCj1qKNWt94</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">subject=/CN=admin.test.com</span><br><span class="line">issuer=/C=GB/ST=Greater Manchester/L=Salford/O=Sectigo Limited/CN=Sectigo RSA Domain Validation Secure Server CA</span><br><span class="line">---</span><br><span class="line">No client certificate CA names sent</span><br><span class="line">Peer signing digest: SHA512</span><br><span class="line">Server Temp Key: ECDH, P-256, 256 bits</span><br><span class="line">---</span><br><span class="line">SSL handshake has read 5278 bytes and written 441 bytes</span><br><span class="line">---</span><br><span class="line">New, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES256-GCM-SHA384</span><br><span class="line">Server public key is 2048 bit</span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Compression: NONE</span><br><span class="line">Expansion: NONE</span><br><span class="line">No ALPN negotiated</span><br><span class="line">SSL-Session:</span><br><span class="line">    Protocol  : TLSv1.2</span><br><span class="line">    Cipher    : ECDHE-RSA-AES256-GCM-SHA384</span><br><span class="line">    Session-ID: 40CFB3F53E5143F85E260CE777CEB6885A184401654EE71CB386FD5D3679D822</span><br><span class="line">    Session-ID-ctx: </span><br><span class="line">    Master-Key: 4FBB5C03A77D33AD14326C272F6D7A61528DA39763067EC27D21FFF13B16CDC71CEBCCF3E8443E5961AC7887F272D3CC</span><br><span class="line">    Key-Arg   : None</span><br><span class="line">    Krb5 Principal: None</span><br><span class="line">    PSK identity: None</span><br><span class="line">    PSK identity hint: None</span><br><span class="line">    TLS session ticket lifetime hint: 300 (seconds)</span><br><span class="line">    TLS session ticket:</span><br><span class="line">    0000 - c1 a5 66 e3 d5 68 a7 c5-02 29 03 60 12 7d 74 bf   ..f..h...).`.&#125;t.</span><br><span class="line">    0010 - fe 85 25 0f 76 8a 63 59-9c c7 f2 d4 15 5c 95 fb   ..%.v.cY.....\..</span><br><span class="line">    0020 - 37 5b 48 d2 74 45 e5 c5-8b af 09 8a 19 14 69 ea   7[H.tE........i.</span><br><span class="line">    0030 - cd 23 52 9b a9 e2 2c cb-0d ab 31 9e a9 b4 5f fd   .#R...,...1..._.</span><br><span class="line">    0040 - f9 ce bd b3 f8 68 0e 76-56 f8 76 a0 6b b2 85 93   .....h.vV.v.k...</span><br><span class="line">    0050 - 49 1e a6 61 16 17 73 b5-2c c9 69 53 a1 b3 b2 bf   I..a..s.,.iS....</span><br><span class="line">    0060 - 2c 74 7d 4d a5 c2 8d 00-1f 59 ce a5 c3 13 22 0a   ,t&#125;M.....Y....&quot;.</span><br><span class="line">    0070 - eb 85 33 33 a3 26 32 eb-38 1a 0c 16 c6 74 cb 16   ..33.&amp;2.8....t..</span><br><span class="line">    0080 - 34 2d 57 5c b7 3b 3b 68-22 23 4f 6f 52 d3 4f 3f   4-W\.;;h&quot;#OoR.O?</span><br><span class="line">    0090 - e9 6b 87 3b 2a da 2f 8f-4d 21 32 e2 c9 d4 3c 01   .k.;*./.M!2...&lt;.</span><br><span class="line">    00a0 - f7 96 36 1f 73 39 8c 80-b9 86 aa 01 b6 7b 57 40   ..6.s9.......&#123;W@</span><br><span class="line">    00b0 - 49 c1 ec 17 96 18 3c 65-2e 10 18 b5 3a 14 5d c9   I.....&lt;e....:.].</span><br><span class="line"></span><br><span class="line">    Start Time: 1683609320</span><br><span class="line">    Timeout   : 300 (sec)</span><br><span class="line">    Verify return code: 0 (ok)</span><br><span class="line">---</span><br><span class="line">DONE</span><br></pre></td></tr></table></figure>

<p>由以上判断可得出结论，域名配置的证书没问题，应该是 <code>curl</code> 的问题。正确命令如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v -H <span class="string">&quot;Host: admin.test.com&quot;</span> --resolve admin.test.com:443:52.52.2.9 https://admin.test.com</span></span><br><span class="line">* Added admin.test.com:443:52.52.2.9 to DNS cache</span><br><span class="line">* About to connect() to admin.test.com port 443 (#0)</span><br><span class="line">*   Trying 52.52.2.9...</span><br><span class="line">* Connected to admin.test.com (52.52.2.9) port 443 (#0)</span><br><span class="line">* Initializing NSS with certpath: sql:/etc/pki/nssdb</span><br><span class="line">*   CAfile: /etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">  CApath: none</span><br><span class="line">* SSL connection using TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</span><br><span class="line">* Server certificate:</span><br><span class="line">* 	subject: CN=admin.test.com</span><br><span class="line">* 	start date: Mar 14 00:00:00 2023 GMT</span><br><span class="line">* 	expire date: Mar 13 23:59:59 2024 GMT</span><br><span class="line">* 	common name: admin.test.com</span><br><span class="line">* 	issuer: CN=Sectigo RSA Domain Validation Secure Server CA,O=Sectigo Limited,L=Salford,ST=Greater Manchester,C=GB</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: admin.test.com</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 404 Not Found</span></span><br><span class="line">&lt; Server: nginx</span><br><span class="line">&lt; Content-Type: text/html; charset=UTF-8</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Vary: Accept-Encoding</span><br><span class="line">&lt; X-Powered-By: PHP/7.4.13</span><br><span class="line">&lt; Cache-Control: no-cache, private</span><br><span class="line">&lt; date: Tue, 09 May 2023 06:01:16 GMT</span><br><span class="line">&lt; </span><br><span class="line">* Connection #0 to host admin.test.com left intact</span><br></pre></td></tr></table></figure>

<h2 id="Bad-Request-chat-id-is-empty"><a href="#Bad-Request-chat-id-is-empty" class="headerlink" title="Bad Request: chat_id is empty"></a>Bad Request: chat_id is empty</h2><p>在执行以下命令向 telegram 发送消息时，返回了错误消息 : <code>&#123;&quot;ok&quot;:false,&quot;error_code&quot;:400,&quot;description&quot;:&quot;Bad Request: chat_id is empty&quot;&#125;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v https://api.telegram.org/bot568321111:AAHza111111111111Xcs2I/sendMessage?text=hello&amp;chat_id=-10018411111777</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET /bot568321111:AAHza111111111111Xcs2I/sendMessage?text=hello HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: api.telegram.org</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 400 Bad Request</span></span><br><span class="line">&lt; Server: nginx/1.18.0</span><br><span class="line">&lt; Date: Fri, 02 Jun 2023 02:17:27 GMT</span><br><span class="line">&lt; Content-Type: application/json</span><br><span class="line">&lt; Content-Length: 75</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Strict-Transport-Security: max-age=31536000; includeSubDomains; preload</span><br><span class="line">&lt; Access-Control-Allow-Origin: *</span><br><span class="line">&lt; Access-Control-Expose-Headers: Content-Length,Content-Type,Date,Server,Connection</span><br><span class="line">&lt; </span><br><span class="line">* Connection #0 to host api.telegram.org left intact</span><br><span class="line">&#123;&quot;ok&quot;:false,&quot;error_code&quot;:400,&quot;description&quot;:&quot;Bad Request: chat_id is empty&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>根据 <code>curl</code> 打印的详细的请求和响应头部信息，可以看到发送的 url 存在问题，ulr 中的 <code>chat_id=-10018411111777</code> 实际并未被发送，url 变成了 <code>/bot5683237521:AAHzaGf0oRg8A3RiYeM_QOxwW8yUyEXcs2I/sendMessage?text=hello</code>。这可能是因为 <code>curl</code> 未正确处理 URL 导致，可以将 url 放置在 <code>&quot;&quot;</code> 中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v <span class="string">&quot;https://api.telegram.org/bot568321111:AAHza111111111111Xcs2I/sendMessage?text=hello&amp;chat_id=-10018411111777&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET /bot568321111:AAHza111111111111Xcs2I/sendMessage?text=hello&amp;chat_id=-10018411111777 HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: api.telegram.org</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 200 OK</span></span><br><span class="line">&lt; Server: nginx/1.18.0</span><br><span class="line">&lt; Date: Fri, 02 Jun 2023 02:29:54 GMT</span><br><span class="line">&lt; Content-Type: application/json</span><br><span class="line">&lt; Content-Length: 273</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Strict-Transport-Security: max-age=31536000; includeSubDomains; preload</span><br><span class="line">&lt; Access-Control-Allow-Origin: *</span><br><span class="line">&lt; Access-Control-Allow-Methods: GET, POST, OPTIONS</span><br><span class="line">&lt; Access-Control-Expose-Headers: Content-Length,Content-Type,Date,Server,Connection</span><br><span class="line">&lt; </span><br><span class="line">* Connection #0 to host api.telegram.org left intact</span><br><span class="line">&#123;&quot;ok&quot;:true,&quot;result&quot;:&#123;&quot;message_id&quot;:5,&quot;sender_chat&quot;:&#123;&quot;id&quot;:-10018411111777,&quot;title&quot;:&quot;Alert Manager Test&quot;,&quot;username&quot;:&quot;ttydddrrr&quot;,&quot;type&quot;:&quot;channel&quot;&#125;,&quot;chat&quot;:&#123;&quot;id&quot;:-10018411111777,&quot;title&quot;:&quot;Alert Manager Test&quot;,&quot;username&quot;:&quot;ttydddrrr&quot;,&quot;type&quot;:&quot;channel&quot;&#125;,&quot;date&quot;:1685672994,&quot;text&quot;:&quot;hello&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SSL-ERROR-RX-RECORD-TOO-LONG"><a href="#SSL-ERROR-RX-RECORD-TOO-LONG" class="headerlink" title="SSL_ERROR_RX_RECORD_TOO_LONG"></a>SSL_ERROR_RX_RECORD_TOO_LONG</h2><p>命令及输出如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -v -u elastic1:XhScf5JqwVsSQwHe= -XGET <span class="string">&#x27;https://172.31.25.229:9200/_cluster/health&#x27;</span></span></span><br><span class="line">* About to connect() to 172.31.25.229 port 9200 (#0)</span><br><span class="line">*   Trying 172.31.25.229...</span><br><span class="line">* Connected to 172.31.25.229 (172.31.25.229) port 9200 (#0)</span><br><span class="line">* Initializing NSS with certpath: sql:/etc/pki/nssdb</span><br><span class="line">*   CAfile: /etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">  CApath: none</span><br><span class="line">* NSS error -12263 (SSL_ERROR_RX_RECORD_TOO_LONG)</span><br><span class="line">* SSL received a record that exceeded the maximum permissible length.</span><br><span class="line">* Closing connection 0</span><br><span class="line">curl: (35) SSL received a record that exceeded the maximum permissible length. </span><br></pre></td></tr></table></figure>

<p>以上报错原因可能为 <em><strong>在没有启用 SSL&#x2F;TLS 的端口上尝试使用 HTTPS</strong></em></p>
<h2 id="SEC-ERROR-UNKNOWN-ISSUER"><a href="#SEC-ERROR-UNKNOWN-ISSUER" class="headerlink" title="SEC_ERROR_UNKNOWN_ISSUER"></a>SEC_ERROR_UNKNOWN_ISSUER</h2><a href="/202210191515/" title="Docker 私有镜像仓库 Harbor">Docker 私有镜像仓库 Harbor</a> 的证书到期后，使用云平台申请的证书更换，部署到服务器后，浏览器访问 HTTPS 正常，使用 `curl` 命令访问失败，使用 `docker` 拉取镜像失败，Kubernetes 中拉取镜像失败，相关命令及输出如下
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -v -I https://harbor1.mydomain.com/</span></span><br><span class="line">* About to connect() to harbor1.mydomain.com port 443 (#0)</span><br><span class="line">*   Trying 172.31.93.6...</span><br><span class="line">* Connected to harbor1.mydomain.com (172.31.93.6) port 443 (#0)</span><br><span class="line">* Initializing NSS with certpath: sql:/etc/pki/nssdb</span><br><span class="line">*   CAfile: /etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">  CApath: none</span><br><span class="line">* Server certificate:</span><br><span class="line">* 	subject: CN=harbor1.mydomain.com</span><br><span class="line">* 	start date: Nov 15 00:00:00 2023 GMT</span><br><span class="line">* 	expire date: Nov 14 23:59:59 2024 GMT</span><br><span class="line">* 	common name: harbor1.mydomain.com</span><br><span class="line">* 	issuer: CN=RapidSSL TLS RSA CA G1,OU=www.digicert.com,O=DigiCert Inc,C=US</span><br><span class="line">* NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER)</span><br><span class="line">* Peer&#x27;s Certificate issuer is not recognized.</span><br><span class="line">* Closing connection 0</span><br><span class="line">curl: (60) Peer&#x27;s Certificate issuer is not recognized.</span><br><span class="line">More details here: http://curl.haxx.se/docs/sslcerts.html</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker pull harbor1.mydomain.com/ops/all/cloud-server:master-0.0-20230207143540</span></span><br><span class="line">Error response from daemon: Get &quot;https://harbor1.mydomain.com/v2/&quot;: x509: certificate signed by unknown authority</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe pod -n ops get-cloud-cdn-pjfsc-hwnpp</span></span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age               From               Message</span><br><span class="line">  ----     ------     ----              ----               -------</span><br><span class="line">  Normal   Scheduled  22s               default-scheduler  Successfully assigned ops/get-cloud-cdn-pjfsc-hwnpp to fm-k8s-c1-worker1</span><br><span class="line">  Normal   BackOff    21s               kubelet            Back-off pulling image &quot;harbor1.mydomain.com/ops/all/cloud-server-cdn-statistics-code:master-0.0-20230207143540&quot;</span><br><span class="line">  Warning  Failed     21s               kubelet            Error: ImagePullBackOff</span><br><span class="line">  Normal   Pulling    6s (x2 over 21s)  kubelet            Pulling image &quot;harbor1.mydomain.com/ops/all/cloud-server-cdn-statistics-code:master-0.0-20230207143540&quot;</span><br><span class="line">  Warning  Failed     6s (x2 over 21s)  kubelet            Failed to pull image &quot;harbor1.mydomain.com/ops/all/cloud-server-cdn-statistics-code:master-0.0-20230207143540&quot;: rpc error: code = Unknown desc = failed to pull and unpack image &quot;harbor1.mydomain.com/ops/all/cloud-server-cdn-statistics-code:master-0.0-20230207143540&quot;: failed to resolve reference &quot;harbor1.mydomain.com/ops/all/cloud-server-cdn-statistics-code:master-0.0-20230207143540&quot;: failed to do request: Head &quot;https://harbor1.mydomain.com/v2/ops/all/cloud-server-cdn-statistics-code/manifests/master-0.0-20230207143540&quot;: x509: certificate signed by unknown authority</span><br><span class="line">  Warning  Failed     6s (x2 over 21s)  kubelet            Error: ErrImagePull</span><br></pre></td></tr></table></figure>

<p>此问题的主要原因为操作系统层面没有所使用证书的 CA 信息，因此无法验证此证书的合法性。解决办法为刷新操作系统 CA 证书列表，添加异常域名的 CA 信息。操作步骤参考以下过程（<strong>本示例基于 Centos7，不同操作系统步骤存储 CA 的位置可能不同</strong>），此操作 <em><strong>需要在所有使用此域名的主机系统上进行更新（比如所有的 Kubernetes 节点上）</strong></em></p>
<ol>
<li>将异常域名的证书（如 <code>domain.crt</code>，<em><strong>此处的证书一定要确保是 PEM 格式的证书，如果不是 PEM 格式的证书，需要将其转换为 PEM 格式</strong></em>）复制到 <code>/etc/pki/ca-trust/source/anchors/</code> 目录下，如果不存在此目录，可以手动创建</li>
<li>更新操作系统证书存储信息，执行命令 <code>update-ca-trust</code></li>
<li>重启 Docker 或其他容器运行时，执行命令 <code>systemctl restart docker</code></li>
<li>重新执行命令，验证证书。</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 文件权限控制</title>
    <url>/202306261438/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在 Linux 系统中，普通的文件权限控制通过关联身份三元组 (<code>user</code>, <code>group</code>,<code>other</code>) 和权限三元组 (<code>r</code>, <code>w</code>, <code>x</code>) 来实现访问控制。</p>
<p>系统存在一个 <code>umask</code> 值（针对用户），<code>umask</code> 是一个权限掩码，它决定了新建的文件或者目录的默认权限，使用 <code>mask</code> 命令可以查看当前(用户) 的  <code>umask</code> 值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">umask</span></span></span><br><span class="line">0022</span><br></pre></td></tr></table></figure>
<p>比如如上所示的 <code>umask</code> 值，决定了当前(用户)创建的文件和目录的默认权限</p>
<ul>
<li><code>目录</code> - 默认权限为 <code>0755</code> （<code>777-022</code>），即 <code>rwxr-xr-x</code></li>
<li><code>文件</code> - 默认权限为 <code>644</code> (<code>666-022</code>)，即 <code>rw-r--r--</code></li>
</ul>
<p>因此要配置当前(用户)创建的文件或者目录的默认权限，只需要配置合适的 <code>umask</code> 值即可。配置 <code>umask</code> 值可以通过以下方法</p>
<ul>
<li>临时方法  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">umask 027</span><br></pre></td></tr></table></figure></li>
<li>永久方法<br>  根据需求将 <code>umask 027</code> 配置添加到配置文件中，如 <code>/etc/profile</code>、<code>~/.bashrc</code>、<code>~/.bash_profile</code> 等</li>
</ul>
<p>如果需要更进一步的权限控制，需要使用到 <code>Sticky Bit</code> 和 ACL</p>
<h1 id="Sticky-Bit"><a href="#Sticky-Bit" class="headerlink" title="Sticky Bit"></a>Sticky Bit</h1><p>粘滞位 (<code>Sticky Bit</code>) 只能用于目录，并对其中的文件有特殊的权限控制。他的主要作用是确保只有文件的所有者才能够删除或者修改文件。要给某个目录配置 粘滞位 (<code>Sticky Bit</code>)，使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +t directoryname</span><br></pre></td></tr></table></figure>
<p>这将为目录 <code>directoryname</code> 配置粘滞位 (<code>Sticky Bit</code>)，以下命令可以验证 粘滞位 (<code>Sticky Bit</code>)是否存在。如果目录的权限列表中有 <code>t</code> 标志，表示目录设置了 粘滞位 (<code>Sticky Bit</code>)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l directoryname</span></span><br><span class="line">drwxrwxrwt  2 owner group   4096 Jun 26 10:15 directoryname</span><br></pre></td></tr></table></figure>

<p><strong>设置粘滞位后，只有文件的所有者才能删除或修改该文件。其他用户即使有写权限（<code>w</code>），也无法删除其他用户的文件。</strong></p>
<span id="more"></span>
<h1 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h1><p>使用访问控制列表（ACL），可以为单个文件或目录添加更细粒度的权限控制。使用的命令为 <code>setfacl</code> 和 <code>getfacl</code>。</p>
<p>相比普通权限控制，文件访问控制列表（ACL）权限的优先级更高，当存在 ACL 权限时，它将覆盖普通权限。需要注意的是 <strong>ACL 权限是基于文件系统的，而不是基于传统的文件权限，因此，如果将具有 ACL 权限的文件移动到另一个文件系统，ACL 权限会丢失</strong></p>
<p><code>setfacl</code> 命令常用选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-m, --modify</code></td>
<td>修改现有的 ACL 权限</td>
<td></td>
</tr>
<tr>
<td><code>-x, --remote</code></td>
<td>移除现有的 ACL 权限</td>
<td></td>
</tr>
<tr>
<td><code>-b, --remove-all</code></td>
<td>移除文件的所有 ACL 权限</td>
<td></td>
</tr>
<tr>
<td><code>-R, --recursive</code></td>
<td>递归的应用 ACL 权限到目录及其子目录及文件</td>
<td></td>
</tr>
<tr>
<td><code>-d, --default</code></td>
<td>设置默认 ACL 权限，只适用于目录，用于控制在该目录中创建的新文件的 ACL 权限，即权限继承<br/><strong>默认 ACL 只影响新建的文件或目录，对现有的文件或目录不影响</strong></td>
<td></td>
</tr>
<tr>
<td><code>-n, --no-mask</code></td>
<td>忽略文件系统的默认掩码(<code>umask</code>)，直接应用 ACL 规则</td>
<td></td>
</tr>
</tbody></table>
<h2 id="ACL-配置示例"><a href="#ACL-配置示例" class="headerlink" title="ACL 配置示例"></a>ACL 配置示例</h2><p>以下示例配置单个用户的 ACL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setfacl -m u:username:rwx filename</span><br><span class="line"></span><br><span class="line">setfacl -R -m o::r filename</span><br></pre></td></tr></table></figure>

<p>配置多个目标权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setfacl -m u:user:rwx,g:group:rwx,o::rx directoryname</span><br></pre></td></tr></table></figure>

<p>设置默认 ACL 权限，以下命令将为目录配置指定的默认 ACL 权限，默认的 ACL 权限会被此目录下新建的文件和目录继承，即新创建的目录和文件拥有和默认 ACL 一样的权限设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setfacl -m d:u:user:rwx,d:g:group:rwx,d:o::rx directoryname</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看默认 ACL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">getfacl -d directoryname</span><br></pre></td></tr></table></figure>

<p>修改默认 ACL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setfacl -m d:u:user:rwx,d:g:group:rw-,d:o::--- directoryname</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux find 命令</title>
    <url>/202208180949/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<h1 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h1><p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find   path   -option   [ -print ]   [ -exec   -ok   command ]   &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>常用查找选项（<code>-option</code>）：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-amin n</code><br/><code>-amin +n</code><br/><code>-amin -n</code></td>
<td>在过去 n 分钟内被读取过<br/>更改时间超过 n<br/>更改时间在 n 以内</td>
<td></td>
</tr>
<tr>
<td><code>-anewer file    </code></td>
<td>比文件 file 更晚被读取过的文件</td>
<td></td>
</tr>
<tr>
<td><code>-atime n    </code></td>
<td>在过去 n 天内被读取过的文件</td>
<td></td>
</tr>
<tr>
<td><code>-cmin n   </code></td>
<td>在过去 n 分钟内被修改过</td>
<td></td>
</tr>
<tr>
<td><code>-cnewer file </code></td>
<td>比文件 file 更新的文件</td>
<td></td>
</tr>
<tr>
<td><code>-ctime n    </code></td>
<td>在过去 n 天内创建的文件</td>
<td></td>
</tr>
<tr>
<td><code>-mtime n   </code></td>
<td>在过去 n 天内修改过的文件</td>
<td></td>
</tr>
<tr>
<td><code>-empty   </code></td>
<td>空的文件</td>
<td></td>
</tr>
<tr>
<td><code>-gid n</code><br/><code>-group name</code></td>
<td>gid 是 n<br/>group 名称是 name</td>
<td></td>
</tr>
<tr>
<td><code>-user u </code></td>
<td>根据用户名查找</td>
<td></td>
</tr>
<tr>
<td><code>-nouser</code></td>
<td>属主不存在</td>
<td></td>
</tr>
<tr>
<td><code> -ipath p</code><br/><code>-path p  </code></td>
<td>路径名称符合 p 的文件，ipath 会忽略大小写</td>
<td></td>
</tr>
<tr>
<td><code> -name name</code><br/> <code>-iname name </code></td>
<td>文件名称符合 name 的文件。iname 会忽略大小写</td>
<td></td>
</tr>
<tr>
<td><code> -size n</code> <br/><code>-size +n</code><br/><code>-size -n</code></td>
<td>文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。<br/>文件大小大于 n<br/>文件大小小于 n</td>
<td></td>
</tr>
<tr>
<td><code>-type c    </code></td>
<td>文件类型是 c 的文件，c 包括：<br/>d : 目录<br/>c : 字符设备<br/>b : 块设备<br/> p : 通道设备<br/>f : 文件<br/>l : 链接文件<br/>s : socker</td>
<td></td>
</tr>
<tr>
<td><code>-pid n   </code></td>
<td>process id 是 n 的文件</td>
<td></td>
</tr>
<tr>
<td><code>-perm 0644  </code></td>
<td>权限</td>
<td></td>
</tr>
<tr>
<td><code>-maxdepth</code><br/><code>-mindepth</code></td>
<td>查找深度</td>
<td></td>
</tr>
</tbody></table>
<span id="more"></span>

<p>常用运算符：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>()</code></td>
<td>将运算表达式组合起来</td>
<td></td>
</tr>
<tr>
<td><code>-and</code></td>
<td>与</td>
<td></td>
</tr>
<tr>
<td><code>-or</code></td>
<td>或</td>
<td></td>
</tr>
<tr>
<td><code>-not</code></td>
<td>取反</td>
<td></td>
</tr>
<tr>
<td><code>!</code></td>
<td>非</td>
<td><code>find . ! -type f -print</code><br/><code>find . -anewer FILE1 ! -anewer FILE2</code></td>
</tr>
</tbody></table>
<p>常用子命令：</p>
<table>
<thead>
<tr>
<th>子命令</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-print &#123;&#125; \;</code></td>
<td>默认命令，输出查找到的目标到标准输出</td>
<td></td>
</tr>
<tr>
<td><code>-exec command &#123;&#125; \;</code></td>
<td>对查找到的目标执行命令</td>
<td></td>
</tr>
<tr>
<td><code>-ok   command &#123;&#125; \;</code></td>
<td>和 <code>-exec</code> 一样，不过执行前先询问是否执行</td>
<td></td>
</tr>
</tbody></table>
<h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><p>查找读取时间比文件 <code>FILE1</code> 晚，但又比文件 <code>FILE2</code> 早的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -anewer FILE1 ! -anewer FILE2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables 服务使用说明</title>
    <url>/202210241051/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>iptables 的底层实现是 <code>netfilter</code>，netfilter 的架构是在整个网络流程的若干位置放置一些钩子，并在每个钩子上挂载一些处理函数进行处理。</p>
<p>IP 层的 5 个钩子点的位置，对应就是 iptables 的 5 条内置链，分别是</p>
<ul>
<li><code>PREROUTING</code></li>
<li><code>FORWARD</code></li>
<li><code>INPUT</code></li>
<li><code>OUTPUT</code></li>
<li><code>POSTROUTING</code></li>
</ul>
<p><img src="https://i.csms.tech/img_133.png"><br>当网卡收到一个网络报文送达协议栈时，最先经过的 netfilter 钩子是 <code>PREROUTING</code>，此处常见的钩子函数是 <code>目的地址转换 (DNAT)</code>。无论 <code>PREROUTING</code> 是否存在钩子处理网络数据包，下一步内核都会通过查询本地路由表决定这个数据包的流向</p>
<ul>
<li>如果是发送给本地进程，则进入 <code>INPUT</code> 链传给本地进程</li>
<li>如果是发送给其他机器（或者其他 <code>network namespace</code>），则经过 netfilter 的 <code>FORWARD</code> 钩子传送出去，相当于将本地机器当作路由器</li>
</ul>
<p>所有马上要发送到网络协议栈之外的数据包，都会经过 <code>POSTROUTING</code> 钩子，这里常见的处理函数是 <code>源地址转换(SNAT)</code> 或者 <code>源地址伪装(Masquerade, 简称 Masq)</code></p>
<p>除了 5 条内置的链，iptables 还有 5 张表，这 5 张表主要是用来给 iptables 中的规则（rule）分类，系统中所有的 iptables 规则都被划分到不同的表集合中。5 张表分别为</p>
<ul>
<li><code>raw</code> - iptables 是有状态的，即 iptables 对数据包有连接追踪 (connection trackong) 机制，而 <code>raw</code> 可以用来去除这种追踪机制</li>
<li><code>mangle</code> - 用于修改数据包的 IP 头信息</li>
<li><code>nat</code> - 用于修改数据包的源或者目的地址</li>
<li><code>filter</code> - 用于控制到达某条链上面的数据包是继续放行、直接丢弃(drop)、或拒绝(reject)</li>
<li><code>security</code> - 用于在数据包上面应用 SELinux</li>
</ul>
<p>表是有优先级的，5 张表的优先级从高到低是: <code>raw</code>、<code>mangle</code>、<code>nat</code>、<code>filter</code>、<code>security</code>，iptables 不支持自定义表。不是每个链上都能挂表，iptables 表与链的对应关系如下图</p>
<table>
<thead>
<tr>
<th>-</th>
<th>PREROUTING</th>
<th>FORWARD</th>
<th>INPUT</th>
<th>OUTPUT</th>
<th>POSTROUTING</th>
</tr>
</thead>
<tbody><tr>
<td><code>raw</code></td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>N</td>
</tr>
<tr>
<td><code>mangle</code></td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td><code>nat (SNAT)</code></td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td><code>nat (DNAT)</code></td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>N</td>
</tr>
<tr>
<td><code>filter</code></td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
</tr>
<tr>
<td><code>security</code></td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
</tr>
</tbody></table>
<p>iptables 表和链的工作流程图如下</p>
<p><img src="https://i.csms.tech/img_134.png"></p>
<h1 id="iptables-命令"><a href="#iptables-命令" class="headerlink" title="iptables 命令"></a>iptables 命令</h1><p>常用选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-F ,--flush</code></td>
<td>清除所有规则，默认规则除外</td>
<td></td>
</tr>
<tr>
<td><code>-P ,--policy</code></td>
<td>设置默认规则</td>
<td></td>
</tr>
<tr>
<td><code>-t ,--table</code></td>
<td>指定要操作的表，默认为 <code>filter</code> 表</td>
<td><code>iptables -t nat -P INPUT ACCEPT</code></td>
</tr>
<tr>
<td><code>--list ,-L [chain [rulenum]]</code></td>
<td>列出（指定的链或所有链）的规则</td>
<td><code>iptables -t nat -L -v -n --line-numbers</code></td>
</tr>
<tr>
<td><code>--verbose	,-v</code></td>
<td>verbose mode</td>
<td></td>
</tr>
<tr>
<td><code>--numeric	,-n</code></td>
<td>不解析协议和端口号，以数字的形式显示</td>
<td></td>
</tr>
<tr>
<td><code>--line-numbers</code></td>
<td>显示规则的行号，可以根据行号对具体的规则进行操作</td>
<td></td>
</tr>
<tr>
<td><code>--jump	,-j</code></td>
<td>匹配的规则的处理 target</td>
<td><code>iptables -A INPUT  -j LOG</code></td>
</tr>
<tr>
<td><code>--append  ,-A chain</code></td>
<td>像指定的链中追加规则</td>
<td><code>-A INPUT -i lo -j ACCEPT</code></td>
</tr>
<tr>
<td><code>--insert  ,-I chain [rulenum]</code></td>
<td>向指定的链中指定的位置插入规则</td>
<td><code>iptables -I INPUT 10 -p tcp --dport 80 -j ACCEPT</code></td>
</tr>
<tr>
<td><code>--delete  ,-D chain rulenum</code></td>
<td>删除指定链中的指定位置的规则</td>
<td><code>iptables -D INPUT 10 </code></td>
</tr>
<tr>
<td><code>--replace ,-R chain rulenum</code></td>
<td>更新指定链中的指定位置的规则</td>
<td></td>
</tr>
<tr>
<td><code>-S, --list-rules [chain]</code></td>
<td>按照类似 <code>iptables-save</code> 的输出打印规则</td>
<td></td>
</tr>
</tbody></table>
<span id="more"></span>
<h2 id="删除指定规则"><a href="#删除指定规则" class="headerlink" title="删除指定规则"></a>删除指定规则</h2><p>查看规则及行号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -L -v -n --line-number</span></span><br><span class="line">Chain INPUT (policy DROP 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1       90  6516 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class="line">2        0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">3        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            state NEW tcp multiport dports 10050,10051</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>删除指定行号的规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -D INPUT 7</span><br></pre></td></tr></table></figure>

<h2 id="记录-iptables-日志"><a href="#记录-iptables-日志" class="headerlink" title="记录 iptables 日志"></a>记录 iptables 日志</h2><p>可以通过以下 2 种方式之一查看 iptables 记录的日志</p>
<h3 id="rsyslog-服务记录日志"><a href="#rsyslog-服务记录日志" class="headerlink" title="rsyslog 服务记录日志"></a>rsyslog 服务记录日志</h3><ul>
<li><p>使用 <code>rsyslog</code> 服务记录日志</p>
<p>在 <code>rsyslog.conf</code> 中添加配置 <code>kern.*     /var/log/iptables.log</code></p>
<p>重启 <code>rsyslog</code> 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart rsyslog.service</span><br></pre></td></tr></table></figure></li>
<li><p><code>journalctl -k</code> 命令查看</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">journalctl -f -k | grep iptables </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="配置-iptables-记录日志"><a href="#配置-iptables-记录日志" class="headerlink" title="配置 iptables 记录日志"></a>配置 iptables 记录日志</h3><p>iptables 配置日志选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记录所有通过防火墙的日志，之后可以在 /var/log/messages 中查看日志</span></span><br><span class="line">iptables -A INPUT  -j LOG --log-prefix &quot;iptables&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只记录特定日志的方法</span></span><br><span class="line">iptables -A INPUT -s 192.168.10.0/24 -p tcp -j LOG --log-prefix &quot;iptables icmp warn&quot;</span><br></pre></td></tr></table></figure>
<p>iptables 中日志相关的选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--log-prefix</code></td>
<td>记录的日志的内容前缀</td>
<td><code>-A INPUT  -j LOG --log-prefix &quot;iptables&quot;</code></td>
</tr>
<tr>
<td><code>--log-level</code></td>
<td>日志级别<br/>由高到低 <code>emerg</code>、<code>alert</code>、<code>crit</code>、<code>error</code>、<code>warning</code>、<code>notice</code>、<code>info</code>、<code>debug</code></td>
<td><code>-A INPUT -s 192.168.10.0/24 -j LOG --log-level 4</code></td>
</tr>
</tbody></table>
<p>使用 LOG 动作，可以将符合条件的报文的相关信息记录到日志中，但当前报文具体是被“接受”，还是被“拒绝”，都由后面的规则控制，换句话说，LOG 动作只负责记录匹配到的报文的相关信息，不负责对报文的其他处理，如果想要对报文进行进一步的处理，可以在之后设置具体规则，进行进一步的处理。</p>
<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>以下示例实现，将目标端口为 80 的流量转发到目标端口 8080</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -s 192.168.10.0/24 -p tcp --dport 80 -i eth0 -j REDIRECT --to-port 8080</span><br></pre></td></tr></table></figure>

<h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><h3 id="DNAT"><a href="#DNAT" class="headerlink" title="DNAT"></a>DNAT</h3><p>DNAT 根据指定条件修改数据包的目标 ip 地址和目标端口，DNAT 的原理和端口转发的原理差不多，区别是端口转发不修改 ip 地址。需要注意的是，当转发的 ip 地址不是本机时，需要确保启用 <code>ip froward</code> 功能(<code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code>)，即把 Linux 当做交换机使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d 192.168.10.10 -p tcp --dport 80 -j DNAT --to-destination 192.168.10.20:8080</span><br></pre></td></tr></table></figure>

<h3 id="SNAT-和-Maskuerade"><a href="#SNAT-和-Maskuerade" class="headerlink" title="SNAT 和 Maskuerade"></a>SNAT 和 Maskuerade</h3><p>Maskuerade 本质上是 SNAT 的一种。SNAT 根据指定的条件修改数据包的源 IP 地址，SNAT 策略只能发生在 nat 表的 POSTROUTING 链</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 192.168.10.10 -j SNAT --to-source 192.168.10.20</span><br></pre></td></tr></table></figure>

<p>Maskuerade 是一种特殊的 SNAT，数据包从那个网卡发出，就使用该网卡的 IP 做 SNAT，具体使用哪个 IP 由内核决定</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 192.168.10.0/24 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<h2 id="iptables-配合-ipset-实现批量-IP-控制"><a href="#iptables-配合-ipset-实现批量-IP-控制" class="headerlink" title="iptables 配合 ipset 实现批量 IP 控制"></a>iptables 配合 ipset 实现批量 IP 控制</h2><p><code>ipset</code> 是 Linux 内核中的一个工具，根据创建 ipset 时指定的类型，它可以存储多个 IP 地址、IP 网络（network）、TCP&#x2F;UDP 端口、MAC 地址等，并且支持动态更新其中的内容。<strong>比如配合 <code>iptables</code> 使用时，可以将多个目标 IP 地址或者网络存储于其中并可以动态更新 <code>iptables</code> 规则（更新 <code>ipset</code> 后无需重启 <code>iptables</code> 即可生效）</strong></p>
<ol>
<li><p>创建 <code>ipset</code> 并指定 <code>ipset</code> 类型为 <code>hash:ip</code>，更多支持的类型可以通过 <code>ipset -h</code> 查看</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ipset create allowed_ips hash:ip</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>添加目标 IP 到 <code>ipset</code>，可以多次添加</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ipset add allowed_ips 2.9.1.171</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>iptables</code> 中使用 <code>ipset</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ipset 作为源 IP 允许访问</span></span><br><span class="line">iptables -A INPUT -m set --match-set allowed_ips src -j ACCEPT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">源 IP 不在 ipset 中则不允许访问</span></span><br><span class="line">iptables -A INPUT -m set ! --match-set allowed_ips src -j DROP</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>默认情况下，<code>ipset</code> 属于临时配置，没有持久化，系统重启后内容会丢失</strong>。要配置 <code>ipset</code> 持久化，可以参考以下步骤</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存 ipset 配置</span></span><br><span class="line">ipset save &gt; /etc/ipset.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复 ipset 配置</span></span><br><span class="line">ipset restore &lt; /etc/ipset.conf</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="docker-compose-场景下使用-iptables-进行白名单限制"><a href="#docker-compose-场景下使用-iptables-进行白名单限制" class="headerlink" title="docker compose 场景下使用 iptables 进行白名单限制"></a>docker compose 场景下使用 iptables 进行白名单限制</h2><p>假设有以下 <code>docker-compose.yml</code> 文件</p>
<figure class="highlight shell"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nextcloud_aio_mastercontainer:</span><br><span class="line">    image: nextcloud/all-in-one:latest</span><br><span class="line">    container_name: nextcloud-aio-mastercontainer</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8000:80&quot;</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">      - &quot;8443:8443&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - aio_mastercontainer:/mnt/docker-aio-config</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock:ro</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  aio_mastercontainer:</span><br><span class="line">    driver: local</span><br><span class="line">    driver_opts:</span><br><span class="line">      type: none</span><br><span class="line">      o: bind</span><br><span class="line">      device: ./data/</span><br></pre></td></tr></table></figure>

<p>在 <code>docker compose up</code> 正常启动后， Docker 会根据 <code>docker-compose.yml</code> 中的定义配置 <code>iptables</code> 防火墙规则，以下为上面 <code>docker-compose.yml</code> 定义的数据端口在 <code>iptables</code> 规则中的数据流向分析</p>
<ol>
<li>数据报文首先经过 <code>iptables</code> 的 <code>PREROUTING</code> 链，在 <code>PREROUTING</code> 链中会进行 <code>DNAT</code>，位于 <code>nat</code> 表中，查看其具体规则 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">iptables -t nat -L -v -n</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 4376 packets, 255K bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">80051 4690K DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 3891 packets, 233K bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 12629 packets, 1082K bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 DOCKER     all  --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 12637 packets, 1083K bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    3   200 MASQUERADE  all  --  *      !br-43e659324492  172.21.0.0/16        0.0.0.0/0           </span><br><span class="line">    0     0 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0           </span><br><span class="line">    0     0 MASQUERADE  tcp  --  *      *       172.21.0.2           172.21.0.2           tcp dpt:8443</span><br><span class="line">    0     0 MASQUERADE  tcp  --  *      *       172.21.0.2           172.21.0.2           tcp dpt:8080</span><br><span class="line">    0     0 MASQUERADE  tcp  --  *      *       172.21.0.2           172.21.0.2           tcp dpt:80</span><br><span class="line"></span><br><span class="line">Chain DOCKER (2 references)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 RETURN     all  --  br-43e659324492 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    3   128 DNAT       tcp  --  !br-43e659324492 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8443 to:172.21.0.2:8443</span><br><span class="line">    3   128 DNAT       tcp  --  !br-43e659324492 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.21.0.2:8080</span><br><span class="line">    2   100 DNAT       tcp  --  !br-43e659324492 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8000 to:172.21.0.2:80</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li><code>DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</code> : 所有的报文会被跳转到 <code>DOCKER</code> 链进行处理</li>
<li><code>DNAT       tcp  --  !br-43e659324492 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8443 to:172.21.0.2:8443</code> : 只要不是从 <code>br-43e659324492</code> 网卡（本示例中的 <code>docker-compose.yml</code> 使用的网络）进入的数据包，不论目标网卡&#x2F;源 IP&#x2F;目标 IP 为何，只有其目标端口为 <code>8443</code>，则对其进行 DNAT，将其目标 IP 和端口修改为 <code>172.21.0.2:8443</code>（本示例中的容器）。其他 2 条 DNAT 同理。</li>
</ol>
</blockquote>
</li>
<li><em><strong>在 <code>iptables</code> 的 <code>PREROUTING</code> 链处理完成后，数据流入 <code>iptables</code> 的 <code>FORWARD</code> 链</strong></em>。规则定义位于 <code>filter</code> 表中。查看其具体规则 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">iptables -L -v -n --line-numbers</span></span><br><span class="line">Chain INPUT (policy DROP 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1     605K  585M ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class="line">2        0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0       </span><br><span class="line">...    </span><br><span class="line">9      461 33197 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 8</span><br><span class="line">10     178  4984 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 0</span><br><span class="line">11   10055  481K REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy DROP 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1      259  186K DOCKER-USER  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">2      259  186K DOCKER-ISOLATION-STAGE-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">3      128  179K ACCEPT     all  --  *      br-43e659324492  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED</span><br><span class="line">4        8   356 DOCKER     all  --  *      br-43e659324492  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">5      123  7065 ACCEPT     all  --  br-43e659324492 !br-43e659324492  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">6        0     0 ACCEPT     all  --  br-43e659324492 br-43e659324492  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">7        0     0 ACCEPT     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED</span><br><span class="line">8        0     0 DOCKER     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">9        0     0 ACCEPT     all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">10       0     0 ACCEPT     all  --  docker0 docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">11       0     0 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 42129 packets, 7533K bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain DOCKER (2 references)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1        3   128 ACCEPT     tcp  --  !br-43e659324492 br-43e659324492  0.0.0.0/0            172.21.0.2           tcp dpt:8443</span><br><span class="line">2        3   128 ACCEPT     tcp  --  !br-43e659324492 br-43e659324492  0.0.0.0/0            172.21.0.2           tcp dpt:8080</span><br><span class="line">3        2   100 ACCEPT     tcp  --  !br-43e659324492 br-43e659324492  0.0.0.0/0            172.21.0.2           tcp dpt:80</span><br><span class="line"></span><br><span class="line">Chain DOCKER-ISOLATION-STAGE-1 (1 references)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1      123  7065 DOCKER-ISOLATION-STAGE-2  all  --  br-43e659324492 !br-43e659324492  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">2        0     0 DOCKER-ISOLATION-STAGE-2  all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">3      259  186K RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain DOCKER-ISOLATION-STAGE-2 (2 references)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1        0     0 DROP       all  --  *      br-43e659324492  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">2        0     0 DROP       all  --  *      docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">3      123  7065 RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain DOCKER-USER (1 references)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1      259  186K RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>数据流进入 <code>iptables</code> 的 <code>FORWARD</code> 链。</li>
<li><code>DOCKER-USER  all  --  *      *       0.0.0.0/0            0.0.0.0/0</code> : 首先会被全部跳转到 <code>DOCKER-USER</code> 链进行处理。</li>
<li><code>RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0</code> : 默认情况下，<code>DOCKER-USER</code> 链未作任何处理，数据流跳转回 <code>FORWARD</code> 链中的原位置，继续进入下一个链 <code>DOCKER-ISOLATION-STAGE-1</code></li>
<li><code>ACCEPT     all  --  *      br-43e659324492  0.0.0.0/0            0.0.0.0/0</code> : 数据流到了此处，表示目标网络为本示例中的容器的网络，对数据全部放行接收。数据进入容器。</li>
</ol>
</blockquote>
</li>
</ol>
<p>根据以上对数据流向的分析，如果要对进入容器的数据进行源 IP 限制，建议将其放置在 <code>DOCKER-USER</code> 链中。具体实现参考如下：</p>
<ol>
<li><p>配置 <code>ipset</code>，用于对多个源 IP 设置白名单</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ipset create allowed_ips hash:ip</span><br><span class="line"></span><br><span class="line">ipset add allowed_ips 2.9.1.171</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 <code>iptables</code>，如果源 IP 不在白名单中，则禁止访问特定的端口</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -t filter -I DOCKER-USER 1 -m set ! --match-set allowed_ips src -m multiport -p tcp --dports 8000,8080,8443 -j DROP -m comment --comment &quot;for Nextcloud&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="ssh-无法连接"><a href="#ssh-无法连接" class="headerlink" title="ssh 无法连接"></a>ssh 无法连接</h2><p>iptables 配置文件内容如下，关闭防火墙后，ssh 可以从客户端 <code>192.168.1.2</code> 进行连接。重启防火墙后，则无法连接。说明问题是因为防火墙导致。</p>
<figure class="highlight shell"><figcaption><span>/etc/sysconfig/iptables</span></figcaption><table><tr><td class="code"><pre><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [4:368]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许本机访问外网</span></span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回环网卡配置</span></span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sshd</span></span><br><span class="line">-A INPUT -m comment --comment &quot;ssh&quot; -p tcp -m state --state NEW -m tcp -s 192.168.1.2 --dport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line">-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>针对 sshd 的防火墙规则添加日志，配置文件修改如下 </p>
<figure class="highlight shell"><figcaption><span>/etc/sysconfig/iptables</span></figcaption><table><tr><td class="code"><pre><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [4:368]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许本机访问外网</span></span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回环网卡配置</span></span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sshd</span></span><br><span class="line">-A INPUT -p tcp -s 192.168.1.2 --dport 22 -j LOG --log-prefix  &#x27;iptables-sshd&#x27;</span><br><span class="line">-A INPUT -m comment --comment &quot;ssh&quot; -p tcp -m state --state NEW -m tcp -s 192.168.1.2 --dport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line">-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>主要添加日志规则： <code>-A INPUT -p tcp -m state --state NEW -m tcp -s 192.168.1.2 --dport 22 -j LOG --log-prefix &#39;iptables-sshd&#39;</code> <a href="#%E8%AE%B0%E5%BD%95-iptables-%E6%97%A5%E5%BF%97">日志规则配置参考</a></p>
<p>ssh 连接失败后查看日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Feb 17 13:32:02 ip-172-31-2-4 kernel: iptables-sshdIN=eth0 OUT= MAC=02:d4:c1:a7:73:bb:02:69:00:94:63:ed:08:00 SRC=192.168.1.2 DST=172.31.2.4 LEN=60 TOS=0x00 PREC=0x00 TTL=42 ID=61621 DF PROTO=TCP SPT=53576 DPT=22 WINDOW=26883 RES=0x00 SYN URGP=0</span><br><span class="line">Feb 17 13:32:04 ip-172-31-2-4 kernel: iptables-sshdIN=eth0 OUT= MAC=02:d4:c1:a7:73:bb:02:69:00:94:63:ed:08:00 SRC=192.168.1.2 DST=172.31.2.4 LEN=60 TOS=0x00 PREC=0x00 TTL=42 ID=61622 DF PROTO=TCP SPT=53576 DPT=22 WINDOW=26883 RES=0x00 SYN URGP=0</span><br><span class="line">Feb 17 13:34:13 ip-172-31-2-4 kernel: iptables-sshdIN=eth0 OUT= MAC=02:d4:c1:a7:73:bb:02:69:00:94:63:ed:08:00 SRC=192.168.1.2 DST=172.31.2.4 LEN=60 TOS=0x00 PREC=0x00 TTL=42 ID=56660 DF PROTO=TCP SPT=53746 DPT=22 WINDOW=26883 RES=0x00 SYN URGP=0</span><br></pre></td></tr></table></figure>
<p>根据日志可知，规则 <code>INPUT -p tcp -s 192.168.1.2 --dport 22</code> 可以匹配到 ssh 的流量，说明 <code>filter</code> 表的 <code>INPUT</code> 链配置无误，根据 <code>-j ACCEPT</code>，<code>filter</code> 表的 <code>INPUT</code> 链会 ACCEPT 此连接请求。连接无法建立，应该是因为其他防火墙规则导致。</p>
<p>检查 <code>filter</code> 表之外的其他表的 <code>INPUT</code> 链，看是否存在拒绝的规则，发现 <code>NAT</code> 表中，<code>INPUT</code> 链的规则默认为 <code>DROP</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -t nat -L -v -n --line-numbers</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 31 packets, 1742 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain INPUT (policy DROP 6 packets, 360 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 5 packets, 367 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 5 packets, 367 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination  </span><br></pre></td></tr></table></figure>
<p>将其默认规则改为 <code>ACCEPT</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -P INPUT ACCEPT</span><br></pre></td></tr></table></figure>
<p>重新使用 ssh 登陆，连接正常。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>linux logrotate 服务</title>
    <url>/202208191317/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos 7</li>
</ul>
<p><code>logrotate</code> 程序是一个日志文件管理工具。用于分割日志文件，压缩转存、删除旧的日志文件，并创建新的日志文件  </p>
<p><code>logrotate</code> 是基于 <code>crond</code> 来运行的，其脚本是 <code>/etc/cron.daily/logrotate</code>，日志轮转是系统自动完成的。<br>实际运行时，<code>logrotate</code> 会调用配置文件 <code>/etc/logrotate.conf</code>。<br><code>/etc/cron.daily/logrotate</code> 文件内容如下：</p>
<figure class="highlight shell"><figcaption><span>/etc/cron.daily/logrotate</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">/usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status /etc/logrotate.conf</span><br><span class="line">EXITVALUE=$?</span><br><span class="line">if [ $EXITVALUE != 0 ]; then</span><br><span class="line">    /usr/bin/logger -t logrotate &quot;ALERT exited abnormally with [$EXITVALUE]&quot;</span><br><span class="line">fi</span><br><span class="line">exit 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以执行以下命令手动执行日志切割：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logrotate -f /etc/logrotate.conf</span><br></pre></td></tr></table></figure>
<p>以下命令可以检测配置文件是否正确：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logrotate -d /etc/logrotate.conf</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p><code>logrotate</code> 的主配置文件默认为 <code>/etc/logrotate.conf</code>，默认配置如下：</p>
<figure class="highlight shell"><figcaption><span>/etc/logrotate.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认每一周执行一次 rotate 轮转工作</span></span><br><span class="line">weekly</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保留多少个日志文件(轮转几次).默认保留四个.0 指没有备份</span></span><br><span class="line">rotate 4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动创建新的日志文件，新的日志文件具有和原来的文件相同的权限；</span></span><br><span class="line">create</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个参数很重要！就是切割后的日志文件以当前日期为格式结尾，如xxx.log-20131216这样,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果注释掉,切割出来是按数字递增,即 xxx.log-1这种格式</span></span><br><span class="line">dateext</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">包含 /etc/logrotate.d 下的其他配置文件 ，用于隔离出各个服务的配置</span></span><br><span class="line">include /etc/logrotate.d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否通过gzip压缩转储以后的日志文件，如xxx.log-20131216.gz ；如果不需要压缩，注释掉就行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">compress</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nocompress</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对指定的文件做轮转切割</span></span><br><span class="line">/var/log/wtmp &#123;</span><br><span class="line">    # 每月轮转一次，取代全局默认值</span><br><span class="line">    monthly</span><br><span class="line">    </span><br><span class="line">    # 创建新文件，并指定权限，用户和组</span><br><span class="line">    create 0664 root utmp</span><br><span class="line">    </span><br><span class="line">    # 文件大小超过 1m 后才进行切割，到了 1 个月，文件大小小于 1m，不会进行切割</span><br><span class="line">	minsize 1M</span><br><span class="line">	</span><br><span class="line">    rotate 1</span><br><span class="line">&#125;</span><br><span class="line">/var/log/btmp &#123;</span><br><span class="line">    # 如果日志丢失，不报错继续滚动下一个日志</span><br><span class="line">    missingok</span><br><span class="line">    </span><br><span class="line">    monthly</span><br><span class="line">    create 0600 root utmp</span><br><span class="line">    rotate 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他常用选项说明如下：</p>
<figure class="highlight shell"><figcaption><span>/etc/logrotate.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定转储周期为每天</span></span><br><span class="line">daily </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">即使日志文件为空文件也做轮转，这个是 logrotate 的缺省选项。</span></span><br><span class="line">ifempty </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当日志文件为空时，不进行轮转</span></span><br><span class="line">notifempty </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当日志文件大于指定大小后就轮转，支持的单位： k，K，m，M</span></span><br><span class="line">size 5M</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于还在打开中的日志文件，把当前日志备份并截断；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是先拷贝再清空的方式，拷贝和清空之间有一个时间差，可能会丢失部分日志数据。</span></span><br><span class="line">copytruncate</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行 postrotate 脚本，作用是在所有日志都轮转后统一执行一次脚本。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果没有配置这个，那么每个日志轮转后都会执行一次脚本</span></span><br><span class="line">sharedscripts                      </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 logrotate 转储之后需要执行的指令，例如重新启动 (<span class="built_in">kill</span> -HUP) 某个服务！必须独立成行</span></span><br><span class="line">postrotate                         </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 logrotate 转储之前需要执行的指令，例如修改文件的属性等动作；必须独立成行</span></span><br><span class="line">prerotate      </span><br><span class="line">                    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将轮转的日志保存到指定路径下，默认保存在日志文件同一目录下</span></span><br><span class="line">olddir /data/logs/</span><br></pre></td></tr></table></figure>

<h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><p><code>nginx</code> 日志切割配置文件示例，创建 <code>/etc/logrotate.d/nginx</code>:</p>
<figure class="highlight shell"><figcaption><span>/etc/logrotate.d/nginx</span></figcaption><table><tr><td class="code"><pre><span class="line">/logs/nginx/access/*.log</span><br><span class="line">/logs/bginx/error/*.log &#123;</span><br><span class="line">    daily</span><br><span class="line">    compress</span><br><span class="line">    rotate 7</span><br><span class="line">    missingok</span><br><span class="line">    notifempty</span><br><span class="line">    dateext</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">        if [ -f /run/nginx.pid ]; then</span><br><span class="line">                    kill -USR1 `cat /run/nginx.pid`</span><br><span class="line">        fi</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 <code>copytruncate</code> 方式切割 <code>nginx</code> 日志，此种方式不需要重启 <code>nginx</code> 服务<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[logrotate 原理介绍和配置详解](https://wsgzao.github.io/post/logrotate/)
">[1]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>/etc/logrotate.d/nginx</span></figcaption><table><tr><td class="code"><pre><span class="line">/logs/nginx/access/*.log</span><br><span class="line">/logs/bginx/error/*.log &#123;</span><br><span class="line">    copytruncate</span><br><span class="line">    daily</span><br><span class="line">    compress</span><br><span class="line">    rotate 7</span><br><span class="line">    missingok</span><br><span class="line">    notifempty</span><br><span class="line">    dateext</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://wsgzao.github.io/post/logrotate/">logrotate 原理介绍和配置详解</a></p>
<h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://wsgzao.github.io/post/logrotate/">logrotate 原理介绍和配置详解</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>logrotate</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux man 使用</title>
    <url>/202306091031/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<h1 id="为源码编译安装的软件安装-man-手册"><a href="#为源码编译安装的软件安装-man-手册" class="headerlink" title="为源码编译安装的软件安装 man 手册"></a>为源码编译安装的软件安装 man 手册</h1><p>使用源码编译安装的软件默认是没有 man 手册的，使用 man 命令会报以下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">man fswatch</span></span><br><span class="line">No manual entry for fswatch</span><br></pre></td></tr></table></figure>

<p>要为源码编译安装的软件安装 man 手册，可以参考以下步骤，此处示例软件为 <code>fswatch</code>，软件编译安装到了 <code>/usr/local/fswatch-1.17.1/</code></p>
<ol>
<li><p>一般情况下，源码中会附带软件的使用文档，编译安装后，可能位于以下路径，<code>fswatch</code> 编译安装后的 man 手册位于 <code>/usr/local/fswatch-1.17.1/share/man/man7/fswatch.7</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /usr/local/fswatch-1.17.1/doc</span><br><span class="line">ls /usr/local/fswatch-1.17.1/share/doc</span><br><span class="line">ls /usr/local/fswatch-1.17.1/share/man/</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><code>man</code> 命令使用的文档默认来源于 <code>/usr/share/man/</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> /usr/share/man/</span></span><br><span class="line">cs  de  fr  hu  it  ko     man1   man1x  man2x  man3p  man4   man5   man6   man7   man8   man9   mann  pl  pt_BR  ro  sk  tr  zh_CN</span><br><span class="line">da  es  hr  id  ja  man0p  man1p  man2   man3   man3x  man4x  man5x  man6x  man7x  man8x  man9x  nl    pt  pt_PT  ru  sv  zh  zh_TW</span><br></pre></td></tr></table></figure>
<p>要为编译安装软件的安装 <code>man</code> 帮助文档，首先将 <code>fswatch</code> 的帮助文档复制到 <code>man</code> 页面的目录</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/local/fswatch-1.17.1/share/man/man7/fswatch.7 /usr/share/man/man7/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>更新 <code>man</code> 索引</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mandb</span><br><span class="line">1 man subdirectory contained newer manual pages.</span><br><span class="line">47 manual pages were added.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>安装成功后，可以正常使用 <code>man fswatch</code> 查看帮助文档。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 内存相关操作</title>
    <url>/202306021537/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<h1 id="内存压力测试工具"><a href="#内存压力测试工具" class="headerlink" title="内存压力测试工具"></a>内存压力测试工具</h1><h2 id="memtester"><a href="#memtester" class="headerlink" title="memtester"></a>memtester</h2><p>使用 docker 运行工具</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ docker run --rm -it dockerpinata/memtester:<span class="number">1</span> memtester</span><br><span class="line">memtester version <span class="number">4.3</span><span class="number">.0</span> (<span class="number">64</span>-bit)</span><br><span class="line">Copyright (C) <span class="number">2001</span>-<span class="number">2012</span> Charles Cazabon.</span><br><span class="line">Licensed under the GNU General Public License version <span class="number">2</span> (only).</span><br><span class="line"></span><br><span class="line">pagesize <span class="keyword">is</span> <span class="number">4096</span></span><br><span class="line">pagesizemask <span class="keyword">is</span> <span class="number">0xfffffffffffff000</span></span><br><span class="line">need memory argument, <span class="keyword">in</span> MB</span><br><span class="line"></span><br><span class="line">Usage: memtester [-p physaddrbase [-d device]] &lt;mem&gt;[B|K|M|G] [loops]</span><br></pre></td></tr></table></figure>

<h2 id="stress-工具"><a href="#stress-工具" class="headerlink" title="stress 工具"></a>stress 工具</h2><p><code>stress</code> 是一个用于模拟系统负载的工具，可以使用它来创建临时的内存负载。通过模拟负载，系统将使用更多的内存。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum install -y stress</span><br></pre></td></tr></table></figure>
<p>使用以下命令可以创建一个临时的内存负载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stress --vm <span class="number">1</span> --vm-<span class="built_in">bytes</span> &lt;MEMORY_SIZE&gt;</span><br></pre></td></tr></table></figure>

<h2 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h2><p><code>dd</code> 命令可以用于创建大文件并占用磁盘空间，从而间接提升系统的内存使用率。您可以使用以下命令创建一个指定大小的临时文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=tempfile bs=1M count=&lt;MEMORY_SIZE&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h1><p>Linux 中 <code>tmpfs</code> 是一种基于内存的临时文件系统，它将内存作为存储介质，可以在需要快速读写文件的场景下使用。</p>
<p><strong>注意事项</strong>：</p>
<ul>
<li><code>tmpfs</code> 是基于内存的临时文件系统，因此上面的数据在系统重启后将丢失</li>
<li>当 <code>tmpfs</code> 文件系统使用的内存达到上限值，写入操作会失败，因此需要确保分配给 <code>tmpfs</code> 文件系统使用的内存适合需求</li>
<li>要确保系统有足够的可用内存来支持挂载 <code>tmpfs</code> 文件系统。</li>
</ul>
<h2 id="tmpfs-使用步骤"><a href="#tmpfs-使用步骤" class="headerlink" title="tmpfs 使用步骤"></a>tmpfs 使用步骤</h2><ol>
<li>创建一个目录作为文件系统挂载点 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/ramdisk/</span><br></pre></td></tr></table></figure></li>
<li>使用 <code>mount</code> 命令以 <code>tmpfs</code> 的类型挂载文件系统 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -t tmpfs -o size=1G tmpfs /mnt/ramdisk/</span><br></pre></td></tr></table></figure>
这将在 <code>/mnt/ramdisk</code> 目录下挂载一个 1GB 大小的 <code>tmpfs</code> 文件系统。根据需要调整 <code>size</code> 参数的值。之后便可以像操作其他文件系统一样在 <code>/mnt/ramdisk</code> 目录下读写文件。任何写入该目录的数据都将存储在内存中。</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常见错误集锦</title>
    <url>/202306081314/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<h1 id="automake"><a href="#automake" class="headerlink" title="automake"></a>automake</h1><p>编译安装软件报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">error: require Automake 1.14, but have 1.13.4</span><br></pre></td></tr></table></figure>
<p>Automake 版本不匹配，需要安装 Automake 1.14</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -qa | grep automake</span></span><br><span class="line">automake-1.13.4-3.el7.noarch</span><br></pre></td></tr></table></figure>

<p>以下步骤安装 <code>automake-1.14.1</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://ftp.gnu.org/gnu/automake/automake-1.14.1.tar.gz</span><br><span class="line">tar -xf automake-1.14.1.tar.gz</span><br><span class="line">cd automake-1.14.1</span><br><span class="line">./bootstrap.sh</span><br></pre></td></tr></table></figure>
<p>以上步骤执行完成后，会生成 <code>configure</code> 可执行文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>安装完成后，执行以下命令验证版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">automake --version</span></span><br><span class="line">automake (GNU automake) 1.14.1</span><br><span class="line">Copyright (C) 2013 Free Software Foundation, Inc.</span><br><span class="line">License GPLv2+: GNU GPL version 2 or later &lt;http://gnu.org/licenses/gpl-2.0.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Written by Tom Tromey &lt;tromey@redhat.com&gt;</span><br><span class="line">       and Alexandre Duret-Lutz &lt;adl@gnu.org&gt;.</span><br></pre></td></tr></table></figure>

<h1 id="makeinfo"><a href="#makeinfo" class="headerlink" title="makeinfo"></a>makeinfo</h1><p>编译安装软件报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">makeinfo: command not found</span><br></pre></td></tr></table></figure>
<p><code>makeinfo</code> 命令不存在，执行以下命令安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install texinfo</span><br></pre></td></tr></table></figure>

<h1 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h1><h2 id="no-acceptable-C-compiler-found-in-PATH"><a href="#no-acceptable-C-compiler-found-in-PATH" class="headerlink" title="no acceptable C compiler found in $PATH"></a>no acceptable C compiler found in $PATH</h2><p>缺少 <code>gcc</code> 编译器，安装即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y gcc</span><br></pre></td></tr></table></figure>

<h2 id="A-compiler-with-support-for-C-11-language-features-is-required"><a href="#A-compiler-with-support-for-C-11-language-features-is-required" class="headerlink" title="A compiler with support for C++11 language features is required"></a>A compiler with support for C++11 language features is required</h2><p>编译安装软件时报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">configure: error: *** A compiler with support for C++11 language features is required.</span><br></pre></td></tr></table></figure>
<p>错误原因为 gcc 版本太低。查看当前 gcc 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc -v</span></span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper</span><br><span class="line">Target: x86_64-redhat-linux</span><br><span class="line">Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj --with-isl=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install --with-cloog=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br></pre></td></tr></table></figure>

<h3 id="安装-gcc-8-3-0"><a href="#安装-gcc-8-3-0" class="headerlink" title="安装 gcc-8.3.0"></a>安装 gcc-8.3.0</h3><p>以下步骤演示安装 gcc-8.3.0 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[升级 GCC 支持C++11](https://www.cnblogs.com/gyfluck/p/10537383.html)
">[1]</span></a></sup></p>
<ol>
<li>下载安装包，<a href="http://ftp.gnu.org/gnu/gcc/">官方下载地址</a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget ftp://ftp.irisa.fr/pub/mirrors/gcc.gnu.org/gcc/releases/gcc-8.3.0/gcc-8.3.0.tar.gz</span><br><span class="line">tar -xf gcc-8.3.0.tar.gz</span><br><span class="line">cd gcc-8.3.0</span><br></pre></td></tr></table></figure></li>
<li>编译安装。编译依赖 <code>GMP 4.2+</code>, <code>MPFR 2.4.0+</code> and <code>MPC 0.8.0+</code>，需要先按照顺序安装这 3 个依赖。依赖安装参考： <a href="#%E5%AE%89%E8%A3%85-GMP">安装 GMP</a>，<a href="#%E5%AE%89%E8%A3%85-MPFR">安装 MPFR</a>，<a href="%E5%AE%89%E8%A3%85-MPC">安装 MPC</a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --prefix=/usr/local/gcc-8.3.0 --disable-multilib</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make install</span></span><br></pre></td></tr></table></figure></li>
<li>安装完成后，需要更新系统标准库 查看当前系统使用的 gcc 库文件，可以看到版本为 <code>libstdc++.so.6.0.19</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> /usr/lib64/libstdc++.so.6</span></span><br><span class="line">libstdc++.so.6       libstdc++.so.6.0.19 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> /usr/lib64/libstdc++.so.6 -l</span></span><br><span class="line">lrwxrwxrwx 1 root root 19 May 30 08:05 /usr/lib64/libstdc++.so.6 -&gt; libstdc++.so.6.0.19</span><br></pre></td></tr></table></figure>
 执行以下操作，更新 <code>libstdc++.so.6</code> 到最新安装的版本 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -rf /usr/lib64/libstdc++.so.6</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> -s /usr/local/gcc-8.3.0/lib64/libstdc++.so.6.0.25 /usr/lib64/libstdc++.so.6</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> /usr/lib64/libstdc++.so.6 -l</span></span><br><span class="line">lrwxrwxrwx 1 root root 46 Jun  9 09:31 /usr/lib64/libstdc++.so.6 -&gt; /usr/local/gcc-8.3.0/lib64/libstdc++.so.6.0.25</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装-GMP"><a href="#安装-GMP" class="headerlink" title="安装 GMP"></a>安装 GMP</h2><p><a href="ftp://gcc.gnu.org/pub/gcc/infrastructure/">安装包下载地址</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2</span><br><span class="line">tar -jxvf gmp-6.1.0.tar.bz2</span><br><span class="line">cd gmp-6.1.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="安装-MPFR"><a href="#安装-MPFR" class="headerlink" title="安装 MPFR"></a>安装 MPFR</h2><p><a href="ftp://gcc.gnu.org/pub/gcc/infrastructure/">安装包下载地址</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2</span><br><span class="line">tar -jxvf mpfr-3.1.4.tar.bz2</span><br><span class="line">cd mpfr-3.1.4</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="安装-MPC"><a href="#安装-MPC" class="headerlink" title="安装 MPC"></a>安装 MPC</h2><p><a href="ftp://gcc.gnu.org/pub/gcc/infrastructure/">安装包下载地址</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz</span><br><span class="line">tar -zxvf mpc-1.0.3.tar.gz</span><br><span class="line">cd mpc-1.0.3</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="cannot-find-crtn-o"><a href="#cannot-find-crtn-o" class="headerlink" title="cannot find crtn.o"></a>cannot find crtn.o</h2><p>Centos7 编译软件时报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --prefix=/usr/local/gcc-8.3.0</span></span><br><span class="line">cannot find crtn.o: No such file or directory</span><br></pre></td></tr></table></figure>
<p><strong>解决方法</strong> ： 编译时添加选项 <code>--disable-multilib</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[cannot find crti.o](https://blog.csdn.net/weixin_39278265/article/details/118435463)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --prefix=/usr/local/gcc-8.3.0 --disable-multilib</span></span><br></pre></td></tr></table></figure>

<h2 id="C-preprocessor-“-x2F-lib-x2F-cpp”-fails-sanity-check"><a href="#C-preprocessor-“-x2F-lib-x2F-cpp”-fails-sanity-check" class="headerlink" title="C++ preprocessor “&#x2F;lib&#x2F;cpp” fails sanity check"></a>C++ preprocessor “&#x2F;lib&#x2F;cpp” fails sanity check</h2><p>centos7 编译后，安装软件时报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">error: C++ preprocessor &quot;/lib/cpp&quot; fails sanity chec</span><br></pre></td></tr></table></figure>

<p>该报错原因为缺少必要的 C++ 库，执行以下命令安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y gcc-c++</span><br></pre></td></tr></table></figure>

<h2 id="编译安装软件前，执行-configure-时指定-C-编译器的路径"><a href="#编译安装软件前，执行-configure-时指定-C-编译器的路径" class="headerlink" title="编译安装软件前，执行 configure 时指定 C++ 编译器的路径"></a>编译安装软件前，执行 configure 时指定 C++ 编译器的路径</h2><p>在系统上安装了多个版本的 gcc 时，编译前执行 <code>./configure</code> 时可能会找到默认的 gcc，会不符合版本要求，可能会输出下面代码示例中的错误。<code>./configure</code> 时找到的是 <code>4.8.5</code> 的 GCC，配置此软件需要 <code>4.9</code>，系统上还安装了 <code>8.3.0</code> 版本的 gcc。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --prefix=/usr/local/</span></span><br><span class="line">checking for C++ compiler vendor... gnu</span><br><span class="line">checking for C++ compiler version... 4.8.5</span><br><span class="line">configure: error: GCC v. 4.9 is required </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/usr/local/gcc-8.3.0/bin/gcc --version</span></span><br><span class="line">gcc (GCC) 8.3.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>为了解决此问题，可以在执行 <code>./configure</code> 时指定编译器的位置，分别可以使用环境变量 <code>CC=/path/to/gcc</code> 和 <code>CXX=/usr/local/gcc-8.3.0/bin/g++</code> 指定 C 和 C++ 编译器的具体路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure CXX=/usr/local/gcc-8.3.0/bin/g++ --prefix=/usr/local/</span><br><span class="line"></span><br><span class="line">./configure CC=/usr/local/gcc-8.3.0/bin/gcc --prefix=/usr/local/</span><br></pre></td></tr></table></figure>

<h1 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h1><h2 id="openssl-版本升级"><a href="#openssl-版本升级" class="headerlink" title="openssl 版本升级"></a>openssl 版本升级</h2><p>Centos7 系统默认安装的 openssl 版本太低，需要升级时，可以参考以下步骤升级</p>
<p>查看默认版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl version</span></span><br><span class="line">OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure>

<p><a href="https://www.openssl.org/source/">最新版本 OpenSSL 下载地址</a>，此处下载 <code>openssl-1.1.1.tar.gz</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -k http://www.openssl.org/source/openssl-1.1.1.tar.gz --no-check-certificate</span><br><span class="line"></span><br><span class="line">tar -zxvf openssl-1.1.1.tar.gz</span><br><span class="line"></span><br><span class="line">cd openssl-1.1.1</span><br><span class="line"></span><br><span class="line">./config --prefix=/usr/local/openssl shared zlib</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>此时执行以下命令查看版本会报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/usr/local/openssl/bin/openssl version</span></span><br><span class="line">/usr/local/openssl/bin/openssl: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>
<p>主要是因为找不到最新版本的动态链接库，可以执行以下命令链接 <code>libssl</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/lib64/</span><br><span class="line">ln -s /usr/local/openssl/lib/libcrypto.so.1.1 /usr/lib64/</span><br></pre></td></tr></table></figure>
<p>重新检查新编译的 openssl 的版本，显示最新安装的版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/usr/local/openssl/bin/openssl version</span></span><br><span class="line">OpenSSL 1.1.1  11 Sep 2018</span><br></pre></td></tr></table></figure>

<p>如果旧版本不再使用，执行以下命令使用新的 openssl 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl version</span></span><br><span class="line">OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">which</span> openssl</span></span><br><span class="line">/usr/bin/openssl</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> /usr/bin/openssl&#123;,.1.0.2k-fips.bak&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> -s /usr/local/openssl/bin/openssl /usr/bin/openssl</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl version</span></span><br><span class="line">OpenSSL 1.1.1  11 Sep 2018</span><br></pre></td></tr></table></figure>

<h1 id="make"><a href="#make" class="headerlink" title="make"></a>make</h1><h2 id="Something-went-wrong-bootstrapping-makefile-fragments"><a href="#Something-went-wrong-bootstrapping-makefile-fragments" class="headerlink" title="Something went wrong bootstrapping makefile fragments"></a>Something went wrong bootstrapping makefile fragments</h2><p>源码编译安装软件包，执行 <code>./configure</code> 报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config.status: error: Something went wrong bootstrapping makefile fragments</span><br><span class="line">    for automatic dependency tracking.  If GNU make was not used, consider</span><br><span class="line">    re-running the configure script with MAKE=&quot;gmake&quot; (or whatever is</span><br><span class="line">    necessary).  You can also try re-running configure with the</span><br><span class="line">    &#x27;--disable-dependency-tracking&#x27; option to at least be able to build</span><br><span class="line">    the package (albeit without support for automatic dependency tracking).</span><br><span class="line">See `config.log&#x27; for more details</span><br></pre></td></tr></table></figure>
<p><strong>问题原因</strong> 为缺少 <code>GNU make</code>，执行以下命令安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y make</span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/gyfluck/p/10537383.html">升级 GCC 支持C++11</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/weixin_39278265/article/details/118435463">cannot find crti.o</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux namespace 简介</title>
    <url>/202304191340/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 5.4.239-1</li>
</ul>
<p>Linux 的 namespace 的作用是 ”隔离内核资源“，目前主要实现了以下 namespace</p>
<ul>
<li><code>mount namespace</code> - 文件系统挂载点</li>
<li><code>UTS namespace</code> - 主机名</li>
<li><code>IPC namespace</code> - POSIX 进程间通信消息队列</li>
<li><code>PID namespace</code> - 进程 pid 数字空间</li>
<li><code>network namespace</code> - network</li>
<li><code>user namespace</code> - user ID 数字空间</li>
<li><code>cgroup</code> - 资源使用控制</li>
</ul>
<p>其中，除了 <code>network namespace</code>，其他 namespace 的操作需要使用 C 语言调用系统 API 实现。<code>network namespace</code> 的增删改查功能已经集成到了 Linux 的 <code>ip</code> 工具集的 <code>netns</code> 子命令中</p>
<p>Linux 里面的 namespace 给处在其中的进程造成 2 个错觉：</p>
<ol>
<li>它是系统里面唯一的进程</li>
<li>它独享系统的所有资源</li>
</ol>
<p>默认情况下，Linux 里面的所有进程处在和宿主机相同的 namespace ，即初始 namespace 里，默认享有全局系统资源。</p>
<p>想要查看某个进程都在哪些 namespace 中，可以找到进程 ID （PID），通过查看以下内容或者 namespace 信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -elf | grep nginx</span></span><br><span class="line">4 S root     32679 32659  0  80   0 -  2248 sigsus Apr07 ?        00:00:00 nginx: master process nginx -g daemon off;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll /proc/32679/ns/</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:51 cgroup -&gt; cgroup:[4026531835]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:51 ipc -&gt; ipc:[4026534784]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:51 mnt -&gt; mnt:[4026534583]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:51 net -&gt; net:[4026534787]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:51 pid -&gt; pid:[4026534878]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:51 pid_for_children -&gt; pid:[4026534878]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:51 user -&gt; user:[4026531837]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:51 uts -&gt; uts:[4026534877]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过以上命令，可以看到 <code>nginx</code> 进程所属的 namespace，要查看系统初始 namespace ，可以查看 PID 为 1 的进程的 namespace 信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll /proc/1/ns/</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:53 cgroup -&gt; cgroup:[4026531835]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:53 ipc -&gt; ipc:[4026531839]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:53 mnt -&gt; mnt:[4026531840]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:53 net -&gt; net:[4026531992]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:53 pid -&gt; pid:[4026531836]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:53 pid_for_children -&gt; pid:[4026531836]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:53 user -&gt; user:[4026531837]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 19 13:53 uts -&gt; uts:[4026531838]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>链接文件的内容的格式为 ns 类型: [inode number]。这里的 <code>inode number</code> 则用来标识一个 namespace，我们也可以把它理解为 namespace 的 ID。如果两个进程的某个 namespace 文件指向同一个链接文件，说明其相关资源在同一个 namespace 中。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[不能不知道的三个docker容器隔离核心技术：namespace、cgroups、rootfs](https://zhuanlan.zhihu.com/p/374503196)">[1]</span></a></sup></p>
</blockquote>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/374503196">不能不知道的三个docker容器隔离核心技术：namespace、cgroups、rootfs</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux macvlan 网卡虚拟化技术</title>
    <url>/202304251611/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Macvlan"><a href="#Macvlan" class="headerlink" title="Macvlan"></a>Macvlan</h1><p>Macvlan 本身是 linxu kernel 模块</p>
<p>Macvlan 接口是物理以太网接口的虚拟子接口，Macvlan 允许用户在一个物理网络接口上面配置多个虚拟的网络接口，每个 Macvlan 接口都有自己的区别与父接口的 MAC 地址，并且可以像普通的物理网络接口一样分配 IP 地址。使用 Macvlan 技术实现的效果是一块物理网卡可以绑定多个 IP 地址，并且每个 IP 地址有自己独立的 MAC 地址。</p>
<p>Macvlan 虚拟出来的虚拟网卡，在逻辑上和物理网卡是对等的。使用 Macvlan 的虚拟网卡要和父接口在同一个网段。</p>
<p>Macvlan 的最大优点是性能极好，相比其他方式，macvlan 不需要创建 Linux bridge，而是直接通过interface 连接到物理网络。</p>
<p>为保证父接口能接收多个不同 MAC 地址的网络包，需要开启网卡的 <a href="/202304041014/" title="混杂模式">混杂模式</a></p>
<h2 id="docker-中使用-Macvlan-虚拟网卡"><a href="#docker-中使用-Macvlan-虚拟网卡" class="headerlink" title="docker 中使用 Macvlan 虚拟网卡"></a>docker 中使用 Macvlan 虚拟网卡</h2><p>本示例演示 docker 环境中使用 macvlan。首先创建使用 macvlan 驱动的 network，Docker 中 macvlan 只支持 bridge 模式 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Docker跨主机通信之macvlan](http://dockeradv.baoshu.red/advanced_network/macvlan.html)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker network create -d macvlan --subnet=192.168.142.0/24 \</span></span><br><span class="line"><span class="language-bash">                                   --gateway=192.168.142.2 \</span></span><br><span class="line"><span class="language-bash">                                   -o parent=ens33 \</span></span><br><span class="line"><span class="language-bash">                                   macvlan1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker network <span class="built_in">ls</span></span></span><br><span class="line">NETWORK ID     NAME       DRIVER    SCOPE</span><br><span class="line">69324d203c35   bridge     bridge    local</span><br><span class="line">f8943f720d73   host       host      local</span><br><span class="line">0aa95ac8c0f4   macvlan1   macvlan   local</span><br><span class="line">d400c40efdc5   none       null      local</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 docker 环境中，创建网络时，会自动将宿主机网卡设置为混杂模式，此时查看网卡信息，未显示混杂模式，但是查看 <code>dmesg</code> 日志，会看到网卡进入了混杂模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ dmesg</span><br><span class="line">[93203.228311] device ens33 entered promiscuous mode</span><br></pre></td></tr></table></figure>
</blockquote>
<p>运行容器并连接到新建的 macvlan 网络 <code>macvlan1</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd --name test01 \</span><br><span class="line">                --ip=192.168.142.12 \</span><br><span class="line">                --network macvlan1 centos:centos7.9.2009</span><br></pre></td></tr></table></figure>
<p>使用命令 <code>docker exec -it test01 bash</code> 进入容器查看容器的 IP 地址信息，可以看到容器中的网卡类型为 <code>macvlan</code>，模式为 <code>bridge</code>，网关为 docker 网络 <code>macvlan1</code> 中配置的网关。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -d add</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 promiscuity 0 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: eth0@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:c0:a8:8e:0c brd ff:ff:ff:ff:ff:ff link-netnsid 0 promiscuity 0 </span><br><span class="line">    macvlan mode bridge numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">    inet 192.168.142.12/24 brd 192.168.142.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.142.2   0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">192.168.142.0   0.0.0.0         255.255.255.0   U     0      0        0 eth0</span><br></pre></td></tr></table></figure>
<p>测试容器可以和宿主机网络一样访问外网。</p>
<p>此时检查宿主机网卡信息，系统上只有 <code>lo</code>，<code>ens33</code>，<code>docker0</code>，未出现其他网卡。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -d <span class="built_in">link</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 promiscuity 0 addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:90:51:eb brd ff:ff:ff:ff:ff:ff promiscuity 1 addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default </span><br><span class="line">    link/ether 02:42:e9:a6:76:56 brd ff:ff:ff:ff:ff:ff promiscuity 0 </span><br><span class="line">    bridge forward_delay 1500 hello_time 200 max_age 2000 ageing_time 30000 stp_state 0 priority 32768 vlan_filtering 0 vlan_protocol 802.1Q bridge_id 8000.2:42:e9:a6:76:56 designated_root 8000.2:42:e9:a6:76:56 root_port 0 root_path_cost 0 topology_change 0 topology_change_detected 0 hello_timer    0.00 tcn_timer    0.00 topology_change_timer    0.00 gc_timer  265.03 vlan_default_pvid 1 vlan_stats_enabled 0 group_fwd_mask 0 group_address 01:80:c2:00:00:00 mcast_snooping 1 mcast_router 1 mcast_query_use_ifaddr 0 mcast_querier 0 mcast_hash_elasticity 16 mcast_hash_max 4096 mcast_last_member_count 2 mcast_startup_query_count 2 mcast_last_member_interval 100 mcast_membership_interval 26000 mcast_querier_interval 25500 mcast_query_interval 12500 mcast_query_response_interval 1000 mcast_startup_query_interval 3125 mcast_stats_enabled 0 mcast_igmp_version 2 mcast_mld_version 1 nf_call_iptables 0 nf_call_ip6tables 0 nf_call_arptables 0 addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535</span><br></pre></td></tr></table></figure>

<p>在另一个 docker 节点上同样配置 docker 网络和容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker network create -d macvlan --subnet=192.168.142.0/24 \</span></span><br><span class="line"><span class="language-bash">                                   --gateway=192.168.142.2 \</span></span><br><span class="line"><span class="language-bash">                                   -o parent=ens33 \</span></span><br><span class="line"><span class="language-bash">                                   macvlan1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd --name test01 \</span></span><br><span class="line"><span class="language-bash">                --ip=192.168.142.13 \</span></span><br><span class="line"><span class="language-bash">                --network macvlan1 centos:centos7.9.2009</span>                                   </span><br></pre></td></tr></table></figure>
<p>进入容器 <code>test01</code> ，访问到另一个节点上的容器的连通性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping 192.168.142.12</span></span><br><span class="line">PING 192.168.142.12 (192.168.142.12) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.142.12: icmp_seq=1 ttl=64 time=0.871 ms</span><br><span class="line">64 bytes from 192.168.142.12: icmp_seq=2 ttl=64 time=0.403 ms</span><br><span class="line">64 bytes from 192.168.142.12: icmp_seq=3 ttl=64 time=0.568 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.142.12 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2047ms</span><br><span class="line">rtt min/avg/max/mdev = 0.403/0.614/0.871/0.193 ms</span><br></pre></td></tr></table></figure>
<p>进入容器 <code>test01</code> ，测试和宿主机 ip 的连通性，结果发现不通，原因为：在 macvlan 虚拟网络中，父接口（物理网卡）相当于一个交换机，对于其子 macvlan 网卡的数据包，只进行转发而不处理，于是造成了使用本机 macvlan 网卡的虚拟 IP 无法和本机物理网卡的 IP 通信。 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping 192.168.142.10</span></span><br><span class="line">PING 192.168.142.10 (192.168.142.10) 56(84) bytes of data.</span><br><span class="line">From 192.168.142.13 icmp_seq=1 Destination Host Unreachable</span><br><span class="line">From 192.168.142.13 icmp_seq=2 Destination Host Unreachable</span><br><span class="line">From 192.168.142.13 icmp_seq=3 Destination Host Unreachable</span><br><span class="line">^C</span><br><span class="line">--- 192.168.142.10 ping statistics ---</span><br><span class="line">5 packets transmitted, 0 received, +3 errors, 100% packet loss, time 4073ms</span><br><span class="line">pipe 4</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h2 id="macvlan-网络存的缺点"><a href="#macvlan-网络存的缺点" class="headerlink" title="macvlan 网络存的缺点"></a>macvlan 网络存的缺点</h2><ul>
<li>macvlan 会独占主机的物理网卡，也就是说一个物理网卡只能创建一个 macvlan 网络</li>
<li>使用本机 macvlan 网卡的虚拟 IP 无法和本机物理网卡的 IP 通信</li>
<li>父接口异常，其他所有的虚拟子接口的网络都会异常</li>
</ul>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://dockeradv.baoshu.red/advanced_network/macvlan.html">Docker跨主机通信之macvlan</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>network</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux network namespace 使用说明</title>
    <url>/202304031317/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 5.4.239-1</li>
</ul>
<p>Linux 的 namespace 的作用是 <code>隔离内核资源</code>，目前主要实现了以下 namespace</p>
<ul>
<li><code>mount namespace</code> - 文件系统挂载点</li>
<li><code>UTS namespace</code> - 主机名</li>
<li><code>IPC namespace</code> - POSIX 进程间通信消息队列</li>
<li><code>PID namespace</code> - 进程 pid 数字空间</li>
<li><code>network namespace</code> - network</li>
<li><code>user namespace</code> - user ID 数字空间</li>
</ul>
<p>其中，除了 <code>network namespace</code>，其他 namespace 的操作需要使用 C 语言调用系统 API 实现。<code>network namespace</code> 的增删改查功能已经集成到了 Linux 的 <code>ip</code> 工具集的 <code>netns</code> 子命令中</p>
<p>Linux 里面的 namespace 给处在其中的进程造成 2 个错觉：</p>
<ol>
<li>它是系统里面唯一的进程</li>
<li>它独享系统的所有资源</li>
</ol>
<p>默认情况下，Linux 里面的所有进程处在和宿主机相同的 namespace ，即初始 namespace 里，默认享有全局系统资源。</p>
<h1 id="network-namespace-常用操作"><a href="#network-namespace-常用操作" class="headerlink" title="network namespace 常用操作"></a>network namespace 常用操作</h1><p>network namespace 的增删改查功能已经集成到了 Linux 的 <code>ip</code> 工具集的 <code>netns</code> 子命令中，因此在 Linux 系统中，对 network namespace 的操作主要使用 <code>ip netns</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">help</span></span></span><br><span class="line">Usage: ip netns list</span><br><span class="line">       ip netns add NAME</span><br><span class="line">       ip netns set NAME NETNSID</span><br><span class="line">       ip [-all] netns delete [NAME]</span><br><span class="line">       ip netns identify [PID]</span><br><span class="line">       ip netns pids NAME</span><br><span class="line">       ip [-all] netns exec [NAME] cmd ...</span><br><span class="line">       ip netns monitor</span><br><span class="line">       ip netns list-id</span><br></pre></td></tr></table></figure>
<h2 id="创建并查看-network-namespace"><a href="#创建并查看-network-namespace" class="headerlink" title="创建并查看 network namespace"></a>创建并查看 network namespace</h2><p>使用以下命令创建名为 <code>netns1</code> 的 <code>network namespace</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip netns add netns1</span><br></pre></td></tr></table></figure>

<p>以下命令查看系统中的 <code>network namespace</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns list</span></span><br><span class="line">netns1</span><br></pre></td></tr></table></figure>
<p>新的 <code>network namespace</code> 创建后，系统会在 <code>/var/run/netns/</code> 下面生成一个同名的挂载点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l /var/run/netns/</span></span><br><span class="line">total 0</span><br><span class="line">-r--r--r-- 1 root root 0 Apr  3 13:33 netns1</span><br></pre></td></tr></table></figure>

<p>此挂载点的主要作用一方面是方便对 namespace 的管理，一方面是使 namespace 即使没有进程运行也能继续存在。</p>
<p>新的 <code>network namespace</code> 创建后，可以使用 <code>ip netns exec</code> 命令进入 namespace，做网络配置或者查询的工作。</p>
<blockquote>
<p><code>ip netns exec</code> 命令只能根据 network namespace 的名称进入 namespace</p>
</blockquote>
<p>以下命令查询 <code>netns1</code> 的 <code>network namespace</code> 的 IP 地址信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> netns1 ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br></pre></td></tr></table></figure>
<p>默认的 <code>network namespace</code> 除了附带一个 <code>lo</code> 网卡外，没有任何其他网络设备，并且此 <code>lo</code> 接口还处于 <code>DOWN</code> 的状态，因此此回环网卡也是不可访问的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> netns1 ping 127.0.0.1</span></span><br><span class="line">connect: Network is unreachable</span><br></pre></td></tr></table></figure>

<p>在此示例中，如果想启用本地回环地址，首先需要进入 namespace，将本地回环网卡的状态修改为 <code>UP</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> netns1 ip <span class="built_in">link</span> <span class="built_in">set</span> dev lo up</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> netns1 ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> netns1 ping 127.0.0.1</span></span><br><span class="line">PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.021 ms</span><br><span class="line">^C</span><br><span class="line">--- 127.0.0.1 ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.021/0.021/0.021/0.000 ms</span><br></pre></td></tr></table></figure>

<p>此时，namespace 中的 <code>lo</code> 网卡可以正常使用，但是因为 namespace 中没有其他网络设备，此 <code>network namespace</code> 无法和其他网络通信，要和其他网络通信，需要用到其他的网络技术，例如 <a href="#veth-pair"><code>veth pair</code></a></p>
<h2 id="删除-network-namespace"><a href="#删除-network-namespace" class="headerlink" title="删除 network namespace"></a>删除 network namespace</h2><p>要删除 <code>network namespace</code>，可以使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip netns delete netns1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面这条命令并没有实际删除 <code>netns1</code> 这个 <code>network namespace</code>，它只是移除了这个 namespace 对应的挂载点(<code>/var/run/netns/netns1</code>)，只要里面的进程还运行着，<code>network namespace</code> 就会一直存在 </p>
</blockquote>
<h1 id="veth-pair"><a href="#veth-pair" class="headerlink" title="veth pair"></a>veth pair</h1><p>veth 是虚拟以太网（Virtual Ethernet）的缩写。veth 设备总是成对出现的，因此我们称之为 <code>veth pair</code>，<code>veth pair</code> 的一端发送的数据会在另外一端接收。根据这一特性，<code>veth pair</code> 常被用于跨 <code>network namespace</code> 的通信，即分别将 <code>veth pair</code> 的 2 端放在不同的 <code>network namespace</code>。</p>
<span id="more"></span>

<h2 id="veth-pair-的创建和使用"><a href="#veth-pair-的创建和使用" class="headerlink" title="veth pair 的创建和使用"></a>veth pair 的创建和使用</h2><p>创建 <code>veth pair</code>，名称分别是 <code>veth1</code> 和 <code>veth2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link add veth0 type veth peer name veth1</span><br></pre></td></tr></table></figure>
<p>查看主机上面的网卡信息，创建的 <code>veth pair</code> 在主机上表现为 2 块网卡:  <code>veth1</code> 和 <code>veth2</code>，mtu 为 1500，初始状态为 <code>DOWN</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> list</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:e7:c0:27 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: veth1@veth0: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 46:d5:d3:da:b8:80 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: veth0@veth1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 5a:b4:83:22:2b:99 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>
<p>使用以下命令修改 <code>veth pair</code> 状态和配置 ip 地址信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> dev veth0 up</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> dev veth1 up</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:e7:c0:27 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: veth1@veth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 46:d5:d3:da:b8:80 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: veth0@veth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 5a:b4:83:22:2b:99 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig veth0 192.168.10.10/24</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig veth1 192.168.10.11/24</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">5: veth1@veth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 46:d5:d3:da:b8:80 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.10.11/24 brd 192.168.10.255 scope global veth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::44d5:d3ff:feda:b880/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: veth0@veth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 5a:b4:83:22:2b:99 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.10.10/24 brd 192.168.10.255 scope global veth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::58b4:83ff:fe22:2b99/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>以下示例创建 2 个 <code>network namespace</code>，并将上面新创建的 <code>veth pair</code> 移动到 2 个新建的 <code>network namespace</code>，实现 2 个 <code>network namespace</code> 之间的通信</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns add newnetns1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns add newnetns2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns list</span></span><br><span class="line">newnetns2</span><br><span class="line">newnetns1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>将 <code>veth1</code> 配置给 <code>newnetns1</code>，<code>veth2</code> 配置给 <code>newnetns2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link set veth0 netns newnetns1</span><br><span class="line">ip link set veth1 netns newnetns2</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将 <code>veth pair</code> 放入指定的 network namespace，除了可以使用 network namespace 的名称之外，还可以使用指定进程的 PID，实现在不知道进程对应的 network namespace 的名称的情况下操作  network namespace 。假如要将 veth 放入 PID 为 84040 的进程对应的  network namespace，可以使用如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link set veth0 netns 84040 </span><br></pre></td></tr></table></figure>
</blockquote>
<p>在宿主机查看网卡信息以及 ip 信息，<code>veth1</code> 和 <code>veth2</code> 不出现在列表中，因为它们已经不在根网络命名空间中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> show</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:e7:c0:27 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.142.10/24 brd 192.168.142.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fee7:c027/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>
<p>分别查看 <code>newnetns1</code> 和 <code>newnetns2</code> 的 <code>network namespae</code> 信息如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> newnetns1 ip <span class="built_in">link</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">6: veth0@if5: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 5a:b4:83:22:2b:99 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> newnetns2 ip <span class="built_in">link</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">5: veth1@if6: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 46:d5:d3:da:b8:80 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> newnetns1 ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">6: veth0@if5: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ether 5a:b4:83:22:2b:99 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> newnetns2 ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">5: veth1@if6: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ether 46:d5:d3:da:b8:80 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></table></figure>
<p>配置 ip 地址信息，并测试 2 个 <code>network namespace</code> 是否能 ping 通</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> newnetns1 ifconfig veth0 up</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> newnetns2 ifconfig veth1 up</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> newnetns1 ifconfig veth0 192.168.10.10/24</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> newnetns2 ifconfig veth1 192.168.10.11/24</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> newnetns1 ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">6: veth0@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 5a:b4:83:22:2b:99 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">    inet 192.168.10.10/24 brd 192.168.10.255 scope global veth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::58b4:83ff:fe22:2b99/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> newnetns2 ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">5: veth1@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 46:d5:d3:da:b8:80 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 192.168.10.11/24 brd 192.168.10.255 scope global veth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::44d5:d3ff:feda:b880/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> newnetns2 ping 192.168.10.10</span></span><br><span class="line">PING 192.168.10.10 (192.168.10.10) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.071 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.10.10 ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.071/0.071/0.071/0.000 ms</span><br></pre></td></tr></table></figure>

<h1 id="Linux-bridge"><a href="#Linux-bridge" class="headerlink" title="Linux bridge"></a>Linux bridge</h1><p><code>veth pair</code> 可以连接 2 个 <code>network namespace</code>， 要连接更多的 <code>network namespace</code>，就需要 <code>bridge</code> 设备。</p>
<h2 id="创建-bridge"><a href="#创建-bridge" class="headerlink" title="创建 bridge"></a>创建 bridge</h2><p>使用以下命令创建一个名为 <code>br0</code> 的 bridge 设备</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> add name br0 <span class="built_in">type</span> bridge</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> br0 up</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:e7:c0:27 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">7: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether ca:80:61:e4:98:94 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>

<p>除了使用 <code>ip link</code> 命令管理网桥外，还可以使用 <code>bridge-utils</code> 里面的 <code>brctl</code> 命令管理网桥设备，例如创建名为 br0 的 bridge 设备</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install -y bridge-utils</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brctl <span class="built_in">help</span></span></span><br><span class="line">never heard of command [help]</span><br><span class="line">Usage: brctl [commands]</span><br><span class="line">commands:</span><br><span class="line">	addbr     	&lt;bridge&gt;		add bridge</span><br><span class="line">	delbr     	&lt;bridge&gt;		delete bridge</span><br><span class="line">	addif     	&lt;bridge&gt; &lt;device&gt;	add interface to bridge</span><br><span class="line">	delif     	&lt;bridge&gt; &lt;device&gt;	delete interface from bridge</span><br><span class="line">	hairpin   	&lt;bridge&gt; &lt;port&gt; &#123;on|off&#125;	turn hairpin on/off</span><br><span class="line">	setageing 	&lt;bridge&gt; &lt;time&gt;		set ageing time</span><br><span class="line">	setbridgeprio	&lt;bridge&gt; &lt;prio&gt;		set bridge priority</span><br><span class="line">	setfd     	&lt;bridge&gt; &lt;time&gt;		set bridge forward delay</span><br><span class="line">	sethello  	&lt;bridge&gt; &lt;time&gt;		set hello time</span><br><span class="line">	setmaxage 	&lt;bridge&gt; &lt;time&gt;		set max message age</span><br><span class="line">	setpathcost	&lt;bridge&gt; &lt;port&gt; &lt;cost&gt;	set path cost</span><br><span class="line">	setportprio	&lt;bridge&gt; &lt;port&gt; &lt;prio&gt;	set port priority</span><br><span class="line">	show      	[ &lt;bridge&gt; ]		show a list of bridges</span><br><span class="line">	showmacs  	&lt;bridge&gt;		show a list of mac addrs</span><br><span class="line">	showstp   	&lt;bridge&gt;		show bridge stp info</span><br><span class="line">	stp       	&lt;bridge&gt; &#123;on|off&#125;	turn stp on/off</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brctl addbr br0</span></span><br></pre></td></tr></table></figure>

<p>以下命令演示创建 <code>veth pair</code> 并将其中的一端连接到 <code>br0</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link add veth0 type veth peer name veth0_p</span><br><span class="line">ip add add 172.17.0.2/24 dev veth0</span><br><span class="line">ip add add 172.17.0.3/24 dev veth0_p</span><br><span class="line">ip link set veth0 up</span><br><span class="line">ip link set veth0_p up</span><br><span class="line"></span><br><span class="line">ip link set dev veth0 master br0</span><br></pre></td></tr></table></figure>

<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="network-namespace-网卡配置-ip-后无法-ping-通本机网卡"><a href="#network-namespace-网卡配置-ip-后无法-ping-通本机网卡" class="headerlink" title="network namespace 网卡配置 ip 后无法 ping 通本机网卡"></a>network namespace 网卡配置 ip 后无法 ping 通本机网卡</h2><p>示例操作如下，主要为创建 network namespace，添加网卡，配置 IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns add testns</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> add veth0 <span class="built_in">type</span> veth peer name veth0_p</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> <span class="built_in">set</span> veth0 netns testns</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> testns ip <span class="built_in">link</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">9: veth0@if8: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether ae:c7:2f:73:31:9e brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> testns ip add add 10.10.1.1/24 dev veth0</span>    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> testns ip <span class="built_in">link</span> <span class="built_in">set</span> veth0 up</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> testns ping 10.10.1.1</span></span><br><span class="line">PING 10.10.1.1 (10.10.1.1) 56(84) bytes of data.</span><br><span class="line">^C</span><br><span class="line">--- 10.10.1.1 ping statistics ---</span><br><span class="line">4 packets transmitted, 0 received, 100% packet loss, time 3054ms</span><br></pre></td></tr></table></figure>

<p>如上操作，为 network namespace 创建了网卡并配置了 IP，网卡处于 UP 状态，但是配置的 IP 在本机无法 ping 通。</p>
<p>原因为 <strong>回环网卡 lo 处于 <code>DOWN</code> 状态</strong>，启用 <code>lo</code>，重新 ping，可以正常 ping 通本地 IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> testns ip <span class="built_in">link</span> <span class="built_in">set</span> lo up</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> testns ping 10.10.1.1</span></span><br><span class="line">PING 10.10.1.1 (10.10.1.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.10.1.1: icmp_seq=1 ttl=64 time=0.031 ms</span><br><span class="line">64 bytes from 10.10.1.1: icmp_seq=2 ttl=64 time=0.023 ms</span><br><span class="line">^C</span><br><span class="line">--- 10.10.1.1 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1060ms</span><br><span class="line">rtt min/avg/max/mdev = 0.023/0.027/0.031/0.004 ms</span><br></pre></td></tr></table></figure>

<h2 id="2-个-network-namespace-配置后无法-ping-通"><a href="#2-个-network-namespace-配置后无法-ping-通" class="headerlink" title="2 个 network namespace 配置后无法 ping 通"></a>2 个 network namespace 配置后无法 ping 通</h2><p>示例操作如下</p>
<ol>
<li><p>创建 netwrk namespace</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip netns add ns1</span><br><span class="line">ip netns add ns2</span><br></pre></td></tr></table></figure></li>
<li><p>创建 <code>veth pair</code> 并分配给 netwrk namespace</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link add veth1 type veth peer name veth1_p</span><br><span class="line">ip link add veth2 type veth peer name veth2_p</span><br><span class="line">   </span><br><span class="line">ip link set veth1 netns ns1</span><br><span class="line">ip link set veth2 netns ns2</span><br></pre></td></tr></table></figure>
</li>
<li><p>为 veth 网卡配置 IP 并启用</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr add 10.10.10.1/24 dev veth1_p</span><br><span class="line">ip link set veth1_p up</span><br><span class="line"></span><br><span class="line">ip addr add 10.10.20.1/24 dev veth2_p</span><br><span class="line">ip link set veth2_p up</span><br><span class="line"></span><br><span class="line">ip netns exec ns1 ip addr add 10.10.10.2/24 dev veth1</span><br><span class="line">ip netns exec ns1 ip link set veth1 up</span><br><span class="line">   </span><br><span class="line">ip netns exec ns2 ip addr add 10.10.20.2/24 dev veth2</span><br><span class="line">ip netns exec ns2 ip link set veth2 up</span><br></pre></td></tr></table></figure></li>
<li><p>为 netwrk namespace 添加到对方的路由</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip netns exec ns1 route add -net 10.10.20.0 netmask 255.255.255.0 gw 10.10.10.1</span><br><span class="line">ip netns exec ns2 route add -net 10.10.10.0 netmask 255.255.255.0 gw 10.10.20.1</span><br></pre></td></tr></table></figure>
<p> 分别查看 2 个 netwrk namespace 的路由信息</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> ns1 route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">10.10.10.0      0.0.0.0         255.255.255.0   U     0      0        0 veth1</span><br><span class="line">10.10.20.0      10.10.10.1      255.255.255.0   UG    0      0        0 veth1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> ns2 route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">10.10.10.0      10.10.20.1      255.255.255.0   UG    0      0        0 veth2</span><br><span class="line">10.10.20.0      0.0.0.0         255.255.255.0   U     0      0        0 veth2</span><br></pre></td></tr></table></figure>
<p> 本示例网络拓扑如下<br> <img src="https://i.csms.tech/img_138.png"></p>
</li>
<li><p>确保系统开启了 ip_forward</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /proc/sys/net/ipv4/ip_forward</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>尝试互相 ping</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip netns <span class="built_in">exec</span> ns1 ping 10.10.20.2</span></span><br><span class="line">PING 10.10.20.2 (10.10.20.2) 56(84) bytes of data.</span><br><span class="line">^C</span><br><span class="line">--- 10.10.20.2 ping statistics ---</span><br><span class="line">7 packets transmitted, 0 received, 100% packet loss, time 6133ms</span><br><span class="line">   </span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<p>结果无法 ping 通，检查 iptables 防火墙，发现防火墙未开启，但是 <code>filter</code> 表中的 <code>FORWARD</code> 链的默认动作为 <code>DROP</code>，并且测试 network namespace 中的网卡互 ping 时，<code>policy DROP 17 packets, 1428 bytes</code> 显示 DROP 的包会增多。由此可知，无法 ping 通是因为此处包被 DROP </p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -L -v -n</span></span><br><span class="line">Chain INPUT (policy ACCEPT 6292 packets, 425K bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy DROP 17 packets, 1428 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 4532 packets, 328K bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行以下命令修改 iptables 防火墙的 <code>filter</code> 表中 <code>FORWARD</code> 链的默认动作为 <code>ACCEPT</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure>
<p>重新测试 ping，可以正常 ping 通</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ip netns exec ns1 ping 10.10.20.2</span><br><span class="line">PING 10.10.20.2 (10.10.20.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.10.20.2: icmp_seq=1 ttl=63 time=0.084 ms</span><br><span class="line">64 bytes from 10.10.20.2: icmp_seq=2 ttl=63 time=0.037 ms</span><br><span class="line">^C</span><br><span class="line">--- 10.10.20.2 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1062ms</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="查看指定类型的网卡"><a href="#查看指定类型的网卡" class="headerlink" title="查看指定类型的网卡"></a>查看指定类型的网卡</h2><p>要查看系统上网卡属于哪种类型，可以通过以下命令查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> show <span class="built_in">type</span> vxlan</span></span><br><span class="line">6: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 8951 qdisc noqueue state UNKNOWN mode DEFAULT group default </span><br><span class="line">    link/ether ce:8c:56:84:e1:7a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> show <span class="built_in">type</span> veth</span></span><br><span class="line">2350: veth2fd77154@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 8951 qdisc noqueue master cni0 state UP mode DEFAULT group default </span><br><span class="line">    link/ether 5a:02:6c:65:c8:5f brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">2352: vethfef50370@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 8951 qdisc noqueue master cni0 state UP mode DEFAULT group default </span><br><span class="line">    link/ether 3a:1c:0b:4f:af:b2 brd ff:ff:ff:ff:ff:ff link-netnsid 2</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> show <span class="built_in">type</span> bridge</span></span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default </span><br><span class="line">    link/ether 02:42:48:54:ca:75 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">2349: cni0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 8951 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 26:4e:46:b2:2a:4c brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>
<p>以下命令查看网卡的详细信息，包括网卡类型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -d <span class="built_in">link</span> show veth1_p</span></span><br><span class="line">4: veth1_p@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 72:f1:d6:f6:c9:53 brd ff:ff:ff:ff:ff:ff link-netnsid 0 promiscuity 0 </span><br><span class="line">    veth addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -d <span class="built_in">link</span> show docker0</span></span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default </span><br><span class="line">    link/ether 02:42:f2:1b:dc:ea brd ff:ff:ff:ff:ff:ff promiscuity 0 </span><br><span class="line">    bridge forward_delay 1500 hello_time 200 max_age 2000 ageing_time 30000 stp_state 0 priority 32768 vlan_filtering 0 vlan_protocol 802.1Q bridge_id 8000.2:42:f2:1b:dc:ea designated_root 8000.2:42:f2:1b:dc:ea root_port 0 root_path_cost 0 topology_change 0 topology_change_detected 0 hello_timer    0.00 tcn_timer    0.00 topology_change_timer    0.00 gc_timer   48.83 vlan_default_pvid 1 vlan_stats_enabled 0 group_fwd_mask 0 group_address 01:80:c2:00:00:00 mcast_snooping 1 mcast_router 1 mcast_query_use_ifaddr 0 mcast_querier 0 mcast_hash_elasticity 16 mcast_hash_max 4096 mcast_last_member_count 2 mcast_startup_query_count 2 mcast_last_member_interval 100 mcast_membership_interval 26000 mcast_querier_interval 25500 mcast_query_interval 12500 mcast_query_response_interval 1000 mcast_startup_query_interval 3125 mcast_stats_enabled 0 mcast_igmp_version 2 mcast_mld_version 1 nf_call_iptables 0 nf_call_ip6tables 0 nf_call_arptables 0 addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -d add</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 promiscuity 0 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:e7:c0:27 brd ff:ff:ff:ff:ff:ff promiscuity 0 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">    inet 192.168.142.10/24 brd 192.168.142.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fee7:c027/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:f2:1b:dc:ea brd ff:ff:ff:ff:ff:ff promiscuity 0 </span><br><span class="line">    bridge forward_delay 1500 hello_time 200 max_age 2000 ageing_time 30000 stp_state 0 priority 32768 vlan_filtering 0 vlan_protocol 802.1Q bridge_id 8000.2:42:f2:1b:dc:ea designated_root 8000.2:42:f2:1b:dc:ea root_port 0 root_path_cost 0 topology_change 0 topology_change_detected 0 hello_timer    0.00 tcn_timer    0.00 topology_change_timer    0.00 gc_timer  147.42 vlan_default_pvid 1 vlan_stats_enabled 0 group_fwd_mask 0 group_address 01:80:c2:00:00:00 mcast_snooping 1 mcast_router 1 mcast_query_use_ifaddr 0 mcast_querier 0 mcast_hash_elasticity 16 mcast_hash_max 4096 mcast_last_member_count 2 mcast_startup_query_count 2 mcast_last_member_interval 100 mcast_membership_interval 26000 mcast_querier_interval 25500 mcast_query_interval 12500 mcast_query_response_interval 1000 mcast_startup_query_interval 3125 mcast_stats_enabled 0 mcast_igmp_version 2 mcast_mld_version 1 nf_call_iptables 0 nf_call_ip6tables 0 nf_call_arptables 0 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: veth1_p@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 72:f1:d6:f6:c9:53 brd ff:ff:ff:ff:ff:ff link-netnsid 0 promiscuity 0 </span><br><span class="line">    veth numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">    inet 10.10.10.1/24 scope global veth1_p</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::70f1:d6ff:fef6:c953/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: veth2_p@if7: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether b6:17:a8:92:57:09 brd ff:ff:ff:ff:ff:ff link-netnsid 1 promiscuity 0 </span><br><span class="line">    veth numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">    inet 10.10.20.1/24 scope global veth2_p</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::b417:a8ff:fe92:5709/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever  </span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip -d <span class="built_in">link</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 promiscuity 0 addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:e7:c0:27 brd ff:ff:ff:ff:ff:ff promiscuity 0 addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default </span><br><span class="line">    link/ether 02:42:f2:1b:dc:ea brd ff:ff:ff:ff:ff:ff promiscuity 0 </span><br><span class="line">    bridge forward_delay 1500 hello_time 200 max_age 2000 ageing_time 30000 stp_state 0 priority 32768 vlan_filtering 0 vlan_protocol 802.1Q bridge_id 8000.2:42:f2:1b:dc:ea designated_root 8000.2:42:f2:1b:dc:ea root_port 0 root_path_cost 0 topology_change 0 topology_change_detected 0 hello_timer    0.00 tcn_timer    0.00 topology_change_timer    0.00 gc_timer   67.56 vlan_default_pvid 1 vlan_stats_enabled 0 group_fwd_mask 0 group_address 01:80:c2:00:00:00 mcast_snooping 1 mcast_router 1 mcast_query_use_ifaddr 0 mcast_querier 0 mcast_hash_elasticity 16 mcast_hash_max 4096 mcast_last_member_count 2 mcast_startup_query_count 2 mcast_last_member_interval 100 mcast_membership_interval 26000 mcast_querier_interval 25500 mcast_query_interval 12500 mcast_query_response_interval 1000 mcast_startup_query_interval 3125 mcast_stats_enabled 0 mcast_igmp_version 2 mcast_mld_version 1 nf_call_iptables 0 nf_call_ip6tables 0 nf_call_arptables 0 addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">4: veth1_p@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 72:f1:d6:f6:c9:53 brd ff:ff:ff:ff:ff:ff link-netnsid 0 promiscuity 0 </span><br><span class="line">    veth addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line">6: veth2_p@if7: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether b6:17:a8:92:57:09 brd ff:ff:ff:ff:ff:ff link-netnsid 1 promiscuity 0 </span><br><span class="line">    veth addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535       </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>network</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 网络接口的混杂模式</title>
    <url>/202304041014/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Linux 网卡的混杂模式（Promiscuous mode），简称 Promisc mode，俗称 <code>监听模式</code>。在非混杂模式下，网卡只会接受目的 MAC 地址是它自己的单播帧，以及多播帧；在混杂模式下，网卡会接受经过它的所有帧。</p>
<p>查看网卡是否处于 <code>Promiscuous mode</code>，可以使用 <code>ifconfig</code> 或者 <code>netstat -i</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig ens33</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.142.10  netmask 255.255.255.0  broadcast 192.168.142.255</span><br><span class="line">        inet6 fe80::20c:29ff:fee7:c027  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:e7:c0:27  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 194243  bytes 257521006 (245.5 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 92488  bytes 6051258 (5.7 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p>当输出包含 <code>PROMISC</code> 时，表明该网络接口处于 <code>Promiscuous mode</code>，否则表明未处于 <code>Promiscuous mode</code>。要开启网卡的 <code>Promiscuous mode</code> ，可以使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig ens33 promisc</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig ens33</span></span><br><span class="line">ens33: flags=4419&lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.142.10  netmask 255.255.255.0  broadcast 192.168.142.255</span><br><span class="line">        inet6 fe80::20c:29ff:fee7:c027  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:e7:c0:27  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 194383  bytes 257531059 (245.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 92561  bytes 6058652 (5.7 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p>以下命令使网卡退出 <code>Promiscuous mode</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig ens33 -promisc</span><br></pre></td></tr></table></figure>

<p>将网络设备加入 Linux bridge 后，网络设备会自动进入混杂模式，此种情况使用 <code>ifconfig</code> 或者 <code>netstat -i</code> 命令查看网卡，未显示 <code>PROMISC</code>，但是查看内核日志，显示网卡已进入混杂模式，并且无法退出，直到将 veth 从Linux bridge 中移除。网络设备移除网桥后，会自动退出混杂模式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip <span class="built_in">link</span> add veth0 <span class="built_in">type</span> veth peer name veth1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brctl show</span></span><br><span class="line">bridge name	bridge id		STP enabled	interfaces</span><br><span class="line">br0		8000.000000000000	no		</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brctl addif br0 veth0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig veth0</span></span><br><span class="line">veth0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.10.1  netmask 255.255.255.0  broadcast 192.168.10.255</span><br><span class="line">        ether b6:b3:aa:ae:61:05  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -i</span></span><br><span class="line">Kernel Interface table</span><br><span class="line">Iface             MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg</span><br><span class="line">br0              1500        0      0      0 0            34      0      0      0 BMU</span><br><span class="line">ens33            1500   195528      0      1 0         93168      0      0      0 BMPRU</span><br><span class="line">veth0            1500        0      0      0 0             0      0      0      0 BMU</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dmesg | grep promisc</span></span><br><span class="line">[75099.376421] device veth2d80973 entered promiscuous mode</span><br><span class="line">[77630.104784] device ens33 entered promiscuous mode</span><br><span class="line">[77719.626596] device ens33 left promiscuous mode</span><br><span class="line">[77877.905587] device ens33 entered promiscuous mode</span><br><span class="line">[78153.928533] device veth0 entered promiscuous mode</span><br></pre></td></tr></table></figure>

<span id="more"></span>
]]></content>
      <categories>
        <category>Linux</category>
        <category>network</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 进程常见状态说明</title>
    <url>/202304181637/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><table>
<thead>
<tr>
<th>状态标识</th>
<th>状态名称</th>
<th>状态说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>R</code></td>
<td>task_running</td>
<td>进程处于运行或就绪状态</td>
<td></td>
</tr>
<tr>
<td><code>S</code></td>
<td>task_interruptible<br/> sleeping</td>
<td>可中断的睡眠状态</td>
<td></td>
</tr>
<tr>
<td><code>D</code></td>
<td>task_uninterruptible</td>
<td>不可中断的睡眠状态<br/>1. 它是一种睡眠状态，意味着处于此状态的进程不会消耗 CPU<br/>2. 睡眠的原因是等待某些资源（比如锁或者磁盘 IO），这也是非常多 D 状态的进程都处在处理 IO 操作的原因<br/>3. 是它不能被中断，这个要区别于 <code>硬件中断</code> 的中断，是指不希望在其获取到资源或者超时前被终止。因此他不会被信号唤醒，也就不会响应 <code>kill -9</code> 这类信号。这也是它跟 <code>S（可中断睡眠）</code>状态的区别</td>
<td></td>
</tr>
<tr>
<td><code>T</code></td>
<td>task_stopped <br/> task_traced<br/>Traced</td>
<td>暂停状态或跟踪状态</td>
<td></td>
</tr>
<tr>
<td><code>Z</code></td>
<td>task_dead <br/> exit_zombie<br/>zombie</td>
<td>退出状态，进程成为僵尸进程</td>
<td></td>
</tr>
<tr>
<td><code>X</code></td>
<td>task_dead <br/> exit_dead</td>
<td>退出状态，进程即将被销毁</td>
<td></td>
</tr>
<tr>
<td><code>I</code></td>
<td>idle</td>
<td>空闲状态</td>
<td></td>
</tr>
</tbody></table>
<h1 id="进程命令名和进程可执行文件名"><a href="#进程命令名和进程可执行文件名" class="headerlink" title="进程命令名和进程可执行文件名"></a>进程命令名和进程可执行文件名</h1><p>在系统中遇到以下进程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ps -elf | grep 18686</span></span><br><span class="line">5 S root     18686  1239  0  80   0 - 46620 pipe_w 15:50 ?        00:00:00 /usr/sbin/CROND -n</span><br><span class="line">0 R root     18694 18686  7  80   0 - 610547 -     15:50 ?        00:00:02 /usr/local/php73/bin/php /home/www/admin/artisan PullData</span><br><span class="line">0 S root     18754 18686  0  80   0 - 22453 pipe_w 15:50 ?        00:00:00 /usr/sbin/sendmail -FCronDaemon -i -odi -oem -oi -t -f root</span><br></pre></td></tr></table></figure>
<p>其中 PID 为 <code>18686</code> 的进程名为 <code>/usr/sbin/CROND</code>，其启动了另外两个子进程。但是在系统中检查，并不存在路径 <code>/usr/sbin/CROND</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> -l /usr/sbin/CROND</span></span><br><span class="line">ls: cannot access /usr/sbin/CROND: No such file or directory</span><br></pre></td></tr></table></figure>

<p>出现此种现象，主要是因为 <em><strong>在启动时，进程的命令名是根据路径传递给 <code>execve()</code> 函数的参数决定的，而不是直接与系统中的文件进行匹配</strong></em>。</p>
<p>在 Linux 系统中，<code>ps</code> 命令显示的进程信息是从 <code>/proc</code> 文件系统中获取的，而 <code>/proc</code> 文件系统包含有关正在运行的进程的信息，包括每个进程的命令名。因此，即使实际上系统中不存在 <code>/usr/sbin/CROND</code> 文件，但如果进程的命令名是 <code>/usr/sbin/CROND</code>，那么 <code>ps</code> 命令仍然会显示进程的命令名为 <code>/usr/sbin/CROND</code>。</p>
<p><em><strong>进程的命令名可以查看 <code>/proc/&lt;PID&gt;/cmdline</code> 文件</strong></em>，本示例中显示如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /proc/18686/cmdline</span> </span><br><span class="line">/usr/sbin/CROND-n</span><br></pre></td></tr></table></figure>

<p>对应的系统上的可执行文件的名称可以查看 <code>/proc/&lt;PID&gt;/stat</code>、<code>/proc/&lt;PID&gt;/comm</code>、<code>/proc/&lt;PID&gt;/status</code> 等文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /proc/900/comm</span> </span><br><span class="line">crond</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /proc/900/status</span> </span><br><span class="line">Name:	crond</span><br><span class="line">Umask:	0022</span><br><span class="line">State:	S (sleeping)</span><br><span class="line">Tgid:	900</span><br><span class="line">Ngid:	0</span><br><span class="line">Pid:	900</span><br><span class="line">PPid:	1239</span><br><span class="line">TracerPid:	0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /proc/900/stat</span></span><br><span class="line">900 (crond) S 1239 1239 1239 0 -1 4202816 1627 0 0 0 0 0 0 0 20 0 1 0 139129633 190955520 1478 18446744073709551615 94685936058368 94685936118156 140733000396032 140733000262488 140427856103840 0 0 4096 16387 18446744071797306256 0 0 17 3 0 0 0 0 0 94685938219080 94685938221648 94685948321792 140733000400770 140733000400789 140733000400789 140733000400872 0</span><br></pre></td></tr></table></figure>

<p>在本示例中，实际执行的命令为 <code>crond</code></p>
<h1 id="进程状态查看"><a href="#进程状态查看" class="headerlink" title="进程状态查看"></a>进程状态查看</h1><h2 id="top-命令"><a href="#top-命令" class="headerlink" title="top 命令"></a>top 命令</h2><p>使用 <code>top</code> 命令可以查看系统负载、CPU 和 内存使用情况。也可以查看单个进程的具体信息。</p>
<p><code>top</code> 命令常用选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-H</code></td>
<td><code>Threads Mode</code>，线程模式。默认情况 <code>top</code> 展示进程的简要信息，使用此选项显示进程中的线程状态。<br/>对应交互式命令 <code>H</code></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>显示单个进程的（线程）详细信息<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">top -H -p 1423</span></span><br><span class="line">top - 09:44:42 up 54 days, 23:53,  2 users,  load average: 8.82, 6.84, 7.21</span><br><span class="line">Threads:  15 total,   0 running,  15 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">Cpu(s): 40.9 us, 10.8 sy,  0.0 ni, 48.1 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.2 si,  0.0 st</span></span><br><span class="line">KiB Mem : 15790488 total,   466056 free,  7761544 used,  7562888 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.  3895716 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                                                  </span><br><span class="line"> 1423 root      20   0 1477368 778788   4260 S 39.5  4.9  11999:41 [watchdog:1:6]                                                                           </span><br><span class="line"> 2572 root      20   0 1477368 778788   4260 S 37.9  4.9  11363:48 [watchdog:1:6]                                                                           </span><br><span class="line"> 1436 root      20   0 1477368 778788   4260 S 34.2  4.9  11286:08 [watchdog:1:6]                                                                           </span><br><span class="line"> 1435 root      20   0 1477368 778788   4260 S 33.9  4.9  12059:53 [watchdog:1:6]                                                                           </span><br><span class="line"> 1434 root      20   0 1477368 778788   4260 S 33.2  4.9  10249:00 [watchdog:1:6]                                                                           </span><br><span class="line"> 1437 root      20   0 1477368 778788   4260 S 30.6  4.9  11717:47 [watchdog:1:6]                                                                           </span><br><span class="line"> 1431 root      20   0 1477368 778788   4260 S 28.9  4.9  11222:06 [watchdog:1:6]                                                                           </span><br><span class="line">21378 root      20   0 1477368 778788   4260 S 27.6  4.9  12143:35 [watchdog:1:6]                                                                           </span><br><span class="line"> 1433 root      20   0 1477368 778788   4260 S 17.6  4.9   8738:21 [watchdog:1:6]                                                                           </span><br><span class="line"> 1428 root      20   0 1477368 778788   4260 S  8.0  4.9   7650:56 [watchdog:1:6]                                                                           </span><br><span class="line"> 1429 root      20   0 1477368 778788   4260 S  0.0  4.9   0:00.04 [watchdog:1:6]                                                                           </span><br><span class="line"> 1430 root      20   0 1477368 778788   4260 S  0.0  4.9   0:00.05 [watchdog:1:6]                                                                           </span><br><span class="line"> 1432 root      20   0 1477368 778788   4260 S  0.0  4.9   0:00.03 [watchdog:1:6]                                                                           </span><br><span class="line"> 1438 root      20   0 1477368 778788   4260 S  0.0  4.9  12260:30 [watchdog:1:6]                                                                           </span><br><span class="line"> 1529 root      20   0 1477368 778788   4260 S  0.0  4.9  11068:39 [watchdog:1:6]</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://lionheartwang.github.io/blog/2018/06/05/linuxjin-cheng-zhuang-tai-shuo-ming/">Linux进程状态说明</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux rsyslog 服务</title>
    <url>/202208191014/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos 7</li>
</ul>
<p>系统默认的日志托管服务，部分系统服务（如 <code>crond</code>, 邮件系统，安全审计等）会将日志发送给 <code>rsyslog</code> 服务来进行日志管理。</p>
<p><code>rsyslog</code> 服务是依赖其配置文件 <code>/etc/rsyslog.conf</code> 来确定哪个服务的什么等级的日志信息会被记录在哪个位置的。也就是说，日志服务的配置文件中主要定义了服务的名称、日志等级和日志记录位置。</p>
<span id="more"></span>

<h3 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h3><p>默认配置文件(<code>/etc/rsyslog.conf</code>)内容如下</p>
<figure class="highlight shell"><figcaption><span>/etc/rsyslog.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载指定模块</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ModLoad imuxsock <span class="comment"># provides support for local system logging (e.g. via logger command)</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ModLoad imjournal <span class="comment"># provides access to the systemd journal</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">放置 rsyslog 辅助文件的路径</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">WorkDirectory /var/lib/rsyslog</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">时间格式</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">包含其他配置</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">IncludeConfig /etc/rsyslog.d/*.conf</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">OmitLocalLogging on</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">IMJournalStateFile imjournal.state</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志记录规则</span></span><br><span class="line">*.info;mail.none;authpriv.none;cron.none                /var/log/messages</span><br><span class="line">authpriv.*                                              /var/log/secure</span><br><span class="line">mail.*                                                  -/var/log/maillog</span><br><span class="line">cron.*                                                  /var/log/cron</span><br><span class="line">*.emerg                                                 :omusrmsg:*</span><br><span class="line">uucp,news.crit                                          /var/log/spooler</span><br><span class="line">local7.*                                                /var/log/boot.log</span><br></pre></td></tr></table></figure>

<p>其中最为关键的部分是日志记录规则，其配置格式如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务名称 连接符号 日志等级               日志记录位置</span></span><br><span class="line">authpriv.*                                              /var/log/secure</span><br></pre></td></tr></table></figure>
<p>以上配置，指定认证相关服务 (<code>authpriv</code>) 的所有等级的日志，记录在 <code>/var/log/secure</code> 日志中</p>
<p>多个服务可以指定同一个<code>日志记录位置</code>，多个 <code>服务名称 连接符号 日志等级</code> 中间使用 <code>;</code> 分割  </p>
<figure class="highlight shell"><figcaption><span>/etc/rsyslog.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">*.info;mail.none;authpriv.none;cron.none                /var/log/messages</span><br></pre></td></tr></table></figure>
<p>多个服务也可以共用同一个 <code>日志等级</code>，格式如下，多个 <code>服务名称</code> 使用 <code>,</code> 分割</p>
<figure class="highlight shell"><figcaption><span>/etc/rsyslog.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">uucp,news.crit                                          /var/log/spooler</span><br></pre></td></tr></table></figure>

<p><code>rsyslog</code> 服务可识别的服务如下</p>
<table>
<thead>
<tr>
<th>服务</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>auth</td>
<td>安全和认证相关消息 (不推荐使用 <code>authpriv</code> 替代）</td>
</tr>
<tr>
<td>authpirv</td>
<td>安全和认证相关信息（私有的）</td>
</tr>
<tr>
<td>cron</td>
<td>系统定时任务 <code>cront</code> 和 <code>at</code> 产生的日志</td>
</tr>
<tr>
<td>daemon</td>
<td>和各个守护进程相关的日志</td>
</tr>
<tr>
<td>ftp</td>
<td>ftp守护进程产生的日志</td>
</tr>
<tr>
<td>kern</td>
<td>内核产生的日志（不是用户进程产生的）</td>
</tr>
<tr>
<td>local0-local7</td>
<td>为本地使用预留的服务</td>
</tr>
<tr>
<td>lpr</td>
<td>打印机产生的日志</td>
</tr>
<tr>
<td>mail</td>
<td>邮件收发信息</td>
</tr>
<tr>
<td>news</td>
<td>与新闻服务器相关的日志</td>
</tr>
<tr>
<td>syslog</td>
<td>有 <code>rsyslog</code> 服务产生的日志信息（虽然服务名称已经改为 <code>rsyslog</code> 服务，但是很多配置都还是沿用了 <code>syslogd</code> 的，这里并没有修改服务名）</td>
</tr>
<tr>
<td>user</td>
<td>用户等级类别的日志信息</td>
</tr>
<tr>
<td>uucp</td>
<td><code>uucp</code> 子系统的日志信息，<code>uucp</code> 是早期 Linux 系统进行数据传递的协议，后来也经常用在新闻组服务中。</td>
</tr>
</tbody></table>
<p><code>rsyslog</code> 服务配置中可使用的连接符号如下</p>
<table>
<thead>
<tr>
<th>连接符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.</code></td>
<td>代表只要比后面的等级高的（包含该等级）日志都记录下来。比如： <code>cron.info</code> 代表 <code>crond</code> 服务产生的日志，只要日志等级大于等于 <code>info</code> 级别，就记录。</td>
</tr>
<tr>
<td><code>.=</code></td>
<td>代表只记录所需等级的日志，其他等级的都不记录。比如： <code>*.=emerg</code> 代表任何日志服务产生的日志，只要等级是 <code>emerg</code> 等级就记录。</td>
</tr>
<tr>
<td><code>.!</code></td>
<td>代表不等于，也就是除了该等级的日志外，其他等级的日志都记录。</td>
</tr>
</tbody></table>
<p><code>rsyslog</code> 服务配置中可使用的日志等级如下</p>
<table>
<thead>
<tr>
<th>日志等级</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>debug</td>
<td>一般的调试信息说明</td>
</tr>
<tr>
<td>info</td>
<td>基本的通知信息</td>
</tr>
<tr>
<td>notice</td>
<td>普通信息，但是有一定的重要性</td>
</tr>
<tr>
<td>warning</td>
<td>警告信息，但是还不会影响到服务或系统的运行</td>
</tr>
<tr>
<td>err</td>
<td>错误信息，一般达到 <code>err</code> 等级的信息以及可以影响到服务或系统的运行了</td>
</tr>
<tr>
<td>crit</td>
<td>临界状况信息，比 <code>err</code> 等级还要严重</td>
</tr>
<tr>
<td>alert</td>
<td>警告状态信息，比 <code>crit</code> 还要严重。必须立即采取行动</td>
</tr>
<tr>
<td>emerg</td>
<td>致命（毁灭）等级信息，系统已经无法使用了</td>
</tr>
<tr>
<td>*</td>
<td>代表所有等级的日志</td>
</tr>
<tr>
<td>none</td>
<td>忽略这个日志服务，该服务的所有日志都不再记录</td>
</tr>
</tbody></table>
<p>可用的 <code>日志记录位置</code> 如下</p>
<table>
<thead>
<tr>
<th>日志记录位置</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>/var/log/secure</code></td>
<td>日志文件的绝对路径</td>
<td><code>/var/log/secure</code></td>
</tr>
<tr>
<td><code>/dev/lp0</code></td>
<td>系统设备文件</td>
<td>如 <code>/dev/lp0</code> 代表第一台打印机，如果日志保存位置是打印机设备，当有日志时就会在打印机上打印。</td>
</tr>
<tr>
<td>远程主机</td>
<td>可以选择使用 <code>TCP</code> (<code>@@192.168.0.210：514</code>) 和 <code>UDP</code> (<code>@192.168.0.210：514</code>) 协议传输日志信息</td>
<td></td>
</tr>
</tbody></table>
<p><code>日志记录位置</code> 之前可以加以下符号：</p>
<ul>
<li><code>-</code>  ： 表示延迟写入</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>rsyslog</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Shell 脚本</title>
    <url>/202306210936/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例"></a>脚本示例</h1><h2 id="一分钟内访问指定-url-一百次"><a href="#一分钟内访问指定-url-一百次" class="headerlink" title="一分钟内访问指定 url 一百次"></a>一分钟内访问指定 url 一百次</h2><p>其中 <code>$&#123;COUNT&#125; * $&#123;SLEEP_INTERVAL&#125; = 60</code> ，要改变频率，可以更改这 2 个值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">URL=&quot;url&quot;  # 指定要访问的 URL</span><br><span class="line">COUNT=200  # 指定访问次数</span><br><span class="line">SLEEP_INTERVAL=0.3  # 休眠时间间隔（秒）</span><br><span class="line"></span><br><span class="line">for ((i=1; i&lt;=COUNT; i++))</span><br><span class="line">do</span><br><span class="line">    echo &quot;Request $i: $(date)&quot;</span><br><span class="line">    curl -s -o /dev/null -w %&#123;http_code&#125; $URL </span><br><span class="line">    sleep $SLEEP_INTERVAL</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>Shell 脚本</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 系统状态查看</title>
    <url>/202301171137/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 kernel 5.4.221</li>
</ul>
<h1 id="查看内存信息"><a href="#查看内存信息" class="headerlink" title="查看内存信息"></a>查看内存信息</h1><p>内存相关概念说明：</p>
<ul>
<li>VSS ,Virtual Set Size , VERT - 虚拟耗用内存（包含共享库占用的内存）</li>
<li>RSS , Resident Set Size , RES- 实际使用物理内存（包含共享库占用的内存）</li>
<li>PSS , Proportional Set Size - 实际使用的物理内存（比例分配共享库占用的内存）</li>
<li>USS , Unique Set Size - 进程独自占用的物理内存（不包含共享库占用的内存）</li>
</ul>
<h2 id="查看某个进程使用的内存量"><a href="#查看某个进程使用的内存量" class="headerlink" title="查看某个进程使用的内存量"></a>查看某个进程使用的内存量</h2><p>比如检查 docker 使用的内存量，首先通过 <code>ps</code> 命令查询到 <code>docker</code> 的 pid 信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -elf | grep docker</span></span><br><span class="line">4 S root      1243     1  4  80   0 - 1067527 futex_ Jan03 ?      15:14:45 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>
<p>例如此处的 <code>docker</code> 进程的 pid 为 1243</p>
<ul>
<li><p>使用 <code>top</code> 命令动态查看 <code>docker</code> 使用的内存信息</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">top -p 1243</span></span><br><span class="line">top - 11:47:40 up 14 days,  2:09,  3 users,  load average: 0.65, 1.42, 1.70</span><br><span class="line">Tasks:   1 total,   0 running,   1 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">Cpu(s):  1.0 us,  0.6 sy,  0.0 ni, 98.3 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem : 32068748 total,  2494500 free, 18536188 used, 11038060 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.  9586340 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                           </span><br><span class="line"> 1243 root      20   0 4270108   1.4g  53956 S   1.0  4.6 914:55.80 dockerd</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>ps aux</code> 命令查看内存使用量</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps aux | grep 1243</span></span><br><span class="line">root      1243  4.5  4.6 4270108 1486460 ?     Ssl  Jan03 914:57 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>

<p>  输出结果中</p>
<ul>
<li>第 3、4 列 (<code>4.5  4.6</code>) 分别表示 <code>cpu 使用率</code>、<code>内存使用率</code>。</li>
<li>第 5、6 列 (<code>4270108 1486460</code>) 分别表示 <code>虚拟内存使用量</code>、<code>物理内存使用量</code>，单位为 <code>k</code>。</li>
</ul>
</li>
<li><p>通过进程的 <code>status</code> 文件查看内存使用</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /proc/1243/status</span></span><br><span class="line">Name:	dockerd</span><br><span class="line">Umask:	0022</span><br><span class="line">State:	S (sleeping)</span><br><span class="line">Pid:	1243</span><br><span class="line">PPid:	1</span><br><span class="line">VmPeak:	 4270364 kB</span><br><span class="line">VmSize:	 4270108 kB</span><br><span class="line">VmLck:	       0 kB</span><br><span class="line">VmPin:	       0 kB</span><br><span class="line">VmHWM:	 1562204 kB</span><br><span class="line">VmRSS:	 1492340 kB</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>其中，<code>VmRSS</code> 为进程使用的物理内存</p>
</li>
<li><p>使用 <code>pmap</code> 命令查看进程使用的内存信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pmap -x 1243</span><br><span class="line">pmap -p 1243</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
</ul>
<h2 id="内存使用量统计"><a href="#内存使用量统计" class="headerlink" title="内存使用量统计"></a>内存使用量统计</h2><p>查看使用内存排名前十的进程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | sort -k4,4nr | head -n 10</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux sudo 使用介绍</title>
    <url>/202308311739/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<p><code>sudo</code> 可以配置适当的权限授予普通用户，使普通用户执行 <code>root</code> 用户才能执行的操作</p>
<p>配置 <code>sudo</code> 权限的主要配置文件为 <code>/etc/sudoers</code>。<code>/etc/sudoers</code>是一个只读文件，不能直接使用 <code>vim</code> 等编辑器来编辑，要修改此文件，需要以 <code>root</code> 用户身份使用 <code>visudo</code> 命令来修改。</p>
<p>主要配置文件内容如下</p>
<figure class="highlight shell"><figcaption><span>/etc/sudoers</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Allow root to run any commands anywhere</span></span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">wheel  ALL=(ALL)       NOPASSWD: ALL</span></span><br></pre></td></tr></table></figure>

<p>各列值含义说明：</p>
<ul>
<li><code>root</code> 第一列为用户名，如 <code>root</code>、<code>users</code>；<code>%wheel</code> 以 <code>%</code> 开头表示这是一个组，而不是用户</li>
<li><code>ALL=(ALL)</code> 第二列等号左边的 <code>ALL</code> 表示允许从任何主机登录当前的用户账户；等号右边的 <code>ALL</code> 表示第一列的用户可以切换成系统中任何一个其它用户（如：<code>su users</code>）；</li>
<li><code>ALL</code> 第三列表示第一列的用户能下达的命令，<code>ALL</code> 表示可以下达任何命令。<code>NOPASSWD: ALL</code> 意味着成员可以执行指定的命令而无需输入密码。</li>
</ul>
<p>当我们以普通用户身份（以 <code>test</code> 为例）登录，在使用 <code>sudo</code> 命令时报出如下信息：</p>
<p><code>test is not in the sudoers file.  This incident will be reported.</code></p>
<p>则说明该用户没有在 <code>/etc/sudoers</code> 文件中进行配置，因此无法使用 <code>sudo</code> 命令</p>
<p>AWS 的 Centos 镜像部署后的虚拟机默认使用 <code>centos</code> 用户登陆，登陆后即可执行 <code>sudo su -</code> 切换到 <code>root</code> 用户，此配置由 <code> /etc/sudoers.d/90-cloud-init-users</code> 配置，内容如下：</p>
<figure class="highlight shell"><figcaption><span>/etc/sudoers.d/90-cloud-init-users</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /etc/sudoers.d/90-cloud-init-users</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Created by cloud-init v. 19.4 on Mon, 31 Oct 2022 07:58:58 +0000</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User rules <span class="keyword">for</span> centos</span></span><br><span class="line">centos ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>
<p>若要禁止此行为，删除此文件即可。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用内核参数说明</title>
    <url>/202302131009/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><code>sysctl</code> 命令被用于在内核运行时动态地修改内核的运行参数，可用的内核参数在目录 <code>/proc/sys</code> 中。</p>
<p><code>sysctl</code> 命令对内核参数的修改仅在当前生效，重启系统后参数丢失。如果希望参数永久生效可以修改配置文件 <code>/etc/sysctl.conf</code>。</p>
<h1 id="常用内核参数说明"><a href="#常用内核参数说明" class="headerlink" title="常用内核参数说明"></a>常用内核参数说明</h1><table>
<thead>
<tr>
<th>内核参数</th>
<th>取值范围</th>
<th>含义</th>
<th>使用说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>kernel.hung_task_timeout_secs = 120</code></td>
<td>int</td>
<td>设置系统检测到进程阻塞(如 <a href="/202304181637/" title="&#96;D&#96; 状态">&#96;D&#96; 状态</a>)后，等待进程结束的时常。<br/>如果进程未在规定时间内结束，系统认为该进程无响应，则自动杀死以避免系统奔溃</td>
<td></td>
</tr>
</tbody></table>
<h2 id="mem"><a href="#mem" class="headerlink" title="mem"></a>mem</h2><table>
<thead>
<tr>
<th>内核参数</th>
<th>取值范围</th>
<th>含义</th>
<th>使用说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>vm.min_free_kbytes = 2097152</code></td>
<td>单位 <code>KB</code></td>
<td>设置系统最小剩余内存，以避免缓存不释放导致的死机</td>
<td></td>
</tr>
<tr>
<td><code>vm.oom-kill = 0</code></td>
<td>0,1<br/>默认值为 1，开启</td>
<td>是否启用 OOM-killer。<br/>特定情况下，可能不希望核心执行 OOM killer 的工作,关闭 OOM killer。 例如，排错时<br/><code>echo 0 &gt; /proc/sys/vm/oom-kill</code> 临时关闭 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[OOM](http://33f.net/linux/linux-Out-of-Memory-Killer.html)">[1]</span></a></sup></td>
<td></td>
</tr>
<tr>
<td><code>vm.overcommit_memory = 0</code></td>
<td>0,1,2</td>
<td>内存分配策略<br/><code>/proc/sys/vm/overcommit_memory</code></td>
<td><a href="#vm-overcommit-memory">vm.overcommit_memory 详细说明</a></td>
</tr>
<tr>
<td><code>vm.overcommit_ratio = 50</code></td>
<td>int  <br/>default &#x3D; 50</td>
<td><code>vm.overcommit_memory = 2</code> 时才生效，配置允许 <code>overcommit</code> 的百分比</td>
<td><a href="#vm-overcommit-memory">vm.overcommit_memory 详细说明</a></td>
</tr>
<tr>
<td><code>vm.panic_on_oom = 0</code></td>
<td>0,1<br/>默认为 0 ，开启</td>
<td>表示当内存耗尽时，内核会触发 OOM killer 杀掉最耗内存的进程</td>
<td></td>
</tr>
<tr>
<td><code>vm.oom_kill_allocating_task = 0</code></td>
<td>0,1<br/>默认为 0 ，不启用</td>
<td>OOM-Killer 时，是否选择当前正在申请内存的进程进行 kill</td>
<td></td>
</tr>
</tbody></table>
<span id="more"></span>
<h3 id="vm-overcommit-memory"><a href="#vm-overcommit-memory" class="headerlink" title="vm.overcommit_memory"></a>vm.overcommit_memory</h3><p>Linux 对大部分申请内存的请求都回复 <code>yes</code>，以便能跑更多更大的程序。因为申请内存后，并不会马上使用内存。这种技术叫做 <code>Overcommit</code>。当 Linux 发现内存不足时，会发生 <code>OOM killer(OOM=out-of-memory)</code>。它会选择杀死一些进程(用户态进程，不是内核线程)，以便释放内存。</p>
<p>当 <code>oom-killer</code> 发生时，Linux 会选择杀死哪些进程？选择进程的函数是 <code>oom_badness</code> 函数(在 <code>mm/oom_kill.c</code> 中)，该函数会计算每个进程的点数(0~1000)。点数越高，这个进程越有可能被杀死。每个进程的点数跟 <code>oom_score_adj</code> 有关，而且 <code>oom_score_adj</code> 可以被设置(-1000最低，1000最高)。</p>
<p><code>overcommit</code> 内存分配策略，可选值：0、1、2</p>
<ul>
<li><p><code>0</code> -  表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。</p>
</li>
<li><p><code>1</code> -  表示内核允许分配所有的物理内存，而不管当前的内存状态如何。</p>
</li>
<li><p><code>2</code> -  表示内核允许分配超过所有物理内存和交换空间总和的内存</p>
<p> 当系统分配的内存超过 <code>swap+N%*物理RAM</code> (N%由 <code>vm.overcommit_ratio</code> 决定)时，会拒绝 commit</p>
</li>
</ul>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://33f.net/linux/linux-Out-of-Memory-Killer.html">OOM</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux systemd-journald 服务说明</title>
    <url>/202211211437/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="systemd-journald-服务简介"><a href="#systemd-journald-服务简介" class="headerlink" title="systemd-journald 服务简介"></a>systemd-journald 服务简介</h1><p><code>systemd-journald</code> 服务是 <code>systemd init</code> 系统提供的收集系统日志的服务。它会根据从内核、用户进程、标准输入和系统服务错误收到的日志记录信息，维护结构化的索引日记，并以此方式来收集和储存日志记录数据。<code>systemd-journald</code> 服务默认处于启用状态。</p>
<p>默认情况下，<code>systemd-journald</code> 在 <code>/run/log/journal/</code> 中储存日志数据。由于 <code>/run/</code> 目录具有易失本性，因此，在重引导时会丢失日志数据。要永久保存日志数据，<code>/var/log/journal/</code> 目录必须存在且具有正确的所有权和权限，如此，<code>systemd-journald</code> 服务便可在其中储存其数据。</p>
<p>要在终端中查看日志信息，可以使用命令 <code>journalctl</code></p>
<h1 id="systemd-journald-服务常用配置"><a href="#systemd-journald-服务常用配置" class="headerlink" title="systemd-journald 服务常用配置"></a>systemd-journald 服务常用配置</h1><h2 id="持久化日志存储"><a href="#持久化日志存储" class="headerlink" title="持久化日志存储"></a>持久化日志存储</h2><p>默认情况下，日志位于 <code>/run/log/journal/</code>，重启后日志会丢失，为了持久化日志，可按照以下 2 种方法之一配置</p>
<ul>
<li><p>方法 1</p>
<ol>
<li>以 <code>root</code> 身份打开 <code>/etc/systemd/journald.conf</code> 进行编辑 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/journald.conf</span><br></pre></td></tr></table></figure></li>
<li>将包含 <code>Storage=</code> 的行取消注释，并将它更改为 <code>Storage=persistent</code><figure class="highlight shell"><figcaption><span>/etc/systemd/journald.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">[Journal]</span><br><span class="line">Storage=persistent</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Compress=<span class="built_in">yes</span></span></span><br><span class="line">SystemMaxUse=50M</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure></li>
<li>重启 <code>systemd-journald</code> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure>
之后日志会持久化存储于 <code>/var/log/journal</code>。这些数据最多会占用 <code>/var/log/journal</code> 所在文件系统空间的 10%，要更改此限制，可以修改选项 <code>SystemMaxUse=50M</code></li>
</ol>
</li>
</ul>
<span id="more"></span>

<ul>
<li>方法 2<ol>
<li>创建目录 <code>/var/log/journal</code></li>
<li>重启日志服务 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemd-journald.service</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h1 id="journalctl-命令查看日志"><a href="#journalctl-命令查看日志" class="headerlink" title="journalctl 命令查看日志"></a>journalctl 命令查看日志</h1><p>不带任何选项时，<code>journalctl</code> 输出所有的日志。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl</span> </span><br><span class="line">-- Logs begin at Thu 2022-11-17 12:09:10 CST, end at Mon 2022-11-21 14:53:36 CST. --</span><br><span class="line">Nov 17 12:09:10 localhost systemd-journal[156]: Runtime journal is using 8.0M (max allowed 380.5M, trying to leave 570</span><br><span class="line">Nov 17 12:09:10 localhost kernel: Linux version 5.4.217-1.el7.elrepo.x86_64 (mockbuild@Build64R7) (gcc version 9.3.1 2</span><br><span class="line">Nov 17 12:09:10 localhost kernel: Command line: BOOT_IMAGE=/boot/vmlinuz-5.4.217-1.el7.elrepo.x86_64 root=UUID=44a6a61</span><br><span class="line">Nov 17 12:09:10 localhost kernel: x86/fpu: Supporting XSAVE feature 0x001: &#x27;x87 floating point registers&#x27;</span><br><span class="line">Nov 17 12:09:10 localhost kernel: x86/fpu: Supporting XSAVE feature 0x002: &#x27;SSE registers&#x27;</span><br><span class="line">Nov 17 12:09:10 localhost kernel: x86/fpu: Supporting XSAVE feature 0x004: &#x27;AVX registers&#x27;</span><br><span class="line">Nov 17 12:09:10 localhost kernel: x86/fpu: Supporting XSAVE feature 0x008: &#x27;MPX bounds registers&#x27;</span><br><span class="line">Nov 17 12:09:10 localhost kernel: x86/fpu: Supporting XSAVE feature 0x010: &#x27;MPX CSR&#x27;</span><br><span class="line">Nov 17 12:09:10 localhost kernel: x86/fpu: Supporting XSAVE feature 0x020: &#x27;AVX-512 opmask&#x27;</span><br><span class="line">Nov 17 12:09:10 localhost kernel: x86/fpu: Supporting XSAVE feature 0x040: &#x27;AVX-512 Hi256&#x27;</span><br><span class="line">Nov 17 12:09:10 localhost kernel: x86/fpu: Supporting XSAVE feature 0x080: &#x27;AVX-512 ZMM_Hi256&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>日常使用中，需要配合各种匹配策略类匹配具体的日志。我们可以通过 <code>FIELD=VALUE</code> 的格式来匹配具体的日志记录，通过 <code>man 7 systemd.journal-fields</code> 可以查看所有可用的 <code>match</code> 字段</p>
<h2 id="日志匹配"><a href="#日志匹配" class="headerlink" title="日志匹配"></a>日志匹配</h2><p>通过字段 <code>_SYSTEMD_UNIT=cron.service</code> 可以查看服务 <code>cron.service</code> 的日志，等同于选项 <code>-u cron.service</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl -u crond</span><br><span class="line">journalctl _SYSTEMD_UNIT=crond.service</span><br></pre></td></tr></table></figure>

<p>可以同时添加多个字段进行匹配，它们之间是  <em><strong>与</strong></em> 的关系，就是同时符合多个条件的记录才会被匹配，比如添加 <code>PRIORITY</code> 字段的匹配条件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl _SYSTEMD_UNIT=crond.service PRIORITY=6</span><br></pre></td></tr></table></figure>
<p>注意各个字段的取值，比如为 <code>PRIORITY</code> 设置 <code>debug</code>、<code>info</code> 是不工作的，必须设置为对应的数字。可以通过 <code>-F</code> 选项来查看某个字段的可选值：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -F PRIORITY</span></span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对同一个字段使用多个字段匹配时，相当于 <strong>或</strong> 的关系，匹配的字段都会输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl _SYSTEMD_UNIT=cron.service _SYSTEMD_UNIT=prometheus.service</span><br></pre></td></tr></table></figure>
<p>此时 <code>cron.service</code> 和 <code>prometheus.service</code> 的日志都会输出。</p>
<p>使用 <code>+</code> 号可以对多个匹配字段执行 <strong>或</strong> 操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl _SYSTEMD_UNIT=cron.service + _PID=28097</span><br></pre></td></tr></table></figure>
<p>上面的命令会输出 <code>cron.service</code> 的日志和进程 28097 的日志。</p>
<p>下面是一个更复杂的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl _SYSTEMD_UNIT=avahi-daemon.service _PID=28097 + _SYSTEMD_UNIT=dbus.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>前面的两个条件是 <strong>与</strong> 的关系，最后一个条件与前面的两个条件是 <strong>或</strong> 的关系，也就是相当于用小括号把前面的两个条件括起来。</p>
<h2 id="查看指定时间段的日志"><a href="#查看指定时间段的日志" class="headerlink" title="查看指定时间段的日志"></a>查看指定时间段的日志</h2><p>利用 <code>--since</code> 与 <code>--until</code> 选项设定时间段，二者分别负责指定给定时间之后与之前的日志记录，时间格式可以使用多种，如：<code>YYYY-MM-DD HH:MM:SS</code>，格式中的某些组成部分未进行填写，系统会直接进行默认填充。例如，如果日期部分未填写，则会直接显示当前日期。如果时间部分未填写，则缺省使用 <code>00:00:00</code>(午夜)。秒字段亦可留空，默认值为 “00”</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl _SYSTEMD_UNIT=cron.service --since &quot;2018-03-27&quot; --until &quot;2018-03-27 01:00&quot;</span><br></pre></td></tr></table></figure>

<h2 id="查看系统内核日志"><a href="#查看系统内核日志" class="headerlink" title="查看系统内核日志"></a>查看系统内核日志</h2><p>使用选项 <code>-k</code> 可以查看系统内核相关日志。如果 <a href="#%E6%8C%81%E4%B9%85%E5%8C%96%E6%97%A5%E5%BF%97%E5%AD%98%E5%82%A8"><code>systemd-journald</code> 配置了日志持久化存储</a>，使用 <code>-b</code> 选项可以查看以前系统的内核日志，比如想要查看本次系统启动的前一次启动的内核日志，可以使用以下命令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">journalctl -k -b -1</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/sparkdev/p/8795141.html">linux journalctl 命令 </a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>tar 命令用法</title>
    <url>/202302231000/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>常用选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-c</code></td>
<td>打包文件</td>
<td></td>
</tr>
<tr>
<td><code>-x</code></td>
<td>解包</td>
<td></td>
</tr>
<tr>
<td><code>-t</code></td>
<td>检测打包文件中的内容</td>
<td><code>tar -tf test.tar</code></td>
</tr>
<tr>
<td><code>-f</code></td>
<td>目标文件名称，要打包或解包的文件名</td>
<td><code>tar -cf test.tar test</code> <br/><code>tar -xf test.tar</code></td>
</tr>
<tr>
<td><code>--exclude</code></td>
<td>打包时排除文件<br/>打包的目录使用相对路径，排除的文件只能接相对路径<br/>打包的目录使用绝对路径，排除的文件接相对路径或绝对路径</td>
<td><code>tar -cf test.tar test --exclude=runtime/*</code></td>
</tr>
</tbody></table>
<span id="more"></span>

<h1 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h1><h2 id="排除指定文件或目录"><a href="#排除指定文件或目录" class="headerlink" title="排除指定文件或目录"></a>排除指定文件或目录</h2><ul>
<li><strong>打包的目录使用相对路径，排除的文件只能接相对路径</strong></li>
<li><strong>打包的目录使用绝对路径，排除的文件接相对路径或绝对路径</strong></li>
</ul>
<p><strong>建议打包的目录和排除的文件使用的使用路径时，保持一致，都是用绝对路径，或都是用相对路径</strong> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[tar命令之--exclude参数 排除指定的文件或目录](https://cloud.tencent.com/developer/article/1360591)">[1]</span></a></sup></p>
<p>以下示例可正常执行排除操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cf test.tar test --exclude=runtime/*</span><br><span class="line">tar -cf test.tar /home/www/test/ --exclude=/home/www/test/runtime/*</span><br><span class="line">tar -cf test.tar /home/www/test/ --exclude=runtime/*</span><br></pre></td></tr></table></figure>
<p>以下示例无法排除掉指定的文件或者目录，<strong>所有打包目录下面的文件都会被打包</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cf test.tar test --exclude=/home/www/runtime/*</span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://cloud.tencent.com/developer/article/1360591">tar命令之--exclude参数 排除指定的文件或目录</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux tcp_wrappers 详解</title>
    <url>/202208171106/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos 7</li>
</ul>
<p><code>TCP_wrappers</code> 主要是工作在应用层的一个安全工具，使用访问控制列表（<code>ACL</code>）来防止主机名和主机地址的欺骗，用于过滤对 <code>类 Unix</code> 系统的网络访问。  </p>
<p>在一个安全的系统中，<code>Linux</code> 自身具有两层安全的防火墙。第一层是通过 IP&#x2F;Port 过滤机制的 <code>iptables</code> 来实现，第二层，也就是 <code>TCP_wrappers</code> 了，它主要是通过对系统中的某些服务进行开放与关闭，允许和禁止来有效保证系统安全运行。<br>可以简单理解为 <code>Linux</code> 系统访问控制的流程：  </p>
<blockquote>
<p>Client -&gt; iptables -&gt; TCP_wrappers -&gt; Server 的访问控制</p>
</blockquote>
<ul>
<li>iptables ：基于源 IP&#x2F;端口、目的 IP&#x2F;端口进行访问控制</li>
<li>TCP_wrappers：基于服务自身运行情况进行访问控制</li>
<li>Server：基于服务器本身行为包括文件、目录等权限进行访问控制</li>
</ul>
<span id="more"></span>

<h3 id="TCP-wrappers-的工作原理"><a href="#TCP-wrappers-的工作原理" class="headerlink" title="TCP_wrappers 的工作原理"></a>TCP_wrappers 的工作原理</h3><p><code>TCP_wrappers</code> 通过访问控制列表来提供保护机制，同时依赖 <code>/etc/hosts.allow</code> 和 <code>/etc/hosts.deny</code> 配置文件所设定的规则转交给相应的守护进程进行处理，同时记录请求过程。</p>
<p><code>TCP_wrappers</code> 在对报文做过滤操作的过程中，会链接到 <code>TCP_wrappers</code> 的函数库， <code>TCP_wrappers</code> 的主要功能是来自于 <code>libwrap.a</code> 这个静态库。</p>
<p>服务是否可以使用 <code>TCP_wrappers</code> 进行安全防护，取决于服务程序在编译时是否针对 <code>libwrap</code> 进行编译，如果库文件中有 <code>libwrap.so</code> 文件，就可以实现访问控制</p>
<p>可以通过下面的命令来确定要过滤的服务是否已经链接到了 <code>libwrap</code> 这个函数库中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ldd /usr/sbin/sshd | grep libwrap</span></span><br><span class="line">	libwrap.so.0 =&gt; /lib64/libwrap.so.0 (0x00007f283cdf1000)</span><br></pre></td></tr></table></figure>

<p>当客户端的 IP 通过了安全系统中第一层（iptables 防火墙），想要进一步访问服务器资源时，系统就会由 <code>TCP_wrappers</code> 来对请求进行分析处理，根据服务设定的规则来查看这个请求是否存在于 <code>/etc/hosts.allow</code> 列表中，如果存在就接受；如果不存在就继续对比 <code>/etc/hosts/deny</code> 列表，如果存在于 <code>hosts.deny</code> 中就拒绝 IP 请求，反之则接受请求。  </p>
<p><strong>判断规则的文件顺序必须严格按照先 <code>hosts.allow</code> 再 <code>hosts.deny</code> 的顺序进行判断。同时，<code>TCP_wrappers</code> 不会缓存 <code>hosts.allow</code> 和 <code>hosts.deny</code> 中的规则，所以针对 <code>hosts.allow</code> 和 <code>hosts.deny</code> 中规则的更改是立即生效的。</strong></p>
<h3 id="TCP-wrappers-的配置"><a href="#TCP-wrappers-的配置" class="headerlink" title="TCP_wrappers 的配置"></a>TCP_wrappers 的配置</h3><p><code>TCP_wrappers</code> 实现防火墙的功能主要是依靠 <code>/etc/hosts.allow</code> 和 <code>/etc/hosts.deny</code> 这两个文件的。<code>/etc/hosts.allow</code> 主要是定义允许访问，<code>/etc/hosts.deny</code> 用来定义拒绝访问。  </p>
<p>配置文件中的配置格式如下，格式说明可以参考 <code>man 5 hosts_options</code></p>
<figure class="highlight shell"><figcaption><span>/etc/hosts.allow</span></figcaption><table><tr><td class="code"><pre><span class="line">daemon_list[@host] : client_list : option : option ...</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li><code>daemon_list</code> ： 服务名，例如：sshd、vsftpd、sendmail 等，多个服务之间使用逗号分割。</li>
<li><code>client_list</code> : IP 或 IP 段或主机名。（列表中存在多个服务或者主机的时候用 , 逗号分隔开）</li>
<li><code>option</code> : 包括对匹配规则的 <code>action</code>， 最主要的有 <code>allow</code> 或 <code>deny</code>（这个可以忽略不写）</li>
</ul>
<p>例如，配置限制 <code>192.168.0.0/16</code> 网段不能 <code>ssh</code> 到本机的 <code>sshd</code> 服务</p>
<figure class="highlight shell"><figcaption><span>/etc/hosts.deny</span></figcaption><table><tr><td class="code"><pre><span class="line">sshd:192.168.</span><br></pre></td></tr></table></figure>
<p>如上配置后，指定网段不能 <code>ssh</code> 到本机  </p>
<p>配置后有问题，可以查看日志文件 <code>/var/log/secure</code>，如配置有问题，日志中会记录相关日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /var/log/secure</span></span><br><span class="line">sshd[7699]: error: /etc/hosts.allow, line 12: bad option name: &quot;%d&quot;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="配置文件中-daemon-list-常用格式"><a href="#配置文件中-daemon-list-常用格式" class="headerlink" title="配置文件中 daemon_list 常用格式"></a>配置文件中 daemon_list 常用格式</h4><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>ALL</code></td>
<td>完全匹配，适配所有接受 <code>TCP_wrappers</code> 防护的服务</td>
<td></td>
</tr>
<tr>
<td><code>service1</code><br/><code>service1,service2</code><br/><code>service1@172.16.1.2</code></td>
<td>指定服务<br/>多个服务使用逗号分割<br/>针对本机的某个 ip 做限制</td>
<td><code>sshd,vsftpd:192.168.1.:allow</code></td>
</tr>
</tbody></table>
<h4 id="配置文件中-client-list-常用格式"><a href="#配置文件中-client-list-常用格式" class="headerlink" title="配置文件中 client_list 常用格式"></a>配置文件中 client_list 常用格式</h4><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>ALL</code></td>
<td>完全匹配，适配所有客户端</td>
<td></td>
</tr>
<tr>
<td><code>.HOSTNAME</code></td>
<td>适配整个域</td>
<td><code>sshd:.csms.tech:allow</code>，允许 <a href="https://csms.tech/"><code>csms.tech</code></a> 内的所有主机访问</td>
</tr>
<tr>
<td><code>192.168.</code><br/><code>192.168.0.0/255.255.0.0</code><br/><code>192.168.0.0/16</code></td>
<td>适配整个网段，会匹配到 <code>192.168.0.0/16</code> 网段</td>
<td></td>
</tr>
<tr>
<td><code>172.16. EXCEPT 172.16.100.0/24</code></td>
<td>排除部分客户端</td>
<td><code>172.16. EXCEPT 172.16.100.0/24 EXCEPT 172.16.10.1</code></td>
</tr>
</tbody></table>
<h4 id="配置文件中-option-常用格式"><a href="#配置文件中-option-常用格式" class="headerlink" title="配置文件中 option 常用格式"></a>配置文件中 option 常用格式</h4><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>allow</code></td>
<td>主要用在 <code>/etc/hosts.deny</code> 定义 <code>允许</code> 规则</td>
<td></td>
</tr>
<tr>
<td><code>deny</code></td>
<td>主要用在 <code>/etc/hosts.allow</code> 定义 <code>拒绝</code> 规则</td>
<td></td>
</tr>
<tr>
<td><code>spawn</code></td>
<td>启动一个外部程序(<code>shell</code>)完成指定的命令</td>
<td></td>
</tr>
<tr>
<td><code>twist</code></td>
<td>替换客户端的请求成我们指定的命令，会导致服务拒绝，即使写在 <code>/etc/hosts.allow</code></td>
<td></td>
</tr>
</tbody></table>
<h5 id="spawn-示例"><a href="#spawn-示例" class="headerlink" title="spawn 示例"></a>spawn 示例</h5><p>在 <code>/etc/hosts.allow</code> 中添加以下内容</p>
<figure class="highlight shell"><figcaption><span>/etc/hosts.allow</span></figcaption><table><tr><td class="code"><pre><span class="line">sshd: ALL :\</span><br><span class="line">         spawn echo $(date +%%F) login attempt from %c to %s,%d &gt;&gt;/var/log/sshd.log</span><br></pre></td></tr></table></figure>
<p>以上配置，会在客户端 ssh 登录时记录日志  </p>
<p>其中，可以变量包含以下</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>%a</code></td>
<td>客户端的 IP 地址</td>
</tr>
<tr>
<td><code>%A</code></td>
<td>服务端的 IP 地址</td>
</tr>
<tr>
<td><code>%d	</code></td>
<td>守护进程的名字</td>
</tr>
<tr>
<td><code>%h</code></td>
<td>客户端的主机名</td>
</tr>
<tr>
<td><code>%H</code></td>
<td>服务端的主机名</td>
</tr>
<tr>
<td><code>%p</code></td>
<td>守护进程的 pid</td>
</tr>
<tr>
<td><code>%u</code></td>
<td>客户端的用户名</td>
</tr>
</tbody></table>
<h5 id="twist-示例"><a href="#twist-示例" class="headerlink" title="twist 示例"></a>twist 示例</h5><p>在 <code>/etc/hosts.allow</code> 中添加以下内容</p>
<figure class="highlight shell"><figcaption><span>/etc/hosts.allow</span></figcaption><table><tr><td class="code"><pre><span class="line">vsftpd: 172.16.0.1 :twist /bin/echo “connection prohibited”</span><br></pre></td></tr></table></figure>

<p>以上配置会将客户端的请求替换成 <code>twist</code> 指定的命令，因此客户端无法使用指定的服务，即使配置在 <code>/etc/hosts.allow</code> 中</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://m-zhoujie2.gitbooks.io/-linux-devops-2/content/chapter3-5.html">TCP wrappers</a></p>
<p><a href="https://www.cnblogs.com/duzhaoqi/p/7607801.html">TCP_Wrappers</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tcp_wrappers</tag>
      </tags>
  </entry>
  <entry>
    <title>tcpdump 抓包命令使用</title>
    <url>/202210241503/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="tcpdump-命令格式说明"><a href="#tcpdump-命令格式说明" class="headerlink" title="tcpdump 命令格式说明"></a>tcpdump 命令格式说明</h1><p><img src="https://i.csms.tech/img_67.png"></p>
<ul>
<li><code>option</code> - <a href="#%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9">可选选项（参数）</a> </li>
<li><code>proto</code> - 协议类过滤器：根据协议进行过滤，可识别的关键词有： <code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>ip</code>, <code>ip6</code>, <code>arp</code>, <code>rarp</code>,<code>ether</code>,<code>wlan</code>, <code>fddi</code>, <code>tr</code>, <code>decnet</code></li>
<li><code>direction</code> - 数据流向类过滤器：根据数据流向进行过滤，可识别的关键字有：<code>src</code>, <code>dst</code>，同时你可以使用逻辑运算符进行组合，比如 <code>src or dst</code></li>
<li><code>type</code> 类过滤器：可识别的关键词有：<code>host</code>, <code>net</code>, <code>port</code>, <code>portrange</code>，这些词后边需要再接参数。</li>
</ul>
<h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-i</code></td>
<td>目标网卡</td>
<td></td>
</tr>
<tr>
<td><code>-n</code> <br/><code>-nn</code></td>
<td>不对 IP&#x2F;DOMAIN 进行解析<br/> 不对 IP&#x2F;DOMAIN 及 PORT 进行解析</td>
<td></td>
</tr>
<tr>
<td><code>-w</code></td>
<td>将结果写入文件</td>
<td><code>tcpdump icmp -w icmp.pcap</code></td>
</tr>
</tbody></table>
<span id="more"></span>

<h1 id="tcpdump-命令输出内容说明"><a href="#tcpdump-命令输出内容说明" class="headerlink" title="tcpdump 命令输出内容说明"></a>tcpdump 命令输出内容说明</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">21:26:49.013621 IP 172.20.20.1.15605 &gt; 172.20.20.2.5920: Flags [P.], seq 49:97, ack 106048, win 4723, length 48</span><br></pre></td></tr></table></figure>
<ol>
<li>第一列：时分秒毫秒 21:26:49.013621</li>
<li>第二列：网络协议 IP</li>
<li>第三列：发送方的 ip 地址+端口号，其中 172.20.20.1 是 ip，而 15605 是端口号</li>
<li>第四列：箭头 &gt;， 表示数据流向</li>
<li>第五列：接收方的 ip 地址+端口号，其中 172.20.20.2 是 ip，而 5920 是端口号</li>
<li>第六列：冒号</li>
<li>第七列：数据包内容，包括 Flags 标识符，seq 号，ack 号，win 窗口，数据长度 length，其中 [P.] 表示 PUSH 标志位为 1，更多标识符见下面</li>
</ol>
<h2 id="Flags-标识符"><a href="#Flags-标识符" class="headerlink" title="Flags 标识符"></a>Flags 标识符</h2><p>使用 <code>tcpdump</code> 抓包后，会遇到的 TCP 报文 Flags，有以下几种：</p>
<ul>
<li>[S] : <code>SYN</code>（开始连接）</li>
<li>[P] : <code>PSH</code>（推送数据）</li>
<li>[F] : <code>FIN</code> （结束连接）</li>
<li>[R] : <code>RST</code>（重置连接）</li>
<li>[.] : 没有 Flag （意思是除上面四种类型外的其他情况，有可能是 <code>ACK</code> 也有可能是 <code>URG</code>）</li>
</ul>
<h1 id="常见用法示例"><a href="#常见用法示例" class="headerlink" title="常见用法示例"></a>常见用法示例</h1><h2 id="基于IP地址过滤：host"><a href="#基于IP地址过滤：host" class="headerlink" title="基于IP地址过滤：host"></a>基于IP地址过滤：host</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump host 192.168.10.100</span><br><span class="line"></span><br><span class="line">tcpdump -i eth0 src 192.168.10.100</span><br><span class="line"></span><br><span class="line">tcpdump -i eth0 dst 192.168.10.100</span><br></pre></td></tr></table></figure>

<h2 id="基于网段进行过滤：net"><a href="#基于网段进行过滤：net" class="headerlink" title="基于网段进行过滤：net"></a>基于网段进行过滤：net</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump net 192.168.10.0/24</span><br><span class="line"></span><br><span class="line">tcpdump src net 192.168</span><br><span class="line"></span><br><span class="line">tcpdump dst net 192.168</span><br></pre></td></tr></table></figure>

<h2 id="基于端口进行过滤：port"><a href="#基于端口进行过滤：port" class="headerlink" title="基于端口进行过滤：port"></a>基于端口进行过滤：port</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump src port 8088</span><br><span class="line"></span><br><span class="line">tcpdump dst port 8088</span><br><span class="line"></span><br><span class="line">tcpdump port 80 or port 8088</span><br><span class="line"></span><br><span class="line">tcpdump port 80 or 8088</span><br><span class="line"></span><br><span class="line">tcpdump portrange 8000-8080</span><br><span class="line"></span><br><span class="line">tcpdump src portrange 8000-8080</span><br><span class="line"></span><br><span class="line">tcpdump dst portrange 8000-8080</span><br></pre></td></tr></table></figure>

<h2 id="基于协议进行过滤：proto"><a href="#基于协议进行过滤：proto" class="headerlink" title="基于协议进行过滤：proto"></a>基于协议进行过滤：proto</h2><p>常见的网络协议有：tcp, udp, icmp, http, ip,ipv6 等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump icmp</span><br></pre></td></tr></table></figure>
<p>protocol 可选值：ip, ip6, arp, rarp, atalk, aarp, decnet, sca, lat, mopdl, moprc, iso, stp, ipx, or netbeui</p>
<h2 id="组合过滤规则"><a href="#组合过滤规则" class="headerlink" title="组合过滤规则"></a>组合过滤规则</h2><p>支持的运算符：</p>
<ul>
<li><code>and</code> - 所有的条件都需要满足，也可以表示为 <code>&amp;&amp;</code></li>
<li><code>or</code> - 只要有一个条件满足就可以，也可以表示为 <code>||</code></li>
<li><code>not</code> - 取反，也可以使用 <code>!</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump src 10.5.2.3 and dst port 3389</span><br><span class="line"></span><br><span class="line">tcpdump &#x27;src 10.0.2.4 and (dst port 3389 or 22)&#x27;</span><br></pre></td></tr></table></figure>


<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/wongbingming/p/13212306.html">tcpdump 抓包指南</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tcpdump</tag>
      </tags>
  </entry>
  <entry>
    <title>linux tun/tap 设备的工作原理</title>
    <url>/202304241633/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>从 Linux 文件系统的角度看，tun&#x2F;tap 设备是用户可以使用文件句柄操作的字符设备</p>
<p>从 Linux 网络虚拟化的角度看，tun&#x2F;tap 设备是虚拟网卡，一端连接内核网络协议栈，一端连接用户态的程序。</p>
<p>tun&#x2F;tap 设备主要的作用是可以将 TCP&#x2F;IP 协议栈处理好的数据包发送给任何一个使用 tun&#x2F;tap 设备驱动的程序，由用户态程序重新处理数据包后重新发送到 TCP&#x2F;IP 协议栈。</p>
<p>tun&#x2F;tap 设备的工作原理完全相同，主要区别在于：</p>
<ul>
<li>tun 设备的 &#x2F;dev&#x2F;tunX 文件收发的是 IP 包，因此只能工作在网络层（L3），无法与物理网卡做桥接，可以通过三层交换(如 ip_forward) 与物理网卡交互</li>
<li>tap 设备的 &#x2F;dev&#x2F;tapX 文件收发的是数据链路层报文，可以与物理网卡做桥接。</li>
</ul>
<h1 id="tun-x2F-tap-设备的工作原理"><a href="#tun-x2F-tap-设备的工作原理" class="headerlink" title="tun&#x2F;tap 设备的工作原理"></a>tun&#x2F;tap 设备的工作原理</h1><p><img src="https://i.csms.tech/img_135.png"></p>
<p>上图展示了物理设备上的数据是如何通过 Linux 内核网络协议栈发送到用户态程序的。</p>
<p>物理网卡的数据送达网络协议栈，进程通过 Socket 创建特殊套接字，从网络协议栈接收数据。</p>
<p>从网络协议栈的角度看，tun&#x2F;tap 设备这类虚拟网卡与物理网卡并无区别。对 tun&#x2F;tap 设备而言，他与物理网卡的不同表现在它的数据源不是物理链路，而是来自用户态。</p>
<p><img src="https://i.csms.tech/img_136.png"></p>
<p>普通的物理网卡通过网线收发数据包，而 tun&#x2F;tap 设备通过一个设备文件 （<code>/dev/tunX</code>，<code>/dev/tapX</code>）收发数据包，所有对这个文件的写操作会通过 tun&#x2F;tap 设备转换成一个网络数据包传送给内核的网络协议栈。当内核网络协议栈发送一个包给 tun&#x2F;tap 设备时，用户态的进程通过读取设备文件，就可以拿到报的内容。用户态的程序也可以通过写入这个设备文件向 tun&#x2F;tap 设备发送数据。</p>
<h1 id="VPN-原理简述"><a href="#VPN-原理简述" class="headerlink" title="VPN 原理简述"></a>VPN 原理简述</h1><p><img src="https://i.csms.tech/img_137.png"></p>
<p>如上图所示，整个数据包的流程包括</p>
<ol>
<li>App1 通过 Socket API 发送了一个数据包，假设这个数据包的目的 IP 地址是 192.168.1.3，和 tun0 位于同一个网段</li>
<li>数据包到达网络协议栈后，协议栈根据数据包的目的 IP 地址进行路由，匹配到数据包应该发送给 tun0 网卡，于是将数据包发送给 tun0 网卡</li>
<li>tun0 网卡收到数据包，将数据包写入 &#x2F;dev&#x2F;tun0，&#x2F;dev&#x2F;tun0 由 App2 打开，于是 App2 获得了数据包</li>
<li>App2 获得数据包后，通过报文封装，将原来的目的 IP 为 192.168.1.3 的报文封装在源 IP 为 eth0 的 IP，目的 IP 为 VPN 对端 IP 地址的报文中，构造出新的报文，并通过   Socket API 发送给内核网络协议栈</li>
<li>内核网络协议栈根据路由，发现数据包应该由 eth0 发送出去，于是将数据包发给 eth0，最终通过 eth0 将数据包发送到 VPN 的对端。</li>
</ol>
<p>综上所述，发到 192.168.1.0&#x2F;24 的数据包，首先通过监听在 tun0 设备上的 App2 （VPN 客户端）进行封包，再利用物理网卡 eth0 发送到远端网络的物理网卡上，从而实现 VPN。</p>
<p>VPN 网络报文真正从物理网卡出去需要经过 2 次内核网络协议栈，因此会有一定的性能损耗。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>network</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>logstash 使用详解</title>
    <url>/202307211022/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>logstash 8.8</li>
</ul>
<p>一个 Logstash 管道(pipeline) 至少要包含 2 个组件： <code>input</code> 及 <code>output</code>，可以包含可选组件 <code>filter</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Stash Your First Event](https://www.elastic.co/guide/en/logstash/8.8/first-event.html)">[2]</span></a></sup> </p>
<ul>
<li><code>input</code> - 负责从数据源获取数据</li>
<li><code>filter</code> - 负责按照配置修改数据</li>
<li><code>output</code> - 负责将数据写入目标存储，如 <a href="/202303301601/" title="Elasticsearch">Elasticsearch</a></li>
</ul>
<p><img src="https://i.csms.tech/img_203.png"></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://www.elastic.co/guide/en/logstash/8.8/installing-logstash.html">Logstash 官方安装文档</a></p>
<h2 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/yum.repos.d/logstash.repo</span></span><br><span class="line">[logstash-8.x]</span><br><span class="line">name=Elastic repository for 8.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/8.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install logstash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl <span class="built_in">enable</span> --now logstash</span></span><br></pre></td></tr></table></figure>

<p>运行 Logstash 后，可以使用最基本的 Logstash Pipeline 测试 Logstash 运行是否正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/share/logstash/bin/logstash -e &#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><code>-e</code> - 选项用来在 command line 中指定配置</li>
</ul>
</blockquote>
<p>运行之后在 shell 中输入内容，Logstash 会为数据添加元数据后输出到 <code>stdout</code>，表明 Logstash 运行正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hello world</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2023-07-21T02:52:50.191084777Z,</span><br><span class="line">          &quot;host&quot; =&gt; &#123;</span><br><span class="line">        &quot;hostname&quot; =&gt; &quot;worker1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;hello world&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">         &quot;event&quot; =&gt; &#123;</span><br><span class="line">        &quot;original&quot; =&gt; &quot;hello world&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>logstash</code> 服务默认端口 <code>5044</code></strong></p>
<span id="more"></span>

<h1 id="logstash-命令汇总"><a href="#logstash-命令汇总" class="headerlink" title="logstash 命令汇总"></a>logstash 命令汇总</h1><p><code>logstash</code> 命令是 Logstash 的 command line 命令，使用它可以管理 Logstash</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-e</code></td>
<td>用来在 command line 中指定配置</td>
<td><code>logstash -e &#39;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#39;</code></td>
</tr>
<tr>
<td><code>-f</code></td>
<td>指定配置文件</td>
<td></td>
</tr>
<tr>
<td><code>--config.test_and_exit, -t</code></td>
<td>测试配置文件并退出</td>
<td><a href="#Logstash-%E9%85%8D%E7%BD%AE">测试配置文件</a></td>
</tr>
<tr>
<td><code>--config.reload.automatic</code></td>
<td>自动加载配置文件<br/>配置文件启动后无需重启</td>
<td></td>
</tr>
</tbody></table>
<h2 id="logstash-plugin"><a href="#logstash-plugin" class="headerlink" title="logstash-plugin"></a>logstash-plugin</h2><h3 id="查看已安装的插件列表"><a href="#查看已安装的插件列表" class="headerlink" title="查看已安装的插件列表"></a>查看已安装的插件列表</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/usr/share/logstash/bin/logstash-plugin list</span></span><br><span class="line">Using bundled JDK: /usr/share/logstash/jdk</span><br><span class="line">logstash-codec-avro</span><br><span class="line">logstash-codec-cef</span><br><span class="line">logstash-codec-collectd</span><br><span class="line">logstash-codec-dots</span><br><span class="line">logstash-codec-edn</span><br><span class="line">logstash-codec-edn_lines</span><br><span class="line">logstash-codec-es_bulk</span><br><span class="line">logstash-codec-fluent</span><br><span class="line">logstash-codec-graphite</span><br><span class="line">logstash-codec-json</span><br><span class="line">logstash-codec-json_lines</span><br><span class="line">logstash-codec-line</span><br><span class="line">logstash-codec-msgpack</span><br><span class="line">logstash-codec-multiline</span><br><span class="line">logstash-codec-netflow</span><br><span class="line">logstash-codec-plain</span><br><span class="line">logstash-codec-rubydebug</span><br><span class="line">logstash-filter-aggregate</span><br><span class="line">logstash-filter-anonymize</span><br><span class="line">logstash-filter-cidr</span><br><span class="line">logstash-filter-clone</span><br><span class="line">logstash-filter-csv</span><br><span class="line">logstash-filter-date</span><br><span class="line">logstash-filter-de_dot</span><br><span class="line">logstash-filter-dissect</span><br><span class="line">logstash-filter-dns</span><br><span class="line">logstash-filter-drop</span><br><span class="line">logstash-filter-elasticsearch</span><br><span class="line">logstash-filter-fingerprint</span><br><span class="line">logstash-filter-geoip</span><br><span class="line">logstash-filter-grok</span><br></pre></td></tr></table></figure>

<h1 id="Logstash-配置"><a href="#Logstash-配置" class="headerlink" title="Logstash 配置"></a>Logstash 配置</h1><p>Logstash 主要有以下几种类型的配置文件</p>
<ul>
<li><strong>Logstash 服务配置文件(<code>/etc/logstash/logstash.yml</code>)，控制 Logstash 启动和运行的配置</strong></li>
<li><strong>JVM 配置文件(<code>/etc/logstash/jvm.options</code>)</strong></li>
<li><strong>Pipeline 配置文件(<code>/etc/logstash/pipelines.yml</code>)，定义了 Logstash 的 Pipeline</strong></li>
<li><code>log4j2</code> **配置文件(<code>/etc/logstash/log4j2.properties</code>)**，假如要修改 Logstash 程序的日志级别，可以修改此配置文件</li>
</ul>
<h2 id="Logstash-服务配置文件"><a href="#Logstash-服务配置文件" class="headerlink" title="Logstash 服务配置文件"></a>Logstash 服务配置文件</h2><p>Logstash 服务配置文件默认为 <code>/etc/logstash/logstash.yml</code>，主要为配置 Logstash 程序运行时的配置信息。配置文件中的大多数配置都具有 <code>command-line flags</code> ，并且 <code>command-line flags</code> 会覆盖 <code>logstash.yml</code> 中的配置。 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Logstash Setting Configuretion](https://www.elastic.co/guide/en/logstash/8.8/logstash-settings-file.html)">[4]</span></a></sup></p>
<p><a href="https://www.elastic.co/guide/en/logstash/8.8/logstash-settings-file.html"><code>logstash.yml</code> 配置文件列表</a></p>
<h3 id="pipeline-ordered"><a href="#pipeline-ordered" class="headerlink" title="pipeline.ordered"></a>pipeline.ordered</h3><p>在 Logstash 的设计中，也是默认配置，Logstash 不保证 <code>event</code> 被顺序处理，<strong>在批量处理中，event 的顺序可能因为 (filter) 处理速度关系而被打乱</strong>。假如 event 的顺序至关重要，就需要使用 <code>pipeline.ordered =&gt; true</code> 选项来确保 event 被按序处理。</p>
<p><strong>如果 <code>pipeline.workers</code> 被配置为 <code>1</code>，<code>pipeline.ordered</code> 会自动被配置为 <code>true</code></strong></p>
<h2 id="Pipelines-配置文件说明"><a href="#Pipelines-配置文件说明" class="headerlink" title="Pipelines 配置文件说明"></a>Pipelines 配置文件说明</h2><p>默认的 Pipelines 配置文件为 <code>/etc/logstash/pipelines.yml</code>，其中 include 配置目录 <code>/etc/logstash/conf.d/*.conf</code></p>
<p>Logstash 的 Pipeline 最简单的配置示例如下</p>
<figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sample Logstash configuration <span class="keyword">for</span> creating a simple</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span></span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;http://localhost:9200&quot;]</span><br><span class="line">    index =&gt; &quot;%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    #user =&gt; &quot;elastic&quot;</span><br><span class="line">    #password =&gt; &quot;changeme&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>要测试配置文件是否有问题，可以使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/usr/share/logstash/bin/logstash -f /etc/logstash/logstash.yml --config.test_and_exit</span></span><br><span class="line">[LogStash::Runner] runner - Using config.test_and_exit mode. Config Validation Result: OK. Exiting Logstash</span><br></pre></td></tr></table></figure>

<p>如果配置文件异常，测试配置文件会显示配置文件错误的位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[LogStash::Runner] runner - The given configuration is invalid. Reason: Expected one of [ \t\r\n], &quot;#&quot;, &quot;input&quot;, &quot;filter&quot;, &quot;output&quot; at line 9, column 1 (byte 68) after </span><br><span class="line">[LogStash::Runner] Logstash - Logstash stopped processing because of an error: (SystemExit) exit</span><br><span class="line">org.jruby.exceptions.SystemExit: (SystemExit) exit</span><br><span class="line">	at org.jruby.RubyKernel.exit(org/jruby/RubyKernel.java:790) ~[jruby.jar:?]</span><br><span class="line">	at org.jruby.RubyKernel.exit(org/jruby/RubyKernel.java:753) ~[jruby.jar:?]</span><br><span class="line">	at usr.share.logstash.lib.bootstrap.environment.&lt;main&gt;(/usr/share/logstash/lib/bootstrap/environment.rb:91) ~[?:?]</span><br></pre></td></tr></table></figure>

<h1 id="Logstash-Plugins"><a href="#Logstash-Plugins" class="headerlink" title="Logstash Plugins"></a>Logstash Plugins</h1><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p><em><strong><code>input</code> 和 <code>output</code> 插件是 Pipeline 中必须存在的插件</strong></em></p>
<h3 id="stdin"><a href="#stdin" class="headerlink" title="stdin"></a>stdin</h3><p>从 <code>stdin</code> 中读取输入数据</p>
<figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  stdin &#123; &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>从指定文件中读取数据</p>
<figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/tmp/access_log&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="beat"><a href="#beat" class="headerlink" title="beat"></a>beat</h3><h4 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h4><p>读取从 <code>filebeat</code> 中输出的数据，参考以下配置，Logstash 会监听 <code>5044</code> 端口，Filebeat 将数据发送到 Logstash 服务器的 <code>5044</code> 端口，Logstash 会使用 <code>input</code> 插件读取数据（<code>event</code>）</p>
<figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><p><em><strong><code>input</code> 和 <code>output</code> 插件是 Pipeline 中必须存在的插件</strong></em></p>
<h3 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h3><p>使用 <code>stdout</code> 可以将数据输出到 <code>stdout</code></p>
<figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="file-1"><a href="#file-1" class="headerlink" title="file"></a>file</h3><p>使用 <code>file</code> 可以将数据输出到指定的文件中</p>
<figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/var/log/%&#123;type&#125;.%&#123;&#123;yyyy.MM.dd.HH&#125;&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    action =&gt; &quot;%&#123;[@metadata][action]&#125;&quot;</span><br><span class="line">    document_id =&gt; &quot;%&#123;[@metadata][_id]&#125;&quot;</span><br><span class="line">    hosts =&gt; [&quot;example.com&quot;]</span><br><span class="line">    index =&gt; &quot;index_name&quot;</span><br><span class="line">    protocol =&gt; &quot;http&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Grok"><a href="#Grok" class="headerlink" title="Grok"></a>Grok</h2><p>Grok 插件是 Logstash 为数不多几个默认就启用了的插件。<strong>Grok 插件主要用来将非格式化的数据分析成格式化的可查询的数据</strong></p>
<figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;http://localhost:9200&quot;]</span><br><span class="line">    index =&gt; &quot;%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    #user =&gt; &quot;elastic&quot;</span><br><span class="line">    #password =&gt; &quot;changeme&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Grok 通过（预先定义或者临时定义的）正则表达式来匹配任意的文本数据，其使用格式为 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Grok](https://www.elastic.co/guide/en/logstash/8.8/plugins-filters-grok.html)">[5]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">&#123;SYNTAX:SEMANTIC&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>SYNTAX</code> 是要匹配文本的<em><strong>正则表达式的名称</strong></em></li>
<li><code>SEMANTIC</code> 是要<em><strong>给予正则匹配到的文本内容的标识&#x2F;ID</strong></em></li>
</ul>
<p>例如有以下日志内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">55.3.244.1 GET /index.html 15824 0.043</span><br></pre></td></tr></table></figure>

<p>可以使用以下 Grok 语法，为各个字段添加字段名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">      file &#123;</span><br><span class="line">        path =&gt; &quot;/var/log/http.log&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">filter &#123;</span><br><span class="line">      grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;IP:client&#125; %&#123;WORD:method&#125; %&#123;URIPATHPARAM:request&#125; %&#123;NUMBER:bytes&#125; %&#123;NUMBER:duration&#125;&quot; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>%&#123;IP:client&#125;</code> 会正则匹配 IP，并将匹配到的 IP 存储到字段 <code>client</code> 中</li>
<li><code>%&#123;WORD:method&#125;</code> 会正则匹配 <code>word</code></li>
<li><code>%&#123;URIPATHPARAM:request&#125;</code> 会正则匹配 URI</li>
<li><code>%&#123;NUMBER:bytes&#125;</code> 会正则匹配 <em>数值</em>，包括 <code>int</code> 和 <code>float</code> 类型的数据</li>
</ul>
<p><em><strong>默认情况下，正则匹配到的字段，其类型都是 <code>strings</code>，比如 <code>%&#123;NUMBER:bytes&#125;</code>，<code>bytes</code> 字段的值默认是 <code>strings</code>，如果想要对其进行类型转换，可以使用格式：<code>%&#123;NUMBER:bytes:int&#125;</code> 或者 <code>%&#123;NUMBER:bytes:float&#125;</code>，目前仅支持转换为 <code>int</code> 或者 <code>float</code> 类型</strong></em> <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Grok](https://www.elastic.co/guide/en/logstash/8.8/plugins-filters-grok.html)">[5]</span></a></sup></p>
<p>Grok 提供了很多 <a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/main/patterns">常用的以命名的正则表达式</a>，可以在 Grok 中直接使用。<strong>其中最基础的正则表达式在 <code>grok-patterns</code> 中</strong><br><img src="https://i.csms.tech/img_204.png"></p>
<h3 id="Grok-常用命名正则表达式"><a href="#Grok-常用命名正则表达式" class="headerlink" title="Grok 常用命名正则表达式"></a>Grok 常用命名正则表达式</h3><p><a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/main/patterns">Grok 常用的以命名的正则表达式参考</a></p>
<ul>
<li><code>%&#123;IP:client_ip&#125;</code></li>
<li><code>%&#123;HTTPDATE:timestamp&#125;</code> - 匹配时间格式 <code>04/Jan/2015:05:30:37 +0000</code>，如 <code>[04/Jan/2015:05:30:37 +0000]</code> 使用 <code>\[%&#123;HTTPDATE:timestamp&#125;\]</code> 进行匹配</li>
<li><code>%&#123;WORD:http_method&#125;</code> - 匹配单词（两边以空格分割）</li>
<li><code>%&#123;URIPATHPARAM:request&#125;</code> - 匹配 URI 路径和参数（不包括 schema 和 domain），如 <code>/style2.css</code></li>
<li><code>%&#123;NUMBER:http_version&#125;</code> - 匹配数值，如 HTTP 版本(<code>HTTP/1.1</code>)可以使用 <code>HTTP/%&#123;NUMBER:http_version&#125;</code> 来匹配</li>
<li><code>%&#123;URI:referrer&#125;</code> - 匹配 URI （包括 schema 和 domain），如 <code>http://www.semicomplete.com/projects/xdotool/</code></li>
<li><code>%&#123;DATA:message&#125;</code> - 匹配其他所有数据</li>
</ul>
<p>在使用正则表达式之前，建议使用 <a href="https://grokdebugger.com/">Grok 调试器</a> 调试，确保表达式没问题。如下图表示正则表达式存在问题。<br><img src="https://i.csms.tech/img_205.png"></p>
<h3 id="多字段匹配"><a href="#多字段匹配" class="headerlink" title="多字段匹配"></a>多字段匹配</h3><p>如果需要在 Grok 中执行多个字段的匹配，可以参考以下格式，在 <code>match</code> 中使用多个条目</p>
<figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      &quot;speed&quot; =&gt; &quot;Speed: %&#123;NUMBER:speed&#125;&quot;</span><br><span class="line">      &quot;duration&quot; =&gt; &quot;Duration: %&#123;NUMBER:duration&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em><strong>如果一个正则表达式中使用的字段依赖于之前的正则表达式，必须将其放置在 2 个不同的 Grok 块中</strong></em></p>
<figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      &quot;message&quot; =&gt; &quot;Hi, the rest of the message is: %&#123;GREEDYDATA:rest&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      &quot;rest&quot; =&gt; &quot;a number %&#123;NUMBER:number&#125;, and a word %&#123;WORD:word&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="overwrite-选项"><a href="#overwrite-选项" class="headerlink" title="overwrite 选项"></a>overwrite 选项</h3><p>数据进入 Grok 格式化后，原始数据默认会保留，此时保留了原始数据和格式化后的数据，如果不想保留原始数据，可以使用 <code>overwrite</code> 选项覆盖原始数据</p>
<figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;SYSLOGBASE&#125; %&#123;DATA:message&#125;&quot; &#125;</span><br><span class="line">    overwrite =&gt; [ &quot;message&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="geoip"><a href="#geoip" class="headerlink" title="geoip"></a>geoip</h2><p>geoip 插件可以将 IP 转换为地理位置并添加到数据中。geo 插件默认启用</p>
<p>geoip 需要指定包含要转换成地理位置信息的 IP 字段。Logstash 的 Filter 是顺序执行的，后一个 filter 可以使用前一个 filter 格式化后的字段，反之不行。</p>
<figure class="highlight shell"><figcaption><span>/etc/logstash/conf.d/example.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">        port =&gt; &quot;5044&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &#x27;%&#123;IP:client_ip&#125; - - \[%&#123;HTTPDATE:timestamp&#125;\] &quot;%&#123;WORD:http_method&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:http_version&#125;&quot; %&#123;NUMBER:http_status&#125; %&#123;NUMBER:bytes_sent&#125; &quot;(%&#123;URI:referrer&#125;|-)&quot; &quot;%&#123;DATA:user_agent&#125;&quot;&#x27;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    geoip &#123;</span><br><span class="line">        source =&gt; &quot;client_ip&quot;      # 指定要 IP 所在的字段，必须存在 </span><br><span class="line">        target =&gt; &quot;geo&quot;            # 解析后的地址存放的字段</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="No-configuration-found-in-the-configured-sources"><a href="#No-configuration-found-in-the-configured-sources" class="headerlink" title="No configuration found in the configured sources"></a>No configuration found in the configured sources</h2><p><code>logstash</code> 服务启动后端口(默认 <code>5044</code>)未监听，检查服务日志(默认<code>/var/log/logstash/logstash-plain.log</code>)，日志中报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ERROR][logstash.config.sourceloader] No configuration found in the configured sources.</span><br><span class="line">[INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600, :ssl_enabled=&gt;false&#125;</span><br><span class="line">[INFO ][logstash.runner          ] Logstash shut down.</span><br><span class="line">[FATAL][org.logstash.Logstash    ] Logstash stopped processing because of an error: (SystemExit) exit</span><br><span class="line">org.jruby.exceptions.SystemExit: (SystemExit) exit</span><br><span class="line">	at org.jruby.RubyKernel.exit(org/jruby/RubyKernel.java:790) ~[jruby.jar:?]</span><br><span class="line">	at org.jruby.RubyKernel.exit(org/jruby/RubyKernel.java:753) ~[jruby.jar:?]</span><br><span class="line">	at usr.share.logstash.lib.bootstrap.environment.&lt;main&gt;(/usr/share/logstash/lib/bootstrap/environment.rb:91) ~[?:?]</span><br></pre></td></tr></table></figure>
<p>其中关键报错信息 <code>No configuration found in the configured sources</code>，表示 <em><strong>没有找到任何一个可用的 pipline 配置</strong></em></p>
<p><code>logstash</code> 服务默认的配置文件为 <code>/etc/logstash/logstash.yml</code>，Pipeline 配置文件入口为 <code>/etc/logstash/pipelines.yml</code>。检查 Pipeline 配置文件可知，默认情况下，其加载符合 <code>/etc/logstash/conf.d/*.conf</code> 的配置文件，检查 <code>/etc/logstash/conf.d/</code>，没有 <code>.conf</code> 的 Pipeline 配置文件 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> pipelines.yml</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This file is <span class="built_in">where</span> you define your pipelines. You can define multiple.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For more information on multiple pipelines, see the documentation:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  https://www.elastic.co/guide/en/logstash/current/multiple-pipelines.html</span></span><br><span class="line"></span><br><span class="line">- pipeline.id: main</span><br><span class="line">  path.config: &quot;/etc/logstash/conf.d/*.conf&quot;</span><br></pre></td></tr></table></figure>
<p>创建 Pipeline 配置文件 <code>/etc/logstash/conf.d/test.conf</code>，重启 <code>logstash</code> 服务后，服务及端口都正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/logstash/conf.d/test.conf</span></span><br><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">        port =&gt; &quot;5044&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">filter &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [ &quot;172.31.21.3:9200&quot; ]</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl restart logstash</span></span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.elastic.co/guide/en/logstash/8.8/installing-logstash.html">Logstash 官方文档</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/logstash/8.8/installing-logstash.html">Installing Logstash</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/logstash/8.8/first-event.html">Stash Your First Event</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/logstash/8.8/config-setting-files.html">Logstash Configuration Files</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/logstash/8.8/logstash-settings-file.html">Logstash Setting Configuretion</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.elastic.co/guide/en/logstash/8.8/plugins-filters-grok.html">Grok</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>LVM 逻辑卷管理</title>
    <url>/202208021256/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>LVM是 Logical Volume Manager(逻辑卷管理)的简写,LVM将一个或多个硬盘或分区在逻辑上集合，相当于一个大硬盘来使用，当硬盘的空间不够使用的时候，可以继续将其它的硬盘或分区加入其中，这样可以实现磁盘空间的动态管理，相对于普通的磁盘分区有很大的灵活性。与传统的磁盘与分区相比，LVM为计算机提供了更高层次的磁盘存储。它使系统管理员可以更方便的为应用与用户分配存储空间。  </p>
<blockquote>
<p><strong><code>/boot</code> 分区不可以在逻辑卷组上,否则bootloader会无法读取.</strong></p>
</blockquote>
<span id="more"></span>

<h3 id="LVM-原理简介"><a href="#LVM-原理简介" class="headerlink" title="LVM 原理简介"></a>LVM 原理简介</h3><p>单一硬盘系统的 LVM 基本原理如下图所示<br><img src="https://i.csms.tech/img_23.png"></p>
<p>多硬盘系统的 LVM 基本原理如下图所示<br><img src="https://i.csms.tech/img_24.png"><br><img src="https://i.csms.tech/img_25.png"></p>
<h4 id="基本概念说明"><a href="#基本概念说明" class="headerlink" title="基本概念说明"></a>基本概念说明</h4><h5 id="PV（Physical-Volume）-物理卷"><a href="#PV（Physical-Volume）-物理卷" class="headerlink" title="PV（Physical Volume）- 物理卷"></a>PV（Physical Volume）- 物理卷</h5><p>物理卷在逻辑卷管理中处于最底层，它可以是实际物理硬盘上的分区，也可以是整个物理硬盘，也可以是raid设备,是LVM的基本存储逻辑块，但和基本的物理存储介质(如分区、磁盘等)比较，却包含有与LVM相关的管理参数。  </p>
<p>PE（physical extent）：每一个物理卷被划分为称为PE(Physical Extents)的基本单元，具有唯一编号的PE是可以被LVM寻址的最小单元。PE的大小是在VG过程中配置的，默认为4MB。</p>
<h5 id="VG（Volumne-Group）-卷组"><a href="#VG（Volumne-Group）-卷组" class="headerlink" title="VG（Volumne Group）- 卷组"></a>VG（Volumne Group）- 卷组</h5><p>卷组建立在物理卷之上，一个卷组中至少要包括一个物理卷，在卷组建立之后可动态添加物理卷到卷组中。一个逻辑卷管理系统工程中可以只有一个卷组，也可以拥有多个卷组。  </p>
<h5 id="LV（Logical-Volume）-逻辑卷"><a href="#LV（Logical-Volume）-逻辑卷" class="headerlink" title="LV（Logical Volume）- 逻辑卷"></a>LV（Logical Volume）- 逻辑卷</h5><p>逻辑卷建立在卷组之上，卷组中的未分配空间可以用于建立新的逻辑卷，逻辑卷建立后可以动态地扩展和缩小空间。系统中的多个逻辑卷可以属于同一个卷组，也可以属于不同的多个卷组。</p>
<h3 id="LVM-基本操作"><a href="#LVM-基本操作" class="headerlink" title="LVM 基本操作"></a>LVM 基本操作</h3><h4 id="创建-PV-常用操作命令"><a href="#创建-PV-常用操作命令" class="headerlink" title="创建 PV 常用操作命令"></a>创建 PV 常用操作命令</h4><p>将空闲分区 <code>/dev/vdb1</code> 配置为可用的 PV（Physical Volume）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/vdb1</span><br></pre></td></tr></table></figure>
<p>将空闲磁盘 <code>/dev/vdd</code> 配置为可用的 PV（Physical Volume）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/vdd </span><br></pre></td></tr></table></figure>
<p>查看 PV 的信息，常用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pvs</span><br><span class="line">pvscan</span><br><span class="line">pvdisplay</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_26.png"><br><img src="https://i.csms.tech/img_27.png"></p>
<h4 id="创建-VG-常用操作命令"><a href="#创建-VG-常用操作命令" class="headerlink" title="创建 VG 常用操作命令"></a>创建 VG 常用操作命令</h4><p>使用已有的PV ，创建卷组（Volumne Group）名为 <code>VG1</code> 的 VG</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vgcreate VG1 /dev/vdb1 /dev/vdd</span><br></pre></td></tr></table></figure>

<p>查看 VG 的信息，常用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vgs</span><br><span class="line">vgscan</span><br><span class="line">vgdisplay</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_28.png"><br><img src="https://i.csms.tech/img_29.png"></p>
<h4 id="创建-LV-常用操作命令"><a href="#创建-LV-常用操作命令" class="headerlink" title="创建 LV 常用操作命令"></a>创建 LV 常用操作命令</h4><p>使用已有的卷组 VG1 ，创建逻辑卷（Logical Volume）名为 <code>data</code> 的 LV，并配置 <code>data</code> 逻辑卷的大小为1000m</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lvcreate -L 1000M -n data VG1</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>-L|--size</code>  指定逻辑卷的大小</p>
</blockquote>
<p>查看 LV 的信息，常用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lvs</span><br><span class="line">lvscan</span><br><span class="line">lvdisplay</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_30.png"><br><img src="https://i.csms.tech/img_31.png"></p>
<blockquote>
<p><strong>逻辑卷无法直接使用，必须格式化挂载之后才能使用</strong><br>逻辑卷的引用需要逻辑卷的设备文件, 逻辑卷的设备文件有两种书写形式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/dev/vg_name/lv_name</span><br><span class="line">/dev/mapper/vg_name-lv_name</span><br></pre></td></tr></table></figure>
<p>格式化 LV 并挂载，正确的挂载后，可正常使用新加的磁盘空间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.xfs /dev/VG1/data</span><br><span class="line">mount /dev/VG1/data /data</span><br></pre></td></tr></table></figure>
<p>为了防止系统重启后挂载失效，需要将挂载信息写入配置文件 <code>/etc/fstab</code></p>
<figure class="highlight shell"><figcaption><span>/etc/fstab</span></figcaption><table><tr><td class="code"><pre><span class="line">/dev/VG1/data /data xfs defaults 0 0</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="LVM-扩容操作"><a href="#LVM-扩容操作" class="headerlink" title="LVM 扩容操作"></a>LVM 扩容操作</h4><h5 id="VG-扩容"><a href="#VG-扩容" class="headerlink" title="VG 扩容"></a>VG 扩容</h5><p>使用已有的 PV ，或者 <a href="#%E5%88%9B%E5%BB%BA-PV-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4">新建 PV</a> 来扩容已有的 VG, 假设用来扩容的 PV 为 <code>/dev/vde</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vgextend VG1 /dev/vde</span><br></pre></td></tr></table></figure>

<h5 id="LV-扩容"><a href="#LV-扩容" class="headerlink" title="LV 扩容"></a>LV 扩容</h5><p>使用 VG 的空闲空间扩容 LV<br>指定要扩容的大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lvextend -L +100m /dev/VG1/data</span><br></pre></td></tr></table></figure>
<p>或者直接通过指定 PV 扩容 LV， 整个 PV 的空间被扩容到 LV， 前提是 PV 已被扩容到了 VG</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lvextend /dev/VG1/data /dev/vde</span><br></pre></td></tr></table></figure>
<p>其他扩容方式可查看命令帮助 <code>lvextend -h</code>  </p>
<p>扩容 LV 后需要重新调整分区文件系统大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">resize2fs /dev/VG1/data</span><br></pre></td></tr></table></figure>
<p><code>xfs</code> 文件系统需要使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xfs_growfs /dev/VG1/data</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>LVM</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 配置</title>
    <url>/202303311747/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 </li>
<li>mongodb 4.0.26</li>
</ul>
<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p><a href="https://www.mongodb.com/try/download/community">官方社区版下载页面</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.0/x86_64/RPMS/mongodb-org-shell-4.0.28-1.el7.x86_64.rpm</span><br><span class="line">wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.0/x86_64/RPMS/mongodb-org-mongos-4.0.28-1.el7.x86_64.rpm</span><br><span class="line">wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.0/x86_64/RPMS/mongodb-org-server-4.0.28-1.el7.x86_64.rpm</span><br><span class="line">wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.0/x86_64/RPMS/mongodb-org-tools-4.0.28-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum localinstall mongodb-org-mongos-4.0.28-1.el7.x86_64.rpm mongodb-org-tools-4.0.28-1.el7.x86_64.rpm mongodb-org-server-4.0.28-1.el7.x86_64.rpm mongodb-org-shell-4.0.28-1.el7.x86_64.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 常见错误</title>
    <url>/22072111/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息说明"><a href="#环境信息说明" class="headerlink" title="环境信息说明"></a>环境信息说明</h1><ul>
<li>mysql 5.7</li>
<li>Centos 7</li>
</ul>
<span id="more"></span>

<h1 id="错误集锦"><a href="#错误集锦" class="headerlink" title="错误集锦"></a>错误集锦</h1><h2 id="MySQL-主从不同步，尝试跳过执行错误的事务"><a href="#MySQL-主从不同步，尝试跳过执行错误的事务" class="headerlink" title="MySQL 主从不同步，尝试跳过执行错误的事务"></a>MySQL 主从不同步，尝试跳过执行错误的事务</h2><p>执行以下命令，可跳过对应的 slave 事务</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>
<p>可以通过分析主库日志中的事务，来确定 <code>SQL_SLAVE_SKIP_COUNTER</code> 的合适值。<br>具体步骤如下：<br>在 slave 库中执行 <code>show slave status\G</code> ，确认以下两个参数:</p>
<ul>
<li><code>Relay_Master_Log_File</code></li>
<li><code>Exec_Master_Log_Pos</code></li>
</ul>
<p>或者以下2个参数：</p>
<ul>
<li><code>Master_Log_File</code></li>
<li><code>Read_Master_Log_Pos</code><br><img src="https://i.csms.tech/img_11.png"><blockquote>
<p>通过以上 2 个值，可以知道当前 slave 执行到了 master 对应的哪个 binlog 文件 ( <code>Relay_Master_Log_File</code>) 以及文件中的对应位置 (<code>Exec_Master_Log_Pos</code> )</p>
</blockquote>
</li>
</ul>
<p>根据上述两个参数的值，在 master 中可以查看当前阻碍从库复制的事务以及之后的事务。可以执行以下命令查看</p>
<figure class="highlight shell"><figcaption><span>master</span></figcaption><table><tr><td class="code"><pre><span class="line">SHOW BINLOG EVENTS in &#x27;mysql-bin.001015&#x27; from 366269088;</span><br></pre></td></tr></table></figure>
<p>这个可以查看到对应日志文件 <code>mysql-bin.001015</code> 中，事务 ID 为 <code>366269088</code> 之后的所有事务，</p>
<p>以下命令可以限制查询条数</p>
<figure class="highlight shell"><figcaption><span>master</span></figcaption><table><tr><td class="code"><pre><span class="line">SHOW BINLOG EVENTS in &#x27;mysql-bin.001015&#x27; from 366269088 limit 10;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="主从具有相同的-server-uuid"><a href="#主从具有相同的-server-uuid" class="headerlink" title="主从具有相同的 server-uuid"></a>主从具有相同的 server-uuid</h2><p><strong>报错信息</strong>：</p>
<blockquote>
<p>Fatal error: The slave I&#x2F;O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work</p>
</blockquote>
<p><strong>问题原因</strong>： 主从数据目录(默认<code>/var/lib/mysql/</code>)都有一个 <code>auto.cnf</code> 文件，里面记录的 <code>server-uuid</code> 是相同的，在云主机 clone 的场景可能会出现此问题。</p>
<p><strong>解决方法</strong>： 修改 <code>auto.cnf</code> 文件中 <code>uuid</code> 的值，重启 Mysql 服务即可</p>
<p>查询 uuid 的方式，登录 mysql，执行以下命令查看</p>
<figure class="highlight shell"><figcaption><span>mysql</span></figcaption><table><tr><td class="code"><pre><span class="line">select uuid();</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_12.png"></p>
<hr>
<h2 id="主从具有相同的-server-id"><a href="#主从具有相同的-server-id" class="headerlink" title="主从具有相同的 server-id"></a>主从具有相同的 server-id</h2><p><strong>报错信息</strong>：</p>
<blockquote>
<p>Fatal error: The slave I&#x2F;O thread stops because master and slave have equal MySQL server ids; </p>
</blockquote>
<p><strong>问题原因</strong>： 主从配置文件中配置了同样的 <code>server-id</code></p>
<p><strong>解决方法</strong>： 修改 <code>my.cnf</code>， 主从配置不同的<code>server-id</code></p>
<hr>
<h2 id="主从同步错误-1032"><a href="#主从同步错误-1032" class="headerlink" title="主从同步错误 1032"></a>主从同步错误 1032</h2><p><strong>报错信息</strong>：</p>
<blockquote>
<p>Could not execute Update_rows event on table ceshi.bbs_online; Can’t find record in ‘bbs_online’, Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND; the event’s master log mysql-bin.001423, end_log_pos 866646715</p>
</blockquote>
<p><strong>问题原因</strong>： 主从不同步，从数据库中记录被删除或者未同步到从库，主数据库中存在记录，主DB更新后，从无法同步</p>
<p><strong>解决方法1</strong>： 重新备份 master DB，恢复到 slave，重新 <a href="/94ee2c23/" title="恢复主从">恢复主从</a></p>
<p><strong>解决方法2</strong>： 找出丢失的数据在 slave 上插入。可以通过 <a href="#MySQL%E4%B8%BB%E4%BB%8E%E4%B8%8D%E5%90%8C%E6%AD%A5%EF%BC%8C%E5%B0%9D%E8%AF%95%E8%B7%B3%E8%BF%87%E6%89%A7%E8%A1%8C%E9%94%99%E8%AF%AF%E7%9A%84%E4%BA%8B%E5%8A%A1">分析出错的 binlog 找出丢失的记录</a></p>
<hr>
<h2 id="主从同步错误-1396"><a href="#主从同步错误-1396" class="headerlink" title="主从同步错误 1396"></a>主从同步错误 1396</h2><p><strong>报错信息</strong>：</p>
<blockquote>
<p>ERROR 1396 (HY000): Operation CREATE USER failed for ‘XXXX‘@’XXXX’</p>
</blockquote>
<p><strong>问题原因</strong>： slave 同步时，从数据库中已存在用户</p>
<p><strong>解决方法</strong>： slave 上删除已存在的用户</p>
<hr>
<h2 id="主从同步错误-1062"><a href="#主从同步错误-1062" class="headerlink" title="主从同步错误 1062"></a>主从同步错误 1062</h2><p><strong>报错信息</strong>：</p>
<blockquote>
<p>Last_SQL_Error: Could not execute Write_rows event on table *;<br>    Duplicate entry ‘2’ for key ‘PRIMARY’,<br>Error_code: 1062;<br>handler error HA_ERR_FOUND_DUPP_KEY; the event’s master log mysql-bin.000006, end_log_pos 924</p>
</blockquote>
<p><strong>问题原因</strong>： slave 上已有该记录，master 上又插入，可能存在主从数据不一致</p>
<p><strong>解决方法</strong>： 删除 slave 上重复的主键记录</p>
<hr>
<h2 id="主从同步错误-1042"><a href="#主从同步错误-1042" class="headerlink" title="主从同步错误 1042"></a>主从同步错误 1042</h2><p><strong>报错信息</strong>：</p>
<blockquote>
<p>error code 1042 (ER_BAD_HOST_ERROR): Can’t get hostname for your address</p>
</blockquote>
<p><strong>问题原因</strong>： 解析主机名失败</p>
<p><strong>解决方法</strong>： mysql 配置（<code>my.cnf</code>）中设置 <code>skip-name-resolve</code></p>
<p>使用以下命令解析 mysql 错误码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">perror 1042</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_13.png"></p>
<hr>
<h2 id="导出导入数据错误-1290"><a href="#导出导入数据错误-1290" class="headerlink" title="导出导入数据错误 1290"></a>导出导入数据错误 1290</h2><p><strong>报错场景</strong>： 使用 <code>select/insert</code> 导出&#x2F;导入 时报错</p>
<p><strong>报错信息</strong>：</p>
<blockquote>
<p>ERROR 1290 (HY000): The MySQL server is running with the –secure-file-priv option so it cannot execute this statement</p>
</blockquote>
<p><strong>问题原因</strong>： <code>secure_file_priv</code> 参数用于限制 <code>LOAD DATA</code>, <code>SELECT …OUTFILE</code>, <code>LOAD_FILE()</code> 传到哪个指定目录。  </p>
<ul>
<li><code>secure_file_priv</code> 为 <code>NULL</code> 时，表示限制 mysqld 不允许导入或导出。</li>
<li><code>secure_file_priv</code> 为 <code>/tmp</code> 时，表示限制 mysqld 只能在 <code>/tmp</code> 目录中执行导入导出，其他目录不能执行。</li>
<li><code>secure_file_priv</code> 没有值时，表示不限制 mysqld 在任意目录的导入导出。</li>
</ul>
<p>可以通过以下命令，查看当前的配置  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> &quot;%secure_file_priv%&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.csms.tech/img_18.png"></p>
<p><strong>解决方法</strong>： 因为 <code>secure_file_priv</code> 参数是只读参数，不能使用 <code>set global</code> 命令修改。<br><img src="https://i.csms.tech/img_19.png"></p>
<p>需要修改配置文件，添加以下内容</p>
<figure class="highlight shell"><figcaption><span>my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">secure_file_priv = &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>修改配置后，重启 mysql 服务生效</p>
<h2 id="xtrbackup-备份时被阻塞，一直显示-log-scanned-up-to"><a href="#xtrbackup-备份时被阻塞，一直显示-log-scanned-up-to" class="headerlink" title="xtrbackup 备份时被阻塞，一直显示 log scanned up to"></a>xtrbackup 备份时被阻塞，一直显示 <code>log scanned up to</code></h2><p><strong>报错场景</strong>: xtrbackup 备份时间过长，一直输出 <code>log scanned up to</code><br><img src="https://i.csms.tech/img_20.png"></p>
<p><strong>可能原因</strong>： 备份在等待锁<br><img src="https://i.csms.tech/img_21.png"></p>
<p><strong>解决方法</strong>： 如果对业务无影响，可以重启 mysql 服务后重新备份，或者根据 ID kill 掉对应的线程</p>
<figure class="highlight shell"><figcaption><span>mysql</span></figcaption><table><tr><td class="code"><pre><span class="line">show processlist;</span><br><span class="line">kill ID;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Cannot-add-or-update-a-child-row-a-foreign-key-constraint-fails"><a href="#Cannot-add-or-update-a-child-row-a-foreign-key-constraint-fails" class="headerlink" title="Cannot add or update a child row: a foreign key constraint fails"></a>Cannot add or update a child row: a foreign key constraint fails</h2><p>修改表字段，添加外键时报错，sql 语句及报错信息如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ALTER TABLE `my_table1` ADD COLUMN `usage_id` BIGINT DEFAULT 1 NOT NULL , ADD CONSTRAINT `usage_id_43803979_fk_domains_c` FOREIGN KEY (`usage_id`) REFERENCES `domainusage`(`<span class="built_in">id</span>`);</span></span><br><span class="line"></span><br><span class="line">错误代码： 1452</span><br><span class="line">Cannot add or update a child row: a foreign key constraint fails (`test`.`#sql-648_bce`, CONSTRAINT `usage_id_43803979_fk_domains_c` FOREIGN KEY (`usage_id`) REFERENCES `domainusage` (`id`))</span><br></pre></td></tr></table></figure>
<p>这个错误通常发生在尝试添加外键约束时，存在不一致的数据。在这种情况下，它指示 <code>my_table1</code> 表中的 <code>usage_id</code> 列的默认值与 <code>domainusage</code> 表的外键约束不匹配。</p>
<p>可能的原因和解决方法包括：</p>
<ol>
<li><p><code>domainusage</code> 表中没有 id 为 1 的记录：如果你将 <code>my_table1</code> 表的 <code>usage_id</code> 列设置为引用 <code>domainusage</code> 表的 id 列作为外键约束，那么确保在 <code>domainusage</code> 表中存在一个 id 为 1 的记录。如果没有，请先添加一条记录，并确保它的 id 值为 1。</p>
</li>
<li><p><code>domainusage</code> 表的 id 为 1 的记录与 <code>my_table1</code> 表的数据不匹配：检查 <code>domainusage</code> 表中 id 为 1 的记录与 <code>my_table1</code> 表中的数据是否一致。确保 <code>my_table1</code> 表中的每一行都具有在 <code>domainusage</code> 表中存在的有效的 id 值。</p>
</li>
<li><p>数据库中已经存在不一致的数据：如果你已经尝试了上述步骤并且仍然遇到问题，可能是由于数据库中存在不一致的数据导致的。在这种情况下，你需要检查并修复 <code>my_table1</code> 表和 <code>domainusage</code> 表之间的数据一致性问题。可以通过更新或删除相关行来解决不一致的数据。</p>
</li>
</ol>
<p>本示例中遇到的问题为第 1 个原因导致，解决办法为： 先在表 <code>domainusage</code> 中添加 id 为 1 的数据，然后再更新表 <code>my_table1</code></p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 常用 SQL</title>
    <url>/2207221611/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Mysql 5.7</li>
</ul>
<h1 id="常用-sql"><a href="#常用-sql" class="headerlink" title="常用 sql"></a>常用 sql</h1><h2 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h2><h3 id="导出到文件"><a href="#导出到文件" class="headerlink" title="导出到文件"></a>导出到文件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [<span class="keyword">TABLE</span>] </span><br><span class="line">    <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;[FILE]&#x27;</span> </span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> </span><br><span class="line">    OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> </span><br><span class="line">    LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span>；</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>into outfile ‘导出的目录和文件名’ </code>  </li>
<li><code>fields terminated by ‘字段间分隔符’ </code> </li>
<li><code>optionally enclosed by ‘字段包围符’  </code> </li>
<li><blockquote>
<blockquote>
<p><code>optionally enclosed by</code> 对数值型字段无效</p>
</blockquote>
</blockquote>
</li>
<li><code>lines terminated by ‘行间分隔符’ </code></li>
</ul>
<p>产生报错可参考 <a href="https://csms.tech/22072111/#导出导入数据错误-1290">Mysql 常见错误</a></p>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb(c1,c2) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h2 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h2><h3 id="mysqldump-常见用法"><a href="#mysqldump-常见用法" class="headerlink" title="mysqldump 常见用法"></a>mysqldump 常见用法</h3><a href="/94ee2c23/" title="MySQL 备份及主从恢复">MySQL 备份及主从恢复</a>
<h4 id="mysqldump-备份时排除某些表"><a href="#mysqldump-备份时排除某些表" class="headerlink" title="mysqldump 备份时排除某些表"></a>mysqldump 备份时排除某些表</h4><ul>
<li><code>--ignore-table=database.table</code> 导出时排除指定的表</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p database --ignore-table=database.table1 --ignore-table=database.table2 &gt; backup.sql</span><br></pre></td></tr></table></figure>

<h4 id="mysqldump-导出表结构"><a href="#mysqldump-导出表结构" class="headerlink" title="mysqldump 导出表结构"></a>mysqldump 导出表结构</h4><ul>
<li><code>-d</code> 选项，只导出表结构，不导出数据</li>
</ul>
<p>导出整个数据库表结构（不包含数据）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p -d DB &gt; db.sql</span><br></pre></td></tr></table></figure>

<p>导出单个数据表结构（不包含数据）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p -d DB TABLE &gt; table.sql</span><br></pre></td></tr></table></figure>

<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>为了创建一个新的触发器，可以使用 <code>CREATE TRIGGER</code> 语句。 下面说明了 <code>CREATE TRIGGER</code> 语句的语法： <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[MySQL触发器创建](https://www.yiibai.com/mysql/create-the-first-trigger-in-mysql.html)">[1]</span></a></sup></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> [trigger_name] [trigger_time] [trigger_event]</span><br><span class="line"> <span class="keyword">ON</span> [table_name]</span><br><span class="line"> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>trigger_name</code> : 触发器名称, 一般遵循命名约定 <code>[trigger time]_[table name]_[trigger event]</code>，例如 <code>before_employees_update</code></li>
<li><code>trigger_time</code> : 触发激活时间，必须指定定义触发器的激活时间。如果要在更改之前处理操作，则使用 <code>BEFORE</code> 关键字，如果在更改后需要处理操作，则使用 <code>AFTER</code> 关键字</li>
<li><code>trigger_event</code> : 触发事件，可以是 <code>INSERT</code>，<code>UPDATE</code> 或 <code>DELETE</code>。此事件导致触发器被调用。 触发器只能由一个事件调用。要定义由多个事件调用的触发器，必须定义多个触发器，每个事件一个触发器。</li>
<li><code>table_name</code> : 触发器管理的表。触发器必须与特定表关联。没有表触发器将不存在，所以必须在 <code>ON</code> 关键字之后指定表名</li>
<li><code>BEGIN</code> … <code>END</code> : 将 SQL 语句放在 <code>BEGIN</code> 和 <code>END</code> 块之间。这是定义触发器逻辑的位置。</li>
</ul>
<p>以下示例定义一个触发器，在表中的字段被更改后，改回旧的之，实现禁止更改表的效果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> `before_update_images` </span><br><span class="line">    BEFORE <span class="keyword">UPDATE</span> <span class="keyword">ON</span> `images` </span><br><span class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">set</span> new.name<span class="operator">=</span>old.name;</span><br><span class="line">    <span class="keyword">set</span> new.url<span class="operator">=</span>old.url;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER;</span><br></pre></td></tr></table></figure>



<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><h2 id="mysql-命令提示符下翻页查看输出"><a href="#mysql-命令提示符下翻页查看输出" class="headerlink" title="mysql 命令提示符下翻页查看输出"></a>mysql 命令提示符下翻页查看输出</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pager less <span class="operator">-</span>S</span><br></pre></td></tr></table></figure>
<blockquote>
<p>之后的输出可以使用和less命令一样的参数</p>
</blockquote>
<h2 id="gegeral-log-开启"><a href="#gegeral-log-开启" class="headerlink" title="gegeral_log 开启"></a>gegeral_log 开启</h2><p>查询 <code>general_log</code> 配置，并启用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%general%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span>                                              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> general_log      <span class="operator">|</span> OFF                                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> general_log_file <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>data<span class="operator">/</span>localhost.log                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> general_log_file<span class="operator">=</span><span class="string">&#x27;/tmp/mysql.log&#x27;</span>;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> general_log<span class="operator">=</span><span class="keyword">on</span>;</span><br><span class="line">    </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%general%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> general_log      <span class="operator">|</span> <span class="keyword">ON</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> general_log_file <span class="operator">|</span> <span class="operator">/</span>tmp<span class="operator">/</span>mysql.log       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> general_log<span class="operator">=</span>off;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%general%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> general_log      <span class="operator">|</span> OFF                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> general_log_file <span class="operator">|</span> <span class="operator">/</span>tmp<span class="operator">/</span>mysql.log       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 <code>general_log</code> 中可用通过搜索 <code>event id</code> 来查看登陆连接对数据库的所有 SQL 。</p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.yiibai.com/mysql/create-the-first-trigger-in-mysql.html">MySQL触发器创建</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 常用配置说明</title>
    <url>/22721459/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>mysql 5.7</li>
</ul>
<p>默认配置文件路径: <code>/etc/my.cnf</code></p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##############通用配置##############</span><br><span class="line">user = mysql</span><br><span class="line">port = 3306</span><br><span class="line">default_storage_engine = InnoDB</span><br><span class="line">## 只读</span><br><span class="line">read_only=1  </span><br><span class="line">             </span><br><span class="line">## 跳过域名解析参数，禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。</span><br><span class="line">## 但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！</span><br><span class="line">skip-name-resolve  </span><br><span class="line"></span><br><span class="line">## 跳过授权，重置密码时需要</span><br><span class="line">## 重置密码：update mysql.user set authentication_string=password(&#x27;Password@123&#x27;) where user=&#x27;root&#x27;;          </span><br><span class="line">skip-grant-tables   </span><br><span class="line">          </span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">## 解决日志中因wait-timeout的报错：</span><br><span class="line">## Aborted connection 40476 to db: &#x27;&#x27; user: &#x27;&#x27; host: &#x27;&#x27; (Got an error reading communication packets)</span><br><span class="line">log_warnings=1  </span><br><span class="line">                 </span><br><span class="line">### 连接错误超过此值，客户端无法连接，即拉黑</span><br><span class="line">max_connect_errors = 1000      </span><br><span class="line"></span><br><span class="line">###########主从配置选项###########</span><br><span class="line">server-id = 1</span><br><span class="line"># 主库要生成的二进制日志文件名称</span><br><span class="line">log-bin = mysql-bin    </span><br><span class="line">    </span><br><span class="line">## 从库中继日志名称</span><br><span class="line">relay-log = mysql-relay-bin    </span><br><span class="line"></span><br><span class="line">################</span><br><span class="line">## sync_binlog = 0    表示MySQL 不控制binlog的刷新，由文件系统自己控制它的缓存的刷新。</span><br><span class="line">## 这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。</span><br><span class="line">## sync_binlog&gt;0    表示每N个sync_binlog次事务提交，MySQL调用文件系统的刷新操作将缓存刷下去。</span><br><span class="line">## 最安全的就是sync_binlog=1了，表示每次事务提交，MySQL都会把binlog刷下去，是最安全但是性能损耗最大的设置。这样的话，在数据库所在的主机操作系统损坏或者突然掉电的情况下，系统才有可能丢失1个事务的数据。 </span><br><span class="line">## 但是binlog虽然是顺序IO，但是设置sync_binlog=1，多个事务同时提交，同样很大的影响MySQL和IO性能。</span><br><span class="line">## 对于高并发事务的系统来说，“sync_binlog”设置为0和设置为1的系统写入性能差距可能高达5倍甚至更多。</span><br><span class="line">## 只适用于主库的二进制日志，不适用中继日志</span><br><span class="line">################</span><br><span class="line">sync_binlog=0</span><br><span class="line"></span><br><span class="line">## 要同步的库.应该在从库上尽可能的使用replicate_wild_*，不建议在主库上使用</span><br><span class="line">binlog-do-db = rtzc_pnc_base       </span><br><span class="line"></span><br><span class="line"># 不同步的数据库,应该在从库上尽可能的使用replicate_wild_*</span><br><span class="line">binlog-ignore-db = mysql</span><br><span class="line"></span><br><span class="line">### 应该在从库上尽可能的使用replicate_wild_*              </span><br><span class="line">#replicate-wild-ignore-table=db.*               </span><br><span class="line">#replicate-wild-ignore-table=mysql.*</span><br><span class="line">#replicate-wild-ignore-table=information_schema.*</span><br><span class="line">#replicate-wild-ignore-table=performance_schema.*</span><br><span class="line">#replicate-wild-ignore-table=sys.*</span><br><span class="line">#replicate_wild_do_table=DB_NAME.%</span><br><span class="line">#replicate_ignore_db=test</span><br><span class="line"></span><br><span class="line">###复制实现模式/级别</span><br><span class="line">binlog_format=statement/row/mixed   </span><br><span class="line"></span><br><span class="line"># binlog日志大于此值是重新生成新的日志，默认(最大)1G，若使用大事务，日志可能会超过此值     </span><br><span class="line">max_binlog_size = 100M        </span><br><span class="line"></span><br><span class="line"># bilog日志保存天数，过期后清除</span><br><span class="line">expire_logs_days = 7   </span><br><span class="line"></span><br><span class="line"># 跳过某些同步错误号</span><br><span class="line">slave-skip-errors = 1032,1062  </span><br><span class="line"></span><br><span class="line">### 从库需要记录binlog，如级联从库场景，级联从库必须有此参数</span><br><span class="line">log-slave-updates=1          </span><br><span class="line"></span><br><span class="line"># 阻止slave自动启动复制</span><br><span class="line">skip_slave_start     </span><br><span class="line"></span><br><span class="line"># 从库发现和主库连接失败后，重连等待的时间，默认1小时       </span><br><span class="line">slave_net_timeout = 1        </span><br><span class="line"></span><br><span class="line"># 在从库上同步状态文件到磁盘，默认10000，表示在10000个事务执行完成后，将信息同步到磁盘</span><br><span class="line"># 打开后，可能会降低IO性能，设置为1最安全，但是IO性能最差；设置为0，由OS控制刷新</span><br><span class="line">sync_master_info | sync_relay_log | sync_relay_log_info  = 1      </span><br><span class="line"></span><br><span class="line"># SQL线程重放完一个中继日志后尽快将其删除</span><br><span class="line">relay_log_purge = 1         </span><br><span class="line"></span><br><span class="line"># 所有中继日志大小和的最大值。可防止主从延迟很大时，IO线程写relay log，导致磁盘空间不足。中继日志总和超过此值，IO线程会停止，等待SQL线程释放空间；</span><br><span class="line"># 风险是从库未从主库读取所有relaylog，这些日志可能在主库崩溃时丢失，磁盘空间足够的情况下，不推荐配置  </span><br><span class="line">relay_log_space_limit = 1G       </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#########日志选项###########</span><br><span class="line">slow_query_log =1   </span><br><span class="line">long_query_time=2     </span><br><span class="line">slow_query_log_file=/var/lib/mysql/slow.log</span><br><span class="line"></span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line"></span><br><span class="line">##########编码选项######</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server=utf8_general_ci </span><br><span class="line"></span><br><span class="line">#############连接选项#############</span><br><span class="line"></span><br><span class="line"># 客户端的连接闲置的最大时间，默认8小时，设置非交互模式(jdbc)时的超时时间</span><br><span class="line">wait-timeout = 60      </span><br><span class="line"></span><br><span class="line"># 交互模式超时时间      </span><br><span class="line">interactive_timeout = 60    </span><br><span class="line"></span><br><span class="line"># 并发连接数,最终值由open_files_limit共同决定</span><br><span class="line">max_connections=65535    </span><br><span class="line"></span><br><span class="line"># 一个账号最大可发起多少并发连接                </span><br><span class="line">max_user_connections=65535            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############性能选项#############</span><br><span class="line"></span><br><span class="line"># 缓存的表个数，可以观察Opened_tables状态变量值，若很大(若经常需要创建/删除临时表，该计数器也会不停增长)，建议增加此配置值，由OS rlimit共同决定</span><br><span class="line">table_open_cache = 65535  </span><br><span class="line"></span><br><span class="line"># 缓存的线程个数，具体配置值可以观察Threads_created状态变量，如果此值较大，可加大thread_cache_size,建议此值保持足够大    </span><br><span class="line">thread_cache_size = 5000   </span><br><span class="line"></span><br><span class="line"># 查询缓存使用的内存大小，启动时，一次性分配</span><br><span class="line">query_cache_size = 1024M      </span><br><span class="line"></span><br><span class="line"># 查询需排序时分配内存，立即分配指定的全部内存，无论是否需要这么多</span><br><span class="line">sort_buffer_size = 10k            </span><br><span class="line"></span><br><span class="line"># 需要在服务启动程序(/usr/lib/systemd/system/mysqld.service)中配置：LimitNOFILE = 65535</span><br><span class="line">open_files_limit = 65535</span><br><span class="line">     </span><br><span class="line">max_allowed_packet = 200M</span><br><span class="line">innodb_open_files = 65535      </span><br><span class="line"></span><br><span class="line"># 默认值一般都太小，此值建议配置为os和其他应用消耗的内存除外的内存大小</span><br><span class="line"># 配置太大也会导致预热和关闭花费较多时间</span><br><span class="line">innodb_buffer_pool_size = 20G       </span><br><span class="line"></span><br><span class="line"># 事务日志的文件大小，太小，InnoDB必须做更多检查点，导致更多日志写，不利于IO。日志缓存满，事务提交或每秒，会刷新缓存到磁盘;</span><br><span class="line"># 可以观察show innodb status中log部分，Innodb_os_log_written查看写入了多少数据</span><br><span class="line">innodb_log_file_size = (32-128)M</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">innodb_flush_log_at_trx_commit = N</span><br><span class="line">########## innodb特有参数，事务日志用于在mysql崩溃后的恢复</span><br><span class="line"># N=0   每隔一秒，把事务日志缓存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上；</span><br><span class="line"># 在这种情况下，MySQL性能最好，但如果 mysqld 进程崩溃，通常会导致最后 1s 的日志丢失。</span><br><span class="line"></span><br><span class="line"># N=1   每个事务提交时候，把事务日志从缓存区写到日志文件中，并且刷新日志文件的数据到磁盘上；每次事务提交时，log buffer 会被写入到日志文件并刷写到磁盘。 </span><br><span class="line"># 这也是默认值。这是最安全的配置，但由于每次事务都需要进行磁盘I/O，所以也最慢。</span><br><span class="line"></span><br><span class="line"># N=2    当取值为2 时，每次事务提交会写入日志文件，但并不会立即刷写到磁盘，日志文件会每秒刷写一次到磁盘。</span><br><span class="line"># 这时如果 mysqld 进程崩溃，由于日志已经写入到系统缓存，所以并不会丢失数据；在操作系统崩溃的情况下，通常会导致最后 1s 的日志丢失。</span><br><span class="line"># 对于一些数据一致性和完整性要求不高的应用，配置为 2 就足够了；如果为了最高性能，可以设置为 0。有些应用，如支付服务，对一致性和完整性要求很高，所以即使最慢，也最好设置为 1.</span><br><span class="line">##########</span><br><span class="line"></span><br><span class="line"># 限制一次性可以有多少线程进入内核，建议值：cpu数量* 磁盘数量* 2,进入内核的线程超过此值，新线程无法进入。</span><br><span class="line"># 为使线程高效进入内核，线程第一次休眠innodb_thread_sleep_delay(默认10000)微秒，然后重试，若依然不能进入内核，则放入一个等待线程队列，由OS内核处理。</span><br><span class="line"># 在高并发环境或大量小查询时，可减小此值。</span><br><span class="line">innodb_thread_concurrency = 64</span><br><span class="line"></span><br><span class="line"># 一旦线程进入内核，可以有指定数量的tickents，再次进入内核时，可不在做并发检查，按照查询授权，而非事务            </span><br><span class="line">innodb_concurrency_tickets = 10</span><br><span class="line"></span><br><span class="line"># 多少个线程可以在同一时间提交事务，太小会有线程冲突      </span><br><span class="line">innodb_commit_concurrency = 100   </span><br><span class="line"></span><br><span class="line"># 指定磁盘IO能力，默认为100，使用SSD或IO性能好的磁盘时，建议提高此值</span><br><span class="line">innodb_io_capacity = 1000     </span><br><span class="line"></span><br><span class="line"># 控制后台由多少线程负责IO操作，默认为4</span><br><span class="line">innodb_read_io_threads | innodb_write_io_threads = 10             </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 备份及主从恢复</title>
    <url>/94ee2c23/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>Mysql 5.7</li>
<li>Percona-XtraBackup-2.4.4</li>
</ul>
<h1 id="恢复方法1：mysqldump-主库锁表备份恢复"><a href="#恢复方法1：mysqldump-主库锁表备份恢复" class="headerlink" title="恢复方法1：mysqldump 主库锁表备份恢复"></a>恢复方法1：mysqldump 主库锁表备份恢复</h1><p><strong>前提</strong> ： 接受主库锁表操作，备份恢复过程中主库无法写入数据</p>
<h2 id="从库停止slave进程"><a href="#从库停止slave进程" class="headerlink" title="从库停止slave进程"></a>从库停止slave进程</h2><p>登录 mysql 从库，执行以下命令，停止 slave 进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="主库锁表"><a href="#主库锁表" class="headerlink" title="主库锁表"></a>主库锁表</h2><p>登录 mysql 主库，执行以下命令，对主库进行锁表操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FLUSH TABLES WITH READ LOCK;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行锁表操作后，不要退出 mysql 命令行，否则会自动解锁。</p>
</blockquote>
<p>执行以下命令，查看主库锁表后的 binlog 位置信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SHOW MASTER STATUS\G</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_3.png"></p>
<h2 id="备份主库数据库数据"><a href="#备份主库数据库数据" class="headerlink" title="备份主库数据库数据"></a>备份主库数据库数据</h2><p>执行以下命令备份数据库 db1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --master-data=2 --databases db1 &gt; db1.sql</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--master-data=2</code>  将日志名和位置写入到备份结果并注释，可以从备份文件中搜索 <code>change master to</code>  查看 <code>binlog</code> 文件名和 <code>position</code></li>
</ul>
<p>主库备份完成后，可以解锁：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>

<h2 id="从库恢复主库的备份数据"><a href="#从库恢复主库的备份数据" class="headerlink" title="从库恢复主库的备份数据"></a>从库恢复主库的备份数据</h2><p>将主库的备份数据拷贝到从库，使用备份数据覆盖恢复从库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p db1 &lt; db1.sql</span><br></pre></td></tr></table></figure>
<p>从库恢复备份完成后，和主库建立主从连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;pswd&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000196&#x27;,master_log_pos=1037640668;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>
<p>配置完成后，通过以下命令，查看主从状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主要关注以下项：<br>Slave_IO_Running: Yes<br>Slave_SQL_Running: Yes<br>Seconds_Behind_Master: 0  </p>
</blockquote>
<p><img src="https://i.csms.tech/img_5.png"></p>
<h1 id="恢复方法2：mysqldump-主库不锁表备份恢复"><a href="#恢复方法2：mysqldump-主库不锁表备份恢复" class="headerlink" title="恢复方法2：mysqldump 主库不锁表备份恢复"></a>恢复方法2：mysqldump 主库不锁表备份恢复</h1><h2 id="从库停止-slave-进程"><a href="#从库停止-slave-进程" class="headerlink" title="从库停止 slave 进程"></a>从库停止 slave 进程</h2><p>登录 mysql 从库，执行以下命令，停止 slave 进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure>
<h2 id="备份主库数据库数据-1"><a href="#备份主库数据库数据-1" class="headerlink" title="备份主库数据库数据"></a>备份主库数据库数据</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --master-data=2 --single-transaction -R --databases db01 &gt; db01.sql</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--master-data=2</code> : 实现将日志名和位置写入到备份结果并注释,<code>db01.sql</code> 中会包含当前日志的文件名以及位置  </li>
<li><code>--routines, -R</code>：导出存储过程和函数</li>
</ul>
<h2 id="从库导入备份"><a href="#从库导入备份" class="headerlink" title="从库导入备份"></a>从库导入备份</h2><p>将主库的备份数据拷贝到从库，并进行恢复</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p db01 &lt; db01.sql</span><br></pre></td></tr></table></figure>
<h2 id="备份文件中查看binlog日志文件名和position"><a href="#备份文件中查看binlog日志文件名和position" class="headerlink" title="备份文件中查看binlog日志文件名和position"></a>备份文件中查看binlog日志文件名和position</h2><p>在备份文件(<code>db01.sql</code>)中搜索 <code>CHANGE MASTER TO </code>, 结果中可以获取到 <code>binlog</code> 日志文件名和 <code>position</code></p>
<h2 id="建立主从连接"><a href="#建立主从连接" class="headerlink" title="建立主从连接"></a>建立主从连接</h2><p>根据上一步获取到的 <code>binlog</code> 文件名和 &#96;position 信息，建立主从连接并启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;pswd&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000196&#x27;,master_log_pos=1037640668;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>
<p>通过命令 <code>show slave status\G</code> 检查主从同步状态</p>
<h1 id="恢复方法3：-xbackup-整库备份恢复"><a href="#恢复方法3：-xbackup-整库备份恢复" class="headerlink" title="恢复方法3： xbackup 整库备份恢复"></a>恢复方法3： xbackup 整库备份恢复</h1><h2 id="xbackup安装"><a href="#xbackup安装" class="headerlink" title="xbackup安装"></a>xbackup安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y libaio-devel.x86_64 bzip2</span><br><span class="line">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.4/binary/tarball/percona-xtrabackup-2.4.4-Linux-x86_64.tar.gz</span><br><span class="line">tar -zxf percona-xtrabackup-2.4.4-Linux-x86_64.tar.gz</span><br><span class="line">cp percona-xtrabackup-2.4.4-Linux-x86_64/bin/* /usr/bin</span><br></pre></td></tr></table></figure>

<h2 id="主库整库备份"><a href="#主库整库备份" class="headerlink" title="主库整库备份"></a>主库整库备份</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">innobackupex --defaults-file=/etc/my.cnf --user=root --password=PASSWD --port=3306 --socket=/var/lib/mysql/mysql.sock  [--databases  &quot;db1 db2 &quot;] $&#123;backup_data_dir&#125;</span><br></pre></td></tr></table></figure>

<h2 id="从库整库恢复"><a href="#从库整库恢复" class="headerlink" title="从库整库恢复"></a>从库整库恢复</h2><p>拷贝主库备份数据到从库,在从库上执行以下命令恢复数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $&#123;backup_data_dir&#125;</span><br><span class="line"></span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --apply-log --use-memory=20000M $&#123;backup_data_dir&#125;</span><br><span class="line"></span><br><span class="line">cp -r $&#123;backup_data_dir&#125;/* $&#123;mysql_base_dir&#125;/data/</span><br></pre></td></tr></table></figure>

<h2 id="建立主从连接-1"><a href="#建立主从连接-1" class="headerlink" title="建立主从连接"></a>建立主从连接</h2><p>备份数据中的 <code>xtrabackup_binlog_info</code> 文件包含了从库建立主从连接时需要的 binlog 信息，根据此文件中的信息，在从库执行命令，建立主从连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;pswd&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000196&#x27;,master_log_pos=1037640668;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>
<p>通过命令 <code>show slave status\G</code> 检查主从同步状态</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 多主一从即多源复制</title>
    <url>/2207210946/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Mysql 5.7 之后版本支持多主一从</li>
</ul>
<h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><h4 id="分别在Master-1和Master-2上导出需要同步的数据库"><a href="#分别在Master-1和Master-2上导出需要同步的数据库" class="headerlink" title="分别在Master_1和Master_2上导出需要同步的数据库"></a>分别在Master_1和Master_2上导出需要同步的数据库</h4><p>分别在Master_1和Master_2上执行以下命令，导出需要同步的数据库备份</p>
<figure class="highlight shell"><figcaption><span>Master_1</span></figcaption><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 --master-data=2 --single-transaction --databases  --add-drop-database  db1  &gt; db1.sql</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>Master_2</span></figcaption><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 --master-data=2 --single-transaction --databases  --add-drop-database  db2  &gt; db2.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>备份完成后，将备份数据拷贝到从库服务器上面</p>
<span id="more"></span>

<h4 id="在Master-1和Master-2上创建复制账号"><a href="#在Master-1和Master-2上创建复制账号" class="headerlink" title="在Master_1和Master_2上创建复制账号"></a>在Master_1和Master_2上创建复制账号</h4><blockquote>
<p>如果已有复制账号，跳过此步骤</p>
</blockquote>
<p>分别在Master_1和Master_2上执行以下命令，创建复制账号</p>
<figure class="highlight shell"><figcaption><span>Master_1 Master_2</span></figcaption><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to &#x27;repl&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>
<h4 id="更改slave配置以支持多主一从"><a href="#更改slave配置以支持多主一从" class="headerlink" title="更改slave配置以支持多主一从"></a>更改slave配置以支持多主一从</h4><p>mysql支持多主一从(多源复制)的关键配置。<br>要配置mysql支持多源复制，必须配置mysql存储同步信息的方式，主要有以下2种方式 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[存储同步信息的方式说明](https://dev.mysql.com/doc/refman/5.7/en/replication-multi-source-configuration.html)
">[1]</span></a></sup></p>
<ul>
<li>FILE  默认配置，此时同步信息存储在文件master.info和relay-log.info</li>
<li>TABLE  同步信息存储在mysql.slave_master_info和mysql.slave_relay_log_info</li>
</ul>
<p>更改mysql配置文件(默认&#x2F;etc&#x2F;my.cnf)，配置存储同步信息的方式</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br></pre></td></tr></table></figure>
<p>更改配置后，重启mysql生效</p>
<h4 id="slave上恢复Master-1和Master-2的备份数据"><a href="#slave上恢复Master-1和Master-2的备份数据" class="headerlink" title="slave上恢复Master_1和Master_2的备份数据"></a>slave上恢复Master_1和Master_2的备份数据</h4><figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">mysql -uroot -p  &lt; db1.sql</span><br><span class="line">mysql -uroot -p  &lt; db2.sql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为在 <code>mysqldump</code> 备份时，使用了选项 <code>--add-drop-database</code>，slave导入备份时，无需指定db</p>
</blockquote>
<h4 id="slave上配置多源复制"><a href="#slave上配置多源复制" class="headerlink" title="slave上配置多源复制"></a>slave上配置多源复制</h4><h5 id="找到配置主从需要的binlog位置和Pos位置"><a href="#找到配置主从需要的binlog位置和Pos位置" class="headerlink" title="找到配置主从需要的binlog位置和Pos位置"></a>找到配置主从需要的binlog位置和Pos位置</h5><p>分别在Master_1和Master_2的备份数据中，查找以下内容，找到需要的binlog位置和Pos位置</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">cat db1.sql |grep &quot; CHANGE MASTER&quot;</span><br><span class="line">cat db2.sql |grep &quot; CHANGE MASTER&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这些信息是由  <code>mysqldump</code> 的选项 <code>--master-data=2</code>提供 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[--master-data=2说明](https://dev.mysql.com/doc/mysql-replication-excerpt/5.7/en/replication-howto-mysqldump.html)">[2]</span></a></sup><br>结果中包含以下类似内容：<br>CHANGE MASTER TO MASTER_LOG_FILE&#x3D;’log-bin.000001’, MASTER_LOG_POS&#x3D;1539;</p>
</blockquote>
<h5 id="登录salve数据库配置多源复制"><a href="#登录salve数据库配置多源复制" class="headerlink" title="登录salve数据库配置多源复制"></a>登录salve数据库配置多源复制</h5><p>登录slave数据库，分别执行以下命令，创建到Master_1和Master_2的复制</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;Master_1&#x27;,MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;,MASTER_LOG_FILE=&#x27;log-bin.000001&#x27;,MASTER_LOG_POS=1539 FOR CHANNEL &#x27;Master_1&#x27;;</span><br><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;Master_2&#x27;,MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;,MASTER_LOG_FILE=&#x27;log-bin.000001&#x27;,MASTER_LOG_POS=1539 FOR CHANNEL &#x27;Master_2&#x27;; </span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>不同的主从复制以最后的 <code>FOR CHANNEL</code> 来区分</p>
</blockquote>
<h5 id="启动主从复制"><a href="#启动主从复制" class="headerlink" title="启动主从复制"></a>启动主从复制</h5><p>在slave数据库中执行以下命令分别启动复制</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">start slave for channel &quot;Master_1&quot;;</span><br><span class="line">start slave for channel &quot;Master_1&quot;;</span><br></pre></td></tr></table></figure>
<p>也可以通过 <code>start slave;</code> 启动所有的复制</p>
<p>可以通过以下命令查看启动复制后的状态</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">SHOW SLAVE STATUS FOR CHANNEL &#x27;Master_1&#x27;\G</span><br><span class="line">SHOW SLAVE STATUS FOR CHANNEL &#x27;Master_2&#x27;\G</span><br><span class="line">SHOW SLAVE STATUS\G</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://dev.mysql.com/doc/">Mysql 官网</a></p>
<h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://dev.mysql.com/doc/refman/5.7/en/replication-multi-source-configuration.html">存储同步信息的方式说明</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://dev.mysql.com/doc/mysql-replication-excerpt/5.7/en/replication-howto-mysqldump.html">--master-data=2说明</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 主从复制相关原理简述</title>
    <url>/2207211114/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<h2 id="Mysql-主从同步基本原理"><a href="#Mysql-主从同步基本原理" class="headerlink" title="Mysql 主从同步基本原理"></a>Mysql 主从同步基本原理</h2></blockquote>
<p>复制的基本过程如下：  </p>
<ol>
<li><p>Slave上面的IO进程连接上Master，并请求从指定日志文件的指定位置（或者从最开始的日志）之后的日志内容；</p>
</li>
<li><p>Master接收到来自Slave的IO进程的请求后，通过负责复制的IO进程,根据请求信息,读取指定日志指定位置之后的日志信息，返回给Slave 的IO进程。返回信息中除了日志所包含的信息之外，还包括本次返回的信息已经到Master端的bin-log文件的名称以及bin-log的位置；</p>
</li>
<li><p>Slave的IO进程接收到信息后，将接收到的日志内容依次添加到Slave端的relay-log文件的最末端，并将读取到的Master端的 bin-log的文件名和位置记录到master-info文件中，以便在下一次读取的时候能够清楚的告诉Master“我需要从某个bin-log的哪个位置开始往后的日志内容，请发给我”；</p>
</li>
<li><p>Slave的Sql进程检测到relay-log中新增加了内容后，会马上解析relay-log的内容，获得在Master端真实执行的那些可执行的内容，并在自身执行。</p>
</li>
</ol>
<p>双主情况下，禁止同时写入，建议还是按照主从的方式工作，防止数据冲突。双主场景下，主要是切换主备方便。</p>
<span id="more"></span>

<blockquote>
<h2 id="Mysql-复制方式"><a href="#Mysql-复制方式" class="headerlink" title="Mysql 复制方式"></a>Mysql 复制方式</h2></blockquote>
<blockquote>
<h3 id="异步复制（Asynchronous-replication）"><a href="#异步复制（Asynchronous-replication）" class="headerlink" title="异步复制（Asynchronous replication）"></a>异步复制（Asynchronous replication）</h3></blockquote>
<p>MySQL默认的复制即是异步的，主库在执行完客户端提交的事务后会立即将结果返给给客户端，并不关心从库是否已经接收并处理，这样就会有一个问题，主如果crash掉了，此时主上已经提交的事务可能并没有传到从上，如果此时，强行将从提升为主，可能导致新主上的数据不完整。</p>
<blockquote>
<h3 id="全同步复制（Fully-synchronous-replication）"><a href="#全同步复制（Fully-synchronous-replication）" class="headerlink" title="全同步复制（Fully synchronous replication）"></a>全同步复制（Fully synchronous replication）</h3></blockquote>
<p>指当主库执行完一个事务，所有的从库都执行了该事务才返回给客户端。因为需要等待所有从库执行完该事务才能返回，所以全同步复制的性能必然会收到严重的影响。</p>
<blockquote>
<h3 id="半同步复制（Semisynchronous-replication）"><a href="#半同步复制（Semisynchronous-replication）" class="headerlink" title="半同步复制（Semisynchronous replication）"></a>半同步复制（Semisynchronous replication）</h3></blockquote>
<p>介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端。相对于异步复制，半同步复制提高了数据的安全性，同时它也造成了一定程度的延迟，这个延迟最少是一个TCP&#x2F;IP往返的时间。所以，半同步复制最好在低延时的网络中使用。半同步复制失败(配置超时时间)，自动转为异步复制  </p>
<h4 id="半同步复制配置步骤"><a href="#半同步复制配置步骤" class="headerlink" title="半同步复制配置步骤"></a>半同步复制配置步骤</h4><ol>
<li><p>加载使用的插件<br>主库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>master</span></figcaption><table><tr><td class="code"><pre><span class="line">INSTALL PLUGIN rpl_semi_sync_master SONAME &#x27;semisync_master.so&#x27;;</span><br></pre></td></tr></table></figure>
<p>从库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">INSTALL PLUGIN rpl_semi_sync_slave SONAME &#x27;semisync_slave.so&#x27;;</span><br></pre></td></tr></table></figure>
<p>通过 <code>show plugins;</code> 可查看已加载的插件</p>
</li>
<li><p>启动半同步复制<br>主库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>master</span></figcaption><table><tr><td class="code"><pre><span class="line">SET GLOBAL rpl_semi_sync_master_enabled = 1;</span><br></pre></td></tr></table></figure>
<p>从库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">SET GLOBAL rpl_semi_sync_slave_enabled = 1;</span><br></pre></td></tr></table></figure>
<p>执行以下命令重启从库上的IO线程</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">STOP SLAVE IO_THREAD;</span><br><span class="line">START SLAVE IO_THREAD;</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查半同步复制插件是否在运行<br>主库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>master</span></figcaption><table><tr><td class="code"><pre><span class="line">show status like &#x27;Rpl_semi_sync_master_status&#x27;;</span><br></pre></td></tr></table></figure>
<p>从库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">show status like &#x27;Rpl_semi_sync_slave_status&#x27;;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<h2 id="Mysql-复制级别说明"><a href="#Mysql-复制级别说明" class="headerlink" title="Mysql 复制级别说明"></a>Mysql 复制级别说明</h2></blockquote>
<p>不同复制级别的设置会影响到Master端的bin-log记录成不同的形式。<br>配置方式:</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">binlog_format=&#x27;row&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="基于sql语句（Statement-level）"><a href="#基于sql语句（Statement-level）" class="headerlink" title="基于sql语句（Statement level）"></a>基于sql语句（Statement level）</h3></blockquote>
<p>每一条会修改数据的sql都会记录到 master的bin-log中。slave在复制的时候，sql进程会解析成和原来master端执行过的相同的sql来再次执行。</p>
<p><strong>优点</strong>：statement level下的优点首先就是解决了<a href="#%E5%9F%BA%E4%BA%8E%E4%B8%80%E6%9D%A1%E8%AE%B0%E5%BD%95%EF%BC%88Row-level%EF%BC%89">row level</a>下的缺点，不需要记录每一行数据的变化，减少bin-log日志量，节约IO，提高性能。因为他只需要记录在Master上所执行的语句的细节，以及执行语句时候的上下文的信息。</p>
<p><strong>缺点</strong>：由于他是记录的执行语句，所以，为了让这些语句在slave端也能正确执行，那么他还必须记录每条语句在执行的时候的一些相关信息，也就是上下文信息，以保证所有语句在slave端被执行的时候能够得到和在master端执行时候相同的结果。<br>另外就是，由于Mysql现在发展比较快，很多的新功能不断的加入，使mysql的复制遇到了不小的挑战，复制的时候涉及到越复杂的内容，bug也就越容易出现。在statement level下，目前已经发现的就有不少情况会造成mysql的复制出现问题，主要是修改数据的时候使用了某些特定的函数或者功能的时候会出现，比如：sleep()函数在有些版本中就不能真确复制，在存储过程中使用了last_insert_id()函数，可能会使slave和master上得到不一致的id等等。<br>由于row level是基于每一行来记录的变化，所以不会出现类似的问题。</p>
<blockquote>
<h3 id="基于一条记录（Row-level）"><a href="#基于一条记录（Row-level）" class="headerlink" title="基于一条记录（Row level）"></a>基于一条记录（Row level）</h3></blockquote>
<p>日志中会记录成每一行数据被修改的形式，然后在slave端再对相同的数据进行修改</p>
<p><strong>优点</strong>： 在row level模式下，bin-log中可以不记录执行的sql语句的上下文相关的信息，仅仅只需要记录那一条记录被修改了，修改成什么样了。所以row level的日志内容会非常清楚的记录下每一行数据修改的细节，非常容易理解。而且不会出现某些特定情况下的存储过程，或function，以及 trigger的调用和触发无法被正确复制的问题。<br>任何情况都可以被复制，这对复制来说是最安全可靠的；和其他大多数数据库系统的复制技术一样；多数情况下，从服务器上的表如果有主键的话，复制就会快了很多,更少的锁</p>
<p><strong>缺点</strong>： row level下，所有的执行的语句当记录到日志中的时候，都将以每行记录的修改来记录，这样可能会产生大量的日志内容，比如有这样一条update语句：update product set owner_member_id &#x3D; ‘b’ where owner_member_id &#x3D; ‘a’，执行之后，日志中记录的不是这条update语句所对应的事件（mysql以事件的形式来记录bin-log日志），而是这条语句所更新的每一条记录的变化情况，这样就记录成很多条记录被更新的很多个事件。自然，bin-log日志的量就会很大。尤其是当执行alter table之类的语句的时候，产生的日志量是惊人的。因为Mysql对于alter table之类的表结构变更语句的处理方式是整个表的每一条记录都需要变动，实际上就是重建了整个表。那么该表的每一条记录都会被记录到日志中。</p>
<blockquote>
<h3 id="Mixed"><a href="#Mixed" class="headerlink" title="Mixed"></a>Mixed</h3></blockquote>
<p>在Mixed模式下，Mysql会根据执行的每一条具体的sql语句,来区分对待记录的日志形式，也就是在Statement和Row之间选择一种。新版本中的Statment level还是和以前一样，仅仅记录执行的语句。而新版本的Mysql中对row level模式也被做了优化，并不是所有的修改都会以row level来记录，像遇到表结构变更的时候就会以statement模式来记录，如果sql语句确实就是update或者delete等修改数据的语句，那么还是会记录所有行的变更。</p>
<blockquote>
<h3 id="GTID模式"><a href="#GTID模式" class="headerlink" title="GTID模式"></a>GTID模式</h3></blockquote>
<p>需要基于row模式，mysql-5.6.2支持,mysql5.6.10后完善</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">log_bin=on</span><br><span class="line">binlog_format=&#x27;row&#x27;</span><br><span class="line">gtid_mode=on</span><br><span class="line">enforce-gtid-consistency=on</span><br><span class="line">log-slave-updates=1</span><br></pre></td></tr></table></figure>
<p>限制：</p>
<ol>
<li>不支持非事务引擎(从库报错, stop slave; start slave ; 忽略)</li>
<li>不支持create table … select语句(主库直接报错)</li>
<li>不支持一个sql同时更新一个事务引擎和非事务引擎的表</li>
<li>在一个复制组中,必须要求统一开启gtid或是关闭gtid</li>
<li>开启gtid需要重启</li>
<li>开启gtid后,就不在使用原来传统的复制方式</li>
<li>对于create temporary table和drop temporary table语句不支持</li>
<li>不支持sql_slave_skip_counter</li>
</ol>
<blockquote>
<h2 id="MySQL（主从）配置相关参数"><a href="#MySQL（主从）配置相关参数" class="headerlink" title="MySQL（主从）配置相关参数"></a>MySQL（主从）配置相关参数</h2></blockquote>
<p>master相关配置  </p>
<figure class="highlight shell"><figcaption><span>master my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">server-id = 1</span><br><span class="line">log-bin = mysql-bin    #要生成的二进制日志文件名称</span><br><span class="line">binlog_format=statement/row/mixed        ###复制实现模式/级别</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">binlog-do-db = rtzc_pnc_base       <span class="comment">##要同步的库.应该尽可能的在从库上使用replicate_wild_*，不建议在主库上使用</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">binlog-ignore-db = mysql   <span class="comment">#不同步的数据库,应该在从库上尽可能的使用replicate_wild_*</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#### 一般不再主服务器上过滤，虽然可以减少主的开销，但这样会导致二进制日志不完整</span></span></span><br><span class="line">sync_binlog=0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0      表示MySQL 不控制binlog的刷新，由文件系统自己控制它的缓存的刷新。这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sync_binlog&gt;0    表示每N个sync_binlog次事务提交，MySQL调用文件系统的刷新操作将缓存刷下去。最安全的就是sync_binlog=1了，表示每次事务提交，MySQL都会把binlog刷下去，是最安全但是性能损耗最大的设置。这样的话，在数据库所在的主机操作系统损坏或者突然掉电的情况下，系统才有可能丢失1个事务的数据。但是binlog虽然是顺序IO，但是设置sync_binlog=1，多个事务同时提交，同样很大的影响MySQL和IO性能。对于高并发事务的系统来说，“sync_binlog”设置为0和设置为1的系统写入性能差距可能高达5倍甚至更多。</span></span><br><span class="line"></span><br><span class="line">innodb_flush_log_at_trx_commit = 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########innodb特有参数</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">N=0     每隔一秒，把事务日志缓存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上；在这种情况下，MySQL性能最好，但如果 mysqld 进程崩溃，通常会导致最后 1s 的日志丢失。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">N=1     每个事务提交时候，把事务日志从缓存区写到日志文件中，并且刷新日志文件的数据到磁盘上；每次事务提交时，<span class="built_in">log</span> buffer 会被写入到日志文件并刷写到磁盘。这也是默认值。这是最安全的配置，但由于每次事务都需要进行磁盘I/O，所以也最慢。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">N=2    当取值为 2 时，每次事务提交会写入日志文件，但并不会立即刷写到磁盘，日志文件会每秒刷写一次到磁盘。这时如果 mysqld 进程崩溃，由于日志已经写入到系统缓存，所以并不会丢失数据；在操作系统崩溃的情况下，通常会导致最后 1s 的日志丢失。 对于一些数据一致性和完整性要求不高的应用，配置为 2 就足够了；如果为了最高性能，可以设置为 0。有些应用，如支付服务，对一致性和完整性要求很高，所以即使最慢，也最好设置为 1.</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">replicate-wild-ignore-table=db.*               <span class="comment">###应该在从库上尽可能的使用replicate_wild_</span></span></span><br><span class="line"></span><br><span class="line">max_binlog_size</span><br><span class="line">expire_logs_days = 7          ##日志保存天数</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>slave相关配置</p>
<figure class="highlight shell"><figcaption><span>my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">server-id = 2</span><br><span class="line">relay-log = mysql-relay-bin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">replicate-do-db = rtzc_pnc_base     <span class="comment">##应该在从库上尽可能的使用replicate_wild_*，并不会减少主往从复制数据占用带宽</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">replicate-do-table = db.table      <span class="comment">##表级过滤</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#replicate-ignore-table = db.table</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">replicate_ignore_db=<span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">replicate_wild_do_table=DB_NAME.%</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">replicate_wild_ignore_table=DB_NAME.%</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">slave-skip-errors = 1032,1062     <span class="comment">###跳过某些同步错误号</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">log-slave-updates=1          <span class="comment">###从库需要记录binlog，如级联从库场景，级联从库必须有此参数</span></span></span><br><span class="line">log-bin = mysql-bin</span><br><span class="line"></span><br><span class="line">expire_logs_days = 7</span><br><span class="line"></span><br><span class="line">read-only         ###从库Slave中使用read-only参数，确保从库数据不被非法更新。</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">innodb_read_only = 1         <span class="comment">###控制root用户，慎用</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 Mysql</title>
    <url>/202211021345/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 kernel 5.4</li>
<li>Mysql Server 5.7</li>
</ul>
<h1 id="Mysql-Server-安装步骤"><a href="#Mysql-Server-安装步骤" class="headerlink" title="Mysql Server 安装步骤"></a>Mysql Server 安装步骤</h1><h2 id="yum-方式安装"><a href="#yum-方式安装" class="headerlink" title="yum 方式安装"></a>yum 方式安装</h2><h3 id="安装-MySQL-5-7-的-yum-源"><a href="#安装-MySQL-5-7-的-yum-源" class="headerlink" title="安装  MySQL 5.7 的 yum 源"></a>安装  MySQL 5.7 的 yum 源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum localinstall -y http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>如果因为源冲突，类似如下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Processing Conflict: mysql80-community-release-el7-2.noarch conflicts mysql57-community-release</span><br></pre></td></tr></table></figure>

<p>可以卸载旧的 <code>yum</code> 源安装包，重新安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -qa | grep mysql</span></span><br><span class="line">mysql80-community-release-el7-2.noarch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum remove mysql80-community-release-el7-2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum localinstall -y http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<p>检查 <code>yum</code> 源中的 <code>mysql-community-server</code> 信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum info mysql-community-server</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: download.cf.centos.org</span><br><span class="line"> * elrepo: reflector.westga.edu</span><br><span class="line"> * epel: coresite.mm.fcix.net</span><br><span class="line"> * extras: download.cf.centos.org</span><br><span class="line"> * updates: download.cf.centos.org</span><br><span class="line">Available Packages</span><br><span class="line">Name        : mysql-community-server</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 5.7.40</span><br><span class="line">Release     : 1.el7</span><br><span class="line">Size        : 178 M</span><br><span class="line">Repo        : mysql57-community/x86_64</span><br><span class="line">Summary     : A very fast and reliable SQL database server</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h3 id="安装-mysql-community-server"><a href="#安装-mysql-community-server" class="headerlink" title="安装 mysql-community-server"></a>安装 mysql-community-server</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></table></figure>

<h3 id="启动-mysql-server"><a href="#启动-mysql-server" class="headerlink" title="启动 mysql server"></a>启动 mysql server</h3><p>配置 mysql server 开机启动，同时启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable mysqld --now</span><br></pre></td></tr></table></figure>

<p>MySQL5.7 会为 root 用户随机生成一个临时密码，密码记录在日志 <code>/var/log/mysqld.log </code> 中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log </span><br><span class="line">2022-11-02T06:09:54.520945Z 1 [Note] A temporary password is generated for root@localhost: ZQc6OCFidi:g</span><br></pre></td></tr></table></figure>

<p>使用临时密码登陆，修改密码，临时密码登陆后不能做任何操作，必须先更改密码</p>
<figure class="highlight shell"><figcaption><span>mysql</span></figcaption><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;WadgyWwRdgDNEb+5Pw==&#x27;;</span><br></pre></td></tr></table></figure>

<h1 id="Mariadb-安装"><a href="#Mariadb-安装" class="headerlink" title="Mariadb 安装"></a>Mariadb 安装</h1><h2 id="环境信息-1"><a href="#环境信息-1" class="headerlink" title="环境信息"></a>环境信息</h2><ul>
<li>Mariadb 5.5</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y mariadb-server</span><br></pre></td></tr></table></figure>

<p>安装后启动，默认密码为空，登陆后使用以下命令修改密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR &#x27;root&#x27;@&#x27;localhost&#x27; = PASSWORD(&#x27;your_password&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>namesilo api 使用</title>
    <url>/202303031036/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://www.namesilo.com/api-reference">Namesilo api 官方文档</a></p>
<p>Python SDK 为 <a href="https://pypi.org/project/python-namesilo/">python-namesilo</a>，安装方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install python-namesilo</span><br></pre></td></tr></table></figure>

<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3.11.2</li>
<li>python-namesilo&#x3D;&#x3D;1.1.3</li>
</ul>
<h1 id="python-namesilo-常见用法示例"><a href="#python-namesilo-常见用法示例" class="headerlink" title="python-namesilo 常见用法示例"></a>python-namesilo 常见用法示例</h1><h2 id="获取账号中的所有域名"><a href="#获取账号中的所有域名" class="headerlink" title="获取账号中的所有域名"></a>获取账号中的所有域名</h2><p>使用 SDK 之前需要先登陆账号创建 API Token，详细使用方法可以查看帮助信息，获取所有域名使用方法 <code>list_domains</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> namesilo.core <span class="keyword">import</span> NameSilo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = <span class="string">&#x27;KKKKKKKKKKKKKKKKKK&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = NameSilo(token=key, sandbox=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(client)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.list_domains()</span><br></pre></td></tr></table></figure>

<h2 id="获取指定域名的详细信息"><a href="#获取指定域名的详细信息" class="headerlink" title="获取指定域名的详细信息"></a>获取指定域名的详细信息</h2><p>获取指定域名的详细信息使用 <code>get_domain_info</code>，此方法返回一个 <code>DomainInfo</code> 对象，里面包括域名创建时间，过期时间，nameserver等信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.get_domain_info(<span class="string">&#x27;test.app&#x27;</span>)</span><br><span class="line">&lt;namesilo.common.models.DomainInfo <span class="built_in">object</span> at <span class="number">0x7f71a0530a50</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(client.get_domain_info(<span class="string">&#x27;test.app&#x27;</span>))</span><br><span class="line">[<span class="string">&#x27;auto_renew&#x27;</span>, <span class="string">&#x27;contacts&#x27;</span>, <span class="string">&#x27;created&#x27;</span>, <span class="string">&#x27;expires&#x27;</span>, <span class="string">&#x27;locked&#x27;</span>, <span class="string">&#x27;name_servers&#x27;</span>, <span class="string">&#x27;private&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;traffic_type&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>云平台</category>
        <category>Namesilo</category>
      </categories>
      <tags>
        <tag>Namesilo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nextcloud 安装配置</title>
    <url>/202405081010/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Nextcloud-All-in-One"><a href="#Nextcloud-All-in-One" class="headerlink" title="Nextcloud All-in-One"></a>Nextcloud All-in-One</h1><p>Nextcloud All-in-One 在一个 Docker 容器中提供了方便部署和维护的 Nextcloud 方式。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Nextcloud All-in-One](https://github.com/nextcloud/all-in-one#nextcloud-all-in-one)">[1]</span></a></sup></p>
<h2 id="使用-docker-compose-部署"><a href="#使用-docker-compose-部署" class="headerlink" title="使用 docker compose 部署"></a>使用 docker compose 部署</h2><p>为方便后期管理及迁移，建议使用 <code>docker compose</code> 方式部署。<code>docker-compose.yml</code> 参考文件如下： <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[compose.yaml](https://github.com/nextcloud/all-in-one/blob/main/compose.yaml)">[2]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nextcloud-aio-mastercontainer:</span><br><span class="line">    image: nextcloud/all-in-one:latest</span><br><span class="line">    container_name: nextcloud-aio-mastercontainer</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8000:80&quot;</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">      - &quot;8443:8443&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - nextcloud_aio_mastercontainer:/mnt/docker-aio-config</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock:ro</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  nextcloud_aio_mastercontainer:</span><br><span class="line">    name: nextcloud_aio_mastercontainer</span><br><span class="line">    driver: local</span><br><span class="line">    driver_opts:</span><br><span class="line">      type: none</span><br><span class="line">      o: bind</span><br><span class="line">      device: /opt/Nextcloud/data/</span><br></pre></td></tr></table></figure>

<p>使用 <code>docker compose</code> 方式部署注意事项：</p>
<ul>
<li><code>name: nextcloud_aio_mastercontainer</code>: Volume 名称必须是 <code>nextcloud_aio_mastercontainer</code>，否则会报错找不到卷 <code>nextcloud_aio_mastercontainer</code>: <code>It seems like you did not give the mastercontainer volume the correct name? (The &#39;nextcloud_aio_mastercontainer&#39; volume was not found.). Using a different name is not supported since the built-in backup solution will not work in that case!</code></li>
</ul>
<p>启动成功后，根据提示在浏览器中打开 <code>Nextcloud AIO setup</code> 页面并记录页面显示的密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">You should be able to open the Nextcloud AIO Interface now on port 8080 of this server!</span><br><span class="line">E.g. https://internal.ip.of.this.server:8080</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_233.png"></p>
<p>根据页面提示登陆，跟随页面提示进行新实例初始化。</p>
<blockquote>
<p>初始化过程中要提供域名，系统会自动为域名颁发证书（使用系统 443 端口映射到容器中的 8443 端口）</p>
</blockquote>
<p>默认的 Nextcloud AIO 未部署反向代理，要使用反向代理请参考文档： <a href="https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md">Reverse Proxy Documentation</a></p>
<p><a href="https://github.com/nextcloud/all-in-one?tab=readme-ov-file#explanation-of-used-ports">Nextcloud AIO 使用的端口说明</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/nextcloud/all-in-one#nextcloud-all-in-one">Nextcloud All-in-One</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/nextcloud/all-in-one/blob/main/compose.yaml">compose.yaml</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>Nextcloud</category>
      </categories>
      <tags>
        <tag>Nextcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>nfs 服务部署使用</title>
    <url>/202210251713/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>NFS（Network File System 的缩写），它的主要功能是：通过网络、让不同的机器、不同的 OS 可以共享彼此的文件</p>
<p>NFS 服务器可以允许 NFS 客户端将远端 NFS 服务器的共享目录挂载到自己的系统上，当作本地磁盘一样使用</p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<h1 id="服务安装"><a href="#服务安装" class="headerlink" title="服务安装"></a>服务安装</h1><h2 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h2><p>安装需要的软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install nfs-utils rpcbind</span><br></pre></td></tr></table></figure>

<p>创建数据目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /data/NFSDataHome</span><br><span class="line">chmod 666 /data/NFSDataHome</span><br></pre></td></tr></table></figure>

<p>修改配置文件 <code>/etc/exports</code>:</p>
<figure class="highlight shell"><figcaption><span>/etc/exports</span></figcaption><table><tr><td class="code"><pre><span class="line">/data/NFSDataHome 192.168.1.0/24(rw,sync,insecure,no_subtree_check,no_root_squash) </span><br><span class="line">/data/NFSDataHome *(ro)</span><br></pre></td></tr></table></figure>

<p>相关选项说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ro</td>
<td>只读访问</td>
</tr>
<tr>
<td>rw</td>
<td>读写访问</td>
</tr>
<tr>
<td>sync</td>
<td>所有数据在请求时写入共享</td>
</tr>
<tr>
<td>async</td>
<td>nfs 在写入数据前可以响应请求</td>
</tr>
<tr>
<td>secure</td>
<td>nfs 通过 1024 以下的安全 TCP&#x2F;IP 端口发送</td>
</tr>
<tr>
<td>insecure</td>
<td>nfs 通过 1024 以上的端口发送</td>
</tr>
<tr>
<td>wdelay</td>
<td>如果多个用户要写入 nfs 目录，则归组写入（默认）</td>
</tr>
<tr>
<td>no_wdelay</td>
<td>如果多个用户要写入 nfs 目录，则立即写入，当使用 async 时，无需此设置</td>
</tr>
<tr>
<td>hide</td>
<td>在 nfs 共享目录中不共享其子目录</td>
</tr>
<tr>
<td>no_hide</td>
<td>共享 nfs 目录的子目录</td>
</tr>
<tr>
<td>subtree_check</td>
<td>如果共享 &#x2F;usr&#x2F;bin 之类的子目录时，强制 nfs 检查父目录的权限（默认）</td>
</tr>
<tr>
<td>no_subtree_check</td>
<td>不检查父目录权限</td>
</tr>
<tr>
<td>all_squash</td>
<td>无论 NFS 客户端以哪种用户身份访问，均映射为 NFS 服务器的 nfsnobody 用户</td>
</tr>
<tr>
<td>no_all_squash</td>
<td>保留共享文件的 UID 和 GID（默认）</td>
</tr>
<tr>
<td>root_squash</td>
<td>当 NFS 客户端以 root 用户身份访问时，映射为 NFS 服务器的 nfsnobody 用户</td>
</tr>
<tr>
<td>no_root_squash</td>
<td>当 NFS 客户端以 root 身份访问时，映射为 NFS 服务器的 root 用户，也就是要为超级用户保留权限。这个选项会留下严重的安全隐患，一般不建议采用。</td>
</tr>
<tr>
<td>anonuid&#x3D;xxx</td>
<td>指定 nfs 服务器 &#x2F;etc&#x2F;passwd 文件中匿名用户的 UID</td>
</tr>
<tr>
<td>anongid&#x3D;xxx</td>
<td>指定 nfs 服务器 &#x2F;etc&#x2F;passwd 文件中匿名用户的 GID</td>
</tr>
</tbody></table>
<span id="more"></span>

<p>启动 <code>rpcbind</code> 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable rpcbind.service --now</span><br></pre></td></tr></table></figure>
<p>启动 <code>nfs</code> 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable nfs.service --now</span><br></pre></td></tr></table></figure>

<p>检查 expose 的资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">showmount -e localhost</span></span><br><span class="line">Export list for localhost:</span><br><span class="line">/data/NFSDataHome *</span><br></pre></td></tr></table></figure>

<p>默认情况下，NFS server 启动时会随机启动多个端口并向 RPC 注册，有防火墙的场景下，不利于防火墙配置确切的端口。所以建议配置 NFS 使用固定的端口，配置方式如下</p>
<ol>
<li><p>编辑配置文件 <code>/etc/sysconfig/nfs</code>，添加以下内容</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RQUOTAD_PORT=30001</span><br><span class="line"></span><br><span class="line">LOCKD_TCPPORT=30002</span><br><span class="line"></span><br><span class="line">LOCKD_UDPPORT=30002</span><br><span class="line"></span><br><span class="line">MOUNTD_PORT=30003</span><br><span class="line"></span><br><span class="line">STATD_PORT=30004</span><br></pre></td></tr></table></figure></li>
<li><p>重启服务</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart rpcbind</span><br><span class="line">systemctl restart nfs</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>查看 NFS 使用的 RPC 端口</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rpcinfo -p</span><br><span class="line">program vers proto   port  service</span><br><span class="line"> 100000    4   tcp    111  portmapper</span><br><span class="line"> 100000    3   tcp    111  portmapper</span><br><span class="line"> 100000    2   tcp    111  portmapper</span><br><span class="line"> 100000    4   udp    111  portmapper</span><br><span class="line"> 100000    3   udp    111  portmapper</span><br><span class="line"> 100000    2   udp    111  portmapper</span><br><span class="line"> 100005    1   udp  30003  mountd</span><br><span class="line"> 100005    1   tcp  30003  mountd</span><br><span class="line"> 100005    2   udp  30003  mountd</span><br><span class="line"> 100005    2   tcp  30003  mountd</span><br><span class="line"> 100005    3   udp  30003  mountd</span><br><span class="line"> 100005    3   tcp  30003  mountd</span><br><span class="line"> 100003    3   tcp   2049  nfs</span><br><span class="line"> 100003    4   tcp   2049  nfs</span><br><span class="line"> 100227    3   tcp   2049  nfs_acl</span><br><span class="line"> 100003    3   udp   2049  nfs</span><br><span class="line"> 100003    4   udp   2049  nfs</span><br><span class="line"> 100227    3   udp   2049  nfs_acl</span><br><span class="line"> 100021    1   udp  30002  nlockmgr</span><br><span class="line"> 100021    3   udp  30002  nlockmgr</span><br><span class="line"> 100021    4   udp  30002  nlockmgr</span><br><span class="line"> 100021    1   tcp  30002  nlockmgr</span><br><span class="line"> 100021    3   tcp  30002  nlockmgr</span><br><span class="line"> 100021    4   tcp  30002  nlockmgr</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加防火墙规则</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT 6 -p udp -m multiport --dports 111,2049,30001:30004 -j ACCEPT -m comment --comment &quot;nfs&quot;</span><br><span class="line">iptables -I INPUT 6 -p tcp -m multiport --dports 111,2049,30001:30004 -j ACCEPT -m comment --comment &quot;nfs&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h2><h3 id="linux-客户端安装"><a href="#linux-客户端安装" class="headerlink" title="linux 客户端安装"></a>linux 客户端安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br></pre></td></tr></table></figure>

<p>测试 NFS 服务端 expose 的资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">showmount -e <span class="variable">$&#123;NFS_SERVER_IP&#125;</span></span></span><br><span class="line">Export list for $&#123;NFS_SERVER_IP&#125;:</span><br><span class="line">/data/NFSDataHome *</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>客户端挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount.nfs $&#123;NFS_SERVER_IP&#125;:/data/NFSDataHome /mnt/</span><br></pre></td></tr></table></figure>

<p>配置开机自动挂载，在 <code>/etc/fstab</code> 文件中添加以下内容</p>
<figure class="highlight shell"><figcaption><span>/etc/fstab</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;NFS_SERVER_IP&#125;:/data/NFSDataHome /mnt nfs defaults        0 0</span></span><br></pre></td></tr></table></figure>

<h3 id="Windows-客户端安装"><a href="#Windows-客户端安装" class="headerlink" title="Windows 客户端安装"></a>Windows 客户端安装</h3><ul>
<li>windows os： Win 10</li>
</ul>
<p>打开控制面板 -&gt; 程序 -&gt; 打开或关闭windows功能 -&gt; NFS客户端 ，启用 NFS。</p>
<p>cmd  执行以下命令挂载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount IP:/nfsroot X:</span><br></pre></td></tr></table></figure>
<p>其中，<code>IP</code> 为 NFS 服务器得 IP，<code>/nfsroot</code> 为你挂载得 NFS 目录路径，执行成功后 NFS 路径会被挂载到 <code>X:</code> 盘</p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="windows-挂载-NFS-后访问速度慢"><a href="#windows-挂载-NFS-后访问速度慢" class="headerlink" title="windows 挂载 NFS 后访问速度慢"></a>windows 挂载 NFS 后访问速度慢</h2><p>在 cmd 中通过命令 <code>mount</code> 查看挂载信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount</span></span><br><span class="line"></span><br><span class="line">Local    Remote                                 Properties</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">x:       \\nfsserver\NFSDataHome                UID=-2, GID=-2</span><br><span class="line">                                                rsize=1048576, wsize=1048576</span><br><span class="line">                                                mount=soft, timeout=0.8</span><br><span class="line">                                                retry=1, locking=yes</span><br><span class="line">                                                fileaccess=755, lang=ANSI</span><br><span class="line">                                                casesensitive=no</span><br><span class="line">                                                sec=sys</span><br></pre></td></tr></table></figure>
<p>输出中可以看到读写大小（<code>rsize=1048576, wsize=1048576</code>，1M），NFS 服务默认的读写大小在配置文件 <code>/etc/nfsmount.conf</code>，默认大小为 8k</p>
<figure class="highlight shell"><figcaption><span>/etc/nfsmount.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Maximum Read Size (<span class="keyword">in</span> Bytes)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Rsize=8k</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Maximum Write Size (in Bytes)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Wsize=8k</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将此配置修改为和 windows nfs 客户端的读写大小一样，重启 nfs 服务，window 重新挂载。</p>
<h2 id="Mysql-数据目录使用-NFS-文件系统"><a href="#Mysql-数据目录使用-NFS-文件系统" class="headerlink" title="Mysql 数据目录使用 NFS 文件系统"></a>Mysql 数据目录使用 NFS 文件系统</h2><blockquote>
<p>Mysql 数据目录使用 NFS 文件系统，只用来测试</p>
</blockquote>
<p>当 NFS 服务使用选项 <code>all_squash</code> 时，因为所有的客户端操作时，用户身份都会映射为 NFS 服务器上面的 <code>nfsnobody</code> 用户，Mysql 默认的用户 <code>mysql</code> 对此 NFS 目录权限受到限制，会导致初始化失败，报以下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysql_install_db --defaults-file=/etc/my.cnf -u mysql --basedir=/var/lib/mysql --datadir=/var/lib/mysql/data/</span></span><br><span class="line">2023-02-10 14:53:22 [WARNING] mysql_install_db is deprecated. Please consider switching to mysqld --initialize</span><br><span class="line">2023-02-10 14:53:22 [ERROR]   Failed to set file ownership for /var/lib/mysql/data/ to (999, 1002)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2023-02-10 14:53:59 [ERROR]   Child process: /bin/mysqldterminated prematurely with errno= 32</span><br></pre></td></tr></table></figure>

<p>针对此情况，可以修改 Mysql 服务运行的用户为 <code>nfsnobody</code>，并且此 <code>nfsnobody</code> 用户需要和 NFS 服务器上面的 <code>nfsnobody</code> 用户具有相同的 UID 和 GID</p>
<p>查看 NFS 服务器上面的 <code>nfsnobody</code> 的 ID 信息，默认为 <code>65534</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">id</span> nfsnobody</span></span><br><span class="line">uid=65534(nfsnobody) gid=65534(nfsnobody) groups=65534(nfsnobody)</span><br></pre></td></tr></table></figure>

<p>在 Mysql 服务器上面创建具有相同 UID 和 GID 的 <code>nfsnobody</code> 用户和组信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd --gid 65534 nfsnobody</span><br><span class="line"></span><br><span class="line">useradd --uid 65534 --gid 65534 -M -s /sbin/nologin</span><br></pre></td></tr></table></figure>

<p>使用 <code>nfsnobody</code> 用户初始化数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_install_db --defaults-file=/etc/my.cnf -u nfsnobody --basedir=/var/lib/mysql --datadir=/var/lib/mysql/data/</span><br></pre></td></tr></table></figure>

<p>修改 mysql 服务配置文件，配置以下内容，指定运行时使用的用户</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">user = mysql</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 服务常用配置说明</title>
    <url>/202207261420/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Nginx-服务配置"><a href="#Nginx-服务配置" class="headerlink" title="Nginx 服务配置"></a>Nginx 服务配置</h1><h2 id="全局通用配置"><a href="#全局通用配置" class="headerlink" title="全局通用配置"></a>全局通用配置</h2><figure class="highlight shell"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">user nginx nginx;    </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建议设置为 cpu 核心数或者 cpu 核心数的 2 倍，进程会包含一个 `master process`，多个 `worker process`</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">master process 负责绑定端口、调度进程等，不负责业务的处理</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">worker process 是业务进程，负责业务的处理</span></span><br><span class="line">worker_processes auto;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一个 worker 进程可以打开的最大的 fd 个数，受 Linux 内核限制</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">理论值应该是系统最多打开文件数（<span class="built_in">ulimit</span> -n）与 nginx 进程数相除</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可通过 <span class="built_in">ulimit</span> 设置或修改系统文件：`/etc/securit/limits.conf`</span></span><br><span class="line">worker_rlimit_nofile 1024；</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cpu 亲和性设置</span> </span><br><span class="line">worker_cpu_affinity    0001 0010 0100 1000;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作进程调度优先级，-20 到 19 之间的值，值越小越优先调用。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果系统同时运行多个任务，你可能需要提高 nginx 的工作进程的优先级</span> </span><br><span class="line">worker_priority 0；              </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ssl 硬件加速服务器，需要硬件支持</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ssl_engine ssl_engine device;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx 是否以守护进程运行，是否让 nignx 运行于后台；调试时可为 off，使得所有信息直接输出在控制台</span></span><br><span class="line">daemon      on | off;         </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">events 模块中包含 nginx 中所有处理连接的设置。</span></span><br><span class="line">events &#123;</span><br><span class="line">    # 每个 worker 进程允许的最多连接数, </span><br><span class="line">    # nginx 服务最大连接数：worker_processes * worker_connections (受 worker_rlimit_nofile 限制)</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">    use epoll;</span><br><span class="line">    </span><br><span class="line">    # 是否允许一次性地响应多个用户请求</span><br><span class="line">    multi_accept on;                    </span><br><span class="line"></span><br><span class="line">    # 是否打开 nginx 的 accept 锁；此锁能够让多个 worker 进行轮流地、序列化地与新的客户端建立连接；</span><br><span class="line">    # 而通常当一个 worker 进程的负载达到其上限的 7/8，master 就尽可能不将请求调度至 worker.</span><br><span class="line">	accept_mutex on | off;              </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HTTP 模块控制着 nginx http 处理的所有核心特性</span></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # 是否在错误页面中显示和响应头字段中发出 nginx 版本号。</span><br><span class="line">    # 安全考虑建议关闭</span><br><span class="line">    server_tokens on | off | string; </span><br><span class="line">    </span><br><span class="line">    # 是否启用 sendfile 内核复制模式功能。作为静态服务器可以提供最大的 IO 访问速度。</span><br><span class="line">    sendfile on | off; </span><br><span class="line">    </span><br><span class="line">    # 尽快发送数据，否则会在数据包达到一定大小后再发送数据。这样会减少网络通信次数，降低阻塞概率，但也会影响响应及时性。</span><br><span class="line">    # 比较适合于文件下载这类的大数据通信场景。</span><br><span class="line">    tcp_nodelay on|off; </span><br><span class="line">    </span><br><span class="line">    # 单位s，适当降低此值可以提高响应连接数量</span><br><span class="line">    keepalive_timeout  65; </span><br><span class="line">    </span><br><span class="line">    # 一次长连接上允许的最大请求数</span><br><span class="line">    keepalive_requests 100；       </span><br><span class="line">    </span><br><span class="line">    # 禁止指定浏览器使用 keepalive</span><br><span class="line">    keepalive_disable msie6|none；    </span><br><span class="line">    </span><br><span class="line">    # 读取 http 请求首部的超时时长。如果客户端在此时间内未传输整个头，则会向客户端返回 408（请求超时）错误</span><br><span class="line">    client_header_timeout 1;     </span><br><span class="line">    </span><br><span class="line">    # 读取 http 请求包体的超时时间。</span><br><span class="line">    client_body_timeout 2;</span><br><span class="line">    </span><br><span class="line">    # 发送响应的超时时长。超时后连接将关闭。</span><br><span class="line">    send_timeout 5;  </span><br><span class="line">    </span><br><span class="line">    # http 请求包体的最大值，常用于限定客户端所能够请求的最大包体，根据请求首部中的 Content-Length 来检查，以避免无用的传输。</span><br><span class="line">    client_max_body_size 1m;</span><br><span class="line">    </span><br><span class="line">    # 限制客户端每秒传输的字节数，默认为0，表示没有限制。单位 Byte/s</span><br><span class="line">    limit_rate 0;</span><br><span class="line">    </span><br><span class="line">    # nginx 向客户端发送响应报文时，如果大小超过了此处指定的值，则后续的发送过程开始限速，单位 Byte</span><br><span class="line">    limit_rate_after 0;</span><br><span class="line">    </span><br><span class="line">    # 是否忽略不合法的 http 首部，默认为 on，off 意味着请求首部中出现不合规的首部将拒绝响应。</span><br><span class="line">    ignore_invalid_headers on|off;</span><br><span class="line">    </span><br><span class="line">    # 用户访问的文件不存在时，是否将其记录到错误日志中。</span><br><span class="line">    log_not_found on|off;   </span><br><span class="line">    </span><br><span class="line">    # nginx 使用的 dns 地址，及缓存解析结果的时间               </span><br><span class="line">    resolver 8.8.8.8 [valid=time] [ipv6=on|off];</span><br><span class="line">    </span><br><span class="line">    # dns 解析超时时间 </span><br><span class="line">    resolver_timeout 2；     </span><br><span class="line">    </span><br><span class="line">    # 是否打开文件缓存功能，max：用于缓存条目的最大值，</span><br><span class="line">    # inactive：某缓存条目在指定时长内没有被访问过时，将自动被删除，即缓存有效期，通常默认为 60s。</span><br><span class="line">    open_file_cache off;  </span><br><span class="line">    open_file_cache max=N [inactive=time];    </span><br><span class="line">    </span><br><span class="line">    # 是否缓存文件找不到或没有权限访问等相关信息。</span><br><span class="line">    open_file_cache_errors on | off; </span><br><span class="line">    </span><br><span class="line">    # 多长时间检查一次缓存中的条目是否超出非活动时长。</span><br><span class="line">    # 建议值：小于等于 open_file_cache inactive</span><br><span class="line">    open_file_cache_valid 60;   </span><br><span class="line">    </span><br><span class="line">    # 在 open_file_cache inactive指 定的时长内被访问超过此处指定的次数时，才不会被删除（删除低命中率的缓存）。</span><br><span class="line">    open_file_cache_min_uses 2;     </span><br><span class="line">    </span><br><span class="line">    # 开启内容压缩，可以有效降低客户端的访问流量和网络带宽</span><br><span class="line">    gzip on | off;</span><br><span class="line">    </span><br><span class="line">    # 内容超过最少长度后才开启压缩，太短的内容压缩效果不佳，且会浪费系统资源。</span><br><span class="line">    # 压缩长度会作为 http 响应头 Content-Length 字段返回给客户端。 建议值：64</span><br><span class="line">    gzip_min_length length;</span><br><span class="line">    </span><br><span class="line">    # 压缩级别，默认值为 1。范围为1～9级，压缩级别越高压缩率越高，但对系统性能要求越高。建议值：4</span><br><span class="line">    gzip_comp_level 1~9;</span><br><span class="line">    </span><br><span class="line">    # 压缩内容类型，默认为 text/html;。只压缩 html 文本，一般我们都会压缩 js、css、json 之类的，可以把这些常见的文本数据都配上。</span><br><span class="line">    如：text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line">    gzip_types mime-type …;     </span><br><span class="line">    </span><br><span class="line">    # 自动显示目录</span><br><span class="line">    autoindex on;</span><br><span class="line">    </span><br><span class="line">    # off ： 以人类易读的方式显示文件大小，on：以 bytes 显示文件大小</span><br><span class="line">    autoindex_exact_size off;</span><br><span class="line">    </span><br><span class="line">    # 定义限制区域，imit_req_zone 只能放在 http &#123;&#125; 内，使用此限制可以在 http &#123;&#125; （对服务器内所有的网站生效）、server &#123;&#125; （对具体的一个网站生效）或 location &#123;&#125; （对具体的一个网址生效）</span><br><span class="line">    # 此区域名称为 test，可根据需求自定义； 10m 表示此区域存储 key（$binary_remote_addr）使用的大小</span><br><span class="line">    # 存储大小，一般 1m 空间大约能保存 1.6 万条 IP 地址，空间满了新数据会覆盖旧数据</span><br><span class="line">    # rate=1r/m ，限制访问请求频率为每分钟 1 次，可根据需要自行设置，1r/s 是 1 秒 1 次，时间单位只能选择 s (秒)或 m (分)，最低频率限制是每分钟 1 次访问请求</span><br><span class="line">    # rate=10r/m，1分钟最多访问 10 次，同时不能超过 1r/6s，即 6s 内最多访问 1 次。超过 1r/6s 返回 503</span><br><span class="line">    limit_req_zone $binary_remote_addr zone=test:10m rate=1r/m;</span><br><span class="line">    </span><br><span class="line">    # 定义日志格式</span><br><span class="line">    log_format main &#x27;&#123; time: $time_iso8601|&#x27;</span><br><span class="line">                    &#x27;http_host:$http_host|&#x27;</span><br><span class="line">                    &#x27;cdn_ip:$remote_addr|&#x27;</span><br><span class="line">                    &#x27;request:$request|&#x27;</span><br><span class="line">                    &#x27;request_method:$request_method|&#x27;</span><br><span class="line">                    &#x27;http_user_agent:$http_user_agent|&#x27;</span><br><span class="line">                    &#x27;size:$body_bytes_sent|&#x27;</span><br><span class="line">                    &#x27;responsetime:$request_time|&#x27;</span><br><span class="line">                    &#x27;upstreamtime:$upstream_response_time|&#x27;</span><br><span class="line">                    &#x27;upstreamhost:$upstream_addr|&#x27;</span><br><span class="line">                    &#x27;upstreamstatus:$upstream_status|&#x27;</span><br><span class="line">                    &#x27;url:$http_host$uri|&#x27;</span><br><span class="line">                    &#x27;http_x_forwarded_for:$clientRealIp|&#x27;</span><br><span class="line">                    &#x27;status:$status&#125;&#x27;;</span><br><span class="line">    </span><br><span class="line">    # server 负责具体的 http 服务器实现</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 [default_server]  [rcvbuf=SIZE]  [sndbuf=SIZE] [ssl];</span><br><span class="line">        </span><br><span class="line">        # 可使用通配符*或正则表达式(~开头)，多个域名先精确匹配，再通配，再正则,&#x27;_&#x27;表示空主机头</span><br><span class="line">        server_name  _  ;</span><br><span class="line">        </span><br><span class="line">        access_log logs/access.log main;</span><br><span class="line">        error_log logs/access.err.log;</span><br><span class="line">        </span><br><span class="line">        # 跨域配置</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">        add_header Access-Control-Allow-Headers &#x27;Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With&#x27;;</span><br><span class="line">        add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span><br><span class="line">        add_header Access-Control-Allow-Credentials: true;</span><br><span class="line">        </span><br><span class="line">        location / &#123;       </span><br><span class="line">            # web 资源路径             </span><br><span class="line">            root   html;          </span><br><span class="line">            </span><br><span class="line">            # 定义默认页面，从左往右匹配           </span><br><span class="line">            index  index.html index.htm;   </span><br><span class="line">            </span><br><span class="line">            # 自左向右读取指定路径，找到即停止，如果都不存在，返回一个错误码</span><br><span class="line">            try_files $uri $uri.html $uri/index.html =404;        </span><br><span class="line">            </span><br><span class="line">            # 自左向右读取指定路径，找到即停止，如果都不存在，返回一个 uri</span><br><span class="line">            try_files $uri $uri.html $uri/index.html /404.html; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /i/ &#123; </span><br><span class="line">            # 路径别名，只能用于 location 中。</span><br><span class="line">            # 访问 http://a.com/i/a.html, 资源路径为：/data/www/html/a.html</span><br><span class="line">            # 若是root指令，访问 http://a.com/i/a.html，资源路径为：/data/www/html/i/a.html</span><br><span class="line">		    alias /data/www/html/;          </span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">	    # 对于某个请求发生错误，如果匹配到错误码，重定向到新的 url</span><br><span class="line">	    error_page  404              /404.html; </span><br><span class="line">	    error_page   500 502 503 504  /50x.html;</span><br><span class="line">	    </span><br><span class="line">	    # 对于某个请求发生错误，如果匹配到错误码，重定向到新的 url,同时可以更改返回码</span><br><span class="line">	    error_page 404 =200 /404.html;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    # 包含其他配置文件</span><br><span class="line">    include vhosts/*.conf;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="Server-常用配置"><a href="#Server-常用配置" class="headerlink" title="Server 常用配置"></a>Server 常用配置</h2><h3 id="nginx-代理-php"><a href="#nginx-代理-php" class="headerlink" title="nginx 代理 php"></a>nginx 代理 php</h3><figure class="highlight shell"><figcaption><span>vhosts/web.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name  _  ;</span><br><span class="line">    root           html;</span><br><span class="line">    </span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;          ###fastcgi程序的页面文件位置，$document_root = 之前配置的root           html;</span><br><span class="line">        ##include        fastcgi_params;</span><br><span class="line">	    fastcgi_param  QUERY_STRING       $query_string;                  ###将请求中的参数透传</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="nginx-状态监控"><a href="#nginx-状态监控" class="headerlink" title="nginx 状态监控"></a>nginx 状态监控</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置访问路径，即 uri</span></span><br><span class="line">location = /nginx_status&#123;  </span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">开启该模块</span></span><br><span class="line">  stub_status on;    </span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">关闭日志</span>  </span><br><span class="line">  access_log off;   </span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">允许访问的 ip，即白名单 ip</span> </span><br><span class="line">  allow 101.106.102.129;        </span><br><span class="line">  allow 127.0.0.1;</span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">拒绝白名单 ip 以外的 ip 访问</span></span><br><span class="line">  deny all;               </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ssl-配置"><a href="#ssl-配置" class="headerlink" title="ssl 配置"></a>ssl 配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name csms.tech;</span><br><span class="line">  </span><br><span class="line">    ssl_certificate /path/to/your_certificate.pem;</span><br><span class="line">    ssl_certificate_key /path/to/your_key.key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制跳转 https</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name csms.tech;</span><br><span class="line">    rewrite ^(.*)$  https://$host$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 pem 类型证书链：可将中间证书导入 pem 文件，再将私钥导入 pem 文件，<code>ssl_certificate</code> 和 <code>ssl_certificate_key</code> 都使用 pem 文件，可解决以下报错：<br>SSL_CTX_use_PrivateKey_file(“pri.key”) failed  (SSL: error:0906D06C:PEM routines:PEM_read_bio:no start line:Expecting: ANY PRIVATE KEY error:140B0009:SSL routines:SSL_CTX_use_PrivateKey_file:PEM lib</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat gd_bundle-g2-g1.crt &gt;&gt; f549150b196cd59e.pem</span><br><span class="line">cat f549150b196cd59e.key &gt;&gt; f549150b196cd59e.pem</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">ssl_certificate f549150b196cd59e.pem;</span><br><span class="line">ssl_certificate_key  f549150b196cd59e.pem;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="配置-upstream-代理"><a href="#配置-upstream-代理" class="headerlink" title="配置 upstream 代理"></a>配置 upstream 代理</h3><figure class="highlight shell"><figcaption><span>upstream.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    # 调度策略,默认为轮询</span><br><span class="line">    ip_hash | url_hash ...</span><br><span class="line">    </span><br><span class="line">    # 后端服务器列表</span><br><span class="line">    # backup: 其它所有的非 backup 机器 down 或者忙的时候，请求 backup 机器。所以这台机器压力会最轻。</span><br><span class="line">    # max_fails:允许请求失败的次数，默认为 1.当超过最大次数时，返回 proxy_next_upstream 模块定义的错误.</span><br><span class="line">    # fail_timeout : max_fails 次失败后，暂停的时间。 </span><br><span class="line">    server 10.0.0.1:8080 [weight=1] [backup] [down] [max_fails] [fail_timeout];</span><br><span class="line">    server 10.0.0.2:8080 [weight=1] [backup] [down] [max_fails] [fail_timeout];</span><br><span class="line"></span><br><span class="line">    keepalive 2000;</span><br><span class="line">    </span><br><span class="line">    # 后端健康检测，需要第三方插件 ngx_http_healthcheck_module</span><br><span class="line">    # healthcheck_enabled;         </span><br><span class="line">    # healthcheck_delay 3000;</span><br><span class="line">    # healthcheck_timeout 1000;</span><br><span class="line">    # healthcheck_failcount 2;</span><br><span class="line">    # healthcheck_send &#x27;GET /healthcheck.html HTTP/1.0&#x27; &#x27;Host: local.com&#x27; &#x27;Connection: close&#x27;;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;                                                         </span><br><span class="line">    server_name  csms.tech;                                               </span><br><span class="line">    client_max_body_size 1024M;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        # 指定协议、主机名、端口</span><br><span class="line">        proxy_pass http://myserver/uri;</span><br><span class="line">                     </span><br><span class="line">        [proxy_set_header Host $host:$server_port;]</span><br><span class="line">        [proxy_redirect     off;]</span><br><span class="line">        [proxy_set_header X-Real-IP $remote_addr;]</span><br><span class="line">        [proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;]</span><br><span class="line">        [proxy_set_header X-Forwarded-Proto https;]</span><br><span class="line">        [proxy_ignore_client_abort on;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ip-限制"><a href="#ip-限制" class="headerlink" title="ip 限制"></a>ip 限制</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;                                                         </span><br><span class="line">    server_name  csms.tech;</span><br><span class="line">    </span><br><span class="line">    root html;</span><br><span class="line">    </span><br><span class="line">    if ($http_x_forwarded_for !~ (1.1.1.1|1.1.1.2)) &#123;</span><br><span class="line">        return 403;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="地区限制"><a href="#地区限制" class="headerlink" title="地区限制"></a>地区限制</h3><p>依赖 nginx 的 <code>http_geoip_module</code> 模块，检查 <code>GeoIP</code> 是否安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./sbin/nginx -V </span><br></pre></td></tr></table></figure>
<p>输出结果中如果不包含：<code>--with-http_geoip_module</code>，说明未安装，重新编译安装 nginx<br>安装 <code>http_geoip_module</code> 模块后使用以下配置</p>
<figure class="highlight shell"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    geoip_country /usr/share/GeoIP/GeoIP.dat;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name csms.tech;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">            if ($geoip_country_code != CN) &#123;</span><br><span class="line">                root outChina;</span><br><span class="line">            &#125;</span><br><span class="line">            root China;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="server-中-location-优先级"><a href="#server-中-location-优先级" class="headerlink" title="server 中 location 优先级"></a>server 中 <code>location</code> 优先级</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 精确匹配，最高优先级</span><br><span class="line">    location = /url  &#123;&#125;        </span><br><span class="line"></span><br><span class="line">    # 从前往后匹配，匹配到即停止继续匹配，不是正则匹配，第二优先级</span><br><span class="line">    location ^~ /uri  &#123;&#125;          </span><br><span class="line"></span><br><span class="line">    # 正则匹配，~ 区分大小写， ~* 不区分大小写，第三优先级</span><br><span class="line">    location ~ ^/url$ &#123;&#125;    </span><br><span class="line">    location ~* ^/url$ &#123;&#125;    </span><br><span class="line">	</span><br><span class="line">    # / 会匹配到所有未被匹配到的 url</span><br><span class="line">    location /documents/ &#123;&#125; </span><br><span class="line">    location / &#123;&#125; </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="301-跳转配置"><a href="#301-跳转配置" class="headerlink" title="301 跳转配置"></a>301 跳转配置</h3><p>如下配置，使用 <code>rewrite</code> 或 <code>return</code> 指令，所有 <a href="https://csms.tech/"><code>csms.tech</code></a> 的请求都会 <code>301</code> 重定向到 <a href="https://csms.tech/"><code>www.csms.tech</code></a>，并携带原来的 <code>uri</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name csms.tech;</span><br><span class="line">    </span><br><span class="line">    rewrite ^/(.*)$ https://www.csms.tech$1 permanent;</span><br><span class="line">    </span><br><span class="line">    # return 301 https://www.csms.tech$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="url-访问频率限制"><a href="#url-访问频率限制" class="headerlink" title="url 访问频率限制"></a>url 访问频率限制</h3><p>要实现访问频率限制，需要先 <a href="#%E5%85%A8%E5%B1%80%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE">定义好限制区域</a>，如本文中在 http {} 中配置了以下限制区域</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义限制区域，imit_req_zone 只能放在 http &#123;&#125; 内，使用此限制可以在 http &#123;&#125; （对服务器内所有的网站生效）、server &#123;&#125; （对具体的一个网站生效）或 location &#123;&#125; （对具体的一个网址生效）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此区域名称为 <span class="built_in">test</span>，可根据需求自定义； 10m 表示此区域存储 key（<span class="variable">$binary_remote_addr</span>）使用的大小</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">存储大小，一般 1m 空间大约能保存 1.6 万条 IP 地址，空间满了新数据会覆盖旧数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rate=1r/m ，限制访问请求频率为每分钟 1 次，可根据需要自行设置，1r/s 是 1 秒 1 次，时间单位只能选择 s (秒)或 m (分)，最低频率限制是每分钟 1 次访问请求</span></span><br><span class="line">limit_req_zone $binary_remote_addr zone=test:10m rate=1r/m;</span><br></pre></td></tr></table></figure>
<p>在 server {} 中可以使用以下方式使用频率限制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        # ...</span><br><span class="line">        # 对 /api/test/ 进行访问频率限制</span><br><span class="line">        location =/api/test/ &#123;</span><br><span class="line">            # 如果同 IP 一分钟内发起 10 并发请求，第 1 个请求立即处理，其余 9 个直接返回 503 错误</span><br><span class="line">            limit_req zone=test;</span><br><span class="line">            </span><br><span class="line">            # 如果同 IP 一分钟内发起 10 并发请求，第 1 个请求立即处理，第 2-6 个请求缓存后排队 1 分钟处理 1 个，第 7-10 个请求返回 503 错误</span><br><span class="line">            limit_req zone=test burst=5;</span><br><span class="line">            </span><br><span class="line">            # 如果同 IP 一分钟内发起 10 并发请求，第 1-5 个请求立即处理，剩下的 5 个直接返回 503 错误</span><br><span class="line">            # nodelay，如果不设置该选项，严格使用平均速率限制请求数</span><br><span class="line">            # burst=5，则 1m 内最多可请求 5 次。</span><br><span class="line">            # 假设 rate=10r/s，burst=5，只要第 1，2，3，4 秒都未超过 10 次，则第 5 秒可以最多请求 （50 减去第 1-4 秒请求次数的和）</span><br><span class="line">            limit_req zone=test burst=5 nodelay;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="log-中记录客户端传入的自定义头部"><a href="#log-中记录客户端传入的自定义头部" class="headerlink" title="log 中记录客户端传入的自定义头部"></a>log 中记录客户端传入的自定义头部</h3><p>假如客户端请求 Nginx 服务器时，添加了自定义头部 <code>name_id</code>，如果要在日志中引用此自定义头部，需要使用格式 <code>http_name_id</code>，如果直接使用 <code>name_id</code> 会报错： <code>unknown &quot;name_id&quot; variable</code></p>
<p>同时要在 <code>nginx.conf</code> 的 <code>http</code> 模块中配置 <code>underscores_in_headers on;</code> 允许处理带有下划线字符的头字段(如果设置为 <code>off</code>，Nginx 会拒绝包含下划线字符的头字段。日志中记录的字段值会为  <code>-</code>)</p>
<blockquote>
<p><strong>Nginx 使用 <code>$http_ 前缀加上请求头部名称的小写</code> 形式来引用请求头部。</strong></p>
<p><strong>Nginx 默认情况下只捕获小写的头部字段。如果客户端发送的是大写或大小写混合的头部字段，你需要使用 underscores_in_headers 指令来允许 Nginx 处理这类头部</strong></p>
</blockquote>
<h2 id="stream-配置"><a href="#stream-配置" class="headerlink" title="stream 配置"></a>stream 配置</h2><p>nginx 通过 stream 模块实现了 tcp 代理功能，无需其他软件配合即可实现四层代理和七层代理，即：访问该服务器的指定端口，nginx 就可以充当端口转发的作用将流量导向另一个服务器，同时获取目标服务器的返回数据并返回给请求者。这是一个非常实用的功能。</p>
<p>yum 安装的 nginx ，使用以下命令安装 <code>stream</code> 模块 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Nginx Stream 配置](https://blog.junmoyu.com/posts/linux-nginx-install-stream/)">[3]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y nginx-mod-stream</span><br></pre></td></tr></table></figure>
<p><strong>请注意，stream 块和 http 块是两个不同的模块，stream 不属于 http 模块</strong>，即不能放到 <code>/etc/nginx/conf.d/</code>，stream 是通过 tcp 层转发，而不是 http 转发。</p>
<p>如配置在 http 内，启动 nginx 会报如下错误：<br><code>nginx: [emerg] &quot;server&quot; directive is not allowed here</code></p>
<p><code>stream</code> 需要配置在 <code>nginx.conf</code> 中和 <code>http</code> 命令同级的位置。</p>
<figure class="highlight shell"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">load_module /usr/lib64/nginx/modules/ngx_stream_module.so;</span><br><span class="line"></span><br><span class="line">user nginx nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">pid     conf/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">        use     epoll;</span><br><span class="line">        worker_connections  309600;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">        include     mime.types;</span><br><span class="line">        default_type  application/octet-stream;</span><br><span class="line">        ...</span><br><span class="line">        include     vhosts.d/*.conf;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stream config.</span></span><br><span class="line">stream &#123;</span><br><span class="line">    log_format proxy &#x27;&#123;time: $time_local|&#x27;</span><br><span class="line">                  &#x27;remote_addr: $remote_addr|&#x27;</span><br><span class="line">				  &#x27;protocol: $protocol|&#x27;</span><br><span class="line">				  &#x27;bytes_sent: $bytes_sent|&#x27;</span><br><span class="line">				  &#x27;bytes_received: $bytes_received|&#x27;</span><br><span class="line">				  &#x27;session_time: $session_time|&#x27;</span><br><span class="line">				  &#x27;upstream_addr: $upstream_addr|&#x27;</span><br><span class="line">				  &#x27;upstream_bytes_sent: $upstream_bytes_sent|&#x27;</span><br><span class="line">				  &#x27;upstream_bytes_received: $upstream_bytes_received|&#x27;</span><br><span class="line">				  &#x27;upstream_connect_time: $upstream_connect_time|&#x27;</span><br><span class="line">				  &#x27;status: $status&#125;&#x27;;</span><br><span class="line">    # tcp/ip proxy</span><br><span class="line">    include /etc/nginx/tcp.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>安装了 <code>nginx-mod-stream</code>，nginx 启动报错：<code>unknown directive &quot;stream&quot;</code>，需要在 <code>nginx.conf</code> 中手动加载模块：<code>load_module /usr/lib64/nginx/modules/ngx_stream_module.so;</code></p>
<p>stream 模块和 http 模块使用独立的日志格式配置，日志格式通过命令 <code>log_format</code> 配置。</p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="worker-connections-exceed-open-file-resource-limit"><a href="#worker-connections-exceed-open-file-resource-limit" class="headerlink" title="worker_connections exceed open file resource limit"></a>worker_connections exceed open file resource limit</h2><p><strong>问题原因</strong>： worker_rlimit_nofile 的值小于 worker_connections 的值，参数说明可参考 <a href="#%E5%85%A8%E5%B1%80%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE">全局通用配置</a>  </p>
<h2 id="Response-to-preflight-request-doesn’t-pass-access-control-check-The-value-of-the-‘Access-Control-Allow-Origin’-header-in-the-response-must-not-be-the-wildcard-‘-’"><a href="#Response-to-preflight-request-doesn’t-pass-access-control-check-The-value-of-the-‘Access-Control-Allow-Origin’-header-in-the-response-must-not-be-the-wildcard-‘-’" class="headerlink" title="Response to preflight request doesn’t pass access control check: The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘*’"></a>Response to preflight request doesn’t pass access control check: The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘*’</h2><p><strong>错误场景</strong>：</p>
<p>浏览器访问报跨域错误，nginx 已配置了 <code>add_header Access-Control-Allow-Origin *;</code>，具体报错：<code>Access to XMLHttpRequest at &#39;http://spin-gate.test.com/webhooks/preconfigured&#39; from origin &#39;http://spinnaker.test.com&#39; has been blocked by CORS policy: Response to preflight request doesn&#39;t pass access control check: The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;*&#39; when the request&#39;s credentials mode is &#39;include&#39;. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.</code><br><img src="https://i.csms.tech/img_95.png"><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials">问题原因及客户端解决方法</a></p>
<h3 id="nginx-服务端解决方法"><a href="#nginx-服务端解决方法" class="headerlink" title="nginx 服务端解决方法"></a>nginx 服务端解决方法</h3><h4 id="nginx-配置允许单个目标跨域"><a href="#nginx-配置允许单个目标跨域" class="headerlink" title="nginx 配置允许单个目标跨域"></a>nginx 配置允许单个目标跨域</h4><p>nginx 配置 <code>add_header Access-Control-Allow-Origin </code> 可以配置允许跨域，此参数只允许配置单个域名或者 <code>*</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add_header Access-Control-Allow-Origin *;</span></span><br><span class="line">add_header Access-Control-Allow-Origin http://127.0.0.1;</span><br><span class="line">add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">add_header Access-Control-Allow-Headers &#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,lang,access-token&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="nginx-配置允许多个目标跨域"><a href="#nginx-配置允许多个目标跨域" class="headerlink" title="nginx 配置允许多个目标跨域"></a>nginx 配置允许多个目标跨域</h4><p>nginx 配置 <code>add_header Access-Control-Allow-Origin</code> 只能配置一个目标，不能配置多个目标，要使用此指令配置多个目标允许跨域，可参考以下方法</p>
<ul>
<li><p>通过设置变量值解决指定多个域名白名单跨域请求配置</p>
<p>  通过在 nginx 配置中设置变量，来匹配允许跨域的目标，示例代码如下 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[设置变量解决指定多个域名白名单跨域请求配置](https://www.yidude.com/nginx/100001.html)">[1]</span></a></sup></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    set $cors_origin &quot;&quot;;</span><br><span class="line">    if ($http_origin ~* &quot;^http://127.0.0.1$&quot;) &#123;</span><br><span class="line">            set $cors_origin $http_origin;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($http_origin ~* &quot;^http://localhost$&quot;) &#123;</span><br><span class="line">            set $cors_origin $http_origin;</span><br><span class="line">    &#125;</span><br><span class="line">    add_header Access-Control-Allow-Origin $cors_origin;</span><br><span class="line">    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p>通过以上配置，可实现允许 <code>http://127.0.0.1</code>，<code>http://localhost</code> 跨域，如果需要允许其他目标跨域，以此添加配置即可。</p>
</li>
<li><p>使用 map 实现 Nginx 允许多个域名跨域</p>
<p>  在 Nginx 中可以使用 map 得到一个自定义变量，可以对请求中的 origin 做一个过滤处理，把符合要求的请求域名放到一个变量中，在设置 allow origin 时使用该变量就能实现一个动态的、多个的允许跨域域名，示例配置如下 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用 map 实现 Nginx 允许多个域名跨域](https://priesttomb.github.io/%E6%8A%80%E6%9C%AF/2020/10/24/using-map-to-set-multiple-allow-origins-in-nginx/)">[2]</span></a></sup></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map $http_origin $allow_origin &#123;</span><br><span class="line">    default &quot;&quot;;</span><br><span class="line">    &quot;~^(https?://localhost(:[0-9]+)?)$&quot; $1;</span><br><span class="line">    &quot;~^(https?://127.0.0.1(:[0-9]+)?)$&quot; $1;</span><br><span class="line">    &quot;~^(https?://172.10(.[\d]+)&#123;2&#125;(:[0-9]+)?)$&quot; $1;</span><br><span class="line">    &quot;~^(https?://192.168(.[\d]+)&#123;2&#125;(:[0-9]+)?)$&quot; $1;</span><br><span class="line">  </span><br><span class="line">    &quot;~http://www.123admin.com&quot; http://www.123admin.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       11111;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location ~ /xxx/xx &#123;</span><br><span class="line">        if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">            return 204;</span><br><span class="line">        &#125;</span><br><span class="line">        add_header Access-Control-Allow-Origin $allow_origin;</span><br><span class="line">        add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">        add_header Access-Control-Allow-Headers &#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;;</span><br><span class="line">        add_header Access-Control-Allow-Credentials &#x27;true&#x27;;</span><br><span class="line">        proxy_pass http://1.2.3.4:5678;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  解释说明：</p>
<ul>
<li><p><code>$http_origin</code> 是 Nginx 的内部变量，用于获取请求头中的 origin</p>
</li>
<li><p><code>$allow_origin</code> 是可以自定义的变量名，用于接收 map 返回的值</p>
</li>
<li><p><code>$1</code> 是 Nginx 对 PCRE 中关于后向引用和子组的兼容，用于获取匹配字符串的整个部分，并返回给 <code>$allow_origin</code></p>
</li>
</ul>
</li>
</ul>
<h2 id="Redirect-is-not-allowed-for-a-preflight-request"><a href="#Redirect-is-not-allowed-for-a-preflight-request" class="headerlink" title="Redirect is not allowed for a preflight request"></a>Redirect is not allowed for a preflight request</h2><p>浏览器中请求 url 报错： <code>Access to XMLHttpRequest at &#39;http://test.a.com/api/config&#39; from origin &#39;http://localhost:8080&#39; has been blocked by CORS policy: Response to preflight request doesn&#39;t pass access control check: Redirect is not allowed for a preflight request.</code></p>
<p>错误原因为 Nginx 配置中未启用 <code>Access-Control-Allow-Origin</code> 选项导致。</p>
<h2 id="Nginx-配置-ssl-时未指定-ssl"><a href="#Nginx-配置-ssl-时未指定-ssl" class="headerlink" title="Nginx 配置 ssl 时未指定 ssl"></a>Nginx 配置 ssl 时未指定 ssl</h2><p>nginx 如下的 server 配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name test.com;</span><br><span class="line">      </span><br><span class="line">        ssl_certificate test.com.pem;       </span><br><span class="line">        ssl_certificate_key test.com.pem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过浏览器访问 https 协议，报错： <code>This site can’t provide a secure connection</code> ，<code>ERR_SSL_PROTOCOL_ERROR</code></p>
<p>使用 <code>curl</code> 命令访问报错： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* NSS error -12263 (SSL_ERROR_RX_RECORD_TOO_LONG)</span><br><span class="line">* SSL received a record that exceeded the maximum permissible length.</span><br><span class="line">* Closing connection 0</span><br><span class="line">curl: (35) SSL received a record that exceeded the maximum permissible length.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name test.com;</span><br><span class="line">      </span><br><span class="line">        ssl_certificate test.com.pem;       </span><br><span class="line">        ssl_certificate_key test.com.pem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nginx-service-failed-to-run-‘start-pre’-task-Permission-denied"><a href="#nginx-service-failed-to-run-‘start-pre’-task-Permission-denied" class="headerlink" title="nginx.service failed to run ‘start-pre’ task: Permission denied"></a>nginx.service failed to run ‘start-pre’ task: Permission denied</h2><p>Nginx 服务启动失败，启动报错输出及服务日志如下，启动错误关键信息 <code>because a configured resource limit was exceeded.</code>，<code>nginx.service failed to run &#39;start-pre&#39; task: Permission denied</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl start nginx</span></span><br><span class="line">Job for nginx.service failed because a configured resource limit was exceeded. See &quot;systemctl status nginx.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">journalctl -xe -u nginx</span></span><br><span class="line">-- Unit nginx.service has failed.</span><br><span class="line">-- </span><br><span class="line">-- The result is failed.</span><br><span class="line">systemd[1]: nginx.service failed.</span><br><span class="line">systemd[1]: nginx.service failed to run &#x27;start-pre&#x27; task: Permission denied</span><br><span class="line">systemd[1]: Failed to start nginx - high performance web server.</span><br><span class="line">-- Subject: Unit nginx.service has failed</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">-- </span><br><span class="line">-- Unit nginx.service has failed.</span><br><span class="line">-- </span><br><span class="line">-- The result is failed.</span><br></pre></td></tr></table></figure>

<p>根据日志信息显示，主要问题出在 <code>Permission denied</code>，为定位到具体的权限被拒绝的文件路径，检查 Nginx 日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> nginx.conf</span> </span><br><span class="line"></span><br><span class="line">google_perftools_profiles /tmp/tcmalloc;</span><br><span class="line"></span><br><span class="line">error_log	/home/logs/nginx/error/error.log crit;</span><br></pre></td></tr></table></figure>
<p>查看日志 <code>/home/logs/nginx/error/error.log</code> 输出内容，显示 <code>/tmp/tcmalloc</code> 权限被拒绝。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">tail</span> /home/logs/nginx/error/error.log</span></span><br><span class="line">[crit] 12923#0: ProfilerStart(/tmp/tcmalloc.12923) failed (13: Permission denied)</span><br><span class="line">[crit] 12935#0: ProfilerStart(/tmp/tcmalloc.12935) failed (13: Permission denied)</span><br><span class="line">[crit] 12920#0: ProfilerStart(/tmp/tcmalloc.12920) failed (13: Permission denied)</span><br><span class="line">[crit] 12929#0: ProfilerStart(/tmp/tcmalloc.12929) failed (13: Permission denied)</span><br><span class="line">[crit] 12933#0: ProfilerStart(/tmp/tcmalloc.12933) failed (13: Permission denied)</span><br><span class="line">[crit] 12927#0: ProfilerStart(/tmp/tcmalloc.12927) failed (13: Permission denied)</span><br><span class="line">[crit] 12922#0: ProfilerStart(/tmp/tcmalloc.12922) failed (13: Permission denied)</span><br><span class="line">[crit] 12925#0: ProfilerStart(/tmp/tcmalloc.12925) failed (13: Permission denied)</span><br><span class="line">[crit] 12937#0: ProfilerStart(/tmp/tcmalloc.12937) failed (13: Permission denied)</span><br><span class="line">[crit] 12921#0: ProfilerStart(/tmp/tcmalloc.12921) failed (13: Permission denied)</span><br></pre></td></tr></table></figure>

<p>检查 <code>/tmp</code> 路径权限，结果为 <code>777</code>，再检查特殊权限，看到 <code>/tmp</code> 目录被加了 <code>i</code> 权限（<code>immutable</code>），表示此目录不可更改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ll /</span></span><br><span class="line">...</span><br><span class="line">drwxrwxrwt.  20 root root  4096 Feb  1 13:18 tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lsattr /</span></span><br><span class="line">...</span><br><span class="line">----i----------- /tmp</span><br><span class="line">---------------- /usr</span><br></pre></td></tr></table></figure>
<p>删除 <code>/tmp</code> 目录的 <code>i</code>(immutable) 特殊权限后重启 Nginx 服务正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chattr -R -i /tmp/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lsattr /</span></span><br><span class="line">...</span><br><span class="line">---------------- /var</span><br><span class="line">---------------- /tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl start nginx</span></span><br></pre></td></tr></table></figure>

<h2 id="静态文件加载正常，web-页面未展示样式"><a href="#静态文件加载正常，web-页面未展示样式" class="headerlink" title="静态文件加载正常，web 页面未展示样式"></a>静态文件加载正常，web 页面未展示样式</h2><p>使用 Nginx 服务器作为 Web 服务器，浏览器请求 Web 页面后，所有的资源请求都正常，但是 Web 页面上的样式并未渲染，检查静态文件（CSS，JS 等）都正常加载<br><img src="https://i.csms.tech/img_231.png"></p>
<p>在浏览器上单独请求静态文件（如 js 文件）会直接下载静态文件，而不是展示静态文件内容。正常请求静态文件是要展示静态文件的内容。至此可以确定是 <em><strong>因为 Nginx 响应中未包含文件解析类型导致浏览器不知道文件扩展名和相应的 MIME 类型之间的映射关系</strong></em>。此功能主要由 MIME（Multipurpose Internet Mail Extensions）指示文件的内容类型。出现此问题主要就是因为 Nginx 未正确配置 <code>mime.types</code>.</p>
<p>检查 Nginx 配置文件，发现配置中未包含 <code>mime.types</code> 配置，因此在 Nginx 配置中添加以下配置来解决此问题</p>
<figure class="highlight shell"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">...</span><br><span class="line">include mime.types;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启 Nginx 服务，清空缓存后，再次请求，页面展示正常。</p>
<h1 id="Nginx-常见用法配置示例"><a href="#Nginx-常见用法配置示例" class="headerlink" title="Nginx 常见用法配置示例"></a>Nginx 常见用法配置示例</h1><h2 id="Nginx-反代-FTP-服务"><a href="#Nginx-反代-FTP-服务" class="headerlink" title="Nginx 反代 FTP 服务"></a>Nginx 反代 FTP 服务</h2><p>Nginx 代理 TCP 端口需要使用 <code>stream</code> 模块 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[nginx 代理 ftp 端口，实现文件传输](https://blog.csdn.net/MarshalEagle/article/details/120334328)">[4]</span></a></sup></p>
<p>示例配置前提：</p>
<ul>
<li>FTP 服务器使用 <strong>被动模式</strong> (<a href="/202207231311/" title="vsftpd 服务常用配置说明">vsftpd 服务常用配置说明</a>)</li>
<li>FTP 命令传输端口为 21</li>
<li>FTP 数据传输端口范围为 11001 - 11004</li>
</ul>
<p>nginx 配置文件 <code>nginx.conf</code> 中和  <code>http</code> 模块同级的位置添加 <code>stream</code> 配置</p>
<figure class="highlight shell"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">FTP 的命令端口（21）代理配置</span></span><br><span class="line">  server &#123;</span><br><span class="line">          listen 21 ;</span><br><span class="line">          proxy_pass ftp_server;</span><br><span class="line">          proxy_connect_timeout 60s;</span><br><span class="line">          proxy_timeout 60m;</span><br><span class="line">      &#125;</span><br><span class="line">  upstream ftp_server&#123;</span><br><span class="line">         hash $remote_addr consistent;</span><br><span class="line">         server 192.168.1.2:21;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">FTP 的数据传输端口（11001 - 11004 ）代理配置</span></span><br><span class="line">  server &#123;</span><br><span class="line">      listen 11001;</span><br><span class="line">      proxy_pass ftp_trans_data_port1;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  upstream ftp_trans_data_port1 &#123;</span><br><span class="line">      hash $remote_addr consistent;</span><br><span class="line">      server 192.168.1.2:11001;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  server &#123;</span><br><span class="line">      listen 11002;</span><br><span class="line">      proxy_pass ftp_trans_data_port2;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  upstream ftp_trans_data_port2 &#123;</span><br><span class="line">      hash $remote_addr consistent;</span><br><span class="line">      server 192.168.1.2:11002;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">      listen 11003;</span><br><span class="line">      proxy_pass ftp_trans_data_port3;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  upstream ftp_trans_data_port3 &#123;</span><br><span class="line">      hash $remote_addr consistent;</span><br><span class="line">      server 192.168.1.2:11003;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  server &#123;</span><br><span class="line">      listen 11004;</span><br><span class="line">      proxy_pass ftp_trans_data_port4;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  upstream ftp_trans_data_port4 &#123;</span><br><span class="line">      hash $remote_addr consistent;</span><br><span class="line">      server 192.168.1.2:11004;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>整个工作流程大体如下：<br><img src="https://i.csms.tech/img_124.png"></p>
<p><strong>特殊情况说明</strong></p>
<blockquote>
<p>因为 FTP 协议的原因，如果在同一个 Nginx 中要反代多台 FTP 服务器，那么 FTP 服务使用的数据传输端口（被动模式下）不能相同，因为 Nginx 不能重复监听相同的端口。</p>
<p>此种情况下（同一个 Nginx 要反代多台有相同数据传输端口的 FTP 服务），可以将后端 FTP 服务加到同一个 upstream 中，然后 nginx 监听数据传输端口，此时存在的问题是 <strong>如果后端的 2 台或多台 FTP 同时使用了相同的数据传输端口，可能会导致客户端的数据连接被反代到错误的 FTP 服务器</strong></p>
</blockquote>
<p>此种特殊情况下的具体工作流程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line"></span><br><span class="line">      # ftp 命令(控制)端口</span><br><span class="line">      server &#123;</span><br><span class="line">          listen 21;                          </span><br><span class="line">          proxy_pass ftp1;</span><br><span class="line">      &#125;</span><br><span class="line">      upstream ftp1&#123;</span><br><span class="line">          hash $remote_addr consistent;</span><br><span class="line">          server 192.168.1.2:11000;</span><br><span class="line">          server 192.168.1.3:11000;</span><br><span class="line">      &#125;</span><br><span class="line">      # ftp 数据传输端口,ftp 服务配置为被动模式,数据传输端口 11001-11003</span><br><span class="line">      server &#123;</span><br><span class="line">          listen 11001;</span><br><span class="line">          proxy_pass ftp_data_port1;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      upstream ftp_data_port1 &#123;</span><br><span class="line">          hash $remote_addr consistent;</span><br><span class="line">          server 192.168.1.2:11001;</span><br><span class="line">          server 192.168.1.3:11001;</span><br><span class="line">      &#125;</span><br><span class="line">	  </span><br><span class="line">	  server &#123;</span><br><span class="line">          listen 11002;</span><br><span class="line">          proxy_pass ftp_data_port2;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      upstream ftp_data_port2 &#123;</span><br><span class="line">          hash $remote_addr consistent;</span><br><span class="line">          server 192.168.1.2:11002;</span><br><span class="line">          server 192.168.1.3:11002;</span><br><span class="line">      &#125;</span><br><span class="line">	  server &#123;</span><br><span class="line">          listen 11003;</span><br><span class="line">          proxy_pass ftp_data_port3;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      upstream ftp_data_port3 &#123;</span><br><span class="line">          hash $remote_addr consistent;</span><br><span class="line">          server 192.168.1.2:11003;</span><br><span class="line">          server 192.168.1.3:11003;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_125.png"></p>
<p> 此种配置下可能出现以下几种情况(假定后端 FTP 服务器分别为 A 和 B)：</p>
<ol>
<li><p>第 2 步中，假如 <strong>Nginx 选择了后端 FTP 服务器 A</strong>，并将控制请求转发到了 A.，ftp A 和客户端协商使用 11003 端口进行数据传输。</p>
<p> 客户端收到控制面的响应后，发起和 FTP 服务的 11003 的数据传输请求， 请求到了 Nginx 服务器，Nginx 通过 11003 端口的配置，在 upstream 中<strong>选择了后端的 A 服务器</strong>，并将请求转发到了服务器 A，A 已经监听了此端口，可以正常完成数据传输。</p>
</li>
<li><p>第 2 步中，假如 <strong>Nginx 选择了后端 FTP 服务器 A</strong>，并将控制请求转发到了 A.，ftp A 和客户端协商使用 11003 端口进行数据传输。</p>
<p>  客户端收到控制面的响应后，发起和 FTP 服务的 11003 的数据传输请求， 请求到了 Nginx 服务器，Nginx 通过 11003 端口的配置，在 upstream 中<strong>选择了后端的 B 服务器</strong>，并将请求转发到 B 服务器，<strong>假如 B 服务器未监听此端口（因为此次请求之前的控制面是由 A处理，B 并未参与），后端未响应</strong>，此时 Nginx 会将请求转发到 A 服务器，正常完成数据传输</p>
</li>
<li><p>第 2 步中，假如 <strong>Nginx 选择了后端 FTP 服务器 A</strong>，并将控制请求转发到了 A，ftp A 和客户端协商使用 11003 端口进行数据传输。</p>
<p> 客户端收到控制面的响应后，发起和 FTP 服务的 11003 的数据传输请求， 请求到了 Nginx 服务器，Nginx 通过 11003 端口的配置，在 upstream 中<strong>选择了后端的 B 服务器</strong>，并将请求转发到 B 服务器，<strong>假如 B 服务器也监听了此端口（例如代理到 B 服务器得 FTP 控制端响应中,也和客户端协商了使用 11003 端口进行数据传输），Nginx 和后端 FTP 的 11003 端口可以建立连接</strong>，但是因为鉴权等原因,FTP 服务器会返回传输失败信息给客户端.此时虽然完整的建立了整个流程中的连接,但是<strong>数据传输最终失败</strong>.</p>
</li>
</ol>
<h2 id="Nginx-反代-Rancher"><a href="#Nginx-反代-Rancher" class="headerlink" title="Nginx 反代 Rancher"></a>Nginx 反代 Rancher</h2><a href="/202210071716/" title="Rancher 安装及使用">Rancher 安装及使用</a>

<h2 id="Nginx-反代-OpenVPN-服务"><a href="#Nginx-反代-OpenVPN-服务" class="headerlink" title="Nginx 反代 OpenVPN 服务"></a>Nginx 反代 OpenVPN 服务</h2><p>使用 Nginx stream 模块可以实现 Nginx 反代 OpenVPN 的流量，但是连接 VPN 之后，客户端显示的 IP 依然为 OpenVPN 服务端 IP。</p>
<figure class="highlight python"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    log_format proxy <span class="string">&#x27;&#123;time: $time_local|&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;remote_addr: $remote_addr|&#x27;</span></span><br><span class="line">				  <span class="string">&#x27;protocol: $protocol|&#x27;</span></span><br><span class="line">				  <span class="string">&#x27;bytes_sent: $bytes_sent|&#x27;</span></span><br><span class="line">				  <span class="string">&#x27;bytes_received: $bytes_received|&#x27;</span></span><br><span class="line">				  <span class="string">&#x27;session_time: $session_time|&#x27;</span></span><br><span class="line">				  <span class="string">&#x27;upstream_addr: $upstream_addr|&#x27;</span></span><br><span class="line">				  <span class="string">&#x27;upstream_bytes_sent: $upstream_bytes_sent|&#x27;</span></span><br><span class="line">				  <span class="string">&#x27;upstream_bytes_received: $upstream_bytes_received|&#x27;</span></span><br><span class="line">				  <span class="string">&#x27;upstream_connect_time: $upstream_connect_time|&#x27;</span></span><br><span class="line">				  <span class="string">&#x27;status: $status&#x27;</span>;</span><br><span class="line">	access_log /home/logs/nginx/access/vpn_proxy.access proxy;</span><br><span class="line">	</span><br><span class="line">	server &#123;</span><br><span class="line">		listen <span class="number">1194</span>;</span><br><span class="line">		proxy_pass <span class="number">13.52</span><span class="number">.72</span><span class="number">.24</span>:<span class="number">1194</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_129.png"></p>
<h2 id="Nginx-if-实现与或操作"><a href="#Nginx-if-实现与或操作" class="headerlink" title="Nginx if 实现与或操作"></a>Nginx if 实现与或操作</h2><p>Nginx 不支持 <code>if</code> 语句中使用逻辑 <code>&amp;&amp;</code> <code>||</code> 运算，而且不支持 <code>if</code> 的嵌套语法。要实现 <code>if</code> 中的 <em>与</em> 和 <em>或</em> 操作，可以使用下面的方法实现</p>
<figure class="highlight shell"><figcaption><span>server.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">set $flag 0;</span><br><span class="line"></span><br><span class="line">if ($host = &quot;test.domain.com&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    set $flag &quot;$&#123;flag&#125;1&quot;;   </span><br><span class="line">&#125;</span><br><span class="line">if ($remote_addr = 1.1.1.1) </span><br><span class="line">&#123;</span><br><span class="line">    set $flag &quot;$&#123;flag&#125;1&quot;;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>经过以上条件判断：</p>
<ul>
<li>如果 <strong>既满足</strong> 第一个条件， <strong>又满足</strong> 第二个条件，则 <code>$flag = 011</code></li>
<li>如果 <strong>满足</strong> 第一个条件， <strong>不满足</strong> 第二个条件，则 <code>$flag = 01</code></li>
<li>如果 <strong>不满足</strong> 第一个条件， <strong>满足</strong> 第二个条件，则 <code>$flag = 01</code></li>
<li>如果 2 个条件都 <strong>不满足</strong> ，则 <code>$flag = 0</code></li>
</ul>
<p>在此基础上，要实现 <strong>与或</strong> 操作，示例如下</p>
<figure class="highlight shell"><figcaption><span>server.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">与操作</span></span><br><span class="line">if ($flag = &quot;011&quot;) &#123;return 200;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或操作</span></span><br><span class="line">if ($flag = &quot;01&quot;) &#123;return 200;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.yidude.com/nginx/100001.html">设置变量解决指定多个域名白名单跨域请求配置</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://priesttomb.github.io/%E6%8A%80%E6%9C%AF/2020/10/24/using-map-to-set-multiple-allow-origins-in-nginx/">使用 map 实现 Nginx 允许多个域名跨域</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.junmoyu.com/posts/linux-nginx-install-stream/">Nginx Stream 配置</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/MarshalEagle/article/details/120334328">nginx 代理 ftp 端口，实现文件传输</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 安装及升级</title>
    <url>/202306270934/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文档主要做为需要安装或升级 Nginx 版本或者需要重新编译 Nginx 为其添加新模块时的参考。<a href="/202207261420/" title="Nginx 服务常用配置说明">Nginx 服务常用配置说明</a></p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 5.4.225-1</li>
<li>nginx stable 1.24.0</li>
</ul>
<h1 id="编译安装-Nginx"><a href="#编译安装-Nginx" class="headerlink" title="编译安装 Nginx"></a>编译安装 Nginx</h1><p>编译安装 Nginx 之前，首先需要安装依赖包 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Compiling and Installing from Source](https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/)">[1]</span></a></sup></p>
<h2 id="pcre"><a href="#pcre" class="headerlink" title="pcre"></a>pcre</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget github.com/PCRE2Project/pcre2/releases/download/pcre2-10.42/pcre2-10.42.tar.gz</span><br><span class="line">tar -zxf pcre2-10.42.tar.gz</span><br><span class="line">cd pcre2-10.42</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h2 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://zlib.net/zlib-1.2.13.tar.gz</span><br><span class="line">tar -zxf zlib-1.2.13.tar.gz</span><br><span class="line">cd zlib-1.2.13</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h2 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget --no-check-certificate http://www.openssl.org/source/openssl-1.1.1t.tar.gz</span><br><span class="line">tar -zxf openssl-1.1.1t.tar.gz</span><br><span class="line">cd openssl-1.1.1t</span><br><span class="line">./config shared zlib</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h2 id="编译安装-Nginx-1"><a href="#编译安装-Nginx-1" class="headerlink" title="编译安装 Nginx"></a>编译安装 Nginx</h2><p>下载 Nginx stable 版本编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.24.0.tar.gz</span><br><span class="line">tar zxf nginx-1.24.0.tar.gz</span><br><span class="line">cd nginx-1.24.0</span><br></pre></td></tr></table></figure>
<p>要启用或者停用指定的 Nginx 自带模块，<a href="https://nginx.org/en/docs/configure.html">参考 Nginx 编译配置选项说明</a></p>
<p>此处编译配置添加第三方模块 <code>nginx-module-vts</code> 以支持 Prometheus。执行以下命令编译 Nginx 并添加第三方模块 <code>nginx-module-vts</code>。<a href="https://github.com/vozlt/nginx-module-vts/#compatibility">Nginx 和 nginx-module-vts 版本兼容列表</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/vozlt/nginx-module-vts/archive/refs/tags/v0.2.2.tar.gz</span><br><span class="line">tar -xf v0.2.2.tar.gz</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/nginx-1.24.0 \</span><br><span class="line">            --with-http_stub_status_module \</span><br><span class="line">            --with-http_ssl_module \</span><br><span class="line">            --with-stream --with-stream_ssl_module \</span><br><span class="line">            --with-openssl=/tmp/openssl-1.1.1t \</span><br><span class="line">            --with-http_v2_module \</span><br><span class="line">            --add-module=nginx-module-vts-0.2.2/</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>编译安装后的软件包，只需要安装好依赖，便可以迁移到其他机器上面使用，<a href="https://s.csms.tech/file/nginx-1.24.0.tar">本文档编译安装后的软件包下载链接</a></p>
<h2 id="为-Nginx-配置-systemd-管理配置文件"><a href="#为-Nginx-配置-systemd-管理配置文件" class="headerlink" title="为 Nginx 配置 systemd 管理配置文件"></a>为 Nginx 配置 systemd 管理配置文件</h2><p>为了能使用 <code>systemctl</code> 管理源码编译安装的 nginx，可以为其使用以下配置文件将其托管到 <code>systemd</code></p>
<figure class="highlight shell"><figcaption><span>/usr/lib/systemd/system/nginx.service</span></figcaption><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The nginx HTTP and reverse proxy server</span><br><span class="line">After=network-online.target remote-fs.target nss-lookup.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/run/nginx.pid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Nginx will fail to start <span class="keyword">if</span> /run/nginx.pid already exists but has the wrong</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SELinux context. This might happen when running `nginx -t` from the cmdline.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://bugzilla.redhat.com/show_bug.cgi?<span class="built_in">id</span>=1268621</span></span><br><span class="line">ExecStartPre=/usr/bin/rm -f /run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/local/nginx-1.24.0/sbin/nginx -t</span><br><span class="line">ExecStart=/usr/local/nginx-1.24.0/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx-1.24.0/sbin/nginx -s reload</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">TimeoutStopSec=5</span><br><span class="line">KillMode=process</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Prometheus-采集-Nginx-监控数据"><a href="#Prometheus-采集-Nginx-监控数据" class="headerlink" title="Prometheus 采集 Nginx 监控数据"></a>Prometheus 采集 Nginx 监控数据</h1><p><a href="#%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-Nginx">参考步骤安装 <code>nginx-module-vts</code> 模块</a>，以支持 Prometheus 采集 Nginx 统计数据。</p>
<p>如果要统计 Nginx 所有的 vhost 数据，则将 <code>nginx-module-vts</code> 模块相关配置放置于 <code>http</code> 模块内，否则可以在只想要监控（统计）的 vhost (<code>server</code> 配置段) 中添加配置。</p>
<p><code>nginx-module-vts</code> 模块相关配置命令说明：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>用法示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>vhost_traffic_status_zone</code></td>
<td>定义 <code>vhost_traffic_status</code> 模块使用的共享内存区域。用于存储虚拟主机的流量统计信息</td>
<td><code>vhost_traffic_status_zone shared_memory_name size;</code><br/><code>shared_memory_name</code> 是共享内存区域的名称，<code>size</code> 是共享内存区域的大小。</td>
</tr>
<tr>
<td><code>vhost_traffic_status_filter_by_host</code></td>
<td>按主机名过滤虚拟主机状态信息<br/>默认会将流量全部计算到第一个 server_name 上；启用后，只会显示与请求的主机名匹配的虚拟主机状态信息。</td>
<td><code>vhost_traffic_status_filter_by_host on;</code></td>
</tr>
<tr>
<td><code>vhost_traffic_status_filter_by_set_key</code></td>
<td>根据自定义键值对来过滤虚拟主机的状态信息</td>
<td><code>vhost_traffic_status_filter_by_set_key $host$request_uri;</code></td>
</tr>
<tr>
<td><code>vhost_traffic_status_filter_by_set_zone</code></td>
<td>过滤器使用的共享内存区域</td>
<td></td>
</tr>
<tr>
<td><code>vhost_traffic_status_display</code></td>
<td>用于显示虚拟主机状态信息的格式<br/>支持 <code>json</code>、<code>CSV</code> 和 <code>html</code></td>
<td><code>vhost_traffic_status_display_format html;</code></td>
</tr>
<tr>
<td><code>vhost_traffic_status_display_format</code></td>
<td>用于显示虚拟主机状态信息的字段格式。<br/>可以选择显示的字段有：request、status、request_time、request_length、request_method、request_uri、request_length、request_time、request_time_counter、request_time_counter_overflows、request_time_min、request_time_max、request_time_avg、request_time_median、request_time_percentile。</td>
<td><code>vhost_traffic_status_display_format field1 field2 ...;</code></td>
</tr>
</tbody></table>
<p>为了获取所有域名的统计信息，在 Nginx 的 <code>http</code> 模块内添加以下配置：</p>
<figure class="highlight shell"><figcaption><span>nginx.con</span></figcaption><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...   </span><br><span class="line">    vhost_traffic_status_zone;</span><br><span class="line"></span><br><span class="line">    vhost_traffic_status_filter_by_host on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8888;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location /status &#123;</span><br><span class="line">            vhost_traffic_status_display;</span><br><span class="line">            vhost_traffic_status_display_format json;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;                                                                                                                                                        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重载配置后查看请求内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl localhost:8888/status</span></span><br><span class="line">&#123;&quot;hostName&quot;:&quot;testhost&quot;,&quot;moduleVersion&quot;:&quot;v0.2.2&quot;,&quot;nginxVersion&quot;:&quot;1.24.0&quot;,&quot;loadMsec&quot;:1713418497362,&quot;nowMsec&quot;:1713418504352,&quot;connections&quot;:&#123;&quot;active&quot;:7,&quot;reading&quot;:0,&quot;writing&quot;:1,&quot;waiting&quot;:6,&quot;accepted&quot;:7,&quot;handled&quot;:7,&quot;requests&quot;:14&#125;,&quot;sharedZones&quot;:&#123;&quot;name&quot;:&quot;ngx_http_vhost_traffic_status&quot;,&quot;maxSize&quot;:1048575,&quot;usedSize&quot;:10587,&quot;usedNode&quot;:3&#125;,&quot;serverZones&quot;:&#123;&quot;api.testdomain.com&quot;:&#123;&quot;requestCounter&quot;:12,&quot;inBytes&quot;:9330,&quot;outBytes&quot;:6249,&quot;responses&quot;:&#123;&quot;1xx&quot;:0,&quot;2xx&quot;:12,&quot;3xx&quot;:0,&quot;4xx&quot;:0,&quot;5xx&quot;:0,&quot;miss&quot;:0,&quot;bypass&quot;:0,&quot;expired&quot;:0,&quot;stale&quot;:0,&quot;updating&quot;:0,&quot;revalidated&quot;:0,&quot;hit&quot;:0,&quot;scarce&quot;:0&#125;,&quot;requestMsecCounter&quot;:11,&quot;requestMsec&quot;:0,&quot;requestMsecs&quot;:&#123;&quot;times&quot;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1713418503612,1713418503612,1713418503612,1713418503612,1713418503612,1713418503962,1713418503965,1713418503965,1713418503966,1713418503966,1713418504330,1713418504331],&quot;msecs&quot;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,3,0,0]&#125;,&quot;requestBuckets&quot;:&#123;&quot;msecs&quot;:[],&quot;counters&quot;:[]&#125;,&quot;overCounts&quot;:&#123;&quot;maxIntegerSize&quot;:18446744073709551615,&quot;requestCounter&quot;:0,&quot;inBytes&quot;:0,&quot;outBytes&quot;:0,&quot;1xx&quot;:0,&quot;2xx&quot;:0,&quot;3xx&quot;:0,&quot;4xx&quot;:0,&quot;5xx&quot;:0,&quot;miss&quot;:0,&quot;bypass&quot;:0,&quot;expired&quot;:0,&quot;stale&quot;:0,&quot;updating&quot;:0,&quot;revalidated&quot;:0,&quot;hit&quot;:0,&quot;scarce&quot;:0,&quot;requestMsecCounter&quot;:0&#125;&#125;,&quot;src.testdomain.ph&quot;:&#123;&quot;requestCounter&quot;:1,&quot;inBytes&quot;:393,&quot;outBytes&quot;:309,&quot;responses&quot;:&#123;&quot;1xx&quot;:0,&quot;2xx&quot;:0,&quot;3xx&quot;:1,&quot;4xx&quot;:0,&quot;5xx&quot;:0,&quot;miss&quot;:0,&quot;bypass&quot;:0,&quot;expired&quot;:0,&quot;stale&quot;:0,&quot;updating&quot;:0,&quot;revalidated&quot;:0,&quot;hit&quot;:0,&quot;scarce&quot;:0&#125;,&quot;requestMsecCounter&quot;:0,&quot;requestMsec&quot;:0,&quot;requestMsecs&quot;:&#123;&quot;times&quot;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1713418500180],&quot;msecs&quot;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]&#125;,&quot;requestBuckets&quot;:&#123;&quot;msecs&quot;:[],&quot;counters&quot;:[]&#125;,&quot;overCounts&quot;:&#123;&quot;maxIntegerSize&quot;:18446744073709551615,&quot;requestCounter&quot;:0,&quot;inBytes&quot;:0,&quot;outBytes&quot;:0,&quot;1xx&quot;:0,&quot;2xx&quot;:0,&quot;3xx&quot;:0,&quot;4xx&quot;:0,&quot;5xx&quot;:0,&quot;miss&quot;:0,&quot;bypass&quot;:0,&quot;expired&quot;:0,&quot;stale&quot;:0,&quot;updating&quot;:0,&quot;revalidated&quot;:0,&quot;hit&quot;:0,&quot;scarce&quot;:0,&quot;requestMsecCounter&quot;:0&#125;&#125;,&quot;*&quot;:&#123;&quot;requestCounter&quot;:13,&quot;inBytes&quot;:9723,&quot;outBytes&quot;:6558,&quot;responses&quot;:&#123;&quot;1xx&quot;:0,&quot;2xx&quot;:12,&quot;3xx&quot;:1,&quot;4xx&quot;:0,&quot;5xx&quot;:0,&quot;miss&quot;:0,&quot;bypass&quot;:0,&quot;expired&quot;:0,&quot;stale&quot;:0,&quot;updating&quot;:0,&quot;revalidated&quot;:0,&quot;hit&quot;:0,&quot;scarce&quot;:0&#125;,&quot;requestMsecCounter&quot;:11,&quot;requestMsec&quot;:0,&quot;requestMsecs&quot;:&#123;&quot;times&quot;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1713418500180,1713418503612,1713418503612,1713418503612,1713418503612,1713418503612,1713418503962,1713418503965,1713418503965,1713418503966,1713418503966,1713418504330,1713418504331],&quot;msecs&quot;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,3,0,0]&#125;,&quot;requestBuckets&quot;:&#123;&quot;msecs&quot;:[],&quot;counters&quot;:[]&#125;,&quot;overCounts&quot;:&#123;&quot;maxIntegerSize&quot;:18446744073709551615,&quot;requestCounter&quot;:0,&quot;inBytes&quot;:0,&quot;outBytes&quot;:0,&quot;1xx&quot;:0,&quot;2xx&quot;:0,&quot;3xx&quot;:0,&quot;4xx&quot;:0,&quot;5xx&quot;:0,&quot;miss&quot;:0,&quot;bypass&quot;:0,&quot;expired&quot;:0,&quot;stale&quot;:0,&quot;updating&quot;:0,&quot;revalidated&quot;:0,&quot;hit&quot;:0,&quot;scarce&quot;:0,&quot;requestMsecCounter&quot;:0&#125;&#125;&#125;,&quot;upstreamZones&quot;:&#123;&quot;::nogroups&quot;:[&#123;&quot;server&quot;:&quot;127.0.0.1:12000&quot;,&quot;requestCounter&quot;:5,&quot;inBytes&quot;:4154,&quot;outBytes&quot;:3351,&quot;responses&quot;:&#123;&quot;1xx&quot;:0,&quot;2xx&quot;:5,&quot;3xx&quot;:0,&quot;4xx&quot;:0,&quot;5xx&quot;:0&#125;,&quot;requestMsecCounter&quot;:11,&quot;requestMsec&quot;:2,&quot;requestMsecs&quot;:&#123;&quot;times&quot;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1713418503962,1713418503965,1713418503965,1713418503966,1713418503966],&quot;msecs&quot;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,3]&#125;,&quot;requestBuckets&quot;:&#123;&quot;msecs&quot;:[],&quot;counters&quot;:[]&#125;,&quot;responseMsecCounter&quot;:11,&quot;responseMsec&quot;:2,&quot;responseMsecs&quot;:&#123;&quot;times&quot;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1713418503962,1713418503965,1713418503965,1713418503966,1713418503966],&quot;msecs&quot;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,3]&#125;,&quot;responseBuckets&quot;:&#123;&quot;msecs&quot;:[],&quot;counters&quot;:[]&#125;,&quot;weight&quot;:0,&quot;maxFails&quot;:0,&quot;failTimeout&quot;:0,&quot;backup&quot;:false,&quot;down&quot;:false,&quot;overCounts&quot;:&#123;&quot;maxIntegerSize&quot;:18446744073709551615,&quot;requestCounter&quot;:0,&quot;inBytes&quot;:0,&quot;outBytes&quot;:0,&quot;1xx&quot;:0,&quot;2xx&quot;:0,&quot;3xx&quot;:0,&quot;4xx&quot;:0,&quot;5xx&quot;:0,&quot;requestMsecCounter&quot;:0,&quot;responseMsecCounter&quot;:0&#125;&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>统计信息输出结果支持多种格式：</p>
<ul>
<li><code>localhost:8888/status/format/json</code> - Json</li>
<li><code>localhost:8888/status/format/html</code> - Html</li>
<li><code>localhost:8888/status/format/jsonp</code> - Jsonp</li>
<li><code>localhost:8888/status/format/prometheus</code> - Prometheus</li>
<li><code>localhost:8888/status/format/control</code> - control</li>
</ul>
<p>在 Prometheus 中添加以下 Targets 配置抓取 <code>nginx-module-vts</code> 模块暴露出的统计信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- job_name: &quot;Nginx&quot;</span><br><span class="line">    metrics_path: &#x27;/status/format/prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;IPADDRESS:8888&#x27;]</span><br><span class="line">      labels:</span><br><span class="line">        Department : &#x27;OP&#x27;</span><br></pre></td></tr></table></figure>

<p>在 Prometheus 中检查抓取到的数据<br><img src="https://i.csms.tech/img_229.png"></p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="error-while-loading-shared-libraries"><a href="#error-while-loading-shared-libraries" class="headerlink" title="error while loading shared libraries"></a>error while loading shared libraries</h2><p>Nginx 编译安装成功后，启动报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/usr/local/nginx-1.24.0/sbin/nginx -t</span></span><br><span class="line">/usr/local/nginx-1.24.0/sbin/nginx: error while loading shared libraries: libpcre2-8.so.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>
<p><strong>问题原因</strong> 为 Nginx 在系统的库文件路径中未找到已经安装的 <code>libpcre2-8.so.0</code> 库文件。可以通过以下方式验证</p>
<ol>
<li>搜索 <code>libpcre2-8.so.0</code>，可以看到系统上已经存在此库文件 <code>/usr/local/lib/libpcre2-8.so.0</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find / -name libpcre2-8.so.0</span></span><br><span class="line">/usr/local/lib/libpcre2-8.so.0</span><br></pre></td></tr></table></figure></li>
<li>检查此库文件是否在系统已加载的库文件中。执行以下命令搜索系统已经加载的库文件，发现没有 <code>/usr/local/lib/libpcre2-8.so.0</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ldconfig -p | grep libpcre</span></span><br><span class="line">    libpcre32.so.0 (libc6,x86-64) =&gt; /lib64/libpcre32.so.0</span><br><span class="line">    libpcre16.so.0 (libc6,x86-64) =&gt; /lib64/libpcre16.so.0</span><br><span class="line">    libpcreposix.so.0 (libc6,x86-64) =&gt; /lib64/libpcreposix.so.0</span><br><span class="line">    libpcrecpp.so.0 (libc6,x86-64) =&gt; /lib64/libpcrecpp.so.0</span><br><span class="line">    libpcre.so.1 (libc6,x86-64) =&gt; /lib64/libpcre.so.1</span><br></pre></td></tr></table></figure></li>
<li>检查系统共享库文件的查找路径的配置文件 <code>/etc/ld.so.conf</code>，发现其中不包括路径 <code>/usr/local/lib/</code>，因此位于此路径下的共享库文件无法被搜索到 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/ld.so.conf</span></span><br><span class="line">include ld.so.conf.d/*.conf</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>要解决此问题，可以使用以下方法之一：</p>
<ul>
<li><p>添加 <code>/usr/local/lib/</code> 到系统共享库查找路径配置文件 <code>/etc/ld.so.conf</code></p>
  <figure class="highlight shell"><figcaption><span>/etc/ld.so.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">include ld.so.conf.d/*.conf</span><br><span class="line">/usr/local/lib/</span><br></pre></td></tr></table></figure>
<p> 执行以下命令，使配置生效</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ldconfig</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置系统环境变量 <code>LD_LIBRARY_PATH</code>，这个变量定义了系统共享库的查找目录。将 <code>/usr/local/lib</code> 添加到此变量的值中，要永久生效需要将其写入配置文件，如 <code>~/.bash_profile</code> 等</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=&quot;/usr/local/lib:$LD_LIBRARY_PATH&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建符号链接</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/lib/libpcre2-8.so.0 /usr/local/nginx-1.24.0/sbin/libpcre2-8.so.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>或者</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/lib/libpcre2-8.so.0 /lib64/libpcre2-8.so.0</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="SSL-modules-require-the-OpenSSL-library"><a href="#SSL-modules-require-the-OpenSSL-library" class="headerlink" title="SSL modules require the OpenSSL library"></a>SSL modules require the OpenSSL library</h2><p>执行以下命令执行编译前配置时报错 <code>./configure: error: SSL modules require the OpenSSL library.</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./configure --prefix=/usr/local/nginx-1.24.0 \</span></span><br><span class="line"><span class="language-bash">            --with-http_stub_status_module \</span></span><br><span class="line"><span class="language-bash">            --with-http_ssl_module \</span></span><br><span class="line"><span class="language-bash">            --with-stream --with-stream_ssl_module \</span></span><br><span class="line"><span class="language-bash">            --with-http_v2_module \</span></span><br><span class="line"><span class="language-bash">            --add-module=nginx-module-vts-0.2.2/</span></span><br><span class="line"></span><br><span class="line">checking for PCRE2 library ... found</span><br><span class="line">checking for OpenSSL library ... not found</span><br><span class="line">checking for OpenSSL library in /usr/local/ ... not found</span><br><span class="line">checking for OpenSSL library in /usr/pkg/ ... not found</span><br><span class="line">checking for OpenSSL library in /opt/local/ ... not found</span><br><span class="line"></span><br><span class="line">./configure: error: SSL modules require the OpenSSL library.</span><br><span class="line">You can either do not enable the modules, or install the OpenSSL library</span><br><span class="line">into the system, or build the OpenSSL library statically from the source</span><br><span class="line">with nginx by using --with-openssl=&lt;path&gt; option.</span><br></pre></td></tr></table></figure>
<p>此报错原因为未找到 OpenSSL 的库文件。</p>
<p>针对此场景，可以通过在编译配置时指定 OpenSSL 的源码中库文件的具体位置(<code>--with-openssl=/tmp/openssl-1.1.1t</code>)，参考以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx-1.24.0 \</span><br><span class="line">            --with-http_stub_status_module \</span><br><span class="line">            --with-http_ssl_module \</span><br><span class="line">            --with-stream --with-stream_ssl_module \</span><br><span class="line">            --with-openssl=/tmp/openssl-1.1.1t \</span><br><span class="line">            --with-http_v2_module \</span><br><span class="line">            --add-module=nginx-module-vts-0.2.2/</span><br></pre></td></tr></table></figure>


<h2 id="Error-127"><a href="#Error-127" class="headerlink" title="Error 127"></a>Error 127</h2><p>Nginx 执行 <code>make</code> 命令时报错： <code>/bin/sh: line 2: ./config: No such file or directory</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./configure --prefix=/usr/local/nginx-1.24.0 \</span></span><br><span class="line"><span class="language-bash">            --with-http_stub_status_module \</span></span><br><span class="line"><span class="language-bash">            --with-http_ssl_module \</span></span><br><span class="line"><span class="language-bash">            --with-stream --with-stream_ssl_module \</span></span><br><span class="line"><span class="language-bash">            --with-openssl=/usr/local/lib64/ \</span></span><br><span class="line"><span class="language-bash">            --with-http_v2_module \</span></span><br><span class="line"><span class="language-bash">            --add-module=nginx-module-vts-0.2.2/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make</span></span><br><span class="line">make -f objs/Makefile</span><br><span class="line">make[1]: Entering directory `/root/nginx-1.24.0&#x27;</span><br><span class="line">cd /usr/local/lib64/ \</span><br><span class="line">&amp;&amp; if [ -f Makefile ]; then make clean; fi \</span><br><span class="line">&amp;&amp; ./config --prefix=/usr/local/lib64//.openssl no-shared no-threads  \</span><br><span class="line">&amp;&amp; make \</span><br><span class="line">&amp;&amp; make install_sw LIBDIR=lib</span><br><span class="line">/bin/sh: line 2: ./config: No such file or directory</span><br><span class="line">make[1]: *** [/usr/local/lib64//.openssl/include/openssl/ssl.h] Error 127</span><br><span class="line">make[1]: Leaving directory `/root/nginx-1.24.0&#x27;</span><br><span class="line">make: *** [build] Error 2</span><br></pre></td></tr></table></figure>

<p>错误信息表明在编译 nginx 时，<code>make</code> 命令无法找到 OpenSSL 的配置脚本 <code>config</code>。此脚本位于 OpenSSL 的源码目录中。可以通过 <code>--with-openssl=/tmp/openssl-1.1.1t</code> 指定。<br>修改编译前的配置命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx-1.24.0 \</span><br><span class="line">            --with-http_stub_status_module \</span><br><span class="line">            --with-http_ssl_module \</span><br><span class="line">            --with-stream --with-stream_ssl_module \</span><br><span class="line">            --with-openssl=/tmp/openssl-1.1.1t \</span><br><span class="line">            --with-http_v2_module \</span><br><span class="line">            --add-module=nginx-module-vts-0.2.2/</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h2 id="getpwnam-“nginx”-failed"><a href="#getpwnam-“nginx”-failed" class="headerlink" title="getpwnam(“nginx”) failed"></a>getpwnam(“nginx”) failed</h2><p>nginx 报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx: the configuration file /usr/local/nginx-1.24.0/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: [emerg] getpwnam(&quot;nginx&quot;) failed</span><br><span class="line">nginx: configuration file /usr/local/nginx-1.24.0/conf/nginx.conf test failed</span><br></pre></td></tr></table></figure>

<p><strong>问题原因</strong> 为 <code>nginx</code> 用户不存在，创建 <code>nginx</code> 用户或者修改配置文件，使用已有的用户运行 <code>nginx</code></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://nginx.org/en/docs/">Nginx 官网文档</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/">Compiling and Installing from Source</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs 安装配置</title>
    <url>/647e4c1a/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/latest/node-v15.12.0-linux-x64.tar.gz</span><br><span class="line">tar -xf node-v15.12.0-linux-x64.tar.gz -C /usr/local</span><br><span class="line">ln -s /usr/local/node-v15.12.0-linux-x64/bin/* /bin/</span><br></pre></td></tr></table></figure>

<p>安装pm2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install pm2 -g</span><br><span class="line">npm install -g pm2@3.5.1    # 安装指定版本</span><br><span class="line">npm install -g pm2@latest   # 安装最新版本</span><br></pre></td></tr></table></figure>

<h1 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h1><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install pm2</span><br></pre></td></tr></table></figure>
<p>安装指定版本的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g pm2@3.5.1</span><br></pre></td></tr></table></figure>

<h2 id="查看可用的安装版本"><a href="#查看可用的安装版本" class="headerlink" title="查看可用的安装版本"></a>查看可用的安装版本</h2><p>以 <code>hexo</code> 安装包为例，以下命令查看 <code>hexo</code> 安装包有哪些可选版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm show hexo versions</span></span><br><span class="line">[</span><br><span class="line">  &#x27;3.3.9&#x27;,        &#x27;3.4.0&#x27;,        &#x27;3.4.1&#x27;,       &#x27;3.4.2&#x27;,        &#x27;3.4.3&#x27;,</span><br><span class="line">  &#x27;3.4.4&#x27;,        &#x27;3.5.0&#x27;,        &#x27;3.6.0&#x27;,       &#x27;3.7.0&#x27;,        &#x27;3.7.1&#x27;,</span><br><span class="line">  &#x27;3.8.0&#x27;,        &#x27;3.9.0&#x27;,        &#x27;4.0.0&#x27;,       &#x27;4.1.0&#x27;,        &#x27;4.1.1&#x27;,</span><br><span class="line">  &#x27;4.2.0&#x27;,        &#x27;4.2.1&#x27;,        &#x27;5.0.0&#x27;,       &#x27;5.0.1&#x27;,        &#x27;5.0.2&#x27;,</span><br><span class="line">  &#x27;5.1.0&#x27;,        &#x27;5.1.1&#x27;,        &#x27;5.2.0&#x27;,       &#x27;5.3.0&#x27;,        &#x27;5.4.0&#x27;,</span><br><span class="line">  &#x27;5.4.1&#x27;,        &#x27;5.4.2&#x27;,        &#x27;6.0.0&#x27;,       &#x27;6.1.0&#x27;,        &#x27;6.2.0&#x27;,</span><br><span class="line">  &#x27;6.3.0&#x27;,        &#x27;7.0.0-rc1&#x27;,    &#x27;7.0.0-rc2&#x27;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="查看已安装的包名"><a href="#查看已安装的包名" class="headerlink" title="查看已安装的包名"></a>查看已安装的包名</h2><p>以下命令可显示安装的包及它们的版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure>
<p>如果要查看全局类型的包，使用 <code>-g</code> 选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm ls -g</span><br></pre></td></tr></table></figure>

<h2 id="卸载安装的包"><a href="#卸载安装的包" class="headerlink" title="卸载安装的包"></a>卸载安装的包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall package_name</span><br></pre></td></tr></table></figure>
<p>卸载全局安装的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall package_name -g</span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><blockquote>
<p>WARN EACCES user “root” does not have permission to access the dev dir “&#x2F;root&#x2F;.node-gyp&#x2F;11.15.0”<br>ERR! stack Error: EACCES: permission denied, mkdir ‘node_modules&#x2F;sqlite3&#x2F;.node-gyp’</p>
</blockquote>
<p>[解决方法]：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --unsafe-perm</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一句</title>
    <url>/202405281728/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="蛙化及蛇化"><a href="#蛙化及蛇化" class="headerlink" title="蛙化及蛇化"></a>蛙化及蛇化</h1><ul>
<li><p><code>蛙化現象</code> 是日本 2023 年上半年的 Z 世代（出生介於1995年～2010年）流行用語第一名。這個詞源自格林童話《青蛙王子》，描述對另一半突然感到生理或心理上厭惡。  </p>
<p>  日本大學教授藤澤伸介在2004年的研究指出，「蛙化現象」是一種普遍狀態，尤其容易發生在情竇初開的青少年身上，因為戀愛經驗少，對感情對象抱持完美的想像。</p>
</li>
</ul>
<p>與蛙化現象相對，近期有對情侶在TikTok發明「蛇化現象」，描述無論另一半做了什麼尷尬行為，都感到好可愛。這種現象迅速散播，成為日本Z世代流行用語。</p>
<h1 id="于高山之巅，方见大河奔涌；于群峰之上，更觉长风浩荡"><a href="#于高山之巅，方见大河奔涌；于群峰之上，更觉长风浩荡" class="headerlink" title="于高山之巅，方见大河奔涌；于群峰之上，更觉长风浩荡"></a>于高山之巅，方见大河奔涌；于群峰之上，更觉长风浩荡</h1><h1 id="你永远不可能真正去了解一个人，除非你穿过她的鞋子去走她走过的路，站在她的角度思考问题，可当你走过她走的路时，你连路过都觉得难过。"><a href="#你永远不可能真正去了解一个人，除非你穿过她的鞋子去走她走过的路，站在她的角度思考问题，可当你走过她走的路时，你连路过都觉得难过。" class="headerlink" title="你永远不可能真正去了解一个人，除非你穿过她的鞋子去走她走过的路，站在她的角度思考问题，可当你走过她走的路时，你连路过都觉得难过。"></a>你永远不可能真正去了解一个人，除非你穿过她的鞋子去走她走过的路，站在她的角度思考问题，可当你走过她走的路时，你连路过都觉得难过。</h1><h1 id="当你只能孤注一掷的时候，你只能孤注一掷。如果你犹豫不决，说明你其实还有办法，只是不愿意使用。"><a href="#当你只能孤注一掷的时候，你只能孤注一掷。如果你犹豫不决，说明你其实还有办法，只是不愿意使用。" class="headerlink" title="当你只能孤注一掷的时候，你只能孤注一掷。如果你犹豫不决，说明你其实还有办法，只是不愿意使用。"></a>当你只能孤注一掷的时候，你只能孤注一掷。如果你犹豫不决，说明你其实还有办法，只是不愿意使用。</h1>]]></content>
      <categories>
        <category>日常生活</category>
      </categories>
  </entry>
  <entry>
    <title>Docker 部署 OpenVPN</title>
    <url>/202302171657/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 3.10.0-1160</li>
<li>Docker 20.10.9</li>
<li>iptables</li>
</ul>
<h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>宿主机操作系统内核配置允许数据转发，<a href="https://csms.tech/202302161539/#开启系统-IPv4-转发功能">开启系统 IPv4 转发功能</a></p>
<h1 id="Docker-部署-OpenVPN-服务端步骤"><a href="#Docker-部署-OpenVPN-服务端步骤" class="headerlink" title="Docker 部署 OpenVPN 服务端步骤"></a>Docker 部署 OpenVPN 服务端步骤</h1><h2 id="创建本地配置目录"><a href="#创建本地配置目录" class="headerlink" title="创建本地配置目录"></a>创建本地配置目录</h2><p>用了在启动容器时挂载以持久化 OpenVPN 配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /opt/openvpn1/</span><br></pre></td></tr></table></figure>

<h2 id="初始化配置文件"><a href="#初始化配置文件" class="headerlink" title="初始化配置文件"></a>初始化配置文件</h2><p>执行以下命令初始化 OpenVPN 服务端配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">          -v /opt/openvpn1/:/etc/openvpn \</span><br><span class="line">          kylemanna/openvpn:2.4 ovpn_genconfig -u udp://$&#123;PUB_IP&#125;:1194</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>udp://$&#123;PUB_IP&#125;:1194</code> - 指定 VPN 服务器配置，使用 <code>1194/udp</code> 端口。${PUB_IP} 为服务器公网 IP。</li>
</ul>
<h2 id="生成密钥-证书-文件"><a href="#生成密钥-证书-文件" class="headerlink" title="生成密钥(证书)文件"></a>生成密钥(证书)文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm -it \</span><br><span class="line">          -v /opt/openvpn1/:/etc/openvpn \</span><br><span class="line">          kylemanna/openvpn:2.4 ovpn_initpki</span><br></pre></td></tr></table></figure>
<p>根据提示，输入 CA 根证书密码及名称</p>
<h2 id="创建带有密码的客户端证书"><a href="#创建带有密码的客户端证书" class="headerlink" title="创建带有密码的客户端证书"></a>创建带有密码的客户端证书</h2><p>执行以下命令，根据提示输入客户端证书密码及 CA 密码，生成客户端证书。如果客户端证书无需密码，最后加选项 <code>nopass</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm -it \</span><br><span class="line">          -v /opt/openvpn1/:/etc/openvpn \</span><br><span class="line">          kylemanna/openvpn:2.4 easyrsa build-client-full vpn1</span><br></pre></td></tr></table></figure>

<h2 id="导出客户端证书"><a href="#导出客户端证书" class="headerlink" title="导出客户端证书"></a>导出客户端证书</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm -it \</span><br><span class="line">          -v /opt/openvpn1/:/etc/openvpn \</span><br><span class="line">          kylemanna/openvpn:2.4 ovpn_getclient vpn1 &gt; /opt/openvpn/client/vpn1.ovpn</span><br></pre></td></tr></table></figure>

<h2 id="启动-OpenVPN"><a href="#启动-OpenVPN" class="headerlink" title="启动 OpenVPN"></a>启动 OpenVPN</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name OpenVPN1 \</span><br><span class="line">           -v /opt/openvpn1/:/etc/openvpn \</span><br><span class="line">           -d -p 1194:1194/udp --cap-add=NET_ADMIN \</span><br><span class="line">           kylemanna/openvpn:2.4</span><br><span class="line">           </span><br></pre></td></tr></table></figure>
<p>防火墙放通 <code>1194/udp</code> 端口</p>
<figure class="highlight shell"><figcaption><span>/etc/sysconfig/iptables</span></figcaption><table><tr><td class="code"><pre><span class="line">-A INPUT -p udp --dport 1194 -j ACCEPT -m comment --comment &quot;openvpn&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>OpenVPN 启动后，docker 会在宿主机操作系统的 iptables 中添加对应的 <code>MASQUERADE</code> 规则，负责转发和 NAT 数据，具体规则可通过以下方法查看</p>
<p>查看 NAT 表添加的规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -t nat -L -v -n --line-numbers | more</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 127 packets, 9255 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1       54  2490 DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1        0     0 DOCKER     all  --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 1 packets, 70 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1       75  6875 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0           </span><br><span class="line">2      610 36387 MASQUERADE  all  --  *      *       10.8.0.0/24          0.0.0.0/0           </span><br><span class="line">3        0     0 MASQUERADE  udp  --  *      *       172.17.0.2           172.17.0.2           udp dpt:1194</span><br><span class="line"></span><br><span class="line">Chain DOCKER (2 references)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1        0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">2        1    70 DNAT       udp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:1194 to:172.17.0.2:1194</span><br></pre></td></tr></table></figure>
<p>查看 FILTER 表添加的规则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ iptables -L -v -n --line-numbers | more</span><br><span class="line">Chain INPUT (policy DROP 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1      641 51489 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class="line">2        0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">3        0     0 ACCEPT     udp  --  *      *       0.0.0.0/0            0.0.0.0/0            udp dpt:1194 /* openvpn */</span><br><span class="line">...</span><br><span class="line">13       0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 8</span><br><span class="line">14       0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 0</span><br><span class="line">15     230 14788 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy DROP 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1    16891 4860K DOCKER-USER  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">2    16891 4860K DOCKER-ISOLATION-STAGE-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">3     8465 2439K ACCEPT     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED</span><br><span class="line">4        1    70 DOCKER     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">5     8425 2421K ACCEPT     all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">6        0     0 ACCEPT     all  --  docker0 docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">7     4177 1774K ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class="line">8      202 13030 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 343 packets, 61383 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain DOCKER (1 references)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1        1    70 ACCEPT     udp  --  !docker0 docker0  0.0.0.0/0            172.17.0.2           udp dpt:1194</span><br><span class="line"></span><br><span class="line">Chain DOCKER-ISOLATION-STAGE-1 (1 references)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1     8425 2421K DOCKER-ISOLATION-STAGE-2  all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">2    16891 4860K RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain DOCKER-ISOLATION-STAGE-2 (1 references)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1        0     0 DROP       all  --  *      docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">2     8425 2421K RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain DOCKER-USER (1 references)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1    16891 4860K RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br></pre></td></tr></table></figure>

<h1 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h1><p>将 <a href="#%E5%AF%BC%E5%87%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%81%E4%B9%A6">导出客户端证书</a> 中生成的客户端证书发送到客户端，测试连接。</p>
<p>客户端连接失败，可以检查以下内容：</p>
<ul>
<li><p>客户端日志及服务端日志，服务端日志可以通过以下方法查看</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f OpenVPN</span><br></pre></td></tr></table></figure>

</li>
<li><p>检查是否是因为 <a href="#%E5%90%AF%E5%8A%A8-OpenVPN">iptables 防火墙规则</a> 问题导致无法连接，如果防火墙相关规则丢失，可以通过重启 docker 和 OpenVPN 容器的方式恢复。</p>
</li>
<li><p>检查容器中启动的端口和 docker 映射的端口是否一致。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Tools</category>
        <category>VPN</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVPN 安装及使用</title>
    <url>/202302161539/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 5.4.221</li>
<li>openvpn 2.4.12</li>
<li>easy-rsa-3.0.8</li>
<li>iptables</li>
</ul>
<h1 id="OpenVPN-服务端安装配置步骤"><a href="#OpenVPN-服务端安装配置步骤" class="headerlink" title="OpenVPN 服务端安装配置步骤"></a>OpenVPN 服务端安装配置步骤</h1><h2 id="安装-openvpn-服务端程序"><a href="#安装-openvpn-服务端程序" class="headerlink" title="安装 openvpn 服务端程序"></a>安装 openvpn 服务端程序</h2><p>epel 仓库源中包含了 OpenVPN 的安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum info openvpn</span></span><br><span class="line"></span><br><span class="line"> * epel: mirror.sfo12.us.leaseweb.net</span><br><span class="line"> * extras: download.cf.centos.org</span><br><span class="line"> * updates: download.cf.centos.org</span><br><span class="line">Available Packages</span><br><span class="line">Name        : openvpn</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 2.4.12</span><br><span class="line">Release     : 1.el7</span><br><span class="line">Size        : 529 k</span><br><span class="line">Repo        : epel/x86_64</span><br><span class="line">Summary     : A full-featured SSL VPN solution</span><br><span class="line">URL         : https://community.openvpn.net/</span><br><span class="line">License     : GPLv2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install -y openvpn</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-easy-rsa"><a href="#安装-easy-rsa" class="headerlink" title="安装 easy-rsa"></a>安装 easy-rsa</h2><p>easy-rsa 主要用来生成证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install easy-rsa</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h2 id="初始化，生成证书、密钥和参数文件"><a href="#初始化，生成证书、密钥和参数文件" class="headerlink" title="初始化，生成证书、密钥和参数文件"></a>初始化，生成证书、密钥和参数文件</h2><h3 id="初始化-Esay-RSA"><a href="#初始化-Esay-RSA" class="headerlink" title="初始化 Esay-RSA"></a>初始化 Esay-RSA</h3><p>Esay-RSA 默认安装目录在 <code>/usr/share/easy-rsa/3.0.8</code>，文档配置文件模板在 <code>/usr/share/doc/easy-rsa-3.0.8</code>。</p>
<p>文档建议我们拷贝一份到别的目录使用，以免将来升级的时候被覆盖掉。此处目录选择的 OpenVPN 配置目录下 <code>/etc/openvpn/easy-rsa</code>。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[CentOS 7安装配置OpenVPN服务器](https://www.simaek.com/archives/203/)">[1]</span></a></sup></p>
<p>拷贝配置文件模板，安装文档要求，必须重命名为 vars 才可以被自动加载。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -a /usr/share/easy-rsa/3.0.8 /etc/openvpn/easy-rsa</span><br><span class="line"></span><br><span class="line">cp -a /usr/share/doc/easy-rsa-3.0.8/vars.example /etc/openvpn/easy-rsa/vars</span><br></pre></td></tr></table></figure>
<p>编辑配置文件 vars，主要修改证书相关的参数。</p>
<figure class="highlight shell"><figcaption><span>/etc/openvpn/easy-rsa/vars</span></figcaption><table><tr><td class="code"><pre><span class="line">set_var EASYRSA_REQ_COUNTRY    &quot;CN&quot;</span><br><span class="line">set_var EASYRSA_REQ_PROVINCE   &quot;JiangSu&quot;</span><br><span class="line">set_var EASYRSA_REQ_CITY       &quot;Nanjing&quot;</span><br><span class="line">set_var EASYRSA_REQ_ORG        &quot;SIMAEK&quot;</span><br><span class="line">set_var EASYRSA_REQ_EMAIL      &quot;master@simaek.com&quot;</span><br><span class="line">set_var EASYRSA_REQ_OU         &quot;Development Dept.&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>说明</strong>：</p>
<p>EASYRSA_REQ_COUNTRY “所在的国家”</p>
<p>EASYRSA_REQ_PROVINCE “所在的省份”</p>
<p>EASYRSA_REQ_CITY “所在的城市”</p>
<p>EASYRSA_REQ_ORG “所属的组织”</p>
<p>EASYRSA_REQ_EMAIL “邮件地址”</p>
<p>EASYRSA_REQ_OU “组织单位，部门”</p>
</blockquote>
<p>说明一下我们需要创建的证书：</p>
<ul>
<li>CA 根证书，用于给服务器和客户端证书签名使用。</li>
<li>OpenVPN 服务器证书</li>
<li>Diffie-Hellman 算法用到的 key</li>
</ul>
<p>进入 <code>easy-rsa</code> 脚本所在目录，初始 pki 目录，创建的证书和生成的中间文件都会存放在这个目录里，默认位置为脚本执行的路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /etc/openvpn/easy-rsa</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./easyrsa init-pki</span></span><br><span class="line"></span><br><span class="line">Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa/vars</span><br><span class="line"></span><br><span class="line">init-pki complete; you may now create a CA or requests.</span><br><span class="line">Your newly created PKI dir is: /etc/openvpn/easy-rsa/pki</span><br></pre></td></tr></table></figure>

<h3 id="创建-CA-根证书"><a href="#创建-CA-根证书" class="headerlink" title="创建 CA 根证书"></a>创建 CA 根证书</h3><p>根据提示输入 Common Name，名字自定义。在这部分会提示 <code>Enter New CA Key Passphrase</code>，输入两次 PEM 密码，此密码必须记住，不然以后不能为证书签名。可以加 <code>nopass</code> 参数表示不用密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./easyrsa build-ca</span></span><br><span class="line"></span><br><span class="line">Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa/vars</span><br><span class="line">Using SSL: openssl OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line"></span><br><span class="line">Enter New CA Key Passphrase: </span><br><span class="line">Re-Enter New CA Key Passphrase: </span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">..................................................+++</span><br><span class="line">.............................................................................................+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#x27;.&#x27;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Common Name (eg: your user, host, or server name) [Easy-RSA CA]:myca</span><br><span class="line"></span><br><span class="line">CA creation complete and you may now import and sign cert requests.</span><br><span class="line">Your new CA certificate file for publishing is at:</span><br><span class="line">/etc/openvpn/easy-rsa/pki/ca.crt</span><br></pre></td></tr></table></figure>
<p>生成的 CA 证书位于 <code>pki/ca.crt</code>，私钥位于 <code>pki/private/</code></p>
<h3 id="创建-OpenVPN-服务端证书"><a href="#创建-OpenVPN-服务端证书" class="headerlink" title="创建 OpenVPN 服务端证书"></a>创建 OpenVPN 服务端证书</h3><p>命令中的 <code>openvpn-server</code> 为自定义名称，这里建议用使用 <code>nopass</code> 参数，否则以后启动服务时需要输入密码。创建过程中需要输入之前的 CA 根证书的 PEM 密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./easyrsa build-server-full openvpn-server nopass</span></span><br><span class="line"></span><br><span class="line">Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa/vars</span><br><span class="line">Using SSL: openssl OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">........................................................+++</span><br><span class="line">................+++</span><br><span class="line">writing new private key to &#x27;/etc/openvpn/easy-rsa/pki/easy-rsa-4754.a78E4M/tmp.ubswzT&#x27;</span><br><span class="line">-----</span><br><span class="line">Using configuration from /etc/openvpn/easy-rsa/pki/easy-rsa-4754.a78E4M/tmp.zSlCOO</span><br><span class="line">Enter pass phrase for /etc/openvpn/easy-rsa/pki/private/ca.key:</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">The Subject&#x27;s Distinguished Name is as follows</span><br><span class="line">commonName            :ASN.1 12:&#x27;openvpn-server&#x27;</span><br><span class="line">Certificate is to be certified until May 21 09:13:22 2025 GMT (825 days)</span><br><span class="line"></span><br><span class="line">Write out database with 1 new entries</span><br><span class="line">Data Base Updated</span><br></pre></td></tr></table></figure>
<p>生成的 OpenVPN 服务端证书位于 <code>pki/issued/</code>，私钥位于 <code>pki/private/</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> pki/issued/</span></span><br><span class="line">openvpn-server.crt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> pki/private/</span></span><br><span class="line">ca.key  openvpn-server.key</span><br></pre></td></tr></table></figure>

<h3 id="生成-Diffie-Hellman-算法需要的密钥文件"><a href="#生成-Diffie-Hellman-算法需要的密钥文件" class="headerlink" title="生成 Diffie-Hellman 算法需要的密钥文件"></a>生成 Diffie-Hellman 算法需要的密钥文件</h3><p>创建 Diffie-Hellman，确保 key 穿越不安全网络的命令，时间会有点长，耐心等待。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./easyrsa gen-dh</span><br></pre></td></tr></table></figure>

<h3 id="生成-tls-auth-key"><a href="#生成-tls-auth-key" class="headerlink" title="生成 tls-auth key"></a>生成 tls-auth key</h3><p>此配置是为了防止 DDOS 和 TLS 攻击，这个属于可选安全配置。</p>
<p>强认证方式，防攻击。如果 OpenVPN 配置文件中启用此项(默认是启用的)，就需要执行此命令，并把 <code>ta.key</code> 放到 <code>/etc/openvpn/server</code> 目录。</p>
<p>配置文件中服务端第二个参数为 0，同时客户端也要有此文件，且 <code>client.conf</code> 中此指令的第二个参数需要为1。<strong>服务端有该配置，那么客户端也必须要有</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openvpn --genkey --secret ta.key</span><br></pre></td></tr></table></figure>

<h3 id="收集证书文件"><a href="#收集证书文件" class="headerlink" title="收集证书文件"></a>收集证书文件</h3><p>创建目录，将需要的证书文件统一放入此目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/openvpn/server/certs</span><br><span class="line"></span><br><span class="line">cp /etc/openvpn/easy-rsa/pki/ca.crt /etc/openvpn/server/certs</span><br><span class="line">cp /etc/openvpn/easy-rsa/pki/private/ca.key /etc/openvpn/server/certs</span><br><span class="line">cp /etc/openvpn/easy-rsa/pki/private/openvpn-server.key /etc/openvpn/server/certs</span><br><span class="line">cp /etc/openvpn/easy-rsa/pki/issued/openvpn-server.crt /etc/openvpn/server/certs</span><br><span class="line">cp /etc/openvpn/easy-rsa/pki/dh.pem /etc/openvpn/server/certs</span><br><span class="line"></span><br><span class="line">cp /etc/openvpn/easy-rsa/ta.key /etc/openvpn/server/certs</span><br></pre></td></tr></table></figure>

<h2 id="配置-OpenVPN-服务端"><a href="#配置-OpenVPN-服务端" class="headerlink" title="配置 OpenVPN 服务端"></a>配置 OpenVPN 服务端</h2><p>修改 OpenVPN 服务端配置文件，拷贝配置模板文件并修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/openvpn/server/</span><br><span class="line">cp /usr/share/doc/openvpn-2.4.12/sample/sample-config-files/server.conf ./</span><br></pre></td></tr></table></figure>

<p>配置文件中主要内容如下，<a href="#OpenVPN-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">配置文件详细说明参考</a> </p>
<figure class="highlight shell"><figcaption><span>/etc/openvpn/server/server.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">local 192.168.88.88</span><br><span class="line">port 1194</span><br><span class="line">proto udp</span><br><span class="line">dev tun</span><br><span class="line">ca server_certs/ca.crt</span><br><span class="line">cert server_certs/openvpn-server.crt</span><br><span class="line">key server_certs/openvpn-server.key</span><br><span class="line">dh dh.pem</span><br><span class="line">server 10.8.0.0 255.255.255.0</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line">push &quot;redirect-gateway def1 bypass-dhcp&quot;</span><br><span class="line">push &quot;dhcp-option DNS 8.8.8.8&quot;</span><br><span class="line">client-to-client</span><br><span class="line">keepalive 10 120</span><br><span class="line">comp-lzo</span><br><span class="line">user nobody</span><br><span class="line">group nobody</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">status openvpn-status.log</span><br><span class="line">log openvpn.log</span><br><span class="line">verb 3</span><br></pre></td></tr></table></figure>

<h3 id="开启系统-IPv4-转发功能"><a href="#开启系统-IPv4-转发功能" class="headerlink" title="开启系统 IPv4 转发功能"></a>开启系统 IPv4 转发功能</h3><p>修改内核配置文件 <code>/etc/sysctl.conf</code>，增加以下配置，开启内核 IPv4 转发功能</p>
<figure class="highlight shell"><figcaption><span>/etc/sysctl.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure>
<p>执行命令使配置生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h3 id="添加-iptables-防火墙规则"><a href="#添加-iptables-防火墙规则" class="headerlink" title="添加 iptables 防火墙规则"></a>添加 iptables 防火墙规则</h3><p>配置 iptables 防火墙规则，允许 OpenVPN 分配的网段 NAT</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE</span><br></pre></td></tr></table></figure>
<p>配置 iptables 防火墙规则(<code>filter</code> 表)，允许转发，同时放通 OpenVPN 监听的端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT</span><br><span class="line">iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -I INPUT -p udp --dport 1194 -j ACCEPT -m comment --comment &quot;openvpn&quot;</span><br></pre></td></tr></table></figure>

<p>要持久化配置，可以在 iptables 配置文件中增加如下主要配置</p>
<figure class="highlight shell"><figcaption><span>/etc/sysconfig/iptables</span></figcaption><table><tr><td class="code"><pre><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD DROP [0:0]</span><br><span class="line">:OUTPUT ACCEPT [4:368]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p udp --dport 1194 -j ACCEPT -m comment --comment &quot;openvpn&quot;</span><br><span class="line">-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">-A FORWARD -s 10.8.0.0/24 -j ACCEPT</span><br><span class="line">-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br><span class="line"></span><br><span class="line">*nat</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [4:368]</span><br><span class="line">-A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure>

<h3 id="启动-OpenVPN-服务"><a href="#启动-OpenVPN-服务" class="headerlink" title="启动 OpenVPN 服务"></a>启动 OpenVPN 服务</h3><p>执行以下命令可以在前台启动 OpenVPN 服务，并观察错误信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openvpn /etc/openvpn/server/server.conf</span><br></pre></td></tr></table></figure>
<p>启动之后，检查系统是否监听了 1194&#x2F;udp</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -anutp</span></span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">udp        0      0 0.0.0.0:739             0.0.0.0:*                           620/rpcbind         </span><br><span class="line">udp        0      0 0.0.0.0:1194            0.0.0.0:*                           9898/openvpn        </span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           931/dhclient        </span><br><span class="line">udp        0      0 0.0.0.0:111             0.0.0.0:*                           620/rpcbind         </span><br><span class="line">udp6       0      0 :::739                  :::*                                620/rpcbind         </span><br><span class="line">udp6       0      0 :::111                  :::*                                620/rpcbind  </span><br></pre></td></tr></table></figure>
<p>端口监听后，说明服务启动无异常，如果端口未监听，检查日志解决。</p>
<h1 id="OpenVPN-客户端安装配置"><a href="#OpenVPN-客户端安装配置" class="headerlink" title="OpenVPN 客户端安装配置"></a>OpenVPN 客户端安装配置</h1><h2 id="Windows-客户端配置"><a href="#Windows-客户端配置" class="headerlink" title="Windows 客户端配置"></a>Windows 客户端配置</h2><p><a href="https://openvpn.net/downloads/openvpn-connect-v3-windows.msi">下载 OpenVPN Windows 客户端</a></p>
<a href="/202302041721/" title="常用工具下载链接">常用工具下载链接</a>
<h3 id="在-OpenVPN-服务端为客户端生成证书"><a href="#在-OpenVPN-服务端为客户端生成证书" class="headerlink" title="在 OpenVPN 服务端为客户端生成证书"></a>在 OpenVPN 服务端为客户端生成证书</h3><p>在 OpenVPN 服务器的 <code>/etc/openvpn/easy-rsa/</code> 目录下，执行以下命令，为客户端生成无密码的证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./easyrsa build-client-full client nopass </span><br></pre></td></tr></table></figure>
<p>命令选项中，<code>nopass</code> 指定证书无密码，不安全，建议生产环境中配置密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./easyrsa build-client-full vpn1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>为指定用户生成证书，会首先询问设置用户证书密码，签发时会询问 <a href="#%E5%88%9B%E5%BB%BA-CA-%E6%A0%B9%E8%AF%81%E4%B9%A6">CA 证书密码</a>。</p>
<p>证书创建完成后，证书和私钥分别位于以下位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> pki/issued/</span></span><br><span class="line">openvpn-server.crt  vpn1.crt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> pki/private/</span></span><br><span class="line">ca.key  openvpn-server.key  vpn1.key</span><br></pre></td></tr></table></figure>

<p>客户端需要 CA 根证书（<code>/etc/openvpn/easy-rsa/pki/ca.crt</code>），客户端证书(<code>/etc/openvpn/easy-rsa/pki/issued/vpn1.crt</code>)和私钥(<code>/etc/openvpn/easy-rsa/pki/private/vpn1.key</code>)</p>
<h3 id="生成-OpenVPN-客户端配置文件"><a href="#生成-OpenVPN-客户端配置文件" class="headerlink" title="生成 OpenVPN 客户端配置文件"></a>生成 OpenVPN 客户端配置文件</h3><p><a href="#OpenVPN-%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">OpenVPN 客户端配置文件说明</a></p>
<p>客户端配置文件名默认 windows 为 <code>client.ovpn</code>，Linux 为 <code>client.conf</code></p>
<p>创建客户端配置文件目录，假设为 <code>/home/openvpn/vpn1/</code>，并拷贝相应的证书文件到此目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /etc/openvpn/easy-rsa/pki/ca.crt /home/openvpn/vpn1/ca.crt</span><br><span class="line">cp /etc/openvpn/easy-rsa/pki/private/vpn1.key /home/openvpn/vpn1/client.key</span><br><span class="line">cp /etc/openvpn/easy-rsa/pki/issued/vpn1.crt /home/openvpn/vpn1/client.crt</span><br></pre></td></tr></table></figure>
<p>为客户端 vpn1 创建 openvpn 客户端配置文件 <code>/home/openvpn/vpn1/client.ovpn</code> </p>
<figure class="highlight shell"><figcaption><span>client.ovpn</span></figcaption><table><tr><td class="code"><pre><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto udp     </span><br><span class="line">remote 39.xxx.xxx.xxx 1194  </span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">ca ca.crt</span><br><span class="line">cert client.crt     </span><br><span class="line">key client.key        </span><br><span class="line">comp-lzo</span><br><span class="line">verb 3</span><br></pre></td></tr></table></figure>
<p>将 <code>ca.crt</code> , <code>client.ovpn</code> , <code>client.crt</code> , <code>client.key</code> 发送到客户端。</p>
<p>在 Windows 上使用 OpenVPN 客户端导入配置 <code>client.ovpn</code>，即可正常连接。</p>
<h1 id="OpenVPN-服务端配置文件详解"><a href="#OpenVPN-服务端配置文件详解" class="headerlink" title="OpenVPN 服务端配置文件详解"></a>OpenVPN 服务端配置文件详解</h1><figure class="highlight shell"><figcaption><span>/etc/openvpn/server/server.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示 openvpn 服务端监听的地址</span></span><br><span class="line">local 0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监听的端口，默认是 1194</span></span><br><span class="line">port 1194</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用的协议，有 udp 和 tcp。建议选择 tcp</span></span><br><span class="line">proto tcp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用三层路由 IP 隧道( tun )还是二层以太网隧道( tap )。一般都使用 tun</span></span><br><span class="line">dev tun</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ca证书、服务端证书、服务端密钥和密钥交换文件。如果它们和 server.conf 在同一个目录下则可以不写绝对路径，否则需要写绝对路径调用</span></span><br><span class="line">ca ca.crt</span><br><span class="line">cert server.crt</span><br><span class="line">key server.key</span><br><span class="line">dh dh2048.pem</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vpn 服务端为自己和客户端分配 IP 的地址池。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务端自己获取网段的第一个地址(此处为 10.8.0.1)，后为客户端分配其他的可用地址。以后客户端就可以和 10.8.0.1 进行通信。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：该网段地址池不要和已有网段冲突或重复。其实一般来说是不用改的。除非当前内网使用了 10.8.0.0/24 的网段。</span></span><br><span class="line"></span><br><span class="line">server 10.8.0.0 255.255.255.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用一个文件记录已分配虚拟 IP 的客户端和虚拟 IP 的对应关系，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以后 openvpn 重启时，将可以按照此文件继续为对应的客户端分配此前相同的 IP。也就是自动续借 IP 的意思。</span></span><br><span class="line"></span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用tap模式的时候考虑此选项。</span></span><br><span class="line">server-bridge XXXXXX</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vpn 服务端向客户端推送 vpn 服务端内网网段的路由配置，以便让客户端能够找到服务端内网。多条路由就写多个 push 指令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分配网关</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dhcp分配dns</span></span><br><span class="line">push &quot;redirect-gateway def1 bypass-dhcp&quot;     </span><br><span class="line">push &quot;dhcp-option DNS 8.8.8.8&quot;        </span><br><span class="line"></span><br><span class="line">push &quot;route 10.0.10.0 255.255.255.0&quot;</span><br><span class="line">push &quot;route 192.168.10.0 255.255.255.0&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">让 vpn 客户端之间可以互相看见对方，即能互相通信。默认情况客户端只能看到服务端一个人；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认是注释的，不能客户端之间相互看见</span> </span><br><span class="line">client-to-client</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许多个客户端使用同一个 VPN 帐号连接服务端</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认是注释的，不支持多个客户登录一个账号</span></span><br><span class="line">duplicate-cn</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每 10 秒 ping 一次，120 秒后没收到 ping 就说明对方挂了</span></span><br><span class="line">keepalive 10 120</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加强认证方式，防攻击。如果配置文件中启用此项(默认是启用的)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要执行 openvpn --genkey --secret ta.key，并把 ta.key 放到 /etc/openvpn/server 目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务端第二个参数为 0；同时客户端也要有此文件，且 client.conf 中此指令的第二个参数需要为 1。</span></span><br><span class="line">tls-auth ta.key 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择一个密码。如果在服务器上使用了 cipher 选项，那么您也必须在这里指定它。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意，v2.4 客户端/服务器将在 TLS 模式下自动协商 AES-256-GCM。</span></span><br><span class="line">cipher AES-256-CBC</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openvpn 2.4 版本的 vpn 才能设置此选项。表示服务端启用 lz4 的压缩功能，传输数据给客户端时会压缩数据包。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">push 后在客户端也配置启用 lz4 的压缩功能，向服务端发数据时也会压缩。如果是 2.4 版本以下的老版本，则使用用 comp-lzo 指令</span></span><br><span class="line"></span><br><span class="line">compress lz4-v2</span><br><span class="line">push &quot;compress lz4-v2&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用 lzo 数据压缩格式。此指令用于低于 2.4 版本的老版本。且如果服务端配置了该指令，客户端也必须要配置</span></span><br><span class="line">comp-lzo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">并发客户端的连接数</span></span><br><span class="line">max-clients 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 ping 得知超时时，当重启 vpn 后将使用同一个密钥文件以及保持 tun 连接状态</span></span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件中输出当前的连接信息，每分钟截断并重写一次该文件</span></span><br><span class="line">status openvpn-status.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认vpn的日志会记录到rsyslog中，使用这两个选项可以改变。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">log</span> 指令表示每次启动 vpn 时覆盖式记录到指定日志文件中，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log-append 则表示每次启动 vpn 时追加式的记录到指定日志中。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但两者只能选其一，或者不选时记录到rsyslog中</span></span><br><span class="line">;log openvpn.log</span><br><span class="line">;log-append openvpn.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志记录的详细级别。</span></span><br><span class="line">verb 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">沉默的重复信息。最多 20 条相同消息类别的连续消息将输出到日志。</span></span><br><span class="line">;mute 20</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当服务器重新启动时，通知客户端，以便它可以自动重新连接。仅在 UDP 协议是可用</span></span><br><span class="line">explicit-exit-notify 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="OpenVPN-客户端配置文件详解"><a href="#OpenVPN-客户端配置文件详解" class="headerlink" title="OpenVPN 客户端配置文件详解"></a>OpenVPN 客户端配置文件详解</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">标识这是个客户端</span></span><br><span class="line">client</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用三层路由IP隧道(tun)还是二层以太网隧道(tap)。服务端是什么客户端就是什么</span></span><br><span class="line">dev tun</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用的协议，有udp和tcp。服务端是什么客户端就是什么</span></span><br><span class="line">proto tcp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务端的地址和端口</span></span><br><span class="line">remote 10.0.0.190 1194</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一直尝试解析 OpenVPN 服务器的主机名。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在机器上非常有用，不是永久连接到互联网，如笔记本电脑。</span></span><br><span class="line">resolv-retry infinite</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">大多数客户机不需要绑定到特定的本地端口号。</span></span><br><span class="line">nobind</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化后的降级特权(仅非 windows)</span></span><br><span class="line">;user nobody</span><br><span class="line">;group nobody</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">尝试在重新启动时保留某些状态。</span></span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ca 证书、客户端证书、客户端密钥</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果它们和 client.conf 或 client.ovpn 在同一个目录下则可以不写绝对路径，否则需要写绝对路径调用</span></span><br><span class="line">ca ca.crt</span><br><span class="line">cert client.crt</span><br><span class="line">key client.key</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过检查 certificate 是否具有正确的密钥使用设置来验证服务器证书。</span></span><br><span class="line">remote-cert-tls server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加强认证方式，防攻击。服务端有配置，则客户端必须有</span></span><br><span class="line">tls-auth ta.key 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择一个密码。如果在服务器上使用了 cipher 选项，那么您也必须在这里指定它。注意，v2.4 客户端/服务器将在 TLS 模式下自动协商 AES-256-GCM。</span></span><br><span class="line">cipher AES-256-CBC</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务端用的什么，客户端就用的什么</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示客户端启用lz4的压缩功能，传输数据给客户端时会压缩数据包。</span></span><br><span class="line">compress lz4-v2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志级别</span></span><br><span class="line">verb 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志。</span></span><br><span class="line">;mute 20</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.simaek.com/archives/203/">CentOS 7安装配置OpenVPN服务器</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>VPN</category>
      </categories>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统导论专业词汇表</title>
    <url>/202405311003/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Operating System Concepts v10(操作系统导论第10版)中涉及的相关专业词汇。</p>
<h1 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h1><h2 id="EEPROM"><a href="#EEPROM" class="headerlink" title="EEPROM"></a>EEPROM</h2><p><code>EEPROM(Electrically Erasable Programmable Read-Only Memory)</code>.</p>
<p>Operating System 上电运行后启动的第一个程序是 <code>bootstrap program</code> （操作系统启动引导程序，其启动之后会加载操作系统）。RAM 是易失性存储，不能将 <code>bootstrap program</code> 放置到 RAM 中，当下主机会使用 EEPROM 放置 <code>bootstrap program</code>。<code>bootstrap program</code> 可以被修改，但是不能频繁修改，它属于慢速存储，其中包含了不经常会使用的静态程序和数据。比如 iPhone 使用了 EEPROM 存储了设备 <code>serial numbers</code> 和 <code>hardware information</code></p>
<h2 id="Main-Memory"><a href="#Main-Memory" class="headerlink" title="Main Memory"></a>Main Memory</h2><p><strong>Main Memory</strong> 通常是 CPU 可以直接定位和访问的唯一的大存储设备。如果 CPU 要处理磁盘上的数据，数据必须首先被传输到 <strong>Main Memory</strong>，指令要能被 CPU 执行，也必须首先载入内存中。</p>
<p><strong><code>Program</code></strong> 要能被运行，首先必须载入到内存中，并提供内存绝对地址给 CPU 以供加载指令和数据。</p>
<h2 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h2><p> <code>Nonvolatile Memory Devices (NVM)</code> </p>
<h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><h2 id="SMP"><a href="#SMP" class="headerlink" title="SMP"></a>SMP</h2><p><code>Symmetric Multiprocessing (SMP)</code>，对称处理系统，在系统中存在多个处理器，每个处理器中包含一个或多个 CPU，每个 CPU 有自己的 L1 Cache （CPU 独享）和 Register，每个处理器有 L2 Cache（处理器中的多个 CPU 共享 L2 cache），同一个处理器中的 CPU 使用处理器内部通信系统通信，跨处理器的 CPU 之间通过系统总线（Bus）通信。 [^1.3.2]</p>
<h2 id="NUMA"><a href="#NUMA" class="headerlink" title="NUMA"></a>NUMA</h2><p><strong>系统中的处理器不宜太多，多处理器可以提高系统的任务处理能力，但是当 CPU 过高时，对系统总线的争抢会成为系统瓶颈。</strong></p>
<p>为了避免太多 Processors 争抢系统总线造成的性能下降，一个可选的 方法是为每个 CPU（或 CPU 集）提供专用的本地内存，CPU 通过一个更小更快的本地 bus 连接专用的本地内存。所有的 CPU 通过一个 <strong>内部通信系统</strong> 进行连接，所有 CPU 共享同一个物理地址空间，这种架构被称为 <code>Non-uniform Memory Access (NUMA)</code></p>
<p><img src="https://i.csms.tech/img_236.png"></p>
<h2 id="Program-and-Process"><a href="#Program-and-Process" class="headerlink" title="Program and Process"></a>Program and Process</h2><p><strong><code>Program</code></strong> 是一个静态实体，只是存储在操作系统中的文件（集合）</p>
<p><strong><code>Process</code></strong> 是操作系统上的活动（Active）实体，是 <strong><code>Program</code></strong> 由操作系统加载运行之后的实体。</p>
<p><strong><code>Process</code></strong> 运行过程中需要操作系统为其分配各种资源，如 CPU、Memory、Files、IO 等来完成其运行。</p>
<p>如果一个 <strong><code>Program</code></strong> 被操作系统运行（启动）了多次，那么其产生的多个 <strong><code>Process</code></strong>  属于分割（单独）的实体。</p>
<h1 id="Disk"><a href="#Disk" class="headerlink" title="Disk"></a>Disk</h1><p>可以讲 NVS 根据硬盘组成划分成 2 大类</p>
<ul>
<li>机械硬盘（Mechanical）： HDDs，Optical Disks，Holographic storage，Magnetic Tape。</li>
<li>Electrical（NVM）： Flash Memory，FRAM，NRAM，SSD</li>
</ul>
<h2 id="NVS"><a href="#NVS" class="headerlink" title="NVS"></a>NVS</h2><p><code>Nonvolatile Storage (NVS)</code></p>
<h2 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h2><p><code>Direct Memory Access (DMA)</code> 在 CPU 需要从存储读写大量数据到内存时，如果数据通过 CPU 中转，成本太高，为了解决这个问题，DMA 被采用，在传输大块数据时，首先在 CPU 中为数据设置好必要的 buffer、指针、计数器等资源，设备控制器直接（在磁盘和内存中）传输数据块而无须 CPU 参与实际的数据传输，只需要在数据块传输完成时，向 CPU 产生中断以指示设备控制器数据传输已完成。在 DMA 过程中，CPU 依旧可以做其他工作。 [^1.2.3]</p>
<h1 id="参考链接-Bibliography"><a href="#参考链接-Bibliography" class="headerlink" title="参考链接|Bibliography"></a>参考链接|Bibliography</h1><p><a href="https://os.ecci.ucr.ac.cr/slides/Abraham-Silberschatz-Operating-System-Concepts-10th-2018.pdf">Operating System Concepts v10 Online</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><p>[^1.2.3]: I&#x2F;O Structure</p>
<p>[^1.3.2]: Multiprocessor Systems</p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>OS</category>
        <category>Operating System Concepts v10</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>php 编译安装配置</title>
    <url>/202207301722/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos 7</li>
<li>Php 7.2</li>
</ul>
<span id="more"></span>

<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>安装依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y gcc libxml2-devel libjpeg-turbo-devel libpng-devel libxslt libxslt-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel curl curl-devel openssl openssl-devel  bzip2  bzip2-devel  libxslt libxslt-devel  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel curl curl-devel openssl openssl-devel perl perl-devel httpd-devel readline-devel autoconf</span><br></pre></td></tr></table></figure>
<p>下载安装包，编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://am1.php.net/distributions/php-7.2.0.tar.bz2</span><br><span class="line">tar -xf php-7.2.0.tar.bz2</span><br><span class="line">cd php-7.2.0</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/php7/ \</span><br><span class="line">--with-fpm-user=nginx \</span><br><span class="line">--with-curl  --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 \</span><br><span class="line">--with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql \</span><br><span class="line">--with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib \</span><br><span class="line">--enable-fpm --enable-bcmath -enable-inline-optimization  --enable-mbregex --enable-mbstring \</span><br><span class="line">--enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem \</span><br><span class="line">--enable-xml --enable-zip --enable-pcntl --with-curl  --enable-ftp --enable-session --enable-xml \</span><br><span class="line">--with-freetype-dir --with-jpeg-dir --enable-calendar --enable-exif --with-readline --enable-sysvshm --enable-wddx</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>安装完成后，拷贝配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp php.ini-production /usr/local/php7/etc/php.ini</span><br><span class="line">cd /usr/local/php7/etc</span><br><span class="line">mv php-fpm.conf.default php-fpm.conf</span><br></pre></td></tr></table></figure>
<p>php编译好之后，提供了一个php-fpm的程序作为服务管理程序，位置在编译后的源码目录：<code>php-7.2.0/sapi/fpm/</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp php-fpm.service /usr/lib/systemd/system/</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start php-fpm</span><br></pre></td></tr></table></figure>

<h3 id="php-常用扩展安装方法"><a href="#php-常用扩展安装方法" class="headerlink" title="php 常用扩展安装方法"></a>php 常用扩展安装方法</h3><p>php 扩展优先选择使用 <code>pecl</code> 命令安装，需要特殊配置时再选择编译安装， <code>pecl</code> 安装 <code>redis</code> 扩展示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pecl install redis</span><br></pre></td></tr></table></figure>

<h4 id="yac-扩展安装"><a href="#yac-扩展安装" class="headerlink" title="yac 扩展安装"></a>yac 扩展安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/laruence/yac</span><br><span class="line">cd yac</span><br><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php7/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h4 id="composer-安装"><a href="#composer-安装" class="headerlink" title="composer 安装"></a>composer 安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php -r &quot;readfile(&#x27;https://getcomposer.org/installer&#x27;);&quot; | php</span><br><span class="line">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>

<h4 id="inotify-安装"><a href="#inotify-安装" class="headerlink" title="inotify 安装"></a>inotify 安装</h4><p>扩展<a href="http://pecl.php.net/package/inotify">下载地址</a><br>比如安装2.0.0版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://pecl.php.net/get/inotify-2.0.0.tgz</span><br><span class="line">tar -xf inotify-2.0.0.tgz</span><br><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php7/bin/php-config --enable-inotify</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h4 id="memcache-扩展安装"><a href="#memcache-扩展安装" class="headerlink" title="memcache 扩展安装"></a>memcache 扩展安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install libmemcached libmemcached-devel     ##先按照依赖，否则make报错</span><br><span class="line">git clone https://github.com/php-memcached-dev/php-memcached.git php-memcache</span><br><span class="line">cd php-memcache/</span><br><span class="line">git checkout php7</span><br><span class="line">phpize</span><br><span class="line">./configure --enable-memcached --with-php-config=/usr/local/php7/bin/php-config</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p><code>php.ini</code> 中添加配置 <code>extension=memcached.so</code></p>
<h4 id="gd-扩展安装"><a href="#gd-扩展安装" class="headerlink" title="gd 扩展安装"></a>gd 扩展安装</h4><p>进入到php的源码目录下的ext&#x2F;gd目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd php-7.2.0/ext/gd</span><br><span class="line">yum -y install libjpeglibjpeg-devel libpng libpng-devel freetype freetype-devel</span><br><span class="line">make clean</span><br><span class="line">phpize</span><br><span class="line">./configure --with-png-dir --with-freetype-dir --with-jpeg-dir --with-gd --with-php-config=/usr/local/php7/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p><code>php.ini</code> 中添加配置 <code>extension=gd.so</code></p>
<h4 id="mongodb-扩展安装"><a href="#mongodb-扩展安装" class="headerlink" title="mongodb 扩展安装"></a>mongodb 扩展安装</h4><p>扩展<a href="http://pecl.php.net/package/mongodb">下载地址</a>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://pecl.php.net/get/mongodb-1.14.0.tgz</span><br><span class="line">tar -xf mongodb-1.14.0.tgz</span><br><span class="line">cd mongodb-1.14.0</span><br><span class="line">/usr/local/php7/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php7/bin/php-config</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h4 id="imagick-扩展安装"><a href="#imagick-扩展安装" class="headerlink" title="imagick 扩展安装"></a>imagick 扩展安装</h4><p>首先安装ImageMagick</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://imagemagick.org/download/ImageMagick.tar.gz</span><br><span class="line">tar -xf ImageMagick.tar.gz</span><br><span class="line">cd ImageMagick</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>安装 <code>imagick</code> 扩展</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://pecl.php.net/get/imagick-3.4.4.tgz</span><br><span class="line">/usr/local/php7/bin/phpize </span><br><span class="line">./configure --with-php-config=/usr/local/php7/bin/php-config</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h4 id="trie-filter-扩展安装"><a href="#trie-filter-扩展安装" class="headerlink" title="trie_filter 扩展安装"></a>trie_filter 扩展安装</h4><p>安装依赖 <code>libdatrie</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -O ftp://linux.thai.net/pub/ThaiLinux/software/libthai/libdatrie-0.2.4.tar.gz</span><br><span class="line">tar zxvf libdatrie-0.2.4.tar.gz</span><br><span class="line">cd libdatrie-0.2.4</span><br><span class="line">make clean</span><br><span class="line">./configure --prefix=/usr/local/libdatrie</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>安装扩展 <code>trie_filter</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/jiopuud/trie_filter/archive/master.zip</span><br><span class="line">unzip master.zip</span><br><span class="line">cd trie_filter-master</span><br><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php7/bin/php-config --with-trie_filter=/usr/local/libdatrie</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="swoole-扩展安装"><a href="#swoole-扩展安装" class="headerlink" title="swoole 扩展安装"></a>swoole 扩展安装</h4><p>安装依赖 <code>hiredis</code>（可选操作）<br><a href="https://github.com/redis/hiredis/releases">下载链接</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>安装 <code>woole</code> 扩展<br><a href="https://github.com/swoole/swoole-src/releases">下载地址</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xf swoole-src-1.9.15.tar.gz</span><br><span class="line">cd swoole-src-1.9.15</span><br><span class="line">phpize</span><br><span class="line">./configure --enable-openssl --enable-async-redis --with-php-config=/usr/local/php7/bin/php-config</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>--enable-async-redis</code> 依赖<code>hiredis</code>， 需要先安装 <code>hiredis</code><br>编译安装过程中，可能出现找不到动态链接库的问题，可将 <code>/usr/local/lib</code> 添加到共享的动态库，<br>编辑 <code>ldconfig</code> 配置文件 <code>/etc/ld.so.conf</code>，追加以下内容</p>
<figure class="highlight shell"><figcaption><span>/etc/ld.so.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">/usr/local/lib</span><br></pre></td></tr></table></figure>
<p>修改 <code>ldconfig</code> 配置后，执行以下命令使新配置生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ldconfig</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="phpredis-扩展安装"><a href="#phpredis-扩展安装" class="headerlink" title="phpredis 扩展安装"></a>phpredis 扩展安装</h4><p><a href="https://github.com/phpredis/phpredis/releases">下载地址</a>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd phpredis/</span><br><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php7/bin/php-config</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h3 id="php-fpm-常见配置"><a href="#php-fpm-常见配置" class="headerlink" title="php-fpm 常见配置"></a>php-fpm 常见配置</h3><h4 id="php-fpm-日志相关配置"><a href="#php-fpm-日志相关配置" class="headerlink" title="php-fpm 日志相关配置"></a>php-fpm 日志相关配置</h4><p><code>php-fpm</code> 全局错误日志配置默认位于 <code>etc/php-fpm.conf</code></p>
<figure class="highlight shell"><figcaption><span>etc/php-fpm.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">;;;;;;;;;;;;;;;;;;</span><br><span class="line">; Global Options ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">error_log = /var/log/php-fpm/error.log</span><br><span class="line"></span><br><span class="line">; Log level</span><br><span class="line">; Possible Values: alert, error, warning, notice, debug</span><br><span class="line">; Default Value: notice</span><br><span class="line">;log_level = notice</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>php-fpm</code> 默认相关 <code>pool</code> 日志配置主要位于 <code>etc/php-fpm.d/www.conf</code>。默认情况下，<code>pool</code> 中的日志（<code>stdout and stderr</code>） 会被重定向到 <code>/dev/null</code>。</p>
<p>如果需要将对应 <code>pool</code> 中的日志输出到全局错误日志配置的路径，需要配置 <code>catch_workers_output = yes</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">access.log = /var/log/php/www.access.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">慢日志</span></span><br><span class="line">slowlog = /var/log/php/www.log.slow</span><br><span class="line">request_slowlog_timeout = 10</span><br><span class="line"></span><br><span class="line">; Redirect worker stdout and stderr into main error log. If not set, stdout and</span><br><span class="line">; stderr will be redirected to /dev/null according to FastCGI specs.</span><br><span class="line">; Note: on highloaded environement, this can cause some delay in the page</span><br><span class="line">; process time (several ms).</span><br><span class="line">; Default Value: no</span><br><span class="line">;catch_workers_output = yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下配置是对 php.ini 的补充，会在定义的 pool （比如 www） 中覆盖 php.ini 中的配置。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">否则为了记录日志，需要修改 php.ini 文件，增加以下配置</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># log_errors = On</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># error_log = &quot;/usr/local/php/var/log/error_log&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># error_reporting=E_ALL&amp;~E_NOTICE</span></span></span><br><span class="line"></span><br><span class="line">php_flag[display_errors] = on</span><br><span class="line">php_admin_value[error_log] = /var/log/php-fpm/www-error.log</span><br><span class="line">php_admin_flag[log_errors] = on</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>predixy 安装配置</title>
    <url>/202207271506/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3></blockquote>
<ul>
<li>Centos 7</li>
<li>predixy-1.0.5</li>
</ul>
<blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3></blockquote>
<p><a href="https://github.com/joyieldInc/predixy">下载地址</a>, clone或下载最新的版本或指定版本下载后解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libstdc++-static -y</span><br><span class="line">cd predixy-1.0.5</span><br><span class="line">make</span><br><span class="line">cp src/predixy /usr/local/bin/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要依赖 <code>libstdc++-static</code>, 否则make会报错：<br>&#x2F;bin&#x2F;ld: cannot find -lstdc++<br>collect2: error: ld returned 1 exit status<br>make[1]: *** [predixy] Error 1<br>make[1]: Leaving directory &#96;&#x2F;root&#x2F;predixy-1.0.5&#x2F;src’<br>make: *** [default] Error 2</p>
</blockquote>
<blockquote>
<h3 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h3></blockquote>
<ul>
<li><p>predixy.conf，整体配置文件，会引用下面的配置文件</p>
</li>
<li><p>cluster.conf，用于Redis Cluster时，配置后端redis信息</p>
</li>
<li><p>sentinel.conf，用于Redis Sentinel时，配置后端redis信息</p>
</li>
<li><p>auth.conf，访问权限控制配置，可以定义多个验证密码，可每个密码指定读、写、管理权限，以及定义可访问的健空间</p>
</li>
<li><p>dc.conf，多数据中心支持，可以定义读写分离规则，读流量权重分配</p>
</li>
<li><p>latency.conf， 延迟监控规则定义，可以指定需要监控的命令以及延时时间间隔</p>
</li>
</ul>
<blockquote>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">predixy /predixy/conf/predixy.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用默认的配置文件predixy.conf， predixy将监听地址0.0.0.0:7617，后端的redis是Redis Cluster 127.0.0.1:6379  </p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Predixy</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus blackbox export 安装配置</title>
    <url>/202309261542/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><code>blackbox_exporter</code> 是一个由 Prometheus 社区维护的项目，它允许用户通过 HTTP、HTTPS、DNS、TCP 和 ICMP 协议对服务进行“黑盒”方式的探测，以检测和监控网络协议的可用性和响应时间。</p>
<p>本文档以在 Kubernetes 中部署 <code>blackbox_exporter</code> 为例，演示其使用方法。</p>
<p>为了能够监控到 Kubernetes 集群内部的部分信息（如 <code>api-server</code> 的证书等），建议 <a href="https://csms.tech/202212141608/#创建集群角色">参考文档为其配置 RBAC 策略</a> 以使其能读取 <code>kube-apiserver</code> 相关资源，<strong>本文档中的配置示例基于此权限配置</strong>。Namespace 为 <code>prometheus</code></p>
<h1 id="Kubernetes-中部署-blackbox-export"><a href="#Kubernetes-中部署-blackbox-export" class="headerlink" title="Kubernetes 中部署 blackbox_export"></a>Kubernetes 中部署 blackbox_export</h1><h2 id="创建-ConfigMap-以外部化-blackbox-export-配置"><a href="#创建-ConfigMap-以外部化-blackbox-export-配置" class="headerlink" title="创建 ConfigMap 以外部化 blackbox_export 配置"></a>创建 ConfigMap 以外部化 blackbox_export 配置</h2><p><code>blackbox_export</code> 基于配置文件运行，将其配置文件通过 Kubernetes 的 ConfiMap 存储，分离运行环境和配置，方便管理。</p>
<p>参考以下配置，创建 ConfigMap</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  blackbox.yml: |-</span><br><span class="line">    modules:</span><br><span class="line">      http_2xx:</span><br><span class="line">        prober: http</span><br><span class="line">        timeout: 10s</span><br><span class="line">        http:</span><br><span class="line">          preferred_ip_protocol: &quot;ip4&quot; ##如果http监测是使用ipv4 就要写上</span><br><span class="line">      tcp_connect:</span><br><span class="line">        prober: tcp</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: blackbox-export-config</span><br><span class="line">  namespace: prometheus</span><br></pre></td></tr></table></figure>

<h2 id="部署-blackbox-export"><a href="#部署-blackbox-export" class="headerlink" title="部署 blackbox_export"></a>部署 blackbox_export</h2><p>参考以下内容，创建 Deployment 和 Service，在此配置中，使用上面创建的 ConfigMap 作为 <code>blackbox_export</code> 的配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-blackbox-export</span><br><span class="line">  namespace: prometheus</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus-blackbox-export</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: prometheus-blackbox-export</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus-blackbox-export</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: prometheus-blackbox-export</span><br><span class="line">          image: bitnami/blackbox-exporter</span><br><span class="line">          args:</span><br><span class="line">            - &quot;--config.file=/etc/blackbox/blackbox.yml&quot;</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 9115</span><br><span class="line">          resources:</span><br><span class="line">            requests:</span><br><span class="line">              cpu: 500m</span><br><span class="line">              memory: 500M</span><br><span class="line">            limits:</span><br><span class="line">              cpu: 1</span><br><span class="line">              memory: 1Gi</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: blackbox-config-volume</span><br><span class="line">              mountPath: /etc/blackbox/</span><br><span class="line">      volumes:</span><br><span class="line">        - name: blackbox-config-volume</span><br><span class="line">          configMap:</span><br><span class="line">            defaultMode: 420</span><br><span class="line">            name: blackbox-export-config</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: blackbox-service</span><br><span class="line">  namespace: prometheus</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - name: blackbox-port</span><br><span class="line">      port: 9115</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: 9115</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus-blackbox-export            </span><br></pre></td></tr></table></figure>

<p>部署成功后，从 <code>prometheus</code> 的 Namespace 中测试访问 <code>blackbox_export</code> 的 Endpoint <code>blackbox-service:9115</code>，如果是在其他 Namespace，可以使用 Endpoint <code>blackbox-service.prometheus.svc.cluster.local:9115</code>。如果集群的域名不是 <code>cluster.local</code>，修改为实际值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">prometheus-7589d5bbdd-xdjwt:~# curl -v blackbox-service:9115</span><br><span class="line">*   Trying 10.111.137.0:9115...</span><br><span class="line">* Connected to blackbox-service (10.111.137.0) port 9115 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: blackbox-service:9115</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/8.0.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 200 OK</span></span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Date: Tue, 26 Sep 2023 09:11:25 GMT</span><br><span class="line">&lt; Content-Length: 544</span><br><span class="line">&lt; </span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;Blackbox Exporter&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Blackbox Exporter&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&lt;a href=&quot;probe?target=prometheus.io&amp;module=http_2xx&quot;&gt;Probe prometheus.io for http_2xx&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;a href=&quot;probe?target=prometheus.io&amp;module=http_2xx&amp;debug=true&quot;&gt;Debug probe prometheus.io for http_2xx&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;a href=&quot;metrics&quot;&gt;Metrics&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;a href=&quot;config&quot;&gt;Configuration&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">    &lt;h2&gt;Recent Probes&lt;/h2&gt;</span><br><span class="line">    &lt;table border=&#x27;1&#x27;&gt;&lt;tr&gt;&lt;th&gt;Module&lt;/th&gt;&lt;th&gt;Target&lt;/th&gt;&lt;th&gt;Result&lt;/th&gt;&lt;th&gt;Debug&lt;/th&gt;&lt;/table&gt;&lt;/body&gt;</span><br><span class="line">* Connection #0 to host blackbox-service left intact</span><br><span class="line">    &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Prometheus-读取-blackbox-exporter-数据"><a href="#Prometheus-读取-blackbox-exporter-数据" class="headerlink" title="Prometheus 读取 blackbox_exporter 数据"></a>Prometheus 读取 blackbox_exporter 数据</h2><p>在 Prometheus 配置中添加以下内容，使 Prometheus 抓取 <code>black_exporter</code> 的监控数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;blackbox_http_2xx&#x27;</span><br><span class="line">    scrape_interval: 60s</span><br><span class="line">    metrics_path: /probe</span><br><span class="line">    params:</span><br><span class="line">      module: [http_2xx]  # Look for a HTTP 200 response.</span><br><span class="line">    static_configs:</span><br><span class="line">        - targets:</span><br><span class="line">          - http://www.google.com:5000/</span><br><span class="line">    relabel_configs:</span><br><span class="line">        - source_labels: [__address__]</span><br><span class="line">          target_label: __param_target</span><br><span class="line">        - source_labels: [__param_target]</span><br><span class="line">          target_label: instance</span><br><span class="line">        - target_label: __address__</span><br><span class="line">          replacement: blackbox-service.prometheus.svc.cluster.local:9115</span><br></pre></td></tr></table></figure>
<p>部署完成后，观察过 Prometheus 的 Target，正常情况下可以看到监控目标的状态。</p>
<span id="more"></span>

<h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="使用-blackbox-exporter-和-Prometheus-监控-Kubernetes-API-Server-的-Endpoint"><a href="#使用-blackbox-exporter-和-Prometheus-监控-Kubernetes-API-Server-的-Endpoint" class="headerlink" title="使用 blackbox_exporter 和 Prometheus 监控 Kubernetes API Server 的 Endpoint"></a>使用 blackbox_exporter 和 Prometheus 监控 Kubernetes API Server 的 Endpoint</h2><p>本示例演示使用 blackbox_exporter 和 Prometheus 监控 Kubernetes API Server 的 Endpoint，Kubernetes 集群默认的域为 <code>cluster.local</code>，本示例中的 Kubernetes 集群使用默认域。Kubernetes 集群中和 <code>kube-apiserver</code> 的通信一般都是使用 HTTPS，因此在使用 <code>blackbox_exporter</code> 监控时需要指定使用 HTTPS 请求 <code>kube-apiserver</code>，同时可以达到监控 <code>kube-apiserver</code> HTTPS 证书的目的。</p>
<p>使用 <code>kubeadmin</code> 初始化的集群默认使用自签名的证书，客户端使用 HTTPS 访问时需要提供 CA 证书。以下 <code>blackbox_exporter</code> 配置中，模块 <code>http_k8s_cluster</code> 配置了必须使用 HTTPS 请求 Endpoint，并且配置了 CA 路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">modules:</span><br><span class="line">  http_2xx:</span><br><span class="line">    prober: http</span><br><span class="line">    timeout: 10s</span><br><span class="line">    http:</span><br><span class="line">      preferred_ip_protocol: &quot;ip4&quot; ##如果http监测是使用ipv4 就要写上</span><br><span class="line">  tcp_connect:</span><br><span class="line">    prober: tcp</span><br><span class="line">  http_k8s_cluster:</span><br><span class="line">    prober: http</span><br><span class="line">    timeout: 5s</span><br><span class="line">    http:</span><br><span class="line">      method: GET</span><br><span class="line">      fail_if_ssl: false</span><br><span class="line">      fail_if_not_ssl: true</span><br><span class="line">      valid_status_codes: [200, 403]</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">        insecure_skip_verify: false</span><br></pre></td></tr></table></figure>

<p>在 Prometheus 配置中添加以下 Target，用于监控  <code>kube-apiserver</code> 的 Endpoint <code>https://kubernetes.default.svc.cluster.local</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;blackbox_http_k8s_cluster&#x27;</span><br><span class="line">    scrape_interval: 60s</span><br><span class="line">    metrics_path: /probe</span><br><span class="line">    params:</span><br><span class="line">      module: [http_k8s_cluster]  # Look for a HTTP 200 response.</span><br><span class="line">    static_configs:</span><br><span class="line">        - targets:</span><br><span class="line">          - https://kubernetes.default.svc.cluster.local</span><br><span class="line">    relabel_configs:</span><br><span class="line">        - source_labels: [__address__]</span><br><span class="line">          target_label: __param_target</span><br><span class="line">        - source_labels: [__param_target]</span><br><span class="line">          target_label: instance</span><br><span class="line">        - target_label: __address__</span><br><span class="line">          replacement: blackbox-service.prometheus.svc.cluster.local:9115</span><br></pre></td></tr></table></figure>
<p>配置成功后，观察 Prometheus 中的 Targets，可以看到 Targets 状态<br><img src="https://i.csms.tech/img_221.png"></p>
<h2 id="监控-HTTPS-类型-的-Endpoints-的证书过期时间"><a href="#监控-HTTPS-类型-的-Endpoints-的证书过期时间" class="headerlink" title="监控 HTTPS 类型 的 Endpoints 的证书过期时间"></a>监控 HTTPS 类型 的 Endpoints 的证书过期时间</h2><p>假如在 <code>blackbox_exporter</code> 配置了 <code>prober</code> 为 <code>http</code> 类型的 module，当在 Prometheus 中配置的 <code>targets</code> 的请求协议使用 <code>https</code> 时，<code>blackbox_exporter</code> 提供了关于证书的监控指标。配置示例可以参考 <a href="#%E4%BD%BF%E7%94%A8-blackbox-exporter-%E5%92%8C-Prometheus-%E7%9B%91%E6%8E%A7-Kubernetes-API-Server-%E7%9A%84-Endpoint">使用 blackbox_exporter 和 Prometheus 监控 Kubernetes API Server 的 Endpoint</a></p>
<p><code>probe_ssl_earliest_cert_expiry</code> 指标显示了证书链中最早到期的证书的过期时间。其值是一个 Unix 时间戳，表示证书的过期日期和时间。</p>
<p>如果要计算证书剩余的有效天数，可以使用以下表达式计算</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(probe_ssl_earliest_cert_expiry - time()) / 86400</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus Federation 安装配置</title>
    <url>/202306271310/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://i.csms.tech/img_183.png"></p>
<p>如上图所示，在每个数据中心部署单独的 Prometheus Server，用于采集当前数据中心监控数据。并由一个中心的 Prometheus Server 负责聚合多个数据中心的监控数据。这一特性在 Promthues 中称为 Federation (联邦集群）。</p>
<p>Prometheus Federation (联邦集群)的核心在于每一个 Prometheus Server 都包含一个用于获取当前实例中监控样本的接口 <code>/federate</code>。对于中心 Prometheus Server 而言，无论是从其他的 Prometheus 实例还是 Exporter 实例中获取数据实际上并没有任何差异。</p>
<p>以下配置示例在中心 Prometheus Server 配置其抓取其他 Prometheus Server 的指标，必须至少有一个 <code>match</code> 配置，以指定要抓取的目标 Prometheus Server 的 Job 名称，可以使用正则表达式匹配抓取任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;federate&#x27;</span><br><span class="line">    scrape_interval: 15s</span><br><span class="line">    honor_labels: true</span><br><span class="line">    metrics_path: &#x27;/federate&#x27;</span><br><span class="line">    params:</span><br><span class="line">      &#x27;match[]&#x27;:</span><br><span class="line">        - &#x27;&#123;job=&quot;prometheus&quot;&#125;&#x27;</span><br><span class="line">        - &#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span><br><span class="line">        - &#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - &#x27;192.168.77.11:9090&#x27;</span><br><span class="line">        - &#x27;192.168.77.12:9090&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>__name__</code> 是 Prometheus 特殊的预定义标签，表示指标的名称<br>使用以下配置采集目标 Prometheus Server 的所有指标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">params:</span><br><span class="line">  &#x27;match[]&#x27;:</span><br><span class="line">    - &#x27;&#123;job=~&quot;.*&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus 和 Grafana 使用示例</title>
    <url>/202306061334/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Prometheus 2.44.0</li>
<li>Grafana 9.5.2</li>
<li>Kubernetes 1.24</li>
</ul>
<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><h3 id="Grafana-中获取所有-node-的-CPU-使用率"><a href="#Grafana-中获取所有-node-的-CPU-使用率" class="headerlink" title="Grafana 中获取所有 node 的 CPU 使用率"></a>Grafana 中获取所有 node 的 CPU 使用率</h3><p>以下示例中，<code>$node</code> 为在 Grafana 的 Dashboard 中配置的 Variables，其值为 Kubernetes 的节点主机名。<code>$interval</code> 为在 Grafana 的 Dashboard 中配置的 Variables，其值表示 Prometheus 的查询时间范围变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">100 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;,kubernetes_io_hostname=~&quot;$node&quot;&#125;[$interval])) * 100</span><br></pre></td></tr></table></figure>

<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><h3 id="Grafana-中获取所有-node-的-Memory-使用率"><a href="#Grafana-中获取所有-node-的-Memory-使用率" class="headerlink" title="Grafana 中获取所有 node 的 Memory 使用率"></a>Grafana 中获取所有 node 的 Memory 使用率</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">100 - (sum(node_memory_MemFree_bytes&#123;kubernetes_io_hostname=~&quot;$node&quot;&#125;) + sum(node_memory_Cached_bytes&#123;kubernetes_io_hostname=~&quot;$node&quot;&#125;) + sum(node_memory_Buffers_bytes&#123;kubernetes_io_hostname=~&quot;$node&quot;&#125;)) / sum(node_memory_MemTotal_bytes&#123;kubernetes_io_hostname=~&quot;$node&quot;&#125;) * 100</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Disk"><a href="#Disk" class="headerlink" title="Disk"></a>Disk</h2><h3 id="Grafana-中获取所有-node-的-Disk-使用率"><a href="#Grafana-中获取所有-node-的-Disk-使用率" class="headerlink" title="Grafana 中获取所有 node 的 Disk 使用率"></a>Grafana 中获取所有 node 的 Disk 使用率</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">100 - (sum(node_filesystem_avail_bytes&#123;kubernetes_io_hostname=~&quot;$node&quot;&#125;) / sum(node_filesystem_size_bytes&#123;kubernetes_io_hostname=~&quot;$node&quot;&#125;)) * 100</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p>统计节点<strong>物理网卡</strong>的流入流出流量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irate(node_network_receive_bytes_total&#123;device!~&quot;cni0|docker.*|flannel.*|veth.*|virbr.*|lo&quot;,kubernetes_io_hostname=~&quot;$node&quot;&#125;[$prometheusTimeInterval])</span><br><span class="line"></span><br><span class="line">irate(node_network_transmit_bytes_total&#123;device!~&quot;cni0|docker.*|flannel.*|veth.*|virbr.*|lo&quot;,kubernetes_io_hostname=~&quot;$node&quot;&#125;[$prometheusTimeInterval])</span><br></pre></td></tr></table></figure>

<h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><h3 id="计算集群中可以使用的-Pod-的数量"><a href="#计算集群中可以使用的-Pod-的数量" class="headerlink" title="计算集群中可以使用的 Pod 的数量"></a>计算集群中可以使用的 Pod 的数量</h3><p><a href="https://csms.tech/202306061427/#Kubernetes-相关指标">相关指标参考说明</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">100 - sum(kubelet_running_pods&#123;kubernetes_io_hostname=~&quot;$node&quot;&#125;) / sum(kube_node_status_capacity&#123;resource=&quot;pods&quot;,node=~&quot;$node&quot;&#125;) * 100</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="按照-namespace-及-Pod-统计-Pod-CPU-使用率"><a href="#按照-namespace-及-Pod-统计-Pod-CPU-使用率" class="headerlink" title="按照 namespace 及 Pod 统计 Pod CPU 使用率"></a>按照 namespace 及 Pod 统计 Pod CPU 使用率</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sum(rate(container_cpu_usage_seconds_total[1m])) by (namespace, pod)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_174.png"></p>
<h3 id="统计-Pod-使用的内存"><a href="#统计-Pod-使用的内存" class="headerlink" title="统计 Pod 使用的内存"></a>统计 Pod 使用的内存</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">container_memory_usage_bytes</span><br></pre></td></tr></table></figure>

<h3 id="统计-Pods-的流量"><a href="#统计-Pods-的流量" class="headerlink" title="统计 Pods 的流量"></a>统计 Pods 的流量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irate(container_network_receive_bytes_total&#123;namespace=~&quot;$k8sNamespace&quot;,interface=&quot;eth0&quot;,kubernetes_io_hostname=~&quot;$node&quot;&#125;[$prometheusTimeInterval])</span><br></pre></td></tr></table></figure>

<h3 id="统计-Pods-的重启次数"><a href="#统计-Pods-的重启次数" class="headerlink" title="统计 Pods 的重启次数"></a>统计 Pods 的重启次数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sum(kube_pod_container_status_restarts_total&#123;namespace=~&quot;$k8sNamespace&quot;&#125;) by (namespace,container)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title>Prometheus 安装配置</title>
    <url>/202211221610/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>Prometheus Server 2.4</li>
<li>Node Exporter v1.4.0</li>
<li>Grafana v9.2.5</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="在-Docker-中安装-Prometheus-Server"><a href="#在-Docker-中安装-Prometheus-Server" class="headerlink" title="在 Docker 中安装 Prometheus Server"></a>在 Docker 中安装 Prometheus Server</h2><p>创建 Prometheus Server 配置文件，如 <code>/root/prometheus/prometheus.yml</code>，内容如下 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[安装Prometheus Server](https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/prometheus-quick-start/install-prometheus-server)">[1]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>/data/prometheus/prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">my global config</span></span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">scrape_timeout is <span class="built_in">set</span> to the global default (10s).</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      # - alertmanager:9093</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Load rules once and periodically evaluate them according to the global <span class="string">&#x27;evaluation_interval&#x27;</span>.</span></span><br><span class="line">rule_files:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">- <span class="string">&quot;first_rules.yml&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">- <span class="string">&quot;second_rules.yml&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Here it<span class="string">&#x27;s Prometheus itself.</span></span></span><br><span class="line">scrape_configs:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span></span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line"></span><br><span class="line">    # metrics_path defaults to &#x27;/metrics&#x27;</span><br><span class="line">    # scheme defaults to &#x27;http&#x27;.</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;localhost:9090&#x27;]</span><br></pre></td></tr></table></figure>
<p>使用 Docker 启动时挂载此文件，作为 Prometheus Server 的配置文件，之后需要修改配置，可以直接修改此文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9090:9090 \</span><br><span class="line">           --name prometheus \</span><br><span class="line">           -v /root/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \</span><br><span class="line">           prom/prometheus</span><br></pre></td></tr></table></figure>

<p>启动后，可以通过 <code>$Prometheus_IP:9090</code> 访问 Prometheus Server UI</p>
<span id="more"></span>

<h3 id="prometheus-启动参数"><a href="#prometheus-启动参数" class="headerlink" title="prometheus 启动参数"></a>prometheus 启动参数</h3><p><code>prometheus</code> 进程启动时常用选项说明如下。Prometheus 启动是使用的选项可以在 Prometheus UI 中查看 <code>Status</code> -&gt; <code>Command-Line Flags</code></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--config.file=/etc/prometheus/prometheus.yml</code></td>
<td>指定主配置文件路径，默认为 <code>/etc/prometheus/prometheus.yml</code></td>
<td></td>
</tr>
<tr>
<td><code>--storage.tsdb.retention.time=12h</code></td>
<td>数据保留在磁盘上的时常</td>
<td></td>
</tr>
<tr>
<td><code>--storage.tsdb.path=/prometheus/</code></td>
<td>TSDB 数据的存储路径<br/>默认 <code>/prometheus/</code></td>
<td></td>
</tr>
<tr>
<td><code>--web.enable-lifecycle</code></td>
<td>开启 Prometheus 支持配置变更后的<strong>热更新</strong><br/>通过 <code>curl -X POST &quot;localhost:9090/-/reload&quot;</code> 执行热更新，可以减少 Prometheus 重启的时间</td>
<td></td>
</tr>
</tbody></table>
<h3 id="使用-docker-compose-配置-Prometheus"><a href="#使用-docker-compose-配置-Prometheus" class="headerlink" title="使用 docker compose 配置 Prometheus"></a>使用 docker compose 配置 Prometheus</h3><p>如果要使用 <code>docker compose</code> 配置启动 Prometheus，可以参考以下 <code>docker-compose.yml</code> 文件</p>
<figure class="highlight shell"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  prometheus:</span><br><span class="line">    image: prom/prometheus</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9099:9090&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/opt/Prometheus/config/prometheus/:/etc/prometheus/&quot;</span><br><span class="line">      - &quot;/opt/Prometheus/data/prometheus/tsdb/:/prometheus/&quot;</span><br><span class="line">    command:</span><br><span class="line">      - &#x27;--config.file=/etc/prometheus/prometheus.yml&#x27;</span><br><span class="line">      - &#x27;--storage.tsdb.retention.time=8760h&#x27;</span><br><span class="line">      - &#x27;--storage.tsdb.path=/prometheus/&#x27;</span><br><span class="line">    networks:</span><br><span class="line">      - prometheus-network</span><br><span class="line">      </span><br><span class="line">  grafana:</span><br><span class="line">    image: grafana/grafana</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3000:3000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/opt/Prometheus/config/grafana/:/etc/grafana/&quot;</span><br><span class="line">      - &quot;/opt/Prometheus/data/grafana/:/var/lib/grafana/&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - prometheus-network</span><br><span class="line">  ssl_exporter:</span><br><span class="line">    image: ribbybibby/ssl-exporter:latest</span><br><span class="line">    ports: </span><br><span class="line">      - &quot;9219:9219&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/opt/Prometheus/config/ssl_exporter/hosts:/etc/hosts&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - prometheus-network</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  prometheus-network:</span><br></pre></td></tr></table></figure>


<h2 id="安装-Node-Exporter"><a href="#安装-Node-Exporter" class="headerlink" title="安装 Node Exporter"></a>安装 Node Exporter</h2><p>Node Exporter 同样采用 Golang 编写，并且不存在任何的第三方依赖，只需要下载，解压即可运行。<a href="https://prometheus.io/download/">获取最新的 node exporter 版本的二进制包</a>。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用Node Exporter采集主机数据](https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/prometheus-quick-start/use-node-exporter)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/prometheus/node_exporter/releases/download/v1.4.0/node_exporter-1.4.0.linux-amd64.tar.gz</span><br><span class="line">tar -xf node_exporter-1.4.0.linux-amd64.tar.gz</span><br><span class="line">cd node_exporter-1.4.0.linux-amd64</span><br><span class="line">cp node_exporter /usr/bin/</span><br></pre></td></tr></table></figure>
<p>运行 Node Exporter</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node_exporter</span></span><br><span class="line">...</span><br><span class="line">ts=2022-11-22T08:29:20.717Z caller=node_exporter.go:199 level=info msg=&quot;Listening on&quot; address=:9100</span><br><span class="line">ts=2022-11-22T08:29:20.717Z caller=tls_config.go:195 level=info msg=&quot;TLS is disabled.&quot; http2=false</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>启动成功后，可以看到以下输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">INFO[0000] Listening on :9100                            source=&quot;node_exporter.go:76&quot;</span><br></pre></td></tr></table></figure>
<p>访问 <code>http://localhost:9100/metrics</code>，可以看到当前 node exporter 获取到的当前主机的所有监控数据，如下所示：<br><img src="https://i.csms.tech/img_93.png"></p>
<h2 id="配置-Prometheus-Server-从-Node-Exporter-收集数据"><a href="#配置-Prometheus-Server-从-Node-Exporter-收集数据" class="headerlink" title="配置 Prometheus Server 从 Node Exporter 收集数据"></a>配置 Prometheus Server 从 Node Exporter 收集数据</h2><p>为了能够让 Prometheus Server 能够从当前 node exporter 获取到监控数据，需要修改 Prometheus Server 配置文件。编辑 <code>prometheus.yml</code> 并在 <code>scrape_configs</code> 节点下添加以下内容 : <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[从Node Exporter收集监控数据](https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/prometheus-quick-start/use-node-exporter#cong-node-exporter-shou-ji-jian-kong-shu-ju)">[3]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#x27;localhost:9090&#x27;]</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">采集 node exporter 监控数据</span></span><br><span class="line">  - job_name: &#x27;test node&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#x27;172.17.0.3:9100&#x27;]</span><br></pre></td></tr></table></figure>
<p>重启 Prometheus Server</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart prometheus</span><br></pre></td></tr></table></figure>

<h2 id="配置-Grafana-可视化-Prometheus-监控数据"><a href="#配置-Grafana-可视化-Prometheus-监控数据" class="headerlink" title="配置 Grafana 可视化 Prometheus 监控数据"></a>配置 Grafana 可视化 Prometheus 监控数据</h2><p>启动 Grafana <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[监控数据可视化](https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/prometheus-quick-start/use-grafana-create-dashboard)">[4]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name grafana -d -p 3000:3000 grafana/grafana</span><br></pre></td></tr></table></figure>
<p>默认情况下使用账户 <code>admin/admin</code> 进行登录</p>
<h3 id="添加-DATA-SOURCES"><a href="#添加-DATA-SOURCES" class="headerlink" title="添加 DATA SOURCES"></a>添加 DATA SOURCES</h3><p>这里将添加 Prometheus 作为默认的数据源，如下图所示，指定数据源类型为 Prometheus 并且设置 Prometheus 的访问地址即可，在配置正确的情况下点击 <code>Add</code> 按钮，会提示连接成功的信息<br><img src="https://i.csms.tech/img_94.png"></p>
<h1 id="PromQL"><a href="#PromQL" class="headerlink" title="PromQL"></a>PromQL</h1><p>可以通过 Prometheus 提供的 UI 来调试表达式及对应的图形<br><img src="https://i.csms.tech/img_148.png"></p>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>当 Prometheus 从目标采集数据指标时，它会自动在采集到的时间序列上附加一些标签，以便于识别被采集的目标： <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[自动生成标签和时间序列](https://hulining.gitbook.io/prometheus/concepts/jobs_instances#automatically-generated-labels-and-time-series)">[5]</span></a></sup></p>
<ul>
<li><code>job</code> : 采集数据目标所属的已配置的作业名称。</li>
<li><code>instance</code> : 采集数据目标 URL 的 <code>&lt;host&gt;:&lt;port&gt;</code> 部分。</li>
</ul>
<p>例如对 <code>up</code> 这个时间序列，可以根据标签筛选出不同值 <code>up&#123;job=&quot;&lt;job-name&gt;&quot;, instance=&quot;&lt;instance-id&gt;&quot;&#125;</code></p>
<blockquote>
<p>其中以 <code>__</code> 作为前缀的标签，是系统保留的关键字，只能在系统内部使用。在 Prometheus 的底层实现中指标名称实际上是以 <code>__name__=&lt;metric name&gt;</code> 的形式保存在数据库中的，因此以下两种方式均表示的同一条time-series：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">api_http_requests_total&#123;method=&quot;POST&quot;, handler=&quot;/messages&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>等同于</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;__name__=&quot;api_http_requests_total&quot;，method=&quot;POST&quot;, handler=&quot;/messages&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>本质上，时间序列所对应的监控指标（metric）都是通过 <code>labelset</code> 唯一命名的。</p>
</blockquote>
<h3 id="标签表达式算符"><a href="#标签表达式算符" class="headerlink" title="标签表达式算符"></a>标签表达式算符</h3><p>标签匹配操作符如下所示：</p>
<ul>
<li><code>=</code>  选择与提供的字符串完全相同的标签(精确匹配)</li>
<li><code>!=</code>  选择不等于提供的字符串的标签(反向匹配)</li>
<li><code>=~</code>  选择与提供的字符串进行正则表达式匹配的标签(正则表达式匹配)</li>
<li><code>!~</code>  选择正则表达式不匹配提供的字符串的标签(反向正则表达式匹配)</li>
</ul>
<h2 id="范围向量选择器"><a href="#范围向量选择器" class="headerlink" title="范围向量选择器"></a>范围向量选择器</h2><ul>
<li><strong>瞬时向量</strong> -  直接通过类似于 PromQL 表达式 <code>api_http_requests_total</code> 查询时间序列时，返回结果中只包含<strong>该时间序列中各指标最新的样本值</strong>，这种类型的数据集称之为 <strong>瞬时向量</strong>，对应的表达式称为 <strong>瞬时向量表达式</strong></li>
<li><strong>区间向量</strong> &#x2F; <strong>范围向量</strong> - 在 <strong>瞬时向量</strong> 基础上指定时间范围，例如 <code>api_http_requests_total[5m]</code>，表达式被称为 <strong>区间向量表达式</strong> 或者 <strong>范围向量表达式</strong>，其查询到的时间序列是以当前 <strong>瞬时向量</strong> 为基准的过去 5 分钟内的时间序列的集合，其结果称之为 <strong>区间向量</strong></li>
</ul>
<p><strong>范围向量</strong> 从当前瞬间选择了一定范围的样本 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[范围向量选择器](https://hulining.gitbook.io/prometheus/prometheus/querying/basics#range-vector-selectors)">[6]</span></a></sup></p>
<p>语法上，将范围持续时间附加在向量选择器末尾的方括号(<code>[]</code>)中，以指定为每个范围向量元素提取多久的时间值。</p>
<p>持续时间指定为数字，紧随其后的是以下单位之一：</p>
<ul>
<li><code>s</code> - 秒</li>
<li><code>m</code> - 分钟</li>
<li><code>h</code> - 小时</li>
<li><code>d</code> - 天</li>
<li><code>w</code> - 周</li>
<li><code>y</code> - 年</li>
</ul>
<p>在此示例中，我们选择在过去 5 分钟，数据指标名称为 <code>http_requests_total</code> 且 <code>job</code> 标签为 <code>prometheus</code> 的所有时间序列记录的所有值：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http_requests_total&#123;job=&quot;prometheus&quot;&#125;[5m]</span><br></pre></td></tr></table></figure>

<h2 id="时间位移操作"><a href="#时间位移操作" class="headerlink" title="时间位移操作"></a>时间位移操作</h2><p>在 <strong>瞬时向量表达式</strong> 和 <strong>区间向量表达式</strong> 中，都是以当前时间为基准。 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[范围向量选择器](https://hulining.gitbook.io/prometheus/prometheus/querying/basics#range-vector-selectors)">[6]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http_request_total&#123;&#125; # 瞬时向量表达式，选择当前最新的数据</span><br><span class="line">http_request_total&#123;&#125;[5m] # 区间向量表达式，选择以当前时间为基准，5分钟内的数据</span><br></pre></td></tr></table></figure>
<p>如果想查询 5 分钟前的瞬时样本数据，或者昨天一天的区间内的样本数据，这时候可以使用 <strong>时间位移操作</strong>，关键字为 <code>offset</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http_request_total&#123;&#125; offset 5m    # 瞬时向量表达式，选择 5 分钟之前的样本数据</span><br><span class="line">http_request_total&#123;&#125;[1d] offset 1d  # 区间向量表达式，选择一天前的一天内的样本数据</span><br></pre></td></tr></table></figure>

<h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><p>在形式上，所有的指标 (Metric) 都通过如下格式标示： <sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[指标(Metric)](https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/what-is-prometheus-metrics-and-labels#zhi-biao-metric)">[7]</span></a></sup></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Metrics-类型"><a href="#Metrics-类型" class="headerlink" title="Metrics 类型"></a>Metrics 类型</h3><p>根据不同监控指标之间的差异，Prometheus 定义了4种不同的指标类型 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Metrics类型](https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-metrics-types)">[8]</span></a></sup></p>
<ul>
<li><code>Counter</code> - 计数器。只增不减的计数器。一般在定义 <code>Counter</code> 类型指标的名称时推荐使用 <code>_total</code> 作为后缀</li>
<li><code>Gauge</code> - 仪表盘。侧重于反应系统的当前状态，可增可减</li>
<li><code>Histogram</code> - 直方图。</li>
<li><code>Summary</code> - 摘要。</li>
</ul>
<h3 id="prometheus-相关指标"><a href="#prometheus-相关指标" class="headerlink" title="prometheus 相关指标"></a>prometheus 相关指标</h3><p>以下列出常见的指标名称及其相关信息</p>
<table>
<thead>
<tr>
<th>指标名称</th>
<th>类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>up</code></td>
<td></td>
<td>实例运行状态良好，则为 1；<br/>如果采集失败，则为 0</td>
<td></td>
</tr>
<tr>
<td><code>scrape_duration_seconds</code></td>
<td></td>
<td>采集的持续时间</td>
<td></td>
</tr>
</tbody></table>
<h2 id="PromQL-语法"><a href="#PromQL-语法" class="headerlink" title="PromQL 语法"></a>PromQL 语法</h2><p>当我们直接使用监控指标名称查询时，可以查询该指标下的所有时间序列。如： <sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[初识 PromQL](https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-query-language)">[9]</span></a></sup></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http_requests_total</span><br></pre></td></tr></table></figure>
<p>等同于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http_requests_total&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>等同于</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;__name__=&quot;http_requests_total&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>该查询会返回指标名称为 <code>http_requests_total</code> 的所有时间序列</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http_requests_total&#123;code=&quot;200&quot;,handler=&quot;alerts&quot;,instance=&quot;localhost:9090&quot;,job=&quot;prometheus&quot;,method=&quot;get&quot;&#125;=(20889@1518096812.326)</span><br><span class="line">http_requests_total&#123;code=&quot;200&quot;,handler=&quot;graph&quot;,instance=&quot;localhost:9090&quot;,job=&quot;prometheus&quot;,method=&quot;get&quot;&#125;=(21287@1518096812.326)</span><br></pre></td></tr></table></figure>

<h2 id="PromQL-内置函数"><a href="#PromQL-内置函数" class="headerlink" title="PromQL 内置函数"></a>PromQL 内置函数</h2><h3 id="increase"><a href="#increase" class="headerlink" title="increase"></a>increase</h3><p><code>increase(v range-vector)</code> 函数获取 <strong>区间向量</strong> 中的第一个和最后一个样本并返回其增长量。其中参数 <code>v</code> 是一个 <strong>区间向量</strong> <sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[PromQL内置函数](https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-promql-functions)">[10]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">increase(node_cpu[2m]) / 120</span><br></pre></td></tr></table></figure>
<p>这里通过 <code>node_cpu[2m]</code> 获取时间序列最近两分钟的所有样本，<code>increase</code> 计算出最近两分钟的增长量，最后除以时间 120 秒得到 <code>node_cpu</code> 样本在最近两分钟的平均增长率。并且这个值也近似于主机节点最近两分钟内的平均 CPU 使用率。</p>
<h3 id="rate-amp-irate"><a href="#rate-amp-irate" class="headerlink" title="rate &amp; irate"></a>rate &amp; irate</h3><p><code>rate(v range-vector)</code> 函数可以直接计算出 <strong>区间向量</strong> <code>v</code> 在时间窗口内的平均增长速率。以下表达式获取和 <code>increase(node_cpu[2m]) / 120</code> 函数相同的效果。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rate(node_cpu[2m])</span><br></pre></td></tr></table></figure>
<p>需要注意的是使用 <code>rate</code> 或者 <code>increase</code> 函数去计算样本的平均增长速率，容易陷入“长尾问题”当中，其无法反应在时间窗口内样本数据的突发变化。 例如，对于主机而言在 2 分钟的时间窗口内，可能在某一个由于访问量或者其它问题导致 CPU 占用 100% 的情况，但是通过计算在时间窗口内的平均增长率却无法反应出该问题。</p>
<p>为了解决该问题，PromQL 提供了另外一个灵敏度更高的函数 <code>irate(v range-vector)</code>。<code>irate</code> 同样用于计算区间向量的计算率，但是其反应出的是瞬时增长率。<code>irate</code> 函数是通过区间向量中最后两个样本数据来计算区间向量的增长速率。这种方式可以避免在时间窗口范围内的“长尾问题”，并且体现出更好的灵敏度，通过 <code>irate</code> 函数绘制的图标能够更好的反应样本数据的瞬时变化状态。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">irate(node_cpu[2m])</span><br></pre></td></tr></table></figure>
<p><code>irate</code> 函数相比于 <code>rate</code> 函数提供了更高的灵敏度，不过当需要分析长期趋势或者在告警规则中，<code>irate</code> 的这种灵敏度反而容易造成干扰。因此在长期趋势分析或者告警中更推荐使用 <code>rate</code> 函数。</p>
<h1 id="常用-metrics-及-PromQL"><a href="#常用-metrics-及-PromQL" class="headerlink" title="常用 metrics 及 PromQL"></a>常用 metrics 及 PromQL</h1><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><h3 id="CPU-使用率"><a href="#CPU-使用率" class="headerlink" title="CPU 使用率"></a>CPU 使用率</h3><p>主要使用指标 <code>node_cpu_seconds_total</code>，该指标包括多个标签，分别标记了每种处理模式使用的 CPU 时间，该指标为 <code>counter</code> 类型，不适合直接使用，需要使用 PromQL 转换成感兴趣的指标</p>
<table>
<thead>
<tr>
<th>指标名称</th>
<th>类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>node_cpu_seconds_total</code></td>
<td><code>counter</code></td>
<td>每种处理模式使用的 CPU 时间</td>
<td></td>
</tr>
</tbody></table>
<p><img src="https://i.csms.tech/img_154.png"></p>
<p>以下 PromQL 可以用来计算 CPU 使用率，若对其他模式的 CPU 监控指标感兴趣，可以根据需求自己调整。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">100 -avg(irate(node_cpu_seconds_total&#123;job=&quot;kubernetes-nodes&quot;,mode=&quot;idle&quot;&#125;[5m])) by (instance)* 100</span><br></pre></td></tr></table></figure>

<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><h3 id="Memory-使用率"><a href="#Memory-使用率" class="headerlink" title="Memory 使用率"></a>Memory 使用率</h3><p>涉及到的内存指标</p>
<table>
<thead>
<tr>
<th>指标名称</th>
<th>类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>node_memory_MemTotal_bytes</code></td>
<td></td>
<td>总内存大小</td>
<td></td>
</tr>
<tr>
<td><code>node_memory_MemFree_bytes</code></td>
<td></td>
<td>空闲内存大小</td>
<td></td>
</tr>
<tr>
<td><code>node_memory_Buffers_bytes</code></td>
<td></td>
<td>缓冲缓存的大小</td>
<td></td>
</tr>
<tr>
<td><code>node_memory_Cached_bytes</code></td>
<td></td>
<td>页面缓存的大小</td>
<td></td>
</tr>
</tbody></table>
<p>物理内存使用率计算公式如下: <code>（总内存 -（空闲内存 + 缓冲缓存 + 页面缓存））/ 总内存 * 100</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(node_memory_MemTotal_bytes - (node_memory_MemFree_bytes + node_memory_Buffers_bytes+node_memory_Cached_bytes ))/node_memory_MemTotal_bytes * 100 </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Disk"><a href="#Disk" class="headerlink" title="Disk"></a>Disk</h2><p>磁盘相关指标，多个分区可以通过 <code>mountpoint</code> 标签区分，<code>device</code> 标签区分所属设备</p>
<table>
<thead>
<tr>
<th>指标名称</th>
<th>类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>node_filesystem_size_bytes</code></td>
<td></td>
<td>分区空间总容量</td>
<td></td>
</tr>
<tr>
<td><code>node_filesystem_free_bytes</code></td>
<td></td>
<td>分区空间空闲容量</td>
<td></td>
</tr>
<tr>
<td><code>node_disk_read_bytes_total</code></td>
<td><code>counter</code></td>
<td>分区读总字节数</td>
<td></td>
</tr>
<tr>
<td><code>node_disk_written_bytes_total</code></td>
<td><code>counter</code></td>
<td>分区写总字节数</td>
<td></td>
</tr>
<tr>
<td><code>node_disk_reads_completed_total</code></td>
<td><code>counter</code></td>
<td>分区读总次数</td>
<td></td>
</tr>
<tr>
<td><code>node_disk_writes_completed_total</code></td>
<td><code>counter</code></td>
<td>分区写总次数</td>
<td></td>
</tr>
</tbody></table>
<h3 id="获取根分区的磁盘使用率"><a href="#获取根分区的磁盘使用率" class="headerlink" title="获取根分区的磁盘使用率"></a>获取根分区的磁盘使用率</h3><p>公式如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(node_filesystem_size_bytes&#123;mountpoint=&quot;/&quot;&#125; - node_filesystem_free_bytes&#123;mountpoint=&quot;/&quot;&#125;)/node_filesystem_size_bytes&#123;mountpoint=&quot;/&quot;&#125; * 100</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="磁盘吞吐率"><a href="#磁盘吞吐率" class="headerlink" title="磁盘吞吐率"></a>磁盘吞吐率</h3><p>公式如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irate(node_disk_read_bytes_total&#123;device=&quot;vda&quot;&#125;[5m]) </span><br><span class="line">irate(node_disk_written_bytes_total&#123;device=&quot;vda&quot;&#125;[5m]) </span><br></pre></td></tr></table></figure>

<h3 id="磁盘-IOPS"><a href="#磁盘-IOPS" class="headerlink" title="磁盘 IOPS"></a>磁盘 IOPS</h3><p>IOPS 表示每秒对磁盘的读写次数，它与吞吐量都是衡量磁盘的重要指标。对于 IOPS 的监控，可通过下面两个指标算得出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irate(node_disk_reads_completed_total&#123;device=&quot;vda&quot;&#125;[5m]) </span><br><span class="line">irate(node_disk_writes_completed_total&#123;device=&quot;vda&quot;&#125;[5m]) </span><br></pre></td></tr></table></figure>

<h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p>网卡流量一般分为上传和下载流量</p>
<table>
<thead>
<tr>
<th>指标名称</th>
<th>类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>node_network_receive_bytes_total</code></td>
<td></td>
<td>下载（接收&#x2F;流入）流量总字节数</td>
<td></td>
</tr>
<tr>
<td><code>node_network_transmit_bytes_total</code></td>
<td></td>
<td>上传（&#x2F;发送&#x2F;流出）流量总字节数</td>
<td></td>
</tr>
</tbody></table>
<h3 id="网卡流量"><a href="#网卡流量" class="headerlink" title="网卡流量"></a>网卡流量</h3><p>以下公式计算每秒网卡流量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irate(node_network_receive_bytes_total&#123;device != &quot;lo&quot;&#125;[1m]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Prometheus-告警"><a href="#Prometheus-告警" class="headerlink" title="Prometheus 告警"></a>Prometheus 告警</h1><h2 id="PromQL-告警规则"><a href="#PromQL-告警规则" class="headerlink" title="PromQL 告警规则"></a>PromQL 告警规则</h2><p><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/prometheus-alert-rule">使用参考文档</a></p>
<p>一条典型的告警规则如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groups:</span><br><span class="line">- name: example</span><br><span class="line">  rules:</span><br><span class="line">  - alert: HighErrorRate</span><br><span class="line">    expr: job:request_latency_seconds:mean5m&#123;job=&quot;myjob&quot;&#125; &gt; 0.5</span><br><span class="line">    for: 10m</span><br><span class="line">    labels:</span><br><span class="line">      severity: page</span><br><span class="line">    annotations:</span><br><span class="line">      summary: High request latency</span><br><span class="line">      description: description info</span><br></pre></td></tr></table></figure>
<p>在告警规则文件中，我们可以将一组相关的规则设置定义在一个 <code>group</code> 下。在每一个 <code>group</code> 中我们可以定义多个告警规则(<code>rule</code>)。一条告警规则主要由以下几部分组成：</p>
<ul>
<li><code>alert</code> ：告警规则的名称。</li>
<li><code>expr</code> ：基于 <code>PromQL</code> 表达式告警触发条件，用于计算是否有时间序列满足该条件。</li>
<li><code>for</code> ：评估等待时间，可选参数。用于表示只有当触发条件持续一段时间后才发送告警。在等待期间新产生告警的状态为 <code>pending</code>。</li>
<li><code>labels</code> ：自定义标签，允许用户指定要附加到告警上的一组附加标签。</li>
<li><code>annotations</code> ：用于指定一组附加信息，比如用于描述告警详细信息的文字等，<code>annotations</code> 的内容在告警产生时会一同作为参数发送到 <code>Alertmanager</code>。<ul>
<li><code>summary</code> - 描述告警的概要信息</li>
<li><code>description</code> - 描述告警的详细信息</li>
</ul>
</li>
</ul>
<p>为了能够让 Prometheus 启用定义的告警规则，需要在 <a href="#%E5%9C%A8-Docker-%E4%B8%AD%E5%AE%89%E8%A3%85-Prometheus-Server">Prometheus 的全局配置文件</a> 中通过 <code>rule_files</code> 指定 <strong>告警规则文件的访问路径</strong>。Prometheus 启动后会自动扫描这些路径下规则文件中定义的内容，并且根据这些规则计算是否告警。</p>
<figure class="highlight shell"><figcaption><span>prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  evaluation_interval: 5s</span><br><span class="line"></span><br><span class="line">rule_files:</span><br><span class="line">  - /etc/prometheus/*.rules</span><br></pre></td></tr></table></figure>



<p>默认情况下 Prometheus 会每分钟对这些告警规则进行计算，如果用户想定义自己的告警计算周期，则可以通过 <code>evaluation_interval</code> 来覆盖默认的计算周期：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  [ evaluation_interval: &lt;duration&gt; | default = 1m ]</span><br></pre></td></tr></table></figure>

<p>在 <code>annotations</code> 的 <code>summary</code> 和 <code>description</code> 可以使用变量访问当前告警实例当中指定标签和对应的值</p>
<ul>
<li><code>$labels.&lt;labelname&gt;</code> - 访问名为 <code>&lt;labelname&gt;</code> 的 <code>label</code></li>
<li><code>$value</code> - 访问标签 <code>$labels.&lt;labelname&gt;</code> 的值</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groups:</span><br><span class="line">- name: hostStatsAlert</span><br><span class="line">  rules:</span><br><span class="line">  - alert: hostCpuUsageAlert</span><br><span class="line">    expr: sum by (instance) (avg without (cpu) (irate(node_cpu_seconds_total&#123;mode!=&quot;idle&quot;&#125;[5m]))) &gt; 0.85</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: page</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Instance &#123;&#123; $labels.instance &#125;&#125; CPU usgae high&quot;</span><br><span class="line">      description: &quot;&#123;&#123; $labels.instance &#125;&#125; CPU usage above 85% (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: hostMemUsageAlert</span><br><span class="line">    expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes  &gt; 0.85</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: page</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Instance &#123;&#123; $labels.instance &#125;&#125; MEM usgae high&quot;</span><br><span class="line">      description: &quot;&#123;&#123; $labels.instance &#125;&#125; MEM usage above 85% (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br></pre></td></tr></table></figure>

<p>配置生效后，可以在 Prometheus 的 Web 的 <code>Status --&gt; Rules</code>  下看到所有的告警规则，也可以在 <code>Alerts</code> 中看到所有的告警规则及其状态<br><img src="https://i.csms.tech/img_160.png"><br><img src="https://i.csms.tech/img_161.png"></p>
<p>Prometheus 首次检测到满足条件的样本后，告警就会处于活动状态，由于配置了 <code>for</code> 等待时间，告警状态是（<code>PENDING</code>），如果到了 <code>for</code> 等待时间，告警条件持续满足，则会实际触发告警并且告警状态为 <code>FIRING</code> </p>
<h1 id="Prometheus-配置文件说明"><a href="#Prometheus-配置文件说明" class="headerlink" title="Prometheus 配置文件说明"></a>Prometheus 配置文件说明</h1><p>Prometheus 配置文件内容大体如下，主要分为:</p>
<ul>
<li><code>global</code> - 全局配置选项</li>
<li><code>alerting</code> - 告警管理的配置选项</li>
<li><code>rule_files</code> - 高级规则文件的路径</li>
<li><code>scrape_configs</code> - 要抓取的目标和抓取配置</li>
</ul>
<figure class="highlight shell"><figcaption><span>prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  evaluation_interval: 5s</span><br><span class="line"></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: [&#x27;localhost:9093&#x27;]</span><br><span class="line"></span><br><span class="line">rule_files:</span><br><span class="line">  - /etc/prometheus/*.rules</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;localhost:9090&#x27;]</span><br><span class="line">      labels:</span><br><span class="line">        customizedLablel1: v1</span><br><span class="line">        customizedLablel2: v2</span><br></pre></td></tr></table></figure>

<h2 id="global-常用选项说明"><a href="#global-常用选项说明" class="headerlink" title="global 常用选项说明"></a>global 常用选项说明</h2><ul>
<li><p><code>scrape_interval</code>  - 指定抓取间隔，即 Prometheus 定期抓取指标数据的时间间隔。默认值为15秒（15s）。</p>
</li>
<li><p><code>scrape_timeout</code> - 指定抓取超时时间，即在超过此时间后如果抓取请求未完成，则认为抓取失败。默认值为10秒（10s）。</p>
</li>
<li><p><code>evaluation_interval</code> - 指定评估间隔，即 Prometheus 对规则和表达式进行计算和评估的时间间隔。默认值为1分钟（1m）。</p>
</li>
<li><p><code>external_labels</code> - 指定用于所有指标时间序列的额外标签。这些标签可以在查询和告警规则中使用，以提供额外的上下文信息。例如：</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">external_labels:</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">&#x27;production&#x27;</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">&#x27;us-west&#x27;</span></span><br></pre></td></tr></table></figure>
<p>  这将在所有指标的时间序列中添加 <code>environment=production</code> 和 <code>region=us-west</code> 的标签。<strong>在 Prometheus UI 中查看，不会有这些标签存在，但是通过如 Prometheus Federation 架构中的中心 Prometheus 采集后的指标中会有这些标签，方便删选聚合</strong></p>
</li>
</ul>
<h2 id="alerting-常用选项说明"><a href="#alerting-常用选项说明" class="headerlink" title="alerting 常用选项说明"></a>alerting 常用选项说明</h2><p>以下配置指定 AlertManager 的配置，以使 Prometheus 可以发送告警。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: [&#x27;localhost:9093&#x27;]</span><br></pre></td></tr></table></figure>
<h2 id="rule-files-常用选项说明"><a href="#rule-files-常用选项说明" class="headerlink" title="rule_files 常用选项说明"></a>rule_files 常用选项说明</h2><p><a href="#Prometheus-%E5%91%8A%E8%AD%A6">Prometheus 的告警规则文件配置</a></p>
<h2 id="scrape-configs-常用选项说明"><a href="#scrape-configs-常用选项说明" class="headerlink" title="scrape_configs 常用选项说明"></a>scrape_configs 常用选项说明</h2><p>每个<code>scrape_config</code> 块包含以下选项</p>
<ul>
<li><code>job_name</code> - 抓取任务的名称</li>
<li><code>static_configs</code> - 静态目标配置，可以包含一个或多个目标的配置</li>
<li><code>relabel_configs</code> - 对目标标签进行重新标记或者重写</li>
<li><code>metrics_path</code> - 目标的指标抓取路径</li>
<li><code>params</code> - 为抓取指标的请求提供额外的参数（键值对）</li>
<li><code>scheme</code> - 抓取请求使用的协议，<code>http</code> 或 <code>https</code></li>
<li><code>scrape_interval</code> - 抓取该目标的间隔时间。可以覆盖全局配置。</li>
<li><code>scrape_timeout</code> - 抓取超时时间。</li>
<li><code>honor_labels</code> - <code>true|false</code>，指定是否要保留来自抓取目标的指标的标签。默认值为 <code>false</code><blockquote>
<p>当 <code>honor_labels</code> 设置为 <code>true</code> 时，Prometheus 将尊重被抓取目标提供的标签，并将其视为指标标签的一部分。这意味着来自同一指标名称但带有不同标签值的多个时间序列将被保留和区分。</p>
<p>例如，如果抓取目标提供一个名为 <code>cpu_usage</code> 的指标，并在不同的 Pod 之间使用 <code>pod_name</code> 标签进行区分，那么 Prometheus 会存储多个时间序列，每个时间序列代表一个不同的 Pod 的 CPU 使用情况。通过保留标签，你可以根据 Pod 名称对这些时间序列进行过滤、聚合和查询。</p>
<p>然而，当 <code>honor_labels</code> 设置为 <code>false</code> 时，Prometheus 将忽略来自被抓取目标的标签，并且不会将其包含在存储的指标数据中。在这种情况下，相同指标名称的所有时间序列将被视为相同，并且标签信息将丢失。</p>
<p>通常情况下，如果你希望保留和使用被抓取目标提供的标签信息，你应该将 <code>honor_labels</code> 设置为 <code>true</code>，以便在 Prometheus 中进行更灵活和细粒度的指标查询和操作。</p>
<p><strong><code>honor_labels</code> 选项仅适用于 <code>service_discovery</code> 和 <code>static_configs</code> 中的目标。对于其他类型的目标，例如 <code>relabel_configs</code> 或 <code>file_sd_configs</code>，<code>honor_labels</code> 并不适用。</strong></p>
</blockquote>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;localhost:9090&#x27;]</span><br><span class="line">      labels:</span><br><span class="line">        customizedLablel1: v1</span><br><span class="line">        customizedLablel2: v2</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>labels</code></td>
<td>配置自定义标签，会附加到指标的标签中</td>
<td></td>
</tr>
</tbody></table>
<h3 id="relabel-configs-详解"><a href="#relabel-configs-详解" class="headerlink" title="relabel_configs 详解"></a>relabel_configs 详解</h3><p><code>relabel</code> 重定义标签是在拉取（<code>Scrape</code>）阶段钱，修改 Target 和 Lables。</p>
<p>默认情况下，Target 会自动被添加以下标签</p>
<ul>
<li><code>job</code> - 设置为配置中 <code>job_name</code> 的值</li>
<li><code>__address__</code> - 设置为配置中 <code>targets</code> 的值</li>
<li><code>instance</code> - 是重定义标签 <code>__address__</code> 的值</li>
<li><code>__scheme__</code> - 设置为配置中 <strong>协议类型</strong> 的值，从配置中读取</li>
<li><code>__metrics_path__</code> - 从配置中读取，拉取 Metrics 的 uri</li>
</ul>
<h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><p><code>action</code> 定义了对标签的动作，主要有以下可选项，默认值为 <code>replace</code></p>
<table>
<thead>
<tr>
<th>action</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>replace</code></td>
<td>使用正则匹配到的<strong>源标签</strong>的值来替换<strong>目标标签</strong>的值，如果有 <code>replacement</code>，则直接使用 <code>replacement</code> 的值替换<strong>目标标签</strong></td>
<td></td>
</tr>
<tr>
<td><code>keep</code></td>
<td>如果正则没有匹配到<strong>源标签</strong>，则删除 Targets</td>
<td></td>
</tr>
<tr>
<td><code>drop</code></td>
<td>如果正则匹配到<strong>源标签</strong>，则删除 Targets</td>
<td></td>
</tr>
<tr>
<td><code>hashmod</code></td>
<td>设置    <strong>目标标签</strong>的值为   <strong>源标签</strong>值的 hash 值</td>
<td></td>
</tr>
<tr>
<td><code>labelmap</code></td>
<td>正则匹配所有标签名，使用<strong>匹配到的标签名</strong> 和 <strong>原标签名的值</strong>    生成新的标签</td>
<td></td>
</tr>
</tbody></table>
<h2 id="Prometheus-多配置文件实现"><a href="#Prometheus-多配置文件实现" class="headerlink" title="Prometheus 多配置文件实现"></a>Prometheus 多配置文件实现</h2><p>在 Prometheus 的 Targets 数量太多的情况下，将所有的配置写在一个文件中，会显得特别累赘也不好管理。最好是将配置文件分割成多个小配置文件。本示例使用 Prometheus 的 <code>file_sd_config</code> 方式实现配置文件的分割。</p>
<h3 id="file-sd-config-实现配置文件分割"><a href="#file-sd-config-实现配置文件分割" class="headerlink" title="file_sd_config 实现配置文件分割"></a>file_sd_config 实现配置文件分割</h3><p>本示例按照统计数据采集客户端（如 <code>node_exporter</code>、<code>nginx_vts_exporter</code> 等）的不同，将配置分割到不同的子配置文件目录中。</p>
<p>配置文件目录结构如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/prometheus/</span><br><span class="line">├── prometheus.config.d</span><br><span class="line">│ ├── nginx_vts_exporter</span><br><span class="line">│ │ └── project1_nginx.yml</span><br><span class="line">│ └── node_exporter</span><br><span class="line">│     └── project1_node.yml</span><br><span class="line">└── prometheus.yml</span><br></pre></td></tr></table></figure>

<p>Prometheus 主配置文件中 <code>file_sd_config</code> 相关配置如下：</p>
<figure class="highlight shell"><figcaption><span>/etc/prometheus/prometheus.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;node_exporter&#x27;</span><br><span class="line">  file_sd_configs:</span><br><span class="line">    - files:</span><br><span class="line">      - /etc/prometheus/prometheus.config.d/node_exporter/*.yml</span><br><span class="line">      refresh_interval:  60s</span><br><span class="line"></span><br><span class="line">- job_name: &#x27;nginx_vts_exporter&#x27;</span><br><span class="line">  metrics_path: &#x27;/status/format/prometheus&#x27; </span><br><span class="line">  file_sd_configs:</span><br><span class="line">    - files:</span><br><span class="line">      - /etc/prometheus/prometheus.config.d/nginx_vts_exporter/*.yml</span><br><span class="line">      refresh_interval:  60s</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>在 <code>file_sd_configs</code> 中使用参数 <code>refresh_interval</code> 可以配置重载子配置文件的周期，这样更新子配置文件后，无需重启 prometheus 服务即可自动加载新配置</strong> </p>
</blockquote>
<p>子配置文件内容如下：</p>
<figure class="highlight shell"><figcaption><span>/etc/prometheus/prometheus.config.d/node_exporter/project1_node.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">- targets: [&#x27;IP1:9100&#x27;, &#x27;IP2:9100&#x27;]</span><br><span class="line">  labels:</span><br><span class="line">    Department : &#x27;OP&#x27;</span><br><span class="line">    Series: &#x27;OP-TEST&#x27;</span><br><span class="line">    Project: &quot;WEB&quot;</span><br><span class="line">    Tier: &#x27;Admin&#x27;</span><br><span class="line">- targets: [&#x27;IP3:9100&#x27;, &#x27;IP3:9100&#x27;]</span><br><span class="line">  labels:</span><br><span class="line">    Department : &#x27;OP&#x27;</span><br><span class="line">    Series: &#x27;OP-TEST&#x27;</span><br><span class="line">    Project: &quot;WEB&quot;</span><br><span class="line">    Tier: &#x27;DB&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><figcaption><span>/etc/prometheus/prometheus.config.d/nginx_vts_exporter/project1_nginx.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">- targets: [&#x27;IP1:8899&#x27;, &#x27;IP2:8899&#x27;]</span><br><span class="line">  labels:</span><br><span class="line">    Department : &#x27;OP&#x27;</span><br><span class="line">    Series: &#x27;OP-Test&#x27;</span><br><span class="line">    Project: &quot;WEB&quot;</span><br><span class="line">    Tier: &#x27;Nginx&#x27;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>子配置文件中只配置 Targets 配置，如果需要其他上级配置（如 <code>job_name</code>、<code>metrics_path</code> 等）则需在主配置文件(<code>prometheus.yml</code>)中配置。</strong></p>
</blockquote>
<h1 id="Prometheus-优化建议"><a href="#Prometheus-优化建议" class="headerlink" title="Prometheus 优化建议"></a>Prometheus 优化建议</h1><p>Prometheus 随着收集的指标数量的增加，对 CPU 和内存的要求也会上周，一般首先使用率变高的是内存。</p>
<ul>
<li>Prometheus 每隔 2 小时做一个 Block 数据落盘，落盘之前所以的数据都在 内存 中。采集量越多，占用内存越大。</li>
<li>加载历史数据时，是从磁盘读取到内存，因此查询范围越大，内存占用越大</li>
</ul>
<p>为了减小 Prometheus Server  的压力，可以采取以下方法</p>
<ol>
<li>进行指标优化，去除无效的 Metrics 采集<br> 在 Prometheus UI 的 Status 中，有 <code>TSDB Status</code>，里面包含了 Prometheus 的统计概要</li>
</ol>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/prometheus-quick-start/install-prometheus-server">安装Prometheus Server</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/prometheus-quick-start/use-node-exporter">使用Node Exporter采集主机数据</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/prometheus-quick-start/use-node-exporter#cong-node-exporter-shou-ji-jian-kong-shu-ju">从Node Exporter收集监控数据</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/prometheus-quick-start/use-grafana-create-dashboard">监控数据可视化</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://hulining.gitbook.io/prometheus/concepts/jobs_instances#automatically-generated-labels-and-time-series">自动生成标签和时间序列</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://hulining.gitbook.io/prometheus/prometheus/querying/basics#range-vector-selectors">范围向量选择器</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/what-is-prometheus-metrics-and-labels#zhi-biao-metric">指标(Metric)</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-metrics-types">Metrics类型</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-query-language">初识 PromQL</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-promql-functions">PromQL内置函数</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus 指标汇总</title>
    <url>/202306061427/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Prometheus 2.44.0</li>
<li>Grafana 9.5.2</li>
<li>Kubernetes 1.24</li>
</ul>
<h1 id="Kubernetes-相关指标"><a href="#Kubernetes-相关指标" class="headerlink" title="Kubernetes 相关指标"></a>Kubernetes 相关指标</h1><a href="/202212141608/" title="Kubernetes 中部署并监控 Kubernetes 集群参考">Kubernetes 中部署并监控 Kubernetes 集群参考</a>。

<p><a href="https://csms.tech/202212141608/#配置-Prometheus-自动发现-kubelet-并读取监控指标">配置 Prometheus 监控 Kubelet</a> 之后可以采集到 Kubelet 监控指标。</p>
<p><a href="https://csms.tech/202212141608/#配置-Prometheus-从-cAdvisor-读取监控数据">配置 Prometheus 读取 cAdvisor</a> 之后可以通过 cAdvisor 采集到容器相关的监控指标。</p>
<table>
<thead>
<tr>
<th>指标名称</th>
<th>类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>kubelet_pod_start_duration_seconds_count</code></td>
<td></td>
<td>Pod 启动的时间</td>
<td></td>
</tr>
<tr>
<td><code>kubelet_pod_start_duration_seconds_bucket</code></td>
<td></td>
<td>Pod 启动的时间的延迟直方图数据</td>
<td><code>kubelet_pod_start_duration_seconds_bucket&#123;le=&quot;0.5&quot;&#125;</code></td>
</tr>
<tr>
<td><code>kubelet_running_pods</code></td>
<td></td>
<td>运行的 Pod 的数量</td>
<td></td>
</tr>
<tr>
<td><code>kubelet_running_containers</code></td>
<td></td>
<td>运行的 Containers 的数量</td>
<td></td>
</tr>
<tr>
<td><code>kubelet_runtime_operations_errors_total</code></td>
<td></td>
<td>Kubelet 和 CRI 交互产生的错误（类型）</td>
<td></td>
</tr>
<tr>
<td><code>kubelet_started_containers_total</code></td>
<td></td>
<td>Kubelet 启动的 Container 总数</td>
<td></td>
</tr>
<tr>
<td><code>kubelet_started_pods_total</code></td>
<td></td>
<td>Kubelet 启动的 Pod 总数</td>
<td></td>
</tr>
<tr>
<td><code>kubelet_volume_stats_available_bytes</code></td>
<td></td>
<td>PV Volume 可以使用的磁盘空间</td>
<td></td>
</tr>
<tr>
<td><code>kube_node_status_allocatable</code><br/><code>kube_node_status_capacity</code></td>
<td></td>
<td>节点的可分配的 <strong>资源</strong> 数量</td>
<td><code>kube_node_status_allocatable&#123;resource=&quot;pods&quot;&#125;</code><br/>节点可分配的 Pod 的数量</td>
</tr>
<tr>
<td><code>kubelet_started_pods_total</code></td>
<td><code>Counter</code></td>
<td>已启动的 Pod 数量</td>
<td></td>
</tr>
<tr>
<td><code>container_cpu_usage_seconds_total</code></td>
<td><code>Counter</code></td>
<td>Container 使用的 CPU</td>
<td></td>
</tr>
<tr>
<td><code>container_memory_usage_bytes</code></td>
<td><code>Gauge</code></td>
<td>Pod 使用的内存</td>
<td><code>container_memory_usage_bytes&#123;namespace=&quot;default&quot;&#125;</code></td>
</tr>
<tr>
<td><code>kube_pod_container_status_restarts_total</code></td>
<td><code>Counter</code></td>
<td>Pod 的重启次数</td>
<td></td>
</tr>
</tbody></table>
<h2 id="nginx-ingress-controller-相关指标"><a href="#nginx-ingress-controller-相关指标" class="headerlink" title="nginx-ingress-controller 相关指标"></a>nginx-ingress-controller 相关指标</h2><p><a href="https://csms.tech/202212141608/#配置-Prometheus-抓取-Ingress-Nginx-指标">配置 Prometheus 监控 Ingress-Nginx-Controller 指标</a> 后，Prometheus 可以读取到 Ingress-Nginx-Controller 暴露的监控指标。</p>
<p><a href="https://csms.tech/202306051707/#使用-Prometheus-数据源展示-Kubernetes-中-Ingress-Nginx-Controller-监控数据">Grafana 中配置使用 Ingress-Nginx-Controller 指标示例</a></p>
<table>
<thead>
<tr>
<th>指标名称</th>
<th>类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>nginx_ingress_controller_requests</code></td>
<td><code>Counter</code></td>
<td>Ingress Nginx Controller 接收到的所有请求数，，包括各个状态码</td>
<td><code>irate(nginx_ingress_controller_requests[2m])</code> - 请求速率</td>
</tr>
<tr>
<td><code>nginx_ingress_controller_nginx_process_connections</code></td>
<td>连接数，包括各个状态码</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>nginx_ingress_controller_request_duration_seconds_sum</code></td>
<td>请求持续时间的总和<br/><em><strong>请求持续时间是从请求进入 Ingress 控制器开始，到响应返回给客户端结束的整个时间</strong></em></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>nginx_ingress_controller_request_duration_seconds_count</code></td>
<td>请求持续时间的计数。</td>
<td>计算平均请求持续时间：平均请求持续时间 &#x3D; 请求持续时间总和 &#x2F; 请求持续时间计数</td>
<td></td>
</tr>
<tr>
<td><code>nginx_ingress_controller_ingress_upstream_latency_seconds_sum</code></td>
<td>upstream 占用时间的总和<br/><em><strong>upstream 占用时间是指请求从 Ingress 到达 upstream（backend）服务器的时间</strong></em></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>nginx_ingress_controller_ingress_upstream_latency_seconds_count</code></td>
<td>upstream 上游占用时间的计数</td>
<td>计算平均上游占用时间：平均上游占用时间 &#x3D; 上游占用时间总和 &#x2F; 上游占用时间计数。</td>
<td></td>
</tr>
</tbody></table>
<h1 id="node-相关指标"><a href="#node-相关指标" class="headerlink" title="node 相关指标"></a>node 相关指标</h1><h2 id="主机信息"><a href="#主机信息" class="headerlink" title="主机信息"></a>主机信息</h2><p>包括 CPU 架构、内核版本、操作系统类型、主机名等，集中在指标 <code>node_uname_info</code> 中。</p>
<h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><table>
<thead>
<tr>
<th>指标名称</th>
<th>类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>node_cpu_seconds_total</code></td>
<td><code>Counter</code></td>
<td>CPU 使用时间</td>
<td><code>node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;</code> - CPU 空闲时间</td>
</tr>
</tbody></table>
<h3 id="统计节点-CPU-使用率"><a href="#统计节点-CPU-使用率" class="headerlink" title="统计节点 CPU 使用率"></a>统计节点 CPU 使用率</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">100 - (avg by (instance) (irate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) * 100)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><table>
<thead>
<tr>
<th>指标名称</th>
<th>类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>node_memory_MemTotal_bytes</code></td>
<td><code>Gauge</code></td>
<td>总的内存</td>
<td></td>
</tr>
<tr>
<td><code>node_memory_MemFree_bytes</code></td>
<td><code>Gauge</code></td>
<td>空闲内存</td>
<td></td>
</tr>
<tr>
<td><code>node_memory_Cached_bytes</code></td>
<td><code>Gauge</code></td>
<td>Cache 内存</td>
<td></td>
</tr>
<tr>
<td><code>node_memory_Buffers_bytes</code></td>
<td><code>Gauge</code></td>
<td>Buffers 内存</td>
<td></td>
</tr>
</tbody></table>
<h3 id="统计节点的-内存使用率"><a href="#统计节点的-内存使用率" class="headerlink" title="统计节点的 内存使用率"></a>统计节点的 内存使用率</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(node_memory_MemTotal_bytes - node_memory_MemFree_bytes - node_memory_Cached_bytes - node_memory_Buffers_bytes) / node_memory_MemTotal_bytes * 100</span><br></pre></td></tr></table></figure>

<h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><table>
<thead>
<tr>
<th>指标名称</th>
<th>类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>node_network_receive_bytes_total</code></td>
<td><code>Counter</code></td>
<td>网卡<strong>接收</strong>的流量</td>
<td></td>
</tr>
<tr>
<td><code>node_network_transmit_bytes_total</code></td>
<td><code>Counter</code></td>
<td>网卡<strong>发送</strong>的流量</td>
<td></td>
</tr>
</tbody></table>
<h3 id="网卡流量带宽"><a href="#网卡流量带宽" class="headerlink" title="网卡流量带宽"></a>网卡流量带宽</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irate(node_network_receive_bytes_total&#123;device!~&quot;cni0|docker.*|flannel.*|veth.*|virbr.*|lo&quot;,kubernetes_io_hostname=~&quot;$node&quot;&#125;[$prometheusTimeInterval])</span><br><span class="line"></span><br><span class="line">irate(node_network_transmit_bytes_total&#123;device!~&quot;cni0|docker.*|flannel.*|veth.*|virbr.*|lo&quot;,kubernetes_io_hostname=~&quot;$node&quot;&#125;[$prometheusTimeInterval])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus 抓取 Nginx 指标</title>
    <url>/202306270947/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Prometheus 抓取 Nginx 运行时指标，主要有以下方法：</p>
<ul>
<li>Nginx 通过自己的 <code>stub_status</code> 页面 (需要 <code>with-http_stub_status_module</code> 模块支持) 暴露出了一些 Nginx 运行时的指标，较为简单，在 Prometheus 中对应的 Metrics 也少。<code>nginx_exporter</code> 主要就是获取 <code>stub_status</code> 中内建的指标。</li>
<li>可以通过 <code>nginx-vts-exporter</code> 监控 Nginx 更多的指标，但 <code>nginx-vts-exporter</code> 依赖于 Nginx 编译安装是添加的第三方模块 <code>nginx-module-vts</code> 来实现，指标更为丰富。建议使用此种监控方式。</li>
</ul>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>Nginx stable 1.24.0</li>
<li>nginx-vts-exporter v0.10.3</li>
<li>nginx-module-vts v0.2.2</li>
</ul>
<h1 id="安装配置-nginx-vts-exporter-和-nginx-module-vts-来监控-Nginx-Metrics"><a href="#安装配置-nginx-vts-exporter-和-nginx-module-vts-来监控-Nginx-Metrics" class="headerlink" title="安装配置 nginx-vts-exporter 和 nginx-module-vts 来监控 Nginx Metrics"></a>安装配置 nginx-vts-exporter 和 nginx-module-vts 来监控 Nginx Metrics</h1><h2 id="Nginx-编译安装-nginx-module-vts-模块"><a href="#Nginx-编译安装-nginx-module-vts-模块" class="headerlink" title="Nginx 编译安装 nginx-module-vts 模块"></a>Nginx 编译安装 nginx-module-vts 模块</h2><a href="/202306270934/" title="Nginx 编译安装 &#96;nginx-module-vts&#96; 模块">Nginx 编译安装 &#96;nginx-module-vts&#96; 模块</a>

<p>Nginx 安装了 <code>nginx-module-vts</code> 后，可以通过以下配置暴露运行时的指标</p>
<figure class="highlight shell"><figcaption><span>status.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">vhost_traffic_status_zone;</span><br><span class="line">vhost_traffic_status_filter_by_host on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    listen 8081;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location /status &#123;</span><br><span class="line">        vhost_traffic_status_display;</span><br><span class="line">        vhost_traffic_status_display_format html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>重启 Nginx 后，访问 <code>http://localhost:8081/status</code> 即可查看到 Nginx 运行时的指标<br><img src="https://i.csms.tech/img_194.png"></p>
<h2 id="安装-nginx-vts-exporter"><a href="#安装-nginx-vts-exporter" class="headerlink" title="安装 nginx-vts-exporter"></a>安装 nginx-vts-exporter</h2><p><a href="https://github.com/hnlq715/nginx-vts-exporter">nginx-vts-exporter github 官网</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/hnlq715/nginx-vts-exporter/releases/download/v0.10.3/nginx-vts-exporter-0.10.3.linux-amd64.tar.gz</span><br><span class="line">tar -xf nginx-vts-exporter-0.10.3.linux-amd64.tar.gz</span><br><span class="line">cp nginx-vts-exporter-0.10.3.linux-amd64/nginx-vts-exporter /usr/bin/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>创建 <code>systemd</code> 管理配置文件 <code>/usr/lib/systemd/system/nginx-vts-exporter.service</code></p>
<figure class="highlight shell"><figcaption><span>/usr/lib/systemd/system/nginx-vts-exporter.service</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx-vts-exporter</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/bin/nginx-vts-exporter \</span><br><span class="line">  -nginx.scrape_timeout 10 \</span><br><span class="line">  -nginx.scrape_uri http://127.0.0.1:8081/status/format/json</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>启动服务，默认监听端口为 <code>9913</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable --now nginx-vts-exporter</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>浏览器访问 <code>localhost:9913/metrics</code> 即可看到 <code>nginx-vts-exporter</code> 暴露出来的 Metrics<br><img src="https://i.csms.tech/img_195.png"></p>
<p>之后 Prometheus 可通过 <code>9913</code> 端口抓取监控数据。</p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus Node exporter 使用</title>
    <url>/202306071109/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>Prometheus 2.44.0</li>
<li>node_exporter-1.6.0</li>
</ul>
<h1 id="node-exporter-安装"><a href="#node-exporter-安装" class="headerlink" title="node_exporter 安装"></a>node_exporter 安装</h1><p><a href="https://prometheus.io/docs/guides/node-exporter/#installing-and-running-the-node-exporter">安装 node_exporter 官方文档</a></p>
<p>以下步骤演示安装 <code>node_exporter</code> 并使用 <code>systemd</code> 管理服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/prometheus/node_exporter/releases/download/v1.6.0/node_exporter-1.6.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xf node_exporter-1.6.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">cp node_exporter-1.6.0.linux-amd64/node_exporter /usr/bin/</span><br></pre></td></tr></table></figure>
<p>生成 <code>systemd</code> 服务配置文件 <code>/usr/lib/systemd/system/node_exporter.service</code></p>
<figure class="highlight shell"><figcaption><span>/usr/lib/systemd/system/node_exporter.service</span></figcaption><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=node_exporter</span><br><span class="line">After=syslog.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/bin/node_exporter</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10</span><br><span class="line">StartLimitInterval=100</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>执行以下命令管理服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl daemon-reload</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl status node_exporter</span></span><br><span class="line">● node_exporter.service - node_exporter</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/node_exporter.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl <span class="built_in">enable</span> --now node_exporter</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/node_exporter.service to /usr/lib/systemd/system/node_exporter.service.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl status node_exporter</span></span><br><span class="line">● node_exporter.service - node_exporter</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/node_exporter.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Fri 2023-06-23 10:34:08 CST; 2s ago</span><br><span class="line"> Main PID: 28578 (node_exporter)</span><br><span class="line">   CGroup: /system.slice/node_exporter.service</span><br><span class="line">           └─28578 /usr/bin/node_exporter   </span><br></pre></td></tr></table></figure>

<h1 id="node-exporter-配置信息"><a href="#node-exporter-配置信息" class="headerlink" title="node_exporter 配置信息"></a>node_exporter 配置信息</h1><h2 id="启动参数详解"><a href="#启动参数详解" class="headerlink" title="启动参数详解"></a>启动参数详解</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--web.listen-address=&quot;:9100&quot;</code></td>
<td>node_exporter 监听端口，默认 9100</td>
<td></td>
</tr>
<tr>
<td><code>--web.telemetry-path=&quot;/metrics&quot;</code></td>
<td>prometheus 获取 Metrics 访问的 url，默认 <code>/metrics</code></td>
<td></td>
</tr>
<tr>
<td><code>--log.level=&quot;info&quot;</code></td>
<td>日志级别</td>
<td></td>
</tr>
<tr>
<td><code>--log.format=&quot;logger:stderr&quot;</code></td>
<td>日志打印格式</td>
<td></td>
</tr>
<tr>
<td><code>--collector.disable-defaults</code></td>
<td>关闭默认的采集项</td>
<td></td>
</tr>
<tr>
<td><code>--no-collector.$&#123;item&#125;</code></td>
<td>关闭某一项默认开启的采集项</td>
<td><code>--no-collector.cpu</code></td>
</tr>
<tr>
<td><code>--collector.systemd.unit-include=&quot;(docker&#39;|&#39;sshd).service&quot;</code></td>
<td>收集指定服务的指标</td>
<td></td>
</tr>
</tbody></table>
<p>可以配置通过正则表达式屏蔽或者选择某些监控项 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[node_exporter 官网 github](https://github.com/prometheus/node_exporter)">[1]</span></a></sup></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--collector.diskstats.ignored-devices=&quot;^(ram&#39;|&#39;loop&#39;|&#39;)\\d+$&quot;</code></td>
<td>忽略某些磁盘的信息收集</td>
<td></td>
</tr>
<tr>
<td><code>--collector.filesystem.ignored-mount-points=&quot;^/(dev&#39;|&#39;proc&#39;|&#39;)($&#39;|&#39;/)&quot;</code></td>
<td>忽略某些文件系统挂载点的信息收集</td>
<td></td>
</tr>
<tr>
<td><code>--collector.filesystem.ignored-fs-types=&quot;^(autofs&#39;|&#39;proc)$&quot;</code></td>
<td>忽略某些文件系统类型的信息收集</td>
<td></td>
</tr>
<tr>
<td><code>--collector.netclass.ignored-devices=&quot;^$&quot;</code></td>
<td>忽略某些网络类的信息收集</td>
<td></td>
</tr>
<tr>
<td><code>--collector.netdev.ignored-devices=&quot;^$&quot;</code></td>
<td>忽略某些网络设备的信息收集</td>
<td></td>
</tr>
<tr>
<td><code>--collector.netstat.fields=&quot;^$&quot;</code></td>
<td>配置需要获取的网络状态信息</td>
<td></td>
</tr>
<tr>
<td><code>--collector.vmstat.fields=&quot;^(oom_kill&#39;|&#39;pgpg&#39;|&#39;pswp).*&quot;</code></td>
<td>配置 vmstat 返回信息中需要收集的选项</td>
<td></td>
</tr>
</tbody></table>
<h2 id="功能对照表"><a href="#功能对照表" class="headerlink" title="功能对照表"></a>功能对照表</h2><h3 id="默认开启的功能"><a href="#默认开启的功能" class="headerlink" title="默认开启的功能"></a>默认开启的功能</h3><p>默认开启的功能 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[node_exporter 官网 github](https://github.com/prometheus/node_exporter)">[1]</span></a></sup></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>系统</th>
</tr>
</thead>
<tbody><tr>
<td><code>arp</code></td>
<td>从 <code>/proc/net/arp</code> 中收集 ARP 统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>conntrack</code></td>
<td>从 <code>/proc/sys/net/netfilter/</code> 中收集 <code>conntrack</code> 统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>cpu</code></td>
<td>收集 cpu 统计信息</td>
<td>Darwin, Dragonfly, FreeBSD, Linux</td>
</tr>
<tr>
<td><code>diskstats</code></td>
<td>从 <code>/proc/diskstats</code> 中收集磁盘 I&#x2F;O 统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>edac</code></td>
<td>错误检测与纠正统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>entropy</code></td>
<td>可用内核熵信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>exec</code></td>
<td>execution 统计信息</td>
<td>Dragonfly, FreeBSD</td>
</tr>
<tr>
<td><code>filefd</code></td>
<td>从 <code>/proc/sys/fs/file-nr</code> 中收集文件描述符统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>filesystem</code></td>
<td>文件系统统计信息，例如磁盘已使用空间</td>
<td>Darwin, Dragonfly, FreeBSD, Linux, OpenBSD</td>
</tr>
<tr>
<td><code>hwmon</code></td>
<td>从 <code>/sys/class/hwmon/</code> 中收集监控器或传感器数据信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>infiniband</code></td>
<td>从 InfiniBand 配置中收集网络统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>loadavg</code></td>
<td>收集系统负载信息</td>
<td>Darwin, Dragonfly, FreeBSD, Linux, NetBSD, OpenBSD, Solaris</td>
</tr>
<tr>
<td><code>mdadm</code></td>
<td>从 <code>/proc/mdstat</code> 中获取设备统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>meminfo</code></td>
<td>内存统计信息</td>
<td>Darwin, Dragonfly, FreeBSD, Linux</td>
</tr>
<tr>
<td><code>netdev</code></td>
<td>网口流量统计信息，单位 bytes</td>
<td>Darwin, Dragonfly, FreeBSD, Linux, OpenBSD</td>
</tr>
<tr>
<td><code>netstat</code></td>
<td>从 <code>/proc/net/netstat</code> 收集网络统计数据，等同于 <code>netstat -s</code></td>
<td>Linux</td>
</tr>
<tr>
<td><code>sockstat</code></td>
<td>从 <code>/proc/net/sockstat</code> 中收集 socket 统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>stat</code></td>
<td>从 <code>/proc/stat</code> 中收集各种统计信息，包含系统启动时间，forks, 中断等</td>
<td>Linux</td>
</tr>
<tr>
<td><code>textfile</code></td>
<td>通过 <code>--collector.textfile.directory</code> 参数指定本地文本收集路径，收集文本信息</td>
<td>any</td>
</tr>
<tr>
<td><code>time</code></td>
<td>系统当前时间</td>
<td>any</td>
</tr>
<tr>
<td><code>uname</code></td>
<td>通过 <code>uname</code> 系统调用, 获取系统信息</td>
<td>any</td>
</tr>
<tr>
<td><code>vmstat</code></td>
<td>从 <code>/proc/vmstat</code> 中收集统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>wifi</code></td>
<td>收集 <code>wifi</code> 设备相关统计数据</td>
<td>Linux</td>
</tr>
<tr>
<td><code>xfs</code></td>
<td>收集 xfs 运行时统计信息</td>
<td>Linux (kernel 4.4+)</td>
</tr>
<tr>
<td><code>zfs</code></td>
<td>收集 zfs 性能统计信息</td>
<td>Linux</td>
</tr>
</tbody></table>
<h3 id="默认关闭的功能"><a href="#默认关闭的功能" class="headerlink" title="默认关闭的功能"></a>默认关闭的功能</h3><p>默认关闭的功能 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[node_exporter 官网 github](https://github.com/prometheus/node_exporter)">[1]</span></a></sup></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>系统</th>
</tr>
</thead>
<tbody><tr>
<td><code>bonding</code></td>
<td>收集系统配置以及激活的绑定网卡数量</td>
<td>Linux</td>
</tr>
<tr>
<td><code>buddyinfo</code></td>
<td>从 <code>/proc/buddyinfo</code> 中收集内存碎片统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>devstat</code></td>
<td>收集设备统计信息</td>
<td>Dragonfly, FreeBSD</td>
</tr>
<tr>
<td><code>drbd</code></td>
<td>收集远程镜像块设备（DRBD）统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>interrupts</code></td>
<td>收集更具体的中断统计信息</td>
<td>Linux，OpenBSD</td>
</tr>
<tr>
<td><code>ipvs</code></td>
<td>从 <code>/proc/net/ip_vs</code> 中收集 IPVS 状态信息，从 <code>/proc/net/ip_vs_stats</code> 获取统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>ksmd</code></td>
<td>从 <code>/sys/kernel/mm/ksm</code> 中获取内核和系统统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>logind</code></td>
<td>从 <code>logind</code> 中收集会话统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>meminfo_numa</code></td>
<td>从 <code>/proc/meminfo_numa</code> 中收集内存统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>mountstats</code></td>
<td>从 <code>/proc/self/mountstat</code> 中收集文件系统统计信息，包括 NFS 客户端统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>nfs</code></td>
<td>从 <code>/proc/net/rpc/nfs</code> 中收集 NFS 统计信息，等同于 <code>nfsstat -c</code></td>
<td>Linux</td>
</tr>
<tr>
<td><code>qdisc</code></td>
<td>收集队列推定统计信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>runit</code></td>
<td>收集 <code>runit</code> 状态信息</td>
<td>any</td>
</tr>
<tr>
<td><code>supervisord</code></td>
<td>收集 <code>supervisord</code> 状态信息</td>
<td>any</td>
</tr>
<tr>
<td><code>systemd</code></td>
<td>从 <code>systemd</code> 中收集设备系统状态信息</td>
<td>Linux</td>
</tr>
<tr>
<td><code>tcpstat</code></td>
<td>从 <code>/proc/net/tcp</code> 和 <code>/proc/net/tcp6</code> 收集 TCP 连接状态信息</td>
<td>Linux</td>
</tr>
</tbody></table>
<h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><h3 id="采集白名单配置"><a href="#采集白名单配置" class="headerlink" title="采集白名单配置"></a>采集白名单配置</h3><p>关闭默认的采集项，只开启指定的采集项（白名单）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node-exporter --collector.disable-defaults --collector.cpu --collector.meminfo</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="采集黑名单配置"><a href="#采集黑名单配置" class="headerlink" title="采集黑名单配置"></a>采集黑名单配置</h3><p>关闭某一项默认开启的采集项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node-exporter --no-collector.cpu</span><br></pre></td></tr></table></figure>

<h3 id="配置-node-exporter-收集系统服务"><a href="#配置-node-exporter-收集系统服务" class="headerlink" title="配置 node_exporter 收集系统服务"></a>配置 node_exporter 收集系统服务</h3><p>修改 <code>node_exporter</code> 使用以下参数，本示例中使用 Kubernetes DaemonSet 启动。<strong>需要先配置参数 <code>--collector.systemd</code>，再填加服务白名单，否则无法使用 <code>--collector.systemd.unit-whitelist</code> 参数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">containers:</span><br><span class="line">- args:</span><br><span class="line">  - --path.procfs</span><br><span class="line">  - /host/proc</span><br><span class="line">  - --path.sysfs</span><br><span class="line">  - /host/sys</span><br><span class="line">  - --collector.filesystem.ignored-mount-points</span><br><span class="line">  - &#x27;&quot;^/(sys|proc|dev|host|etc)($|/)&quot;&#x27;</span><br><span class="line">  - --collector.systemd</span><br><span class="line">  - --collector.systemd.unit-include</span><br><span class="line">  - &#x27;(sshd|docker|cri-docker|crond|iptables|systemd-journald).service&#x27;</span><br><span class="line">  image: prom/node-exporter</span><br><span class="line">  imagePullPolicy: Always</span><br><span class="line">  name: node-exporter</span><br><span class="line">  ports:</span><br><span class="line">  - containerPort: 9100</span><br><span class="line">    hostPort: 9100</span><br><span class="line">    name: http</span><br><span class="line">    protocol: TCP</span><br><span class="line">  resources: &#123;&#125;</span><br><span class="line">  securityContext:</span><br><span class="line">    privileged: true</span><br><span class="line">  terminationMessagePath: /dev/termination-log</span><br><span class="line">  terminationMessagePolicy: File</span><br><span class="line">  volumeMounts:</span><br><span class="line">  - mountPath: /host/dev</span><br><span class="line">    name: dev</span><br><span class="line">  - mountPath: /host/proc</span><br><span class="line">    name: proc</span><br><span class="line">  - mountPath: /host/sys</span><br><span class="line">    name: sys</span><br><span class="line">  - mountPath: /rootfs</span><br><span class="line">    name: rootfs</span><br><span class="line">volumes:</span><br><span class="line">- hostPath:</span><br><span class="line">    path: /proc</span><br><span class="line">    type: &quot;&quot;</span><br><span class="line">  name: proc</span><br><span class="line">- hostPath:</span><br><span class="line">    path: /dev</span><br><span class="line">    type: &quot;&quot;</span><br><span class="line">  name: dev</span><br><span class="line">- hostPath:</span><br><span class="line">    path: /sys</span><br><span class="line">    type: &quot;&quot;</span><br><span class="line">  name: sys</span><br><span class="line">- hostPath:</span><br><span class="line">    path: /</span><br><span class="line">    type: &quot;&quot;</span><br><span class="line">  name: rootfs    </span><br></pre></td></tr></table></figure>

<p><code>node_exporter</code> 启动后，在节点上检查 <code>node_exporter</code> 输出的 Metrics</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl localhost:9100/metrics | grep -i node_systemd</span></span><br><span class="line">node_systemd_unit_state&#123;name=&quot;cri-docker.service&quot;,state=&quot;activating&quot;,type=&quot;notify&quot;&#125; 0</span><br><span class="line">node_systemd_unit_state&#123;name=&quot;cri-docker.service&quot;,state=&quot;active&quot;,type=&quot;notify&quot;&#125; 1</span><br><span class="line">node_systemd_unit_state&#123;name=&quot;cri-docker.service&quot;,state=&quot;deactivating&quot;,type=&quot;notify&quot;&#125; 0</span><br><span class="line">node_systemd_unit_state&#123;name=&quot;cri-docker.service&quot;,state=&quot;failed&quot;,type=&quot;notify&quot;&#125; 0</span><br><span class="line">node_systemd_unit_state&#123;name=&quot;cri-docker.service&quot;,state=&quot;inactive&quot;,type=&quot;notify&quot;&#125; 0</span><br><span class="line">node_systemd_unit_state&#123;name=&quot;crond.service&quot;,state=&quot;activating&quot;,type=&quot;simple&quot;&#125; 0</span><br><span class="line">node_systemd_unit_state&#123;name=&quot;crond.service&quot;,state=&quot;active&quot;,type=&quot;simple&quot;&#125; 1</span><br><span class="line">node_systemd_unit_state&#123;name=&quot;crond.service&quot;,state=&quot;deactivating&quot;,type=&quot;simple&quot;&#125; 0</span><br><span class="line">node_systemd_unit_state&#123;name=&quot;crond.service&quot;,state=&quot;failed&quot;,type=&quot;simple&quot;&#125; 0</span><br><span class="line">node_systemd_unit_state&#123;name=&quot;crond.service&quot;,state=&quot;inactive&quot;,type=&quot;simple&quot;&#125; 0</span><br></pre></td></tr></table></figure>

<p>在 Prometheus 的 UI 界面中检查<br><img src="https://i.csms.tech/img_175.png"></p>
<h2 id="使用-node-exporter-监听主机上的端口"><a href="#使用-node-exporter-监听主机上的端口" class="headerlink" title="使用 node_exporter 监听主机上的端口"></a>使用 node_exporter 监听主机上的端口</h2><p><code>node_exporter</code> 不支持直接采集主机上的端口监听状态数据。<em><strong>但 <code>node_exporter</code> 支持从本地目录直接读取指标数据</strong></em>。</p>
<p><em><strong>为了实现此需求，可以写个定时脚本周期性的采集端口状态数据到本地文件中，然后配置 <code>node_exporter</code> 从本地文件中读取统计信息供给 Prometheus 抓取。</strong></em></p>
<p>参考以下脚本监控指定端口的状态，并将状态数据写入指定的文件，此处为 <code>/opt/prometheus/data/open_ports.prom</code></p>
<figure class="highlight shell"><figcaption><span>/opt/prometheus/monitor_open_ports.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">MONITOR_DADA_OUTPUT_FILE=&#x27;/opt/prometheus/data/open_ports.prom&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Define the ports to monitor. Add or remove ports as needed.</span></span><br><span class="line">MONITORED_PORTS=(7380 7381 7382 17380 17381 17382)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Function to extract open ports from netstat output</span></span><br><span class="line">get_open_ports() &#123;</span><br><span class="line">  for port in &quot;$&#123;MONITORED_PORTS[@]&#125;&quot;; do</span><br><span class="line">    open_port_count=$(netstat -an | grep -c -E &quot;:$&#123;port&#125;.*LISTEN&quot;)</span><br><span class="line">    if [[ $open_port_count -gt 0 ]]; then</span><br><span class="line">      echo &quot;node_exporter_open_ports&#123;port=\&quot;$port\&quot;&#125; $open_port_count&quot; &gt;&gt; $MONITOR_DADA_OUTPUT_FILE</span><br><span class="line">    else</span><br><span class="line">      echo &quot;node_exporter_open_ports&#123;port=\&quot;$port\&quot;&#125; 0&quot; &gt;&gt; $MONITOR_DADA_OUTPUT_FILE</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Define Metrics Type and clear OLD DATA.</span></span><br><span class="line">echo &quot;# TYPE node_exporter_open_ports gauge&quot; &gt; $MONITOR_DADA_OUTPUT_FILE</span><br><span class="line"></span><br><span class="line">get_open_ports</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code># TYPE node_exporter_open_ports gauge</code>  指定 Prometheus 数据类型为 <code>gauge</code>。<em><strong>同一个指标类型只能定义一次</strong></em>，如果有多个 <code># TYPE node_exporter_open_ports gauge</code> 定义，<code>node_exporter</code> 不会抓取指标而是输出错误：<code>msg=&quot;failed to collect textfile data&quot; file=open_ports.prom err=&quot;failed to parse textfile data from \&quot;/opt/prometheus/data/open_ports.prom\&quot;: text format parsing error in line 3: second TYPE line for metric name \&quot;node_exporter_open_ports\&quot;, or TYPE reported after samples&quot;</code> </p>
</blockquote>
<p>配置 <code>node_exporter</code> 抓取本地目录 <code>/opt/prometheus/data/</code> 中的统计数据，主要是使用 <code>textfile</code> 这个 Collector。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/node_exporter --collector.textfile.directory=/opt/prometheus/data/</span><br></pre></td></tr></table></figure>

<p>启动 <code>node_exporter</code> 后，检查 <code>node_exporter</code> 采集的统计数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl localhost:9100/metrics | grep port</span></span><br><span class="line">node_exporter_open_ports&#123;port=&quot;17380&quot;&#125; 1</span><br><span class="line">node_exporter_open_ports&#123;port=&quot;17381&quot;&#125; 1</span><br><span class="line">node_exporter_open_ports&#123;port=&quot;17382&quot;&#125; 1</span><br><span class="line">node_exporter_open_ports&#123;port=&quot;7380&quot;&#125; 1</span><br><span class="line">node_exporter_open_ports&#123;port=&quot;7381&quot;&#125; 1</span><br><span class="line">node_exporter_open_ports&#123;port=&quot;7382&quot;&#125; 1</span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="couldn’t-get-dbus-connection"><a href="#couldn’t-get-dbus-connection" class="headerlink" title="couldn’t get dbus connection"></a>couldn’t get dbus connection</h2><p><a href="https://csms.tech/202212141608/#集群节点上部署-node-exporter-对集群节点进行监控">Kubernetes 中使用 DaemonSet 部署的 <code>node_exporter</code></a>，<a href="#%E9%85%8D%E7%BD%AE-node_exporter-%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1">启用了 <code>systemd</code> 功能监控</a>，<code>node_exporter</code> 启动报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ts=2023-06-07T04:06:16.429Z caller=node_exporter.go:180 level=info msg=&quot;Starting node_exporter&quot; version=&quot;(version=1.6.0, branch=HEAD, revision=ff7f9d69b645cb691dd3e84dc3afc88f5c006962)&quot;</span><br><span class="line">ts=2023-06-07T04:06:16.429Z caller=node_exporter.go:181 level=info msg=&quot;Build context&quot; build_context=&quot;(go=go1.20.4, platform=linux/amd64, user=root@f9c3ed0cfbd3, date=20230527-12:03:54, tags=netgo osusergo static_build)&quot;</span><br><span class="line">ts=2023-06-07T04:06:16.429Z caller=systemd_linux.go:146 level=warn collector=systemd msg=&quot;--collector.systemd.unit-whitelist is DEPRECATED and will be removed in 2.0.0, use --collector.systemd.unit-include&quot;</span><br><span class="line">ts=2023-06-07T04:06:16.429Z caller=systemd_linux.go:152 level=info collector=systemd msg=&quot;Parsed flag --collector.systemd.unit-include&quot; flag=&quot;\&quot;(sshd|docker|cri-docker|crond|iptables|systemd-journald|).service\&quot;&quot;</span><br><span class="line">ts=2023-06-07T04:06:16.430Z caller=systemd_linux.go:154 level=info collector=systemd msg=&quot;Parsed flag --collector.systemd.unit-exclude&quot; flag=.+\.(automount|device|mount|scope|slice)</span><br><span class="line">ts=2023-06-07T04:06:16.430Z caller=diskstats_common.go:111 level=info collector=diskstats msg=&quot;Parsed flag --collector.diskstats.device-exclude&quot; flag=^(ram|loop|fd|(h|s|v|xv)d[a-z]|nvme\d+n\d+p)\d+$</span><br><span class="line">ts=2023-06-07T04:06:16.430Z caller=diskstats_linux.go:265 level=error collector=diskstats msg=&quot;Failed to open directory, disabling udev device properties&quot; path=/run/udev/data</span><br><span class="line">ts=2023-06-07T04:06:16.430Z caller=filesystem_common.go:94 level=warn collector=filesystem msg=&quot;--collector.filesystem.ignored-mount-points is DEPRECATED and will be removed in 2.0.0, use --collector.filesystem.mount-points-exclude&quot;</span><br><span class="line">ts=2023-06-07T04:06:16.430Z caller=filesystem_common.go:111 level=info collector=filesystem msg=&quot;Parsed flag --collector.filesystem.mount-points-exclude&quot; flag=&quot;\&quot;^/(sys|proc|dev|host|etc)($|/)\&quot;&quot;</span><br><span class="line">ts=2023-06-07T04:06:16.430Z caller=filesystem_common.go:113 level=info collector=filesystem msg=&quot;Parsed flag --collector.filesystem.fs-types-exclude&quot; flag=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:110 level=info msg=&quot;Enabled collectors&quot;</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=arp</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=bcache</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=bonding</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=btrfs</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=conntrack</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=cpu</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=cpufreq</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=diskstats</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=dmi</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=edac</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=entropy</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=fibrechannel</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=filefd</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=filesystem</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=hwmon</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=infiniband</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=ipvs</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=loadavg</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=mdadm</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=meminfo</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=netclass</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=netdev</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=netstat</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=nfs</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=nfsd</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=nvme</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=os</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=powersupplyclass</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=pressure</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=rapl</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=schedstat</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=selinux</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=sockstat</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=softnet</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=stat</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=systemd</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=tapestats</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=textfile</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=thermal_zone</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=time</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=timex</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=udp_queues</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=uname</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=vmstat</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=xfs</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=node_exporter.go:117 level=info collector=zfs</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=tls_config.go:274 level=info msg=&quot;Listening on&quot; address=[::]:9100</span><br><span class="line">ts=2023-06-07T04:06:16.431Z caller=tls_config.go:277 level=info msg=&quot;TLS is disabled.&quot; http2=false address=[::]:9100</span><br><span class="line">ts=2023-06-07T04:06:16.511Z caller=collector.go:169 level=error msg=&quot;collector failed&quot; name=systemd duration_seconds=8.649e-05 err=&quot;couldn&#x27;t get dbus connection: dial unix /var/run/dbus/system_bus_socket: connect: no such file or directory&quot;</span><br><span class="line">ts=2023-06-07T04:06:21.499Z caller=collector.go:169 level=error msg=&quot;collector failed&quot; name=systemd duration_seconds=4.6418e-05 err=&quot;couldn&#x27;t get dbus connection: dial unix /var/run/dbus/system_bus_socket: connect: no such file or directory&quot;</span><br></pre></td></tr></table></figure>

<p>根据报错提示，应该是 <code>node_exporter</code> 无法访问节点的 <code>/var/run/dbus/system_bus_socket</code>。尝试挂载节点的此目录到 <code>node_exporter</code> 容器中，参考以下配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">containers:</span><br><span class="line">- args:</span><br><span class="line">  - --path.procfs</span><br><span class="line">  - /host/proc</span><br><span class="line">  - --path.sysfs</span><br><span class="line">  - /host/sys</span><br><span class="line">  - --collector.filesystem.ignored-mount-points</span><br><span class="line">  - &#x27;&quot;^/(sys|proc|dev|host|etc)($|/)&quot;&#x27;</span><br><span class="line">  - --collector.systemd</span><br><span class="line">  - --collector.systemd.unit-whitelist</span><br><span class="line">  - &#x27;&quot;(sshd|docker|cri-docker|crond|iptables|systemd-journald|).service&quot;&#x27;</span><br><span class="line">  image: prom/node-exporter</span><br><span class="line">  imagePullPolicy: Always</span><br><span class="line">  name: node-exporter</span><br><span class="line">  ports:</span><br><span class="line">  - containerPort: 9100</span><br><span class="line">    hostPort: 9100</span><br><span class="line">    name: http</span><br><span class="line">    protocol: TCP</span><br><span class="line">  resources: &#123;&#125;</span><br><span class="line">  securityContext:</span><br><span class="line">    privileged: true</span><br><span class="line">  terminationMessagePath: /dev/termination-log</span><br><span class="line">  terminationMessagePolicy: File</span><br><span class="line">  volumeMounts:</span><br><span class="line">  - mountPath: /host/dev</span><br><span class="line">    name: dev</span><br><span class="line">  - mountPath: /host/proc</span><br><span class="line">    name: proc</span><br><span class="line">  - mountPath: /host/sys</span><br><span class="line">    name: sys</span><br><span class="line">  - mountPath: /rootfs</span><br><span class="line">    name: rootfs</span><br><span class="line">  - mountPath: /var/run/dbus/</span><br><span class="line">    name: var-run-dbus</span><br><span class="line">    readOnly: true</span><br><span class="line">volumes:</span><br><span class="line">- hostPath:</span><br><span class="line">    path: /proc</span><br><span class="line">    type: &quot;&quot;</span><br><span class="line">  name: proc</span><br><span class="line">- hostPath:</span><br><span class="line">    path: /dev</span><br><span class="line">    type: &quot;&quot;</span><br><span class="line">  name: dev</span><br><span class="line">- hostPath:</span><br><span class="line">    path: /sys</span><br><span class="line">    type: &quot;&quot;</span><br><span class="line">  name: sys</span><br><span class="line">- hostPath:</span><br><span class="line">    path: /</span><br><span class="line">    type: &quot;&quot;</span><br><span class="line">  name: rootfs   </span><br><span class="line">- hostPath:</span><br><span class="line">    path: /var/run/dbus/</span><br><span class="line">    type: &quot;&quot;</span><br><span class="line">  name: var-run-dbus</span><br></pre></td></tr></table></figure>

<p>重启 Pod 后，重新观察日志，<code>node_exporter</code> 启动正常。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://github.com/prometheus/node_exporter">Node Exporter</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/prometheus/node_exporter">node_exporter 官网 github</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus Redis exporter 使用</title>
    <url>/202404301039/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://github.com/oliver006/redis_exporter">Prometheus ValKey &amp; Redis Metrics Exporter</a></p>
<p><a href="https://github.com/oliver006/redis_exporter/releases">Prometheus Redis Metrics Exporter 下载页面</a></p>
<h1 id="redis-exporter-安装"><a href="#redis-exporter-安装" class="headerlink" title="redis_exporter 安装"></a>redis_exporter 安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/oliver006/redis_exporter/releases/download/v1.59.0/redis_exporter-v1.59.0.linux-amd64.tar.gz</span><br><span class="line">tar -xf redis_exporter-v1.59.0.linux-amd64.tar.gz</span><br><span class="line">mv redis_exporter-v1.59.0.linux-amd64/redis_exporter /usr/bin/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>为 <code>redis_exporter</code> 生成 <code>systemd</code> 服务配置文件 <code>/usr/lib/systemd/system/redis_exporter.service</code></p>
<figure class="highlight shell"><figcaption><span>/usr/lib/systemd/system/redis_exporter.service</span></figcaption><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis_exporter</span><br><span class="line">After=syslog.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/bin/redis_exporter</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10</span><br><span class="line">StartLimitInterval=100</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动  <code>redis_exporter</code> 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl daemon-reload</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl <span class="built_in">enable</span> --now redis_exporter</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl status redis_exporter</span></span><br><span class="line">● redis_exporter.service - redis_exporter</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/redis_exporter.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Tue 2024-04-30 10:45:58 CST; 5s ago</span><br><span class="line"> Main PID: 12126 (redis_exporter)</span><br><span class="line">   CGroup: /system.slice/redis_exporter.service</span><br><span class="line">           └─12126 /usr/bin/redis_exporter</span><br><span class="line"></span><br><span class="line">Apr 30 10:45:58 ip-172-31-26-219.us-west-1.compute.internal systemd[1]: Started redis_exporter.</span><br><span class="line">Apr 30 10:45:58 ip-172-31-26-219.us-west-1.compute.internal redis_exporter[12126]: time=&quot;2024-04-30T10:45:58+08:00&quot; level=info msg=&quot;Redis Metrics Exp...md64&quot;</span><br><span class="line">Apr 30 10:45:58 ip-172-31-26-219.us-west-1.compute.internal redis_exporter[12126]: time=&quot;2024-04-30T10:45:58+08:00&quot; level=info msg=&quot;Providing metrics...rics&quot;</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure>

<p> <code>redis_exporter</code> 服务启动后，默认启动 <code>9121</code> 端口提供 Metrics 数据供 Prometheus 抓取。</p>
<h1 id="redis-exporter-配置"><a href="#redis-exporter-配置" class="headerlink" title="redis_exporter 配置"></a>redis_exporter 配置</h1><h2 id="redis-实例及认证信息配置"><a href="#redis-实例及认证信息配置" class="headerlink" title="redis 实例及认证信息配置"></a>redis 实例及认证信息配置</h2><p>如果要通过一个 <code>redis_exporter</code> 实例监控多个 Redis 实例，可以参照以下配置文件配置 Redis 实例及其认证信息，如果无需密码认证，则保留密码项为空。</p>
<figure class="highlight shell"><figcaption><span>/etc/redis_exporter_pwd_file.json</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;redis://localhost:7380&quot;: &quot;paswd12&quot;,</span><br><span class="line">    &quot;redis://localhost:7381&quot;: &quot;paswd12&quot;,</span><br><span class="line">    &quot;redis://localhost:7382&quot;: &quot;paswd12&quot;,</span><br><span class="line">    &quot;redis://172.31.19.9:7380&quot;: &quot;paswd12&quot;,</span><br><span class="line">    &quot;redis://172.31.19.9:7381&quot;: &quot;paswd12&quot;,</span><br><span class="line">    &quot;redis://172.31.19.9:7382&quot;: &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <code>redis_exporter</code> 启动参数，使其读取上面配置的实例和其认证信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/redis_exporter -redis.password-file /etc/redis_exporter_pwd_file.json</span><br></pre></td></tr></table></figure>

<h2 id="配置-Prometheus-抓取-redis-exporter-指标"><a href="#配置-Prometheus-抓取-redis-exporter-指标" class="headerlink" title="配置 Prometheus 抓取 redis_exporter 指标"></a>配置 Prometheus 抓取 redis_exporter 指标</h2><p>参考以下配置使用文件发现的方式配置被监控的 Redis 实例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;redis_exporter_targets&#x27;</span><br><span class="line">    file_sd_configs:</span><br><span class="line">      - files:</span><br><span class="line">        - targets-redis-instances.yml</span><br><span class="line">    metrics_path: /scrape</span><br><span class="line">    relabel_configs:</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        target_label: __param_target</span><br><span class="line">      - source_labels: [__param_target]</span><br><span class="line">        target_label: instance</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: &lt;&lt;REDIS-EXPORTER-HOSTNAME&gt;&gt;:9121</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># config for scraping the exporter itself</span></span></span><br><span class="line">  - job_name: &#x27;redis_exporter&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - &lt;&lt;REDIS-EXPORTER-HOSTNAME&gt;&gt;:9121</span><br></pre></td></tr></table></figure>

<p><code>targets-redis-instances.yml</code> 文件内容包含 Targets 内容：</p>
<figure class="highlight shell"><figcaption><span>targets-redis-instances.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">- labels:</span><br><span class="line">    label1: value1</span><br><span class="line">  targets: [ &quot;redis://redis-host-01:6379&quot;, &quot;redis://redis-host-02:6379&quot;]</span><br></pre></td></tr></table></figure>

<span id="more"></span>]]></content>
      <categories>
        <category>Tools</category>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus Process exporter 使用</title>
    <url>/202405091320/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://github.com/ncabatoff/process-exporter?tab=readme-ov-file">process-exporter Github</a></p>
<h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><p>为 <code>process-exporter</code> 生成 <code>systemd</code> 服务启动配置文件：</p>
<figure class="highlight shell"><figcaption><span>/etc/systemd/system/process_exporter.service</span></figcaption><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=process exporter</span><br><span class="line">Documentation=process exporter</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/process-exporter -config.path /etc/prometheus/process_exporter.yml</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>建议将 <code>process-exporter</code> 的配置写入文件并使用 <code>-config.path</code> 指定配置文件。</p>
<h1 id="配置进程监控"><a href="#配置进程监控" class="headerlink" title="配置进程监控"></a>配置进程监控</h1><p><code>process-exporter</code> 在配置文件中使用模板变量来配置筛选要监控的进程，可以使用的模板变量包括：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;&#123;.Comm&#125;&#125;</code></td>
<td>匹配进程的命令名（不包括路径）。主要来源于 <code>/proc/&lt;pid&gt;/stat</code> 输出中的第二部分<br/><strong>命令名</strong>是指进程执行时的名称。在 Linux 系统中，可以通过 <code>/proc/&lt;PID&gt;/comm</code> 文件来获取进程的命令名。例如，如果一个进程执行的命令是 <code>/usr/local/bin/php</code>，那么它的命令名就是 <code>php</code>。</td>
<td></td>
</tr>
<tr>
<td><code>&#123;&#123;.ExeBase&#125;&#125;</code></td>
<td>匹配进程的可执行文件名，不包括路径<br/><strong>可执行文件名</strong>是指进程的完整路径的最后一个部分。例如，如果一个进程的完整路径是 <code>/usr/local/bin/php</code>，那么它的可执行文件名就是 <code>php</code>。</td>
<td></td>
</tr>
<tr>
<td><code>&#123;&#123;.ExeFull&#125;&#125;</code></td>
<td>匹配进程的可执行文件的完整路径，例如 <code>/usr/local/php73/bin/php</code></td>
<td></td>
</tr>
<tr>
<td><code>&#123;&#123;.Username&#125;&#125;</code></td>
<td>匹配进程的用户名</td>
<td></td>
</tr>
<tr>
<td><code>&#123;&#123;.Matches&#125;&#125;</code></td>
<td>匹配进程的命令行参数列表</td>
<td></td>
</tr>
<tr>
<td><code>&#123;&#123;.StartTime&#125;&#125;</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>&#123;&#123;.Cgroups&#125;&#125;</code></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="监控系统上的所有进程"><a href="#监控系统上的所有进程" class="headerlink" title="监控系统上的所有进程"></a>监控系统上的所有进程</h2><p>要监控系统上的所有进程的运行情况，可以参考以下配置： <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Using a config file](https://github.com/ncabatoff/process-exporter?tab=readme-ov-file#using-a-config-file)">[1]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>/etc/prometheus/process_exporter.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">process_names:</span><br><span class="line">  - name: &quot;&#123;&#123;.Comm&#125;&#125;&quot;</span><br><span class="line">    cmdline:</span><br><span class="line">    - &#x27;.+&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>以上配置会获取到系统上的所有进程（<strong>子进程被统计入父进程中</strong>）</li>
<li>假如配置中有多个匹配项，以上配置不能放到第一个，否则因为其<strong>可以匹配到系统中所有的进程，后续配置的匹配不会再有机会生效</strong></li>
</ul>
</blockquote>
<h2 id="监控系统上面指定进程"><a href="#监控系统上面指定进程" class="headerlink" title="监控系统上面指定进程"></a>监控系统上面指定进程</h2><p>假如系统中运行了多个 <code>php</code> 的子进程，为了获取到各个子进程的统计数据，可以参考以下配置</p>
<figure class="highlight shell"><figcaption><span>/etc/prometheus/process_exporter.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">process_names:</span><br><span class="line"></span><br><span class="line">  - name: php_pro1</span><br><span class="line">    cmdline:</span><br><span class="line">      - /usr/local/php73/bin/php</span><br><span class="line">      - /home/www/admin/artisan</span><br><span class="line">      - Pulldata</span><br><span class="line"></span><br><span class="line">  - name: php_schedule_run</span><br><span class="line">    cmdline:</span><br><span class="line">      - /usr/local/php73/bin/php</span><br><span class="line">      - /home/www/admin/artisan</span><br><span class="line">      - schedule:run</span><br><span class="line"></span><br><span class="line">  - name: php_artisan_queue</span><br><span class="line">    cmdline:</span><br><span class="line">      - /usr/local/php73/bin/php</span><br><span class="line">      - /home/www/admin/artisan</span><br><span class="line">      - queue:work</span><br><span class="line"></span><br><span class="line">  - name: &quot;&#123;&#123;.Comm&#125;&#125;&quot;</span><br><span class="line">    cmdline:</span><br><span class="line">    - &#x27;.+&#x27;</span><br></pre></td></tr></table></figure>

<p>使用此配置，可以获取到系统中以下进程的统计数据：</p>
<ul>
<li><code>/usr/local/php73/bin/php /home/www/admin/artisan Pulldata</code></li>
<li><code>/usr/local/php73/bin/php /home/www/admin/artisan schedule:run</code></li>
<li><code>/usr/local/php73/bin/php /home/www/admin/artisan queue:work</code></li>
</ul>
<p>除可以获取到以上特定进程的统计数据外，还可以统计到除此之外的其他所有进程的统计数据。</p>
<blockquote>
<p>因为配置中匹配进程的顺序的关系，假如系统中还有除此之外的其他 <code>php</code> 进程，那么由最后的 <code>&#123;&#123;.Comm&#125;&#125;</code> 统计到的 <code>php</code> 进程资源使用数据中不再包含前面 3 个特定进程的资源使用数据。</p>
</blockquote>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/ncabatoff/process-exporter?tab=readme-ov-file#using-a-config-file">Using a config file</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm 常用配置</title>
    <url>/202208041319/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>PyCharm 2022.1 (Professional Edition)</li>
</ul>
<h1 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h1><h2 id="快速插入时间"><a href="#快速插入时间" class="headerlink" title="快速插入时间"></a>快速插入时间</h2><p>通过配置 <code>Live Template</code> 实现快速插入时间  </p>
<ol>
<li><p>打开 File &gt; Setting &gt; Editor: Live Templates</p>
</li>
<li><p>选中常用的语言，比如 <code>Python</code>，点击右上角的 <code>+</code>，添加 <code>Live Template</code><br> <code>Abbreviation</code> 输入快捷输入的名称，比如 <code>currentTime</code><br> <code>Description</code> 输入描述信息<br> <code>Template Text</code> 输入 <code>$time$</code><br> <img src="https://i.csms.tech/img_32.png"></p>
</li>
<li><p>点击 <code>Edit Variables</code> 配置命令及格式<br> <img src="https://i.csms.tech/img_33.png"></p>
</li>
<li><p><code>Define</code> 选择 <code>Everywhere</code>，<code>Apply</code>让配置生效</p>
</li>
<li><p>编辑时输入 <code>currentTime</code>,可以直接插入当前时间<br> <img src="https://i.csms.tech/img_34.png"></p>
</li>
</ol>
<h2 id="配置-git-仓库"><a href="#配置-git-仓库" class="headerlink" title="配置 git 仓库"></a>配置 git 仓库</h2><ol>
<li><p>打开 <code>File</code> -&gt; <code>Settings</code> -&gt; <code>Version Control</code> -&gt; <code>Git</code>，在 <code>Path to Git executable</code> 处选择 git 的安装位置。配置完成之后，点击<code>【Test】</code>按钮，如果成功，则会显示 Git 版本信息<br><img src="https://i.csms.tech/img_114.png"></p>
</li>
<li><p>点击 <code>VCS</code> -&gt; <code>Get from Version Control</code>，输入 Git 仓库的地址和本地目录。<br><img src="https://i.csms.tech/img_115.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Tools</category>
        <category>PyCharm</category>
      </categories>
      <tags>
        <tag>PyCharm</tag>
      </tags>
  </entry>
  <entry>
    <title>python 操作日期及时间</title>
    <url>/202301231137/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3.10</li>
</ul>
<h1 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h1><h2 id="获取前一天所属月份"><a href="#获取前一天所属月份" class="headerlink" title="获取前一天所属月份"></a>获取前一天所属月份</h2><h3 id="arrow-模块获取"><a href="#arrow-模块获取" class="headerlink" title="arrow 模块获取"></a>arrow 模块获取</h3><p>以下示例使用 <code>arrow</code> 模块获取前一天所属月份 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[时间日期相关操作](https://developer.aliyun.com/article/673245)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install arrow</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a = arrow.now() <span class="comment"># 当前本地时间</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a.shift(months=-1).format(<span class="string">&quot;YYYYMM&quot;</span>)</span></span><br><span class="line">&#x27;202212&#x27;</span><br></pre></td></tr></table></figure>

<p>指定参数 <code>months = -1</code> 就可以计算前一个月的时间。往后一个月就是 <code>month=+1</code>，<code>format</code> 指定时间格式。</p>
<h2 id="获取前一个月的天数"><a href="#获取前一个月的天数" class="headerlink" title="获取前一个月的天数"></a>获取前一个月的天数</h2><p>通过模块 <code>calendar</code> 获取 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import calendar</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 2022-1 月份的天数，输出 tuple ，由此月的第一天是星期几和此月的天数构成。</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; calendar.monthrange(2022,1)</span></span><br><span class="line">(5, 31)</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="时间转换为时间戳"><a href="#时间转换为时间戳" class="headerlink" title="时间转换为时间戳"></a>时间转换为时间戳</h2><h3 id="time-模块"><a href="#time-模块" class="headerlink" title="time 模块"></a>time 模块</h3><p>使用 <code>time</code> 模块将指定格式的时间，转为时间戳</p>
<figure class="highlight shell"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import time</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; t = <span class="string">&quot;2022-12-01 00:00:00&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 使用 time.strptime 将指定的时间 t 转换为时间数组</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; timeArray = time.strptime(t, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; timeArray</span></span><br><span class="line">time.struct_time(tm_year=2022, tm_mon=12, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; timestamp = time.mktime(timeArray)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; timestamp</span></span><br><span class="line">1669852800.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="datetime-模块使用"><a href="#datetime-模块使用" class="headerlink" title="datetime 模块使用"></a>datetime 模块使用</h1><h2 id="获取日期和时间"><a href="#获取日期和时间" class="headerlink" title="获取日期和时间"></a>获取日期和时间</h2><h3 id="获取今天的日期"><a href="#获取今天的日期" class="headerlink" title="获取今天的日期"></a>获取今天的日期</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(datetime)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.date.today()</span><br><span class="line">datetime.date(<span class="number">2023</span>, <span class="number">2</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.date.today().year</span><br><span class="line"><span class="number">2023</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.date.today().day</span><br><span class="line"><span class="number">28</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="获取当前的日期和时间"><a href="#获取当前的日期和时间" class="headerlink" title="获取当前的日期和时间"></a>获取当前的日期和时间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.now(tz=datetime.timezone.utc)</span><br><span class="line">datetime.datetime(<span class="number">2023</span>, <span class="number">2</span>, <span class="number">28</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">48</span>, <span class="number">996356</span>, tzinfo=datetime.timezone.utc)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="获取明天的日期"><a href="#获取明天的日期" class="headerlink" title="获取明天的日期"></a>获取明天的日期</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(datetime.timedelta)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.date.today() + datetime.timedelta(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="比较时间"><a href="#比较时间" class="headerlink" title="比较时间"></a>比较时间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>expire</span><br><span class="line">datetime.datetime(<span class="number">2023</span>, <span class="number">12</span>, <span class="number">23</span>, <span class="number">6</span>, <span class="number">26</span>, <span class="number">2</span>, tzinfo=datetime.timezone.utc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期比较</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>expire.date() &gt; datetime.date.today()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期和时间比较，tz=datetime.timezone.utc 可以解决时区不同的问题： TypeError: can&#x27;t compare offset-naive and offset-aware datetimes</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>expire &gt; datetime.datetime.now(tz=datetime.timezone.utc)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.aliyun.com/article/673245">时间日期相关操作</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python dict 使用</title>
    <url>/202301101011/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python3.10</li>
</ul>
<h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h2 id="删除-key"><a href="#删除-key" class="headerlink" title="删除 key"></a>删除 key</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scores = &#123;&#x27;语文&#x27;: 89&#125;</span><br><span class="line">scores[&#x27;数学&#x27;] = 93</span><br><span class="line">scores[92] = 5.7</span><br><span class="line"></span><br><span class="line">del scores[&#x27;语文&#x27;]</span><br><span class="line">del scores[&#x27;数学&#x27;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定的 key，并返回 key 对应的值；如果 key 不存在，返回异常：KeyError，可查看 <span class="built_in">help</span>(dict)</span></span><br><span class="line">scores.pop(92)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除最后一个 key-value，并以元组的形式返回 (key, value)</span></span><br><span class="line">scores.popitem()</span><br></pre></td></tr></table></figure>

<h2 id="清空-dict"><a href="#清空-dict" class="headerlink" title="清空 dict"></a>清空 dict</h2><p><code>clear()</code> 用于清空字典中所有的 key-value 对，对一个字典执行 clear() 方法之后，该字典就会变成一个空字典</p>
<h2 id="更新-dict"><a href="#更新-dict" class="headerlink" title="更新 dict"></a>更新 dict</h2><p><code>update()</code> 方法可使用一个字典所包含的 key-value 对来更新己有的字典。在执行 <code>update()</code> 方法时，如果被更新的字典中己包含对应的 key-value 对，那么原 value 会被覆盖；如果被更新的字典中不包含对应的 key-value 对，则该 key-value 对被添加进去；原来的 <code>dict</code> 中存在（更新中不存在）的 key-value 保持不变。</p>
<p><code>update()</code> 方法也可以用于合并字典，如果 key 重复，会使用新字典中的值替换原来的字典中的值。<em><strong>更新操作不返回任何值，返回结果为 None</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">dict1.update(dict2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># 输出: &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 3, &#x27;c&#x27;: 4&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="合并-dict"><a href="#合并-dict" class="headerlink" title="合并 dict"></a>合并 dict</h2><p>要将多个字典的键值合并到一个新的字典中，可以使用字典的解包方式。<em><strong>如果字典中有重复的 key，最终的值为最后的字典中的值</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">params = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;65220d913a0283df8a&#x27;</span>&#125;</span><br><span class="line">merged_dict = &#123;**query, **params&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 中 json 格式</title>
    <url>/202301201605/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python3.10</li>
</ul>
<p>Python 中操作 json 相关格式，主要使用模块 <code>json</code></p>
<h1 id="Python-数据类型转换为-json-格式"><a href="#Python-数据类型转换为-json-格式" class="headerlink" title="Python 数据类型转换为 json 格式"></a>Python 数据类型转换为 json 格式</h1><p>python 数据类型转换为 json ，主要使用方法 <code>dumps()</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; adict = &#123;<span class="string">&#x27;a&#x27;</span>: 1, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;st&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; json.dumps(adict)</span></span><br><span class="line">&#x27;&#123;&quot;a&quot;: 1, &quot;b&quot;: &quot;st&quot;&#125;&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; alist = [1,2,3,4]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; json.dumps(alist)</span></span><br><span class="line">&#x27;[1, 2, 3, 4]&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="json-格式转换为-Python-数据类型"><a href="#json-格式转换为-Python-数据类型" class="headerlink" title="json 格式转换为 Python 数据类型"></a>json 格式转换为 Python 数据类型</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ajson = <span class="string">&#x27;[1, 2, 3, 4]&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">type</span>(ajson)</span></span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; json.load(ajson)</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;console&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;/usr/local/lib/python3.10/json/__init__.py&quot;, line 293, in load</span><br><span class="line">    return loads(fp.read(),</span><br><span class="line">AttributeError: &#x27;str&#x27; object has no attribute &#x27;read&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; json.loads(ajson)</span></span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; bjson = <span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;b&quot;: &quot;st&quot;&#125;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">type</span>(bjson)</span></span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; json.loads(bjson)</span></span><br><span class="line">&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: &#x27;st&#x27;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 错误集锦</title>
    <url>/202306161614/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3.10.12</li>
</ul>
<h1 id="certificate-verify-failed-unable-to-get-local-issuer-certificate"><a href="#certificate-verify-failed-unable-to-get-local-issuer-certificate" class="headerlink" title="certificate verify failed: unable to get local issuer certificate"></a>certificate verify failed: unable to get local issuer certificate</h1><p>报错信息如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)</span><br><span class="line">...</span><br><span class="line">urllib.error.URLError: &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;</span><br></pre></td></tr></table></figure>

<p><strong>问题原因</strong> ： 本地 CA 证书不存在</p>
<p><strong>解决方法</strong></p>
<ol>
<li>查看默认证书位置 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import ssl</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(ssl.get_default_verify_paths())</span></span><br><span class="line">DefaultVerifyPaths(cafile=None, capath=&#x27;/usr/local/openssl/ssl/certs&#x27;, openssl_cafile_env=&#x27;SSL_CERT_FILE&#x27;, openssl_cafile=&#x27;/usr/local/openssl/ssl/cert.pem&#x27;, openssl_capath_env=&#x27;SSL_CERT_DIR&#x27;, openssl_capath=&#x27;/usr/local/openssl/ssl/certs&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
根据输出内容，可以看到 Python 使用的 <code>openssl</code> 位于 <code>/usr/local/openssl/</code>，CA 证书路径为 <code>/usr/local/openssl/ssl/cert.pem</code>，检查 CA 证书路径，发现 CA 证书不存在 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/openssl/ssl/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">certs  ct_log_list.cnf  ct_log_list.cnf.dist  misc  openssl.cnf  openssl.cnf.dist  private</span><br></pre></td></tr></table></figure></li>
<li>下载 CA 证书文件 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://curl.haxx.se/ca/cacert.pem --no-check-certificate</span><br><span class="line">mv cacert.pem cert.pem</span><br></pre></td></tr></table></figure>
下载 CA 证书文件后，重新尝试，SSl 连接正常。</li>
</ol>
<h1 id="can’t-start-new-thread"><a href="#can’t-start-new-thread" class="headerlink" title="can’t start new thread"></a>can’t start new thread</h1><h2 id="环境信息-1"><a href="#环境信息-1" class="headerlink" title="环境信息"></a>环境信息</h2><ul>
<li>Docker 1.13</li>
<li>Python3.9</li>
</ul>
<p>在 Docker 中运行 <code>python</code> 后，使用 <code>pip</code> 报错 <code>RuntimeError: can&#39;t start new thread</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pip install --upgrade pip</span></span><br><span class="line">Requirement already satisfied: pip in /usr/local/lib/python3.9/site-packages (23.0.1)</span><br><span class="line">Collecting pip</span><br><span class="line">  Downloading pip-23.2.1-py3-none-any.whl (2.1 MB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 0.0/2.1 MB ? eta -:--:--ERROR: Exception:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/usr/local/lib/python3.9/site-packages/pip/_internal/cli/base_command.py&quot;, line 160, in exc_logging_wrapper</span><br><span class="line">    status = run_func(*args)</span><br><span class="line">  File &quot;/usr/local/lib/python3.9/site-packages/pip/_internal/cli/req_command.py&quot;, line 247, in wrapper</span><br><span class="line">    return func(self, options, args)</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  File &quot;/usr/local/lib/python3.9/site-packages/pip/_internal/operations/prepare.py&quot;, line 107, in get_http_url</span><br><span class="line">    from_path, content_type = download(link, temp_dir.path)</span><br><span class="line">  File &quot;/usr/local/lib/python3.9/site-packages/pip/_internal/network/download.py&quot;, line 147, in __call__</span><br><span class="line">    for chunk in chunks:</span><br><span class="line">  File &quot;/usr/local/lib/python3.9/site-packages/pip/_internal/cli/progress_bars.py&quot;, line 52, in _rich_progress_bar</span><br><span class="line">    with progress:</span><br><span class="line">  File &quot;/usr/local/lib/python3.9/site-packages/pip/_vendor/rich/progress.py&quot;, line 1169, in __enter__</span><br><span class="line">    self.start()</span><br><span class="line">  File &quot;/usr/local/lib/python3.9/site-packages/pip/_vendor/rich/progress.py&quot;, line 1160, in start</span><br><span class="line">    self.live.start(refresh=True)</span><br><span class="line">  File &quot;/usr/local/lib/python3.9/site-packages/pip/_vendor/rich/live.py&quot;, line 132, in start</span><br><span class="line">    self._refresh_thread.start()</span><br><span class="line">  File &quot;/usr/local/lib/python3.9/threading.py&quot;, line 899, in start</span><br><span class="line">    _start_new_thread(self._bootstrap, ())</span><br><span class="line">RuntimeError: can&#x27;t start new thread</span><br><span class="line"></span><br><span class="line">[notice] A new release of pip is available: 23.0.1 -&gt; 23.2.1</span><br><span class="line">[notice] To update, run: pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p><em><strong>问题原因</strong></em> Docker 版本太低，升级版本到 18.06 以上。<a href="https://stackoverflow.com/questions/70087344/python-in-docker-runtimeerror-cant-start-new-thread">参考说明</a></p>
<span id="more"></span>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 代码性能分析工具</title>
    <url>/202301261101/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>python 3.10</li>
</ul>
<h1 id="pyinstrument-使用"><a href="#pyinstrument-使用" class="headerlink" title="pyinstrument 使用"></a>pyinstrument 使用</h1><p><code>pyinstrument</code> 可以快速找到代码运行最慢的部分，帮助提高代码的性能。支持 Python 3.7+ 且能够分析异步代码，仅需一条命令即可显示具体代码的耗时 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[如何快速定位 Python 运行最慢的代码](https://jishuin.proginn.com/p/763bfbd66eae)">[1]</span></a></sup></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyinstrument</span><br></pre></td></tr></table></figure>

<h2 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h2><p>在无需更改代码的情况下，直接通过命令行使用 <code>pyinstrument</code> 分析目标代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyinstrument main.py</span></span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://jishuin.proginn.com/p/763bfbd66eae">如何快速定位 Python 运行最慢的代码</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python PyInstaller 使用</title>
    <url>/202310021022/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>要将 Python 脚本打包为 Windows 可运行程序，一种常用的方法是使用 PyInstaller。</p>
<h1 id="安装-PyInstaller"><a href="#安装-PyInstaller" class="headerlink" title="安装 PyInstaller"></a>安装 PyInstaller</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure>

<h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>在命令行中，导航到脚本所在的文件夹并运行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyinstaller --onefile test_file.py</span><br></pre></td></tr></table></figure>
<p>这会生成一个 <code>dist</code> 目录，里面包含一个名为 <code>test_file.exe</code> 的可执行文件。参数 <code>--onefile</code> 确保所有必要的文件都被包含在单一的可执行文件中。</p>
<p>以上方法打包后的文件点击运行后，桌面会弹窗一个 cmd 窗口，如果关闭了此 cmd 窗口，与其关联的程序也会被关闭。为了阻止这个命令行窗口的出现，并让程序在关闭窗口后仍然运行，你需要在使用 PyInstaller 打包时使用 <code>--noconsole</code> 选项。此外，为了使程序在没有任何可视窗口的情况下静默运行（例如，仅在系统托盘中），你还需要使用 <code>--windowed</code> 选项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyinstaller --onefile --noconsole --windowed test_file.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你想要程序在系统托盘中静默运行，并通过系统托盘图标进行交互，那么你需要使用其他库，如 <code>pystray</code>，来创建系统托盘应用。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3 requests 库使用</title>
    <url>/202302011011/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>python3.10</li>
</ul>
<h1 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h1><p>基础用法可以查看系统帮助信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">help</span>(requests)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>requests</code> 发送请求时，会自动创建 <code>requests.Request</code>，因此发送请求时如果需要发送更多数据，可以查看 <code>Request</code> 类的帮助信息，或者查看 <code>requests.models</code> 获取更多帮助信息，如 <code>headers</code>，<code>files</code> 等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">help</span>(requests.Request)</span></span><br></pre></td></tr></table></figure>
<p>例如发送请求时需要添加头部信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; headers = &#123;<span class="string">&#x27;Authorization&#x27;</span>: token, <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Python&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; r = requests.get(<span class="string">&#x27;https://api.cdn77.com/v3/cdn&#x27;</span>, headers=headers)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; r.text</span></span><br></pre></td></tr></table></figure>

<p><code>Request</code> 请求的响应是 ‘requests.models.Response’ 对象的实例。获取 <code>Response</code> 帮助，可以查看以下内容 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">help</span>(requests.models.Response)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">help</span>(requests.Response)</span></span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python requests 使用</title>
    <url>/202303071126/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3.11.2</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>

<h1 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h1><h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><p><code>get</code> 请求及响应中常用的属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&#x27;https://csms.tech&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(r)</span><br><span class="line">[..., <span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;cookies&#x27;</span>, <span class="string">&#x27;elapsed&#x27;</span>, <span class="string">&#x27;encoding&#x27;</span>, <span class="string">&#x27;headers&#x27;</span>, <span class="string">&#x27;history&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;is_permanent_redirect&#x27;</span>, <span class="string">&#x27;is_redirect&#x27;</span>, <span class="string">&#x27;iter_content&#x27;</span>, <span class="string">&#x27;iter_lines&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;links&#x27;</span>, <span class="string">&#x27;next&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;raise_for_status&#x27;</span>, <span class="string">&#x27;raw&#x27;</span>, <span class="string">&#x27;reason&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;request&#x27;</span>, <span class="string">&#x27;status_code&#x27;</span>, <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;url&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="带参数的-get-请求"><a href="#带参数的-get-请求" class="headerlink" title="带参数的 get 请求"></a>带参数的 get 请求</h3><p>要在 <code>get</code> 请求中携带请求参数，可以使用以下方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(requests.get)</span><br><span class="line">get(url, params=<span class="literal">None</span>, **kwargs)</span><br><span class="line">    Sends a GET request.</span><br><span class="line">    </span><br><span class="line">    :param url: URL <span class="keyword">for</span> the new :<span class="keyword">class</span>:`Request` <span class="built_in">object</span>.</span><br><span class="line">    :param params: (optional) Dictionary, <span class="built_in">list</span> of tuples <span class="keyword">or</span> <span class="built_in">bytes</span> to send</span><br><span class="line">        <span class="keyword">in</span> the query string <span class="keyword">for</span> the :<span class="keyword">class</span>:`Request`.</span><br><span class="line">    :param \*\*kwargs: <span class="type">Optional</span> arguments that ``request`` takes.</span><br><span class="line">    :<span class="keyword">return</span>: :<span class="keyword">class</span>:`Response &lt;Response&gt;` <span class="built_in">object</span></span><br><span class="line">    :rtype: requests.Response</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>params = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&#x27;v1&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="string">&#x27;v2&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&#x27;https://csms.tech&#x27;</span>, params=params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response = requests.get(<span class="string">&quot;https://csms.tech&quot;</span>, params = params, headers = headers)</span><br></pre></td></tr></table></figure>
<p><code>get</code> 方法本质上是通过创建了一个 <code>requests.Request</code> 对象，因此 <code>**kwargs</code> 可用的值可以通过查看 <code>requests.Request</code> 的帮助信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(requests.Request)</span><br></pre></td></tr></table></figure>


<h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><p><code>post</code> 方法可以发送 <code>POST</code> 请求到指定 url，一般格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.post(url, data=&#123;key: value&#125;, json=&#123;key: value&#125;, args)</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>url</code> - 请求 url。</p>
</li>
<li><p><code>data</code> - 参数为要发送到指定 url 的字典、元组列表、字节或文件对象。</p>
</li>
<li><p><code>json</code> - 参数为要发送到指定 url 的 JSON 对象。</p>
</li>
<li><p><code>args</code> -  为其他参数，比如 cookies、headers、verify等。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python requirements 的创建及使用</title>
    <url>/202208161710/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Python 3.10</li>
</ul>
<p><code>python</code> 项目中最好包含一个 <code>requirements.txt</code> 文件，用于记录所有依赖包及其精确的版本号。以便新环境部署。</p>
<span id="more"></span>

<h3 id="requirements-生成和使用"><a href="#requirements-生成和使用" class="headerlink" title="requirements 生成和使用"></a>requirements 生成和使用</h3><p>在项目中安装新的包之后，可以运行以下命令更新 <code>requirements</code> 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<p><code>requirements.txt</code> 文件内容示例：</p>
<figure class="highlight shell"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">asgiref==3.5.2</span><br><span class="line">Django==4.0</span><br><span class="line">django-mdeditor==0.1.20</span><br><span class="line">Markdown==3.3.7</span><br><span class="line">Pillow==9.2.0</span><br><span class="line">Pygments==2.12.0</span><br><span class="line">PyMySQL==1.0.2</span><br><span class="line">sqlparse==0.4.2</span><br><span class="line">uWSGI==2.0.20</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>生成的文件中会包含项目需要的所有包以及精确的版本号信息，新环境部署时，可使用以下命令安装依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python selenium 使用说明</title>
    <url>/202309130955/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Selenium &gt; 4.0</li>
</ul>
<p>Selenium 是一个用于自动化 Web 浏览器操作的工具，可以用于模拟用户与网站的交互。</p>
<p>使用 <code>pip</code> 安装 Selenium 库</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>
<p>Selenium 需要一个 WebDriver 来控制不同的浏览器。可以根据要使用的浏览器下载相应的 WebDriver。以下是一些常见的浏览器和对应的WebDriver下载链接：</p>
<ul>
<li>Chrome : <a href="https://sites.google.com/chromium.org/driver/">ChromeDriver 下载</a></li>
<li>Firefox: <a href="https://github.com/mozilla/geckodriver/releases">GeckoDriver 下载</a></li>
<li>Edge: <a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">EdgeDriver 下载</a></li>
</ul>
<p>下载 WebDriver 并确保它在系统路径中可用。<em><strong>WebDriver 和浏览器具有版本对应关系，要确保版本匹配</strong></em></p>
<h1 id="selenium-常见用法总结"><a href="#selenium-常见用法总结" class="headerlink" title="selenium 常见用法总结"></a>selenium 常见用法总结</h1><p>本示例中以 Chrome 浏览器为例。</p>
<ul>
<li><p>创建一个浏览器实例，并请求指定的页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;https://www.example.com&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭当前浏览器窗口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.close()</span><br></pre></td></tr></table></figure></li>
<li><p>最大化浏览器窗口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.maximize_window()</span><br></pre></td></tr></table></figure>
</li>
<li><p>后退</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.back()</span><br></pre></td></tr></table></figure>
</li>
<li><p>前进</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.forward()</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷新页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.refresh()</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭浏览器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="查找元素并进行操作"><a href="#查找元素并进行操作" class="headerlink" title="查找元素并进行操作"></a>查找元素并进行操作</h2><ul>
<li><p>通过元素 ID 查找元素并输入文本</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">element = driver.find_element(By.ID, <span class="string">&quot;element_id&quot;</span>)</span><br><span class="line"></span><br><span class="line">element.send_keys(<span class="string">&quot;Hello, Selenium!&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过元素名称查找元素并点击</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">element = driver.find_element(by.NAME, <span class="string">&quot;element_name&quot;</span>)</span><br><span class="line">element.click()</span><br></pre></td></tr></table></figure></li>
<li><p>通过链接文本查找元素并点击</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">element = driver.find_element(By.LINK_TEXT, <span class="string">&quot;Click Here&quot;</span>)</span><br><span class="line">element.click()</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据元素的 class 属性查找元素。<strong>如果有多个具有相同 class 属性的元素</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">element = driver.find_element(By.CLASS_NAME, <span class="string">&quot;your_class_name&quot;</span>)</span><br><span class="line"></span><br><span class="line">element.click()</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找网页源代码。<code>driver.page_source</code> 包含了网页源代码 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[元素](https://www.selenium.dev/zh-cn/documentation/webdriver/elements/file_upload/)">[1]</span></a></sup></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://the-internet.herokuapp.com/upload&quot;</span>);</span><br><span class="line">driver.find_element(By.ID,<span class="string">&quot;file-upload&quot;</span>).send_keys(<span class="string">&quot;selenium-snapshot.jpg&quot;</span>)</span><br><span class="line">driver.find_element(By.ID,<span class="string">&quot;file-submit&quot;</span>).submit()</span><br><span class="line"><span class="keyword">if</span>(driver.page_source.find(<span class="string">&quot;File Uploaded!&quot;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;file upload success&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;file upload not successful&quot;</span>)</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="通过-XPath-定位元素"><a href="#通过-XPath-定位元素" class="headerlink" title="通过 XPath 定位元素"></a>通过 XPath 定位元素</h3><ul>
<li>使用绝对 XPath 定位元素（不推荐，因为它对页面结构的变化敏感）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">element = driver.find_element(By.XPATH, <span class="string">&quot;/html/body/div[1]/div/div[3]/p/a&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>使用相对XPath定位元素（更具灵活性，建议使用） <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">element = driver.find_element_by_xpath(<span class="string">&quot;//div[@class=&#x27;example&#x27;]/p/a&quot;</span>)</span><br></pre></td></tr></table></figure>
在上面的示例中，我们使用 XPath 定位元素。以下是 XPath 定位的一些常见语法：    <ul>
<li><code>//</code> ：从文档的根节点开始搜索</li>
<li><code>/</code> ：从当前节点的子节点中搜索。</li>
<li><code>[]</code> ：用于筛选元素，可以包含属性名和值。</li>
<li><code>@</code> ：用于引用元素的属性。</li>
</ul>
</li>
</ul>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">language_button = driver.find_element(By.XPATH, <span class="string">&quot;//button[contains(@class, &#x27;btn-lang&#x27;) and contains(@class, &#x27;btn-dropdown&#x27;)]&quot;</span>)</span><br><span class="line"></span><br><span class="line">language_button.click()</span><br></pre></td></tr></table></figure>

<p>实际使用中，自己分析 HTML 结构很难找到对的 XPath。这时候需要使用浏览器的开发者工具，在浏览器的开发者工具中，定位到目标元素，可以选择复制 XPath 获得完整的 XPath 路径<br><img src="https://i.csms.tech/img_220.png"></p>
<p>如果要获取 XPath 列表中的最后一个元素，可以参考以下方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(//*[@<span class="built_in">id</span>=<span class="string">&quot;section-event-round&quot;</span>]/div/div[<span class="number">1</span>]/div[<span class="number">3</span>]/div[<span class="number">2</span>]/div[<span class="number">2</span>])[last()]</span><br><span class="line"></span><br><span class="line">element = driver.find_element(By.XPATH, <span class="string">&quot;(//*[@id=&#x27;section-event-round&#x27;]/div/div[1]/div[3]/div[2]/div[2])[last()]&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这个 XPath 将选择位于 <code>//*[@id=&quot;section-event-round&quot;]/div/div[1]/div[3]/div[2]/div[2]</code> 位置的最后一个 <code>&lt;div&gt;</code> 元素。</p>
<h3 id="处理表单"><a href="#处理表单" class="headerlink" title="处理表单"></a>处理表单</h3><ul>
<li><p>查找表单元素并填写表单字段</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = driver.find_element(By.ID, <span class="string">&quot;username&quot;</span>)</span><br><span class="line">password = driver.find_element(By.ID, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">username.send_keys(<span class="string">&quot;your_username&quot;</span>)</span><br><span class="line">password.send_keys(<span class="string">&quot;your_password&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交表单</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">login_button = driver.find_element(By.ID, <span class="string">&quot;login_button&quot;</span>)</span><br><span class="line">login_button.click()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="处理下拉框或选择框"><a href="#处理下拉框或选择框" class="headerlink" title="处理下拉框或选择框"></a>处理下拉框或选择框</h2><ul>
<li>通过标签名查找下拉框元素  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line">select = Select(driver.find_element(By.TAG_NAME, <span class="string">&quot;select&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>通过文本选择选某一个选择项  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select.select_by_visible_text(<span class="string">&quot;Option 1&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>通过值选择选某一个选择项  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select.select_by_value(<span class="string">&quot;option_value&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>过索引选择选某一个选择项  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select.select_by_index(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="等待元素加载"><a href="#等待元素加载" class="headerlink" title="等待元素加载"></a>等待元素加载</h2><ul>
<li>使用  <code>WebDriverWait</code> 来等待特定元素出现或满足特定条件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">    EC.presence_of_element_located((By.ID, <span class="string">&quot;element_id&quot;</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h2><p>切换窗口要使用窗口句柄来操作</p>
<ul>
<li><p>获取当前窗口句柄</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current_window_handle = driver.current_window_handle</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取所有窗口句柄</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">all_window_handles = driver.window_handles</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到新窗口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.switch_to.window(new_window_handle)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><ul>
<li><p>截取整个页面的屏幕截图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.save_screenshot(<span class="string">&quot;screenshot.png&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>截取特定元素的屏幕截图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">element = driver.find_element(By.ID, <span class="string">&quot;element_id&quot;</span>)</span><br><span class="line">element.screenshot(<span class="string">&quot;element_screenshot.png&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="配置浏览器启动选项"><a href="#配置浏览器启动选项" class="headerlink" title="配置浏览器启动选项"></a>配置浏览器启动选项</h1><p>要自定义浏览器的启动选项，可以使用 <code>Options</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service <span class="keyword">as</span> ChromeService</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Chrome浏览器的选项</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--disable-infobars&quot;</span>)  <span class="comment"># 禁用信息栏</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--disable-extensions&quot;</span>)  <span class="comment"># 禁用扩展</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--start-maximized&quot;</span>)  <span class="comment"># 最大化窗口</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--disable-notifications&quot;</span>)  <span class="comment"># 禁用通知</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体显示比例为10%</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--force-device-scale-factor=0.1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面加载策略.</span></span><br><span class="line"><span class="comment">## normal	complete	默认值, 等待所有资源下载</span></span><br><span class="line"><span class="comment">## eager	interactive	DOM 访问已准备就绪, 但诸如图像的其他资源可能仍在加载</span></span><br><span class="line"><span class="comment">## none	Any	完全不会阻塞 WebDriver</span></span><br><span class="line">chrome_options.page_load_strategy = <span class="string">&#x27;normal&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 chromedriver 在系统 Path 中，无需指定路径</span></span><br><span class="line">driver = webdriver.Chrome(service=ChromeService(<span class="string">&quot;path/to/chromedriver&quot;</span>), options=chrome_options)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果要为 Selenium 指定 Chrome 浏览器的路径，使用 <code>binary_location</code> 属性 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[从指定位置启动浏览器](https://www.selenium.dev/zh-cn/documentation/webdriver/browsers/chrome/#%E4%BB%8E%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E5%90%AF%E5%8A%A8%E6%B5%8F%E8%A7%88%E5%99%A8)">[2]</span></a></sup></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.binary_location = <span class="string">&quot;D:\Tools\chrome-win64\chrome.exe&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="等待元素出现"><a href="#等待元素出现" class="headerlink" title="等待元素出现"></a>等待元素出现</h1><p>在使用 Selenium 和浏览器交互的过程中，经常会遇到元素未加载完成而与元素交互导致的失败。这种情况可以使用 <code>time.sleep()</code> 方法等待一段时间。但是这种等待时间无法确定多少合适。 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[等待](https://www.selenium.dev/zh-cn/documentation/webdriver/waits/)">[3]</span></a></sup></p>
<h2 id="Implicit-waits"><a href="#Implicit-waits" class="headerlink" title="Implicit waits"></a>Implicit waits</h2><p>Seleniu 也提供了 <code>Implicit waits</code> 机制。<strong>这是一个全局配置</strong>。默认值为 <code>0</code>。表示元素如果未出现，立即返回错误；如果配置了等待时间， <code>driver</code> 将会等待设置的时间，如果在配置的时间内元素依然未出现，则报错，如果在等待的时间内元素出现，程序立即执行，<em><strong>因此使用 Implicit waits 不会增加额外的等待时间</strong></em>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.implicitly_wait(<span class="number">2</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.selenium.dev/selenium/web/dynamic.html&#x27;</span>)</span><br><span class="line">driver.find_element(By.ID, <span class="string">&quot;adder&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">added = driver.find_element(By.ID, <span class="string">&quot;box0&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><em><strong>Implicit waits 和 Explicit waits 不要混用，否则会使等待时间变长</strong></em></p>
<h2 id="Explicit-waits"><a href="#Explicit-waits" class="headerlink" title="Explicit waits"></a>Explicit waits</h2><p>Explicit waits 是添加到代码中的循环，用于轮询应用程序以获取特点条件。如果在指定的超时值之前未满足条件，代码将会给出超时错误。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">revealed = driver.find_element(By.ID, <span class="string">&quot;revealed&quot;</span>)</span><br><span class="line">wait = WebDriverWait(driver, timeout=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element(By.ID, <span class="string">&quot;reveal&quot;</span>).click()</span><br><span class="line">wait.until(<span class="keyword">lambda</span> d : revealed.is_displayed())</span><br><span class="line"></span><br><span class="line">revealed.send_keys(<span class="string">&quot;Displayed&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html">可以使用的条件参考</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.selenium.dev/zh-cn/documentation/webdriver/elements/file_upload/">Selenium 文档</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.selenium.dev/zh-cn/documentation/webdriver/elements/file_upload/">元素</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.selenium.dev/zh-cn/documentation/webdriver/browsers/chrome/#%E4%BB%8E%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E5%90%AF%E5%8A%A8%E6%B5%8F%E8%A7%88%E5%99%A8">从指定位置启动浏览器</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.selenium.dev/zh-cn/documentation/webdriver/waits/">等待</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python set 用法</title>
    <url>/202406141646/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在 Python 中，<code>set</code> 是一种无序的、可变的集合数据类型，用于存储唯一的元素。它主要用于快速去重和集合运算（如交集、并集、差集等）。</p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python 3</li>
</ul>
<h1 id="set-基本操作"><a href="#set-基本操作" class="headerlink" title="set 基本操作"></a>set 基本操作</h1><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><p>可以使用花括号 <code>&#123;&#125;</code> 或 <code>set()</code> 函数来创建集合。</p>
<ul>
<li><p>使用花括号创建集合</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个包含一些元素的集合</span><br><span class="line">my_set = &#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">print(my_set)  # 输出: &#123;1, 2, 3, 4, 5&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>set()</code> 函数创建集合</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用 set() 函数从一个可迭代对象创建集合</span><br><span class="line">my_set = set([1, 2, 3, 4, 5])</span><br><span class="line">print(my_set)  # 输出: &#123;1, 2, 3, 4, 5&#125;</span><br><span class="line"></span><br><span class="line"># 创建一个空集合</span><br><span class="line">empty_set = set()</span><br><span class="line">print(empty_set)  # 输出: set()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="集合的基本操作"><a href="#集合的基本操作" class="headerlink" title="集合的基本操作"></a>集合的基本操作</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>使用 <code>add()</code> 方法向集合添加单个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_set = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">my_set.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(my_set)  <span class="comment"># 输出: &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><p>使用 <code>remove()</code> 方法移除集合中的指定元素，如果元素不存在会引发 <code>KeyError</code>。使用 <code>discard()</code> 方法移除元素，如果元素不存在不会引发异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_set = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">my_set.remove(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(my_set)  <span class="comment"># 输出: &#123;1, 3&#125;</span></span><br><span class="line"></span><br><span class="line">my_set.discard(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(my_set)  <span class="comment"># 输出: &#123;1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove 不存在的元素会引发 KeyError</span></span><br><span class="line"><span class="comment"># my_set.remove(4)  # KeyError: 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># discard 不存在的元素不会引发异常</span></span><br><span class="line">my_set.discard(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(my_set)  <span class="comment"># 输出: &#123;1&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="清空集合"><a href="#清空集合" class="headerlink" title="清空集合"></a>清空集合</h3><p>使用 <code>clear()</code> 方法清空集合中的所有元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_set = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">my_set.clear()</span><br><span class="line"><span class="built_in">print</span>(my_set)  <span class="comment"># 输出: set()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="集合的长度"><a href="#集合的长度" class="headerlink" title="集合的长度"></a>集合的长度</h3><p>使用 <code>len()</code> 函数获取集合中元素的个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_set = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(my_set))  <span class="comment"># 输出: 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><p>使用 <code>|</code> 运算符或 <code>union()</code> 方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 | 运算符</span></span><br><span class="line"><span class="built_in">print</span>(set1 | set2)  <span class="comment"># 输出: &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 union() 方法</span></span><br><span class="line"><span class="built_in">print</span>(set1.union(set2))  <span class="comment"># 输出: &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><p>使用 <code>&amp;</code> 运算符或 <code>intersection()</code> 方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 &amp; 运算符</span></span><br><span class="line"><span class="built_in">print</span>(set1 &amp; set2)  <span class="comment"># 输出: &#123;3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 intersection() 方法</span></span><br><span class="line"><span class="built_in">print</span>(set1.intersection(set2))  <span class="comment"># 输出: &#123;3&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h3><p>使用 <code>-</code> 运算符或 <code>difference()</code> 方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 - 运算符</span></span><br><span class="line"><span class="built_in">print</span>(set1 - set2)  <span class="comment"># 输出: &#123;1, 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 difference() 方法</span></span><br><span class="line"><span class="built_in">print</span>(set1.difference(set2))  <span class="comment"># 输出: &#123;1, 2&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="对称差集"><a href="#对称差集" class="headerlink" title="对称差集"></a>对称差集</h3><p>使用 <code>^</code> 运算符或 <code>symmetric_difference()</code> 方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ^ 运算符</span></span><br><span class="line"><span class="built_in">print</span>(set1 ^ set2)  <span class="comment"># 输出: &#123;1, 2, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 symmetric_difference() 方法</span></span><br><span class="line"><span class="built_in">print</span>(set1.symmetric_difference(set2))  <span class="comment"># 输出: &#123;1, 2, 4, 5&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="子集和超集"><a href="#子集和超集" class="headerlink" title="子集和超集"></a>子集和超集</h3><h4 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h4><p>使用 <code>issubset()</code> 方法检查一个集合是否为另一个集合的子集。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(set1.issubset(set2))  <span class="comment"># 输出: True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="超集"><a href="#超集" class="headerlink" title="超集"></a>超集</h4><p>使用 <code>issuperset()</code> 方法检查一个集合是否为另一个集合的超集。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(set2.issuperset(set1))  <span class="comment"># 输出: True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 执行 shell 命令</title>
    <url>/202301201542/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python3.10</li>
</ul>
<h1 id="Python-执行-shell-命令"><a href="#Python-执行-shell-命令" class="headerlink" title="Python 执行 shell 命令"></a>Python 执行 shell 命令</h1><h2 id="subprocess-模块"><a href="#subprocess-模块" class="headerlink" title="subprocess 模块"></a>subprocess 模块</h2><p><code>subprocess.check_output()</code> 执行一个外部命令并以Python字符串的形式获取执行结果 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[执行外部命令并获取它的输出](https://python3-cookbook-personal.readthedocs.io/zh_CN/latest/c13/p06_executing_external_command_and_get_its_output.html#id1)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">import subprocess</span><br><span class="line">out_bytes = subprocess.check_output([&#x27;netstat&#x27;,&#x27;-a&#x27;])</span><br></pre></td></tr></table></figure>
<p>如果你需要文本形式返回，加一个解码步骤即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">out_text = out_bytes.decode(&#x27;utf-8&#x27;)</span><br></pre></td></tr></table></figure>
<p>如果被执行的命令以非零码返回，就会抛出异常。 下面的例子捕获到错误并获取返回码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    out_bytes = subprocess.check_output([&#x27;cmd&#x27;,&#x27;arg1&#x27;,&#x27;arg2&#x27;])</span><br><span class="line">except subprocess.CalledProcessError as e:</span><br><span class="line">    out_bytes = e.output       # Output generated before error</span><br><span class="line">    code      = e.returncode   # Return code</span><br></pre></td></tr></table></figure>

<p>默认情况下，<code>check_output()</code> 仅仅返回输入到标准输出的值。 如果你需要同时收集标准输出和错误输出，使用 <code>stderr</code> 参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">out_bytes = subprocess.check_output([&#x27;cmd&#x27;,&#x27;arg1&#x27;,&#x27;arg2&#x27;],</span><br><span class="line">                                    stderr=subprocess.STDOUT)</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://python3-cookbook-personal.readthedocs.io/zh_CN/latest/c13/p06_executing_external_command_and_get_its_output.html#id1">执行外部命令并获取它的输出</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 用法小结及常见错误</title>
    <url>/202302271543/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Python3</li>
</ul>
<h1 id="字符串转换为变量名"><a href="#字符串转换为变量名" class="headerlink" title="字符串转换为变量名"></a>字符串转换为变量名</h1><h2 id="locals-方法"><a href="#locals-方法" class="headerlink" title="locals() 方法"></a>locals() 方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="number">666</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;str1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">locals</span>()[a]</span><br><span class="line"><span class="number">666</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="vars-方法"><a href="#vars-方法" class="headerlink" title="vars() 方法"></a>vars() 方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="number">666</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;str1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">vars</span>()[a]</span><br><span class="line"><span class="number">666</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="eval-方法"><a href="#eval-方法" class="headerlink" title="eval() 方法"></a>eval() 方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="number">666</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;str1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(a)</span><br><span class="line"><span class="number">666</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h1><p><code>yield</code> 指令和 <code>return</code> 相似，都是用来在函数中返回。使用 <code>yield</code> 关键字创建生成器函数时，生成器函数并不会在传统意义上 <code>返回</code>。相反，生成器函数在遇到 <code>yield</code> 语句时会暂停其执行，并返回一个值给调用者。生成器函数的状态会被保存，因此在下一次调用时，它可以从暂停的地方继续执行。</p>
<p><code>yield</code> 指令 <strong>将函数转换成生成器（<code>Generator</code>）</strong>，它在函数中产生一个值，然后暂停函数并保存其状态（下一次调用函数会从此状态恢复执行），再次恢复执行时再生成（返回）<code>yield</code> 的值。</p>
<p>每次调用生成器函数时，并不会立即执行，会创建一个新的生成器对象。</p>
<p>第一次使用 <code>next()</code> 或在 <code>for</code> 循环中开始迭代生成器时，生成器函数开始执行，直到遇到第一个 <code>yield</code> 语句。<code>yield</code> 会暂停生成器函数的执行，并将一个值返回给调用者。再次调用 <code>next()</code> 或继续迭代(<code>for</code>)时，生成器函数从上次暂停的 <code>yield</code> 处继续执行，直到遇到下一个 <code>yield</code> 语句或执行结束。</p>
<p>生成器函数在没有 <code>yield</code> 语句时结束执行，相当于隐式地在最后一个 <code>yield</code> 语句之后遇到 <code>return</code>。</p>
<p>当生成器函数结束时，进一步调用 <code>next()</code> 会引发 <code>StopIteration</code> 异常，表示生成器中的值已被全部生成。</p>
<p><code>yield</code> 有以下优点：</p>
<ul>
<li>能够以更高效的方式处理大量数据，因为它不需要一次性将所有数据存储在内存中。<strong>通过减少内存消耗，提高程序性能。</strong></li>
<li>它提供了一种新的方法来控制函数的执行流程，使得函数可以在任意点暂停和恢复。<strong>生成器函数在被暂停后(遇到 <code>yield</code>)不会继续执行，直到再次调用 <code>next()</code> 或通过迭代器进行迭代(<code>for</code>)。</strong></li>
</ul>
<h2 id="yield-读取大文本数据"><a href="#yield-读取大文本数据" class="headerlink" title="yield 读取大文本数据"></a>yield 读取大文本数据</h2><p>在处理大文本数据（如超过 10G）时，如果一次性读取所有文本内容，在可用内存较小的情况下可能出现内存不足导致程序执行失败。这时候可以考虑使用 <code>yield</code> 来批量加载数据。</p>
<p>定义如下函数读取文件内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">def read_large_file(file_path):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Generator function to read a large file line by line.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    with open(file_path, &#x27;r&#x27;) as file:</span><br><span class="line">        for line in file:</span><br><span class="line">            yield line</span><br></pre></td></tr></table></figure>

<p>使用以下方法使用大文本中的数据</p>
<ol>
<li><code>next</code> 方法。调用生成器函数(<code>read_large_file</code>)，会返回一个 Generator 对象，通过 <code>next()</code> 方法会迭代调用生成器的下一个值（<code>yield</code> 表达式的值） <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file_path = &#x27;large_file.txt&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">next 方法： 首先</span></span><br><span class="line">line = read_large_file(file_path)</span><br><span class="line"></span><br><span class="line">next(line)   # 返回第一行</span><br><span class="line">next(line)    # 返回第二行，以此类推可以读取所有行</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><code>for</code> 循环。调用生成器函数返回一个生成器对象，这个对象实现了迭代器协议。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">def read_large_file(file_path):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Generator function to read a large file line by line.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    with open(file_path, &#x27;r&#x27;) as file:</span><br><span class="line">        for line in file:</span><br><span class="line">            yield line</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Usage example</span></span><br><span class="line">file_path = &#x27;large_file.txt&#x27;</span><br><span class="line">for line in read_large_file(file_path):</span><br><span class="line">    print(line.strip())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="分批读取大文件中的数据"><a href="#分批读取大文件中的数据" class="headerlink" title="分批读取大文件中的数据"></a>分批读取大文件中的数据</h2><p>在处理大文件的过程中，如果需要批量多行读取文件内容，参考以下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">def read_file_in_chunks(file_path, chunk_size=1024):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Generator function to read a file in chunks.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    with open(file_path, &#x27;r&#x27;) as file:</span><br><span class="line">        while True:</span><br><span class="line">            chunk = file.readlines(chunk_size)</span><br><span class="line">            if not chunk:</span><br><span class="line">                break</span><br><span class="line">            for line in chunk:</span><br><span class="line">                yield line</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Usage example</span></span><br><span class="line">file_path = &#x27;large_file.txt&#x27;</span><br><span class="line">for line in read_file_in_chunks(file_path):</span><br><span class="line">    print(line.strip())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h1><p><code>enumerate</code> 是 Python 内置函数之一，用于遍历可迭代对象（如列表、元组或字符串）时获取元素和对应的索引。</p>
<p><strong>语法</strong>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">enumerate(iterable, start=0)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>iterable</code> : 任何可迭代对象（如列表、字符串、元组、文件对象等）。</li>
<li><code>start</code> : 索引的起始值，默认为 <code>0</code>。如果要让索引号从 <code>1</code> 开始，配置 <code>start=1</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例列表</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 enumerate 获取元素及其索引</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="keyword">for</span> index, fruit <span class="keyword">in</span> enumerate(fruits):</span></span><br><span class="line">...     print(index, fruit)</span><br><span class="line">... </span><br><span class="line">0 apple</span><br><span class="line">1 banana</span><br><span class="line">2 cherry</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 enumerate 获取元素及其索引，并将起始索引改为 1</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="keyword">for</span> index, fruit <span class="keyword">in</span> enumerate(fruits, start=1):</span></span><br><span class="line">...     print(index, fruit)</span><br><span class="line">... </span><br><span class="line">1 apple</span><br><span class="line">2 banana</span><br><span class="line">3 cherry</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 enumerate 获取文件中的行号及其内容</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; f = open(<span class="string">&#x27;temp_file&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="keyword">for</span> line_number, line <span class="keyword">in</span> enumerate(f):</span></span><br><span class="line">...     print(line_number, line)</span><br><span class="line">... </span><br><span class="line">0 85d37fac5cc284914b5d6f79982942b8/Y1iY3k1U.ts</span><br><span class="line"></span><br><span class="line">1 85d37fac5cc284914b5d6f79982942b8/Y1x0V8Rc.ts</span><br><span class="line"></span><br><span class="line">2 85d37fac5cc284914b5d6f79982942b8/Y22fhGiC.ts</span><br><span class="line"></span><br><span class="line">3 85d37fac5cc284914b5d6f79982942b8/Y3p95oau.ts</span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="NameError-name-‘null‘-is-not-defined"><a href="#NameError-name-‘null‘-is-not-defined" class="headerlink" title="NameError: name ‘null‘ is not defined"></a>NameError: name ‘null‘ is not defined</h2><p>使用 <code>eval</code> 将 <code>string</code> 转化成 <code>dict</code> 时出错，经过排查，发现 <code>string</code> 数据中包含 <code>null</code>,在转换时就会报错: <code>NameError: name ‘null‘ is not defined</code></p>
<p><strong>解决方法</strong></p>
<p>使用 <code>json</code> 进行转换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    response_dict = eval(response)</span><br><span class="line">except NameError:</span><br><span class="line">    response_dict = json.loads(str(response.decode()))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>向 Telegram 发送消息</title>
    <url>/202306011739/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>Python 3</li>
</ul>
<h1 id="在-Telegram-中生成-Bot"><a href="#在-Telegram-中生成-Bot" class="headerlink" title="在 Telegram 中生成 Bot"></a>在 Telegram 中生成 Bot</h1><ol>
<li><p>首先在 telegram 中搜索 <code>@BotFather</code>，和其对话，根据提示创建 <strong>机器人</strong>，记录下生成的 <code>token</code> 信息<br><img src="https://i.csms.tech/img_164.png"><br><img src="https://i.csms.tech/img_165.png"></p>
</li>
<li><p>创建新的 Channel 或者 Group 或者将刚刚新建的 Bot 加入已有的 Channel&#x2F;Group。</p>
</li>
<li><p>获取 ChatGroup ID，可以使用以下方法之一</p>
<ol>
<li><p>添加机器人 <code>@get_id_bot</code> 到 Channel，会自动显示 <code>Chat ID</code><br><img src="https://i.csms.tech/img_167.png"></p>
</li>
<li><p>使用以下代码获取</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import requests</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = requests.get(f<span class="string">&#x27;https://api.telegram.org/bot&#123;token&#125;/getUpdates&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; data = response.json()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; chat_id = data[<span class="string">&#x27;result&#x27;</span>][0][<span class="string">&#x27;message&#x27;</span>][<span class="string">&#x27;chat&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; chat_id</span></span><br><span class="line">-992754669</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h1 id="使用-curl-向-telegram-发送消息"><a href="#使用-curl-向-telegram-发送消息" class="headerlink" title="使用 curl 向 telegram 发送消息"></a>使用 curl 向 telegram 发送消息</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v <span class="string">&quot;https://api.telegram.org/bot&#123;token&#125;/sendMessage?text=sa&amp;chat_id=-992754669&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET /bot&#123;token&#125;/sendMessage?text=sa&amp;chat_id=-992754669 HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: api.telegram.org</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 200 OK</span></span><br><span class="line">&lt; Server: nginx/1.18.0</span><br><span class="line">&lt; Date: Fri, 02 Jun 2023 03:03:58 GMT</span><br><span class="line">&lt; Content-Type: application/json</span><br><span class="line">&lt; Content-Length: 276</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Strict-Transport-Security: max-age=31536000; includeSubDomains; preload</span><br><span class="line">&lt; Access-Control-Allow-Origin: *</span><br><span class="line">&lt; Access-Control-Allow-Methods: GET, POST, OPTIONS</span><br><span class="line">&lt; Access-Control-Expose-Headers: Content-Length,Content-Type,Date,Server,Connection</span><br><span class="line">&lt; </span><br><span class="line">* Connection #0 to host api.telegram.org left intact</span><br><span class="line">&#123;&quot;ok&quot;:true,&quot;result&quot;:&#123;&quot;message_id&quot;:12,&quot;from&quot;:&#123;&quot;id&quot;:5683237521,&quot;is_bot&quot;:true,&quot;first_name&quot;:&quot;AlertManager&quot;,&quot;username&quot;:&quot;AlertManager_Bot&quot;&#125;,&quot;chat&quot;:&#123;&quot;id&quot;:-992754669,&quot;title&quot;:&quot;AlertManager Test&quot;,&quot;type&quot;:&quot;group&quot;,&quot;all_members_are_administrators&quot;:true&#125;,&quot;date&quot;:1685675038,&quot;text&quot;:&quot;sa&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用-python-向-telegram-发送消息"><a href="#使用-python-向-telegram-发送消息" class="headerlink" title="使用 python 向 telegram 发送消息"></a>使用 python 向 telegram 发送消息</h1><h2 id="使用-requests-库"><a href="#使用-requests-库" class="headerlink" title="使用 requests 库"></a>使用 requests 库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import requests</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = requests.get(f<span class="string">&#x27;https://api.telegram.org/bot&#123;token&#125;/sendMessage?text=sa&amp;chat_id=-992754669&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response.text</span></span><br><span class="line">&#x27;&#123;&quot;ok&quot;:true,&quot;result&quot;:&#123;&quot;message_id&quot;:13,&quot;from&quot;:&#123;&quot;id&quot;:5683237521,&quot;is_bot&quot;:true,&quot;first_name&quot;:&quot;AlertManager&quot;,&quot;username&quot;:&quot;AlertManager_Bot&quot;&#125;,&quot;chat&quot;:&#123;&quot;id&quot;:-992754669,&quot;title&quot;:&quot;AlertManager Test&quot;,&quot;type&quot;:&quot;group&quot;,&quot;all_members_are_administrators&quot;:true&#125;,&quot;date&quot;:1685675769,&quot;text&quot;:&quot;sa&quot;&#125;&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用-telegram-库"><a href="#使用-telegram-库" class="headerlink" title="使用 telegram 库"></a>使用 telegram 库</h2><p>需要安装 <code>python-telegram-bot</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install --upgrade python-telegram-bot</span><br></pre></td></tr></table></figure>
<p>发送消息代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import telegram</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import asyncio</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; bot = telegram.Bot(token=<span class="string">&#x27;5683231111:AAHzaGf0oRg8A&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; async def send_telegram_message():</span></span><br><span class="line">...     response = await bot.send_message(chat_id=-992754669, text=&quot;la&quot;)</span><br><span class="line">...     print(response)</span><br><span class="line">... </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; loop = asyncio.get_event_loop()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; loop.run_until_complete(send_telegram_message())</span></span><br><span class="line">Message(channel_chat_created=False, chat=Chat(api_kwargs=&#123;&#x27;all_members_are_administrators&#x27;: True&#125;, id=-992754669, title=&#x27;AlertManager Test&#x27;, type=&lt;ChatType.GROUP&gt;), date=datetime.datetime(2023, 6, 2, 3, 39, 16, tzinfo=datetime.timezone.utc), delete_chat_photo=False, from_user=User(first_name=&#x27;AlertManager&#x27;, id=5683237521, is_bot=True, username=&#x27;MS_AlertManager_Bot&#x27;), group_chat_created=False, message_id=14, supergroup_chat_created=False, text=&#x27;la&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果需要在非异步环境中（例如 Django 试图函数） 运行以上异步代码，会报错： <code>RuntimeError: There is no current event loop in thread &#39;Thread-1&#39;</code>。需要特殊处理，可以使用 <code>asyncio.run()</code> 函数来运行异步代码，它可以在非异步环境中创建一个新的事件循环并运行异步函数。</p>
<p>Django 视图中参考代码如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">def send_message_to_tg(chat_id: int, text: str):</span><br><span class="line">    &#x27;&#x27;&#x27; 发送消息到 tg&#x27;&#x27;&#x27;</span><br><span class="line">    bot = telegram.Bot(token=tg_bot_token)</span><br><span class="line"></span><br><span class="line">    async def send_telegram_message():</span><br><span class="line">        response = await bot.send_message(chat_id=chat_id, text=text)</span><br><span class="line">        print(response)</span><br><span class="line">    # loop = asyncio.get_event_loop()</span><br><span class="line">    # loop.run_until_complete(send_telegram_message()) </span><br><span class="line">    asyncio.run(send_telegram_message())</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python 虚拟环境</title>
    <url>/202208161730/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Python 3.10</li>
</ul>
<h3 id="虚拟环境创建步骤"><a href="#虚拟环境创建步骤" class="headerlink" title="虚拟环境创建步骤"></a>虚拟环境创建步骤</h3><p>假定项目名为 <code>project01</code>, 目录名为 <code>project01</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir project01</span><br><span class="line">cd project01</span><br><span class="line">python3 -m venv .</span><br></pre></td></tr></table></figure>
<p>以上命令会在目录 <code>project01</code> 中创建虚拟环境，查看当前目录，会产生以下目录和文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">bin  include  lib  lib64  pyvenv.cfg</span><br></pre></td></tr></table></figure>
<p>观察 <code>bin</code> 目录的内容，里面有 <code>python3</code>、<code>pip3</code> 等可执行文件，实际上是链接到 <code>Python</code> 系统目录的软链接。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l bin/</span></span><br><span class="line">total 36</span><br><span class="line">-rw-r--r-- 1 root root 1991 Aug 16 17:35 activate</span><br><span class="line">-rw-r--r-- 1 root root  917 Aug 16 17:35 activate.csh</span><br><span class="line">-rw-r--r-- 1 root root 2059 Aug 16 17:35 activate.fish</span><br><span class="line">-rw-r--r-- 1 root root 9033 Aug 16 17:35 Activate.ps1</span><br><span class="line">-rwxr-xr-x 1 root root  234 Aug 16 17:35 pip</span><br><span class="line">-rwxr-xr-x 1 root root  234 Aug 16 17:35 pip3</span><br><span class="line">-rwxr-xr-x 1 root root  234 Aug 16 17:35 pip3.10</span><br><span class="line">lrwxrwxrwx 1 root root   10 Aug 16 17:35 python -&gt; python3.10</span><br><span class="line">lrwxrwxrwx 1 root root   10 Aug 16 17:35 python3 -&gt; python3.10</span><br><span class="line">lrwxrwxrwx 1 root root   25 Aug 16 17:35 python3.10 -&gt; /usr/local/bin/python3.10</span><br></pre></td></tr></table></figure>

<p><code>Linux</code> 环境使用以下命令激活虚拟环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> bin/activate</span></span><br><span class="line">(project01) [root@localhost project01]#</span><br></pre></td></tr></table></figure>
<p>命令提示符变了，有个 <code>(project01)</code> 前缀，表示当前环境是一个名为 <code>project01</code> 的 Python 环境。<br>在此虚拟环境中安装包，都会被安装到 <code>(project01)</code> 环境下，具体目录为 <code>project01/lib/python3.10/site-packages/</code>，系统 Python 环境不受任何影响，也就是说，<code>project01</code> 这个环境是专门针对 <code>project01</code> 应用（项目）创建的，和系统 python 环境或其他应用互不影响。  </p>
<p>要退出当前虚拟环境，可以执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<p>退出虚拟环境后，再执行如 <code>pip3 install</code> 命令安装的包，会安装到系统 Python 环境。<br>完全可以针对每个应用创建独立的Python运行环境，这样就可以对每个应用的Python环境进行隔离。</p>
<p>如果不再使用某个 <code>venv</code> ，例如 <code>project01</code>，删除它也很简单。首先确认该 <code>venv</code> 没有处于 <code>激活</code> 状态，然后直接把整个目录 <code>project01</code> 删掉就行。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3 安装</title>
    <url>/202306161337/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7 6.3.8-1.el7.elrepo.x86_64</li>
<li>Python 3.10.12</li>
</ul>
<h1 id="编译安装步骤"><a href="#编译安装步骤" class="headerlink" title="编译安装步骤"></a>编译安装步骤</h1><p>安装相关依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development tools&quot;</span><br><span class="line"></span><br><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line"></span><br><span class="line">yum install libffi-devel -y</span><br></pre></td></tr></table></figure>

<p>Centos 7 默认安装的 <code>openssl</code> 版本太低（<code>1.0.2k-fips</code>），无法满足 <code>Python 3.10.12</code> 对 SSL 的支持，需要 <a href="https://csms.tech/202306081314/#openssl-版本升级">首先升级 OpenSSL 版本</a>。否则编译安装后使用 SSL 相关功能会报错： <code>ImportError: No module named _ssl</code></p>
<p>下载安装包并编译安装。使用 <code>--with-openssl=/usr/local/openssl/</code> 指定新版本 <code>openssl</code> 位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.10.12/Python-3.10.12.tgz</span><br><span class="line"></span><br><span class="line">tar -xf Python-3.10.12.tgz</span><br><span class="line"></span><br><span class="line">cd Python-3.10.12</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/python3 --with-openssl=/usr/local/openssl/</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/python3/bin/python3 /usr/bin/</span><br><span class="line">ln -s /usr/local/python3/bin/pip3 /usr/bin/</span><br></pre></td></tr></table></figure>

<p>安装完成后，安装目录为 <code>/usr/local/python3</code>，要迁移到其他机器使用，可以安装相关依赖后，将安装目录拷贝到其他机器即可正常使用。<a href="/202302041721/" title="此版本编译后的文件下载链接">此版本编译后的文件下载链接</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>linux rabbitmq</title>
    <url>/202304261014/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7 3.10.0-1160.45.1.el7</li>
<li>RabbitMQ 3.9.10</li>
</ul>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="RabbitMQ-启动失败"><a href="#RabbitMQ-启动失败" class="headerlink" title="RabbitMQ 启动失败"></a>RabbitMQ 启动失败</h2><p>使用命令启动，报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/sbin/rabbitmq-server -v</span></span><br><span class="line">2023-04-26 10:02:47.621248+08:00 [noti] &lt;0.146.0&gt; Protocol &#x27;inet_tcp&#x27;: register/listen error: ehostunreach</span><br><span class="line">2023-04-26 10:02:47.621248+08:00 [noti] &lt;0.146.0&gt; </span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;     supervisor: &#123;local,net_sup&#125;</span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;     errorContext: start_error</span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;     reason: &#123;&#x27;EXIT&#x27;,nodistribution&#125;</span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;     offender: [&#123;pid,undefined&#125;,</span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;                &#123;id,net_kernel&#125;,</span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;                &#123;mfargs,&#123;net_kernel,start_link,</span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;                                    [[rabbit_prelaunch_21812@localhost,</span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;                                      shortnames],</span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;                                     false,net_sup_dynamic]&#125;&#125;,</span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;                &#123;restart_type,permanent&#125;,</span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;                &#123;shutdown,2000&#125;,</span><br><span class="line">2023-04-26 10:02:47.626643+08:00 [erro] &lt;0.143.0&gt;                &#123;child_type,worker&#125;]</span><br></pre></td></tr></table></figure>

<p>关键错误信息 <code>Protocol &#39;inet_tcp&#39;: register/listen error: ehostunreach</code>，根据提示，可能是某个地址不可达，rabbitmq 启动时需要连接 epmd ，默认端口为 4369，在本地测试连接此端口，发现不通 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Protocol 'inet_tcp': register/listen error: econnrefused](https://stackoverflow.com/questions/51616600/ssh-rabbitmq-protocol-inet-tcp-register-listen-error-econnrefused)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v 127.0.0.1:4369</span></span><br><span class="line">* About to connect() to 127.0.0.1 port 4369 (#0)</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* No route to host</span><br><span class="line">* Failed connect to 127.0.0.1:4369; No route to host</span><br><span class="line">* Closing connection 0</span><br><span class="line">curl: (7) Failed connect to 127.0.0.1:4369; No route to host</span><br></pre></td></tr></table></figure>
<p>根据输出的错误可知，是因为 <code>127.0.0.1</code> 无法连接，检查 iptables 防火墙策略，发现未允许回环网卡访问，在 iptables 中添加以下规则允许回环网卡访问</p>
<figure class="highlight shell"><figcaption><span>/etc/sysconfig/iptables</span></figcaption><table><tr><td class="code"><pre><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD DROP [0:0]</span><br><span class="line">:OUTPUT ACCEPT [9020367577:7010759848370]</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br></pre></td></tr></table></figure>
<p>允许回环网卡访问后，重新测试连接 epmd ，可以正常连接，重新启动 rabbitmq-server 正常。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v 127.0.0.1:4369</span></span><br><span class="line">* About to connect() to 127.0.0.1 port 4369 (#0)</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 4369 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: 127.0.0.1:4369</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">* Empty reply from server</span></span><br><span class="line">* Connection #0 to host 127.0.0.1 left intact</span><br><span class="line">curl: (52) Empty reply from server</span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://stackoverflow.com/questions/51616600/ssh-rabbitmq-protocol-inet-tcp-register-listen-error-econnrefused">Protocol 'inet_tcp': register/listen error: econnrefused</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Rancher 安装及使用</title>
    <url>/202210071716/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>centos7 3.10.0</li>
<li>kubernetes Server Version: v1.21.2</li>
<li>Helm 3.10.0</li>
<li>Rancher 2.6</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://docs.ranchermanager.rancher.io/zh/pages-for-subheaders/install-upgrade-on-a-kubernetes-cluster">官方安装文档</a></p>
<h2 id="安装-Helm"><a href="#安装-Helm" class="headerlink" title="安装 Helm"></a>安装 Helm</h2><p><a href="https://helm.sh/docs/intro/install/">安装文档官网参考</a></p>
<a href="/202210071543/" title="helm 安装及使用">helm 安装及使用</a>

<h2 id="安装-Ingress-nginx-controller"><a href="#安装-Ingress-nginx-controller" class="headerlink" title="安装 Ingress-nginx-controller"></a>安装 Ingress-nginx-controller</h2><p><a href="https://kubernetes.github.io/ingress-nginx/deploy/#quick-start">安装文档官网参考</a></p>
<a href="/202209301604/" title="ingress-nginx 安装配置">ingress-nginx 安装配置</a>



<h2 id="添加-Helm-Chart-仓库"><a href="#添加-Helm-Chart-仓库" class="headerlink" title="添加 Helm Chart 仓库"></a>添加 Helm Chart 仓库</h2><p>添加最新版本，生产环境建议使用稳定版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm repo add rancher-latest https://releases.rancher.com/server-charts/latest</span><br></pre></td></tr></table></figure>

<h2 id="为-Rancher-创建命名空间"><a href="#为-Rancher-创建命名空间" class="headerlink" title="为 Rancher 创建命名空间"></a>为 Rancher 创建命名空间</h2><p>你需要定义一个 Kubernetes 命名空间，用于安装由 Chart 创建的资源。这个命名空间的名称为 <code>cattle-system</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create namespace cattle-system</span><br></pre></td></tr></table></figure>

<h2 id="安装-cert-manager"><a href="#安装-cert-manager" class="headerlink" title="安装 cert-manager"></a>安装 cert-manager</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.7.1/cert-manager.crds.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 Jetstack Helm 仓库</span></span><br><span class="line">helm repo add jetstack https://charts.jetstack.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新本地 Helm Chart 仓库缓存</span></span><br><span class="line">helm repo update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 cert-manager Helm Chart</span></span><br><span class="line">helm install cert-manager jetstack/cert-manager \</span><br><span class="line">  --namespace cert-manager \</span><br><span class="line">  --create-namespace \</span><br><span class="line">  --version v1.7.1</span><br></pre></td></tr></table></figure>
<p>安装完 <code>cert-manager</code> 后，你可以通过检查 <code>cert-manager</code> 命名空间中正在运行的 <code>Pod</code> 来验证它是否已正确部署：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -n cert-manager</span></span><br><span class="line">NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">cert-manager-5b97785fbd-vvscn             1/1     Running   0          77s</span><br><span class="line">cert-manager-cainjector-c8657d84f-6b8qr   1/1     Running   0          77s</span><br><span class="line">cert-manager-webhook-8564679744-hjgkx     1/1     Running   0          77s</span><br></pre></td></tr></table></figure>
<h2 id="通过-Helm-安装-Rancher"><a href="#通过-Helm-安装-Rancher" class="headerlink" title="通过 Helm 安装 Rancher"></a>通过 Helm 安装 Rancher</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm install rancher rancher-stable/rancher --namespace cattle-system \</span><br><span class="line">     --set hostname=rancher.my.com --set bootstrapPassword=admin \</span><br><span class="line">     --set ingress.ingressClassName=nginx</span><br></pre></td></tr></table></figure>
<p>安装成功后，输出结果如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME: rancher</span><br><span class="line">LAST DEPLOYED: Wed Oct 12 10:22:25 2022</span><br><span class="line">NAMESPACE: cattle-system</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">Rancher Server has been installed.</span><br><span class="line"></span><br><span class="line">NOTE: Rancher may take several minutes to fully initialize. Please standby while Certificates are being issued, Containers are started and the Ingress rule comes up.</span><br><span class="line"></span><br><span class="line">Check out our docs at https://rancher.com/docs/</span><br><span class="line"></span><br><span class="line">If you provided your own bootstrap password during installation, browse to https://rancher.my.com to get started.</span><br><span class="line"></span><br><span class="line">If this is the first time you installed Rancher, get started by running this command and clicking the URL it generates:</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">echo https://rancher.my.com/dashboard/?setup=$(kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=&#x27;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#x27;)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">To get just the bootstrap password on its own, run:</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=&#x27;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#123;&#123; &quot;\n&quot; &#125;&#125;&#x27;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Happy Containering!</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据提示，浏览器中访问 <code>https://rancher.my.com/dashboard/?setup=admin</code>，正常情况下，显示如下页面<br><img src="https://i.csms.tech/img_62.png"></p>
<p>根据页面提示，保持密码，登陆。</p>
<span id="more"></span>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="helm-版本不支持最新的-kubernetes-版本"><a href="#helm-版本不支持最新的-kubernetes-版本" class="headerlink" title="helm 版本不支持最新的 kubernetes 版本"></a>helm 版本不支持最新的 kubernetes 版本</h2><p>使用 <code>helm</code> 命令报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm install rancher rancher-stable/rancher --namespace cattle-system --<span class="built_in">set</span> hostname=rancher.my.org --<span class="built_in">set</span> bootstrapPassword=admin</span></span><br><span class="line">Error: INSTALLATION FAILED: chart requires kubeVersion: &lt; 1.25.0-0 which is incompatible with Kubernetes v1.25.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最新版本 <code>helm</code> 不支持最新版本的 <code>Kubernetes</code>，需按照 <code>helm</code> 提示使用 <a href="https://helm.sh/zh/docs/topics/version_skew/">相应版本</a></p>
<h2 id="Error-INSTALLATION-FAILED-execution-error-at-rancher-x2F-templates-x2F-validate-psp-install-yaml-4-5-The-target-cluster-does-not-have-the-PodSecurityPolicy-API-resource-Please-disable-PSPs-in-this-chart-before-proceeding"><a href="#Error-INSTALLATION-FAILED-execution-error-at-rancher-x2F-templates-x2F-validate-psp-install-yaml-4-5-The-target-cluster-does-not-have-the-PodSecurityPolicy-API-resource-Please-disable-PSPs-in-this-chart-before-proceeding" class="headerlink" title="Error: INSTALLATION FAILED: execution error at (rancher&#x2F;templates&#x2F;validate-psp-install.yaml:4:5): The target cluster does not have the PodSecurityPolicy API resource. Please disable PSPs in this chart before proceeding."></a>Error: INSTALLATION FAILED: execution error at (rancher&#x2F;templates&#x2F;validate-psp-install.yaml:4:5): The target cluster does not have the PodSecurityPolicy API resource. Please disable PSPs in this chart before proceeding.</h2><h3 id="环境信息-1"><a href="#环境信息-1" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>centos7 5.4.242-1</li>
<li>kubernetes v1.25.4</li>
<li>helm v3.11.3</li>
<li>rancher v2.7</li>
</ul>
<p>执行以下命令安装 rancher，结果报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm install rancher rancher-latest/rancher \</span></span><br><span class="line"><span class="language-bash">                --namespace cattle-system \</span></span><br><span class="line"><span class="language-bash">                --<span class="built_in">set</span> hostname=rancher.my.com \</span></span><br><span class="line"><span class="language-bash">                --<span class="built_in">set</span> bootstrapPassword=admin \</span></span><br><span class="line"><span class="language-bash">                --<span class="built_in">set</span> ingress.ingressClassName=nginx</span></span><br><span class="line">Error: INSTALLATION FAILED: execution error at (rancher/templates/validate-psp-install.yaml:4:5): The target cluster does not have the PodSecurityPolicy API resource. Please disable PSPs in this chart before proceeding        </span><br></pre></td></tr></table></figure>
<p>对于 Kubernetes 版本等于或高于 1.25 的安装，需要添加选项 <code>--set global.cattle.psp.enabled=false</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[The target cluster does not have the PodSecurityPolicy API resource](https://github.com/rancher/rancher/issues/41295)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm install rancher rancher-latest/rancher \</span></span><br><span class="line"><span class="language-bash">                --namespace cattle-system \</span></span><br><span class="line"><span class="language-bash">                --<span class="built_in">set</span> hostname=rancher.my.com \</span></span><br><span class="line"><span class="language-bash">                --<span class="built_in">set</span> bootstrapPassword=admin \</span></span><br><span class="line"><span class="language-bash">                --<span class="built_in">set</span> ingress.ingressClassName=nginx \</span></span><br><span class="line"><span class="language-bash">                --<span class="built_in">set</span> global.cattle.psp.enabled=<span class="literal">false</span></span></span><br></pre></td></tr></table></figure>

<h2 id="Rancher-中对-Pod-执行-Execute-Shell-时无法连接到容器"><a href="#Rancher-中对-Pod-执行-Execute-Shell-时无法连接到容器" class="headerlink" title="Rancher 中对 Pod 执行 Execute Shell 时无法连接到容器"></a>Rancher 中对 Pod 执行 Execute Shell 时无法连接到容器</h2><p>Kubernetes 集群开启防火墙后，在 Rancher 中想通过 <code>Execute Shell</code> 进入 Pod 中的容器，但是一直无法连接到容器。关闭集群 iptables 防火墙后可以正常连接，可以确定问题出在 iptables 防火墙规则，为了定位到需要放通哪个源及端口，可以通过 <a href="https://csms.tech/202210241051/#配置-iptables-记录日志">iptables 的 <strong>日志功能</strong> 进行定位</a>。</p>
<ol>
<li>本示例中，iptables 防火墙的 <code>filter</code> 表的 <code>INPUT</code> 链的默认规则为 <code>DROP</code>，为了捕获最终被 <code>DROP</code> 的数据包，在 iptables 的 <code>filter</code> 表的 <code>INPUT</code> 链的最后添加记录日志的规则 <figure class="highlight shell"><figcaption><span>/etc/sysconfig/iptables</span></figcaption><table><tr><td class="code"><pre><span class="line">-A INPUT -j LOG --log-prefix &quot;iptables-input-DROP&quot;</span><br></pre></td></tr></table></figure></li>
<li>规则生效后，检查系统日志 <code>/var/log/messages</code>，看到了以下被 <code>DROP</code> 的数据包信息 <figure class="highlight shell"><figcaption><span>/var/log/messages</span></figcaption><table><tr><td class="code"><pre><span class="line">iptables-input-DROPIN=cni0 SRC=10.244.0.5 DST=172.31.29.60 PROTO=TCP SPT=59196 DPT=6443 WINDOW=26733 RES=0x00 SYN URGP=0 </span><br><span class="line">iptables-input-DROPIN=cni0 SRC=10.244.0.5 DST=172.31.29.60 PROTO=TCP SPT=59196 DPT=6443 WINDOW=26733 RES=0x00 SYN URGP=0</span><br></pre></td></tr></table></figure>
从以上数据包中可以看到，数据包流经的网卡为 <code>cni0</code>，源 IP 为 <code>10.244.0.5</code>，目的 IP 为 <code>172.31.29.60</code>，目的端口为 <code>6443/tcp</code>。继续查看源 IP ，发现其为 <code>cattle-cluster-agent</code>，这是 Rancher 在集群中的 Agent  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A -o wide | grep 10.244.0.5</span></span><br><span class="line">cattle-system         cattle-cluster-agent-7c7dd4b97f-9wcbh   1/1     Running   0          57d   10.244.0.5     master   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>
由此可以看出，在开启了 iptables 防火墙后，是因为 <code>cattle-cluster-agent</code> 无法访问集群的 API Server 端口 <code>6443/tcp</code>，从而导致 Rancher 无法通过其 Agent 连接到 Pod 中的容器。在 iptables 中添加防火墙规则允许此类数据包通过，开启 iptables 后 Rancher 可正常连接到 Pod 中的容器 <figure class="highlight shell"><figcaption><span>/etc/sysconfig/iptables</span></figcaption><table><tr><td class="code"><pre><span class="line">-A INPUT -s 10.244.0.0/16 -p tcp -m multiport --dports 6443 -j ACCEPT -m comment --comment &quot;for kubernetes API Server from Rancher Agent&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Cluster-agent-is-not-connected"><a href="#Cluster-agent-is-not-connected" class="headerlink" title="Cluster agent is not connected"></a>Cluster agent is not connected</h2><p>Rancher 管理的集群状态 <code>Unavailable</code>，Rancher 显示的原因为 <code>Cluster agent is not connected</code><br><img src="https://i.csms.tech/img_186.png"></p>
<p>Rancher Server 通过和 Kubernetes 集群中部署的 Rancher Agent (<code>cattle-cluster-agent</code>) 互相通信来获取集群状态及对集群进行操作，Rancher Agent (<code>cattle-cluster-agent</code>) 需要向 Rancher Server 上报心跳信息以使 Rancher Server 知道集群的状态。这个错误出现意味这 Rancher Server 和 Rancher Agent 之间的通信存在问题。<strong>Rancher Server 和 Rancher Agent 不直接通过固定端口通信，Rancher Server 和 Kubernetes 只需要和 Kubernetes API Server 通信，Rancher Agent 需要访问 Rancher Server 以上报心跳及集群状态信息</strong></p>
<p>要定位此问题原因，首先检查 Rancher Agent (<code>cattle-cluster-agent</code>) 的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -A -o wide | grep -i agent</span></span><br><span class="line">cattle-fleet-system   fleet-agent-5b5ddb87d-znc8t               1/1     Running            0          80d     10.244.9.222    work1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">cattle-system         cattle-cluster-agent-79dff8f5d-qnvqn      0/1     CrashLoopBackOff   4          107s    10.244.8.12     work2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">cattle-system         cattle-cluster-agent-79dff8f5d-td8tq      0/1     CrashLoopBackOff   3          107s    10.244.16.12    work4   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs -n cattle-system         cattle-cluster-agent-79dff8f5d-qnvqn</span></span><br><span class="line">INFO: Environment: CATTLE_ADDRESS=10.244.8.12 CATTLE_CA_CHECKSUM= CATTLE_CLUSTER=true CATTLE_CLUSTER_AGENT_PORT=tcp://10.1.134.43:80 CATTLE_CLUSTER_AGENT_PORT_443_TCP=tcp://10.1.134.43:443 CATTLE_CLUSTER_AGENT_PORT_443_TCP_ADDR=10.1.134.43 CATTLE_CLUSTER_AGENT_PORT_443_TCP_PORT=443 CATTLE_CLUSTER_AGENT_PORT_443_TCP_PROTO=tcp CATTLE_CLUSTER_AGENT_PORT_80_TCP=tcp://10.1.134.43:80 CATTLE_CLUSTER_AGENT_PORT_80_TCP_ADDR=10.1.134.43 CATTLE_CLUSTER_AGENT_PORT_80_TCP_PORT=80 CATTLE_CLUSTER_AGENT_PORT_80_TCP_PROTO=tcp CATTLE_CLUSTER_AGENT_SERVICE_HOST=10.1.134.43 CATTLE_CLUSTER_AGENT_SERVICE_PORT=80 CATTLE_CLUSTER_AGENT_SERVICE_PORT_HTTP=80 CATTLE_CLUSTER_AGENT_SERVICE_PORT_HTTPS_INTERNAL=443 CATTLE_CLUSTER_REGISTRY= CATTLE_FEATURES=embedded-cluster-api=false,fleet=false,monitoringv1=false,multi-cluster-management=false,multi-cluster-management-agent=true,provisioningv2=false,rke2=false CATTLE_INGRESS_IP_DOMAIN=sslip.io CATTLE_INSTALL_UUID=c9a0cc09-dc90-45eb-8bd9-d6344ffddc88 CATTLE_INTERNAL_ADDRESS= CATTLE_IS_RKE=false CATTLE_K8S_MANAGED=true CATTLE_NODE_NAME=cattle-cluster-agent-79dff8f5d-qnvqn CATTLE_SERVER=https://rancher.test.com CATTLE_SERVER_VERSION=v2.7.1</span><br><span class="line">INFO: Using resolv.conf: nameserver 10.1.0.10 search cattle-system.svc.cluster.local svc.cluster.local cluster.local us-west-1.compute.internal options ndots:5</span><br><span class="line">ERROR: https://rancher.test.com/ping is not accessible (The requested URL returned error: 403)</span><br></pre></td></tr></table></figure>
<p>从 Rancher Agent (<code>cattle-cluster-agent</code>) 的日志中可以看出，Rancher Agent (<code>cattle-cluster-agent</code>) 无法访问 Rancher Server (<code>https://rancher.test.com/ping</code>) 以上报心跳，请求结果为 <code>403</code>。</p>
<p>本案例中是因为 Rancher Server 的访问域名有白名单限制，将 Kubernetes 集群中的节点添加到 Rancher Server 的域名加白后恢复正常。</p>
<h2 id="certificate-is-valid-for"><a href="#certificate-is-valid-for" class="headerlink" title="certificate is valid for"></a>certificate is valid for</h2><p>Rancher 管理的集群状态 <code>Unavailable</code>，Rancher 显示的原因为 <code>Cluster agent is not connected</code></p>
<p>检查集群上的 <code>cattle-cluster-agent</code> 日志。报错如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">level=fatal msg=&quot;looking up cattle-system/cattle ca/token: failed to find service account cattle-system/cattle: Get \&quot;https://10.1.0.1:443/api/v1/namespaces/cattle-system/serviceaccounts/cattle\&quot;: x509: certificate is valid for 10.96.0.1, 172.31.16.114, 54.67.95.96, not 10.1.0.1&quot;</span><br></pre></td></tr></table></figure>

<p>这个错误信息表明，<code>kube-apiserver</code> 的证书中，没有签发给 IP <code>10.1.0.1</code>，此 IP 一般为 <code>kubernetes</code> 的 <code>service</code> 的 IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get services</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.1.0.1     &lt;none&gt;        443/TCP   370d</span><br></pre></td></tr></table></figure>

<p>因此要解决此问题，只需要更新 <code>kube-apiserver</code> 的证书，<a href="https://csms.tech/202209121102/#集群之外的服务器使用-kubectl-报错">参考文档进行更新</a></p>
<h1 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h1><h2 id="权限管理配置"><a href="#权限管理配置" class="headerlink" title="权限管理配置"></a>权限管理配置</h2><h3 id="配置只读-Role"><a href="#配置只读-Role" class="headerlink" title="配置只读 Role"></a>配置只读 Role</h3><p>本示例在 Rancher 上配置有对 Pod 只读权限的 Role，确保绑定了 Role 的用户可以通过 Rancher 读取到 Pod 信息，可以 <code>exec</code> 到 Pod，查看 Pod 日志，无其他 <strong>修改</strong> 权限。</p>
<ol>
<li><p>在 Rancher 上创建具有对 Pod 只读权限的 Role，本示例中为其命名 <code>PodReadOnlyRole</code></p>
<p> 在全局面板中进入 <code>Users &amp; Authentication</code>，选择 <code>Roles</code><br> <img src="https://i.csms.tech/img_87.png"><br> 选择 <code>Project/Namespaces</code><br> <img src="https://i.csms.tech/img_88.png"><br> 点击 <code>Create Project/Namespaces Role</code>，创建 Role，按照下图，填入对应信息<br> <img src="https://i.csms.tech/img_89.png"><br> 需要添加的 <code>Resource</code> 如下：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pods </span><br><span class="line">pods/attach </span><br><span class="line">pods/exec </span><br><span class="line">pods/portforward </span><br><span class="line">pods/proxy </span><br><span class="line">pods/log </span><br><span class="line">pods/status</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>权限选择：<code>get</code>，<code>list</code>，<code>watch</code>。填写完成后点击 <code>Create</code> 创建，无误后会创建 Role : <code>PodReadOnlyRole</code></p>
</li>
<li><p>创建用户</p>
<p> 在全局面板中进入 <code>Users &amp; Authentication</code>，选择 <code>Users</code>，创建新用户。<br> <img src="https://i.csms.tech/img_90.png"><br> 在 <code>Global Permissions</code> 中，选择系统预设的 Global Role ： <code>User-Base</code>，此角色仅拥有登陆系统的权限。</p>
</li>
<li><p>绑定 User 和 Project&#x2F;Namespaces Role</p>
<p> Rancher 仅支持对 Rancher 中的 <code>Project</code> 分配 <code>Project/Namespaces Role</code>，所以为了分配权限，需要对不同的项目创建对应的 <code>Project</code>。</p>
<p> 进入对应的 Cluster，选择要分配权限的 <code>Project</code>，点击 <code>Edit Config</code><br> <img src="https://i.csms.tech/img_91.png"><br> 在 <code>Members</code> 中选择 <code>Add</code> 为 <code>Project</code> 绑定 <code>User</code> 和 <code>Project Permissions</code>，本示例中，权限选择 <code>PodReadOnlyRole</code><br> <img src="https://i.csms.tech/img_92.png"></p>
</li>
</ol>
<p>通过以上步骤创建及分配权限后，通过新创建的用户登陆 Rancher，检查新用户对 Pod 的权限。</p>
<h3 id="为-Rancher-管理的-Kubernetes-集群分配管理员"><a href="#为-Rancher-管理的-Kubernetes-集群分配管理员" class="headerlink" title="为 Rancher 管理的 Kubernetes 集群分配管理员"></a>为 Rancher 管理的 Kubernetes 集群分配管理员</h3><p>Rancher 提供了一个集中的身份验证和授权机制来管理 Kubernetes 集群的访问。要为 Rancher 管理的 Kubernetes 集群分配管理员，可以按照以下步骤操作</p>
<ol>
<li><p>登录 Rancher UI:</p>
<p>打开你的 Rancher UI 并进行登录。</p>
</li>
<li><p>选择你的集群:</p>
<p>在 Home 页面上，选择你想要授权的 Kubernetes 集群。</p>
</li>
<li><p>管理成员:</p>
<p> 在集群的仪表盘上，找到并点击 “Cluster Members” 选项。这会显示集群的所有成员和他们的角色。</p>
</li>
<li><p>添加成员:</p>
<p> 点击 <code>Add Member</code>。<br> 在提供的搜索框中输入用户的名称或标识符来查找他们。这个用户可以是单独的用户、团队或组，取决于您的身份验证配置。<br> 选择要分配给该成员的角色。对于管理员权限，您应该选择 <code>Cluster Owner</code> 或与之类似的角色。</p>
</li>
<li><p>确认权限:</p>
<p> 确保新添加的成员现在在成员列表中，并且他们已经被分配了正确的角色。</p>
<p> 通知新管理员他们已经获得权限，并让他们登录 Rancher UI 以确认他们现在可以管理该集群。</p>
</li>
</ol>
<h2 id="Rancher-新增访问域名"><a href="#Rancher-新增访问域名" class="headerlink" title="Rancher 新增访问域名"></a>Rancher 新增访问域名</h2><p>为 Rancher web UI 新增其他可访问域名，参考以下步骤</p>
<ol>
<li><p>使用 <code>cert-manager</code> 为新增域名申请证书</p>
<a href="/202301050935/" title="使用 cert-manager 申请证书的步骤">使用 cert-manager 申请证书的步骤</a></li>
<li><p>修改 Rancher 的 Ingress 配置，添加新域名及证书到 Ingress</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> spec:</span><br><span class="line">ingressClassName: nginx</span><br><span class="line">rules:</span><br><span class="line">- host: rancher.test.com</span><br><span class="line">  http:</span><br><span class="line">    paths:</span><br><span class="line">    - backend:</span><br><span class="line">        service:</span><br><span class="line">          name: rancher</span><br><span class="line">          port:</span><br><span class="line">            number: 80</span><br><span class="line">      pathType: ImplementationSpecific</span><br><span class="line">- host: rancher1.test.com</span><br><span class="line">  http:</span><br><span class="line">    paths:</span><br><span class="line">    - backend:</span><br><span class="line">        service:</span><br><span class="line">          name: rancher</span><br><span class="line">          port:</span><br><span class="line">            number: 80</span><br><span class="line">      pathType: ImplementationSpecific</span><br><span class="line">tls:</span><br><span class="line">- hosts:</span><br><span class="line">  - rancher.test.com</span><br><span class="line">  secretName: tls-rancher-ingress</span><br><span class="line">- hosts:</span><br><span class="line">  - rancher1.test.com</span><br><span class="line">  secretName: rancher1-test-com</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="nginx-反代-Rancher"><a href="#nginx-反代-Rancher" class="headerlink" title="nginx 反代 Rancher"></a>nginx 反代 Rancher</h2><p>在集群外部通过 Nginx 反代访问 Rancher，可以使用以下 Nginx 配置 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[配置 NGINX 负载均衡](https://docs.rancher.cn/docs/rancher2.5/installation/resources/k8s-tutorials/infrastructure-tutorials/nginx/_index/)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">        default upgrade;</span><br><span class="line">        &#x27;&#x27;      close;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用来对 用户 ip 进行映射，以便后面做访问控制</span>    </span><br><span class="line">map $http_x_forwarded_for $k8s_admin_access &#123;</span><br><span class="line">         default false;</span><br><span class="line">         include k8s_admin_access.list;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">upstream rancher &#123;</span><br><span class="line">    server 172.31.27.193:443;</span><br><span class="line">    server 172.31.23.72:443;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">	listen 443 ssl;</span><br><span class="line">	server_name rancher.test.com;</span><br><span class="line">	access_log /home/logs/nginx/access/rancher.access.log main;</span><br><span class="line">	error_log /home/logs/nginx/error/rancher.error.log;	</span><br><span class="line"></span><br><span class="line">	ssl_certificate test.com.pem;</span><br><span class="line">    ssl_certificate_key test.com.pem;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">                if ($k8s_admin_access = false) &#123;</span><br><span class="line">                    return 403;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">		proxy_pass https://rancher;      # 本示例中，rancher 使用 https 访问，必须配置为 https</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.rancher.cn/docs/rancher2.5/installation/resources/k8s-tutorials/infrastructure-tutorials/nginx/_index/">配置 NGINX 负载均衡</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/rancher/rancher/issues/41295">The target cluster does not have the PodSecurityPolicy API resource</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Rancher</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 配置</title>
    <url>/202307121459/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>Redis 6</li>
</ul>
<h1 id="redis-Cluster-部署"><a href="#redis-Cluster-部署" class="headerlink" title="redis Cluster 部署"></a>redis Cluster 部署</h1><p>下载已经编译好的 <a href="https://s.csms.tech/file/redis6-cluster.tar">redis6-cluster 安装文件</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://s.csms.tech/redis6-cluster.tar</span><br><span class="line">tar -xf redis6-cluster.tar -C /usr/local/</span><br></pre></td></tr></table></figure>
<p>本示例安装 3 master 3 slave 的 redis cluster，假设使用端口为 7380-7385。数据存放路径为 <code>/data/redis/7380</code>，日志路径为 <code>/data/logs/redis-cluster/7380/</code>，其他端口的 redis 服务配置以此类推，主要是修改对应端口。</p>
<p>创建服务启动需要的数据目录及日志目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in 1 2 3 4 5 0 ; do mkdir -p /data/redis/738$&#123;i&#125; ; done</span><br><span class="line"></span><br><span class="line">for i in 1 2 3 4 5 0 ; do mkdir -p /data/logs/redis-cluster/738$&#123;i&#125; ; done</span><br></pre></td></tr></table></figure>
<p>7380 服务使用如下配置文件</p>
<figure class="highlight shell"><figcaption><span>7380.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">port 7380</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 600</span><br><span class="line">tcp-keepalive 60</span><br><span class="line">daemonize yes</span><br><span class="line">supervised no</span><br><span class="line">pidfile /var/run/redis_7380.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile /data/logs/redis-cluster/7380/redis.log</span><br><span class="line">databases 16</span><br><span class="line">always-show-logo yes</span><br><span class="line">save &quot;&quot;</span><br><span class="line">stop-writes-on-bgsave-error no</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /data/redis/7380</span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line">replica-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">replica-priority 100</span><br><span class="line">requirepass redisPassword</span><br><span class="line">masterauth redisPassword</span><br><span class="line">maxclients 30000</span><br><span class="line">maxmemory-policy volatile-lru</span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line">appendonly no</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-require-full-coverage no</span><br><span class="line">slowlog-log-slower-than 3000</span><br><span class="line">slowlog-max-len 200</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 0 0 0</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">dynamic-hz yes</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>若要根据以上 7380 端口的服务配置文件复制出其他服务端口的配置文件，可以参考以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp 7380.conf 7381.conf</span><br><span class="line">sed -i &#x27;s/7380/7381/g&#x27; 7381.conf</span><br><span class="line"></span><br><span class="line">cp 7380.conf 7382.conf</span><br><span class="line">sed -i &#x27;s/7380/7382/g&#x27; 7382.conf</span><br></pre></td></tr></table></figure>

<p>分别启动服务（7380-7385）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/redis6-cluster/src/redis-server /usr/local/redis6-cluster/7380.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>创建集群</strong> 命令格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create host1:port1 ... hostN:portN --cluster-replicas &lt;arg&gt; -a &#x27;redisPassword&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>redis-cli</code> 命令参数说明：</p>
<table>
<thead>
<tr>
<th>命令参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--cluster</code></td>
<td>redis cluster 操作<br/>查看 cluster 操作命令的帮助信息<br/><code>redis-cli --cluster help</code></td>
<td><code>redis-cli --cluster create</code><br/>创建集群</td>
</tr>
<tr>
<td><code>--cluster-replicas</code></td>
<td>redis cluster 副本数比例</td>
<td></td>
</tr>
<tr>
<td><code>-a</code></td>
<td>redis 密码</td>
<td></td>
</tr>
<tr>
<td><code>-c</code></td>
<td>操作 redis cluster</td>
<td></td>
</tr>
<tr>
<td><code>-p</code></td>
<td>指定连接的端口</td>
<td></td>
</tr>
</tbody></table>
<p>本示例使用以下命令创建集群，副本数为 1，有 6 个 redis 节点，为 3 master 3 slave</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 172.31.0.20:7380 172.31.0.20:7381 172.31.0.20:7382 172.31.0.20:7383 172.31.0.20:7384 172.31.0.20:7385 \</span><br><span class="line">          --cluster-replicas 1 \</span><br><span class="line">          -a &#x27;redisPassword&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看新建的集群信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">redis-cli -c -p 7380 -a <span class="string">&#x27;redisPassword&#x27;</span> cluster nodes</span></span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">aa4d467115b7d7c312fa28cac065d1343ee4af87 172.31.0.20:7383@17383 slave 1286b9783675913064d35edce520cfcb03d5dd61 0 1689148281218 3 connected</span><br><span class="line">78e47bd8cdd7b210219b0789a14b3079ed137648 172.31.0.20:7384@17384 slave 71510816880f0d5cc2299c4ce0fecc99965f2a80 0 1689148282220 1 connected</span><br><span class="line">1286b9783675913064d35edce520cfcb03d5dd61 172.31.0.20:7382@17382 master - 0 1689148281719 3 connected 10923-16383</span><br><span class="line">82533c5ecf0f418e8a134ce188d175e23858fbff 172.31.0.20:7381@17381 master - 0 1689148281000 2 connected 5461-10922</span><br><span class="line">71510816880f0d5cc2299c4ce0fecc99965f2a80 172.31.0.20:7380@17380 myself,master - 0 1689148281000 1 connected 0-5460</span><br><span class="line">f2e45a6fef0c5e24690373166c60c36379514d63 172.31.0.20:7385@17385 slave 82533c5ecf0f418e8a134ce188d175e23858fbff 0 1689148282000 2 connected</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="redis-cluster-常见管理操作"><a href="#redis-cluster-常见管理操作" class="headerlink" title="redis cluster 常见管理操作"></a>redis cluster 常见管理操作</h1><h2 id="添加-master-节点"><a href="#添加-master-节点" class="headerlink" title="添加 master 节点"></a>添加 master 节点</h2><p>给已有的 redis cluster 添加一个新的 master 节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node new_host:new_port existing_host:existing_port --cluster-master-id node_id</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>new_host:new_port</code> - 为要新加的节点的 IP:PORT 信息</li>
<li><code>existing_host:existing_port</code> - 当前集群<strong>最后（新）一个</strong>主节点的 IP:PORT 信息，这个可以通过 <code>redis-cli -c cluster nodes</code> 中的 slot 位置查询到</li>
<li><code>--cluster-master-id</code> - 当前集群<strong>最后（新）一个</strong>主节点的 id，可以通过命令 <code>redis-cli -c cluster nodes</code> 查看</li>
</ul>
<p>假设当前集群信息如下，观察 slot 位置，可以看到 <code>127.0.0.1:7003@17003</code> 是最后或者最新的节点。其 id 为 <code>bbe8b7035bfd31c47bec7d612acc112cd2869368</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">redis-cli -c -p 7001 cluster nodes</span> </span><br><span class="line">       </span><br><span class="line">7d388cc31df969d3e1715ce9644318bfd48317b1 127.0.0.1:7004@17004 slave 59b6597448b668a355d85dcc7a0623bc36263e5f 0 1564923261350 4 connected</span><br><span class="line">bbe8b7035bfd31c47bec7d612acc112cd2869368 127.0.0.1:7003@17003 master - 0 1564923263366 3 connected 10923-16383</span><br><span class="line">456921ae96af71d8183101f798cf5ceda4b0381e 127.0.0.1:7005@17005 slave bbe8b7035bfd31c47bec7d612acc112cd2869368 0 1564923262000 5 connected</span><br><span class="line">5612ffbb0407dbda50828b505a16b39ede51168b 127.0.0.1:7006@17006 slave 4dad696ede24995a57c5fd790faa95c72c187a22 0 1564923260000 6 connected</span><br><span class="line">4dad696ede24995a57c5fd790faa95c72c187a22 127.0.0.1:7001@17001 myself,master - 0 1564923263000 1 connected 0-5460</span><br><span class="line">59b6597448b668a355d85dcc7a0623bc36263e5f 127.0.0.1:7002@17002 master - 0 1564923262358 2 connected 5461-10922</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>新增节点的命令示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">redis-cli --cluster add-node 127.0.0.1:7007 127.0.0.1:7003 \</span><br><span class="line">          --cluster-master-id bbe8b7035bfd31c47bec7d612acc112cd2869368</span><br></pre></td></tr></table></figure>

<p>再次查看集群信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">redis-cli -c -p 7001 cluster nodes</span>        </span><br><span class="line">7d388cc31df969d3e1715ce9644318bfd48317b1 127.0.0.1:7004@17004 slave 59b6597448b668a355d85dcc7a0623bc36263e5f 0 1564923261350 4 connected</span><br><span class="line">bbe8b7035bfd31c47bec7d612acc112cd2869368 127.0.0.1:7003@17003 master - 0 1564923263366 3 connected 10923-16383</span><br><span class="line">7020c8df9423686727783c60bd2f0e367634ba84 127.0.0.1:7007@17007 master - 0 1564923260344 0 connected</span><br><span class="line">456921ae96af71d8183101f798cf5ceda4b0381e 127.0.0.1:7005@17005 slave bbe8b7035bfd31c47bec7d612acc112cd2869368 0 1564923262000 5 connected</span><br><span class="line">5612ffbb0407dbda50828b505a16b39ede51168b 127.0.0.1:7006@17006 slave 4dad696ede24995a57c5fd790faa95c72c187a22 0 1564923260000 6 connected</span><br><span class="line">4dad696ede24995a57c5fd790faa95c72c187a22 127.0.0.1:7001@17001 myself,master - 0 1564923263000 1 connected 0-5460</span><br><span class="line">59b6597448b668a355d85dcc7a0623bc36263e5f 127.0.0.1:7002@17002 master - 0 1564923262358 2 connected 5461-10922</span><br></pre></td></tr></table></figure>
<p>会发现 7007 端口对应的节点已经加入到集群中，是主节点，但是没有从节点，也没有分配槽数。执行以下命令给新添加的主节点分配 slots 槽数<br>命令格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard host:port \</span><br><span class="line">                            --cluster-from node_id \</span><br><span class="line">                            --cluster-to node_id \</span><br><span class="line">                            --cluster-slots 500 --cluster-yes</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>host:port</code> - 新添加的主节点 IP 和端口，此处表示的是 <code>127.0.0.1:7007</code></li>
<li><code>--cluster-from node_id</code> - 表示的是集群<strong>第一个主节点</strong>的节点 id，这个可以现有集群的 slots 槽数分配看出，此处表示的是 7001 端口对应的节点</li>
<li><code>--cluster-to node_id</code> - 表示的是集群<strong>最后一个主节点</strong>的节点 id,也就是<strong>新添加的那个主节点 id</strong>,此处表示的是 7007 端口对应的节点</li>
<li><code>--cluster-slots 500</code> - 表示的是给<strong>新主节点</strong>分配多少，此处 500 表示是分配从 0-499 个 slots 槽数，若不加会让手动输入</li>
<li><code>--cluster-yes</code> - 表示的是自动应答为 <code>yes</code>,若不加上这个会让手动输入 <code>yes</code>，表示同意此次分配</li>
</ul>
<p>本示例中执行以下命令为新添加的节点分配 slot</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 127.0.0.1:7007 --cluster-from 4dad696ede24995a57c5fd790faa95c72c187a22 \</span><br><span class="line">                                           --cluster-to 7020c8df9423686727783c60bd2f0e367634ba84 \</span><br><span class="line">                                           --cluster-slots 500 </span><br></pre></td></tr></table></figure>

<p>执行成功后重新查看集群信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">redis-cli -c -p 7001 cluster nodes</span>                                         </span><br><span class="line">7d388cc31df969d3e1715ce9644318bfd48317b1 127.0.0.1:7004@17004 slave 59b6597448b668a355d85dcc7a0623bc36263e5f 0 1564924042000 4 connected</span><br><span class="line">bbe8b7035bfd31c47bec7d612acc112cd2869368 127.0.0.1:7003@17003 master - 0 1564924042157 3 connected 10923-16383</span><br><span class="line">7020c8df9423686727783c60bd2f0e367634ba84 127.0.0.1:7007@17007 master - 0 1564924040140 7 connected 0-499</span><br><span class="line">456921ae96af71d8183101f798cf5ceda4b0381e 127.0.0.1:7005@17005 slave bbe8b7035bfd31c47bec7d612acc112cd2869368 0 1564924040000 5 connected</span><br><span class="line">5612ffbb0407dbda50828b505a16b39ede51168b 127.0.0.1:7006@17006 slave 4dad696ede24995a57c5fd790faa95c72c187a22 0 1564924041149 6 connected</span><br><span class="line">4dad696ede24995a57c5fd790faa95c72c187a22 127.0.0.1:7001@17001 myself,master - 0 1564924040000 1 connected 500-5460</span><br><span class="line">59b6597448b668a355d85dcc7a0623bc36263e5f 127.0.0.1:7002@17002 master - 0 1564924043166 2 connected 5461-10922</span><br></pre></td></tr></table></figure>
<p><strong>会看到 7007 端口对应的主节点已经有 slots 槽数了，并且是从 0 开始的</strong></p>
<h2 id="给集群中某个主节点添加一个从节点"><a href="#给集群中某个主节点添加一个从节点" class="headerlink" title="给集群中某个主节点添加一个从节点"></a>给集群中某个主节点添加一个从节点</h2><p>命令格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node new_host:new_port existing_host:existing_port \</span><br><span class="line">                    --cluster-slave \</span><br><span class="line">                    --cluster-master-id node_id</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>new_host:new_port</code> - 表示的是要<strong>添加的那个从节点</strong>的 IP 和端口</li>
<li><code>existing_host:existing_port</code> - 表示的是要给<strong>哪个主节点</strong>添加从节点</li>
<li><code>--cluster-slave</code> - 表示的是要<strong>添加从节点</strong>，否则则是添加主节点了</li>
<li><code>--cluster-master-id node_id</code> - 表示要给<strong>哪个主节点</strong>添加从节点，该主节点节点 id</li>
</ul>
<p>本示例中执行以下命令为新添加的 master 节点添加 slave 节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 127.0.0.1:7007 127.0.0.1:7008 --cluster-slave \</span><br><span class="line">                    --cluster-master-id 7020c8df9423686727783c60bd2f0e367634ba84</span><br></pre></td></tr></table></figure>
<p>执行成功后重新查看集群信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">redis-cli -c -p 7001 cluster nodes</span>                                         </span><br><span class="line">7020c8df9423686727783c60bd2f0e367634ba84 127.0.0.1:7007@17007 master - 0 1564924845000 7 connected 0-499</span><br><span class="line">4dad696ede24995a57c5fd790faa95c72c187a22 127.0.0.1:7001@17001 myself,master - 0 1564924843000 1 connected 500-5460</span><br><span class="line">5612ffbb0407dbda50828b505a16b39ede51168b 127.0.0.1:7006@17006 slave 4dad696ede24995a57c5fd790faa95c72c187a22 0 1564924845214 6 connected</span><br><span class="line">7d388cc31df969d3e1715ce9644318bfd48317b1 127.0.0.1:7004@17004 slave 59b6597448b668a355d85dcc7a0623bc36263e5f 0 1564924843195 4 connected</span><br><span class="line">bbe8b7035bfd31c47bec7d612acc112cd2869368 127.0.0.1:7003@17003 master - 0 1564924844205 3 connected 10923-16383</span><br><span class="line">456921ae96af71d8183101f798cf5ceda4b0381e 127.0.0.1:7005@17005 slave bbe8b7035bfd31c47bec7d612acc112cd2869368 0 1564924845000 5 connected</span><br><span class="line">415db07121ba946b202bca98e15cbdffc60bc18a 127.0.0.1:7008@17008 slave 7020c8df9423686727783c60bd2f0e367634ba84 0 1564924846224 7 connected</span><br><span class="line">59b6597448b668a355d85dcc7a0623bc36263e5f 127.0.0.1:7002@17002 master - 0 1564924844000 2 connected 5461-10922</span><br></pre></td></tr></table></figure>

<p>会发现 7008 端口对应的节点已经是 7007 端口对应的从节点(<code>slave 7020c8df9423686727783c60bd2f0e367634ba84</code>)</p>
<h2 id="从集群中删除一个从节点"><a href="#从集群中删除一个从节点" class="headerlink" title="从集群中删除一个从节点"></a>从集群中删除一个从节点</h2><p>命令格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster del-node host:port node_id</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>rsyncd 服务</title>
    <url>/36f703dc/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync [OPTION]... SRC DEST</span><br><span class="line">rsync [OPTION]... SRC [USER@]host:DEST</span><br><span class="line">rsync [OPTION]... [USER@]HOST:SRC DEST</span><br><span class="line">rsync [OPTION]... [USER@]HOST::SRC DEST</span><br><span class="line">rsync [OPTION]... SRC [USER@]HOST::DEST</span><br><span class="line">rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]</span><br></pre></td></tr></table></figure>

<p><code>:</code>   ssh 方式进行备份，ssh 非默认端口使用选项 <code>-e</code> 指定端口, <code>-e &#39;ssh -p 30000&#39;</code></p>
<p><code>::</code>   socket 方式进行备份，<code>rsync</code> 以服务方式监听，<code>SRC/DEST</code> 为配置中定义的模块 <code>[]</code></p>
<blockquote>
<ul>
<li><code>rsync</code> 命令使用中，如果源参数的末尾有斜线，只会复制指定目录的内容，而不复制目录本身，没有斜线，则会复制目录本身，包括目录</li>
<li>客户端免密登录时，需要在客户端建立密码文件： <code>/etc/rsync.passwd</code>，文件中只保存密码，权限为600，用选项 <code>--password-file</code> 指明存放密码的文件位置</li>
</ul>
</blockquote>
<span id="more"></span>

<h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-v, --verbose </code></td>
<td>详细模式输出。</td>
<td></td>
</tr>
<tr>
<td><code>-q, --quiet </code></td>
<td>精简输出模式。</td>
<td></td>
</tr>
<tr>
<td><code>-c, --checksum </code></td>
<td>打开校验开关，强制对文件传输进行校验。</td>
<td></td>
</tr>
<tr>
<td><code>-a, --archive</code></td>
<td>归档模式，表示以递归方式传输文件，并保持所有文件属性，等于 <code>-rlptgoD</code>。</td>
<td></td>
</tr>
<tr>
<td><code>-r, --recursive</code></td>
<td>对子目录以递归模式处理。</td>
<td></td>
</tr>
<tr>
<td><code>-R, --relative</code></td>
<td>使用相对路径信息。</td>
<td></td>
</tr>
<tr>
<td><code>-b, --backup</code></td>
<td>创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为 <code>~filename</code> 。可以使用 <code>--suffix</code> 选项来指定不同的备份文件前缀。</td>
<td></td>
</tr>
<tr>
<td><code> --backup-dir</code></td>
<td>将备份文件(如 <code>~filename</code>)存放在在目录下。</td>
<td></td>
</tr>
<tr>
<td><code>--suffix=SUFFIX </code></td>
<td>定义备份文件前缀。</td>
<td></td>
</tr>
<tr>
<td><code>-u, --update  </code></td>
<td>仅仅进行更新，也就是跳过所有已经存在于 DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。</td>
<td></td>
</tr>
<tr>
<td><code>-l, --links</code></td>
<td>保留软链结。</td>
<td></td>
</tr>
<tr>
<td><code>-L, --copy-links</code></td>
<td>想对待常规文件一样处理软链结。</td>
<td></td>
</tr>
<tr>
<td><code>--copy-unsafe-links  </code></td>
<td>仅仅拷贝指向SRC路径目录树以外的链结。</td>
<td></td>
</tr>
<tr>
<td><code>--safe-links   </code></td>
<td>忽略指向SRC路径目录树以外的链结。</td>
<td></td>
</tr>
<tr>
<td><code>-H, --hard-links</code></td>
<td>保留硬链结。</td>
<td></td>
</tr>
<tr>
<td><code>-p, --perms </code></td>
<td>保持文件权限。</td>
<td></td>
</tr>
<tr>
<td><code>-o, --owner </code></td>
<td>保持文件属主信息。</td>
<td></td>
</tr>
<tr>
<td><code>-g, --group</code></td>
<td>保持文件属组信息。</td>
<td></td>
</tr>
<tr>
<td><code>-D, --devices</code></td>
<td>保持设备文件信息。</td>
<td></td>
</tr>
<tr>
<td><code>-t, --times  </code></td>
<td>保持文件时间信息。</td>
<td></td>
</tr>
<tr>
<td><code>-S, --sparse  </code></td>
<td>对稀疏文件进行特殊处理以节省DST的空间。</td>
<td></td>
</tr>
<tr>
<td><code>-n, --dry-run </code></td>
<td>只显示哪些文件将被传输，不进行真正的传输。</td>
<td></td>
</tr>
<tr>
<td><code>-w, --whole-file </code></td>
<td>拷贝文件，不进行增量检测。</td>
<td></td>
</tr>
<tr>
<td><code>-x, --one-file-system </code></td>
<td>不要跨越文件系统边界。</td>
<td></td>
</tr>
<tr>
<td><code>-B, --block-size=SIZE</code></td>
<td>检验算法使用的块尺寸，默认是700字节。</td>
<td></td>
</tr>
<tr>
<td><code>-e, --rsh=command</code></td>
<td>指定使用rsh、ssh方式进行数据同步。</td>
<td></td>
</tr>
<tr>
<td><code>--rsync-path=PATH</code></td>
<td>指定远程服务器上的rsync命令所在路径信息。</td>
<td></td>
</tr>
<tr>
<td><code>-C, --cvs-exclude </code></td>
<td>使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件。</td>
<td></td>
</tr>
<tr>
<td><code>--existing </code></td>
<td>仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件。</td>
<td></td>
</tr>
<tr>
<td><code>--delete</code></td>
<td>删除那些DST中存在，而SRC没有的文件。</td>
<td></td>
</tr>
<tr>
<td><code>--delete-excluded  </code></td>
<td>同样删除接收端那些被该选项指定排除的文件。</td>
<td></td>
</tr>
<tr>
<td><code>--delete-after   </code></td>
<td>传输结束以后再删除。</td>
<td></td>
</tr>
<tr>
<td><code>--ignore-errors  </code></td>
<td>及时出现IO错误也进行删除。</td>
<td></td>
</tr>
<tr>
<td><code>--max-delete=NUM </code></td>
<td>最多删除NUM个文件。</td>
<td></td>
</tr>
<tr>
<td><code>--partial</code></td>
<td>保留那些因故没有完全传输的文件，以是加快随后的再次传输。</td>
<td></td>
</tr>
<tr>
<td><code>--force </code></td>
<td>强制删除目录，即使不为空。</td>
<td></td>
</tr>
<tr>
<td><code>--numeric-ids</code></td>
<td>不将数字的用户和组 id 匹配为用户名和组名。</td>
<td></td>
</tr>
<tr>
<td><code>--timeout=time</code></td>
<td>ip 超时时间，单位为秒。</td>
<td></td>
</tr>
<tr>
<td><code>-I, --ignore-times</code></td>
<td>不跳过那些有同样的时间和长度的文件。</td>
<td></td>
</tr>
<tr>
<td><code>--size-only</code></td>
<td>当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。</td>
<td></td>
</tr>
<tr>
<td><code>--modify-window=NUM</code></td>
<td>决定文件是否时间相同时使用的时间戳窗口，默认为0。</td>
<td></td>
</tr>
<tr>
<td><code>-T ,--temp-dir=DIR</code></td>
<td>在DIR中创建临时文件。</td>
<td></td>
</tr>
<tr>
<td><code>--compare-dest=DIR</code></td>
<td>同样比较DIR中的文件来决定是否需要备份。</td>
<td></td>
</tr>
<tr>
<td><code>-P</code></td>
<td>等同于 <code>--partial</code>。</td>
<td></td>
</tr>
<tr>
<td><code>--progress</code></td>
<td>显示传输过程。</td>
<td></td>
</tr>
<tr>
<td><code>-z, --compress</code></td>
<td>对备份的文件在传输时进行压缩处理。</td>
<td></td>
</tr>
<tr>
<td><code>--exclude PATTERN  </code></td>
<td>指定排除不需要传输的文件模式。支持通配符</td>
<td></td>
</tr>
<tr>
<td><code>--include PATTERN</code></td>
<td>指定不排除而需要传输的文件模式。</td>
<td></td>
</tr>
<tr>
<td><code>--exclude-from=FILE</code></td>
<td>排除FILE中指定模式的文件。</td>
<td></td>
</tr>
<tr>
<td><code>--include-from=FILE</code></td>
<td>不排除FILE指定模式匹配的文件。</td>
<td></td>
</tr>
<tr>
<td><code>--version</code></td>
<td>打印版本信息。</td>
<td></td>
</tr>
<tr>
<td><code>--address</code></td>
<td>绑定到特定的地址。</td>
<td></td>
</tr>
<tr>
<td><code>--config=FILE</code></td>
<td>指定其他的配置文件，不使用默认的 <code>rsyncd.conf</code> 文件。</td>
<td></td>
</tr>
<tr>
<td><code>--port=PORT</code></td>
<td>指定其他的 rsync 服务端口。</td>
<td></td>
</tr>
<tr>
<td><code>--blocking-io</code></td>
<td>对远程shell使用阻塞IO。</td>
<td></td>
</tr>
<tr>
<td><code>--stats </code></td>
<td>给出某些文件的传输状态。</td>
<td></td>
</tr>
<tr>
<td><code>--log-format=formAT </code></td>
<td>指定日志文件格式。</td>
<td></td>
</tr>
<tr>
<td><code>--password-file=FILE </code></td>
<td>从FILE中得到密码。</td>
<td></td>
</tr>
<tr>
<td><code>--bwlimit=KBPS </code></td>
<td>限制I&#x2F;O带宽，KBytes per second。</td>
<td></td>
</tr>
<tr>
<td><code>-h, --help</code></td>
<td>显示帮助信息。</td>
<td></td>
</tr>
</tbody></table>
<h3 id="rsyncd-配置文件示例"><a href="#rsyncd-配置文件示例" class="headerlink" title="rsyncd 配置文件示例"></a>rsyncd 配置文件示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==该选项指定当模块传输文件时守护进程应该具有的uid、gid</span></span><br><span class="line">uid =root  </span><br><span class="line">gid = root</span><br><span class="line">port = 873</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#消息文件，客户端连接服务器的时显示给客户端</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">motd file = /etc/rsyncd.motd</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==安全相关</span></span><br><span class="line">use chroot = no  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==设置最大连接数</span></span><br><span class="line">max connections = 200  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==设置超时时间</span></span><br><span class="line">timeout = 300   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==定义进程文件</span></span><br><span class="line">pid file = /var/run/rsyncd.pid </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==定义锁文件</span>  </span><br><span class="line">lock file = /var/run/rsync.lock </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==定义日志文件</span> </span><br><span class="line">log file = /var/log/rsyncd.log  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#关闭解析</span></span> </span><br><span class="line">reverse lookup = no  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==配置一个数据存储的模块</span></span><br><span class="line">[backup]      </span><br><span class="line">    #&lt;==模块备份数据路径</span><br><span class="line">    path = /data/www/videos/  </span><br><span class="line">    ignore errors</span><br><span class="line">    read only = false</span><br><span class="line">    list = false</span><br><span class="line">    #&lt;==配置登录权限，可以多个IP网段用逗号隔开</span><br><span class="line">    #hosts allow = 172.16.1.0/24,172.25.1.0/24  </span><br><span class="line">    #hosts deny = 0.0.0.0/32</span><br><span class="line">    #&lt;==配置服务登录用户（访问服务的权限）</span><br><span class="line">    auth users = rsync        </span><br><span class="line">    #&lt;==配置用户和密码文件,权限必须600，用户名:密码格式 </span><br><span class="line">    secrets file = /etc/rsync.server.password  </span><br><span class="line">    ##是否检查secrets file的权限</span><br><span class="line">    strict modes = yes </span><br></pre></td></tr></table></figure>

<h3 id="rsync-的过滤规则说明"><a href="#rsync-的过滤规则说明" class="headerlink" title="rsync 的过滤规则说明"></a>rsync 的过滤规则说明</h3><p>rsync 过滤规则是用于定义哪些文件要传输（包含某些文件）哪些文件不要传输（排除某些文件）的一些规则。这些规则可以直接写在命令参数里，也可以写在规则文件里，然后由命令引用</p>
<p>与过滤规则有关的选项主要有：</p>
<ul>
<li><code>--include=PATTERN</code> ： 设定一条包含规则，如： <code>--include=&quot;*.php&quot;</code></li>
<li><code>--exclude=PATTERN</code> ： 设定一条排除规则，如：<code>--exclude=&quot;*&quot;</code></li>
<li><code>--include-from=FILE</code> ： 指定一个文件，文件中一行一条包含规则，以 <code>;</code> 或 <code>#</code> 开头的行为注释，空行被忽略</li>
<li><code>--exclude-from=FILE</code> ： 指定一个文件，文件中一行一条排除规则，以 <code>;</code> 或 <code>#</code> 开头的行为注释，空行被忽略</li>
<li><code>--filter=RULE, -f</code> ： 设定一条过滤规则，可能是排除或包含规则（如：<code>-f &quot;- *.php&quot;</code> ），也可能其它类型的规则（如包含一个规则文件 <code>-f &quot;. ./rsync.rules&quot;</code>）</li>
</ul>
<p>这些选项配置的规则，其本质是一样，只是描述方式有些差异。其中 <code>--filter=RULE, -f</code> 选项支持完整的规则表达语法，其它的选项都可以转化为此选项的表达。举例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -av --include=&quot;*.php&quot; --exclude=&quot;*&quot; src_dir/ dst_dir/</span><br><span class="line">rsync -av -filter &quot;+ *.php&quot; -filter &quot;- *&quot; src_dir/ dst_dir/</span><br><span class="line">rsync -av -f &quot;+ *.php&quot; -f &quot;- *&quot; src_dir/ dst_dir/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上的命令是完全等价的，<code>-f</code> 方式更简单<br><code>--include=&quot;xxx&quot;</code> 等价于 <code>-f &quot;+ xxx&quot;</code><br><code>--exclude=&quot;xxx&quot;</code> 等价于 <code>-f &quot;- xxx&quot;</code></p>
</blockquote>
<p>由 <code>--include-from</code> 或 <code>--exclude-from</code> 选项引入的规则文件，相当于每个规则前面自动加了 <code>+</code> 或 <code>-</code>。其规则文件内容举例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--include-from 或 --exclude-from 引用的规则文件，开头没有 + 或 -</span></span><br><span class="line">*.php</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

<h4 id="过滤规则的工作方式"><a href="#过滤规则的工作方式" class="headerlink" title="过滤规则的工作方式"></a>过滤规则的工作方式</h4><p>所有的过滤规则配置最终在 rsync 内部会形成一个有序的规则列表，在命令行中靠前选项，其规则的排序也靠前。随着要传输的（文件&#x2F;目录路径）列表的构建，针对每个路径，rsync 会依次读取有序规则列表中的规则进行检查。当第一个规则匹配成功后，立即进行操作（包含或排除），并停止后面规则的检查；若所有规则都不不匹配，此路径默认为包含。若有递归选项时（如 <code>-r -a</code>），如果子目录被规则排除，那么 rsync 不会递归检查此目录的内容了，也就是此目录下的文件和目录不会进行规则过滤也不会传输，相当于整个子目录都排除了。简单总结如下：</p>
<ol>
<li>规则有顺序，顺序同命令中参数配置顺序（从左到右）</li>
<li>扫描文件系统，读取（目录或文件的）路径后马上进行规则检查，确定包含还是排除</li>
<li>规则检查按序进行，若有命中立即包含或排除，并停止后续规则检查；若无规则命中，默认为包含</li>
<li>目录被排除时，其下所有子目录和文件都被排除</li>
</ol>
<p>此命令会同步 src_dir 目录下的所有 php 文件（<strong>不包含子目录的</strong>）<br>因为 src_dir 目录下每个文件和目录路径都会先由 <code>-f &quot;+ *.php&quot;</code> 规则检查，php 文件符合此规则就被包含了，后面的 <code>-f &quot;- *&quot;</code> 规则不会检查了<br>其余类型的文件和子目录，不符合第一个规则，继续检查第二个规则时，都被排除了<br>子目录被排除后，其中即使有 php 文件，也不会被检查，所以此命令不会同步 src_dir 目录下子目录中的 php 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -av -f &quot;+ *.php&quot; -f &quot;- *&quot; src_dir/ dst_dir/</span><br></pre></td></tr></table></figure>

<p>调换两个参数的顺序，则完全不一样了<br>此命令将不会同步任何文件和目录<br>因为第一条规则把所有文件和目录到排除了，第二条规则没有机会生效  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync -av -f &quot;- *&quot; -f &quot;+ *.php&quot; src_dir/ dst_dir/</span><br></pre></td></tr></table></figure>

<p>此命令会同步 src_dir 目录下的所有 php 文件（<strong>包含子目录的</strong>）<br>规则 <code>-f &quot;+ */&quot;</code> 会匹配并包含所有子目录路径，所以 rsync 会检查所有的子目录，然后其中的 php 文件被包含了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync -av -f &quot;+ *.php&quot; -f &quot;+ */&quot; -f &quot;- *&quot; src_dir/ dst_dir/</span><br></pre></td></tr></table></figure>
<h4 id="过滤规则的配置语法"><a href="#过滤规则的配置语法" class="headerlink" title="过滤规则的配置语法"></a>过滤规则的配置语法</h4><p>过滤规则的配置语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">操作 [匹配模式]</span><br><span class="line">操作,修饰符 [匹配模式]</span><br></pre></td></tr></table></figure>
<p>常用操作：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>+</code></td>
<td>包含</td>
<td><code>-f &quot;+ *.php&quot;</code></td>
</tr>
<tr>
<td><code>-</code></td>
<td>排除</td>
<td><code>-f &quot;- *.php&quot;</code></td>
</tr>
<tr>
<td><code>.</code></td>
<td>包含规则文件</td>
<td><code>-f &quot;. ./rsync.rules&quot;</code></td>
</tr>
</tbody></table>
<p>常用修饰符：</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>!</code></td>
<td>否定，对匹配结果进行取反，把匹配成功当做匹配失败，把匹配失败当做匹配成功</td>
<td><code>-f &quot;-! *.php&quot;</code></td>
</tr>
</tbody></table>
<p>常见匹配模式：</p>
<table>
<thead>
<tr>
<th>匹配模式</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>/*.php</code></td>
<td>模式以 <code>/</code> 开头时，表示模式必须匹配路径的开始；否则可以匹配路径中任意一层名称</td>
<td></td>
</tr>
<tr>
<td><code>config/</code></td>
<td>模式以 <code>/</code> 结尾时，表示模式只匹配目录，否则可以匹配目录或文件</td>
<td></td>
</tr>
<tr>
<td><code>subdir/view.php</code></td>
<td>模式中间的 <code>/</code> 表示路径分隔符</td>
<td></td>
</tr>
<tr>
<td><code>*</code></td>
<td>匹配任意长度的任意字符，但不匹配 <code>/</code></td>
<td></td>
</tr>
<tr>
<td><code>**</code></td>
<td>结尾时匹配任意长度的任意字符（包括 <code>/</code>）</td>
<td><code>app/**</code> 匹配路径 <code>app/xx/xx/a.txt</code></td>
</tr>
<tr>
<td><code>***</code></td>
<td>结尾时匹配任意长度的任意字符（包括 <code>/</code>），还包括目录本身。</td>
<td><code>app/***</code> 匹配路径 <code>app</code> 和 <code>xxx/app</code></td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配 <code>/</code> 以外的任意一个字符</td>
<td></td>
</tr>
<tr>
<td><code>[]</code></td>
<td>匹配一个某一类字符</td>
<td><code>[a-z]</code> 匹配一个小写字母，<code>[0-9]</code> 匹配一个数字</td>
</tr>
</tbody></table>
<blockquote>
<p>模式默认必须匹配到路径的末尾。如：<code>foo</code> 匹配 <code>foo</code> 和 <code>xx/foo</code>，但不匹配 <code>xx/foo1</code> 和 <code>foo/xx</code><br>路径被匹配的部分必须是包含完整的（目录或文件）名称，不可从名称中间切开。如：<code>foo</code> 不匹配 <code>xxx/afoo</code> ，<code>abc/foo</code> 不匹配 <code>subdir/aabc/foo</code><br>默认是包含所有文件和目录  </p>
</blockquote>
<h3 id="常用命令示例"><a href="#常用命令示例" class="headerlink" title="常用命令示例"></a>常用命令示例</h3><h4 id="测试同步结果"><a href="#测试同步结果" class="headerlink" title="测试同步结果"></a>测试同步结果</h4><p>如果不确定 <code>rsync</code> 执行的结果，可以不写目标目录，这样不会同步数据，只会输出要同步的目录和文件列表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -a --exclude &#x27;file.txt&#x27; src_dir/</span><br></pre></td></tr></table></figure>
<p>或者使用选项 <code>--dry-run, -n</code>，模拟实际的运行效果，但不真的执行同步  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -a --dry-run --exclude &#x27;file.txt&#x27; src_dir/ dst_dir/</span><br></pre></td></tr></table></figure>

<h4 id="ssh-模式同步，默认-ssh-端口非-22-时指定-ssh-端口，使用-e-39-ssh-p-222-39-选项"><a href="#ssh-模式同步，默认-ssh-端口非-22-时指定-ssh-端口，使用-e-39-ssh-p-222-39-选项" class="headerlink" title="ssh 模式同步，默认 ssh 端口非 22 时指定 ssh 端口，使用 -e &#39;ssh -p 222&#39; 选项"></a>ssh 模式同步，默认 ssh 端口非 22 时指定 ssh 端口，使用 <code>-e &#39;ssh -p 222&#39;</code> 选项</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -e &#x27;ssh -p 222&#x27; /data/wwwroot/  rsync@9.9.9.9:/home/wwwroot/</span><br></pre></td></tr></table></figure>

<h4 id="Windows-中使用方式，以类似-cygdrive-d-的方式指定-d-盘"><a href="#Windows-中使用方式，以类似-cygdrive-d-的方式指定-d-盘" class="headerlink" title="Windows 中使用方式，以类似 /cygdrive/d/ 的方式指定 d 盘"></a>Windows 中使用方式，以类似 <code>/cygdrive/d/</code> 的方式指定 d 盘</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -c -r -u -t --timeout=300 -z --password-file C:\rsyncPasswd.txt /cygdrive/d/DATA/ rsync@0.0.0.0::zy/</span><br></pre></td></tr></table></figure>

<h4 id="同步过程中忽略-跳过-指定文件-目录"><a href="#同步过程中忽略-跳过-指定文件-目录" class="headerlink" title="同步过程中忽略(跳过)指定文件(目录)"></a>同步过程中忽略(跳过)指定文件(目录)</h4><p>要排除特定文件，请将文件的相对路径传递给 <code>--exclude</code> 选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -a --exclude &#x27;file.txt&#x27; src_dir/ dst_dir/</span><br><span class="line">rsync -a -f &#x27;- file.txt&#x27; src_dir/ dst_dir/</span><br></pre></td></tr></table></figure>

<p>排除特定目录与排除文件相同，只需将目录的相对路径传递给 <code>--exclude</code> 选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -a --exclude &#x27;dir1&#x27; src_dir/ dst_dir/</span><br><span class="line">rsync -a -f &#x27;- dir1&#x27; src_dir/ dst_dir/</span><br></pre></td></tr></table></figure>
<p>如果要排除目录内容，但不排除目录本身，请使用 <code>dir1/*</code> 而不是 <code>dir1</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -a --exclude &#x27;dir1/*&#x27; src_dir/ dst_dir/</span><br><span class="line">rsync -a -f &#x27;- dir1/*&#x27; src_dir/ dst_dir/</span><br></pre></td></tr></table></figure>
<p>要排除多个文件或目录，只需指定多个 <code>--exclude</code> 选项, 或使用 <code>&#123;&#125;</code> 包含多个目标项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -a --exclude &#x27;f1.txt&#x27; --exclude &#x27;dir1/*&#x27; --exclude &#x27;dir2&#x27; src_dir/ dst_dir/</span><br><span class="line">rsync -a --exclude=&#123;&#x27;f1.txt&#x27;,&#x27;dir1/*&#x27;,&#x27;dir2&#x27;&#125; src_dir/ dst_dir/</span><br><span class="line">rsync -a -f &#x27;- f1.txt&#x27; -f &#x27;- dir1/*&#x27; -f &#x27;- dir2&#x27; src_dir/ dst_dir/</span><br></pre></td></tr></table></figure>

<p>通配符排除多个文件，例如要排除所有 <code>jpg</code> 类型的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -a --exclude &#x27;*.jpg*&#x27; src_dir/ dst_dir/</span><br><span class="line">rsync -a -f &#x27;- *.jpg*&#x27; src_dir/ dst_dir/</span><br></pre></td></tr></table></figure>



<h3 id="windows-安装-rsync-客户端"><a href="#windows-安装-rsync-客户端" class="headerlink" title="windows 安装 rsync 客户端"></a>windows 安装 rsync 客户端</h3><p>windows 下 rsync客户端使用 <code>cwRsync</code><br>下载地址：<br><a href="https://www.itefix.net/cwrsync?spm=a2c6h.12873639.article-detail.6.58dd67f17cs3Ta">官网链接</a><br><a href="https://s.csms.tech/file/cwrsync_6.2.4_x64_free.zip">其他地址</a></p>
<p>下载解压安装包后，目录内容如下：<br><img src="https://i.csms.tech/img_22.png"></p>
<p><code>bin</code> 目录下包含常用命令，其中 <code>rsync</code> 命令和 linux 中使用方法相同</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://zhuanlan.zhihu.com/p/441161884">rsync命令过滤规则入门教程</a><br><a href="https://iguoli.github.io/2017/07/03/Rsync.html">Rsync 命令</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>sed 命令使用示例</title>
    <url>/202207291520/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="常用选项说明"><a href="#常用选项说明" class="headerlink" title="常用选项说明"></a>常用选项说明</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-n    使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN （例如文件内容）的内容一般都会被列出到屏幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。</span><br><span class="line">-i    直接修改读取的内容，而不是由屏幕输出。</span><br><span class="line">-f    直接将 sed 的动作写在一个文件内， -f filename 则可以执行 filename 内的sed 动作；</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a    追加， a 的后面可以接字符串，而这些字串会在新的一行出现(当前行的下一行)</span><br><span class="line">i    插入， i 的后面可以接字符串，而这些字串会在新的一行出现(目前行的上一行)；</span><br><span class="line">c    替代， c 的后面可以接字符串，替换整行</span><br><span class="line">s    替换， s/a/b/，a 替换成 b</span><br><span class="line">d    删除</span><br><span class="line">p    打印指定行</span><br></pre></td></tr></table></figure>

<h3 id="行定位方法"><a href="#行定位方法" class="headerlink" title="行定位方法"></a>行定位方法</h3><p>根据行号打印出指定行，<code>$</code> 表示最后一行，<code>!</code> 取反，排除行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -n &#x27;1p&#x27; file</span><br><span class="line">sed -n &#x27;1,10p&#x27; file</span><br><span class="line">sed -n &#x27;2,$p&#x27; file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印除最后一行之外的其他行</span></span><br><span class="line">sed -n &#x27;$!p&#x27; file</span><br></pre></td></tr></table></figure>
<p>打印出搜索匹配到的行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -n &#x27;/root/p&#x27; file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印出匹配<span class="string">&#x27;begin&#x27;</span>开始的行，到匹配到<span class="string">&#x27;end&#x27;</span>的行结束</span></span><br><span class="line">sed -n &#x27;/begin/,/end/p&#x27;</span><br><span class="line">sed -n &#x27;/begin/,/end/!p&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h3><h4 id="搜索包含指定内容的行，并替换整行内容"><a href="#搜索包含指定内容的行，并替换整行内容" class="headerlink" title="搜索包含指定内容的行，并替换整行内容"></a>搜索包含指定内容的行，并替换整行内容</h4><p>使用 <code>c</code> 命令，替换整行内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;/^updated/cupdate=1&#x27; file</span><br></pre></td></tr></table></figure>

<h4 id="每行的行首或行位添加内容"><a href="#每行的行首或行位添加内容" class="headerlink" title="每行的行首或行位添加内容"></a>每行的行首或行位添加内容</h4><p><code>^</code>，<code>$</code> 匹配行首和行尾  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i `s/^/添加内容/g` file</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title>sftp 服务常用配置说明</title>
    <url>/202207301332/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>sftp 是 Secure File Transfer Protocol 的缩写，安全文件传送协议。可以为传输文件提供一种安全的加密方法。SFTP 为 SSH 的一部分，由于这种传输方式使用了加密&#x2F;解密技术，所以传输效率比普通的 FTP 要低得多，如果您对网络安全性要求更高时，可以使用 SFTP 代替 FTP。默认ssh启用了sftp，只要可登陆系统的用户（&#x2F;bin&#x2F;bash）就可登陆,登陆后目录无限制，可任意切换其他目录。为了安全起见，可以配置sshd以限制sftp登录用户的权限。最好将登陆后用户限制在指定目录，无法切换到外部目录  </p>
<span id="more"></span>

<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p><strong><code>ChrootDirectory</code> 配置前提</strong>:<br><code>ChrootDirectory</code> 设置的目录权限及其所有的上级文件夹权限，属主和属组必须是 root；<br><code>ChrootDirectory</code> 设置的目录权限及其所有的上级文件夹权限，只有属主能拥有写权限，权限最大设置只能是 755。</p>
<blockquote>
<p><strong>如果权限配置不对，会导致无法登录</strong><br>如果上级目录无法设置为root权限，可以通过<code>ln</code>链接的方式实现<br>限制后的用户无法 <code>ssh</code> 登录系统</p>
</blockquote>
<p>创建相关用户和组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd sftp</span><br><span class="line">useradd -g sftp -d /data/sftp/sftpuser1 -s /sbin/nologin sftpuser1</span><br><span class="line">echo 123456 | passwd --stdin sftpuser1</span><br><span class="line"></span><br><span class="line">chown root:root /data/sftp/sftpuser1</span><br><span class="line">chmod 755 /data/sftp/sftpuser1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为 /data/sftp/sftpuser1 属主和属组都为root，其他用户无写入权限，需要创建sftpuser1可写入的目录</span></span><br><span class="line">mkdir -p /data/sftp/sftpuser1/upload</span><br><span class="line">chown sftpuser1:sftp /data/sftp/sftpuser/upload</span><br><span class="line">chmod 755 /data/sftp/sftpuser1/upload</span><br></pre></td></tr></table></figure>

<p>修改 <code>sshd_config</code> 配置</p>
<figure class="highlight shell"><figcaption><span>/etc/ssh/sshd_config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Subsystem      sftp    /usr/libexec/openssh/sftp-server</span></span><br><span class="line">Subsystem sftp internal-sftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拒绝指定用户登录,不能放在Match user中</span></span><br><span class="line">DenyUsers user1 user2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">maxsessions 10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对用户配置sftp, 多个用户可重复配置以下内容，或者通过针对组配置sftp</span></span><br><span class="line">Match user sftpuser1,sftpuser2</span><br><span class="line">    # 该行强制执行内部 sftp，并忽略任何 ~/.ssh/rc 文件中的命令。</span><br><span class="line">   ForceCommand internal-sftp</span><br><span class="line">	</span><br><span class="line">   ChrootDirectory /data/sftp/sftpuser1</span><br><span class="line">	</span><br><span class="line"><span class="meta prompt_">   # </span><span class="language-bash">下面两项是与安全有关</span></span><br><span class="line">    AllowTcpForwarding no</span><br><span class="line">    X11Forwarding no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对用户组配置sftp</span></span><br><span class="line">Match Group sftp,sftp1</span><br><span class="line">    ForceCommand internal-sftp</span><br><span class="line">    </span><br><span class="line">    # %h 代表用户 home 目录，%u 代表用户名。</span><br><span class="line">    ChrootDirectory /data/sftp/%u</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改配置后，重启 <code>sshd</code> 服务生效<br><code>systemctl restart sshd</code></p>
</blockquote>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><h4 id="Unable-to-open-permission-denied"><a href="#Unable-to-open-permission-denied" class="headerlink" title="Unable to open .: permission denied"></a>Unable to open .: permission denied</h4><p><strong>解决方法</strong>： 如果启动了 <code>selinux</code>， 关闭 <code>selinux</code></p>
<h4 id="Couldn’t-read-packet-Connection-reset-by-peer"><a href="#Couldn’t-read-packet-Connection-reset-by-peer" class="headerlink" title="Couldn’t read packet: Connection reset by peer"></a>Couldn’t read packet: Connection reset by peer</h4><p><strong>问题原因</strong>: <code>ChrootDirectory (/data/sftp/sftpuser1)</code> 目录及所有上级目录的用户和组必须为 <code>root</code>，权限最多为 755, <a href="#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">参考说明</a></p>
<h4 id="remote-readdir-“-x2F-“-Permission-denied"><a href="#remote-readdir-“-x2F-“-Permission-denied" class="headerlink" title="remote readdir(“&#x2F;“): Permission denied"></a>remote readdir(“&#x2F;“): Permission denied</h4><p><strong>问题原因</strong>: sftp 用户对 <code>ChrootDirectory (/data/sftp/sftpuser1)</code> 目录要有读取权限，<a href="#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">参考说明</a></p>
<h3 id="禁用-sftp-功能"><a href="#禁用-sftp-功能" class="headerlink" title="禁用 sftp 功能"></a>禁用 sftp 功能</h3><p>修改 <code>sshd</code> 配置文件 <code>/etc/ssh/sshd_config</code>,注释以下内容</p>
<figure class="highlight shell"><figcaption><span>/etc/ssh/sshd_config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Subsystem sftp /usr/libexec/openssh/sftp-server</span></span><br></pre></td></tr></table></figure>
<p>修改配置文件后重启 <code>sshd</code> 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>
<p>使用<code>sftp</code>登录时会报错 ： <code>Error:	Could not connect to server</code></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>sftp</tag>
      </tags>
  </entry>
  <entry>
    <title>spinnaker 常见用法</title>
    <url>/202211101344/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Spinnaker 1.29.0</li>
<li>Kubernetes 1.24.7</li>
</ul>
<h1 id="Spinnaker-引用-Kubernetes-中的-Namespace"><a href="#Spinnaker-引用-Kubernetes-中的-Namespace" class="headerlink" title="Spinnaker 引用 Kubernetes 中的 Namespace"></a>Spinnaker 引用 Kubernetes 中的 Namespace</h1><p>Kubernetes 中的 Namespace，对应 Spinnaker 中的 Application，当 <strong>在 Kubernetes 中创建 Namespace ，并在此 Namespace 创建资源后</strong>，Spinnaker 会自动读取到此 Namespace，并显示在 Applications 中。</p>
<h1 id="Pipelines-中引用-Docker-Registry-类型的触发器"><a href="#Pipelines-中引用-Docker-Registry-类型的触发器" class="headerlink" title="Pipelines 中引用 Docker Registry 类型的触发器"></a>Pipelines 中引用 Docker Registry 类型的触发器</h1><p>在 Pipelines 中配置 Docker Registry 类型的触发器，并在后面的 Stage 中自动引用。</p>
<ol>
<li><p>在要配置的 Pipeline 的 <code>Configuration</code> 部分，配置 <code>Automated Triggers</code>，选择 <code>type</code> 为 <code>Docker Registry</code><br> <img src="https://i.csms.tech/img_85.png"></p>
<ul>
<li>Registry Name - 为 <a href="https://csms.tech/202210121639/#添加自建的私有-docker-镜像源">Halyard 中配置的 Docker Registry 的认证信息</a> 的名称</li>
<li>Organization - 对应 Docker Registry （如 Harbor） 中的 Projects</li>
</ul>
</li>
<li><p>Stage 中使用以下方式引用镜像</p>
<p> <code>image: &#39;$&#123;trigger.artifacts[0].reference&#125;&#39;</code></p>
<p> <code>$&#123;trigger&#125;</code> 为镜像名称，当一个镜像名下有多个不同标签的镜像时，<code>$&#123;trigger.artifacts[0]</code> 表示第一个镜像，依此类推。<code>$&#123;trigger.artifacts[0].reference&#125;</code> 值为第一个镜像的完整镜像名加标签。<br> <img src="https://i.csms.tech/img_86.png"></p>
</li>
</ol>
<span id="more"></span>   ]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Spinnaker</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh 常见配置</title>
    <url>/202208171033/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<h1 id="ssh-免密登陆"><a href="#ssh-免密登陆" class="headerlink" title="ssh 免密登陆"></a>ssh 免密登陆</h1><p>在需要免密码登陆的场景下，可以配置 ssh 密钥登陆。配置步骤如下</p>
<ol>
<li>在本地服务器上面执行命令生成密钥对 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen</span> </span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/testuser/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /home/testuser/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/testuser/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:Lzvl8GbOQETBVcTf8lf0Qk9KUQAESs9h8wARud+iQrk testuser@k8s-uat-master1.148962587001</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|       .BBB*=.o+.|</span><br><span class="line">|       oo= =. o o|</span><br><span class="line">|        o.o .+ *.|</span><br><span class="line">|       ..     = =|</span><br><span class="line">|       .S. .   +.|</span><br><span class="line">|      o...+ .   o|</span><br><span class="line">|     . .o*..    .|</span><br><span class="line">|      E o==      |</span><br><span class="line">|       ..=o      |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>
 以上命令生成了公私密钥对，分别存储在了 <code>/home/testuser/.ssh/id_rsa.pub</code> 和 <code>/home/testuser/.ssh/id_rsa</code> 中。</li>
<li>在本地服务器上面执行命令将其公钥添加到目标主机的 <code>/home/testuser/.ssh/authorized_keys</code>。或者手动拷贝公钥追加到目标主机的 <code>.ssh/authorized_keys</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-copy-id -p 30000 testuser@172.31.30.115</span></span><br><span class="line">/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/home/testuser/.ssh/id_rsa.pub&quot;</span><br><span class="line">The authenticity of host &#x27;[172.31.30.115]:30000 ([172.31.30.115]:30000)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:vKD5th2QpWYv/hmt+180BsENDHWNcJdKiEBOH06h/K8.</span><br><span class="line">ECDSA key fingerprint is MD5:bf:8c:b9:e6:31:92:1f:a9:b6:7b:8f:50:d7:10:9e:fd.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keystestuser@172.31.30.115&#x27;s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh -p &#x27;30000&#x27; &#x27;testuser@172.31.30.115&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure></li>
<li>在本地服务器上面验证可以免密登陆到目标服务器。</li>
</ol>
<p><strong>如果要配置双向免密，将以上步骤反过来操作一遍即可</strong></p>
<h1 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h1><p>登录服务器，经常遇见以下提示信息，说明有主机一直在尝试暴力破解用户名密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">There were 696 failed login attempts since the last successful login.</span><br></pre></td></tr></table></figure>

<p>查看登录失败的用户名和 ip 地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep <span class="string">&quot;Failed password for invalid user &quot;</span> /var/log/secure | awk <span class="string">&#x27;&#123;print $11,$13&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -k1 -n</span></span><br><span class="line">      3 wangli 47.74.0.77</span><br><span class="line">      3 work 47.74.0.77</span><br><span class="line">      3 yt 47.74.0.77</span><br><span class="line">      3 yx 47.74.0.77</span><br><span class="line">      3 yyz 47.74.0.77</span><br><span class="line">      3 zabbix 47.74.0.77</span><br><span class="line">      3 zd 47.74.0.77</span><br><span class="line">      3 zhangfan 47.74.0.77</span><br><span class="line">      3 zxy 47.74.0.77</span><br><span class="line">      4 client003 47.74.0.77</span><br><span class="line">      4 client004 47.74.0.77</span><br><span class="line">      4 dell 47.74.0.77</span><br><span class="line">      4 ftpuser 47.74.0.77</span><br><span class="line">      4 inspur 47.74.0.77</span><br><span class="line">      4 wang 47.74.0.77</span><br><span class="line">      5 git 47.74.0.77</span><br><span class="line">      5 nagios 47.74.0.77</span><br><span class="line">      5 testuser 47.74.0.77</span><br><span class="line">      6 omnisky 47.74.0.77</span><br><span class="line">      7 oracle 47.74.0.77</span><br><span class="line">      8 jenkins 47.74.0.77</span><br><span class="line">     10 hadoop 47.74.0.77</span><br><span class="line">     10 postgres 47.74.0.77</span><br><span class="line">     11 ubuntu 47.74.0.77</span><br><span class="line">     11 user 47.74.0.77</span><br><span class="line">     12 admin 47.74.0.77</span><br><span class="line">     15 test 47.74.0.77</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="sshd-加固配置建议"><a href="#sshd-加固配置建议" class="headerlink" title="sshd 加固配置建议"></a>sshd 加固配置建议</h2><p>修改 <code>sshd</code> 配置文件 <code>/etc/ssh/sshd_config</code>，更改以下配置</p>
<ul>
<li><code>sshd</code> 默认端口 22 改为其他端口</li>
<li>禁止 <code>root</code> 用户登录，创建其他普通用户以登录系统，普通用户登录后有需要再切换到 <code>root</code></li>
</ul>
<figure class="highlight shell"><figcaption><span>/etc/ssh/sshd_config</span></figcaption><table><tr><td class="code"><pre><span class="line">Port 30000</span><br><span class="line">PermitRootLogin no</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>修改配置后重启 <code>sshd</code> 服务生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>

<p>如果可以安全的保存秘钥，也可以使用秘钥登录，禁止用户名密码登录，具体配置可参考：<a href="https://blog.51cto.com/u_15061935/2652298">ssh 秘钥登录</a></p>
<p>若使用密码登陆，建议 <a href="/202208171501/" title="配置 fail2ban 防止暴力破解">配置 fail2ban 防止暴力破解</a></p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="Could-not-load-host-key"><a href="#Could-not-load-host-key" class="headerlink" title="Could not load host key"></a>Could not load host key</h2><p>docker 容器中安装 <code>openssh-server</code> 后，使用命令 <code>/usr/sbin/sshd -D</code> 启动 <code>sshd</code> 服务，通常会报以下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/usr/sbin/sshd</span></span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_rsa_key</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_ed25519_key</span><br></pre></td></tr></table></figure>

<p>执行以下命令解决:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N &#x27;&#x27; </span><br><span class="line">ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N &#x27;&#x27;</span><br><span class="line">ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key  -N &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="配置-ssh-公私钥免密登录后提示输入密码登陆"><a href="#配置-ssh-公私钥免密登录后提示输入密码登陆" class="headerlink" title="配置 ssh 公私钥免密登录后提示输入密码登陆"></a>配置 ssh 公私钥免密登录后提示输入密码登陆</h2><p>在使用了 <code>ssh-copy-id root@192.168.81.12</code> 配置免密钥登录之后，发现 ssh 到机器上还是需要密码。在目标服务器上面查看 <code>ssh</code> 日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /var/log/secure</span></span><br><span class="line">sshd[14034]: pam_unix(sshd:session): session closed for user testuser</span><br><span class="line">sshd[14133]: Authentication refused: bad ownership or modes for file /home/testuser/.ssh/authorized_keys</span><br><span class="line">sshd[14133]: Connection closed by 172.31.30.123 port 44164 [preauth]</span><br><span class="line">sshd[14313]: Authentication refused: bad ownership or modes for file /home/testuser/.ssh/authorized_keys</span><br><span class="line">sshd[14313]: Connection closed by 172.31.30.123 port 15928 [preauth]</span><br><span class="line">sshd[16213]: Authentication refused: bad ownership or modes for file /home/testuser/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>看到登陆报错： <code>Authentication refused: bad ownership or modes for file /home/testuser/.ssh/authorized_keys</code>，检查文件 <code>/home/testuser/.ssh/authorized_keys</code> 权限，看到文件权限为 <code>-rw-rw-r--</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ll /home/testuser/.ssh/</span></span><br><span class="line">total 4</span><br><span class="line">-rw-rw-r-- 1 testuser testuser 2815 Aug 31 14:15 authorized_keys</span><br></pre></td></tr></table></figure>
<p>修改文件权限为 <code>600</code>，重新登陆，可以免密码登陆。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL Certbot 使用方法汇总</title>
    <url>/202404241336/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Certbot 是 Let’s Encrypt SSL 官方推荐的 ACME 协议客户端，它是一个 Python 程序，且包含模块化插件支持。Let’s Encrypt 的根证书浏览器支持广泛，且支持泛域名。但单个证书的有效期为 90 天，以防止滥用。</p>
<h1 id="安装-Certbot"><a href="#安装-Certbot" class="headerlink" title="安装 Certbot"></a>安装 Certbot</h1><p><a href="https://eff-certbot.readthedocs.io/en/stable/install.html#installation">官方安装步骤参考</a></p>
<p>以下步骤演示在 Python3 环境中安装 Certbot 及其相关依赖</p>
<ol>
<li>安装 <code>certbot</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install certbot</span><br></pre></td></tr></table></figure></li>
<li>申请证书时，要使用 DNS 方式验证域名所有权并且 DNS 使用 Cloudflare 的情况下，可以安装 <code>certbot-dns-cloudflare</code> 插件实现自动验证，参考以下命令安装 <code>certbot-dns-cloudflare</code>，此模块需要 <code>cloudflare</code> 模块的支持 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install cloudflare</span><br><span class="line">pip install certbot-dns-cloudflare</span><br></pre></td></tr></table></figure>
安装完成后检查相关模块和版本。其中 <code>cloudflare</code> 版本需要最低为 <code>2.3.1</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[certbot-dns-cloudflare’s documentation](https://certbot-dns-cloudflare.readthedocs.io/en/stable/#welcome-to-certbot-dns-cloudflare-s-documentation)">[1]</span></a></sup> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pip list</span></span><br><span class="line">certbot                2.10.0</span><br><span class="line">certbot-dns-cloudflare 2.10.0</span><br><span class="line">cloudflare             2.19.2</span><br></pre></td></tr></table></figure>
以上模块安装完成后，即可使用 <code>certbot</code> 申请域名证书，并支持 Cloudflare DNS 的自动验证。</li>
</ol>
<h1 id="基于-Cloudflare-DNS-的自动验证申请域名证书"><a href="#基于-Cloudflare-DNS-的自动验证申请域名证书" class="headerlink" title="基于 Cloudflare DNS 的自动验证申请域名证书"></a>基于 Cloudflare DNS 的自动验证申请域名证书</h1><p><a href="#%E5%AE%89%E8%A3%85-Certbot">参考步骤安装 <code>certbot</code> 及 Cloudflare DNS 插件后</a> 即可使用 <code>certbot</code> 自动请求 Cloudflare DNS 创建申请证书时需要的 DNS 记录自动完成域名归属权的验证过程。</p>
<p><code>certbot</code> 支持的 Cloudflare 相关的参数如下</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--dns-cloudflare</code></td>
<td>使用 Cloudflare 的 DNS 插件自动验证域名归属权</td>
<td></td>
</tr>
<tr>
<td><code>--dns-cloudflare-credentials</code></td>
<td>请求 Cloudflare 的授权配置文件</td>
<td></td>
</tr>
<tr>
<td><code>--dns-cloudflare-propagation-seconds</code></td>
<td>请求 Cloudflare DNS 添加相关 DNS 记录后，让 ACME 服务等待多少秒再验证 DNS 记录。主要用来防止 DNS 记录添加后，缓存 DNS 服务器未来得及更新最新记录。 <br/>默认为 10</td>
<td></td>
</tr>
</tbody></table>
<p><a href="https://certbot-dns-cloudflare.readthedocs.io/en/stable/#credentials">Cloudflare Credentials 说明</a></p>
<p>假设有 Cloudflare 账号的 Global API Key，则 Credentials 配置文件内容参考如下</p>
<figure class="highlight shell"><figcaption><span>cloudflare.ini</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cloudflare API credentials used by Certbot</span></span><br><span class="line">dns_cloudflare_email = cloudflare@example.com</span><br><span class="line">dns_cloudflare_api_key = 0123456789abcdef0123456789abcdef01234</span><br></pre></td></tr></table></figure>

<p>申请证书的具体命令如下，如果是第一次申请，需要根据提示填写自己的邮箱信息并同意许可协议，邮箱用于接受之后系统发送的错误或者域名证书过期等信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certbot certonly \</span><br><span class="line">  --dns-cloudflare \</span><br><span class="line">  --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini \</span><br><span class="line">  --dns-cloudflare-propagation-seconds 60 \</span><br><span class="line">  -d example.com \</span><br><span class="line">  -d www.example.com</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果是非交互式环境,可以使用参数 <code>--email your-email@example.com</code> 和 <code>--agree-tos</code> 自动绑定邮箱并同意许可</p>
</blockquote>
<span id="more"></span>

<p>其他常用参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--cert-path</code></td>
<td>指定证书存放路径</td>
<td><code>--cert-path /path/to/certificate.pem</code></td>
</tr>
<tr>
<td><code>--key-path</code></td>
<td>密钥存放路径</td>
<td></td>
</tr>
<tr>
<td><code>--fullchain-path</code></td>
<td>full certificate chain 存放路径</td>
<td></td>
</tr>
<tr>
<td><code>--chain-path</code></td>
<td>证书链存放路径</td>
<td></td>
</tr>
<tr>
<td><code>--non-interactive</code></td>
<td>使用非交互模式。建议在自动化脚本中使用</td>
<td></td>
</tr>
<tr>
<td><code>--quiet</code></td>
<td>减少输出，只输出关键信息</td>
<td></td>
</tr>
</tbody></table>
<h1 id="certbot-命令常用操作"><a href="#certbot-命令常用操作" class="headerlink" title="certbot 命令常用操作"></a>certbot 命令常用操作</h1><h2 id="手动添加-DNS-TXT-记录验证申请域名证书"><a href="#手动添加-DNS-TXT-记录验证申请域名证书" class="headerlink" title="手动添加 DNS TXT 记录验证申请域名证书"></a>手动添加 DNS TXT 记录验证申请域名证书</h2><p>如果需要通过手动添加域名 DNS TXT 记录的方式验证域名归属来申请域名证书，可以参考以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">certbot certonly --manual --preferred-challenges dns -d test.domain.com</span></span><br><span class="line">Saving debug log to /var/log/letsencrypt/letsencrypt.log</span><br><span class="line">Requesting a certificate for test.domain.com</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Please deploy a DNS TXT record under the name:</span><br><span class="line"></span><br><span class="line">_acme-challenge.test.domain.com.</span><br><span class="line"></span><br><span class="line">with the following value:</span><br><span class="line"></span><br><span class="line">a1vi7KIPqDvMJtuJRThCD2n1nEnQF2TUc6hqJm-RLLI</span><br><span class="line"></span><br><span class="line">Before continuing, verify the TXT record has been deployed. Depending on the DNS</span><br><span class="line">provider, this may take some time, from a few seconds to multiple minutes. You can</span><br><span class="line">check if it has finished deploying with aid of online tools, such as the Google</span><br><span class="line">Admin Toolbox: https://toolbox.googleapps.com/apps/dig/#TXT/_acme-challenge.test.domain.com.</span><br><span class="line">Look for one or more bolded line(s) below the line &#x27;;ANSWER&#x27;. It should show the</span><br><span class="line">value(s) you&#x27;ve just added.</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Press Enter to Continue</span><br><span class="line"></span><br><span class="line">Successfully received certificate.</span><br><span class="line">Certificate is saved at: /etc/letsencrypt/live/test.domain.com/fullchain.pem</span><br><span class="line">Key is saved at:         /etc/letsencrypt/live/test.domain.com/privkey.pem</span><br><span class="line">This certificate expires on 2024-08-14.</span><br><span class="line">These files will be updated when the certificate renews.</span><br><span class="line"></span><br><span class="line">NEXT STEPS:</span><br><span class="line">- This certificate will not be renewed automatically. Autorenewal of --manual certificates requires the use of an authentication hook script (--manual-auth-hook) but one was not provided. To renew this certificate, repeat this same certbot command before the certificate&#x27;s expiry date.</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">If you like Certbot, please consider supporting our work by:</span><br><span class="line"> * Donating to ISRG / Let&#x27;s Encrypt:   https://letsencrypt.org/donate</span><br><span class="line"> * Donating to EFF:                    https://eff.org/donate-le</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br></pre></td></tr></table></figure>



<p>相关参数使用说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>--manual</code></td>
<td>使用 <code>manual</code> 插件来验证域名归属权</td>
<td></td>
</tr>
<tr>
<td><code>--preferred-challenges</code></td>
<td><code>manual</code> 插件支持使用 <code>http</code> 或 <code>dns</code> 的方式来验证域名归属权。<br/>- <code>http</code> 需要根据提示在所申请域名的网站相关目录下（<code>/.well-known/acme-challenge/</code>）放置特定名称和内容的文件<br/>- <code>dns</code> 需要根据提示为域名添加相应的 TXT 记录</td>
<td></td>
</tr>
</tbody></table>
<p><em><strong>使用 <code>--manual</code> 插件申请的证书不支持到期前自动更新证书</strong></em>，除非使用 <code>--manual-auth-hook</code> 方式绑定了 <a href="https://eff-certbot.readthedocs.io/en/stable/using.html#hooks">域名归属权验证脚本（hook）</a>来自动实现 <code>http</code> 或 <code>dns</code> 的验证过程。</p>
<p>使用 <code>--manual</code> 插件申请的证书在证书到期前要更新的话，将申请证书的过程重新执行一遍即可。</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://eff-certbot.readthedocs.io/en/stable/using.html">User Guide</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://certbot-dns-cloudflare.readthedocs.io/en/stable/#welcome-to-certbot-dns-cloudflare-s-documentation">certbot-dns-cloudflare’s documentation</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://eff-certbot.readthedocs.io/en/stable/using.html#manual">Manual</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>SSL</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Suse 发行版软件包管理命令使用介绍</title>
    <url>/202309221652/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在 SUSE Linux（无论是 openSUSE 还是 SUSE Linux Enterprise Server）中，可以使用 <code>zypper</code> 命令行工具来管理和安装软件包。</p>
<h1 id="更新软件包数据库"><a href="#更新软件包数据库" class="headerlink" title="更新软件包数据库"></a>更新软件包数据库</h1><p>在安装任何新的软件包之前，建议首先更新你的软件包数据库，以确保你拥有最新的软件包信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zypper refresh</span><br></pre></td></tr></table></figure>

<h1 id="搜索软件包"><a href="#搜索软件包" class="headerlink" title="搜索软件包"></a>搜索软件包</h1><p>如果你不确定软件包的确切名称，可以使用 zypper search 来查找它</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zypper search &lt;package-name&gt;</span><br></pre></td></tr></table></figure>
<h1 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zypper install &lt;package-name&gt;</span><br></pre></td></tr></table></figure>

<h1 id="查询软件包信息"><a href="#查询软件包信息" class="headerlink" title="查询软件包信息"></a>查询软件包信息</h1><p>要查看关于特定软件包的详细信息，包括描述、版本和依赖关系等，可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zypper info &lt;package-name&gt;</span><br></pre></td></tr></table></figure>

<h1 id="卸载软件包"><a href="#卸载软件包" class="headerlink" title="卸载软件包"></a>卸载软件包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zypper remove &lt;package-name&gt;</span><br></pre></td></tr></table></figure>

<h1 id="升级系统"><a href="#升级系统" class="headerlink" title="升级系统"></a>升级系统</h1><p>要升级所有已安装的软件包到其最新版本，可以使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zypper update</span><br></pre></td></tr></table></figure>

<h1 id="常用软件包安装"><a href="#常用软件包安装" class="headerlink" title="常用软件包安装"></a>常用软件包安装</h1><p>以下示例安装常用工具包</p>
<ul>
<li><code>net-tools</code>，提供 <code>netstat</code> 命令</li>
<li><code>iproute2</code> 提供 <code>ip</code>、<code>ss</code> 等命令</li>
<li><code>iputils</code> 提供 <code>ping</code> 命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zypper refresh</span><br><span class="line">sudo zypper install net-tools</span><br><span class="line">zypper install iproute2</span><br><span class="line">sudo zypper install iputils</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云相关配置</title>
    <url>/202305260914/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Python-SDK"><a href="#Python-SDK" class="headerlink" title="Python SDK"></a>Python SDK</h1><p><a href="https://www.tencentcloud.com/zh/document/product/494/7244">Python SDK 官网使用说明</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install tencentcloud-sdk-python-intl-en</span><br></pre></td></tr></table></figure>

<h2 id="预热功能"><a href="#预热功能" class="headerlink" title="预热功能"></a>预热功能</h2><p><a href="https://console.tencentcloud.com/api/explorer?Product=vod&Version=2018-07-17&Action=PushUrlCache">参考文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common <span class="keyword">import</span> credential</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.profile.client_profile <span class="keyword">import</span> ClientProfile</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.profile.http_profile <span class="keyword">import</span> HttpProfile</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.exception.tencent_cloud_sdk_exception <span class="keyword">import</span> TencentCloudSDKException</span><br><span class="line"><span class="keyword">from</span> tencentcloud.vod.v20180717 <span class="keyword">import</span> vod_client, models</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 实例化一个认证对象，入参需要传入腾讯云账户 SecretId 和 SecretKey，此处还需注意密钥对的保密</span></span><br><span class="line">    <span class="comment"># 代码泄露可能会导致 SecretId 和 SecretKey 泄露，并威胁账号下所有资源的安全性。密钥可前往官网控制台 https://console.tencentcloud.com/capi 进行获取</span></span><br><span class="line">    cred = credential.Credential(<span class="string">&quot;SecretId&quot;</span>, <span class="string">&quot;SecretKey&quot;</span>)</span><br><span class="line">    <span class="comment"># 实例化一个http选项，可选的，没有特殊需求可以跳过</span></span><br><span class="line">    httpProfile = HttpProfile()</span><br><span class="line">    httpProfile.endpoint = <span class="string">&quot;vod.tencentcloudapi.com&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化一个client选项，可选的，没有特殊需求可以跳过</span></span><br><span class="line">    clientProfile = ClientProfile()</span><br><span class="line">    clientProfile.httpProfile = httpProfile</span><br><span class="line">    <span class="comment"># 实例化要请求产品的client对象,clientProfile是可选的</span></span><br><span class="line">    client = vod_client.VodClient(cred, <span class="string">&quot;&quot;</span>, clientProfile)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化一个请求对象,每个接口都会对应一个request对象</span></span><br><span class="line">    req = models.PushUrlCacheRequest()</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;Urls&quot;</span>: [ <span class="string">&quot;https://test.domain.com/z44R8F4D.ts&quot;</span>, <span class="string">&quot;https://test.domain.com/z70TBUet.ts&quot;</span>, <span class="string">&quot;https://test.domain.com/zB2OEC1t.ts&quot;</span>, </span><br><span class="line">                  <span class="string">&quot;https://test.domain.com/zZw91TCL.ts&quot;</span>, <span class="string">&quot;https://test.domain.com/zbJ9U6Su.ts&quot;</span>, <span class="string">&quot;https://test.domain.com/zbvqkOMN.ts&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    req.from_json_string(json.dumps(params))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回的resp是一个PushUrlCacheResponse的实例，与请求对象对应</span></span><br><span class="line">    resp = client.PushUrlCache(req)</span><br><span class="line">    <span class="comment"># 输出json格式的字符串回包</span></span><br><span class="line">    <span class="built_in">print</span>(resp.to_json_string())</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> TencentCloudSDKException <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(err)</span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.tencentcloud.com/zh/document/product/494/7244">Python SDK 官网使用说明</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>云平台</category>
        <category>腾讯云</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具下载链接</title>
    <url>/202302041721/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="常用工具下载目录"><a href="#常用工具下载目录" class="headerlink" title="常用工具下载目录"></a>常用工具下载目录</h1><p><a href="https://s.csms.tech/file/">常用工具下载目录</a></p>
<p>包含常用工具：</p>
<ul>
<li><p>Xshell 7.0.0<br><a href="!--swig%EF%BF%BC2--">使用参考</a></p>
</li>
<li><p>fiddler-linux.zip<br><a href="!--swig%EF%BF%BC3--">使用参考</a></p>
</li>
<li><p>Fiddler Everywhere 4.2.1</p>
</li>
<li><p>cwrsync_6.2.4_x64_free<br><a href="!--swig%EF%BF%BC4--">使用参考</a></p>
</li>
<li><p>FileZilla_3.62.2_win64</p>
</li>
<li><p>openvpn-connect-3.3.7.2979_signed</p>
</li>
<li><p>VMware-workstation-full-17.0.0-20800274</p>
</li>
<li><p>CentOS-7-x86_64-Minimal-2207-02</p>
</li>
<li><p>Python 3.10.12 编译后的安装文件(<code>Python-3.10.12.installed.tar</code>)，可以 <a href="/202306161337/" title="安装依赖">安装依赖</a> 后，解压直接使用</p>
</li>
<li><p>HttpCanary</p>
</li>
</ul>
<h1 id="常用工具链接"><a href="#常用工具链接" class="headerlink" title="常用工具链接"></a>常用工具链接</h1><h2 id="m3u8-视频在线播放器"><a href="#m3u8-视频在线播放器" class="headerlink" title="m3u8 视频在线播放器"></a>m3u8 视频在线播放器</h2><ul>
<li><a href="https://www.hlsplayer.net/">https://www.hlsplayer.net/</a></li>
<li><a href="https://m3u8-player.com/">https://m3u8-player.com/</a></li>
</ul>
<h2 id="架构图在线绘制工具"><a href="#架构图在线绘制工具" class="headerlink" title="架构图在线绘制工具"></a>架构图在线绘制工具</h2><ul>
<li><a href="https://app.diagrams.net/">https://app.diagrams.net/</a></li>
</ul>
<h2 id="代码或文本比对在线工具"><a href="#代码或文本比对在线工具" class="headerlink" title="代码或文本比对在线工具"></a>代码或文本比对在线工具</h2><ul>
<li><a href="https://tool.oschina.net/diff/">https://tool.oschina.net/diff/</a></li>
</ul>
<h2 id="随机密码或字符串在线生成"><a href="#随机密码或字符串在线生成" class="headerlink" title="随机密码或字符串在线生成"></a>随机密码或字符串在线生成</h2><ul>
<li><a href="https://suijimimashengcheng.bmcx.com/">https://suijimimashengcheng.bmcx.com/</a></li>
</ul>
<p>可以使用 shell 命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl rand -<span class="built_in">base64</span></span></span><br><span class="line">Usage: rand [options] num</span><br><span class="line">where options are</span><br><span class="line">-out file             - write to file</span><br><span class="line">-engine e             - use engine e, possibly a hardware device.</span><br><span class="line">-rand file:file:... - seed PRNG from files</span><br><span class="line">-base64               - base64 encode output</span><br><span class="line">-hex                  - hex encode output</span><br></pre></td></tr></table></figure>
<p>具体示例，生成 8 位随机字符串</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl rand -<span class="built_in">base64</span> 8</span></span><br><span class="line">HEoK6ZRtD7o=</span><br></pre></td></tr></table></figure>

<h2 id="域名-whois-信息在线查询"><a href="#域名-whois-信息在线查询" class="headerlink" title="域名 whois 信息在线查询"></a>域名 whois 信息在线查询</h2><ul>
<li><a href="https://lookup.icann.org/">WHOIS Lookup by ICANN</a>  ICANN 是国际域名与地址分配机构</li>
<li><a href="https://whois.chinaz.com/">https://whois.chinaz.com/</a></li>
</ul>
<h2 id="查询出口-ip-地址"><a href="#查询出口-ip-地址" class="headerlink" title="查询出口 ip 地址"></a>查询出口 ip 地址</h2><ul>
<li><a href="https://whoer.net/zh">https://whoer.net/zh</a></li>
<li><a href="https://whatismyipaddress.com/">https://whatismyipaddress.com/</a></li>
<li><a href="https://ip-api.com/docs/api:json">ip-api.com</a>  主要用于查询 IP 地址相关信息的 API，比如地理位置、ASN、ISP 等</li>
</ul>
<h2 id="JSON-在线校验及格式化"><a href="#JSON-在线校验及格式化" class="headerlink" title="JSON 在线校验及格式化"></a>JSON 在线校验及格式化</h2><ul>
<li><a href="https://jsoneditoronline.org/">https://jsoneditoronline.org/</a></li>
</ul>
<h2 id="证书工具"><a href="#证书工具" class="headerlink" title="证书工具"></a>证书工具</h2><h3 id="查看证书内容"><a href="#查看证书内容" class="headerlink" title="查看证书内容"></a>查看证书内容</h3><ul>
<li><a href="https://myssl.com/cert_decode.html">https://myssl.com/cert_decode.html</a></li>
</ul>
<h3 id="查询证书和私钥是否匹配"><a href="#查询证书和私钥是否匹配" class="headerlink" title="查询证书和私钥是否匹配"></a>查询证书和私钥是否匹配</h3><ul>
<li><a href="https://myssl.com/match_key.html">https://myssl.com/match_key.html</a></li>
</ul>
<h2 id="centos-系列-rpm-包下载地址"><a href="#centos-系列-rpm-包下载地址" class="headerlink" title="centos 系列 rpm 包下载地址"></a>centos 系列 rpm 包下载地址</h2><ul>
<li><a href="http://rpmfind.net/linux/RPM/">http://rpmfind.net/linux/RPM/</a></li>
</ul>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title>tcp/udp 端口连通性测试</title>
    <url>/202210241127/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Centos-下安装"><a href="#Centos-下安装" class="headerlink" title="Centos 下安装"></a>Centos 下安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y nc</span><br></pre></td></tr></table></figure>

<h3 id="Windows-下安装"><a href="#Windows-下安装" class="headerlink" title="Windows 下安装"></a>Windows 下安装</h3><p>Windows 下需要 <a href="https://eternallybored.org/misc/netcat/">下载 netcat 运行程序</a></p>
<p>下载后直接解压，将 <code>nc.exe</code> 复制到 <code>C:\Windows\System32</code> 目录或将 <code>nc.exe</code> 添加到系统 path 环境变量中</p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-v</code> <br/><code>-vvv</code></td>
<td>打印详细信息</td>
<td></td>
</tr>
<tr>
<td><code>-t</code></td>
<td>使用 TCP 协议，默认为 TCP 协议</td>
<td></td>
</tr>
<tr>
<td><code>-u</code></td>
<td>使用 UDP 协议，默认为 TCP 协议</td>
<td></td>
</tr>
<tr>
<td><code>-z</code></td>
<td>不发送数据，效果为立即关闭连接，快速得出测试结果</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p><em><strong>注意事项</strong></em>：客户端测试使用 <code>localhost</code> 作为主机名时，会优先被解析为 IPv6 地址，如果端口监听在 IPv4 地址，会导致测试结果不可达</p>
</blockquote>
<h3 id="测试-udp-端口连通性"><a href="#测试-udp-端口连通性" class="headerlink" title="测试 udp 端口连通性"></a>测试 udp 端口连通性</h3><p>以下输出表示端口<strong>可达</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nc -vuz ip/domain 8472</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Connected to ip:8472.</span><br><span class="line">Ncat: UDP packet sent successfully</span><br><span class="line">Ncat: 1 bytes sent, 0 bytes received in 2.01 seconds.</span><br></pre></td></tr></table></figure>
<p>以下输出表示端口<strong>不可达</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nc -vuz 127.0.0.1 8473</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Connected to 127.0.0.1:8473.</span><br><span class="line">Ncat: Connection refused.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>netcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 系列软件包管理命令</title>
    <url>/202307031141/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在 Ubuntu 上安装软件包主要通过使用 <code>apt</code> 命令来完成。<code>apt</code> 是高级包装工具（Advanced Package Tool）的缩写，提供了一个易用的命令行界面，用于处理软件包的安装、更新和删除等操作。</p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Ubuntu 22</li>
</ul>
<h1 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h1><h2 id="查看软件包信息"><a href="#查看软件包信息" class="headerlink" title="查看软件包信息"></a>查看软件包信息</h2><ul>
<li><p>查看系统已安装的软件包</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt list --installed</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>apt list</code> 列出系统上所有可用的软件包，包括<strong>已安装的软件包</strong>和<strong>可供安装的软件包</strong></p>
</blockquote>
</li>
<li><p>列出特定的软件包</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt list &lt;package-name&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>搜索特定软件包是否已安装</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt list --installed  &lt;package-name&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>查看软件包的依赖关系</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt depends &lt;package_name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h2><ul>
<li>下载软件包但不安装  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt download &lt;package_name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h2><ul>
<li><p>更新软件包列表。在安装新软件包之前，最好先更新本地软件包列表，以确保你安装的是最新版本的软件包。</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<p>此命令会从配置的源中检索新的软件包列表。</p>
</li>
<li><p>安装软件包。安装软件包的基本命令格式为：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install &lt;package_name&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>安装特定版本的软件包</p>
<p>  如果你需要安装软件包的特定版本，可以通过指定版本号来完成安装。首先，使用 <code>apt policy</code> 命令查找可用版本</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt policy &lt;package_name&gt;</span><br></pre></td></tr></table></figure>
<p>  然后，安装特定版本的软件包</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install &lt;package_name&gt;=&lt;version&gt;</span><br><span class="line"></span><br><span class="line">sudo apt install nginx=1.18.0-0ubuntu1</span><br></pre></td></tr></table></figure></li>
<li><p>安装推荐的软件包。</p>
<p>  当安装某些软件包时，APT 可能会建议安装一些推荐的软件包以增强功能。<em><strong>默认情况下，<code>apt install</code> 命令会安装推荐的软件包。</strong></em> 如果你不想安装推荐的软件包，可以使用 <code>--no-install-recommends</code> 选项</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install --no-install-recommends &lt;package_name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="卸载软件包"><a href="#卸载软件包" class="headerlink" title="卸载软件包"></a>卸载软件包</h2><ul>
<li><p>卸载软件包但保留配置文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove &lt;package_name&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>卸载软件包并删除配置文件。<strong>如果相关目录不为空，将不会删除，会输出提示</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt purge &lt;package_name&gt;</span><br></pre></td></tr></table></figure>
<p>或者</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove --purge &lt;package_name&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>清理未使用的依赖包</p>
<p>  当你卸载一个软件包时，它可能会留下一些不再需要的依赖软件包。为了清理这些不再使用的依赖，可以执行：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure>
<p>这个命令会检查并自动删除那些被安装为其他软件包依赖但现在不再被任何已安装软件包需要的软件包。</p>
</li>
</ul>
<h1 id="dpkg"><a href="#dpkg" class="headerlink" title="dpkg"></a>dpkg</h1><p>列出系统上已安装的软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg -l</span><br></pre></td></tr></table></figure>

<p>查找文件所属的软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg -S /path/to/file</span><br></pre></td></tr></table></figure>

<h1 id="APT-仓库管理"><a href="#APT-仓库管理" class="headerlink" title="APT 仓库管理"></a>APT 仓库管理</h1><p>APT 通过读取配置文件（主要是 <code>/etc/apt/sources.list</code> 和 <code>/etc/apt/sources.list.d/*.list</code>）来获取软件包仓库（repository）的信息。</p>
<p>APT 的软件源配置文件是 <code>/etc/apt/sources.list</code> ，此外还可以包含 <code>/etc/apt/sources.list.d/</code> 目录下的 <code>.list</code> 文件。这些文件定义了 APT 从哪里下载软件包和更新信息。</p>
<p>一个典型的 <code>sources.list</code> 条目格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb [options] url distribution component1 component2 component3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>deb</code>：表示这是一个二进制软件包的仓库，对应的 <code>deb-src</code> 表示源代码仓库。</li>
<li><code>options</code>：可选项，例如可以指定架构。</li>
<li><code>url</code>：仓库的 URL。</li>
<li><code>distribution</code>：发行版的代号，如 <code>focal</code>、<code>buster</code> 等。</li>
<li><code>component</code> ：仓库中的组成部分，如 <code>main</code>、<code>restricted</code> 等。</li>
</ul>
<h2 id="Repository-的类型"><a href="#Repository-的类型" class="headerlink" title="Repository 的类型"></a>Repository 的类型</h2><p>在 APT 的上下文中，软件包仓库是网络或本地的存储位置，它们存储了软件包及其元数据。主要有以下几种类型的仓库：</p>
<ul>
<li><code>Main</code>：官方支持的免费软件。</li>
<li><code>Universe</code>：社区维护的免费软件。</li>
<li><code>Restricted</code>：官方支持的非自由软件。</li>
<li><code>Multiverse</code>：非自由软件，不包括官方支持。</li>
</ul>
<h2 id="添加新的软件源"><a href="#添加新的软件源" class="headerlink" title="添加新的软件源"></a>添加新的软件源</h2><p>要添加新的软件源，你可以直接编辑 <code>sources.list</code> 文件或在 <code>sources.list.d/</code> 目录下创建一个新的 <code>.list</code> 文件。例如，添加一个新的 PPA（Personal Package Archive）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:&lt;repository_name&gt;</span><br></pre></td></tr></table></figure>
<p>这个命令不仅会添加软件源，还会自动导入仓库的公钥，确保软件包的安全性。</p>
<h2 id="删除软件源"><a href="#删除软件源" class="headerlink" title="删除软件源"></a>删除软件源</h2><p>要删除软件源，可以直接编辑 <code>sources.list</code> 文件或删除 <code>sources.list.d/</code> 目录下相应的 <code>.list</code> 文件。之后，运行 <code>sudo apt update</code> 来更新软件包列表。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 中的 zip 类型压缩文件，linux 中 unzip 解压后文件名乱码</title>
    <url>/202208240911/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>centos 7</li>
</ul>
<p>在 windows 系统添加到 zip 类型的压缩文件，上传到 Linux，使用 <code>unzip</code> 解压后，文件名乱码  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">unzip 测试文档.zip</span></span><br><span class="line">Archive:  测试文档.zip</span><br><span class="line">  inflating: ═°╦▐╫╩╘┤╬┤╝╙├▄├╗╙╨╙├╡╜╡─┴╨▒э.csv</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>主要的原因是因为 <code>unzip</code> 在解压的时候会将编码转化为其内部默认的编码，而默认的编码根本不支持中文 <code>CP936</code> 编码。因此我们需要在解压的时候明确的指定需要使用的编码。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">unzip -O CP936 测试文档.zip</span> </span><br><span class="line">Archive:  测试文档.zip</span><br><span class="line">  inflating: 测试文档.csv  </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>unzip</tag>
      </tags>
  </entry>
  <entry>
    <title>Vault 概念</title>
    <url>/202307111710/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Policy"><a href="#Policy" class="headerlink" title="Policy"></a>Policy</h1><p>Vault 模拟了一个文件系统，Vault 中的所有信息，包括 Secret、配置等，都是依照各自的路径来使用和授权的。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Vault 中文参考手册-策略](https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/9.%E7%AD%96%E7%95%A5.html)">[1]</span></a></sup></p>
<p>使用 Vault 策略，可以使用声明式的语法来赋予或者禁止对特定路径的特定操作。Vault 策略默认情况下拒绝一切访问，所以一个空的策略不会赋予对系统的任何访问权限。 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Vault 中文参考手册-策略](https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/9.%E7%AD%96%E7%95%A5.html)">[1]</span></a></sup></p>
<p><a href="https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/9.%E7%AD%96%E7%95%A5.html">身份认证及授权流程</a></p>
<h2 id="策略语法"><a href="#策略语法" class="headerlink" title="策略语法"></a>策略语法</h2><p>策略使用 HCL 或者 Json 语法编写，描述了一个人或者应用程序允许访问 Vault 中的哪些路径 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Vault 中文参考手册-策略](https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/9.%E7%AD%96%E7%95%A5.html)">[1]</span></a></sup></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/9.%E7%AD%96%E7%95%A5.html">Vault 中文参考手册-策略</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/9.%E7%AD%96%E7%95%A5.html">Vault 中文参考手册-策略</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>Vault</category>
      </categories>
      <tags>
        <tag>Vault</tag>
      </tags>
  </entry>
  <entry>
    <title>Vault Policy</title>
    <url>/202307131545/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>策略使用 HCL 或是 JSON 语法编写，描述了一个人类用户或是应用程序允许访问 Vault 中哪些路径。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[策略语法](https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/9.%E7%AD%96%E7%95%A5.html)">[1]</span></a></sup></p>
<h1 id="策略管理"><a href="#策略管理" class="headerlink" title="策略管理"></a>策略管理</h1><h2 id="创建策略"><a href="#创建策略" class="headerlink" title="创建策略"></a>创建策略</h2><p>命令格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault policy write policy-name policy-file.hcl</span></span><br></pre></td></tr></table></figure>
<p>以下示例创建一个只读策略</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> readonly_policy.hcl</span> </span><br><span class="line">path &quot;kv/*&quot; &#123;</span><br><span class="line">    capabilities = [&quot;read&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault policy write readonly_policy readonly_policy.hcl</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>更新策略使用和创建策略一样的命令，使用的是已有的策略名</strong></p>
<h2 id="查看策略"><a href="#查看策略" class="headerlink" title="查看策略"></a>查看策略</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault policy list</span></span><br><span class="line">default</span><br><span class="line">readonly_policy</span><br><span class="line">root</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>读取策略内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault policy <span class="built_in">read</span> readonly_policy</span></span><br><span class="line">path &quot;kv/*&quot; &#123;</span><br><span class="line">    capabilities = [&quot;read&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="关联策略"><a href="#关联策略" class="headerlink" title="关联策略"></a>关联策略</h2><h3 id="创建-token-时关联策略"><a href="#创建-token-时关联策略" class="headerlink" title="创建 token 时关联策略"></a>创建 token 时关联策略</h3><p>使用以下命令在创建 token 时附加策略，否则创建的 token 默认关联当前身份(如 token)的策略</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault token create -policy=readonly_policy -policy=logs</span></span><br><span class="line"></span><br><span class="line">Key                  Value</span><br><span class="line">---                  -----</span><br><span class="line">token                hvs.CAESICUghHrXAe3mFG9YEnEq8IXdtGPN-63VRRxqPOEzidpvGh4KHGh2cy5RMUhkbmU1M2FFdk52a3lFRTNiMmR6Um8</span><br><span class="line">token_accessor       iRixdShkSeHNTgS5JBLWW2Ta</span><br><span class="line">token_duration       768h</span><br><span class="line">token_renewable      true</span><br><span class="line">token_policies       [&quot;default&quot; &quot;logs&quot; &quot;readonly_policy&quot;]</span><br><span class="line">identity_policies    []</span><br><span class="line">policies             [&quot;default&quot; &quot;logs&quot; &quot;readonly_policy&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>关联策略时，如果关联的策略不存在，创建 token 只会给出相关策略不存在的 warnning，创建 token 不会失败</strong></p>
</blockquote>
<p>使用新建的 token 登陆并尝试更新相关键</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault login</span></span><br><span class="line">Token (will be hidden):</span><br><span class="line">Success! You are now authenticated. The token information displayed below</span><br><span class="line">is already stored in the token helper. You do NOT need to run &quot;vault login&quot;</span><br><span class="line">again. Future Vault requests will automatically use this token.</span><br><span class="line"></span><br><span class="line">Key                  Value</span><br><span class="line">---                  -----</span><br><span class="line">token                hvs.CAESICUghHrXAe3mFG9YEnEq8IXdtGPN-63VRRxqPOEzidpvGh4KHGh2cy5RMUhkbmU1M2FFdk52a3lFRTNiMmR6Um8</span><br><span class="line">token_accessor       iRixdShkSeHNTgS5JBLWW2Ta</span><br><span class="line">token_duration       767h55m32s</span><br><span class="line">token_renewable      true</span><br><span class="line">token_policies       [&quot;default&quot; &quot;logs&quot; &quot;readonly_policy&quot;]</span><br><span class="line">identity_policies    []</span><br><span class="line">policies             [&quot;default&quot; &quot;logs&quot; &quot;readonly_policy&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>读取键，可以看到只能读取键值，无法写入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv list</span></span><br><span class="line">Not enough arguments (expected 1, got 0)</span><br><span class="line">~/vault_policy $ vault kv list kv</span><br><span class="line">Error listing kv: Error making API request.</span><br><span class="line"></span><br><span class="line">URL: GET http://127.0.0.1:8200/v1/kv?list=true</span><br><span class="line">Code: 403. Errors:</span><br><span class="line"></span><br><span class="line">* 1 error occurred:</span><br><span class="line">	* permission denied</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv get kv/ms/fm/qzx/qzapp/api/config</span></span><br><span class="line">===== Data =====</span><br><span class="line">Key        Value</span><br><span class="line">---        -----</span><br><span class="line">db_host    127.0.0.1</span><br><span class="line">db_type    mysql</span><br><span class="line">db_user    password</span><br><span class="line">tk         test key</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv put kv/ms/fm/qzx/qzapp/api/config key=value</span></span><br><span class="line">Error writing data to kv/ms/fm/qzx/qzapp/api/config: Error making API request.</span><br><span class="line"></span><br><span class="line">URL: PUT http://127.0.0.1:8200/v1/kv/ms/fm/qzx/qzapp/api/config</span><br><span class="line">Code: 403. Errors:</span><br><span class="line"></span><br><span class="line">* 1 error occurred:</span><br><span class="line">	* permission denied</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/9.%E7%AD%96%E7%95%A5.html">Vault 中文参考</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/9.%E7%AD%96%E7%95%A5.html">策略语法</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>Vault</category>
      </categories>
      <tags>
        <tag>Vault</tag>
      </tags>
  </entry>
  <entry>
    <title>Vault 介绍及安装配置</title>
    <url>/202307100928/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Kubernetes 1.24</li>
<li>Vault 1.14.0</li>
</ul>
<h1 id="Vault-简介"><a href="#Vault-简介" class="headerlink" title="Vault 简介"></a>Vault 简介</h1><h2 id="Vault-架构及基础概念"><a href="#Vault-架构及基础概念" class="headerlink" title="Vault 架构及基础概念"></a>Vault 架构及基础概念</h2><p>Vault 的架构图如下 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Vault High-Level Overview](https://developer.hashicorp.com/vault/docs/internals/architecture)">[1]</span></a></sup><br><img src="https://i.csms.tech/img_196.png"></p>
<p>从以上架构图可以看到，几乎所有的 Vault 组件都被统称为 <code>Barrier</code> (屏障)</p>
<p>Vault 架构可以大体分为三个部分： <sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Vault的架构](https://lonegunmanb.github.io/essential-vault/1.%E4%BB%80%E4%B9%88%E6%98%AFvault/6.Vault%E7%9A%84%E6%9E%B6%E6%9E%84.html)">[7]</span></a></sup></p>
<ul>
<li><code>Sotrage Backend</code> - 存储后端</li>
<li><code>Barrier</code> - 屏障层</li>
<li><code>HTTPS API</code> - API 接口</li>
</ul>
<h3 id="常用概念"><a href="#常用概念" class="headerlink" title="常用概念"></a>常用概念</h3><p><code>Storage Backend</code> - Vault 自身不存储数据，因此需要一个存储后端(<code>Storage Backend</code>)，存储后端对 Vault 来说是不受信任的，只用来存储加密数据。 <sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[基本概念](https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html)">[8]</span></a></sup></p>
<p><code>Initialization</code> - Vault 在首次启动时需要初始化(<code>Initialization</code>)，这一步会生成一个 <code>Master Key</code>（加密密钥）用于加密数据，只有加密完成的数据才能保存到 <code>Storage Backend</code></p>
<p><code>Unseal</code> - Vault 启动后，因为不知道 <code>Master Key</code> (加密密钥)所以无法解密数据(可以访问 <code>Storage Backend</code> 上的数据)，这种状态被称为 <code>Sealed</code>(已封印)，在能解封(<code>Unseal</code>)数据之前，Vault 无法进行任何操作。<code>Unseal</code> 是获取 <code>Master Key</code> 明文的过程，通过 <code>Master Key</code> 可以解密 <code>Encryption Key</code> 从而可以解密存储的数据 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Vault 中文手册](https://lonegunmanb.github.io/essential-vault/1.%E4%BB%80%E4%B9%88%E6%98%AFvault/5.%E5%90%AF%E5%8A%A8%E6%A0%87%E5%87%86%E7%9A%84Vault%E6%9C%8D%E5%8A%A1.html)">[6]</span></a></sup></p>
<p><code>Master Key</code> - <code>Encryption Key</code> (用来加密存储的数据，加密密钥和加密数据被一同存储) 是被 <code>Master Key</code>(主密钥) 保护(加密)，必须提供 <code>Master Key</code>，Vault 才能解密出 <code>Encryption Key</code>，从而完成数据解密操作。<code>Master Key</code> 与其他 Vault 数据被存放在一起，但使用另一种机制进行加密：<strong>解封密钥</strong> ，解封密钥默认使用 <a href="https://en.wikipedia.org/wiki/Shamir%27s_secret_sharing">沙米尔密钥分割算法</a> 生成 <code>Key Shares</code> <sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[封印与解封](https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/2.%E5%B0%81%E5%8D%B0%E4%B8%8E%E8%A7%A3%E5%B0%81.html)">[9]</span></a></sup> </p>
<p><code>Key Shares</code> - 默认情况下，Vault 使用 <a href="https://en.wikipedia.org/wiki/Shamir%27s_secret_sharing">沙米尔密钥分割算法</a> 将 <code>Master Key</code> 的解封密钥分割成五个 <code>Key Shares</code>(分割密钥)，必须要提供其中任意的三个 <code>Key Shares</code> 才能重建 <code>Master Key</code>，以完成 <code>Unseal</code>(解封)操作 </p>
<blockquote>
<p><code>Key Shares</code>(分割密钥)的总数，以及重建 <code>Master Key</code>(主密钥)最少需要的分割密钥数量，都是可以调整的。 <strong>沙米尔密钥分割算法</strong> 也可以关闭，这样主密钥将被直接提供给管理员，管理员可直接使用它进行解封操作。</p>
</blockquote>
<h3 id="认证系统及权限系统处理流程"><a href="#认证系统及权限系统处理流程" class="headerlink" title="认证系统及权限系统处理流程"></a>认证系统及权限系统处理流程</h3><p>在解密出 <code>Encryption Key</code> 后，Vault 就可以处理客户端请求了。 HTTPS API 请求进入后的整个流程都由 <code>Vault Core</code> 管理，<code>Core</code> 会强制进行 ACL 检查，并确保 <code>Audit logging</code>(审计日志)完成记录。</p>
<p>客户端首次连接 Vault 时，需要首先完成身份认证，Vault 的 <code>Auth Method</code> 模块有很多的身份认证方法可选</p>
<ul>
<li>用户友好的认证方法，适合管理员使用，包括： <code>user/password</code>、<code>云服务商</code>、<code>ldap</code> 等，在创建用户的时候，需要为用户绑定 <code>Policy</code>，给予适合的权限</li>
<li>应用友好的方法，适合应用程序使用，包括： <code>public/private keys</code>、<code>token</code>、<code>kubernetes</code>、<code>jwt</code> 等</li>
</ul>
<p>身份验证请求经 <code>Core</code> 转发给 <code>Auth Method</code> 进行认证，<code>Auth Method</code> 判定请求身份是否有效并返回关联的策略(<code>ACL Policies</code>)的列表。</p>
<p><code>ACL Policies</code> 由 <code>Policy Store</code> 负责管理与存储，<code>Core</code> 负责进行 ACL 检查，ACl 的默认行为是 <code>Deny</code>，意味着除非明确配置 <code>ACL Policy</code> 允许某项操作，否则该操作将被拒绝。</p>
<p>在通过 <code>Auth Method</code> 进行认证，并返回了没有问题的 <code>ACL Policies</code> 后，<code>Token Store</code> 会生成并管理一个新的 <code>Token</code>，这个 <strong>凭证</strong> 会返回给客户端，用于客户端后续请求的身份信息。<code>Token</code> 都存在一个 <code>lease</code>(租期)。<code>Token</code> 关联了相关的 <code>ACL Policies</code>，这些策略将被用于验证请求的权限。</p>
<p>请求经过验证后，将被路由到 <code>Secret Engine</code>，如果 <code>Secret Engine</code> 返回了一个 <code>secret</code>，<code>Core</code> 将其注册到 <code>Expiration Manager</code>，并给它附件一个 <code>Lease ID</code>，<code>Lease ID</code> 被客户端用于更新(<code>renew</code>)或者吊销(<code>revoke</code>)它得到的 <code>secret</code>。如果客户端允许租约(<code>lease</code>) 到期，<code>Expiration Manager</code> 将自动吊销(<code>revoke</code>) 这个 <code>secret</code></p>
<h3 id="Secret-Engine"><a href="#Secret-Engine" class="headerlink" title="Secret Engine"></a>Secret Engine</h3><p><code>Secret Engine</code> 是保存、生成或者加密数据的组件，非常灵活。有的 <code>Secret Engin</code> 只是单纯的存储与读取数据，比如 <code>kv</code>(键值存储)就可以看作一个加密的 Redis。而其他的 <code>Secret Engine</code> 则可能连接到其他的服务并按需生成动态凭证等。</p>
<span id="more"></span>

<h1 id="Kubernetes-中安装-Vault"><a href="#Kubernetes-中安装-Vault" class="headerlink" title="Kubernetes 中安装 Vault"></a>Kubernetes 中安装 Vault</h1><p>官方建议使用 <a href="/202210071543/" title="Helm Chart">Helm Chart</a> 在 Kubernetes 安装 Vault <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Installing Vault](https://developer.hashicorp.com/vault/docs/platform/k8s/helm/run#install-vault)">[2]</span></a></sup></p>
<h2 id="安装-Vault"><a href="#安装-Vault" class="headerlink" title="安装 Vault"></a>安装 Vault</h2><ol>
<li><p>添加 <code>Hashicorp</code> 的 Helm 仓库并检查 <code>hashicorp/vault</code> 的 Chart</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm repo add hashicorp https://helm.releases.hashicorp.com</span></span><br><span class="line">&quot;hashicorp&quot; has been added to your repositories</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm search repo hashicorp/vault</span></span><br><span class="line">NAME            CHART VERSION   APP VERSION DESCRIPTION</span><br><span class="line">hashicorp/vault 0.24.0          1.13.1      Official HashiCorp Vault Chart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm search repo hashicorp/vault -l</span></span><br><span class="line">NAME                            	CHART VERSION	APP VERSION	DESCRIPTION                               </span><br><span class="line">hashicorp/vault                 	0.25.0       	1.14.0     	Official HashiCorp Vault Chart            </span><br><span class="line">hashicorp/vault                 	0.24.1       	1.13.1     	Official HashiCorp Vault Chart            </span><br><span class="line">hashicorp/vault                 	0.24.0       	1.13.1     	Official HashiCorp Vault Chart            </span><br><span class="line">hashicorp/vault                 	0.23.0       	1.12.1     	Official HashiCorp Vault Chart            </span><br><span class="line">hashicorp/vault                 	0.22.1       	1.12.0     	Official HashiCorp Vault Chart            </span><br><span class="line">hashicorp/vault                 	0.22.0       	1.11.3     	Official HashiCorp Vault Chart</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 Vault</p>
<p> 安装最新版本的 Vault。Vault 安装是有几种模式，分别对应不同的使用场景</p>
<ul>
<li><code>Dev mode</code> -  Helm Chart 将会运行一个 Vault Server ，<code>Storage Backend</code> 会使用 Memeory，仅用于学习环境 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Dev mode](https://developer.hashicorp.com/vault/docs/platform/k8s/helm/run#dev-mode)">[3]</span></a></sup></li>
<li><code>Standalone mode</code> - Helm Chart 默认运行的模式，将会安装一个 Vault Server，使用文件存储后端。</li>
<li><code>HA mode</code> - Helm Chart 将会安装 3 个 Vault Servers ，使用已有的 Consul Storage Backend，建议 Consul 也使用 Consul Helm Chart 安装。 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[HA mode](https://developer.hashicorp.com/vault/docs/platform/k8s/helm/run#ha-mode)">[4]</span></a></sup></li>
</ul>
<p> 以下命令安装 Vault，默认安装为最新版本，使用 <code>Standalone</code> 模式。<br> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm install vault hashicorp/vault</span><br></pre></td></tr></table></figure><br> 安装指定版本的 Vault<br> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm install vault hashicorp/vault --version 0.24.0</span><br></pre></td></tr></table></figure><br> 以下命令安装 Vault，默认安装为最新版本，使用 <code>Dev</code> 模式。<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm install vault hashicorp/vault \</span><br><span class="line">     --set &quot;server.dev.enabled=true&quot;</span><br></pre></td></tr></table></figure></p>
</li>
</ol>
<h2 id="初始化-Vault"><a href="#初始化-Vault" class="headerlink" title="初始化 Vault"></a>初始化 Vault</h2><p>Vault Helm Chart 安装了 <code>Standalone</code> 或者 <code>HA</code> 模式后，需要进行初始化操作，初始化操作会产生 <code>Share Keys</code>、<code>Master Key</code>、 <code>Encryption Key</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it vault-0 -- vault operator init</span></span><br><span class="line">Unseal Key 1: cs06exiIKAdCUtQb+X6qUqZB+QnsymfXAxgn9ri9sY</span><br><span class="line">Unseal Key 2: CFwLgUIr510fFTWUFhzjoN8Am/8zynqeh6ROXMJIC+</span><br><span class="line">Unseal Key 3: vTAtpYdUmFycNVCfsUwVKCY8svc0rnoEJPywBGqC7F</span><br><span class="line">Unseal Key 4: 7R0VWDtDs5xpPirnPBHNyAcHwrQMkxvcllwSyJcHek</span><br><span class="line">Unseal Key 5: /AIxSkqI/WGicMeawnceOQMXbhlp8EMICa0o6xby/O</span><br><span class="line"></span><br><span class="line">Initial Root Token: hvs.hTLJJ1xrsUgcSSj8ET0eAr</span><br><span class="line"></span><br><span class="line">Vault initialized with 5 key shares and a key threshold of 3. Please securely</span><br><span class="line">distribute the key shares printed above. When the Vault is re-sealed,</span><br><span class="line">restarted, or stopped, you must supply at least 3 of these keys to unseal it</span><br><span class="line">before it can start servicing requests.</span><br><span class="line"></span><br><span class="line">Vault does not store the generated root key. Without at least 3 keys to</span><br><span class="line">reconstruct the root key, Vault will remain permanently sealed!</span><br><span class="line"></span><br><span class="line">It is possible to generate new unseal keys, provided you have a quorum of</span><br><span class="line">existing unseal keys shares. See &quot;vault operator rekey&quot; for more information.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>初始化命令会产生 <code>Share Keys</code> 和 <code>Root Token</code>，默认至少使用 3  个 <code>Share Keys</code> 才能恢复 <code>Master Key</code></p>
<p>使用 3 个 <code>Share Keys</code>（默认的阈值为 3 个 <code>Share Keys</code> 恢复 <code>Master Key</code>） 对 Vault Server 进行解封操作(<code>Unseal</code>)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -ti vault-0 -- vault operator unseal</span> </span><br><span class="line">Unseal Key (will be hidden): </span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">Seal Type          shamir</span><br><span class="line">Initialized        true</span><br><span class="line">Sealed             true</span><br><span class="line">Total Shares       5</span><br><span class="line">Threshold          3</span><br><span class="line">Unseal Progress    1/3</span><br><span class="line">Unseal Nonce       a72a0446-3449-c8a9-a8af-74580f8e6aee</span><br><span class="line">Version            1.14.0</span><br><span class="line">Build Date         2023-06-19T11:40:23Z</span><br><span class="line">Storage Type       file</span><br><span class="line">HA Enabled         false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -ti vault-0 -- vault operator unseal</span> </span><br><span class="line">Unseal Key (will be hidden): </span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">Seal Type          shamir</span><br><span class="line">Initialized        true</span><br><span class="line">Sealed             true</span><br><span class="line">Total Shares       5</span><br><span class="line">Threshold          3</span><br><span class="line">Unseal Progress    2/3</span><br><span class="line">Unseal Nonce       a72a0446-3449-c8a9-a8af-74580f8e6aee</span><br><span class="line">Version            1.14.0</span><br><span class="line">Build Date         2023-06-19T11:40:23Z</span><br><span class="line">Storage Type       file</span><br><span class="line">HA Enabled         false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -ti vault-0 -- vault operator unseal</span> </span><br><span class="line">Unseal Key (will be hidden): </span><br><span class="line">Key             Value</span><br><span class="line">---             -----</span><br><span class="line">Seal Type       shamir</span><br><span class="line">Initialized     true</span><br><span class="line">Sealed          false</span><br><span class="line">Total Shares    5</span><br><span class="line">Threshold       3</span><br><span class="line">Version         1.14.0</span><br><span class="line">Build Date      2023-06-19T11:40:23Z</span><br><span class="line">Storage Type    file</span><br><span class="line">Cluster Name    vault-cluster-12faa106</span><br><span class="line">Cluster ID      59fe0817-641e-0ce1-4dfd-2e3f9cb265c7</span><br><span class="line">HA Enabled      false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>Sealed</code> 状态为 <code>false</code> 时，表示解封完成，Vault 即可开始处理请求。</p>
<h2 id="配置-UI-访问"><a href="#配置-UI-访问" class="headerlink" title="配置 UI 访问"></a>配置 UI 访问</h2><p>使用 Vault Helm Chart 部署后，会自动创建针对 UI (端口 8200) 的 Service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: vault</span><br><span class="line">  annotations:</span><br><span class="line">    meta.helm.sh/release-name: vault</span><br><span class="line">    meta.helm.sh/release-namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/instance: vault</span><br><span class="line">    app.kubernetes.io/managed-by: Helm</span><br><span class="line">    app.kubernetes.io/name: vault</span><br><span class="line">    helm.sh/chart: vault-0.25.0</span><br><span class="line">  namespace: default</span><br><span class="line">  </span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app.kubernetes.io/instance: vault</span><br><span class="line">    app.kubernetes.io/name: vault</span><br><span class="line">    component: server</span><br><span class="line">  internalTrafficPolicy: Cluster</span><br><span class="line">  ipFamilies:</span><br><span class="line">    - IPv4</span><br><span class="line">  ipFamilyPolicy: SingleStack</span><br><span class="line">  ports:</span><br><span class="line">    - name: http</span><br><span class="line">      port: 8200</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: 8200</span><br><span class="line">    - name: https-internal</span><br><span class="line">      port: 8201</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: 8201</span><br><span class="line"></span><br><span class="line">  publishNotReadyAddresses: true</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  type: ClusterIP</span><br></pre></td></tr></table></figure>
<p>要 Kubernetes 集群外部访问 UI，只需要配置对应的 Ingress Nginx 即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  </span><br><span class="line">  name: vault-ui</span><br><span class="line">  namespace: default</span><br><span class="line">  </span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">  - host: vault-ui.test.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          service:</span><br><span class="line">            name: vault</span><br><span class="line">            port:</span><br><span class="line">              number: 8200</span><br><span class="line">        path: /</span><br><span class="line">        pathType: Prefix</span><br></pre></td></tr></table></figure>
<p>配置之后，访问 UI 域名，即可打开 Vault UI，使用初始化时生产的 <code>Master Key</code> 即可登陆 UI （登陆 <code>Method</code> 选择 <code>Token</code>）<br><img src="https://i.csms.tech/img_197.png"></p>
<h1 id="Vault-管理"><a href="#Vault-管理" class="headerlink" title="Vault 管理"></a>Vault 管理</h1><h2 id="查看-Vault-状态"><a href="#查看-Vault-状态" class="headerlink" title="查看 Vault 状态"></a>查看 Vault 状态</h2><p><code>vault status</code> 命令可以查看 Vault 状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault status</span></span><br><span class="line">Key             Value</span><br><span class="line">---             -----</span><br><span class="line">Seal Type       shamir</span><br><span class="line">Initialized     true</span><br><span class="line">Sealed          false</span><br><span class="line">Total Shares    5</span><br><span class="line">Threshold       3</span><br><span class="line">Version         1.14.0</span><br><span class="line">Build Date      2023-06-19T11:40:23Z</span><br><span class="line">Storage Type    file</span><br><span class="line">Cluster Name    vault-cluster-12faa106</span><br><span class="line">Cluster ID      59fe0817-641e-0ce1-4dfd-2e3f9cb265c7</span><br><span class="line">HA Enabled      false</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>vault status</code> 命令输出显示，当前 Vault 已完成初始化，并处于 <code>Unsealed</code> 解封状态 <code>Sealed false</code>，Seal 使用的是 <code>Shamir</code> 密钥分割算法，需要提供 5 条<code>Share Keys</code> 中的 3 条才能解封出 Master Key。Storage Backend 使用 <code>file</code> 类型。 <sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Vault 中文手册](https://lonegunmanb.github.io/essential-vault/1.%E4%BB%80%E4%B9%88%E6%98%AFvault/5.%E5%90%AF%E5%8A%A8%E6%A0%87%E5%87%86%E7%9A%84Vault%E6%9C%8D%E5%8A%A1.html)">[6]</span></a></sup></p>
<h2 id="secrets-管理"><a href="#secrets-管理" class="headerlink" title="secrets 管理"></a>secrets 管理</h2><h3 id="启用-secrets"><a href="#启用-secrets" class="headerlink" title="启用 secrets"></a>启用 secrets</h3><p>启用 <code>transit</code> 引擎 <sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[加密即服务](https://lonegunmanb.github.io/essential-vault/9.%E5%AE%9E%E9%99%85%E6%A1%88%E4%BE%8B/1.%E5%8A%A0%E5%AF%86%E5%8D%B3%E6%9C%8D%E5%8A%A1.html)">[11]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault secrets <span class="built_in">enable</span> transit</span></span><br><span class="line">Success! Enabled the transit secrets engine at: transit/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Vault 模拟了一个文件系统，各个 <code>Secret Engine</code> 启用后默认被挂载到 <code>Secret Engine</code> 名称路径下，以上示例启用 <code>transit</code> 加密引擎后，默认挂载点是 <code>transit/</code> <sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[加密即服务](https://lonegunmanb.github.io/essential-vault/9.%E5%AE%9E%E9%99%85%E6%A1%88%E4%BE%8B/1.%E5%8A%A0%E5%AF%86%E5%8D%B3%E6%9C%8D%E5%8A%A1.html)">[11]</span></a></sup></p>
<p>同一个 <code>Secret Engine</code> 可以被挂载到不同的路径，每个路径下的数据都彼此独立。</p>
<h3 id="列出启用的-Secret-Engine"><a href="#列出启用的-Secret-Engine" class="headerlink" title="列出启用的 Secret Engine"></a>列出启用的 Secret Engine</h3><p>以下命令列出系统上已经启用的 <code>Secret Engine</code> 及信息（挂载路径、类型等）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault secrets list</span></span><br><span class="line">Path          Type         Accessor              Description</span><br><span class="line">----          ----         --------              -----------</span><br><span class="line">cubbyhole/    cubbyhole    cubbyhole_e5c17df6    per-token private secret storage</span><br><span class="line">identity/     identity     identity_f0404cf8     identity store</span><br><span class="line">sys/          system       system_053aea79       system endpoints used for control, policy and debugging</span><br><span class="line">transit/      transit      transit_aaaaf63d      n/a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault write -f transit/keys/orders</span></span><br><span class="line">Key                       Value</span><br><span class="line">---                       -----</span><br><span class="line">allow_plaintext_backup    false</span><br><span class="line">auto_rotate_period        0s</span><br><span class="line">deletion_allowed          false</span><br><span class="line">derived                   false</span><br><span class="line">exportable                false</span><br><span class="line">imported_key              false</span><br><span class="line">keys                      map[1:1689133014]</span><br><span class="line">latest_version            1</span><br><span class="line">min_available_version     0</span><br><span class="line">min_decryption_version    1</span><br><span class="line">min_encryption_version    0</span><br><span class="line">name                      orders</span><br><span class="line">supports_decryption       true</span><br><span class="line">supports_derivation       true</span><br><span class="line">supports_encryption       true</span><br><span class="line">supports_signing          false</span><br><span class="line">type                      aes256-gcm96</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault list transit/keys</span></span><br><span class="line">Keys</span><br><span class="line">----</span><br><span class="line">orders</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Vault-服务配置说明"><a href="#Vault-服务配置说明" class="headerlink" title="Vault 服务配置说明"></a>Vault 服务配置说明</h1><p>除非使用 <code>dev</code> 模式运行，否则 Vault 服务使用配置文件进行配置，配置文件使用 HCL 或者 JSON 格式。 <sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Vault 配置文件](https://lonegunmanb.github.io/essential-vault/4.%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/overview.html)">[10]</span></a></sup></p>
<p>在 Kubernetes 上使用 <code>Standalone</code> 模式运行，<code>Storage Backend</code> 使用 <code>file</code> 的 Vault 服务默认配置文件如下</p>
<figure class="highlight shell"><figcaption><span>extraconfig-from-values.hcl</span></figcaption><table><tr><td class="code"><pre><span class="line">disable_mlock = true</span><br><span class="line">ui = true</span><br><span class="line"></span><br><span class="line">listener &quot;tcp&quot; &#123;</span><br><span class="line">  tls_disable = 1</span><br><span class="line">  address = &quot;[::]:8200&quot;</span><br><span class="line">  cluster_address = &quot;[::]:8201&quot;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Enable unauthenticated metrics access (necessary <span class="keyword">for</span> Prometheus Operator)</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">telemetry &#123;</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"> unauthenticated_metrics_access = <span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">storage &quot;file&quot; &#123;</span><br><span class="line">  path = &quot;/vault/data&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Example configuration <span class="keyword">for</span> using auto-unseal, using Google Cloud KMS. The</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GKMS keys must already exist, and the cluster must have a service account</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that is authorized to access GCP KMS.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">seal <span class="string">&quot;gcpckms&quot;</span> &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  project     = <span class="string">&quot;vault-helm-dev&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  region      = <span class="string">&quot;global&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  key_ring    = <span class="string">&quot;vault-helm-unseal-kr&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  crypto_key  = <span class="string">&quot;vault-helm-unseal-key&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Example configuration <span class="keyword">for</span> enabling Prometheus metrics <span class="keyword">in</span> your config.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">telemetry &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> prometheus_retention_time = <span class="string">&quot;30s&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> disable_hostname = <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&#125;</span></span><br></pre></td></tr></table></figure>


<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="pod-has-unbound-immediate-PersistentVolumeClaims"><a href="#pod-has-unbound-immediate-PersistentVolumeClaims" class="headerlink" title="pod has unbound immediate PersistentVolumeClaims"></a>pod has unbound immediate PersistentVolumeClaims</h2><p>使用 Vault Helm Chart 部署 Vault 后，Pod 状态为 <code>Pending</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -o wide</span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE    IP             NODE                NOMINATED NODE   READINESS GATES</span><br><span class="line">vault-0                                 0/1     Pending   0          105s   &lt;none&gt;         &lt;none&gt;              &lt;none&gt;           &lt;none&gt;</span><br><span class="line">vault-agent-injector-6549d85b8f-8n4ql   1/1     Running   0          106s   10.244.4.204   k8s-worker1         &lt;none&gt;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>检查 Pod 的相信描述信息，<code>Pending</code> 的原因为没有绑定到合适的 PV： <code>0/5 nodes are available: 5 pod has unbound immediate PersistentVolumeClaims</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">$ kubectl describe pod vault-0</span></span><br><span class="line">Name:           vault-0</span><br><span class="line">Namespace:      default</span><br><span class="line">Priority:       0</span><br><span class="line">Node:           &lt;none&gt;</span><br><span class="line">Labels:         app.kubernetes.io/instance=vault</span><br><span class="line">                app.kubernetes.io/name=vault</span><br><span class="line">                component=server</span><br><span class="line">                controller-revision-hash=vault-546b6ddf48</span><br><span class="line">                helm.sh/chart=vault-0.25.0</span><br><span class="line">                statefulset.kubernetes.io/pod-name=vault-0</span><br><span class="line">Annotations:    &lt;none&gt;</span><br><span class="line">Status:         Pending</span><br><span class="line">...</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status</span><br><span class="line">  PodScheduled   False </span><br><span class="line">Volumes:</span><br><span class="line">  data:</span><br><span class="line">    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)</span><br><span class="line">    ClaimName:  data-vault-0</span><br><span class="line">    ReadOnly:   false</span><br><span class="line">  config:</span><br><span class="line">    Type:      ConfigMap (a volume populated by a ConfigMa p)</span><br><span class="line">    Name:      vault-config</span><br><span class="line">    Optional:  false</span><br><span class="line">  home:</span><br><span class="line">    Type:       EmptyDir (a temporary directory that shares a pod&#x27;s lifetime)</span><br><span class="line">    Medium:     </span><br><span class="line">    SizeLimit:  &lt;unset&gt;</span><br><span class="line">  kube-api-access-5hvcw:</span><br><span class="line">    Type:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    TokenExpirationSeconds:  3607</span><br><span class="line">    ConfigMapName:           kube-root-ca.crt</span><br><span class="line">    ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">    DownwardAPI:             true</span><br><span class="line">QoS Class:                   BestEffort</span><br><span class="line">Node-Selectors:              &lt;none&gt;</span><br><span class="line">Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s</span><br><span class="line">                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason            Age   From               Message</span><br><span class="line">  ----     ------            ----  ----               -------</span><br><span class="line">  Warning  FailedScheduling  2m9s  default-scheduler  0/5 nodes are available: 5 pod has unbound immediate PersistentVolumeClaims. preemption: 0/5 nodes are available: 5 Preemption is not helpful for scheduling.</span><br></pre></td></tr></table></figure>

<p>检查 Vault 的 Pod 的 <code>StatefuleSet</code> 配置信息，可以看到其需要一个 PV。根据 PVC 的需求创建 PV 后，Pod 状态变为 <code>Running</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl edit statefulsets vault</span></span><br><span class="line">...</span><br><span class="line">volumeClaimTemplates:</span><br><span class="line">  - apiVersion: v1</span><br><span class="line">    kind: PersistentVolumeClaim</span><br><span class="line">    metadata:</span><br><span class="line">      creationTimestamp: null</span><br><span class="line">      name: data</span><br><span class="line">    spec:</span><br><span class="line">      accessModes:</span><br><span class="line">      - ReadWriteOnce</span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 10Gi</span><br><span class="line">      volumeMode: Filesystem</span><br><span class="line">    status:</span><br><span class="line">      phase: Pending</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://thiscute.world/posts/experience-of-vault/#4-vault-agent-%E9%85%8D%E7%BD%AE">secrets 管理工具 Vault 的介绍、安装及使用</a></p>
<p><a href="https://lonegunmanb.github.io/essential-vault/">Vault 中文手册</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.hashicorp.com/vault/docs/internals/architecture">Vault High-Level Overview</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.hashicorp.com/vault/docs/platform/k8s/helm/run#install-vault">Installing Vault</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.hashicorp.com/vault/docs/platform/k8s/helm/run#dev-mode">Dev mode</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.hashicorp.com/vault/docs/platform/k8s/helm/run#ha-mode">HA mode</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.hashicorp.com/vault/docs/platform/k8s/helm/run#initialize-and-unseal-vault">Initialize and unseal Vault</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lonegunmanb.github.io/essential-vault/1.%E4%BB%80%E4%B9%88%E6%98%AFvault/5.%E5%90%AF%E5%8A%A8%E6%A0%87%E5%87%86%E7%9A%84Vault%E6%9C%8D%E5%8A%A1.html">Vault 中文手册</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lonegunmanb.github.io/essential-vault/1.%E4%BB%80%E4%B9%88%E6%98%AFvault/6.Vault%E7%9A%84%E6%9E%B6%E6%9E%84.html">Vault的架构</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html">基本概念</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lonegunmanb.github.io/essential-vault/2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/2.%E5%B0%81%E5%8D%B0%E4%B8%8E%E8%A7%A3%E5%B0%81.html">封印与解封</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lonegunmanb.github.io/essential-vault/4.%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/overview.html">Vault 配置文件</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lonegunmanb.github.io/essential-vault/9.%E5%AE%9E%E9%99%85%E6%A1%88%E4%BE%8B/1.%E5%8A%A0%E5%AF%86%E5%8D%B3%E6%9C%8D%E5%8A%A1.html">加密即服务</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>Vault</category>
      </categories>
      <tags>
        <tag>Vault</tag>
      </tags>
  </entry>
  <entry>
    <title>Vault Secrets Engine</title>
    <url>/202307121444/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Kubernetes 1.24</li>
<li>Vault 1.14.0</li>
</ul>
<h1 id="kv"><a href="#kv" class="headerlink" title="kv"></a>kv</h1><p><code>Key/Value</code> 机密引擎是一个通用的键值存储，用于在 Vault 使用的物理存储中存储任意秘密。该后端可以以两种模式之一运行 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Key / Value](https://lonegunmanb.github.io/essential-vault/6.%E6%9C%BA%E5%AF%86%E5%BC%95%E6%93%8E/7.KV.html)">[1]</span></a></sup></p>
<ul>
<li><code>kv v1</code> - 可以将其配置为存储密钥的单个值，只有最近写入的值会被保存下来</li>
<li><code>kv v2</code> - 开启版本控制并存储每个键的一定数量版本的值。默认保留 10 个版本的值。</li>
</ul>
<h2 id="kv-Version-1"><a href="#kv-Version-1" class="headerlink" title="kv Version 1"></a>kv Version 1</h2><p>Version 1 的 KV Secret Engine 相比 v2 版本，有以下限制：</p>
<ul>
<li>不能使用 <code>vault kv</code> 的 <code>metadata</code>、<code>patch</code> 命令</li>
<li>使用 <code>vault kv put</code> 写入的值会覆盖之前的内容，即只保存了最后一次写入的值。</li>
</ul>
<p>启用 version 1 的 kv 存储，没有 <code>-version</code> 选项时默认开启 version 1 版本的 kv：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault secrets <span class="built_in">enable</span> -version=1 kv</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>与其他 Secret Engine 不同，kv 机密引擎不会强制执行 TTL 过期。即使设置了 <code>ttl</code>，kv Secret Engine 也不会自行删除数据。</strong> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Key / Value](https://lonegunmanb.github.io/essential-vault/6.%E6%9C%BA%E5%AF%86%E5%BC%95%E6%93%8E/7.KV.html)">[1]</span></a></sup></p>
</blockquote>
<h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv put kv/mycorp/mydepartment/myproject/myapp/myapp-api/config db_type=mysql</span></span><br><span class="line">Success! Data written to: kv/mycorp/mydepartment/myproject/myapp/myapp-api/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv put kv/mycorp/mydepartment/myproject/myapp/myapp-api/config db_host=127.0.0.1</span></span><br><span class="line">Success! Data written to: kv/mycorp/mydepartment/myproject/myapp/myapp-api/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv put kv/mycorp/mydepartment/myproject/myapp/myapp-api/config db_port=3306</span></span><br><span class="line">Success! Data written to: kv/mycorp/mydepartment/myproject/myapp/myapp-api/config</span><br></pre></td></tr></table></figure>

<h3 id="列出键"><a href="#列出键" class="headerlink" title="列出键"></a>列出键</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault secrets list</span></span><br><span class="line">Path          Type         Accessor              Description</span><br><span class="line">----          ----         --------              -----------</span><br><span class="line">cubbyhole/    cubbyhole    cubbyhole_e5c17df6    per-token private secret storage</span><br><span class="line">identity/     identity     identity_f0404cf8     identity store</span><br><span class="line">kv/           kv           kv_618be90b           n/a</span><br><span class="line">sys/          system       system_053aea79       system endpoints used for control, policy and debugging</span><br><span class="line">transit/      transit      transit_aaaaf63d      n/a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv list kv</span></span><br><span class="line">Keys</span><br><span class="line">----</span><br><span class="line">mycorp/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv list kv/mycorp</span></span><br><span class="line">Keys</span><br><span class="line">----</span><br><span class="line">mydepartment/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv list kv/mycorp/mydepartment</span></span><br><span class="line">Keys</span><br><span class="line">----</span><br><span class="line">myproject/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv list kv/mycorp/mydepartment/myproject/myapp/myapp-api</span></span><br><span class="line">Keys</span><br><span class="line">----</span><br><span class="line">config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv list kv/mycorp/mydepartment/myproject/myapp/myapp-api/config</span></span><br><span class="line">No value found at kv/mycorp/mydepartment/myproject/myapp/myapp-api/config</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="读取键值"><a href="#读取键值" class="headerlink" title="读取键值"></a>读取键值</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv get kv/mycorp/mydepartment/myproject/myapp/myapp-api/config</span></span><br><span class="line">===== Data =====</span><br><span class="line">Key        Value</span><br><span class="line">---        -----</span><br><span class="line">db_port    3306</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>以上输出中，键 <code>kv/mycorp/mydepartment/myproject/myapp/myapp-api/config</code> 的内容为 <code>db_port=3306</code>，之前写入的其他数据被覆盖，只保留有最后一个写入</strong> </p>
<h3 id="删除键"><a href="#删除键" class="headerlink" title="删除键"></a>删除键</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv delete kv/mycorp/mydepartment/myproject/myapp/myapp-api/config</span></span><br><span class="line">Success! Data deleted (if it existed) at: kv/mycorp/mydepartment/myproject/myapp/myapp-api/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv get kv/mycorp/mydepartment/myproject/myapp/myapp-api/config</span></span><br><span class="line">No value found at kv/mycorp/mydepartment/myproject/myapp/myapp-api/config</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="kv-Version-2"><a href="#kv-Version-2" class="headerlink" title="kv Version 2"></a>kv Version 2</h2><p>kv Version 2 相比 Version 1，有以下改进</p>
<ul>
<li>version 2 支持多版本管理，默认保留 10 个版本</li>
<li>version 2 支持 patch 操作，可以更新 key，而不是像 version 1 一样直接覆盖</li>
<li>version 2 支持数据回滚操作</li>
<li>version 2 保护了 <code>metadata</code> 元数据信息，里面可以看到多个版本的信息及其数据</li>
</ul>
<p>使用以下命令启用 version 2 版本的 kv，挂载路径为 <code>kv2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault secrets <span class="built_in">enable</span> -path=kv2 -version=2 kv</span></span><br><span class="line">Success! Enabled the kv secrets engine at: kv2/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault secrets list</span></span><br><span class="line">Path          Type         Accessor              Description</span><br><span class="line">----          ----         --------              -----------</span><br><span class="line">cubbyhole/    cubbyhole    cubbyhole_e5c17df6    per-token private secret storage</span><br><span class="line">identity/     identity     identity_f0404cf8     identity store</span><br><span class="line">kv/           kv           kv_618be90b           n/a</span><br><span class="line">kv2/          kv           kv_2b51a6d6           n/a</span><br><span class="line">sys/          system       system_053aea79       system endpoints used for control, policy and debugging</span><br><span class="line">transit/      transit      transit_aaaaf63d      n/a</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="写入数据-1"><a href="#写入数据-1" class="headerlink" title="写入数据"></a>写入数据</h3><p>写入数据的语法和 version 1 相同</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv put kv2/corp/department/project/app/api/config db_type=mysql</span></span><br><span class="line">================= Secret Path =================</span><br><span class="line">kv2/data/corp/department/project/app/api/config</span><br><span class="line"></span><br><span class="line">======= Metadata =======</span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">created_time       2023-07-14T02:13:57.086632928Z</span><br><span class="line">custom_metadata    &lt;nil&gt;</span><br><span class="line">deletion_time      n/a</span><br><span class="line">destroyed          false</span><br><span class="line">version            1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>version 2 相比 version 1 重要的是多了<strong>多版本管理</strong>的功能，初次生成 key 并写入数据后，其 <code>version</code> 为 <code>1</code>。</p>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>version 2 相比 version 1 的另一个重要功能是 <code>patch</code> 操作，可以更新原有的 <code>key</code> 内容，而不完全覆盖，这个功能是通过 <code>vault kv patch</code> 命令实现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv get kv2/corp/department/project/app/api/config</span> </span><br><span class="line">================= Secret Path =================</span><br><span class="line">kv2/data/corp/department/project/app/api/config</span><br><span class="line"></span><br><span class="line">======= Metadata =======</span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">created_time       2023-07-14T02:13:57.086632928Z</span><br><span class="line">custom_metadata    &lt;nil&gt;</span><br><span class="line">deletion_time      n/a</span><br><span class="line">destroyed          false</span><br><span class="line">version            1</span><br><span class="line"></span><br><span class="line">===== Data =====</span><br><span class="line">Key        Value</span><br><span class="line">---        -----</span><br><span class="line">db_type    mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv patch kv2/corp/department/project/app/api/config db_host=lcoalhost</span></span><br><span class="line">================= Secret Path =================</span><br><span class="line">kv2/data/corp/department/project/app/api/config</span><br><span class="line"></span><br><span class="line">======= Metadata =======</span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">created_time       2023-07-14T02:15:18.525867051Z</span><br><span class="line">custom_metadata    &lt;nil&gt;</span><br><span class="line">deletion_time      n/a</span><br><span class="line">destroyed          false</span><br><span class="line">version            2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv get kv2/corp/department/project/app/api/config</span></span><br><span class="line">================= Secret Path =================</span><br><span class="line">kv2/data/corp/department/project/app/api/config</span><br><span class="line"></span><br><span class="line">======= Metadata =======</span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">created_time       2023-07-14T02:15:18.525867051Z</span><br><span class="line">custom_metadata    &lt;nil&gt;</span><br><span class="line">deletion_time      n/a</span><br><span class="line">destroyed          false</span><br><span class="line">version            2</span><br><span class="line"></span><br><span class="line">===== Data =====</span><br><span class="line">Key        Value</span><br><span class="line">---        -----</span><br><span class="line">db_host    lcoalhost</span><br><span class="line">db_type    mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>vault kv patch</code> 后，数据的 <code>version</code> 变为了 <code>2</code>，因为 kv version 2 的多版本管理功能，旧的版本数据也被存储（默认保留 10 个版本），可以查看旧版本的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv get -version=1 kv2/corp/department/project/app/api/config</span></span><br><span class="line">================= Secret Path =================</span><br><span class="line">kv2/data/corp/department/project/app/api/config</span><br><span class="line"></span><br><span class="line">======= Metadata =======</span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">created_time       2023-07-14T02:13:57.086632928Z</span><br><span class="line">custom_metadata    &lt;nil&gt;</span><br><span class="line">deletion_time      n/a</span><br><span class="line">destroyed          false</span><br><span class="line">version            1</span><br><span class="line"></span><br><span class="line">===== Data =====</span><br><span class="line">Key        Value</span><br><span class="line">---        -----</span><br><span class="line">db_type    mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="回滚操作"><a href="#回滚操作" class="headerlink" title="回滚操作"></a>回滚操作</h3><p>kv verions 2 因为有版本管理的功能，因此可以基于保存的多版本数据，进行数据版本回滚操作，此功能通过 <code>vault kv rollback</code> 命令实现</p>
<p>以下命令演示了<strong>数据的版本回滚操作</strong>，可以实现基于以前的版本恢复数据。需要注意的是，<strong>执行 <code>rollback</code> 后的 <code>version</code> 值不是回滚的目标版本，而是一个新的版本，只是其数据内容和要回滚的目标版本的数据一致</strong>。比如以下示例中，当前 <code>version</code> 为 <code>2</code>，执行了 <code>vault kv rollback -version=1</code> 后，数据版本变成了 <code>version 3</code>，而不是 <code>version 1</code>，但是 <code>version 3</code> 和 <code>version 1</code> 的数据内容一模一样</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv get kv2/corp/department/project/app/api/config</span></span><br><span class="line">================= Secret Path =================</span><br><span class="line">kv2/data/corp/department/project/app/api/config</span><br><span class="line"></span><br><span class="line">======= Metadata =======</span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">created_time       2023-07-14T02:15:18.525867051Z</span><br><span class="line">custom_metadata    &lt;nil&gt;</span><br><span class="line">deletion_time      n/a</span><br><span class="line">destroyed          false</span><br><span class="line">version            2</span><br><span class="line"></span><br><span class="line">===== Data =====</span><br><span class="line">Key        Value</span><br><span class="line">---        -----</span><br><span class="line">db_host    lcoalhost</span><br><span class="line">db_type    mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv rollback -version=1 kv2/corp/department/project/app/api/config</span></span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">created_time       2023-07-14T02:18:34.86076686Z</span><br><span class="line">custom_metadata    &lt;nil&gt;</span><br><span class="line">deletion_time      n/a</span><br><span class="line">destroyed          false</span><br><span class="line">version            3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv get kv2/corp/department/project/app/api/config</span></span><br><span class="line">================= Secret Path =================</span><br><span class="line">kv2/data/corp/department/project/app/api/config</span><br><span class="line"></span><br><span class="line">======= Metadata =======</span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">created_time       2023-07-14T02:18:34.86076686Z</span><br><span class="line">custom_metadata    &lt;nil&gt;</span><br><span class="line">deletion_time      n/a</span><br><span class="line">destroyed          false</span><br><span class="line">version            3</span><br><span class="line"></span><br><span class="line">===== Data =====</span><br><span class="line">Key        Value</span><br><span class="line">---        -----</span><br><span class="line">db_type    mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv get -version=1 kv2/corp/department/project/app/api/config</span></span><br><span class="line">================= Secret Path =================</span><br><span class="line">kv2/data/corp/department/project/app/api/config</span><br><span class="line"></span><br><span class="line">======= Metadata =======</span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">created_time       2023-07-14T02:13:57.086632928Z</span><br><span class="line">custom_metadata    &lt;nil&gt;</span><br><span class="line">deletion_time      n/a</span><br><span class="line">destroyed          false</span><br><span class="line">version            1</span><br><span class="line"></span><br><span class="line">===== Data =====</span><br><span class="line">Key        Value</span><br><span class="line">---        -----</span><br><span class="line">db_type    mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看-metadata"><a href="#查看-metadata" class="headerlink" title="查看 metadata"></a>查看 metadata</h3><p>查看 Key 的 <code>metadata</code> 数据，可以看到多个版本的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vault kv metadata get kv2/corp/department/project/app/api/config</span></span><br><span class="line">================== Metadata Path ==================</span><br><span class="line">kv2/metadata/corp/department/project/app/api/config</span><br><span class="line"></span><br><span class="line">========== Metadata ==========</span><br><span class="line">Key                     Value</span><br><span class="line">---                     -----</span><br><span class="line">cas_required            false</span><br><span class="line">created_time            2023-07-14T02:13:57.086632928Z</span><br><span class="line">current_version         4</span><br><span class="line">custom_metadata         &lt;nil&gt;</span><br><span class="line">delete_version_after    0s</span><br><span class="line">max_versions            0</span><br><span class="line">oldest_version          0</span><br><span class="line">updated_time            2023-07-14T02:24:42.054033452Z</span><br><span class="line"></span><br><span class="line">====== Version 1 ======</span><br><span class="line">Key              Value</span><br><span class="line">---              -----</span><br><span class="line">created_time     2023-07-14T02:13:57.086632928Z</span><br><span class="line">deletion_time    n/a</span><br><span class="line">destroyed        false</span><br><span class="line"></span><br><span class="line">====== Version 2 ======</span><br><span class="line">Key              Value</span><br><span class="line">---              -----</span><br><span class="line">created_time     2023-07-14T02:15:18.525867051Z</span><br><span class="line">deletion_time    n/a</span><br><span class="line">destroyed        false</span><br><span class="line"></span><br><span class="line">====== Version 3 ======</span><br><span class="line">Key              Value</span><br><span class="line">---              -----</span><br><span class="line">created_time     2023-07-14T02:18:34.86076686Z</span><br><span class="line">deletion_time    n/a</span><br><span class="line">destroyed        false</span><br><span class="line"></span><br><span class="line">====== Version 4 ======</span><br><span class="line">Key              Value</span><br><span class="line">---              -----</span><br><span class="line">created_time     2023-07-14T02:24:42.054033452Z</span><br><span class="line">deletion_time    n/a</span><br><span class="line">destroyed        false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://lonegunmanb.github.io/essential-vault/6.%E6%9C%BA%E5%AF%86%E5%BC%95%E6%93%8E/7.KV.html">Key &#x2F; Value</a></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lonegunmanb.github.io/essential-vault/6.%E6%9C%BA%E5%AF%86%E5%BC%95%E6%93%8E/7.KV.html">Key / Value</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>Vault</category>
      </categories>
      <tags>
        <tag>Vault</tag>
      </tags>
  </entry>
  <entry>
    <title>vim</title>
    <url>/202208181117/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
</ul>
<h1 id="vim-配置"><a href="#vim-配置" class="headerlink" title="vim 配置"></a>vim 配置</h1><p><code>vim</code> 启动时会读取 <code>/etc/vimrc</code>（全局配置） 和 <code>~/.vimrc</code> （用户配置）</p>
<p>常用配置如下，使用 <code>&quot;</code> 注释</p>
<figure class="highlight shell"><figcaption><span>/etc/vimrc</span></figcaption><table><tr><td class="code"><pre><span class="line">&quot; 自动缩进 </span><br><span class="line">set ai</span><br><span class="line">set autoindent</span><br><span class="line"></span><br><span class="line">&quot; 保存历史命令数量</span><br><span class="line">set history=50</span><br><span class="line"></span><br><span class="line">&quot; 右下角显示当前鼠标位置（行列数）</span><br><span class="line">set ruler</span><br><span class="line"></span><br><span class="line">&quot; 鼠标位置所在行显示下划线</span><br><span class="line">set cursorline</span><br><span class="line"></span><br><span class="line">&quot; 开启语法高亮</span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line">&quot; 高亮搜索结果</span><br><span class="line">set hlsearch</span><br><span class="line"></span><br><span class="line">&quot; 搜索时不区分大小写</span><br><span class="line">set ignorecase</span><br><span class="line"></span><br><span class="line">&quot; 将 tab 转换为空格</span><br><span class="line">set expandtab</span><br><span class="line"></span><br><span class="line">&quot; tab 转换为4个空格</span><br><span class="line">set tabstop=4</span><br><span class="line"></span><br><span class="line">&quot; 删除时，可以一次删除4个空格</span><br><span class="line">set softtabstop=4</span><br><span class="line"></span><br><span class="line">&quot; 显示行数</span><br><span class="line">set nu</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h1 id="vim-常见用法"><a href="#vim-常见用法" class="headerlink" title="vim 常见用法"></a>vim 常见用法</h1><h2 id="读写加解密文件"><a href="#读写加解密文件" class="headerlink" title="读写加解密文件"></a>读写加解密文件</h2><h3 id="创建新的加密文件"><a href="#创建新的加密文件" class="headerlink" title="创建新的加密文件"></a>创建新的加密文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim -x mysecfile</span><br></pre></td></tr></table></figure>
<p>使用 <code>vim</code> 的 <code>-x</code> 选项，将创建一个新的文件，并提示需要设置加密密码，输入 2 次密码后，将进入 <code>vim</code> 界面，编辑完内容，保存后，产生的文件为 <code>vim</code> 加密的文件，使用 <code>file</code> 命令查看，显示如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file mysecfile</span></span><br><span class="line">mysecfile: Vim encrypted file data</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>之后要使用 <code>vim</code> 编辑此文件，都要按照提示输入密码，如果未输入密码或者输入的密码错误，打开的文件内容将显示为乱码，只有输入正确的密码，才能看到正确的文件内容，如果使用其他编辑器，可以直接打开文件，但是内容乱码  </p>
<h3 id="加密已有文件"><a href="#加密已有文件" class="headerlink" title="加密已有文件"></a>加密已有文件</h3><p>对于已经存在的未加密文件，使用 <code>vim</code> 的 <code>-x</code> 选项时，会要求输入密码，此时不输入密码，或者随便输入，都会打开正确的文件内容(因为文件并未被 <code>vim</code> 加密保护)  </p>
<p>对于已经存在的未加密文件，若要使用 <code>vim</code> 进行加密，可以在 <code>vim</code> 打开文件后，使用 <code>vim</code> 的 <code>X</code> 命令对文件进行加密。具体操作为： 在 <code>vim</code> 的一般模式下（按 <code>Esc</code> 进入），输入 </p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">X</span></span><br></pre></td></tr></table></figure>
<p>确定后 <code>vim</code> 会提示输入 2 次密码，完成加密，最后保存文件</p>
<figure class="highlight shell"><figcaption><span>vim</span></figcaption><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>对于 <code>vim</code> 已经加密的文件，如果使用 <code>vim</code> 打开时输入错误的密码或者未输入密码，打开文件显示乱码，此时如果对文件进行了保存，会导致乱码被保存为文件内容，导致文件内容丢失</strong></p>
</blockquote>
<h3 id="文件解密"><a href="#文件解密" class="headerlink" title="文件解密"></a>文件解密</h3><p>对 <code>vim</code> 已加密的文件，需要解密的话，在正确打开文件后，可以通过 <a href="#%E5%8A%A0%E5%AF%86%E5%B7%B2%E6%9C%89%E6%96%87%E4%BB%B6">加密已有文件</a> 中的步骤，将文件密码设置为空即可<br>或者正确打开加密文件后，进入一般模式下，执行以下命令</p>
<figure class="highlight shell"><figcaption><span>vim</span></figcaption><table><tr><td class="code"><pre><span class="line">:set key=</span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="vim-INSERT-模式中无法使用鼠标复制粘贴"><a href="#vim-INSERT-模式中无法使用鼠标复制粘贴" class="headerlink" title="vim INSERT 模式中无法使用鼠标复制粘贴"></a>vim INSERT 模式中无法使用鼠标复制粘贴</h2><p><strong>环境信息</strong>：</p>
<ul>
<li>Debian GNU&#x2F;Linux 12</li>
<li>VIM - Vi IMproved 9.0</li>
</ul>
<p>在 Debian 的 Docker 镜像中安装 <code>apt install vim</code> 后， 在 <code>vim</code> INSERT 模式下无法使用鼠标复制粘贴内容，这是由于 <code>vim</code> 默认的鼠标配置干扰了鼠标操作。<strong>禁用鼠标模式即可解决</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set mouse=</span><br></pre></td></tr></table></figure>

<p>复制粘贴到 <code>vim</code> 后格式可能会错乱，使用 <code>paste</code> 模式解决</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set paste</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vmware workstation 使用</title>
    <url>/202304031041/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Vmware workstation 17</li>
</ul>
<p><a href="!--swig%EF%BF%BC3--">其他下载地址</a></p>
<p>激活密钥： NZ4RR-FTK5H-H81C1-Q30QH-1V2LA</p>
<h1 id="Centos7-server-中安装使用-Vmware-workstation"><a href="#Centos7-server-中安装使用-Vmware-workstation" class="headerlink" title="Centos7 server 中安装使用 Vmware workstation"></a>Centos7 server 中安装使用 Vmware workstation</h1><p><a href="https://www.51ittech.com/knowledge-base/centos-7-install-vmware-workstation-15/">Centos 7 server版本（无图形界面）安装使用 Vmware workstation 参考链接</a></p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="VMware-Workstation-and-Hyper-V-are-not-compatible-Remove-the-Hyper-V-role-from-the-system-before-running-VMware-Workstation"><a href="#VMware-Workstation-and-Hyper-V-are-not-compatible-Remove-the-Hyper-V-role-from-the-system-before-running-VMware-Workstation" class="headerlink" title="VMware Workstation and Hyper-V are not compatible. Remove the Hyper-V role from the system before running VMware Workstation."></a>VMware Workstation and Hyper-V are not compatible. Remove the Hyper-V role from the system before running VMware Workstation.</h2><p>aws workspace 中不兼容 Vmware workstation</p>
<h2 id="Failed-to-start-SYSV-This-service-starts-and-stops-VMware-services"><a href="#Failed-to-start-SYSV-This-service-starts-and-stops-VMware-services" class="headerlink" title="Failed to start SYSV: This service starts and stops VMware services."></a>Failed to start SYSV: This service starts and stops VMware services.</h2><p>参考 <a href="#Centos7-server-%E4%B8%AD%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8-Vmware-workstation">Centos7 server 中安装使用 Vmware workstation</a> ，安装后，vmware 无法启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/etc/rc.d/init.d/vmware start</span></span><br><span class="line">Starting vmware (via systemctl):  Job for vmware.service failed because the control process exited with error code. See &quot;systemctl status vmware.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line">                                                           [FAILED]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -xe -u vmware</span></span><br><span class="line">-- </span><br><span class="line">-- Unit vmware.service has failed.</span><br><span class="line">-- </span><br><span class="line">-- The result is failed.</span><br><span class="line">May 02 11:13:39 k8s-uat-xhy-mysql-new systemd[1]: Unit vmware.service entered failed state.</span><br><span class="line">May 02 11:13:39 k8s-uat-xhy-mysql-new systemd[1]: vmware.service failed.</span><br><span class="line">May 02 11:19:37 k8s-uat-xhy-mysql-new systemd[1]: Starting SYSV: This service starts and stops VMware services...</span><br><span class="line">-- Subject: Unit vmware.service has begun start-up</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">-- </span><br><span class="line">-- Unit vmware.service has begun starting up.</span><br><span class="line">May 02 11:19:37 k8s-uat-xhy-mysql-new vmware[22226]: Starting VMware services:</span><br><span class="line">May 02 11:19:37 k8s-uat-xhy-mysql-new vmware[22226]: Virtual machine monitor[FAILED]</span><br><span class="line">May 02 11:19:37 k8s-uat-xhy-mysql-new vmware[22226]: Virtual machine communication interface[  OK  ]</span><br><span class="line">May 02 11:19:37 k8s-uat-xhy-mysql-new vmware[22226]: VM communication interface socket family[  OK  ]</span><br><span class="line">May 02 11:19:37 k8s-uat-xhy-mysql-new vmware[22226]: Virtual ethernet[FAILED]</span><br><span class="line">May 02 11:19:37 k8s-uat-xhy-mysql-new vmware[22226]: VMware Authentication Daemon[  OK  ]</span><br><span class="line">May 02 11:19:37 k8s-uat-xhy-mysql-new systemd[1]: vmware.service: control process exited, code=exited status=1</span><br><span class="line">May 02 11:19:37 k8s-uat-xhy-mysql-new systemd[1]: Failed to start SYSV: This service starts and stops VMware services.</span><br><span class="line">-- Subject: Unit vmware.service has failed</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">-- </span><br><span class="line">-- Unit vmware.service has failed.</span><br><span class="line">-- </span><br><span class="line">-- The result is failed.</span><br><span class="line">May 02 11:19:37 k8s-uat-xhy-mysql-new systemd[1]: Unit vmware.service entered failed state.</span><br><span class="line">May 02 11:19:37 k8s-uat-xhy-mysql-new systemd[1]: vmware.service failed.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行以下命令 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Failed to start SYSV: This service starts and stops VMware services.](https://communities.vmware.com/t5/VMware-Workstation-Pro/Failed-to-start-SYSV-This-service-starts-and-stops-VMware/td-p/2318180)">[1]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vmware-modconfig --console --install-status</span></span><br><span class="line">[AppLoader] GLib does not have GSettings support.</span><br><span class="line">vmmon: unknown</span><br><span class="line">vmnet: unknown</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看内核版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">uname</span> -r</span></span><br><span class="line">3.10.0-1062.9.1.el7.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://communities.vmware.com/t5/VMware-Workstation-Pro/Failed-to-start-SYSV-This-service-starts-and-stops-VMware/td-p/2318180">Failed to start SYSV: This service starts and stops VMware services.</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title>SoftEther VPN 使用</title>
    <url>/202302070928/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://www.softether.org/4-docs">SoftEther VPN 官网手册</a></p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos7 5.4.221</li>
<li>SoftEther VPN Server 4.41</li>
<li>iptables</li>
</ul>
<p>SoftEther VPN Server 有两种模式，<code>Service Mode</code> 和 <code>User Mode</code>，本文档安装使用 <code>Service Mode</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Operating Modes](https://www.softether.org/4-docs/1-manual/3._SoftEther_VPN_Server_Manual/3.2_Operating_Modes)">[1]</span></a></sup></p>
<ul>
<li><code>Service Mode</code> - 安装之后以系统服务的形式存在（被管理）</li>
<li><code>User Mode</code> - 安装之后不存在对应的服务，（管理员）用户直接通过进程管理，程序启动停止需要（管理员）用户手动停止相应进程</li>
</ul>
<h1 id="安装配置过程"><a href="#安装配置过程" class="headerlink" title="安装配置过程"></a>安装配置过程</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc zlib-devel openssl-devel readline-devel ncurses-devel</span><br></pre></td></tr></table></figure>
<p><a href="https://www.softether.org/">参考链接</a> 下载最新的安装包，本文档使用版本 4.41 版本 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Install on Linux and Initial Configurations](https://www.softether.org/4-docs/1-manual/7._Installing_SoftEther_VPN_Server/7.3_Install_on_Linux_and_Initial_Configurations)">[2]</span></a></sup></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/SoftEtherVPN/SoftEtherVPN_Stable/releases/download/v4.41-9782-beta/softether-vpnserver-v4.41-9782-beta-2022.11.17-linux-x64-64bit.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xf softether-vpnserver-v4.41-9782-beta-2022.11.17-linux-x64-64bit.tar.gz</span><br><span class="line"></span><br><span class="line">cd vpnserver/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用以下命令编译生成可执行文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
<p>将编译后的目录移动到 <code>/usr/local/</code> 下，并修改权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ..</span><br><span class="line">mv vpnserver /usr/local/</span><br><span class="line"></span><br><span class="line">cd /usr/local/vpnserver/</span><br><span class="line"></span><br><span class="line">chmod 600 *</span><br><span class="line"></span><br><span class="line">chmod 700 vpncmd</span><br><span class="line">chmod 700 vpnserver</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>使用 <code>vpncmd check</code> 命令检查 vpn server 是否可以正常运行。在 <code>/usr/local/vpnserver/</code> 目录下执行 <code>./vpncmd</code>，根据提示选择 3 (<code>3. Use of VPN Tools (certificate creation and Network Traffic Speed Test Tool)</code>)， 然后执行 <code>check</code> 命令进行检查。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./vpncmd</span></span><br><span class="line">By using vpncmd program, the following can be achieved. </span><br><span class="line"></span><br><span class="line">1. Management of VPN Server or VPN Bridge </span><br><span class="line">2. Management of VPN Client</span><br><span class="line">3. Use of VPN Tools (certificate creation and Network Traffic Speed Test Tool)</span><br><span class="line"></span><br><span class="line">Select 1, 2 or 3: 3</span><br><span class="line"></span><br><span class="line">VPN Tools&gt;check</span><br><span class="line">Check command - Check whether SoftEther VPN Operation is Possible</span><br><span class="line">---------------------------------------------------</span><br><span class="line">SoftEther VPN Operation Environment Check Tool</span><br><span class="line"></span><br><span class="line">Copyright (c) SoftEther VPN Project.</span><br><span class="line">All Rights Reserved.</span><br><span class="line"></span><br><span class="line">If this operation environment check tool is run on a system and that system passes, it is most likely that SoftEther VPN software can operate on that system. This check may take a while. Please wait...</span><br><span class="line"></span><br><span class="line">Checking &#x27;Kernel System&#x27;... </span><br><span class="line">              Pass</span><br><span class="line">Checking &#x27;Memory Operation System&#x27;... </span><br><span class="line">              Pass</span><br><span class="line">Checking &#x27;ANSI / Unicode string processing system&#x27;... </span><br><span class="line">              Pass</span><br><span class="line">Checking &#x27;File system&#x27;... </span><br><span class="line">              Pass</span><br><span class="line">Checking &#x27;Thread processing system&#x27;... </span><br><span class="line">              Pass</span><br><span class="line">Checking &#x27;Network system&#x27;... </span><br><span class="line">              Pass</span><br><span class="line"></span><br><span class="line">All checks passed. It is most likely that SoftEther VPN Server / Bridge can operate normally on this system.</span><br><span class="line"></span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure>
<p>执行检查后输出 <code>All checks passed. It is most likely that SoftEther VPN Server / Bridge can operate normally on this system.</code> ，说明系统可正常满足 vpn server 运行的条件。</p>
<p>根据以下内容生成服务启动脚本，将 vpn server 以 service 的形式运行</p>
<figure class="highlight shell"><figcaption><span>/etc/init.d/softether-vpn-server</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chkconfig: 2345 99 01</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">description: SoftEther VPN Server</span></span><br><span class="line">DAEMON=/usr/local/vpnserver/vpnserver</span><br><span class="line">LOCK=/var/lock/subsys/vpnserver</span><br><span class="line">test -x $DAEMON || exit 0</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">DAEMON start</span></span><br><span class="line">touch $LOCK</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">DAEMON stop</span></span><br><span class="line">rm $LOCK</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">DAEMON stop</span></span><br><span class="line">sleep 3</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">DAEMON start</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage: $0 &#123;start|stop|restart&#125;&quot;</span><br><span class="line">exit 1</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<p>给服务脚本添加可执行权限，并配置开机启动，之后可以通过 <code>systemctl</code> 管理服务状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> 755 /etc/init.d/softether-vpn-server</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl daemon-reload</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl status softether-vpn-server</span></span><br><span class="line">● softether-vpn-server.service - SYSV: SoftEther VPN Server</span><br><span class="line">   Loaded: loaded (/etc/rc.d/init.d/softether-vpn-server; bad; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:systemd-sysv-generator(8)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl <span class="built_in">enable</span> softether-vpn-server</span></span><br><span class="line">softether-vpn-server.service is not a native service, redirecting to /sbin/chkconfig.</span><br><span class="line">Executing /sbin/chkconfig softether-vpn-server on</span><br></pre></td></tr></table></figure>

<p>防火墙添加以下配置 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Listener Ports](https://www.softether.org/4-docs/1-manual/3._SoftEther_VPN_Server_Manual/3.3_VPN_Server_Administration)">[4]</span></a></sup></p>
<figure class="highlight shell"><figcaption><span>/etc/sysconfig/iptables</span></figcaption><table><tr><td class="code"><pre><span class="line">-A INPUT -m comment --comment &quot;vpn&quot; -m multiport -p tcp --dports 443,1194,5555,992 -j ACCEPT</span><br><span class="line">-A INPUT -m comment --comment &quot;vpn&quot; -m multiport -p udp --dports 4500,500 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start softether-vpn-server</span><br></pre></td></tr></table></figure>

<h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>安装完 vpn server 之后，可以通过 <code>SoftEther VPN Server Manager</code> 管理 VPN Server。windows 上下载 <a href="https://www.softether-download.com/en.aspx?product=softether"><code>SoftEther VPN Server Manager for Windows</code></a> <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Initial Configurations](https://www.softether.org/4-docs/1-manual/7._Installing_SoftEther_VPN_Server/7.4_Initial_Configurations)">[5]</span></a></sup> </p>
<p>初次登陆后，建议设置管理员密码<br><img src="https://i.csms.tech/img_116.png"></p>
<p>默认情况下，只存在一个名为 <code>DEFAULT</code> 的 Virtual Hub 注册到了 VPN Server，可以使用此 Virtual Hub，或者删除它重新创建自己的 Virtual Hub。</p>
<p>根据提示选择要创建的的 VPN Server 的类型，普通 VPN 选择 <code>Remote Access VPN Server</code><br><img src="https://i.csms.tech/img_117.png"><br>根据提示，配置要创建的 Virtual Hub 的名称，接着会弹出 <code>Dynamic DNS Function</code> 配置界面。<code>Dynamic DNS Function</code> 的功能，会提供一个 <code>softether.net</code> 域的子域名，通过这个域名，可以解析到 VPN Server 的 IP 地址，如果服务器使用的是动态 IP，此解析会跟着变化。如果服务器只有内网 IP（云主机），此解析会自动解析到公网 IP。<br><img src="https://i.csms.tech/img_118.png"></p>
<p><code>Dynamic DNS Function</code> 配置完成后退出（<code>exit</code>），进入协议配置界面，此处启用所有协议(手机连接 VPN 需要)<br><img src="https://i.csms.tech/img_122.png"></p>
<p>创建 VPN 用户<br><img src="https://i.csms.tech/img_120.png"></p>
<p>回到管理界面后，选择刚刚创建的 Virtual Hub，点击 <code>Manage Virtual Hub</code> 按钮管理配置，选择 <code>Virtual NAT and Virtual DHCP Server(SecureNAT)</code>，启用 <code>SecureNAT</code>，否则客户端可以连接到 VPN Server，但是 VPN Server 不会分配 IP 地址给客户端。<br><img src="https://i.csms.tech/img_121.png"></p>
<h1 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h1><h2 id="android-自带-VPN-客户端连接"><a href="#android-自带-VPN-客户端连接" class="headerlink" title="android 自带 VPN 客户端连接"></a>android 自带 VPN 客户端连接</h2><p>打开手机 VPN 设置，添加 VPN 配置，主要配置以下项：</p>
<ul>
<li><code>Type</code> : <code>L2TP/IPSec PSK</code></li>
<li><code>Server address</code> : 填写 VPN 服务器 IP 或域名</li>
<li><code>IPSec pre-shared key</code> : 填写协议配置界面中配置的 <code>IPsec Pre-shared Key</code> 对应的值，本文档中为<code>vpn</code></li>
<li><code>Username</code> : 填写 VPN 的用户名</li>
<li><code>Password</code> : 填写 VPN 用户密码</li>
</ul>
<h2 id="ios-自带的-VPN-客户端连接"><a href="#ios-自带的-VPN-客户端连接" class="headerlink" title="ios 自带的 VPN 客户端连接"></a>ios 自带的 VPN 客户端连接</h2><p>在 IOS 的 <code>通用</code> –&gt; <code>VPN 与 设备管理</code> –&gt; <code>VPN</code> 中添加 VPN 配置，主要配置以下项：</p>
<ul>
<li><code>类型</code> ： <code>L2TP</code></li>
<li><code>服务器</code> : 填写 VPN 服务器 IP 或域名</li>
<li><code>账户</code> : 填写 VPN 的用户名</li>
<li><code>密码</code> : 填写 VPN 用户密码</li>
<li><code>密钥</code> : 填写协议配置界面中配置的 <code>IPsec Pre-shared Key</code> 对应的值，本文档中为<code>vpn</code></li>
</ul>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="VPN-Client-可以连接到-VPN-Server，但是-client-的出口-IP-未变"><a href="#VPN-Client-可以连接到-VPN-Server，但是-client-的出口-IP-未变" class="headerlink" title="VPN Client 可以连接到 VPN Server，但是 client 的出口 IP 未变"></a>VPN Client 可以连接到 VPN Server，但是 client 的出口 IP 未变</h2><p><strong>问题现象</strong></p>
<p>windows 使用 VPN Client 可以正常连接到 VPN Server，但是检查客户端系统的出口 IP，不是 VPN Server 的 IP。检查客户端系统的 IP 地址信息</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ipconfig</span> /all</span><br><span class="line">未知适配器 VPN - VPN Client:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   描述. . . . . . . . . . . . . . . : VPN Client Adapter - VPN</span><br><span class="line">   物理地址. . . . . . . . . . . . . : <span class="number">5</span>E-<span class="number">7</span>F-<span class="number">99</span>-<span class="number">71</span>-<span class="number">74</span>-AF</span><br><span class="line">   DHCP 已启用 . . . . . . . . . . . : 是</span><br><span class="line">   自动配置已启用. . . . . . . . . . : 是</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::<span class="number">7674</span>:<span class="number">9039</span>:eaca:<span class="number">5976</span>%<span class="number">52</span>(首选)</span><br><span class="line">   自动配置 IPv4 地址  . . . . . . . : <span class="number">169</span>.<span class="number">254</span>.<span class="number">160</span>.<span class="number">75</span>(首选)</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : <span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br><span class="line">   DHCPv6 IAID . . . . . . . . . . . : <span class="number">878608281</span></span><br><span class="line">   DHCPv6 客户端 DUID  . . . . . . . : <span class="number">00</span>-<span class="number">01</span>-<span class="number">00</span>-<span class="number">01</span>-<span class="number">29</span>-<span class="number">5</span>D-CA-<span class="number">62</span>-F4-<span class="number">39</span>-<span class="number">09</span>-<span class="number">4</span>B-<span class="number">1</span>C-<span class="number">6</span>A</span><br><span class="line">   DNS 服务器  . . . . . . . . . . . : fec0:<span class="number">0</span>:<span class="number">0</span>:ffff::<span class="number">1</span>%<span class="number">1</span></span><br><span class="line"><span class="function">                                       fec0:0:0:<span class="title">ffff</span>::2%1</span></span><br><span class="line"><span class="function">                                       <span class="title">fec0</span>:0:0:<span class="title">ffff</span>::3%1</span></span><br><span class="line"><span class="function">   <span class="title">TCPIP</span> 上的 <span class="title">NetBIOS</span>  . . . . . . . : 已启用</span></span><br></pre></td></tr></table></figure>
<p>VPN 适配器的 IP 地址为 <code>169.254.160.75</code>，说明客户端未获取 VPN 相应的 IP 地址。检查 VPN Server 配置的 <code>Virtual NAT and Virtual DHCP Server(SecureNAT)</code> 部分，看是否启用了 <code>SecureNAT</code>。启用后重新连接，查看 Windows 系统 IP 地址，看到已经正常分配到 VPN 的 IP，测试公网，变成了 VPN Server 的 IP。 </p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.softether.org/4-docs/1-manual/3._SoftEther_VPN_Server_Manual/3.2_Operating_Modes">Operating Modes</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.softether.org/4-docs/1-manual/7._Installing_SoftEther_VPN_Server/7.3_Install_on_Linux_and_Initial_Configurations">Install on Linux and Initial Configurations</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.softether.org/4-docs/1-manual/7._Installing_SoftEther_VPN_Server/7.4_Initial_Configurations">Initial Configurations</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.softether.org/4-docs/1-manual/3._SoftEther_VPN_Server_Manual/3.3_VPN_Server_Administration">Listener Ports</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.softether.org/4-docs/1-manual/7._Installing_SoftEther_VPN_Server/7.4_Initial_Configurations">Initial Configurations</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Tools</category>
        <category>VPN</category>
      </categories>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftpd 服务常见错误</title>
    <url>/202207261304/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="530-Login-incorrect"><a href="#530-Login-incorrect" class="headerlink" title="530 Login incorrect"></a>530 Login incorrect</h3><p><strong>报错信息</strong>： 登录时报错 <code>530 Login incorrect</code><br><strong>错误原因</strong>：</p>
<figure class="highlight shell"><figcaption><span>/etc/pam.d/vsftpd</span></figcaption><table><tr><td class="code"><pre><span class="line">auth  required pam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed </span><br></pre></td></tr></table></figure>
<p>默认情况下，&#x2F;etc&#x2F;vsftpd&#x2F;ftpusers里面的用户是被拒绝登录的，确保要登录的用户不在此文件中</p>
<figure class="highlight shell"><figcaption><span>/etc/pam.d/vsftpd</span></figcaption><table><tr><td class="code"><pre><span class="line">auth       required    pam_shells.so  </span><br></pre></td></tr></table></figure>
<p>此配置指定，只允许登录shell为<code>/etc/shells</code>中的shell的用户登录<br>如果用户shell为<code>/sbin/nologin</code>，则不允许登录，可改为<code>pam_nologin.so</code></p>
<span id="more"></span>

<h3 id="500-OOPS-vsftpd-refusing-to-run-with-writable-root-inside-chroot"><a href="#500-OOPS-vsftpd-refusing-to-run-with-writable-root-inside-chroot" class="headerlink" title="500 OOPS: vsftpd: refusing to run with writable root inside chroot()"></a>500 OOPS: vsftpd: refusing to run with writable root inside chroot()</h3><p><strong>错误原因</strong>: 从2.3.5之后，vsftpd增强了安全检查，如果用户被限定在了其主目录下，则该用户的主目录不能再具有写权限了！如果检查发现还有写权限，就会报该错误。<br><strong>解决方法1</strong>： 用户主目录取消写权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod a-w /data/ftpdir</span><br></pre></td></tr></table></figure>

<p><strong>解决方法2</strong>： 配置文件中增加以下配置</p>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure>

<h3 id="500-OOPS-vsftpd-cannot-locate-user-specified-in-‘guest-username’-ftp"><a href="#500-OOPS-vsftpd-cannot-locate-user-specified-in-‘guest-username’-ftp" class="headerlink" title="500 OOPS: vsftpd: cannot locate user specified in ‘guest_username’:ftp"></a>500 OOPS: vsftpd: cannot locate user specified in ‘guest_username’:ftp</h3><p><strong>错误原因</strong>: 配置文件中启用了匿名用户登录，系统中没有ftp的匿名用户ftp<br><strong>解决方法1</strong>：<br>配置文件中禁用匿名用户登录，同时指定用户</p>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">anonymous_enable=NO</span><br><span class="line">ftp_username=nobody</span><br></pre></td></tr></table></figure>

<h3 id="550-Create-directory-operation-failed"><a href="#550-Create-directory-operation-failed" class="headerlink" title="550 Create directory operation failed"></a>550 Create directory operation failed</h3><p><strong>错误原因</strong>: 匿名登录的用户不允许在ftp根目录下面新建对象，可以在根目录下面创建文件夹，如pub，并给ftp为属主，在pub下面新建文件</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="/202207231311/" title="vsftpd 服务常用配置说明">vsftpd 服务常用配置说明</a>  
</li>
<li><a href="/202207251638/" title="vsftpd 虚拟用户配置说明">vsftpd 虚拟用户配置说明</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftpd 服务常用配置说明</title>
    <url>/202207231311/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Centos 7</li>
<li>vsftpd 3.0.2</li>
</ul>
<p>FTP(File transfer Protocol)是一种在互联网中进行文件传输的协议，基于客户端&#x2F;服务器模式，默认使用 20、21 号端口，<br>其中端口 20（数据端口）用于进行数据传输，端口 21（命令端口）用于接受客户端发出的相关 FTP 命令与参数。</p>
<p>FTP 有两种工作模式：</p>
<ul>
<li>主动模式(PORT) - 服务器主动向客户端发起连接请求.</li>
<li>被动模式(PAVS) - FTP 服务器打开协商好的端口，等待客户端发起连接请求（默认工作模式）.</li>
</ul>
<p>FTP 协议需要用到两个 TCP 连接：</p>
<ul>
<li>命令连接 - 用来在 FTP 客户端与服务器之间传递命令。</li>
<li>数据连接 - 用来在服务器和客户端进行文件传输。</li>
</ul>
<p>无论是主动模式还是被动模式，其要进行文件传输都必须依次建立两个连接，分别为命令连接与数据连接。而主动模式与被动模式的差异主要体现在数据连接通道上。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[FTP协议](https://www.cnblogs.com/steven-dou/p/14836224.html)">[1]</span></a></sup> </p>
<h1 id="服务配置文件"><a href="#服务配置文件" class="headerlink" title="服务配置文件"></a>服务配置文件</h1><h2 id="通用配置"><a href="#通用配置" class="headerlink" title="通用配置"></a>通用配置</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名用户和本地用户是否能登录，匿名用户使用的登陆名为ftp或anonymous，口令为空，匿名用户不能离开匿名 用户家目录/var/ftp,且只能下载不能上传。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地用户的登录名为本地用户名，口令为此本地用户的口令；本地用户可以在自己家目录中进行读写操作；本地用户可以离开自家目录切换至有权限访问的其他目录，并在权限允许的情况下进行上传/下载。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认写在文件/etc/vsftpd.ftpusers中的本地用户禁止登陆。</span></span><br><span class="line">anonymous_enable=YES </span><br><span class="line">local_enable=YES </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">否允许登录用户有写权限。属于全局设置，默认值为YES。</span></span><br><span class="line">write_enable=YES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设置为NO，所有的文件都不能下载到本地，文件夹不受影响。默认值为YES。</span></span><br><span class="line">download_enable=YES/NO</span><br></pre></td></tr></table></figure>

<h2 id="匿名用户（anonymous）设置"><a href="#匿名用户（anonymous）设置" class="headerlink" title="匿名用户（anonymous）设置"></a>匿名用户（anonymous）设置</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若是启动这项功能，则使用匿名登入时，不会询问密码。默认值为NO。</span></span><br><span class="line">no_anon_password=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义匿名登入的使用者名称。默认值为ftp。</span></span><br><span class="line">ftp_username=ftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用匿名登入时，所登入的目录。默认值为/var/ftp。注意ftp目录不能是777的权限属性，即匿名用户的家目录不能有777的权限。</span></span><br><span class="line">anon_root=/var/ftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设为YES，则允许匿名登入者有上传文件（非目录）的权限，只有在write_enable=YES时，此项才有效。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然，匿名用户必须要有对上层目录的写入权。默认值为NO。</span></span><br><span class="line">anon_upload_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设为YES，则允许匿名登入者下载可阅读的档案（可以下载到本机阅读，不能直接在FTP服务器中打开阅读）。默认值为YES。</span></span><br><span class="line">anon_world_readable_only=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设为YES，则允许匿名登入者有新增目录的权限，只有在write_enable=YES时，此项才有效。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然，匿名用户必须要有对上层目录的写入权。默认值为NO。</span></span><br><span class="line">anon_mkdir_write_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设为YES，则允许匿名登入者更多于上传或者建立目录之外的权限，譬如删除或者重命名。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果anon_upload_enable=NO，则匿名用户 不能上传文件，但可以删除或者重命名已经存在的文件；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果anon_mkdir_write_enable=NO，则匿名用户不能上传或者新建文件夹，但 可以删除或者重命名已经存在的文件夹。）默认值为NO。</span></span><br><span class="line">anon_other_write_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置是否改变匿名用户上传文件（非目录）的属主。默认值为NO。</span></span><br><span class="line">chown_uploads=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置匿名用户上传文件（非目录）的属主名。建议不要设置为root。</span></span><br><span class="line">chown_username=username</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置匿名登入者新增或上传档案时的<span class="built_in">umask</span> 值。默认值为077，则新建档案的对应权限为700。</span></span><br><span class="line">anon_umask=077</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若是启动这项功能，则必须提供一个档案/etc/vsftpd/banner_emails，内容为email address。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。默认值为NO。</span></span><br><span class="line">deny_email_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此文件用来输入email address，只有在deny_email_enable=YES时，才会使用到此档案。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。</span></span><br><span class="line">banned_email_file=/etc/vsftpd/banner_emails</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="本地用户设置"><a href="#本地用户设置" class="headerlink" title="本地用户设置"></a>本地用户设置</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制是否允许本地用户登入，默认值为YES。</span></span><br><span class="line">local_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当本地用户登入时，将被更换到定义的目录下。默认值为各用户的家目录</span></span><br><span class="line">local_root=/home/username</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地用户新增档案时的<span class="built_in">umask</span> 值。默认值为077。</span></span><br><span class="line">local_umask=022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地用户上传档案后的档案权限，与<span class="built_in">chmod</span> 所使用的数值相同。默认值为0666。</span></span><br><span class="line">file_open_mode=0755</span><br></pre></td></tr></table></figure>

<h2 id="欢迎语设置"><a href="#欢迎语设置" class="headerlink" title="欢迎语设置"></a>欢迎语设置</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果启动这个选项，那么使用者第一次进入一个目录时，会检查该目录下是否有.message这个档案</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有，则会出现此档案的内容，通常这个档案会放置欢迎话语，或是对该目录的说明。默认值为开启。</span></span><br><span class="line">dirmessage_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置目录消息文件，可将要显示的信息写入该文件。默认值为.message。</span></span><br><span class="line">message_file=.message</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当使用者登入时，会显示此设定所在的档案内容，通常为欢迎话语或是说明。默认值为无。如果欢迎信息较多，则使用该配置项。</span></span><br><span class="line">banner_file=/etc/vsftpd/banner</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里用来定义欢迎话语的字符串，banner_file是档案的形式，而ftpd_banner 则是字符串的形式。预设为无。</span></span><br><span class="line">ftpd_banner=Welcome to BOB&#x27;s FTP server</span><br></pre></td></tr></table></figure>

<h2 id="控制用户是否允许切换到上级目录"><a href="#控制用户是否允许切换到上级目录" class="headerlink" title="控制用户是否允许切换到上级目录"></a>控制用户是否允许切换到上级目录</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否将用户限制在用户主目录。默认值为NO。</span></span><br><span class="line">chroot_local_user=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在默认配置下(chroot_local_user=NO)，本地用户登入FTP后可以使用<span class="built_in">cd</span>命令切换到其他目录，这样会对系统带来安全隐患。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置是否启用chroot_list_file配置项指定的用户列表文件。默认值为NO。</span></span><br><span class="line">chroot_list_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于指定用户列表文件，该文件用于控制哪些用户可以切换到用户家目录的上级目录。</span></span><br><span class="line">chroot_list_file=/etc/vsftpd.chroot_list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 通过搭配能实现以下几种效果：</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 当chroot_local_user=YES, chroot_list_enable=YES时，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 当chroot_local_user=YES, chroot_list_enable=NO时，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有用户被限制在主目录，不启用chroot_list_file白名单，没有例外</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 当chroot_local_user=NO， chroot_list_enable=YES时</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有用户不限制在主目录，chroot_list_file中的用户例外，限制切换到主目录之外</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 当chroot_local_user=NO， chroot_list_enable=NO时</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有用户不限制在主目录,不启用chroot_list_file，没有任何例外</span></span><br></pre></td></tr></table></figure>

<h2 id="数据传输模式设置"><a href="#数据传输模式设置" class="headerlink" title="数据传输模式设置"></a>数据传输模式设置</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">FTP在传输数据时，可以使用二进制方式，也可以使用ASCII模式来上传或下载数据。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置是否启用ASCII 模式上传数据。默认值为NO。</span></span><br><span class="line">ascii_upload_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置是否启用ASCII 模式下载数据。默认值为NO。</span></span><br><span class="line">ascii_download_enable=YES/NO</span><br></pre></td></tr></table></figure>
<h2 id="访问控制设置"><a href="#访问控制设置" class="headerlink" title="访问控制设置"></a>访问控制设置</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">两种控制方式：一种控制主机访问，另一种控制用户访问。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置vsftpd是否与tcp wrapper相结合来进行主机的访问控制。默认值为YES。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果启用，则vsftpd服务器会检查/etc/hosts.allow 和/etc/hosts.deny 中的设置，来决定请求连接的主机，是否允许访问该FTP服务器。这两个文件可以起到简易的防火墙功能。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如：若要仅允许192.168.0.1—192.168.0.254的用户可以连接FTP服务器，则在/etc/hosts.allow文件中添加以下内容：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vsftpd:192.168.0. :allow</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">all:all :deny</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于用户的访问控制可以通过/etc目录下的vsftpd.user_list和ftpusers文件来实现。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制用户访问FTP的文件，里面写着用户名称。一个用户名称一行。</span></span><br><span class="line">userlist_file=/etc/vsftpd.user_list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否启用vsftpd.user_list文件。</span></span><br><span class="line">userlist_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">决定vsftpd.user_list文件中的用户是否能够访问FTP服务器。userlist_enable=YES 才有效</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若设置为YES，则vsftpd.user_list文件中的用户不允许访问FTP，为黑名单，其他用户可以访问</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若设置为NO，则vsftpd.user_list文件中的用户能访问FTP，为白名单，其他用户不能访问</span></span><br><span class="line">userlist_deny=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/vsftpd/ftpusers文件专门用于定义不允许访问FTP服务器的用户列表，不受任何配置文件影响，里面的用户始终不允许方法vsftpd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认情况下vsftpd.user_list和ftpusers，这两个 文件已经预设置了一些不允许访问FTP服务器的系统内部账户。如果系统没有这两个文件，那么新建这两个文件，将用户添加进去即可。</span></span><br></pre></td></tr></table></figure>

<h2 id="访问速率设置"><a href="#访问速率设置" class="headerlink" title="访问速率设置"></a>访问速率设置</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置匿名登入者使用的最大传输速度，单位为B/s，0 表示不限制速度。默认值为0。</span></span><br><span class="line">anon_max_rate=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地用户使用的最大传输速度，单位为B/s，0 表示不限制速度。预设值为0。</span></span><br><span class="line">local_max_rate=0</span><br></pre></td></tr></table></figure>

<h2 id="超时时间设置"><a href="#超时时间设置" class="headerlink" title="超时时间设置"></a>超时时间设置</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置建立FTP连接的超时时间，单位为秒。默认值为60。</span></span><br><span class="line">accept_timeout=60</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PORT 方式下建立数据连接的超时时间，单位为秒。默认值为60。</span></span><br><span class="line">connect_timeout=60</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置建立FTP数据连接的超时时间，单位为秒。默认值为120。</span></span><br><span class="line">data_connection_timeout=120</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置多长时间不对FTP服务器进行任何操作，则断开该FTP连接，单位为秒。默认值为300 。</span></span><br><span class="line">idle_session_timeout=300</span><br></pre></td></tr></table></figure>

<h2 id="日志文件设置"><a href="#日志文件设置" class="headerlink" title="日志文件设置"></a>日志文件设置</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否启用上传/下载日志记录。如果启用，则上传与下载的信息将被完整纪录在xferlog_file 所定义的档案中。预设为开启</span></span><br><span class="line">xferlog_enable= YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置日志文件名和路径，默认值为/var/log/vsftpd.log。</span></span><br><span class="line">xferlog_file=/var/log/vsftpd.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果启用，则日志文件将会写成xferlog的标准格式，如同wu-ftpd 一般。默认值为关闭。</span></span><br><span class="line">xferlog_std_format=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果启用此选项，所有的FTP请求和响应都会被记录到日志中，默认日志文件在/var/log/vsftpd.log。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用此选项时，xferlog_std_format不能被激活。这个选项有助于调试。默认值为NO。</span></span><br><span class="line">log_ftp_protocol=YES|NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录日志</span></span><br><span class="line">dual_log_enable=YES</span><br><span class="line">vsftpd_log_file=/var/log/vsftpd.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志中的时间与系统时间保持一致</span></span><br><span class="line">use_localtime=YES</span><br></pre></td></tr></table></figure>
<h2 id="FTP-的工作方式与端口设置"><a href="#FTP-的工作方式与端口设置" class="headerlink" title="FTP 的工作方式与端口设置"></a>FTP 的工作方式与端口设置</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">FTP有两种工作方式：PORT FTP（主动模式）和 PASV FTP（被动模式）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置FTP服务器建立连接所监听的端口，默认值为21。</span></span><br><span class="line">listen_port=21</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定FTP使用20端口进行数据传输，默认值为YES。</span></span><br><span class="line">connect_from_port_20=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置在PORT方式下，FTP数据连接使用的端口，默认值为20。</span></span><br><span class="line">ftp_data_port=20</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若设置为YES，则使用PASV工作模式；若设置为NO，则使用PORT模式。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认值为YES，即使用PASV工作模式。</span></span><br><span class="line">pasv_enable=YES/NO（YES）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在PASV工作模式下，数据连接可以使用的端口范围的最大端口，0 表示任意端口。默认值为0。</span></span><br><span class="line">pasv_max_port=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在PASV工作模式下，数据连接可以使用的端口范围的最小端口，0 表示任意端口。默认值为0。</span></span><br><span class="line">pasv_min_port=0</span><br></pre></td></tr></table></figure>
<h2 id="与连接相关的设置"><a href="#与连接相关的设置" class="headerlink" title="与连接相关的设置"></a>与连接相关的设置</h2><figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置vsftpd服务器是否以standalone模式运行。以standalone模式运行是一种较好的方式，此时listen必须设置为YES，此为默认值。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建议不要更改，有很多与服务器运行相关的配置命令，需要在此模式下才有效。若设置为NO，则vsftpd不是以独立的服务运行，要受到xinetd 服务的管控，功能上会受到限制。</span></span><br><span class="line">listen=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置vsftpd允许的最大连接数，默认值为0，表示不受限制。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若设置为100时，则同时允许有100个连接，超出的将被拒绝。只有在standalone模式运行才有效。</span></span><br><span class="line">max_clients=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置每个IP允许与FTP服务器同时建立连接的数目。默认值为0，表示不受限制。只有在standalone模式运行才有效。</span></span><br><span class="line">max_per_ip=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置FTP服务器在指定的IP地址上侦听用户的FTP请求。若不设置，则对服务器绑定的所有IP地址进行侦听。只有在standalone模式运行才有效。</span></span><br><span class="line">listen_address=IP地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置每个与FTP服务器的连接，是否以不同的进程表现出来。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认值为NO，此时使用ps aux |grep ftp只会有一个vsftpd的进程。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若设置为YES，则每个连接都会有一个vsftpd的进程。</span></span><br><span class="line">setproctitle_enable=YES/NO</span><br></pre></td></tr></table></figure>

<h2 id="虚拟用户相关配置"><a href="#虚拟用户相关配置" class="headerlink" title="虚拟用户相关配置"></a>虚拟用户相关配置</h2><a href="/202207251638/" title="vsftpd 虚拟用户配置过程参考">vsftpd 虚拟用户配置过程参考</a>

<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用虚拟用户功能，必须允许本地用户登录</span></span><br><span class="line">local_enable=YES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用虚拟用户配置，所有非匿名用户登录将视为游客，将被映射为guest_username</span></span><br><span class="line">guest_enable=YES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户映射的本地用户</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主配置文件中必需有，否则报错</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">500 OOPS: vsftpd: cannot locate user specified <span class="keyword">in</span> <span class="string">&#x27;guest_username&#x27;</span>:ftp</span></span><br><span class="line">guest_username=virftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户独立配置文件目录</span></span><br><span class="line">user_config_dir=/etc/vsftpd/virtual_user_conf          </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户使用本地用户的权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认为NO，虚拟用户具有和匿名用户一样的权限</span></span><br><span class="line">virtual_use_local_privs=YES | NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户加载的 pam 模块，默认为 /etc/pam.d/vsftpd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pam_service_name=vsftpd_vu</span></span><br></pre></td></tr></table></figure>

<h2 id="虚拟用户配置文件"><a href="#虚拟用户配置文件" class="headerlink" title="虚拟用户配置文件"></a>虚拟用户配置文件</h2><p>每个虚拟用户都需要一个单独的配置文件，虚拟用户配置文件在 vsftpd 配置中 <code>user_config_dir</code> 对应的目录 (<code>/etc/vsftpd/virtual_user_conf</code>) 下<br>文件名必须和用户名一样</p>
<figure class="highlight shell"><figcaption><span>user1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定虚拟用户根目录</span></span><br><span class="line">local_root=/home/ftpsite/user1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户是和本地用户有相同权限;NO：虚拟用户和匿名用户权限相同</span></span><br><span class="line">virtual_use_local_privs=YES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户对应的系统用户</span></span><br><span class="line">guest_username=virftp</span><br><span class="line"></span><br><span class="line">write_enable=YES</span><br><span class="line">lock_upload_files=NO</span><br><span class="line">anon_umask=022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">download_enable=NO</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">anon_upload_enable=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">anon_mkdir_write_enable=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">anon_other_write_enable=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chown_uploads=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chown_username=nono</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allow_anon_ssl=YES</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">force_anon_logins_ssl=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">force_anon_data_ssl=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cmds_allowed=CWD,LIST,MDTM,MKD,NLST,PASS,PASV,PORT,PWD,QUIT,RMD,RETR,SIZE,STOR,TYPE,USER,ACCT,APPE,CDUP,HELP,MODE,NOOP,REIN,STAT,STOU,STRU,SYST</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户将被锁定在自己的宿主目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chroot_local_user=YES</span>            </span><br></pre></td></tr></table></figure>

<h1 id="常用配置参考"><a href="#常用配置参考" class="headerlink" title="常用配置参考"></a>常用配置参考</h1><h2 id="nginx-反代-FTP-服务"><a href="#nginx-反代-FTP-服务" class="headerlink" title="nginx 反代 FTP 服务"></a>nginx 反代 FTP 服务</h2><a href="/202207261420/" title="Nginx 服务常用配置说明">Nginx 服务常用配置说明</a>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/steven-dou/p/14836224.html">FTP协议</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftpd 虚拟用户配置说明</title>
    <url>/202207251638/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3></blockquote>
<ul>
<li>Centos 7</li>
<li>Vsftpd 3.0.2</li>
</ul>
<p>vsftpd虚拟用户通过映射系统用户权限的方式，使虚拟用户具有和本地系统用户一样的权限，或者灵活的控制虚拟用户的权限(不和本地用户权限相同，不能高于本地权限)，达到访问权限的灵活控制，同时防止大批vsftpd用户添加到系统账号库中，使系统用户管理变动臃肿。</p>
<span id="more"></span>

<h3 id="创建虚拟用户映射的系统用户"><a href="#创建虚拟用户映射的系统用户" class="headerlink" title="创建虚拟用户映射的系统用户"></a>创建虚拟用户映射的系统用户</h3><p>系统用户virtftp拥有对ftp的读写权限，假设ftp根目录为&#x2F;data&#x2F;vsftpd&#x2F;<br>创建ftp用户组和用户virtftp，ftp相关系统账号属于ftp组  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd ftp</span><br><span class="line">useradd -d /data/vsftpd -M -s /sbin/nologin -g ftp virtftp</span><br><span class="line">mkdir /data/vsftpd</span><br><span class="line">chown -R virtftp:ftp /data/vsftpd</span><br><span class="line">chmod -R 750 /data/vsftpd</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ftp根目录属于用户virtftp,用户组为ftp，设置权限750，使virtftp用户拥有读写权限</p>
</blockquote>
<h3 id="创建虚拟用户的口令库"><a href="#创建虚拟用户的口令库" class="headerlink" title="创建虚拟用户的口令库"></a>创建虚拟用户的口令库</h3><p>需要使用db_load命令根据原始口令文件(<code>/etc/vsftpd/passwd.txt</code>)生成db口令库文件，原始文件中奇数行为用户名，偶数行为密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db_load -T -t hash -f /etc/vsftpd/passwd.txt /etc/vsftpd/passwd.db</span><br><span class="line">chmod 600 /etc/vsftpd/passwd.db</span><br></pre></td></tr></table></figure>
<p>修改pam认证文件&#x2F;etc&#x2F;pam.d&#x2F;vsftpd,只保留以下2行<br>或者重新创建文件&#x2F;etc&#x2F;pam.d&#x2F;vsftpd_vu,并在<code>vsftpd.conf</code>中配置<code>pam_service_name=vsftpd_vu</code>)</p>
<figure class="highlight shell"><figcaption><span>vsftpd_vu</span></figcaption><table><tr><td class="code"><pre><span class="line">auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/passwd</span><br><span class="line">account required /lib64/security/pam_userdb.so db=/etc/vsftpd/passwd  </span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>db=/etc/vsftpd/passwd</code> 为<code>db_load</code>生产的文件，不要带后缀 <code>.db</code><br>如果认证发生错误，可检查日志文件：<code>/var/log/secure</code></p>
</blockquote>
<h3 id="配置-vsftpd-启用虚拟用户"><a href="#配置-vsftpd-启用虚拟用户" class="headerlink" title="配置 vsftpd 启用虚拟用户"></a>配置 vsftpd 启用虚拟用户</h3><p>修改vsftpd配置文件，默认为<code>/etc/vsftpd/vsftpd.conf</code> <a href="/202207231311/" title="vsftpd.conf常用配置文件说明">vsftpd.conf常用配置文件说明</a></p>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用虚拟用户功能，必须允许本地用户</span></span><br><span class="line">local_enable=YES     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用虚拟用户配置，所有非匿名用户登录将视为游客，将被映射为guest_username</span>     </span><br><span class="line">guest_enable=YES     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主配置文件中必需有，否则报错</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">500 OOPS: vsftpd: cannot locate user specified <span class="keyword">in</span> <span class="string">&#x27;guest_username&#x27;</span>:ftp</span></span><br><span class="line">guest_username=virtftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户独立配置文件目录,每个虚拟用户有一个同名的配置文件于此目录下</span></span><br><span class="line">user_config_dir=/etc/vsftpd/virtual_user_conf          </span><br><span class="line">                        </span><br></pre></td></tr></table></figure>

<h3 id="配置虚拟用户配置文件"><a href="#配置虚拟用户配置文件" class="headerlink" title="配置虚拟用户配置文件"></a>配置虚拟用户配置文件</h3><p>虚拟用户配置文件位于 <code>vsftpd.conf</code> 配置 <code>user_config_dir</code> 指定的目录下，每个用户一个配置文件，配置文件和用户名同名<br>用户名，配置文件名，必须和口令文件中的用户名保持一致  </p>
<figure class="highlight shell"><figcaption><span>user1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定虚拟用户根目录</span></span><br><span class="line">local_root=/home/ftpsite/user1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户是和本地用户有相同权限;NO：虚拟用户和匿名用户权限相同</span>        </span><br><span class="line">virtual_use_local_privs=YES         </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户对应的系统用户</span></span><br><span class="line">guest_username=virtftp   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户将被锁定在自己的宿主目录</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">chroot_local_user=YES</span>    </span><br><span class="line">         </span><br><span class="line">write_enable=YES                               </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">lock_upload_files=NO</span></span><br><span class="line">anon_umask=022</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">download_enable=NO</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">anon_upload_enable=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">anon_mkdir_write_enable=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">anon_other_write_enable=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">chown_uploads=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">chown_username=nono</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">allow_anon_ssl=YES</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">force_anon_logins_ssl=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">force_anon_data_ssl=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">cmds_allowed=CWD,LIST,MDTM,MKD,NLST,PASS,PASV,PORT,PWD,QUIT,RMD,RETR,SIZE,STOR,TYPE,USER,ACCT,APPE,CDUP,HELP,MODE,NOOP,REIN,STAT,STOU,STRU,SYST</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="常用配置说明"><a href="#常用配置说明" class="headerlink" title="常用配置说明"></a>常用配置说明</h3><p>virtual_use_local_privs参数说明<br>当<code>virtual_use_local_privs=YES</code>时，虚拟用户和本地用户有相同的权限；<br>当<code>virtual_use_local_privs=NO</code> 时，虚拟用户和匿名用户有相同的权限，默认是NO。<br>当<code>virtual_use_local_privs=YES</code>，<code>write_enable=YES</code>时，虚拟用户具有写权限（上传、下载、删除、重命名）。<br>当<code>virtual_use_local_privs=NO</code>，<code>write_enable=YES</code>，<code>anon_world_readable_only=YES</code>，<code>anon_upload_enable=YES</code> 时，虚拟用户不能浏览目录，只能上传文件，无其他权限。<br>当<code>virtual_use_local_privs=NO</code>，<code>write_enable=YES</code>，<code>anon_world_readable_only=NO</code>，<code>anon_upload_enable=NO</code> 时，虚拟用户只能下载文件，无其他权限。<br>当<code>virtual_use_local_privs=NO</code>，<code>write_enable=YES</code>，<code>anon_world_readable_only=NO</code>，<code>anon_upload_enable=YES</code> 时，虚拟用户只能上传和下载文件，无其他权限。<br>当<code>virtual_use_local_privs=NO</code>，<code>write_enable=YES</code>，<code>anon_world_readable_only=NO</code>，<code>anon_mkdir_write_enable=YES</code> 时，虚拟用户只能下载文件和创建文件夹，无其他权限。<br>当<code>virtual_use_local_privs=NO</code>，<code>write_enable=YES</code>，<code>anon_world_readable_only=NO</code>，<code>anon_other_write_enable=YES</code> 时，虚拟用户只能下载、删除和重命名文件，无其他权限。  </p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title>网宿云 cdn 预热脚本</title>
    <url>/202207251026/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>将源站的内容主动预取到 CDN 节点，用户首次访问可直接命中缓存，即提升首次访问速度，又能有效缓解源站压力。</p>
<ul>
<li>数据格式：请求和响应都支持 json&#x2F;xml，xml 的参数与 json 的参数基本一致，json 的参数是驼峰分隔，xml 的参数是“-”分隔，详见示例。</li>
<li>限制说明：每个账号的预取并发是 10，调高并发会增加回源的压力，请联系技术支持人员评估。</li>
</ul>
<span id="more"></span>

<h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">类型</th>
<th align="center">是否必填</th>
<th align="left">说明</th>
<th align="left">内部备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">urls</td>
<td align="center">Array</td>
<td align="center">是</td>
<td align="left">要预取到 CDN 节点的 url 集合，url 格式说明：<br/>1）URL 必须以’http:&#x2F;&#x2F;‘ 或 ‘https:&#x2F;&#x2F;‘ 开头，输入示例：<a href="http://www.a.com/image/test.png%E3%80%82">http://www.a.com/image/test.png。</a> <br/>2）每个 url 最大长度 2000 字符。<br/>3）每个 url 所在的域名必须是在我司加速的域名且有预取权限。<br/>4）url 中如果包含中文字符，则提交的 url 需要是中文转义后的url，采用 utf-8 方式转义。<br/>5）每日不超过 20000 条，不超过 200G 文件大小（账号粒度可调，联系技术支持人员调整）。<br/>6）每次接口调用 url 的总数不超过 400 条。</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">isRange</td>
<td align="center">Int</td>
<td align="center">否</td>
<td align="left">是否需要预取 range 段。<br/>1）默认为 0，表示预取完整的文件；<br/>2）1 表示预取文件 0~512KB 的 range 段（账号粒度可调，联系技术支持人员调整）。</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">aliasDomain</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="left">账号开启 ts 解析<br/>有值的话，m3u8 和生成的 ts 文件需要同时生成一份带别名的url</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">parentDir</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="left">一级目录，该参数和 aliasDomain 一起使用<br/>如果有值的话，是做为别名的一级目录</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="响应参数"><a href="#响应参数" class="headerlink" title="响应参数"></a>响应参数</h3><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x-cnc-request-id</td>
<td align="center">String</td>
<td align="left">本次请求的唯一标识,当接口调用异常时，可将 requestID 提供给网宿技术支持，便于排查接口的访问日志。</td>
</tr>
<tr>
<td align="center">Code</td>
<td align="center">Int</td>
<td align="left">表示任务创建结果的状态码，1 表示任务提交成功，0 表示任务提交失败</td>
</tr>
<tr>
<td align="center">Message</td>
<td align="center">String</td>
<td align="left">表示任务提交后，系统的响应消息</td>
</tr>
<tr>
<td align="center">itemId</td>
<td align="center">String</td>
<td align="left">调用一次接口并提交任务成功后，将返回一个 itemId，是当次提交任务的唯一标识，通过 itemId 可批量查询任务的状态（成功&#x2F;失败）。</td>
</tr>
</tbody></table>
<h3 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">username=&quot;username&quot;</span><br><span class="line">apiKey=&quot;apiKey&quot;</span><br><span class="line">date=`env LANG=&quot;en_US.UTF-8&quot; date -u &quot;+%a, %d %b %Y %H:%M:%S GMT&quot;`</span><br><span class="line">password=`echo -en &quot;$date&quot; | openssl dgst -sha1 -hmac $apiKey -binary | </span><br><span class="line">openssl enc -base64`</span><br><span class="line">curl -i --url &quot;https://open.chinanetcenter.com/ccm/fetch/ItemIdReceiver&quot; -X &quot;POST&quot; -u &quot;$username:$password&quot; \</span><br><span class="line"> -H &quot;Date:$date&quot; -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;</span><br><span class="line"> &quot;urls&quot;: [</span><br><span class="line"> &quot;http://www.testb.com/test/test1.txt&quot;,</span><br><span class="line"> &quot;http://www.testb.com/test/test2.txt&quot;</span><br><span class="line"> ],</span><br><span class="line">&quot;isRange&quot;:0</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://wcs.chinanetcenter.com/document/Tools/GenerateUploadToken"><code>apiKey</code> 生成链接</a></p>
</blockquote>
<p>正确的响应示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Fri, 26 Oct 2012 06:33:26 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8 x-cnc-request-id:&#123;id string auto generated by cloud server&#125;</span><br><span class="line">&#123;</span><br><span class="line"> &quot;Code&quot;: 1,</span><br><span class="line"> &quot;Message&quot;: &quot;success&quot;,</span><br><span class="line"> &quot;itemId&quot;: &quot;a2cfcc6fe79c4a8abcab806578f9bada&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://wcs.chinanetcenter.com/document/Tools/GenerateUploadToken">官网说明</a><br><a href="https://s.csms.tech/file/01%E6%8E%A8%E8%8D%90-%E9%A2%84%E5%8F%96%E6%96%87%E4%BB%B6.pdf">网宿cdn预热完整文档</a></p>
]]></content>
      <categories>
        <category>云平台</category>
        <category>网宿</category>
      </categories>
      <tags>
        <tag>云平台</tag>
        <tag>网宿</tag>
      </tags>
  </entry>
  <entry>
    <title>网宿云存储 python sdk 常用操作</title>
    <url>/f63bf868/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li><p>Centos7</p>
</li>
<li><p>Python3</p>
</li>
<li><p>wcs-python3-sdk (5.0.35)</p>
</li>
</ul>
<p>网宿云 python sdk 安装命令 <code>pip3 install wcs-python3-sdk</code>， 安装后包含 cli 工具 <code>wcscmd</code></p>
<h1 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wcscmd --configure [--config=FILE] </span><br></pre></td></tr></table></figure>

<p><code>--config=FILE  </code>配置文件存储路径，默认<code>~/.wcscfg</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[参考链接](https://github.com/Wangsu-Cloud-Storage/wcs-python-sdk)">[1]</span></a></sup></p>
<h1 id="wcscmd-常用操作"><a href="#wcscmd-常用操作" class="headerlink" title="wcscmd 常用操作"></a>wcscmd 常用操作</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wcscmd listbucket </span><br><span class="line">wcscmd stat wcs://BUCKET/OBJECT  \# 查询文件信息</span><br><span class="line">wcscmd deletePrefix wcs://BUCKET PREFIX  \# 根据前缀（文件路径，必须从头开始匹配，不需要最前面的/）删除目录或文件</span><br><span class="line">wcscmd put wcs://BUCKET/file file</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="列出所有的文件"><a href="#列出所有的文件" class="headerlink" title="列出所有的文件"></a>列出所有的文件</h2><p>以下命令列出所有文件列表，并写入文件中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wcscmd listall wcs://BUCKET ./temp/f</span><br></pre></td></tr></table></figure>

<h1 id="python3-sdk-操作"><a href="#python3-sdk-操作" class="headerlink" title="python3 sdk 操作"></a>python3 sdk 操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wcs.commons.config <span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> wcs.services.client <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line">config_file = <span class="string">&quot;/root/.wcscfg&quot;</span></span><br><span class="line">cfg = Config(config_file)</span><br><span class="line">cli = Client(cfg)</span><br><span class="line">bucketName = <span class="string">&quot;TestBucket&quot;</span></span><br><span class="line">buckList = cli.bucket_list(bucketName, marker=<span class="string">&#x27;&#x27;</span>)    <span class="comment"># 列出bucket中的文件列表，每次最多获取1000个，第一页 `marker=&#x27;&#x27;`, 请求第一页的响应中marker的值为新的页的marker，可通过新的marker继续发起请求</span></span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/Wangsu-Cloud-Storage/wcs-python-sdk">参考链接</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>云平台</category>
        <category>网宿</category>
      </categories>
      <tags>
        <tag>云平台</tag>
        <tag>网宿</tag>
      </tags>
  </entry>
  <entry>
    <title>婚礼用品</title>
    <url>/202403051140/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="伴手礼选择"><a href="#伴手礼选择" class="headerlink" title="伴手礼选择"></a>伴手礼选择</h1><h2 id="伴娘伴手礼"><a href="#伴娘伴手礼" class="headerlink" title="伴娘伴手礼"></a>伴娘伴手礼</h2><table>
<thead>
<tr>
<th>类别</th>
<th>产品类别推荐</th>
<th>详情参考</th>
</tr>
</thead>
<tbody><tr>
<td>香薰、香水</td>
<td>香薰礼盒</td>
<td></td>
</tr>
<tr>
<td>化妆品</td>
<td></td>
<td></td>
</tr>
<tr>
<td>花果茶</td>
<td></td>
<td></td>
</tr>
<tr>
<td>喜糖礼盒</td>
<td>佳偶良缘 喜糖礼盒</td>
<td></td>
</tr>
</tbody></table>
<p>参考链接：<br><a href="https://www.zhihu.com/question/516873685">20款百元左右的高级感伴手礼</a></p>
<h2 id="伴郎伴手礼"><a href="#伴郎伴手礼" class="headerlink" title="伴郎伴手礼"></a>伴郎伴手礼</h2><table>
<thead>
<tr>
<th>类别</th>
<th>产品类别推荐</th>
<th>详情参考</th>
</tr>
</thead>
<tbody><tr>
<td>茶</td>
<td>过宋小湯四季养生礼盒<br/>UMTEA 关心茶礼盒</td>
<td></td>
</tr>
<tr>
<td>葡萄酒</td>
<td>名庄95分 蓝风铃甜白葡萄酒</td>
<td></td>
</tr>
<tr>
<td>点心</td>
<td>马卡龙甜点糕点铁盒</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>生活日常</category>
      </categories>
      <tags>
        <tag>生活日常</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 小脚本</title>
    <url>/202302251557/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="定时同步数据到-Linux-rsync-服务器"><a href="#定时同步数据到-Linux-rsync-服务器" class="headerlink" title="定时同步数据到 Linux rsync 服务器"></a>定时同步数据到 Linux rsync 服务器</h1><p>脚本内容如下，本示例中 Windows 版 <code>rsync</code> 客户端安装位置： <code>d:\cwrsync_6.2.4_x64_free\</code>，密码文件路径：<code>d:\cwrsync_6.2.4_x64_free\rsync.client.pswd</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">:start</span><br><span class="line">cd d:\</span><br><span class="line">cd cwrsync_6.2.4_x64_free</span><br><span class="line"></span><br><span class="line">.\bin\rsync.exe --progress -a -c -r -u -t --timeout=300 -z --password-file rsync.client.pswd --exclude &#x27;.idea&#x27; --exclude &#x27;rsync2Server.bat&#x27; /cygdrive/d/cwrsync_6.2.4_x64_free/data/ rsync@$&#123;RSYNC_SERVER&#125;:backup</span><br><span class="line"></span><br><span class="line">choice /t 5 /d y /n &gt;nul</span><br><span class="line"></span><br><span class="line">goto start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 远程登录失败</title>
    <url>/f5e030ac/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>远程登录 windows 失败，报错:</p>
<blockquote>
<p>由于没有远程桌面授权服务器可以提供许可证，远程会话连接已断开，请跟服务器管理员联系</p>
</blockquote>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li>打开 cmd，执行以下命令远程登录无法登录的 Windows 主机<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mstsc /v:<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span> /admin</span><br></pre></td></tr></table></figure></li>
<li>打开注册表</li>
</ol>
<p><img src="https://i.csms.tech/img_1.png"><br>3. 找到路径： HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\RCM\GracePeriod.如果超过120天后RCM下面会有一个GracePeriod,先备份这项注册表，再删除除了默认的的注册表项。</p>
<ol start="4">
<li>重启电脑后生效.</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
        <category>常见错误</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>wireshark 抓包工具使用</title>
    <url>/202211251613/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="wiresark-显示过滤器使用方法"><a href="#wiresark-显示过滤器使用方法" class="headerlink" title="wiresark 显示过滤器使用方法"></a>wiresark 显示过滤器使用方法</h1><p>Wireshark 提供了两种过滤器</p>
<ul>
<li><strong>捕获过滤器</strong>：在抓包之前就设定好过滤条件，然后只抓取符合条件的数据包。</li>
<li><strong>显示过滤器</strong>：在已捕获的数据包集合中设置过滤条件，隐藏不想显示的数据包，只显示符合条件的数据包。</li>
</ul>
<p>这两种过滤器所使用的语法是完全不同的，捕捉网卡数据的其实并不是 Wireshark，而是 WinPcap，要按 WinPcap 的规则来，显示过滤器就是 Wireshark 对已捕捉的数据进行筛选。</p>
<h2 id="显示过滤器中常用的关系计算符号"><a href="#显示过滤器中常用的关系计算符号" class="headerlink" title="显示过滤器中常用的关系计算符号"></a>显示过滤器中常用的关系计算符号</h2><table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>eq</code><br/><code>==</code></td>
<td>等于</td>
<td><code>ip.src==10.10.10.10</code> <br/><code>ip.src eq 10.10.10.10</code></td>
</tr>
<tr>
<td><code>ne</code><br/><code>!=</code></td>
<td>不等于</td>
<td><code>ip.src!=10.10.10.10</code> <br/><code>ip.src ne 10.10.10.10</code></td>
</tr>
<tr>
<td><code>gt</code><br/><code>&gt;</code></td>
<td>大于</td>
<td></td>
</tr>
<tr>
<td><code>lt</code><br/><code>&lt;</code></td>
<td>小于</td>
<td></td>
</tr>
<tr>
<td><code>ge</code><br/><code>&gt;=</code></td>
<td>大于等于</td>
<td></td>
</tr>
<tr>
<td><code>le</code><br/><code>&lt;=</code></td>
<td>小于等于</td>
<td></td>
</tr>
<tr>
<td><code>contains</code></td>
<td>包含</td>
<td><code>http.host contains com</code></td>
</tr>
</tbody></table>
<h2 id="显示过滤器中常用的逻辑计算符号"><a href="#显示过滤器中常用的逻辑计算符号" class="headerlink" title="显示过滤器中常用的逻辑计算符号"></a>显示过滤器中常用的逻辑计算符号</h2><table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>and</code><br/><code>&amp;&amp;</code></td>
<td>与</td>
<td><code>http.host contains com &amp;&amp; ip.src == 44.199.163.86</code><br/><code>http.host contains com and ip.src == 44.199.163.86</code></td>
</tr>
<tr>
<td><code>or</code><br/><code>||</code></td>
<td>或</td>
<td></td>
</tr>
<tr>
<td><code>not</code><br/><code>!</code></td>
<td>非</td>
<td></td>
</tr>
</tbody></table>
<h2 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h2><h3 id="针对-IP-过滤"><a href="#针对-IP-过滤" class="headerlink" title="针对 IP 过滤"></a>针对 IP 过滤</h3><ul>
<li>对源地址进行过滤<br><code>ip.src == 192.168.0.1</code></li>
<li>对目的地址进行过滤<br><code>ip.dst == 192.168.0.1</code></li>
<li>对源地址或者目的地址进行过滤<br><code>ip.addr == 192.168.0.1</code></li>
<li>如果想排除以上的数据包，只需要将其用括号囊括，然后使用 <code>!</code> 即可<br><code>!(ip.addr == 192.168.0.1)</code></li>
</ul>
<h3 id="针对协议过滤"><a href="#针对协议过滤" class="headerlink" title="针对协议过滤"></a>针对协议过滤</h3><p>针对某种协议的数据包，表达式很简单仅仅需要把协议的名字（必须小写）输入即可</p>
<p>常见协议：<br><code>tcp</code><br><code>udp</code><br><code>arp</code><br><code>icmp</code><br><code>http</code><br><code>smtp</code><br><code>ftp</code><br><code>dns</code><br><code>msnms</code><br><code>ip</code><br><code>ssl</code><br><code>oicq</code><br><code>bootp</code></p>
<h3 id="针对端口过滤"><a href="#针对端口过滤" class="headerlink" title="针对端口过滤"></a>针对端口过滤</h3><ul>
<li>捕获某一端口的数据包（以 tcp 协议为例）<br><code>tcp.port == 80</code></li>
<li>捕获多端口的数据包，可以使用 <code>and</code> 来连接，下面是捕获高于某端口的表达式（以 udp 协议为例）<br><code>udp.port &gt;= 2048</code></li>
</ul>
<h3 id="针对-http-请求的一些过滤实例"><a href="#针对-http-请求的一些过滤实例" class="headerlink" title="针对 http 请求的一些过滤实例"></a>针对 http 请求的一些过滤实例</h3><ul>
<li>过滤出请求地址中包含 <code>user</code> 的请求，不包括域名<br><code>http.request.uri contains &quot;User&quot;</code></li>
<li>精确过滤域名<br><code>http.host==baidu.com</code></li>
<li>模糊过滤域名<br><code>http.host contains &quot;baidu&quot;</code></li>
<li>过滤请求的 content_type 类型<br><code>http.content_type ==&quot;text/html&quot;</code><br>-过滤 http 请求方法<br><code>http.request.method==&quot;POST&quot;</code></li>
<li>过滤 tcp 端口<br><code>tcp.port==80</code><br><code>http &amp;&amp; tcp.port==80 or tcp.port==5566</code></li>
<li>过滤 http 响应状态码<br><code>http.response.code==302</code></li>
<li>过滤含有指定 cookie 的 http 数据包<br><code>http.cookie contains &quot;userid&quot;</code></li>
</ul>
]]></content>
      <categories>
        <category>TCPIP</category>
      </categories>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>xshell 常用配置</title>
    <url>/202208101059/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>xshell7</li>
</ul>
<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><h2 id="字体配置"><a href="#字体配置" class="headerlink" title="字体配置"></a>字体配置</h2><p>(菜单栏)查看 &gt; 工具栏 &gt; 标准按钮  </p>
<p><img src="https://i.csms.tech/img_36.png"></p>
<p>中文字体和英文字体需要单独配置，建议配置默认会话属性</p>
<p>(菜单栏)文件 &gt; 默认会话属性，找到 <code>外观</code> 分别配置 <code>字体</code> 以及 <code>亚洲字体</code>:</p>
<p><img src="https://i.csms.tech/img_225.png"></p>
<span id="more"></span>

<h2 id="Meta-键配置"><a href="#Meta-键配置" class="headerlink" title="Meta 键配置"></a>Meta 键配置</h2><p>(菜单栏)文件 &gt; 当前会话属性:<br><img src="https://i.csms.tech/img_37.png"></p>
<p>终端中使用 <code>Alt .</code> 可自动补齐上一条命令的最后一个参数  </p>
<h2 id="配置-选中即复制"><a href="#配置-选中即复制" class="headerlink" title="配置 选中即复制"></a>配置 选中即复制</h2><p>工具-&gt;选项<br><img src="https://i.csms.tech/img_38.png"></p>
<p>选择 <code>键盘和鼠标</code><br><img src="https://i.csms.tech/img_39.png"></p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>xshell</category>
      </categories>
      <tags>
        <tag>xshell</tag>
      </tags>
  </entry>
  <entry>
    <title>YAML 语法格式</title>
    <url>/202405171109/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>YAML（YAML Ain’t Markup Language）是一种专门用于数据序列化的格式，常用于配置文件、数据交换等场景。它以其可读性和简洁性而受到开发者的青睐。YAML设计的目标是易于人类阅读和编写，并且易于与其他编程语言进行交互。下面是YAML语法的详细介绍</p>
<h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><ul>
<li><p><strong>数据类型</strong> ：YAML 支持标量（如字符串、整数、浮点数）、序列（列表）和映射（字典）三种基本数据类型。</p>
</li>
<li><p><strong>缩进</strong> ：YAML 使用缩进表示结构层级关系，通常每个层级缩进两个或四个空格（<em><strong>禁止使用制表符</strong></em>）。</p>
</li>
</ul>
<h2 id="标量数据类型"><a href="#标量数据类型" class="headerlink" title="标量数据类型"></a>标量数据类型</h2><p><strong>标量（Scalars）</strong> 是单个的、不可分割的值。可以是字符串、整数或浮点数。标量可以是单行的值，也可以是多行的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单行字符串</span></span><br><span class="line">name: John Doe</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">整数</span></span><br><span class="line">age: 35</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浮点数</span></span><br><span class="line">height: 5.9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">布尔值</span></span><br><span class="line">is_student: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>多行字符串可以使用字面量样式（<code>|</code>）或折叠样式（<code>&gt;</code>）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字面量样式保留换行符</span></span><br><span class="line">address: |</span><br><span class="line">  123 Main St</span><br><span class="line">  Anytown, WW 12345</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">折叠样式将连续的行合并为一行</span></span><br><span class="line">description: &gt;</span><br><span class="line">  This is a very long sentence</span><br><span class="line">  that spans several lines in the YAML</span><br><span class="line">  but will be rendered as a single</span><br><span class="line">  line in the output.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>可以显式指定数据类型，例如字符串可以用单引号或双引号包围</strong></li>
<li><strong>字符串通常不需要引号，但如果含有特殊字符，则需要使用单引号或双引号。</strong></li>
<li><strong><code>true</code>, <code>false</code>, <code>null</code> 等特定词汇表示布尔值和 <code>Null</code>。</strong></li>
<li><strong>时间和日期需要遵循ISO格式。</strong></li>
</ul>
<h2 id="列表（Sequences）"><a href="#列表（Sequences）" class="headerlink" title="列表（Sequences）"></a>列表（Sequences）</h2><p><strong>列表（Sequences）</strong> 是一组按顺序排列的值（类似于数组或列表），用破折号加空格表示新的元素，每个列表项占一行，也需要正确缩进。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列表</span></span><br><span class="line">hobbies:</span><br><span class="line">  - Reading</span><br><span class="line">  - Fishing</span><br><span class="line">  - Dancing</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="字典（Mappings）"><a href="#字典（Mappings）" class="headerlink" title="字典（Mappings）"></a>字典（Mappings）</h2><p><strong>映射&#x2F;字典（Mappings）</strong> 是键值对的集合（类似于字典或哈希表），用冒号加空格表示键值对，键值对需要正确缩进</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字典</span></span><br><span class="line">person:</span><br><span class="line">  name: John Doe</span><br><span class="line">  age: 35</span><br><span class="line">  city: New York</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h2><p>列表和字典可以嵌套使用，形成复杂的结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">嵌套的列表和字典</span></span><br><span class="line">employees:</span><br><span class="line">  - name: John Doe</span><br><span class="line">    job: Developer</span><br><span class="line">    skills:</span><br><span class="line">      - Python</span><br><span class="line">      - SQL</span><br><span class="line">  - name: Jane Smith</span><br><span class="line">    job: Designer</span><br><span class="line">    skills:</span><br><span class="line">      - Photoshop</span><br><span class="line">      - Illustrator</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="锚点和别名"><a href="#锚点和别名" class="headerlink" title="锚点和别名"></a>锚点和别名</h2><p>YAML支持定义锚点（<code>&amp;</code>）和别名（<code>*</code>）来重用（引用）文档中的某部分，使用 <code>&amp;</code> 创建一个锚点（alias），之后可以用 <code>*</code> 引用这个锚点。</p>
<p>使用 <code>&lt;&lt;</code> 和 <code>*</code> 来合并已有（引用）的映射。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用锚点和别名</span></span><br><span class="line">defaults: &amp;defaults</span><br><span class="line">  adapter: postgres</span><br><span class="line">  host: localhost</span><br><span class="line"></span><br><span class="line">development:</span><br><span class="line">  &lt;&lt;: *defaults</span><br><span class="line">  database: dev_db</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">  &lt;&lt;: *defaults</span><br><span class="line">  database: test_db</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字符串锚点和引用</span></span><br><span class="line">name: &amp;name_anchor &quot;John Doe&quot;</span><br><span class="line">contact:</span><br><span class="line">  name: *name_anchor</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>使用井号 <code>#</code> 开始一个注释，井号后面的内容将被视为注释，注释内容直到行尾。</p>
<h2 id="多文档支持"><a href="#多文档支持" class="headerlink" title="多文档支持"></a>多文档支持</h2><p><strong>一个 YAML 文件可以包含多个文档，每个文档用三个短横线 <code>---</code> 分隔。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">document1:</span><br><span class="line">  - item1</span><br><span class="line">---</span><br><span class="line">document2:</span><br><span class="line">  - item2</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title>yum</title>
    <url>/202208111442/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>CentOS Linux release 7.9.2009 (Core)</li>
<li>yum-3.4.3</li>
</ul>
<h1 id="yum-命令示例"><a href="#yum-命令示例" class="headerlink" title="yum 命令示例"></a>yum 命令示例</h1><h2 id="查询指定命令来自哪个安装包"><a href="#查询指定命令来自哪个安装包" class="headerlink" title="查询指定命令来自哪个安装包"></a>查询指定命令来自哪个安装包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum whatprovides ip</span></span><br><span class="line">iproute-4.11.0-30.el7.x86_64 : Advanced IP routing and network device configuration tools</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /sbin/ip</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>rpm</code> 查询已安装文件来自哪个安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rpm -qf /sbin/ip</span></span><br><span class="line">iproute-4.11.0-30.el7.x86_64</span><br></pre></td></tr></table></figure>

<h2 id="仅下载安装包而不进行安装操作"><a href="#仅下载安装包而不进行安装操作" class="headerlink" title="仅下载安装包而不进行安装操作"></a>仅下载安装包而不进行安装操作</h2><p>如果只下载安装包而不进行安装，可以使用 <code>yumdownloader</code> 命令，此命令来自安装包 <code>yum-utils</code>，如果不存在可以安装 <code>yum-utils</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yumdownloader &lt;package-name&gt;</span><br></pre></td></tr></table></figure>
<p>以上下载指定的安装包而不安装，安装包会下载到当前目录</p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="The-GPG-keys-listed-for-the-“MySQL-5-7-Community-Server”-repository-are-already-installed-but-they-are-not-correct-for-this-package"><a href="#The-GPG-keys-listed-for-the-“MySQL-5-7-Community-Server”-repository-are-already-installed-but-they-are-not-correct-for-this-package" class="headerlink" title="The GPG keys listed for the “MySQL 5.7 Community Server” repository are already installed but they are not correct for this package"></a>The GPG keys listed for the “MySQL 5.7 Community Server” repository are already installed but they are not correct for this package</h2><p><strong>解决方法</strong></p>
<p>修改对应 <code>yum</code> 源的配置文件，将其中的配置 <code>gpgcheck=1</code> 改为 <code>gpgcheck=0</code>，以此跳过 key 验证</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
