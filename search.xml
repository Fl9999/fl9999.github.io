<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AppScan v10.0.7.28135 安装破解</title>
    <url>/2207220210/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>HCL AppScan（原名IBM Security AppScan）是原IBM的Rational软件部门的一组网络安全测试和监控工具，2019年被HCL技术公司收购。AppScan旨在在开发过程中对Web应用程序的安全漏洞进行测试。  </p>
<span id="more"></span>

<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Windows Server 2016 Datacenter</li>
<li>AppScan v10.0.7.28135</li>
</ul>
<h3 id="AppScan-安装激活"><a href="#AppScan-安装激活" class="headerlink" title="AppScan 安装激活"></a>AppScan 安装激活</h3><p>下载链接<br><a href="https://www.yunzhongzhuan.com/#sharefile=H51riiWG_46315">www.ddosi.org下载入口</a></p>
<blockquote>
<p>解压密码:<a href="http://www.ddosi.org/">www.ddosi.org</a></p>
</blockquote>
<p><a href="https://s.csms.tech/file/HCL_AppScan_Standard_v10.0.7.28135.rar">其他下载地址</a></p>
<p>下载安装包后，点击文件 <code>Appscan_Setup_v10.0.7.28135.exe</code> 安装</p>
<p>安装完成后，复制Crack目录下的文件 <code>AppScanSDK.dll</code>,<code>HclLicenseProvider.dll</code> 到 APPscan安装目录(默认为 <code>C:\Program Files (x86)\HCL\AppScan Standard</code>) 进行替换，完成破解</p>
<p>成功破解后的截图如下</p>
<p><img src="https://i.csms.tech/img_17.png"> </p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.ddosi.org/appscan-2/">参考链接</a></p>
]]></content>
      <categories>
        <category>安全</category>
        <category>AppScan</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>AppScan</tag>
      </tags>
  </entry>
  <entry>
    <title>Django+uwsgi+nginx配置示例</title>
    <url>/7d1a39d2/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>centos 7</li>
<li>Python 3.10</li>
<li>Django 4.0</li>
<li>uwsgi 2.0.20</li>
<li>nginx 1.20.1</li>
<li>venv<blockquote>
<p>示例中虚拟环境位于 <code>/opt/vb/</code>, Django工程目录位于 <code>/opt/vb/vb/</code> , 工程名称为vb</p>
</blockquote>
</li>
</ul>
<h3 id="uwsgi配置文件-uwsgi-ini-配置示例"><a href="#uwsgi配置文件-uwsgi-ini-配置示例" class="headerlink" title="uwsgi配置文件 (uwsgi.ini) 配置示例"></a>uwsgi配置文件 (uwsgi.ini) 配置示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket = 127.0.0.1:8081</span><br><span class="line">chdir = /opt/vb/vb</span><br><span class="line">wsgi-file = ./vb/wsgi.py</span><br><span class="line">master = true         //主进程</span><br><span class="line">vhost = true          //多站模式</span><br><span class="line">no-site = true        //多站模式时不设置入口模块和文件</span><br><span class="line">workers = 2           //子进程数</span><br><span class="line">reload-mercy = 10     </span><br><span class="line">vacuum = true         //退出、重启时清理文件</span><br><span class="line">max-requests = 1000   </span><br><span class="line">limit-as = 512</span><br><span class="line">buffer-size = 30000</span><br><span class="line">pidfile = uwsgi-8081.pid</span><br><span class="line">daemonize = uwsgi-8081.log</span><br><span class="line">pythonpath = /opt/vb/env/lib/python3.10/site-packages/</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="nginx-配置文件示例"><a href="#nginx-配置文件示例" class="headerlink" title="nginx 配置文件示例"></a>nginx 配置文件示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       server_name csms.tech;</span><br><span class="line"></span><br><span class="line">        location / &#123;            </span><br><span class="line">            include  uwsgi_params;</span><br><span class="line">            uwsgi_pass  127.0.0.1:8081;</span><br><span class="line">            uwsgi_param UWSGI_SCRIPT vb.wsgi;</span><br><span class="line">            uwsgi_param UWSGI_CHDIR /opt/vb/vb;       </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        location /static/ &#123;</span><br><span class="line">                alias /opt/vb/vb/staticCollects/;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log log/uwsgi.access.log main;</span><br><span class="line">        error_log log/uwsgi.error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="/d5da7d5e/" title="Django常见错误">Django常见错误</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>Django</tag>
        <tag>Uwsgi</tag>
      </tags>
  </entry>
  <entry>
    <title>Django常见错误</title>
    <url>/d5da7d5e/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><hr>
<h4 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h4><ul>
<li>centos7</li>
<li>python3.6</li>
</ul>
<h4 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h4><blockquote>
<p>django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.</p>
</blockquote>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>

<p>编辑文件<code>./python36/lib/python3.6/site-packages/django/db/backends/mysql/__init__.py</code>, 输入以下内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql </span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<hr>
<h4 id="环境信息-1"><a href="#环境信息-1" class="headerlink" title="环境信息"></a>环境信息</h4><ul>
<li>centos7</li>
<li>python3.6</li>
</ul>
<h4 id="报错信息-1"><a href="#报错信息-1" class="headerlink" title="报错信息"></a>报错信息</h4><p><code>django-admin runserver</code></p>
<blockquote>
<p>django.core.exceptions.ImproperlyConfigured: Requested setting DEBUG, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings</p>
</blockquote>
<h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>使用命令<br><code>python3 manage.py runserver</code></p>
<hr>
<h4 id="环境信息-2"><a href="#环境信息-2" class="headerlink" title="环境信息"></a>环境信息</h4><ul>
<li>centos7</li>
<li>python3.10</li>
<li>uwsgi 2.0.20</li>
<li>venv</li>
</ul>
<h4 id="报错信息-2"><a href="#报错信息-2" class="headerlink" title="报错信息"></a>报错信息</h4><p>uwsgi 启动后报错(查看uwsgi日志输出)</p>
<blockquote>
<p>from django.core.wsgi import get_wsgi_application<br>ModuleNotFoundError: No module named ‘django’</p>
</blockquote>
<h4 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h4><p>uwsgi配置文件(<code>uwsgi.ini</code> )中添加python路径, 在配置文件中添加如下配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pythonpath = /env/lib/python3<span class="number">.10</span>/site-packages/</span><br></pre></td></tr></table></figure>

<p>完整uwsgi配置文件示例(使用python venv模块创建虚拟环境情况下)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket = 127.0.0.1:8081</span><br><span class="line">chdir = /opt/vb/vb</span><br><span class="line">wsgi-file = ./vb/wsgi.py</span><br><span class="line">master = true         //主进程</span><br><span class="line">vhost = true          //多站模式</span><br><span class="line">no-site = true        //多站模式时不设置入口模块和文件</span><br><span class="line">workers = 2           //子进程数</span><br><span class="line">reload-mercy = 10     </span><br><span class="line">vacuum = true         //退出、重启时清理文件</span><br><span class="line">max-requests = 1000   </span><br><span class="line">limit-as = 512</span><br><span class="line">buffer-size = 30000</span><br><span class="line">pidfile = uwsgi-8081.pid</span><br><span class="line">daemonize = uwsgi-8081.log</span><br><span class="line">pythonpath = /opt/vb/env/lib/python3.10/site-packages/</span><br></pre></td></tr></table></figure>

<h4 id="报错信息-3"><a href="#报错信息-3" class="headerlink" title="报错信息"></a>报错信息</h4><p>uwsgi 启动后报错(查看uwsgi日志输出)</p>
<blockquote>
<p>unable to load app 0 (mountpoint&#x3D;’|’) (callable not found or import error)<br>— no python application found, check your startup logs for errors —</p>
</blockquote>
<h4 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h4><p>uwsgi配置文件(<code>uwsgi.ini</code> )中添加<code>wsgi.py</code>路径, 在配置文件中添加如下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsgi-file = ./vb/wsgi.py</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 模板中循环嵌套</title>
    <url>/c97b0902/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>模板中需要循环中循环，<code>&#123;% for i in alist %&#125;</code>,假如i是个元组或列表，需要继续循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> alist %&#125;</span><br><span class="line">	&#123;% <span class="keyword">with</span> temp=I %&#125;</span><br><span class="line">		&#123;% <span class="keyword">for</span> k <span class="keyword">in</span> temp %&#125;</span><br><span class="line">		    …</span><br><span class="line">		&#123;% endfor %&#125;</span><br><span class="line">	&#123;% endwith %&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>
<p>或使用如下方式，data &#x3D; [[1,2],[3,4]]：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> l <span class="keyword">in</span> data%&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% <span class="keyword">for</span> temp <span class="keyword">in</span> l % &#125;</span><br><span class="line">		&#123;% <span class="keyword">if</span> forloop.first % &#125;</span><br><span class="line">			<span class="string">&#x27;&#123;&#123;temp&#125;&#125;&#x27;</span>,</span><br><span class="line">		&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">			&#123;&#123;temp&#125;&#125;</span><br><span class="line">		&#123;% endif %&#125;</span><br><span class="line">	&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django model外键的反向引用</title>
    <url>/dcca5850/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">	question_text=models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">	pub_date=models.DateTimeField(<span class="string">&#x27;datepublished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	def__str__(self):</span><br><span class="line">		returnself.question_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">	question=models.ForeignKey(Question,on_delete=models.CASCADE)</span><br><span class="line">	choice_text=models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">	votes=models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	def__str__(self):</span><br><span class="line">		returnself.choice_text</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上例中，Choice引用了Question作为外键，在模板中通过Question对象获取所有引用了Question对象的Choice对象，可以使用以下方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">	&lt;li&gt;&#123;&#123;choice.choice_text&#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>

<p>使用question.choice_set.all的方式获取所有引用question对象的Choice对象实例</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
        <category>model</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Model</tag>
        <tag>ForeignKey</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 自定义配置示例</title>
    <url>/202207241754/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Hexo 6.2.0</li>
<li>Next 8.12.2</li>
</ul>
<blockquote>
<p>Hexo 查看版本方式： <code>npm list</code><br>Next 版本信息可在文件 <code>themes/next/package.json </code> 中查看</p>
</blockquote>
<span id="more"></span>

<h3 id="调整页面显示宽度"><a href="#调整页面显示宽度" class="headerlink" title="调整页面显示宽度"></a>调整页面显示宽度</h3><p>针对Next中的主题方案<code>Pisces</code>或<code>Gemini</code>, 更改Next主题中的文件 <code>themes/next/source/css/_variables/Pisces.styl</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[官网说明](https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/%E8%B0%83%E6%95%B4%E9%A1%B5%E9%9D%A2%E5%AE%BD%E5%BA%A6/)">[1]</span></a></sup> </p>
<figure class="highlight shell"><figcaption><span>Pisces.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">content-desktop-large        = 90em;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">content-desktop-largest      = 90%;</span></span><br></pre></td></tr></table></figure>

<h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/%E8%B0%83%E6%95%B4%E9%A1%B5%E9%9D%A2%E5%AE%BD%E5%BA%A6/">官网说明</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo markdown常用语法</title>
    <url>/2215beeb/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图片名称](https://i.csms.tech/img_10.png [title])</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_10.png" alt="图片名称"></p>
<h3 id="url-链接"><a href="#url-链接" class="headerlink" title="url 链接"></a>url 链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[这是一个链接](https://csms.tech [title])</span><br></pre></td></tr></table></figure>
<p><a href="https://csms.tech/">这是一个链接</a></p>
<span id="more"></span>

<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;https://csms.tech&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://csms.tech/">https://csms.tech</a><br><a href="https://csms.tech/">https://csms.tech</a></p>
<h3 id="链接到本站其他文章的指定标题"><a href="#链接到本站其他文章的指定标题" class="headerlink" title="链接到本站其他文章的指定标题"></a>链接到本站其他文章的指定标题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[名称](https://csms.tech&#123;% post_path &#x27;文章文件名&#x27; %&#125;#id)</span><br></pre></td></tr></table></figure>
<p><code>&#123;% post_path 'Hexo-markdown-grammar' %&#125;</code> 的值为： <code>/2022/07/Hexo-markdown-grammar/</code><br><a href="https://csms.tech/2215beeb/#图片链接">跳转</a></p>
<h3 id="链接到标题之外的锚点"><a href="#链接到标题之外的锚点" class="headerlink" title="链接到标题之外的锚点"></a>链接到标题之外的锚点</h3><p>可以使用html标签先创建对应锚点，如<code>&lt;div id=&#39;1&#39;&gt;这是一个文章锚点&lt;/div&gt;</code></p>
<div id='1'>这是一个文章锚点</div>

<p><a href="#1">跳转到id&#x3D;1的锚点</a></p>
<h3 id="站内文章链接"><a href="#站内文章链接" class="headerlink" title="站内文章链接"></a>站内文章链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link &#x27;文章文件名&#x27; [&#x27;显示的名称, 默认为文章title&#x27;] %&#125;</span><br></pre></td></tr></table></figure>
<p>本篇文章 <a href="/2215beeb/" title="hexo markdown常用语法">hexo markdown常用语法</a></p>
<h3 id="note标签"><a href="#note标签" class="headerlink" title="note标签"></a>note标签</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;% note class %&#125;</span><br><span class="line">文本内容 (支持行内标签)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>支持的class包括：<code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code></p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight shell"><figcaption><span>代码块示例</span><a href="https://csms.tech">主页</a></figcaption><table><tr><td class="code"><pre><span class="line">```shell name url urlshowname</span><br><span class="line">log-bin=binlog</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://hexo.io/zh-cn/docs/writing">Hexo Markdown 语法手册</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql从库提升为主库，原来的其他从库成为新的主库的从库</title>
    <url>/b12589a5/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Mysql 5.7</li>
</ul>
<h3 id="场景说明"><a href="#场景说明" class="headerlink" title="场景说明"></a>场景说明</h3><p>Mysql 一主多从的情况下，主库宕机（或其他无法使用的情况），将其中一台从库提升为主库，同时将原来其他的从库配置为新的主库的从库。  </p>
<div class="note primary"><p>主从恢复正常之前，数据库不应该有新的数据写入</p>
</div>

<span id="more"></span>

<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="确保所有从库已经执行了relay-log中的全部更新"><a href="#确保所有从库已经执行了relay-log中的全部更新" class="headerlink" title="确保所有从库已经执行了relay log中的全部更新"></a>确保所有从库已经执行了relay log中的全部更新</h4><p>登录mysql从库，在每个从库上，执行<code>stop slave io_thread</code>,停止IO线程, 通过以下2个命令之一检查从库relay log的执行情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show processlist;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_6.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_7.png">  </p>
<p>当输出中<code>Slave_SQL_Running_State</code> 为 <code>Slave has read all relay log; waiting for more updates</code>，表示更新都执行完毕。  </p>
<blockquote>
<ul>
<li>正常情况下，此时在每个从库上面查看slave状态(<code>show slave status\G</code>), 每个从库读取的主库的<code>Master_Log_File</code>和<code>Read_Master_Log_Pos</code>都应该是一样的，意味着所有的从库都已经更新到了主库宕机时的状态。此种情况下，可随便选择从库作为新的主库。<br><img src="https://i.csms.tech/img_8.png"></li>
<li>如果，从库上面查看slave状态，各个从库读取的主库的<code>Master_Log_File</code>和<code>Read_Master_Log_Pos</code>不一致，说明主库宕机之前各个从库和主库的主从延迟情况可能不一，导致各个从库的状态不一致，此种情况下，从数据完整性的角度考虑，应该选择position最大的一个从库，作为新选定的主库。对其他从库，应该通过从binlog中读取缺失的数据，补足数据。或者直接通过<a href="/94ee2c23/" title="备份恢复">备份恢复</a>的方式，和新选定的主库，重新建立主从连接。</li>
</ul>
</blockquote>
<h4 id="更新新的主库的配置"><a href="#更新新的主库的配置" class="headerlink" title="更新新的主库的配置"></a>更新新的主库的配置</h4><p>在新选定的主库上，配置文件(默认<code>/etc/my.cnf</code>)中开启binlog，如已配置，跳过</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">log-bin=mysql-bin</span><br></pre></td></tr></table></figure>
<p>新选定的主库上，如果配置了readonly，在配置文件(默认<code>/etc/my.cnf</code>)中取消readonly配置</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">read_only=0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更改mysql配置文件后，重启mysql生效</p>
</blockquote>
<p>在新选定的主库上，执行以下命令，重置从库配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;  </span><br><span class="line">reset master;</span><br><span class="line">reset slave all;  </span><br></pre></td></tr></table></figure>
<p>在新选定的主库上，执行以下命令，创建具有同步权限的账号，如果已存在，跳过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to &#x27;repl&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>在新选定的主库上，执行以下命令，查看当前主库的master位置信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show master status\G</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_9.png"></p>
<blockquote>
<p>在主从重新建立之前，不应该有新的数据写入数据库，在此前提之下，多次查看master status，显示的<code>File</code>和<code>Position</code> 应该是确定不变的值，后续可根据此值，让其他从库和新选定的主库建立主从连接。  </p>
</blockquote>
<h4 id="建立新的主从"><a href="#建立新的主从" class="headerlink" title="建立新的主从"></a>建立新的主从</h4><p>在其他从库上，执行以下命令，和新选定的主库，建立主从连接，其中需要的<code>master_log_file</code>和<code>master_log_pos</code>从<a href="#%E6%9B%B4%E6%96%B0%E6%96%B0%E7%9A%84%E4%B8%BB%E5%BA%93%E7%9A%84%E9%85%8D%E7%BD%AE">上一步</a>中获得。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;123456&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000982&#x27;,master_log_pos=638932979;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>

<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>aws python sdk常用操作</title>
    <url>/202207251345/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>centos 7</li>
<li>Python3.10</li>
<li>boto3 1.23.2 <blockquote>
<p>(<code>pip3 install boto3</code>)</p>
</blockquote>
</li>
</ul>
<span id="more"></span>

<h3 id="获取-s3-中文件大小"><a href="#获取-s3-中文件大小" class="headerlink" title="获取 s3 中文件大小"></a>获取 s3 中文件大小</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> boto3.session <span class="keyword">import</span> Session</span><br><span class="line">session = Session(aws_access_key_id=ak, aws_secret_access_key=sk, region_name=region)</span><br><span class="line">s3 = self.session.resource(<span class="string">&#x27;s3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bucket = s3.Bucket(bucket)</span><br><span class="line">obj = bucket.objects.<span class="built_in">filter</span>(Prefix=filename)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line">    <span class="keyword">if</span> i.size:</span><br><span class="line">        <span class="keyword">return</span> i.size</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>云平台</category>
        <category>Aws</category>
      </categories>
      <tags>
        <tag>云平台</tag>
        <tag>Aws</tag>
      </tags>
  </entry>
  <entry>
    <title>Awvs 破解版14.6.211213163 安装破解</title>
    <url>/2207221019/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Acunetix Web Vulnerability Scanner（简称AWVS）是一款知名的网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞。  </p>
<span id="more"></span>

<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Windows Server 2016 Datacenter</li>
<li>14.6.211213163</li>
</ul>
<h3 id="AWVS-安装激活"><a href="#AWVS-安装激活" class="headerlink" title="AWVS 安装激活"></a>AWVS 安装激活</h3><p>官方版本需要License才能下载，可通过如下链接下载破解版及补丁<br><a href="https://yzzpan.com/#sharefile=Nh2pQnaW_22930">www.ddosi.org下载入口</a><br><a href="https://yzzpan.com/#sharefile=DXt5k9dh_22034">www.ddosi.org破解工具下载入口</a></p>
<blockquote>
<p>解压密码均为: <a href="http://www.ddosi.org/">www.ddosi.org</a></p>
</blockquote>
<p><a href="https://s.csms.tech/file/acunetix_14.6.211213163.exe.rar">其他下载地址</a><br><a href="https://s.csms.tecn/file/awvs_crack.rar">其他下载地址-破解工具</a> </p>
<p>下载后，双击文件 <code>acunetix_14.6.211213163.exe</code> 进行安装，按照提示，一直点击<code>下一步</code>，直到安装完成。<br>安装完成，打开登录后，处于未激活状态，显示如下图：<br><img src="https://i.csms.tech/img_14.png">  </p>
<p>复制 <code>awvs_crack</code> 目录下的文件 <code>license_info.json</code> 和 <code>wa_data.dat</code> </p>
<p><img src="https://i.csms.tech/img_15.png"> </p>
<p>覆盖目录 <code>C:\ProgramData\Acunetix\shared\license</code> 下的文件</p>
<p>修改hosts文件(<code>C:\Windows\System32\drivers\etc</code>), 添加以下内容：</p>
<figure class="highlight plaintext"><figcaption><span>C:\Windows\System32\drivers\etc</span></figcaption><table><tr><td class="code"><pre><span class="line">127.0.0.1 updates.acunetix.com</span><br><span class="line">127.0.0.1 erp.acunetix.com</span><br></pre></td></tr></table></figure>

<p>返回页面刷新，即可激活成功<br><img src="https://i.csms.tech/img_16.png"> </p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.ddosi.org/awvs-14-6/">Awvs破解版14.6.211213163|可扫Log4j RCE漏洞</a><br><a href="https://www.ddosi.org/awvs-14-5-2/">Awvs破解版14.5.211115146 Windows+Linux+Mac cracked</a></p>
]]></content>
      <categories>
        <category>安全</category>
        <category>Awvs</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>Awvs</tag>
        <tag>Acunetix</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab安装配置</title>
    <url>/8db58ebc/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://about.gitlab.com/install/#centos-7">安装步骤</a></p>
<blockquote>
<p>安装完成之后使用gitlab-ctl reconfigure启动服务<br>访问页面，默认使用root登录<br>每次重新更改配置，都需要使用reconfigure重新启动</p>
</blockquote>
<span id="more"></span>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>启动所有 gitlab 组件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl start </span><br></pre></td></tr></table></figure>
<p>停止所有 gitlab 组件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl stop </span><br></pre></td></tr></table></figure>
<p>重启所有 gitlab 组件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl restart  </span><br></pre></td></tr></table></figure>
<p>查看服务状态；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl status    </span><br></pre></td></tr></table></figure>
<p>启动服务；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure    </span><br></pre></td></tr></table></figure>
<p>修改默认的配置文件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/gitlab/gitlab.rb </span><br></pre></td></tr></table></figure>
<p>检查gitlab；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:check SANITIZE=true --trace  </span><br></pre></td></tr></table></figure>
<p>查看日志；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl tail</span><br></pre></td></tr></table></figure>

<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="初始化空目录-通过git-init命令把这个目录变成Git可以管理的仓库"><a href="#初始化空目录-通过git-init命令把这个目录变成Git可以管理的仓库" class="headerlink" title="初始化空目录,通过git init命令把这个目录变成Git可以管理的仓库"></a>初始化空目录,通过<code>git init</code>命令把这个目录变成Git可以管理的仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<h4 id="已有文件的目录创建为git仓库"><a href="#已有文件的目录创建为git仓库" class="headerlink" title="已有文件的目录创建为git仓库"></a>已有文件的目录创建为git仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init </span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;XX&quot;</span><br><span class="line">git remote add origin https://a.com/p.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h4 id="更改git仓库地址"><a href="#更改git仓库地址" class="headerlink" title="更改git仓库地址"></a>更改git仓库地址</h4><ol>
<li>方法1  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://a.com/p.git</span><br></pre></td></tr></table></figure></li>
<li>方法2<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin https://a.com/p.git</span><br></pre></td></tr></table></figure></li>
<li>方法3<br>编辑<code>.git/config</code>文件, 修改 [remote “origin”]下面的url即可<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = true</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = https://a.com/p.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;main&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/main</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/master</span><br><span class="line">[pull]</span><br><span class="line">        rebase = true</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><p>查看当前分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure>
<p>查看所有分支，结果中<code>*</code>表示当前分支  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p>切换到指定分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b origin/master-dev</span><br></pre></td></tr></table></figure>
<p>切换主分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<h4 id="撤销当前工作区中对指定文件的修改"><a href="#撤销当前工作区中对指定文件的修改" class="headerlink" title="撤销当前工作区中对指定文件的修改"></a>撤销当前工作区中对指定文件的修改</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout FILE</span><br><span class="line">git checkout .</span><br></pre></td></tr></table></figure>

<h4 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h4><p>显示当前分支的commit历史</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
<p>查看git命令记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog --date=iso</span><br></pre></td></tr></table></figure>

<p>查看指定commit的代码变化记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git show 048bc53e65dda5</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_2.png"></p>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><blockquote>
<p>Git fatal: Unable to find remote helper for ‘https’</p>
</blockquote>
<p><strong>问题原因</strong>: 未安装curl-devel，安装curl-devel后重新编译<br><strong>解决方法</strong>：安装curl-devel后重新编译</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 添加 canvas-nest 特效</title>
    <url>/b12589273/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><p>os: linux 3.10.0-1160.62.1.el7.x86_64 CentOS Linux 7 (Core)<br>hexo: 6.2.0<br>hexo-cli: 4.3.0<br>node: 16.16.0</p>
<h3 id="安装canvas-nest"><a href="#安装canvas-nest" class="headerlink" title="安装canvas-nest"></a>安装canvas-nest</h3><p>参考 <a href="https://github.com/hustcc/canvas-nest.js#install">canva-nest官网</a> 安装</p>
<figure class="highlight shell"><figcaption><span>use npm</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install --save canvas-nest.js</span><br></pre></td></tr></table></figure>
<div class="note info"><p>可选操作，主要是为了生成<code>canvas-nest.js</code>文件</p>
</div>

<h3 id="配置Next"><a href="#配置Next" class="headerlink" title="配置Next"></a>配置Next</h3><p>编辑next配置文件，新增以下配置</p>
<figure class="highlight shell"><figcaption><span>_config.next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">background settings</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add canvas-nest effect</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest: </span><br><span class="line">  enable: true </span><br><span class="line">  url: https://s.csms.tech/js/canvas-nest.js</span><br><span class="line">  color: 0,0,255</span><br><span class="line">  opacity: 0.7</span><br><span class="line">  zIndex: -2</span><br><span class="line">  count: 99</span><br></pre></td></tr></table></figure>

<h3 id="引入canvas-nest-js"><a href="#引入canvas-nest-js" class="headerlink" title="引入canvas-nest.js"></a>引入canvas-nest.js</h3><p>编辑文件 <code>themes/next/layout/_layout.njk</code>, 在<code>&lt;/body&gt;</code> 之前新增以下内容</p>
<figure class="highlight shell"><figcaption><span>themes/next/layout/_layout.njk</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest.enable %&#125;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; color=&quot;&#123;&#123; theme.canvas_nest.color &#125;&#125;&quot; opacity=&#x27;&#123;&#123; theme.canvas_nest.opacity &#125;&#125;&#x27; zIndex=&quot;&#123;&#123; theme.canvas_nest.zIndex &#125;&#125;&quot; count=&quot;&#123;&#123; theme.canvas_nest.count &#125;&#125;&quot; src=&quot;&#123;&#123; theme.canvas_nest.url &#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>canvas-nest</tag>
      </tags>
  </entry>
  <entry>
    <title>inotify安装使用</title>
    <url>/512c7c5/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p>使用系统软件包管理器安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y inotify-tools</span><br></pre></td></tr></table></figure>
<p>安装后包含2个命令： <code>inotifywait </code>, <code>inotifywatch</code>,较为常用的命令是<code>inotifywait </code></p>
</li>
<li><p>编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz</span><br><span class="line">tar zxvf inotify-tools-3.14.tar.gz  </span><br><span class="line">cd inotify-tools-3.14</span><br><span class="line">./configure --prefix=/usr/local/inotify </span><br><span class="line">make</span><br><span class="line">make install  </span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<h3 id="inotifywait参数说明"><a href="#inotifywait参数说明" class="headerlink" title="inotifywait参数说明"></a>inotifywait参数说明</h3><p>语法：<br>inotifywait [-hcmrq] [-e modify,access…] [-t ] [–format ] [–timefmt ] [ … ]</p>
<blockquote>
<p>@<br>排除不需要监视的文件，可以是相对路径，也可以是绝对路径。<br>–-fromfile<br>从文件读取需要监视的文件或排除的文件，一个文件一行，排除的文件以@开头。<br>-m, –-monitor<br>接收到一个事情而不退出，无限期地执行。默认的行为是接收到一个事情后立即退出。<br>-d, –-daemon<br>跟–monitor一样，除了是在后台运行，需要指定-–outfile把事情输出到一个文件。也意味着使用了–-syslog。<br>-o, –-outfile<br>输出事情到一个文件而不是标准输出。<br>-s, –-syslog<br>输出错误信息到系统日志<br>-r, –-recursive<br>监视一个目录下的所有子目录。<br>-q, –-quiet<br>指定一次，不会输出详细信息，指定二次，除了致命错误，不会输出任何信息。<br>–-exclude<br>正则匹配需要排除的文件，大小写敏感。<br>–-excludei<br>正则匹配需要排除的文件，忽略大小写。<br>-t , –-timeout<br>设置超时时间，如果为0，则无限期地执行下去。<br>-e , –-event<br>指定监视的事件。<br>-c, –-csv<br>输出csv格式。<br>–-timefmt<br>指定时间格式，用于–-format选项中的%T格式。<br>–-format<br>指定输出格式。</p>
<blockquote>
<p>%w 表示发生事件的目录<br>%f 表示发生事件的文件<br>%e 表示发生的事件<br>%Xe 事件以“X”分隔<br>%T 使用由–-timefmt定义的时间格式</p>
</blockquote>
</blockquote>
<h3 id="可监听事件列表"><a href="#可监听事件列表" class="headerlink" title="可监听事件列表"></a>可监听事件列表</h3><p>access	文件读取<br>modify	文件更改。<br>attrib	文件属性更改，如权限，时间戳等。<br>close_write	以可写模式打开的文件被关闭，不代表此文件一定已经写入数据。<br>close_nowrite	以只读模式打开的文件被关闭。<br>close	文件被关闭，不管它是如何打开的。<br>open	文件打开。<br>moved_to	一个文件或目录移动到监听的目录，即使是在同一目录内移动，此事件也触发。<br>moved_from	一个文件或目录移出监听的目录，即使是在同一目录内移动，此事件也触发。<br>move	包括moved_to和 moved_from<br>move_self	文件或目录被移除，之后不再监听此文件或目录。<br>create	文件或目录创建<br>delete	文件或目录删除<br>delete_self	文件或目录移除，之后不再监听此文件或目录<br>unmount	文件系统取消挂载，之后不再监听此文件系统。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">inotifywait -m -r -e modify /source/ | while read dir action filename</span><br><span class="line">do </span><br><span class="line">  echo $&#123;dir&#125;</span><br><span class="line">  echo $&#123;action&#125;</span><br><span class="line">  echo $&#123;filename&#125;</span><br><span class="line">  rsync -a -u /source/ /dest/</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>inotify</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql常见错误</title>
    <url>/22072111/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息说明"><a href="#环境信息说明" class="headerlink" title="环境信息说明"></a>环境信息说明</h3><ul>
<li>默认mysql版本5.7</li>
<li>Centos 7</li>
</ul>
<span id="more"></span>

<h3 id="错误集锦"><a href="#错误集锦" class="headerlink" title="错误集锦"></a>错误集锦</h3><h4 id="MySQL主从不同步，尝试跳过执行错误的事务"><a href="#MySQL主从不同步，尝试跳过执行错误的事务" class="headerlink" title="MySQL主从不同步，尝试跳过执行错误的事务"></a>MySQL主从不同步，尝试跳过执行错误的事务</h4><p>执行以下命令，可跳过对应的slave事务</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>
<p>可以通过分析主库日志中的事务，来确定 <code>SQL_SLAVE_SKIP_COUNTER</code> 的合适值。<br>具体步骤如下：<br>在slave库中执行 <code>show slave status\G</code> ，确认以下两个参数:<br>    - Relay_Master_Log_File<br>    - Exec_Master_Log_Pos<br>或者以下2个参数：<br>    - Master_Log_File<br>    - Read_Master_Log_Pos<br><img src="https://i.csms.tech/img_11.png"></p>
<blockquote>
<p>通过以上2个值，可以知道当前slave执行到了master对应的哪个binlog文件(Relay_Master_Log_File)以及文件中的对应位置(Exec_Master_Log_Pos )</p>
</blockquote>
<p>根据上述两个参数的值，在master中可以查看当前阻碍从库复制的事务以及之后的事务。可以执行以下命令查看</p>
<figure class="highlight shell"><figcaption><span>master</span></figcaption><table><tr><td class="code"><pre><span class="line">SHOW BINLOG EVENTS in &#x27;mysql-bin.001015&#x27; from 366269088;</span><br></pre></td></tr></table></figure>
<p>这个可以查看到对应日志文件mysql-bin.001015中，事务ID为366269088之后的所有事务，<br>以下命令可以限制查询条数</p>
<figure class="highlight shell"><figcaption><span>master</span></figcaption><table><tr><td class="code"><pre><span class="line">SHOW BINLOG EVENTS in &#x27;mysql-bin.001015&#x27; from 366269088 limit 10;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="主从具有相同的server-uuid"><a href="#主从具有相同的server-uuid" class="headerlink" title="主从具有相同的server-uuid"></a>主从具有相同的server-uuid</h4><p><strong>报错信息</strong>：</p>
<blockquote>
<p>Fatal error: The slave I&#x2F;O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work</p>
</blockquote>
<p><strong>问题原因</strong>： 主从数据目录(默认<code>/var/lib/mysql/</code>)都有一个auto.cnf文件，里面记录的server-uuid是相同的，在云主机clone的场景可能会出现此问题。</p>
<p><strong>解决方法</strong>： 修改auto.cnf文件中<code>uuid</code>的值，重启Mysql服务即可</p>
<p>查询uuid的方式，登录mysql，执行以下命令查看</p>
<figure class="highlight shell"><figcaption><span>mysql</span></figcaption><table><tr><td class="code"><pre><span class="line">select uuid();</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_12.png"></p>
<hr>
<h4 id="主从具有相同的server-id"><a href="#主从具有相同的server-id" class="headerlink" title="主从具有相同的server-id"></a>主从具有相同的server-id</h4><p><strong>报错信息</strong>：</p>
<blockquote>
<p>Fatal error: The slave I&#x2F;O thread stops because master and slave have equal MySQL server ids; </p>
</blockquote>
<p><strong>问题原因</strong>： 主从配置文件中配置了同样的 <code>server-id</code></p>
<p><strong>解决方法</strong>： 修改<code>my.cnf</code>， 主从配置不同的<code>server-id</code></p>
<hr>
<h4 id="主从同步错误-1032"><a href="#主从同步错误-1032" class="headerlink" title="主从同步错误 1032"></a>主从同步错误 1032</h4><p><strong>报错信息</strong>：</p>
<blockquote>
<p>Could not execute Update_rows event on table ceshi.bbs_online; Can’t find record in ‘bbs_online’, Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND; the event’s master log mysql-bin.001423, end_log_pos 866646715</p>
</blockquote>
<p><strong>问题原因</strong>： 主从不同步，从数据库中记录被删除或者未同步到从库，主数据库中存在记录，主DB更新后，从无法同步</p>
<p><strong>解决方法1</strong>： 重新备份 master DB，恢复到slave，重新<a href="/94ee2c23/" title="恢复主从">恢复主从</a></p>
<p><strong>解决方法2</strong>： 找出丢失的数据在slave上插入。可以通过<a href="#MySQL%E4%B8%BB%E4%BB%8E%E4%B8%8D%E5%90%8C%E6%AD%A5%EF%BC%8C%E5%B0%9D%E8%AF%95%E8%B7%B3%E8%BF%87%E6%89%A7%E8%A1%8C%E9%94%99%E8%AF%AF%E7%9A%84%E4%BA%8B%E5%8A%A1">分析出错的binlog找出丢失的记录</a></p>
<hr>
<h4 id="主从同步错误-1396"><a href="#主从同步错误-1396" class="headerlink" title="主从同步错误 1396"></a>主从同步错误 1396</h4><p><strong>报错信息</strong>：</p>
<blockquote>
<p>ERROR 1396 (HY000): Operation CREATE USER failed for ‘XXXX‘@’XXXX’</p>
</blockquote>
<p><strong>问题原因</strong>： slave同步时，从数据库中已存在用户</p>
<p><strong>解决方法</strong>： slave上删除已存在的用户</p>
<hr>
<h4 id="主从同步错误-1062"><a href="#主从同步错误-1062" class="headerlink" title="主从同步错误 1062"></a>主从同步错误 1062</h4><p><strong>报错信息</strong>：</p>
<blockquote>
<p>Last_SQL_Error: Could not execute Write_rows event on table *;<br>    Duplicate entry ‘2’ for key ‘PRIMARY’,<br>Error_code: 1062;<br>handler error HA_ERR_FOUND_DUPP_KEY; the event’s master log mysql-bin.000006, end_log_pos 924</p>
</blockquote>
<p><strong>问题原因</strong>： slave上已有该记录，master上又插入，可能存在主从数据不一致</p>
<p><strong>解决方法</strong>： 删除slave上重复的主键记录</p>
<hr>
<h4 id="主从同步错误-1042"><a href="#主从同步错误-1042" class="headerlink" title="主从同步错误 1042"></a>主从同步错误 1042</h4><p><strong>报错信息</strong>：</p>
<blockquote>
<p>error code 1042 (ER_BAD_HOST_ERROR): Can’t get hostname for your address</p>
</blockquote>
<p><strong>问题原因</strong>： 解析主机名失败</p>
<p><strong>解决方法</strong>： mysql配置（<code>my.cnf</code>）中设置 <code>skip-name-resolve</code></p>
<p>使用以下命令解析mysql错误码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">perror 1042</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_13.png"></p>
<hr>
<h4 id="导出导入数据错误-1290"><a href="#导出导入数据错误-1290" class="headerlink" title="导出导入数据错误 1290"></a>导出导入数据错误 1290</h4><p><strong>报错场景</strong>： 使用select&#x2F;insert 导出&#x2F;导入 时报错</p>
<p><strong>报错信息</strong>：</p>
<blockquote>
<p>ERROR 1290 (HY000): The MySQL server is running with the –secure-file-priv option so it cannot execute this statement</p>
</blockquote>
<p><strong>问题原因</strong>： secure_file_priv参数用于限制LOAD DATA, SELECT …OUTFILE, LOAD_FILE()传到哪个指定目录。  </p>
<ul>
<li>secure_file_priv 为 NULL 时，表示限制mysqld不允许导入或导出。</li>
<li>secure_file_priv 为 &#x2F;tmp 时，表示限制mysqld只能在&#x2F;tmp目录中执行导入导出，其他目录不能执行。</li>
<li>secure_file_priv 没有值时，表示不限制mysqld在任意目录的导入导出。</li>
</ul>
<p>可以通过以下命令，查看当前的配置  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> &quot;%secure_file_priv%&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.csms.tech/img_18.png"></p>
<p><strong>解决方法</strong>： 因为secure_file_priv参数是只读参数，不能使用set global命令修改。<br><img src="https://i.csms.tech/img_19.png"></p>
<p>需要修改配置文件，添加以下内容</p>
<figure class="highlight shell"><figcaption><span>my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">secure_file_priv = &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>修改配置后，重启mysql服务生效</p>
<h4 id="xtrbackup-备份时被阻塞，一直显示-log-scanned-up-to"><a href="#xtrbackup-备份时被阻塞，一直显示-log-scanned-up-to" class="headerlink" title="xtrbackup 备份时被阻塞，一直显示 log scanned up to"></a>xtrbackup 备份时被阻塞，一直显示 <code>log scanned up to</code></h4><p><strong>报错场景</strong>: xtrbackup 备份时间过长，一直输出 <code>log scanned up to</code><br><img src="https://i.csms.tech/img_20.png"></p>
<p><strong>可能原因</strong>： 备份在等待锁<br><img src="https://i.csms.tech/img_21.png"></p>
<p><strong>解决方法</strong>： 如果对业务无影响，可以重启mysql服务后重新备份，或者根据ID kill掉对应的线程</p>
<figure class="highlight shell"><figcaption><span>mysql</span></figcaption><table><tr><td class="code"><pre><span class="line">show processlist;</span><br><span class="line">kill ID;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 常用sql</title>
    <url>/2207221611/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Mysql 5.7</li>
</ul>
<h3 id="常用sql"><a href="#常用sql" class="headerlink" title="常用sql"></a>常用sql</h3><h4 id="导出到文件"><a href="#导出到文件" class="headerlink" title="导出到文件"></a>导出到文件</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [<span class="keyword">TABLE</span>] </span><br><span class="line">    <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;[FILE]&#x27;</span> </span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> </span><br><span class="line">    OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> </span><br><span class="line">    LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span>；</span><br></pre></td></tr></table></figure>
<blockquote>
<p>into outfile ‘导出的目录和文件名’<br>fields terminated by ‘字段间分隔符’<br>optionally enclosed by ‘字段包围符’   </p>
<blockquote>
<p>数值型字段无效  </p>
</blockquote>
<p>lines terminated by ‘行间分隔符’ </p>
</blockquote>
<p>产生报错可参考 <a href="https://csms.tech/22072111/#导出导入数据错误-1290">Mysql常见错误</a></p>
<h4 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb(c1,c2) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h4 id="翻页查看输出"><a href="#翻页查看输出" class="headerlink" title="翻页查看输出"></a>翻页查看输出</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pager less <span class="operator">-</span>S</span><br></pre></td></tr></table></figure>
<blockquote>
<p>之后的输出可以使用和less命令一样的参数</p>
</blockquote>
<h4 id="mysqldump导出时排除某些表"><a href="#mysqldump导出时排除某些表" class="headerlink" title="mysqldump导出时排除某些表"></a>mysqldump导出时排除某些表</h4><blockquote>
<p><code>--ignore-table=database.table</code> 导出时排除指定的表</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p database --ignore-table=database.table1 --ignore-table=database.table2 &gt; backup.sql</span><br></pre></td></tr></table></figure>

<h4 id="mysqldump导出表结构"><a href="#mysqldump导出表结构" class="headerlink" title="mysqldump导出表结构"></a>mysqldump导出表结构</h4><blockquote>
<p><code>-d</code> 选项，只导出表结构，不导出数据</p>
</blockquote>
<p>导出整个数据库表结构（不包含数据）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p -d DB &gt; db.sql</span><br></pre></td></tr></table></figure>

<p>导出单个数据表结构（不包含数据）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p -d DB TABLE &gt; table.sql</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 常用配置说明</title>
    <url>/22721459/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>默认配置文件路径: <code>/etc/my.cnf</code></p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##############通用配置##############</span><br><span class="line">user = mysql</span><br><span class="line">port = 3306</span><br><span class="line">default_storage_engine = InnoDB</span><br><span class="line">## 只读</span><br><span class="line">read_only=1  </span><br><span class="line">             </span><br><span class="line">## 跳过域名解析参数，禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。</span><br><span class="line">## 但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！</span><br><span class="line">skip-name-resolve  </span><br><span class="line"></span><br><span class="line">## 跳过授权，重置密码时需要</span><br><span class="line">## 重置密码：update mysql.user set authentication_string=password(&#x27;AynT7ZD5eGzk@dzO@JvjDY@Q&#x27;) where user=&#x27;root&#x27;;          </span><br><span class="line">skip-grant-tables   </span><br><span class="line">          </span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">## 解决日志中因wait-timeout的报错：</span><br><span class="line">## Aborted connection 40476 to db: &#x27;&#x27; user: &#x27;&#x27; host: &#x27;&#x27; (Got an error reading communication packets)</span><br><span class="line">log_warnings=1  </span><br><span class="line">                 </span><br><span class="line">### 连接错误超过此值，客户端无法连接，即拉黑</span><br><span class="line">max_connect_errors = 1000      </span><br><span class="line"></span><br><span class="line">###########主从配置选项###########</span><br><span class="line">server-id = 1</span><br><span class="line"># 主库要生成的二进制日志文件名称</span><br><span class="line">log-bin = mysql-bin    </span><br><span class="line">    </span><br><span class="line">## 从库中继日志名称</span><br><span class="line">relay-log = mysql-relay-bin    </span><br><span class="line"></span><br><span class="line">################</span><br><span class="line">## sync_binlog = 0    表示MySQL 不控制binlog的刷新，由文件系统自己控制它的缓存的刷新。</span><br><span class="line">## 这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。</span><br><span class="line">## sync_binlog&gt;0    表示每N个sync_binlog次事务提交，MySQL调用文件系统的刷新操作将缓存刷下去。</span><br><span class="line">## 最安全的就是sync_binlog=1了，表示每次事务提交，MySQL都会把binlog刷下去，是最安全但是性能损耗最大的设置。这样的话，在数据库所在的主机操作系统损坏或者突然掉电的情况下，系统才有可能丢失1个事务的数据。 </span><br><span class="line">## 但是binlog虽然是顺序IO，但是设置sync_binlog=1，多个事务同时提交，同样很大的影响MySQL和IO性能。</span><br><span class="line">## 对于高并发事务的系统来说，“sync_binlog”设置为0和设置为1的系统写入性能差距可能高达5倍甚至更多。</span><br><span class="line">## 只适用于主库的二进制日志，不适用中继日志</span><br><span class="line">################</span><br><span class="line">sync_binlog=0</span><br><span class="line"></span><br><span class="line">## 要同步的库.应该在从库上尽可能的使用replicate_wild_*，不建议在主库上使用</span><br><span class="line">binlog-do-db = rtzc_pnc_base       </span><br><span class="line"></span><br><span class="line"># 不同步的数据库,应该在从库上尽可能的使用replicate_wild_*</span><br><span class="line">binlog-ignore-db = mysql</span><br><span class="line"></span><br><span class="line">### 应该在从库上尽可能的使用replicate_wild_*              </span><br><span class="line">#replicate-wild-ignore-table=db.*               </span><br><span class="line">#replicate-wild-ignore-table=mysql.*</span><br><span class="line">#replicate-wild-ignore-table=information_schema.*</span><br><span class="line">#replicate-wild-ignore-table=performance_schema.*</span><br><span class="line">#replicate-wild-ignore-table=sys.*</span><br><span class="line">#replicate_wild_do_table=DB_NAME.%</span><br><span class="line">#replicate_ignore_db=test</span><br><span class="line"></span><br><span class="line">###复制实现模式/级别</span><br><span class="line">binlog_format=statement/row/mixed   </span><br><span class="line"></span><br><span class="line"># binlog日志大于此值是重新生成新的日志，默认(最大)1G，若使用大事务，日志可能会超过此值     </span><br><span class="line">max_binlog_size = 100M        </span><br><span class="line"></span><br><span class="line"># bilog日志保存天数，过期后清除</span><br><span class="line">expire_logs_days = 7   </span><br><span class="line"></span><br><span class="line"># 跳过某些同步错误号</span><br><span class="line">slave-skip-errors = 1032,1062  </span><br><span class="line"></span><br><span class="line">### 从库需要记录binlog，如级联从库场景，级联从库必须有此参数</span><br><span class="line">log-slave-updates=1          </span><br><span class="line"></span><br><span class="line"># 阻止slave自动启动复制</span><br><span class="line">skip_slave_start     </span><br><span class="line"></span><br><span class="line"># 从库发现和主库连接失败后，重连等待的时间，默认1小时       </span><br><span class="line">slave_net_timeout = 1        </span><br><span class="line"></span><br><span class="line"># 在从库上同步状态文件到磁盘，默认10000，表示在10000个事务执行完成后，将信息同步到磁盘</span><br><span class="line"># 打开后，可能会降低IO性能，设置为1最安全，但是IO性能最差；设置为0，由OS控制刷新</span><br><span class="line">sync_master_info | sync_relay_log | sync_relay_log_info  = 1      </span><br><span class="line"></span><br><span class="line"># SQL线程重放完一个中继日志后尽快将其删除</span><br><span class="line">relay_log_purge = 1         </span><br><span class="line"></span><br><span class="line"># 所有中继日志大小和的最大值。可防止主从延迟很大时，IO线程写relay log，导致磁盘空间不足。中继日志总和超过此值，IO线程会停止，等待SQL线程释放空间；</span><br><span class="line"># 风险是从库未从主库读取所有relaylog，这些日志可能在主库崩溃时丢失，磁盘空间足够的情况下，不推荐配置  </span><br><span class="line">relay_log_space_limit = 1G       </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#########日志选项###########</span><br><span class="line">slow_query_log =1   </span><br><span class="line">long_query_time=2     </span><br><span class="line">slow_query_log_file=/var/lib/mysql/slow.log</span><br><span class="line"></span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line"></span><br><span class="line">##########编码选项######</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server=utf8_general_ci </span><br><span class="line"></span><br><span class="line">#############连接选项#############</span><br><span class="line"></span><br><span class="line"># 客户端的连接闲置的最大时间，默认8小时，设置非交互模式(jdbc)时的超时时间</span><br><span class="line">wait-timeout = 60      </span><br><span class="line"></span><br><span class="line"># 交互模式超时时间      </span><br><span class="line">interactive_timeout = 60    </span><br><span class="line"></span><br><span class="line"># 并发连接数,最终值由open_files_limit共同决定</span><br><span class="line">max_connections=65535    </span><br><span class="line"></span><br><span class="line"># 一个账号最大可发起多少并发连接                </span><br><span class="line">max_user_connections=65535            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############性能选项#############</span><br><span class="line"></span><br><span class="line"># 缓存的表个数，可以观察Opened_tables状态变量值，若很大(若经常需要创建/删除临时表，该计数器也会不停增长)，建议增加此配置值，由OS rlimit共同决定</span><br><span class="line">table_open_cache = 65535  </span><br><span class="line"></span><br><span class="line"># 缓存的线程个数，具体配置值可以观察Threads_created状态变量，如果此值较大，可加大thread_cache_size,建议此值保持足够大    </span><br><span class="line">thread_cache_size = 5000   </span><br><span class="line"></span><br><span class="line"># 查询缓存使用的内存大小，启动时，一次性分配</span><br><span class="line">query_cache_size = 1024M      </span><br><span class="line"></span><br><span class="line"># 查询需排序时分配内存，立即分配指定的全部内存，无论是否需要这么多</span><br><span class="line">sort_buffer_size = 10k            </span><br><span class="line"></span><br><span class="line"># 需要在服务启动程序(/usr/lib/systemd/system/mysqld.service)中配置：LimitNOFILE = 65535</span><br><span class="line">open_files_limit = 65535</span><br><span class="line">     </span><br><span class="line">max_allowed_packet = 200M</span><br><span class="line">innodb_open_files = 65535      </span><br><span class="line"></span><br><span class="line"># 默认值一般都太小，此值建议配置为os和其他应用消耗的内存除外的内存大小</span><br><span class="line"># 配置太大也会导致预热和关闭花费较多时间</span><br><span class="line">innodb_buffer_pool_size = 20G       </span><br><span class="line"></span><br><span class="line"># 事务日志的文件大小，太小，InnoDB必须做更多检查点，导致更多日志写，不利于IO。日志缓存满，事务提交或每秒，会刷新缓存到磁盘;</span><br><span class="line"># 可以观察show innodb status中log部分，Innodb_os_log_written查看写入了多少数据</span><br><span class="line">innodb_log_file_size = (32-128)M</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">innodb_flush_log_at_trx_commit = N</span><br><span class="line">########## innodb特有参数，事务日志用于在mysql崩溃后的恢复</span><br><span class="line"># N=0   每隔一秒，把事务日志缓存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上；</span><br><span class="line"># 在这种情况下，MySQL性能最好，但如果 mysqld 进程崩溃，通常会导致最后 1s 的日志丢失。</span><br><span class="line"></span><br><span class="line"># N=1   每个事务提交时候，把事务日志从缓存区写到日志文件中，并且刷新日志文件的数据到磁盘上；每次事务提交时，log buffer 会被写入到日志文件并刷写到磁盘。 </span><br><span class="line"># 这也是默认值。这是最安全的配置，但由于每次事务都需要进行磁盘I/O，所以也最慢。</span><br><span class="line"></span><br><span class="line"># N=2    当取值为2 时，每次事务提交会写入日志文件，但并不会立即刷写到磁盘，日志文件会每秒刷写一次到磁盘。</span><br><span class="line"># 这时如果 mysqld 进程崩溃，由于日志已经写入到系统缓存，所以并不会丢失数据；在操作系统崩溃的情况下，通常会导致最后 1s 的日志丢失。</span><br><span class="line"># 对于一些数据一致性和完整性要求不高的应用，配置为 2 就足够了；如果为了最高性能，可以设置为 0。有些应用，如支付服务，对一致性和完整性要求很高，所以即使最慢，也最好设置为 1.</span><br><span class="line">##########</span><br><span class="line"></span><br><span class="line"># 限制一次性可以有多少线程进入内核，建议值：cpu数量* 磁盘数量* 2,进入内核的线程超过此值，新线程无法进入。</span><br><span class="line"># 为使线程高效进入内核，线程第一次休眠innodb_thread_sleep_delay(默认10000)微秒，然后重试，若依然不能进入内核，则放入一个等待线程队列，由OS内核处理。</span><br><span class="line"># 在高并发环境或大量小查询时，可减小此值。</span><br><span class="line">innodb_thread_concurrency = 64</span><br><span class="line"></span><br><span class="line"># 一旦线程进入内核，可以有指定数量的tickents，再次进入内核时，可不在做并发检查，按照查询授权，而非事务            </span><br><span class="line">innodb_concurrency_tickets = 10</span><br><span class="line"></span><br><span class="line"># 多少个线程可以在同一时间提交事务，太小会有线程冲突      </span><br><span class="line">innodb_commit_concurrency = 100   </span><br><span class="line"></span><br><span class="line"># 指定磁盘IO能力，默认为100，使用SSD或IO性能好的磁盘时，建议提高此值</span><br><span class="line">innodb_io_capacity = 1000     </span><br><span class="line"></span><br><span class="line"># 控制后台由多少线程负责IO操作，默认为4</span><br><span class="line">innodb_read_io_threads | innodb_write_io_threads = 10             </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 主从恢复</title>
    <url>/94ee2c23/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos 7</li>
<li>Mysql 5.7</li>
<li>Percona-XtraBackup-2.4.4</li>
</ul>
<h3 id="恢复方法1：mysqldump主库锁表备份恢复"><a href="#恢复方法1：mysqldump主库锁表备份恢复" class="headerlink" title="恢复方法1：mysqldump主库锁表备份恢复"></a>恢复方法1：mysqldump主库锁表备份恢复</h3><p><strong>前提</strong> ： 接受主库锁表操作，备份恢复过程中主库无法写入数据</p>
<h4 id="从库停止slave进程"><a href="#从库停止slave进程" class="headerlink" title="从库停止slave进程"></a>从库停止slave进程</h4><p>登录mysql从库，执行以下命令，停止slave进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="主库锁表"><a href="#主库锁表" class="headerlink" title="主库锁表"></a>主库锁表</h4><p>登录mysql主库，执行以下命令，对主库进行锁表操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FLUSH TABLES WITH READ LOCK;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行锁表操作后，不要退出mysql命令行，否则会自动解锁。</p>
</blockquote>
<p>执行以下命令，查看主库锁表后的binlog位置信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SHOW MASTER STATUS\G</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_3.png"></p>
<h4 id="备份主库数据库数据"><a href="#备份主库数据库数据" class="headerlink" title="备份主库数据库数据"></a>备份主库数据库数据</h4><p>执行以下命令备份数据库db1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --master-data=2 --databases db1 &gt; db1.sql</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>--master-data=2</code>  将日志名和位置写入到备份结果并注释，可以从备份文件中搜索<code>change master to</code>  查看binlog文件名和position</p>
</blockquote>
<p>主库备份完成后，可以解锁：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>

<h4 id="从库恢复主库的备份数据"><a href="#从库恢复主库的备份数据" class="headerlink" title="从库恢复主库的备份数据"></a>从库恢复主库的备份数据</h4><p>将主库的备份数据拷贝到从库，使用备份数据覆盖恢复从库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p db1 &lt; db1.sql</span><br></pre></td></tr></table></figure>
<p>从库恢复备份完成后，和主库建立主从连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;pswd&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000196&#x27;,master_log_pos=1037640668;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>
<p>配置完成后，通过以下命令，查看主从状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主要关注以下项：<br>Slave_IO_Running: Yes<br>Slave_SQL_Running: Yes<br>Seconds_Behind_Master: 0  </p>
</blockquote>
<p><img src="https://i.csms.tech/img_5.png"></p>
<h3 id="恢复方法2：mysqldump主库不锁表备份恢复"><a href="#恢复方法2：mysqldump主库不锁表备份恢复" class="headerlink" title="恢复方法2：mysqldump主库不锁表备份恢复"></a>恢复方法2：mysqldump主库不锁表备份恢复</h3><h4 id="从库停止slave进程-1"><a href="#从库停止slave进程-1" class="headerlink" title="从库停止slave进程"></a>从库停止slave进程</h4><p>登录mysql从库，执行以下命令，停止slave进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure>
<h4 id="备份主库数据库数据-1"><a href="#备份主库数据库数据-1" class="headerlink" title="备份主库数据库数据"></a>备份主库数据库数据</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --master-data=2 --single-transaction -R --databases db01 &gt; db01.sql</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>--master-data=2</code> : 实现将日志名和位置写入到备份结果并注释,db01.sql中会包含当前日志的文件名以及位置<br><code>--routines, -R</code>：导出存储过程和函数</p>
</blockquote>
<h4 id="从库导入备份"><a href="#从库导入备份" class="headerlink" title="从库导入备份"></a>从库导入备份</h4><p>将主库的备份数据拷贝到从库，并进行恢复</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p db01 &lt; db01.sql</span><br></pre></td></tr></table></figure>
<h4 id="备份文件中查看binlog日志文件名和position"><a href="#备份文件中查看binlog日志文件名和position" class="headerlink" title="备份文件中查看binlog日志文件名和position"></a>备份文件中查看binlog日志文件名和position</h4><p>在备份文件(<code>db01.sql</code>)中搜索<code>CHANGE MASTER TO </code>, 结果中可以获取到binlog日志文件名和position</p>
<h4 id="建立主从连接"><a href="#建立主从连接" class="headerlink" title="建立主从连接"></a>建立主从连接</h4><p>根据上一步获取到的binlog文件名和position信息，建立主从连接并启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;pswd&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000196&#x27;,master_log_pos=1037640668;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>
<p>通过命令<code>show slave status\G</code> 检查主从同步状态</p>
<h3 id="恢复方法3：-xbackup整库备份恢复"><a href="#恢复方法3：-xbackup整库备份恢复" class="headerlink" title="恢复方法3： xbackup整库备份恢复"></a>恢复方法3： xbackup整库备份恢复</h3><h4 id="xbackup安装"><a href="#xbackup安装" class="headerlink" title="xbackup安装"></a>xbackup安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y libaio-devel.x86_64 bzip2</span><br><span class="line">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.4/binary/tarball/percona-xtrabackup-2.4.4-Linux-x86_64.tar.gz</span><br><span class="line">tar -zxf percona-xtrabackup-2.4.4-Linux-x86_64.tar.gz</span><br><span class="line">cp percona-xtrabackup-2.4.4-Linux-x86_64/bin/* /usr/bin</span><br></pre></td></tr></table></figure>

<h4 id="主库整库备份"><a href="#主库整库备份" class="headerlink" title="主库整库备份"></a>主库整库备份</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">innobackupex --defaults-file=/etc/my.cnf --user=root --password=PASSWD --port=3306 --socket=/var/lib/mysql/mysql.sock  [--databases  &quot;db1 db2 &quot;] $&#123;backup_data_dir&#125;</span><br></pre></td></tr></table></figure>

<h4 id="从库整库恢复"><a href="#从库整库恢复" class="headerlink" title="从库整库恢复"></a>从库整库恢复</h4><p>拷贝主库备份数据到从库,在从库上执行以下命令恢复数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $&#123;backup_data_dir&#125;</span><br><span class="line"></span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --apply-log --use-memory=20000M $&#123;backup_data_dir&#125;</span><br><span class="line"></span><br><span class="line">cp -r $&#123;backup_data_dir&#125;/* $&#123;mysql_base_dir&#125;/data/</span><br></pre></td></tr></table></figure>

<h4 id="建立主从连接-1"><a href="#建立主从连接-1" class="headerlink" title="建立主从连接"></a>建立主从连接</h4><p>备份数据中的<code>xtrabackup_binlog_info</code>文件包含了从库建立主从连接时需要的binlog信息，根据此文件中的信息，在从库执行命令，建立主从连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;pswd&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000196&#x27;,master_log_pos=1037640668;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>
<p>通过命令<code>show slave status\G</code> 检查主从同步状态</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql多主一从即多源复制</title>
    <url>/2207210946/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Mysql 5.7 之后版本支持多主一从</li>
</ul>
<h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><h4 id="分别在Master-1和Master-2上导出需要同步的数据库"><a href="#分别在Master-1和Master-2上导出需要同步的数据库" class="headerlink" title="分别在Master_1和Master_2上导出需要同步的数据库"></a>分别在Master_1和Master_2上导出需要同步的数据库</h4><p>分别在Master_1和Master_2上执行以下命令，导出需要同步的数据库备份</p>
<figure class="highlight shell"><figcaption><span>Master_1</span></figcaption><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 --master-data=2 --single-transaction --databases  --add-drop-database  db1  &gt; db1.sql</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>Master_2</span></figcaption><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 --master-data=2 --single-transaction --databases  --add-drop-database  db2  &gt; db2.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>备份完成后，将备份数据拷贝到从库服务器上面</p>
<span id="more"></span>

<h4 id="在Master-1和Master-2上创建复制账号"><a href="#在Master-1和Master-2上创建复制账号" class="headerlink" title="在Master_1和Master_2上创建复制账号"></a>在Master_1和Master_2上创建复制账号</h4><div class="note info"><p>如果已有复制账号，跳过此步骤</p>
</div>
<p>分别在Master_1和Master_2上执行以下命令，创建复制账号</p>
<figure class="highlight shell"><figcaption><span>Master_1 Master_2</span></figcaption><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to &#x27;repl&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>
<h4 id="更改slave配置以支持多主一从"><a href="#更改slave配置以支持多主一从" class="headerlink" title="更改slave配置以支持多主一从"></a>更改slave配置以支持多主一从</h4><div class="note primary"><p>mysql支持多主一从(多源复制)的关键配置。<br>要配置mysql支持多源复制，必须配置mysql存储同步信息的方式，主要有以下2种方式 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[存储同步信息的方式说明](https://dev.mysql.com/doc/refman/5.7/en/replication-multi-source-configuration.html)
">[1]</span></a></sup></p>
<ul>
<li>FILE  默认配置，此时同步信息存储在文件master.info和relay-log.info</li>
<li>TABLE  同步信息存储在mysql.slave_master_info和mysql.slave_relay_log_info</li>
</ul>
</div>

<p>更改mysql配置文件(默认&#x2F;etc&#x2F;my.cnf)，配置存储同步信息的方式</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br></pre></td></tr></table></figure>
<p>更改配置后，重启mysql生效</p>
<h4 id="slave上恢复Master-1和Master-2的备份数据"><a href="#slave上恢复Master-1和Master-2的备份数据" class="headerlink" title="slave上恢复Master_1和Master_2的备份数据"></a>slave上恢复Master_1和Master_2的备份数据</h4><figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">mysql -uroot -p  &lt; db1.sql</span><br><span class="line">mysql -uroot -p  &lt; db2.sql</span><br></pre></td></tr></table></figure>
<div class="note info"><p>因为在 <code>mysqldump</code> 备份时，使用了选项 <code>--add-drop-database</code>，slave导入备份时，无需指定db</p>
</div>

<h4 id="slave上配置多源复制"><a href="#slave上配置多源复制" class="headerlink" title="slave上配置多源复制"></a>slave上配置多源复制</h4><h5 id="找到配置主从需要的binlog位置和Pos位置"><a href="#找到配置主从需要的binlog位置和Pos位置" class="headerlink" title="找到配置主从需要的binlog位置和Pos位置"></a>找到配置主从需要的binlog位置和Pos位置</h5><p>分别在Master_1和Master_2的备份数据中，查找以下内容，找到需要的binlog位置和Pos位置</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">cat db1.sql |grep &quot; CHANGE MASTER&quot;</span><br><span class="line">cat db2.sql |grep &quot; CHANGE MASTER&quot;</span><br></pre></td></tr></table></figure>
<div class="note info"><p>这些信息是由  <code>mysqldump</code> 的选项 <code>--master-data=2</code>提供 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[--master-data=2说明](https://dev.mysql.com/doc/mysql-replication-excerpt/5.7/en/replication-howto-mysqldump.html)">[2]</span></a></sup> </p>
</div>
<p>结果中包含以下类似内容：</p>
<blockquote>
<p>CHANGE MASTER TO MASTER_LOG_FILE&#x3D;’log-bin.000001’, MASTER_LOG_POS&#x3D;1539;</p>
</blockquote>
<h5 id="登录salve数据库配置多源复制"><a href="#登录salve数据库配置多源复制" class="headerlink" title="登录salve数据库配置多源复制"></a>登录salve数据库配置多源复制</h5><p>登录slave数据库，分别执行以下命令，创建到Master_1和Master_2的复制</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;Master_1&#x27;,MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;,MASTER_LOG_FILE=&#x27;log-bin.000001&#x27;,MASTER_LOG_POS=1539 FOR CHANNEL &#x27;Master_1&#x27;;</span><br><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;Master_2&#x27;,MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;,MASTER_LOG_FILE=&#x27;log-bin.000001&#x27;,MASTER_LOG_POS=1539 FOR CHANNEL &#x27;Master_2&#x27;; </span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<div class="note info"><p>不同的主从复制以最后的 <code>FOR CHANNEL</code> 来区分</p>
</div>

<h5 id="启动主从复制"><a href="#启动主从复制" class="headerlink" title="启动主从复制"></a>启动主从复制</h5><p>在slave数据库中执行以下命令分别启动复制</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">start slave for channel &quot;Master_1&quot;;</span><br><span class="line">start slave for channel &quot;Master_1&quot;;</span><br></pre></td></tr></table></figure>
<p>也可以通过 <code>start slave;</code> 启动所有的复制</p>
<p>可以通过以下命令查看启动复制后的状态</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">SHOW SLAVE STATUS FOR CHANNEL &#x27;Master_1&#x27;\G</span><br><span class="line">SHOW SLAVE STATUS FOR CHANNEL &#x27;Master_2&#x27;\G</span><br><span class="line">SHOW SLAVE STATUS\G</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://dev.mysql.com/doc/">Mysql 官网</a></p>
<h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://dev.mysql.com/doc/refman/5.7/en/replication-multi-source-configuration.html">存储同步信息的方式说明</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://dev.mysql.com/doc/mysql-replication-excerpt/5.7/en/replication-howto-mysqldump.html">--master-data=2说明</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 主从复制相关原理简述</title>
    <url>/2207211114/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<h2 id="Mysql-主从同步基本原理"><a href="#Mysql-主从同步基本原理" class="headerlink" title="Mysql 主从同步基本原理"></a>Mysql 主从同步基本原理</h2></blockquote>
<p>复制的基本过程如下：  </p>
<ol>
<li><p>Slave上面的IO进程连接上Master，并请求从指定日志文件的指定位置（或者从最开始的日志）之后的日志内容；</p>
</li>
<li><p>Master接收到来自Slave的IO进程的请求后，通过负责复制的IO进程,根据请求信息,读取指定日志指定位置之后的日志信息，返回给Slave 的IO进程。返回信息中除了日志所包含的信息之外，还包括本次返回的信息已经到Master端的bin-log文件的名称以及bin-log的位置；</p>
</li>
<li><p>Slave的IO进程接收到信息后，将接收到的日志内容依次添加到Slave端的relay-log文件的最末端，并将读取到的Master端的 bin-log的文件名和位置记录到master-info文件中，以便在下一次读取的时候能够清楚的告诉Master“我需要从某个bin-log的哪个位置开始往后的日志内容，请发给我”；</p>
</li>
<li><p>Slave的Sql进程检测到relay-log中新增加了内容后，会马上解析relay-log的内容，获得在Master端真实执行的那些可执行的内容，并在自身执行。</p>
</li>
</ol>
<p>双主情况下，禁止同时写入，建议还是按照主从的方式工作，防止数据冲突。双主场景下，主要是切换主备方便。</p>
<span id="more"></span>

<blockquote>
<h2 id="Mysql-复制方式"><a href="#Mysql-复制方式" class="headerlink" title="Mysql 复制方式"></a>Mysql 复制方式</h2></blockquote>
<blockquote>
<h3 id="异步复制（Asynchronous-replication）"><a href="#异步复制（Asynchronous-replication）" class="headerlink" title="异步复制（Asynchronous replication）"></a>异步复制（Asynchronous replication）</h3></blockquote>
<p>MySQL默认的复制即是异步的，主库在执行完客户端提交的事务后会立即将结果返给给客户端，并不关心从库是否已经接收并处理，这样就会有一个问题，主如果crash掉了，此时主上已经提交的事务可能并没有传到从上，如果此时，强行将从提升为主，可能导致新主上的数据不完整。</p>
<blockquote>
<h3 id="全同步复制（Fully-synchronous-replication）"><a href="#全同步复制（Fully-synchronous-replication）" class="headerlink" title="全同步复制（Fully synchronous replication）"></a>全同步复制（Fully synchronous replication）</h3></blockquote>
<p>指当主库执行完一个事务，所有的从库都执行了该事务才返回给客户端。因为需要等待所有从库执行完该事务才能返回，所以全同步复制的性能必然会收到严重的影响。</p>
<blockquote>
<h3 id="半同步复制（Semisynchronous-replication）"><a href="#半同步复制（Semisynchronous-replication）" class="headerlink" title="半同步复制（Semisynchronous replication）"></a>半同步复制（Semisynchronous replication）</h3></blockquote>
<p>介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端。相对于异步复制，半同步复制提高了数据的安全性，同时它也造成了一定程度的延迟，这个延迟最少是一个TCP&#x2F;IP往返的时间。所以，半同步复制最好在低延时的网络中使用。半同步复制失败(配置超时时间)，自动转为异步复制  </p>
<h4 id="半同步复制配置步骤"><a href="#半同步复制配置步骤" class="headerlink" title="半同步复制配置步骤"></a>半同步复制配置步骤</h4><ol>
<li><p>加载使用的插件<br>主库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>master</span></figcaption><table><tr><td class="code"><pre><span class="line">INSTALL PLUGIN rpl_semi_sync_master SONAME &#x27;semisync_master.so&#x27;;</span><br></pre></td></tr></table></figure>
<p>从库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">INSTALL PLUGIN rpl_semi_sync_slave SONAME &#x27;semisync_slave.so&#x27;;</span><br></pre></td></tr></table></figure>
<p>通过 <code>show plugins;</code> 可查看已加载的插件</p>
</li>
<li><p>启动半同步复制<br>主库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>master</span></figcaption><table><tr><td class="code"><pre><span class="line">SET GLOBAL rpl_semi_sync_master_enabled = 1;</span><br></pre></td></tr></table></figure>
<p>从库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">SET GLOBAL rpl_semi_sync_slave_enabled = 1;</span><br></pre></td></tr></table></figure>
<p>执行以下命令重启从库上的IO线程</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">STOP SLAVE IO_THREAD;</span><br><span class="line">START SLAVE IO_THREAD;</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查半同步复制插件是否在运行<br>主库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>master</span></figcaption><table><tr><td class="code"><pre><span class="line">show status like &#x27;Rpl_semi_sync_master_status&#x27;;</span><br></pre></td></tr></table></figure>
<p>从库执行以下命令</p>
<figure class="highlight shell"><figcaption><span>slave</span></figcaption><table><tr><td class="code"><pre><span class="line">show status like &#x27;Rpl_semi_sync_slave_status&#x27;;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<h2 id="Mysql-复制级别说明"><a href="#Mysql-复制级别说明" class="headerlink" title="Mysql 复制级别说明"></a>Mysql 复制级别说明</h2></blockquote>
<p>不同复制级别的设置会影响到Master端的bin-log记录成不同的形式。<br>配置方式:</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">binlog_format=&#x27;row&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="基于sql语句（Statement-level）"><a href="#基于sql语句（Statement-level）" class="headerlink" title="基于sql语句（Statement level）"></a>基于sql语句（Statement level）</h3></blockquote>
<p>每一条会修改数据的sql都会记录到 master的bin-log中。slave在复制的时候，sql进程会解析成和原来master端执行过的相同的sql来再次执行。</p>
<p><strong>优点</strong>：statement level下的优点首先就是解决了<a href="#%E5%9F%BA%E4%BA%8E%E4%B8%80%E6%9D%A1%E8%AE%B0%E5%BD%95%EF%BC%88Row-level%EF%BC%89">row level</a>下的缺点，不需要记录每一行数据的变化，减少bin-log日志量，节约IO，提高性能。因为他只需要记录在Master上所执行的语句的细节，以及执行语句时候的上下文的信息。</p>
<p><strong>缺点</strong>：由于他是记录的执行语句，所以，为了让这些语句在slave端也能正确执行，那么他还必须记录每条语句在执行的时候的一些相关信息，也就是上下文信息，以保证所有语句在slave端被执行的时候能够得到和在master端执行时候相同的结果。<br>另外就是，由于Mysql现在发展比较快，很多的新功能不断的加入，使mysql的复制遇到了不小的挑战，复制的时候涉及到越复杂的内容，bug也就越容易出现。在statement level下，目前已经发现的就有不少情况会造成mysql的复制出现问题，主要是修改数据的时候使用了某些特定的函数或者功能的时候会出现，比如：sleep()函数在有些版本中就不能真确复制，在存储过程中使用了last_insert_id()函数，可能会使slave和master上得到不一致的id等等。<br>由于row level是基于每一行来记录的变化，所以不会出现类似的问题。</p>
<blockquote>
<h3 id="基于一条记录（Row-level）"><a href="#基于一条记录（Row-level）" class="headerlink" title="基于一条记录（Row level）"></a>基于一条记录（Row level）</h3></blockquote>
<p>日志中会记录成每一行数据被修改的形式，然后在slave端再对相同的数据进行修改</p>
<p><strong>优点</strong>： 在row level模式下，bin-log中可以不记录执行的sql语句的上下文相关的信息，仅仅只需要记录那一条记录被修改了，修改成什么样了。所以row level的日志内容会非常清楚的记录下每一行数据修改的细节，非常容易理解。而且不会出现某些特定情况下的存储过程，或function，以及 trigger的调用和触发无法被正确复制的问题。<br>任何情况都可以被复制，这对复制来说是最安全可靠的；和其他大多数数据库系统的复制技术一样；多数情况下，从服务器上的表如果有主键的话，复制就会快了很多,更少的锁</p>
<p><strong>缺点</strong>： row level下，所有的执行的语句当记录到日志中的时候，都将以每行记录的修改来记录，这样可能会产生大量的日志内容，比如有这样一条update语句：update product set owner_member_id &#x3D; ‘b’ where owner_member_id &#x3D; ‘a’，执行之后，日志中记录的不是这条update语句所对应的事件（mysql以事件的形式来记录bin-log日志），而是这条语句所更新的每一条记录的变化情况，这样就记录成很多条记录被更新的很多个事件。自然，bin-log日志的量就会很大。尤其是当执行alter table之类的语句的时候，产生的日志量是惊人的。因为Mysql对于alter table之类的表结构变更语句的处理方式是整个表的每一条记录都需要变动，实际上就是重建了整个表。那么该表的每一条记录都会被记录到日志中。</p>
<blockquote>
<h3 id="Mixed"><a href="#Mixed" class="headerlink" title="Mixed"></a>Mixed</h3></blockquote>
<p>在Mixed模式下，Mysql会根据执行的每一条具体的sql语句,来区分对待记录的日志形式，也就是在Statement和Row之间选择一种。新版本中的Statment level还是和以前一样，仅仅记录执行的语句。而新版本的Mysql中对row level模式也被做了优化，并不是所有的修改都会以row level来记录，像遇到表结构变更的时候就会以statement模式来记录，如果sql语句确实就是update或者delete等修改数据的语句，那么还是会记录所有行的变更。</p>
<blockquote>
<h3 id="GTID模式"><a href="#GTID模式" class="headerlink" title="GTID模式"></a>GTID模式</h3></blockquote>
<p>需要基于row模式，mysql-5.6.2支持,mysql5.6.10后完善</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">log_bin=on</span><br><span class="line">binlog_format=&#x27;row&#x27;</span><br><span class="line">gtid_mode=on</span><br><span class="line">enforce-gtid-consistency=on</span><br><span class="line">log-slave-updates=1</span><br></pre></td></tr></table></figure>
<p>限制：</p>
<ol>
<li>不支持非事务引擎(从库报错, stop slave; start slave ; 忽略)</li>
<li>不支持create table … select语句(主库直接报错)</li>
<li>不支持一个sql同时更新一个事务引擎和非事务引擎的表</li>
<li>在一个复制组中,必须要求统一开启gtid或是关闭gtid</li>
<li>开启gtid需要重启</li>
<li>开启gtid后,就不在使用原来传统的复制方式</li>
<li>对于create temporary table和drop temporary table语句不支持</li>
<li>不支持sql_slave_skip_counter</li>
</ol>
<blockquote>
<h2 id="MySQL（主从）配置相关参数"><a href="#MySQL（主从）配置相关参数" class="headerlink" title="MySQL（主从）配置相关参数"></a>MySQL（主从）配置相关参数</h2></blockquote>
<p>master相关配置  </p>
<figure class="highlight shell"><figcaption><span>master my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">server-id = 1</span><br><span class="line">log-bin = mysql-bin    #要生成的二进制日志文件名称</span><br><span class="line">binlog_format=statement/row/mixed        ###复制实现模式/级别</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">binlog-do-db = rtzc_pnc_base       <span class="comment">##要同步的库.应该尽可能的在从库上使用replicate_wild_*，不建议在主库上使用</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">binlog-ignore-db = mysql   <span class="comment">#不同步的数据库,应该在从库上尽可能的使用replicate_wild_*</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#### 一般不再主服务器上过滤，虽然可以减少主的开销，但这样会导致二进制日志不完整</span></span></span><br><span class="line">sync_binlog=0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0      表示MySQL 不控制binlog的刷新，由文件系统自己控制它的缓存的刷新。这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sync_binlog&gt;0    表示每N个sync_binlog次事务提交，MySQL调用文件系统的刷新操作将缓存刷下去。最安全的就是sync_binlog=1了，表示每次事务提交，MySQL都会把binlog刷下去，是最安全但是性能损耗最大的设置。这样的话，在数据库所在的主机操作系统损坏或者突然掉电的情况下，系统才有可能丢失1个事务的数据。但是binlog虽然是顺序IO，但是设置sync_binlog=1，多个事务同时提交，同样很大的影响MySQL和IO性能。对于高并发事务的系统来说，“sync_binlog”设置为0和设置为1的系统写入性能差距可能高达5倍甚至更多。</span></span><br><span class="line"></span><br><span class="line">innodb_flush_log_at_trx_commit = 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########innodb特有参数</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">N=0     每隔一秒，把事务日志缓存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上；在这种情况下，MySQL性能最好，但如果 mysqld 进程崩溃，通常会导致最后 1s 的日志丢失。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">N=1     每个事务提交时候，把事务日志从缓存区写到日志文件中，并且刷新日志文件的数据到磁盘上；每次事务提交时，<span class="built_in">log</span> buffer 会被写入到日志文件并刷写到磁盘。这也是默认值。这是最安全的配置，但由于每次事务都需要进行磁盘I/O，所以也最慢。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">N=2    当取值为 2 时，每次事务提交会写入日志文件，但并不会立即刷写到磁盘，日志文件会每秒刷写一次到磁盘。这时如果 mysqld 进程崩溃，由于日志已经写入到系统缓存，所以并不会丢失数据；在操作系统崩溃的情况下，通常会导致最后 1s 的日志丢失。 对于一些数据一致性和完整性要求不高的应用，配置为 2 就足够了；如果为了最高性能，可以设置为 0。有些应用，如支付服务，对一致性和完整性要求很高，所以即使最慢，也最好设置为 1.</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">replicate-wild-ignore-table=db.*               <span class="comment">###应该在从库上尽可能的使用replicate_wild_</span></span></span><br><span class="line"></span><br><span class="line">max_binlog_size</span><br><span class="line">expire_logs_days = 7          ##日志保存天数</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>slave相关配置</p>
<figure class="highlight shell"><figcaption><span>my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">server-id = 2</span><br><span class="line">relay-log = mysql-relay-bin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">replicate-do-db = rtzc_pnc_base     <span class="comment">##应该在从库上尽可能的使用replicate_wild_*，并不会减少主往从复制数据占用带宽</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">replicate-do-table = db.table      <span class="comment">##表级过滤</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#replicate-ignore-table = db.table</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">replicate_ignore_db=<span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">replicate_wild_do_table=DB_NAME.%</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">replicate_wild_ignore_table=DB_NAME.%</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">slave-skip-errors = 1032,1062     <span class="comment">###跳过某些同步错误号</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">log-slave-updates=1          <span class="comment">###从库需要记录binlog，如级联从库场景，级联从库必须有此参数</span></span></span><br><span class="line">log-bin = mysql-bin</span><br><span class="line"></span><br><span class="line">expire_logs_days = 7</span><br><span class="line"></span><br><span class="line">read-only         ###从库Slave中使用read-only参数，确保从库数据不被非法更新。</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">innodb_read_only = 1         <span class="comment">###控制root用户，慎用</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 服务常用配置说明</title>
    <url>/202207261420/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<h3 id="全局通用配置"><a href="#全局通用配置" class="headerlink" title="全局通用配置"></a>全局通用配置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">user nginx nginx;    </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建议设置为cpu核心数或者cpu核心数的2倍，进程会包含一个`master process`，多个`worker process`</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">master process负责绑定端口、调度进程等，不负责业务的处理</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">worker process是业务进程，负责业务的处理</span></span><br><span class="line">worker_processes auto;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一个worker进程可以打开的最大的fd个数，受Linux内核限制</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">理论值应该是系统最多打开文件数（<span class="built_in">ulimit</span> -n）与nginx进程数相除</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可通过<span class="built_in">ulimit</span>设置或修改系统文件：`/etc/securit/limits.conf`</span></span><br><span class="line">worker_rlimit_nofile 1024；</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cpu亲和性设置</span> </span><br><span class="line">worker_cpu_affinity    0001 0010 0100 1000;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作进程调度优先级，-20到19之间的值，值越小越优先调用。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果系统同时运行多个任务，你可能需要提高nginx的工作进程的优先级</span> </span><br><span class="line">worker_priority 0；              </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ssl硬件加速服务器，需要硬件支持</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ssl_engine ssl_engine device;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx是否以守护进程运行，是否让nignx运行于后台；调试时可为off，使得所有信息直接输出在控制台</span></span><br><span class="line">daemon      on | off;         </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">events模块中包含nginx中所有处理连接的设置。</span></span><br><span class="line">events &#123;</span><br><span class="line">    # 每个worker进程允许的最多连接数, </span><br><span class="line">    # nginx服务最大连接数：worker_processes * worker_connections (受worker_rlimit_nofile限制)</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">    use epoll;</span><br><span class="line">    </span><br><span class="line">    # 是否允许一次性地响应多个用户请求</span><br><span class="line">    multi_accept on;                    </span><br><span class="line"></span><br><span class="line">    # 是否打开nginx的accept锁；此锁能够让多个worker进行轮流地、序列化地与新的客户端建立连接；</span><br><span class="line">    # 而通常当一个worker进程的负载达到其上限的7/8，master就尽可能不将请求调度至worker.</span><br><span class="line">	accept_mutex on | off;              </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HTTP模块控制着nginx http处理的所有核心特性</span></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # 是否在错误页面中显示和响应头字段中发出nginx版本号。</span><br><span class="line">    # 安全考虑建议关闭</span><br><span class="line">    server_tokens on | off | string; </span><br><span class="line">    </span><br><span class="line">    # 是否启用sendfile内核复制模式功能。作为静态服务器可以提供最大的IO访问速度。</span><br><span class="line">    sendfile on | off; </span><br><span class="line">    </span><br><span class="line">    # 尽快发送数据，否则会在数据包达到一定大小后再发送数据。这样会减少网络通信次数，降低阻塞概率，但也会影响响应及时性。</span><br><span class="line">    # 比较适合于文件下载这类的大数据通信场景。</span><br><span class="line">    tcp_nodelay on|off; </span><br><span class="line">    </span><br><span class="line">    # 单位s，适当降低此值可以提高响应连接数量</span><br><span class="line">    keepalive_timeout  65; </span><br><span class="line">    </span><br><span class="line">    # 一次长连接上允许的最大请求数</span><br><span class="line">    keepalive_requests 100；       </span><br><span class="line">    </span><br><span class="line">    # 禁止指定浏览器使用keepalive</span><br><span class="line">    keepalive_disable msie6|none；    </span><br><span class="line">    </span><br><span class="line">    # 读取http请求首部的超时时长。如果客户端在此时间内未传输整个头，则会向客户端返回408（请求超时）错误</span><br><span class="line">    client_header_timeout 1;     </span><br><span class="line">    </span><br><span class="line">    # 读取http请求包体的超时时间。</span><br><span class="line">    client_body_timeout 2;</span><br><span class="line">    </span><br><span class="line">    # 发送响应的超时时长。超时后连接将关闭。</span><br><span class="line">    send_timeout 5;  </span><br><span class="line">    </span><br><span class="line">    #http请求包体的最大值，常用于限定客户端所能够请求的最大包体，根据请求首部中的Content-Length来检查，以避免无用的传输。</span><br><span class="line">    client_max_body_size 1m;</span><br><span class="line">    </span><br><span class="line">    # 限制客户端每秒传输的字节数，默认为0，表示没有限制。单位Byte/s</span><br><span class="line">    limit_rate 0;</span><br><span class="line">    </span><br><span class="line">    # nginx向客户端发送响应报文时，如果大小超过了此处指定的值，则后续的发送过程开始限速，单位Byte</span><br><span class="line">    limit_rate_after 0;</span><br><span class="line">    </span><br><span class="line">    # 是否忽略不合法的http首部，默认为on，off意味着请求首部中出现不合规的首部将拒绝响应。</span><br><span class="line">    ignore_invalid_headers on|off;</span><br><span class="line">    </span><br><span class="line">    # 用户访问的文件不存在时，是否将其记录到错误日志中。</span><br><span class="line">    log_not_found on|off;   </span><br><span class="line">    </span><br><span class="line">    # nginx使用的dns地址，及缓存解析结果的时间               </span><br><span class="line">    resolver 8.8.8.8 [valid=time] [ipv6=on|off];</span><br><span class="line">    </span><br><span class="line">    # dns解析超时时间 </span><br><span class="line">    resolver_timeout 2；     </span><br><span class="line">    </span><br><span class="line">    # 是否打开文件缓存功能，max：用于缓存条目的最大值，</span><br><span class="line">    # inactive：某缓存条目在指定时长内没有被访问过时，将自动被删除，即缓存有效期，通常默认为60s。</span><br><span class="line">    open_file_cache off;  </span><br><span class="line">    open_file_cache max=N [inactive=time];    </span><br><span class="line">    </span><br><span class="line">    # 是否缓存文件找不到或没有权限访问等相关信息。</span><br><span class="line">    open_file_cache_errors on | off; </span><br><span class="line">    </span><br><span class="line">    # 多长时间检查一次缓存中的条目是否超出非活动时长。</span><br><span class="line">    # 建议值：小于等于open_file_cache inactive</span><br><span class="line">    open_file_cache_valid 60;   </span><br><span class="line">    </span><br><span class="line">    # 在open_file_cache inactive指定的时长内被访问超过此处指定的次数时，才不会被删除（删除低命中率的缓存）。</span><br><span class="line">    open_file_cache_min_uses 2;     </span><br><span class="line">    </span><br><span class="line">    # 开启内容压缩，可以有效降低客户端的访问流量和网络带宽</span><br><span class="line">    gzip on | off;</span><br><span class="line">    </span><br><span class="line">    # 内容超过最少长度后才开启压缩，太短的内容压缩效果不佳，且会浪费系统资源。</span><br><span class="line">    # 压缩长度会作为http响应头Content-Length字段返回给客户端。 建议值：64</span><br><span class="line">    gzip_min_length length;</span><br><span class="line">    </span><br><span class="line">    # 压缩级别，默认值为1。范围为1～9级，压缩级别越高压缩率越高，但对系统性能要求越高。建议值：4</span><br><span class="line">    gzip_comp_level 1~9;</span><br><span class="line">    </span><br><span class="line">    # 压缩内容类型，默认为text/html;。只压缩html文本，一般我们都会压缩js、css、json之类的，可以把这些常见的文本数据都配上。</span><br><span class="line">    如：text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line">    gzip_types mime-type …;     </span><br><span class="line">    </span><br><span class="line">    # 定义日志格式</span><br><span class="line">    log_format main &#x27;&#123; time: $time_iso8601|&#x27;</span><br><span class="line">                    &#x27;http_host:$http_host|&#x27;</span><br><span class="line">                    &#x27;cdn_ip:$remote_addr|&#x27;</span><br><span class="line">                    &#x27;request:$request|&#x27;</span><br><span class="line">                    &#x27;request_method:$request_method|&#x27;</span><br><span class="line">                    &#x27;http_user_agent:$http_user_agent|&#x27;</span><br><span class="line">                    &#x27;size:$body_bytes_sent|&#x27;</span><br><span class="line">                    &#x27;responsetime:$request_time|&#x27;</span><br><span class="line">                    &#x27;upstreamtime:$upstream_response_time|&#x27;</span><br><span class="line">                    &#x27;upstreamhost:$upstream_addr|&#x27;</span><br><span class="line">                    &#x27;upstreamstatus:$upstream_status|&#x27;</span><br><span class="line">                    &#x27;url:$http_host$uri|&#x27;</span><br><span class="line">                    &#x27;http_x_forwarded_for:$clientRealIp|&#x27;</span><br><span class="line">                    &#x27;status:$status&#125;&#x27;;</span><br><span class="line">    </span><br><span class="line">    # server负责具体的http服务器实现</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 [default_server]  [rcvbuf=SIZE]  [sndbuf=SIZE] [ssl];</span><br><span class="line">        </span><br><span class="line">        # 可使用通配符*或正则表达式(~开头)，多个域名先精确匹配，再通配，再正则,&#x27;_&#x27;表示空主机头</span><br><span class="line">        server_name  _  ;</span><br><span class="line">        </span><br><span class="line">        access_log logs/access.log main;</span><br><span class="line">        error_log logs/access.err.log;</span><br><span class="line">        </span><br><span class="line">        # 跨域配置</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">        add_header Access-Control-Allow-Headers &#x27;Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With&#x27;;</span><br><span class="line">        add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span><br><span class="line">        add_header Access-Control-Allow-Credentials: true;</span><br><span class="line">        </span><br><span class="line">        location / &#123;       </span><br><span class="line">            # web资源路径             </span><br><span class="line">            root   html;          </span><br><span class="line">            </span><br><span class="line">            # 定义默认页面，从左往右匹配           </span><br><span class="line">            index  index.html index.htm;   </span><br><span class="line">            </span><br><span class="line">            # 自左向右读取指定路径，找到即停止，如果都不存在，返回一个错误码</span><br><span class="line">            try_files $uri $uri.html $uri/index.html =404;        </span><br><span class="line">            </span><br><span class="line">            # 自左向右读取指定路径，找到即停止，如果都不存在，返回一个uri</span><br><span class="line">            try_files $uri $uri.html $uri/index.html /404.html; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /i/ &#123; </span><br><span class="line">            # 路径别名，只能用于location中。</span><br><span class="line">            # 访问 http://a.com/i/a.html, 资源路径为：/data/www/html/a.html</span><br><span class="line">            # 若是root指令，访问 http://a.com/i/a.html，资源路径为：/data/www/html/i/a.html</span><br><span class="line">		    alias /data/www/html/;          </span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">	    # 对于某个请求发生错误，如果匹配到错误码，重定向到新的url</span><br><span class="line">	    error_page  404              /404.html; </span><br><span class="line">	    error_page   500 502 503 504  /50x.html;</span><br><span class="line">	    </span><br><span class="line">	    # 对于某个请求发生错误，如果匹配到错误码，重定向到新的url,同时可以更改返回码</span><br><span class="line">	    error_page 404 =200 /404.html;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    # 包含其他配置文件</span><br><span class="line">    include vhosts/*.conf;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<blockquote>
<h3 id="Server-常用配置"><a href="#Server-常用配置" class="headerlink" title="Server 常用配置"></a>Server 常用配置</h3></blockquote>
<h4 id="nginx-代理php"><a href="#nginx-代理php" class="headerlink" title="nginx 代理php"></a>nginx 代理php</h4><figure class="highlight shell"><figcaption><span>vhosts/web.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name  _  ;</span><br><span class="line">    root           html;</span><br><span class="line">    </span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;          ###fastcgi程序的页面文件位置，$document_root = 之前配置的root           html;</span><br><span class="line">        ##include        fastcgi_params;</span><br><span class="line">	    fastcgi_param  QUERY_STRING       $query_string;                  ###将请求中的参数透传</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="nginx-状态监控"><a href="#nginx-状态监控" class="headerlink" title="nginx 状态监控"></a>nginx 状态监控</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置访问路径，即uri</span></span><br><span class="line">location = /nginx_status&#123;  </span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">开启该模块</span></span><br><span class="line">  stub_status on;    </span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">关闭日志</span>  </span><br><span class="line">  access_log off;   </span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">允许访问的ip，即白名单ip</span> </span><br><span class="line">  allow 101.106.102.129;        </span><br><span class="line">  allow 127.0.0.1;</span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">拒绝白名单ip以外的ip访问</span></span><br><span class="line">  deny all;               </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="ssl-配置"><a href="#ssl-配置" class="headerlink" title="ssl 配置"></a>ssl 配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name csms.tech;</span><br><span class="line">  </span><br><span class="line">    ssl_certificate /path/to/your_certificate.pem;</span><br><span class="line">    ssl_certificate_key /path/to/your_key.key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制跳转https</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name csms.tech;</span><br><span class="line">    rewrite ^(.*)$  https://$host$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用pem类型证书链：可将中间证书导入pem文件，再将私钥导入pem文件，ssl_certificate和ssl_certificate_key都使用pem文件，可解决以下报错：<br>SSL_CTX_use_PrivateKey_file(“pri.key”) failed  (SSL: error:0906D06C:PEM routines:PEM_read_bio:no start line:Expecting: ANY PRIVATE KEY error:140B0009:SSL routines:SSL_CTX_use_PrivateKey_file:PEM lib</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat gd_bundle-g2-g1.crt &gt;&gt; f549150b196cd59e.pem</span><br><span class="line">cat f549150b196cd59e.key &gt;&gt; f549150b196cd59e.pem</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">ssl_certificate f549150b196cd59e.pem;</span><br><span class="line">ssl_certificate_key  f549150b196cd59e.pem;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="配置-upstream-代理"><a href="#配置-upstream-代理" class="headerlink" title="配置 upstream 代理"></a>配置 upstream 代理</h4><figure class="highlight shell"><figcaption><span>upstream.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    # 调度策略,默认为轮询</span><br><span class="line">    ip_hash | url_hash ...</span><br><span class="line">    </span><br><span class="line">    # 后端服务器列表</span><br><span class="line">    # backup:其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line">    # max_fails:允许请求失败的次数，默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误.</span><br><span class="line">    # fail_timeout : max_fails次失败后，暂停的时间。 </span><br><span class="line">    server 10.0.0.1:8080 [weight=1] [backup] [down] [max_fails] [fail_timeout];</span><br><span class="line">    server 10.0.0.2:8080 [weight=1] [backup] [down] [max_fails] [fail_timeout];</span><br><span class="line"></span><br><span class="line">    keepalive 2000;</span><br><span class="line">    </span><br><span class="line">    # 后端健康检测，需要第三方插件ngx_http_healthcheck_module</span><br><span class="line">    # healthcheck_enabled;         </span><br><span class="line">    # healthcheck_delay 3000;</span><br><span class="line">    # healthcheck_timeout 1000;</span><br><span class="line">    # healthcheck_failcount 2;</span><br><span class="line">    # healthcheck_send &#x27;GET /healthcheck.html HTTP/1.0&#x27; &#x27;Host: local.com&#x27; &#x27;Connection: close&#x27;;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;                                                         </span><br><span class="line">    server_name  csms.tech;                                               </span><br><span class="line">    client_max_body_size 1024M;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        # 指定协议、主机名、端口</span><br><span class="line">        proxy_pass http://myserver/uri;</span><br><span class="line">                     </span><br><span class="line">        [proxy_set_header Host $host:$server_port;]</span><br><span class="line">        [proxy_redirect     off;]</span><br><span class="line">        [proxy_set_header X-Real-IP $remote_addr;]</span><br><span class="line">        [proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;]</span><br><span class="line">        [proxy_set_header X-Forwarded-Proto https;]</span><br><span class="line">        [proxy_ignore_client_abort on;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ip-限制"><a href="#ip-限制" class="headerlink" title="ip 限制"></a>ip 限制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;                                                         </span><br><span class="line">    server_name  csms.tech;</span><br><span class="line">    </span><br><span class="line">    root html;</span><br><span class="line">    </span><br><span class="line">    if ($http_x_forwarded_for !~ (1.1.1.1|1.1.1.2)) &#123;</span><br><span class="line">        return 403;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="地区限制"><a href="#地区限制" class="headerlink" title="地区限制"></a>地区限制</h4><p>依赖nginx 的<code>http_geoip_module</code> 模块，检查<code>GeoIP</code>是否安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./sbin/nginx -V </span><br></pre></td></tr></table></figure>
<p>输出结果中如果不包含：<code>--with-http_geoip_module</code>，说明未安装，重新编译安装nginx<br>安装<code>http_geoip_module</code>模块后使用以下配置</p>
<figure class="highlight shell"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    geoip_country /usr/share/GeoIP/GeoIP.dat;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name csms.tech;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">            if ($geoip_country_code != CN) &#123;</span><br><span class="line">                root outChina;</span><br><span class="line">            &#125;</span><br><span class="line">            root China;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="server-中location优先级"><a href="#server-中location优先级" class="headerlink" title="server 中location优先级"></a>server 中<code>location</code>优先级</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 精确匹配，最高优先级</span><br><span class="line">    location = /url  &#123;&#125;        </span><br><span class="line"></span><br><span class="line">    # 从前往后匹配，匹配到即停止继续匹配，不是正则匹配，第二优先级</span><br><span class="line">    location ^~ /uri  &#123;&#125;          </span><br><span class="line"></span><br><span class="line">    # 正则匹配，~ 区分大小写， ~* 不区分大小写，第三优先级</span><br><span class="line">    location ~ ^/url$ &#123;&#125;    </span><br><span class="line">    location ~* ^/url$ &#123;&#125;    </span><br><span class="line">	</span><br><span class="line">    # / 会匹配到所有未被匹配到的url</span><br><span class="line">    location /documents/ &#123;&#125; </span><br><span class="line">    location / &#123;&#125; </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3></blockquote>
<h4 id="worker-connections-exceed-open-file-resource-limit"><a href="#worker-connections-exceed-open-file-resource-limit" class="headerlink" title="worker_connections exceed open file resource limit"></a>worker_connections exceed open file resource limit</h4><p><strong>问题原因</strong>： worker_rlimit_nofile的值小于worker_connections的值，参数说明可参考<a href="#%E5%85%A8%E5%B1%80%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE">全局通用配置</a>  </p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs安装配置</title>
    <url>/647e4c1a/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/latest/node-v15.12.0-linux-x64.tar.gz</span><br><span class="line">tar -xf node-v15.12.0-linux-x64.tar.gz -C /usr/local</span><br><span class="line">ln -s /usr/local/node-v15.12.0-linux-x64/bin/* /bin/</span><br></pre></td></tr></table></figure>

<p>安装pm2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install pm2 -g</span><br><span class="line">npm install -g pm2@3.5.1    # 安装指定版本</span><br></pre></td></tr></table></figure>

<h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><blockquote>
<p>WARN EACCES user “root” does not have permission to access the dev dir “&#x2F;root&#x2F;.node-gyp&#x2F;11.15.0”<br>ERR! stack Error: EACCES: permission denied, mkdir ‘node_modules&#x2F;sqlite3&#x2F;.node-gyp’</p>
<p>[解决方法]：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --unsafe-perm</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>predixy 安装配置</title>
    <url>/202207271506/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3></blockquote>
<ul>
<li>Centos 7</li>
<li>predixy-1.0.5</li>
</ul>
<blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3></blockquote>
<p><a href="https://github.com/joyieldInc/predixy">下载地址</a>, clone或下载最新的版本或指定版本下载后解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libstdc++-static -y</span><br><span class="line">cd predixy-1.0.5</span><br><span class="line">make</span><br><span class="line">cp src/predixy /usr/local/bin/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要依赖 <code>libstdc++-static</code>, 否则make会报错：<br>&#x2F;bin&#x2F;ld: cannot find -lstdc++<br>collect2: error: ld returned 1 exit status<br>make[1]: *** [predixy] Error 1<br>make[1]: Leaving directory &#96;&#x2F;root&#x2F;predixy-1.0.5&#x2F;src’<br>make: *** [default] Error 2</p>
</blockquote>
<blockquote>
<h3 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h3></blockquote>
<ul>
<li><p>predixy.conf，整体配置文件，会引用下面的配置文件</p>
</li>
<li><p>cluster.conf，用于Redis Cluster时，配置后端redis信息</p>
</li>
<li><p>sentinel.conf，用于Redis Sentinel时，配置后端redis信息</p>
</li>
<li><p>auth.conf，访问权限控制配置，可以定义多个验证密码，可每个密码指定读、写、管理权限，以及定义可访问的健空间</p>
</li>
<li><p>dc.conf，多数据中心支持，可以定义读写分离规则，读流量权重分配</p>
</li>
<li><p>latency.conf， 延迟监控规则定义，可以指定需要监控的命令以及延时时间间隔</p>
</li>
</ul>
<blockquote>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">predixy /predixy/conf/predixy.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用默认的配置文件predixy.conf， predixy将监听地址0.0.0.0:7617，后端的redis是Redis Cluster 127.0.0.1:6379  </p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Predixy</tag>
      </tags>
  </entry>
  <entry>
    <title>rsyncd 服务</title>
    <url>/36f703dc/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync [OPTION]... SRC DEST</span><br><span class="line">rsync [OPTION]... SRC [USER@]host:DEST</span><br><span class="line">rsync [OPTION]... [USER@]HOST:SRC DEST</span><br><span class="line">rsync [OPTION]... [USER@]HOST::SRC DEST</span><br><span class="line">rsync [OPTION]... SRC [USER@]HOST::DEST</span><br><span class="line">rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]</span><br></pre></td></tr></table></figure>

<p><code>:</code>   ssh方式进行备份，ssh非默认端口使用选项-e指定端口, <code>-e &#39;ssh -p 30000&#39;</code></p>
<p><code>::</code>   socket方式进行备份，rsync以服务方式监听，SRC&#x2F;DEST为配置中定义的模块[]</p>
<blockquote>
<ul>
<li>rsync命令使用中，如果源参数的末尾有斜线，只会复制指定目录的内容，而不复制目录本身，没有斜线，则会复制目录本身，包括目录</li>
<li>客户端免密登录时，需要在客户端建立密码文件：&#x2F;etc&#x2F;rsync.passwd，文件中只保存密码，权限为600，用选项–password-file指明存放密码的文件位置</li>
</ul>
</blockquote>
<span id="more"></span>

<h3 id="常用选项-OPTION"><a href="#常用选项-OPTION" class="headerlink" title="常用选项 [OPTION]"></a>常用选项 [OPTION]</h3><blockquote>
<p>-v, –verbose 详细模式输出。<br>-q, –quiet 精简输出模式。<br>-c, –checksum 打开校验开关，强制对文件传输进行校验。<br>-a, –archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。<br>-r, –recursive 对子目录以递归模式处理。<br>-R, –relative 使用相对路径信息。<br>-b, –backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为<del>filename。可以使用–suffix选项来指定不同的备份文件前缀。<br>–backup-dir 将备份文件(如</del>filename)存放在在目录下。<br>-suffix&#x3D;SUFFIX 定义备份文件前缀。<br>-u, –update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。<br>-l, –links 保留软链结。<br>-L, –copy-links 想对待常规文件一样处理软链结。<br>–copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结。<br>–safe-links 忽略指向SRC路径目录树以外的链结。<br>-H, –hard-links 保留硬链结。<br>-p, –perms 保持文件权限。<br>-o, –owner 保持文件属主信息。<br>-g, –group 保持文件属组信息。<br>-D, –devices 保持设备文件信息。<br>-t, –times 保持文件时间信息。<br>-S, –sparse 对稀疏文件进行特殊处理以节省DST的空间。<br>-n, –dry-run现实哪些文件将被传输。<br>-w, –whole-file 拷贝文件，不进行增量检测。<br>-x, –one-file-system 不要跨越文件系统边界。<br>-B, –block-size&#x3D;SIZE 检验算法使用的块尺寸，默认是700字节。<br>-e, –rsh&#x3D;command 指定使用rsh、ssh方式进行数据同步。<br>–rsync-path&#x3D;PATH 指定远程服务器上的rsync命令所在路径信息。<br>-C, –cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件。<br>–existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件。<br>–delete 删除那些DST中SRC没有的文件。<br>–delete-excluded 同样删除接收端那些被该选项指定排除的文件。<br>–delete-after 传输结束以后再删除。<br>–ignore-errors 及时出现IO错误也进行删除。<br>–max-delete&#x3D;NUM 最多删除NUM个文件。<br>–partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输。<br>–force 强制删除目录，即使不为空。<br>–numeric-ids 不将数字的用户和组id匹配为用户名和组名。<br>–timeout&#x3D;time ip超时时间，单位为秒。<br>-I, –ignore-times 不跳过那些有同样的时间和长度的文件。<br>–size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。<br>–modify-window&#x3D;NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0。<br>-T –temp-dir&#x3D;DIR 在DIR中创建临时文件。<br>–compare-dest&#x3D;DIR 同样比较DIR中的文件来决定是否需要备份。<br>-P 等同于 –partial。<br>–progress 显示备份过程。<br>-z, –compress 对备份的文件在传输时进行压缩处理。<br>–exclude PATTERN 指定排除不需要传输的文件模式。支持通配符<br>–include PATTERN 指定不排除而需要传输的文件模式。<br>–exclude-from&#x3D;FILE 排除FILE中指定模式的文件。<br>–include-from&#x3D;FILE 不排除FILE指定模式匹配的文件。<br>–version 打印版本信息。<br>–address 绑定到特定的地址。<br>–config&#x3D;FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件。<br>–port&#x3D;PORT 指定其他的rsync服务端口。<br>–blocking-io 对远程shell使用阻塞IO。<br>-stats 给出某些文件的传输状态。<br>–progress 在传输时现实传输过程。<br>–log-format&#x3D;formAT 指定日志文件格式。<br>–password-file&#x3D;FILE 从FILE中得到密码。<br>–bwlimit&#x3D;KBPS 限制I&#x2F;O带宽，KBytes per second。<br>-h, –help 显示帮助信息。</p>
</blockquote>
<h3 id="rsyncd-配置文件示例"><a href="#rsyncd-配置文件示例" class="headerlink" title="rsyncd 配置文件示例"></a>rsyncd 配置文件示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==该选项指定当模块传输文件时守护进程应该具有的uid、gid</span></span><br><span class="line">uid =root  </span><br><span class="line">gid = root</span><br><span class="line">port = 873</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#消息文件，客户端连接服务器的时显示给客户端</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">motd file = /etc/rsyncd.motd</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==安全相关</span></span><br><span class="line">use chroot = no  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==设置最大连接数</span></span><br><span class="line">max connections = 200  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==设置超时时间</span></span><br><span class="line">timeout = 300   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==定义进程文件</span></span><br><span class="line">pid file = /var/run/rsyncd.pid </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==定义锁文件</span>  </span><br><span class="line">lock file = /var/run/rsync.lock </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==定义日志文件</span> </span><br><span class="line">log file = /var/log/rsyncd.log  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#关闭解析</span></span> </span><br><span class="line">reverse lookup = no  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==配置一个数据存储的模块</span></span><br><span class="line">[backup]      </span><br><span class="line">    #&lt;==模块备份数据路径</span><br><span class="line">    path = /data/www/videos/  </span><br><span class="line">    ignore errors</span><br><span class="line">    read only = false</span><br><span class="line">    list = false</span><br><span class="line">    #&lt;==配置登录权限，可以多个IP网段用逗号隔开</span><br><span class="line">    #hosts allow = 172.16.1.0/24,172.25.1.0/24  </span><br><span class="line">    #hosts deny = 0.0.0.0/32</span><br><span class="line">    #&lt;==配置服务登录用户（访问服务的权限）</span><br><span class="line">    auth users = rsync        </span><br><span class="line">    #&lt;==配置用户和密码文件,权限必须600，用户名:密码格式 </span><br><span class="line">    secrets file = /etc/rsync.server.password  </span><br><span class="line">    ##是否检查secrets file的权限</span><br><span class="line">    strict modes = yes </span><br></pre></td></tr></table></figure>

<h3 id="常用命令示例"><a href="#常用命令示例" class="headerlink" title="常用命令示例"></a>常用命令示例</h3><p>ssh模式同步，默认ssh端口非22是指定ssh端口，使用 <code>-e &#39;ssh -p 222&#39;</code> 选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -e &#x27;ssh -p 222&#x27; /data/wwwroot/  qqc@9.9.9.9:/home/wwwroot/</span><br></pre></td></tr></table></figure>

<p>Windows中使用方式，以类似 <code>/cygdrive/d/</code> 的方式指定d盘</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -c -r -u -t --timeout=300 -z --password-file C:\rsyncPasswd.txt /cygdrive/d/DATA/ rsync@0.0.0.0::zy/</span><br></pre></td></tr></table></figure>

<h3 id="windows-安装-rsync-客户端"><a href="#windows-安装-rsync-客户端" class="headerlink" title="windows 安装 rsync 客户端"></a>windows 安装 rsync 客户端</h3><p>windows下rsync客户端使用 <code>cwRsync</code><br>下载地址：<br><a href="https://www.itefix.net/cwrsync?spm=a2c6h.12873639.article-detail.6.58dd67f17cs3Ta">官网链接</a><br><a href="https://s.csms.tech/file/cwrsync_6.2.4_x64_free.zip">其他地址</a></p>
<p>下载解压安装包后，目录内容如下：<br><img src="https://i.csms.tech/img_22.png"></p>
<p><code>bin</code> 目录下包含常用命令，其中 <code>rsync</code> 命令和linux中使用方法相同</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>sed 命令使用示例</title>
    <url>/202207291520/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="常用选项说明"><a href="#常用选项说明" class="headerlink" title="常用选项说明"></a>常用选项说明</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-n    使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN （例如文件内容）的内容一般都会被列出到屏幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。</span><br><span class="line">-i    直接修改读取的内容，而不是由屏幕输出。</span><br><span class="line">-f    直接将 sed 的动作写在一个文件内， -f filename 则可以执行 filename 内的sed 动作；</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a    追加， a 的后面可以接字符串，而这些字串会在新的一行出现(当前行的下一行)</span><br><span class="line">i    插入， i 的后面可以接字符串，而这些字串会在新的一行出现(目前行的上一行)；</span><br><span class="line">c    替代， c 的后面可以接字符串，替换整行</span><br><span class="line">s    替换， s/a/b/，a 替换成 b</span><br><span class="line">d    删除</span><br><span class="line">p    打印指定行</span><br></pre></td></tr></table></figure>

<h3 id="行定位方法"><a href="#行定位方法" class="headerlink" title="行定位方法"></a>行定位方法</h3><p>根据行号打印出指定行，<code>$</code> 表示最后一行，<code>!</code> 取反，排除行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -n &#x27;1p&#x27; file</span><br><span class="line">sed -n &#x27;1,10p&#x27; file</span><br><span class="line">sed -n &#x27;2,$p&#x27; file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印除最后一行之外的其他行</span></span><br><span class="line">sed -n &#x27;$!p&#x27; file</span><br></pre></td></tr></table></figure>
<p>打印出搜索匹配到的行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -n &#x27;/root/p&#x27; file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印出匹配<span class="string">&#x27;begin&#x27;</span>开始的行，到匹配到<span class="string">&#x27;end&#x27;</span>的行结束</span></span><br><span class="line">sed -n &#x27;/begin/,/end/p&#x27;</span><br><span class="line">sed -n &#x27;/begin/,/end/!p&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h3><h4 id="搜索包含指定内容的行，并替换整行内容"><a href="#搜索包含指定内容的行，并替换整行内容" class="headerlink" title="搜索包含指定内容的行，并替换整行内容"></a>搜索包含指定内容的行，并替换整行内容</h4><p>使用 <code>c</code> 命令，替换整行内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;/^updated/cupdate=1&#x27; file</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title>sftp 服务常用配置说明</title>
    <url>/202207301332/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>sftp 是 Secure File Transfer Protocol 的缩写，安全文件传送协议。可以为传输文件提供一种安全的加密方法。SFTP 为 SSH 的一部分，由于这种传输方式使用了加密&#x2F;解密技术，所以传输效率比普通的 FTP 要低得多，如果您对网络安全性要求更高时，可以使用 SFTP 代替 FTP。默认ssh启用了sftp，只要可登陆系统的用户（&#x2F;bin&#x2F;bash）就可登陆,登陆后目录无限制，可任意切换其他目录。为了安全起见，可以配置sshd以限制sftp登录用户的权限。最好将登陆后用户限制在指定目录，无法切换到外部目录  </p>
<span id="more"></span>

<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p><strong><code>ChrootDirectory</code> 配置前提</strong>:<br><code>ChrootDirectory</code> 设置的目录权限及其所有的上级文件夹权限，属主和属组必须是 root；<br><code>ChrootDirectory</code> 设置的目录权限及其所有的上级文件夹权限，只有属主能拥有写权限，权限最大设置只能是 755。</p>
<blockquote>
<p><strong>如果权限配置不对，会导致无法登录</strong><br>如果上级目录无法设置为root权限，可以通过<code>ln</code>链接的方式实现<br>限制后的用户无法 <code>ssh</code> 登录系统</p>
</blockquote>
<p>创建相关用户和组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd sftp</span><br><span class="line">useradd -g sftp -d /data/sftp/sftpuser1 -s /sbin/nologin sftpuser1</span><br><span class="line">echo 123456 | passwd --stdin sftpuser1</span><br><span class="line"></span><br><span class="line">chown root:root /data/sftp/sftpuser1</span><br><span class="line">chmod 755 /data/sftp/sftpuser1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为 /data/sftp/sftpuser1 属主和属组都为root，其他用户无写入权限，需要创建sftpuser1可写入的目录</span></span><br><span class="line">mkdir -p /data/sftp/sftpuser1/upload</span><br><span class="line">chown sftpuser1:sftp /data/sftp/sftpuser/upload</span><br><span class="line">chmod 755 /data/sftp/sftpuser1/upload</span><br></pre></td></tr></table></figure>

<p>修改 <code>sshd_config</code> 配置</p>
<figure class="highlight shell"><figcaption><span>/etc/ssh/sshd_config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Subsystem      sftp    /usr/libexec/openssh/sftp-server</span></span><br><span class="line">Subsystem sftp internal-sftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拒绝指定用户登录,不能放在Match user中</span></span><br><span class="line">DenyUsers user1 user2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">maxsessions 10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对用户配置sftp, 多个用户可重复配置以下内容，或者通过针对组配置sftp</span></span><br><span class="line">Match user sftpuser1,sftpuser2</span><br><span class="line">    # 该行强制执行内部 sftp，并忽略任何 ~/.ssh/rc 文件中的命令。</span><br><span class="line">   ForceCommand internal-sftp</span><br><span class="line">	</span><br><span class="line">   ChrootDirectory /data/sftp/sftpuser1</span><br><span class="line">	</span><br><span class="line"><span class="meta prompt_">   # </span><span class="language-bash">下面两项是与安全有关</span></span><br><span class="line">    AllowTcpForwarding no</span><br><span class="line">    X11Forwarding no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对用户组配置sftp</span></span><br><span class="line">Match Group sftp,sftp1</span><br><span class="line">    ForceCommand internal-sftp</span><br><span class="line">    </span><br><span class="line">    # %h 代表用户 home 目录，%u 代表用户名。</span><br><span class="line">    ChrootDirectory /data/sftp/%u</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改配置后，重启 <code>sshd</code> 服务生效<br><code>systemctl restart sshd</code></p>
</blockquote>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><h4 id="Unable-to-open-permission-denied"><a href="#Unable-to-open-permission-denied" class="headerlink" title="Unable to open .: permission denied"></a>Unable to open .: permission denied</h4><p><strong>解决方法</strong>： 如果启动了 <code>selinux</code>， 关闭 <code>selinux</code></p>
<h4 id="Couldn’t-read-packet-Connection-reset-by-peer"><a href="#Couldn’t-read-packet-Connection-reset-by-peer" class="headerlink" title="Couldn’t read packet: Connection reset by peer"></a>Couldn’t read packet: Connection reset by peer</h4><p><strong>问题原因</strong>: <code>ChrootDirectory (/data/sftp/sftpuser1)</code> 目录及所有上级目录的用户和组必须为 <code>root</code>，权限最多为 755, <a href="#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">参考说明</a></p>
<h4 id="remote-readdir-“-x2F-“-Permission-denied"><a href="#remote-readdir-“-x2F-“-Permission-denied" class="headerlink" title="remote readdir(“&#x2F;“): Permission denied"></a>remote readdir(“&#x2F;“): Permission denied</h4><p><strong>问题原因</strong>: sftp 用户对 <code>ChrootDirectory (/data/sftp/sftpuser1)</code> 目录要有读取权限，<a href="#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">参考说明</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>sftp</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftpd 服务常见错误</title>
    <url>/202207261304/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="530-Login-incorrect"><a href="#530-Login-incorrect" class="headerlink" title="530 Login incorrect"></a>530 Login incorrect</h3><p><strong>报错信息</strong>： 登录时报错 <code>530 Login incorrect</code><br><strong>错误原因</strong>：</p>
<figure class="highlight shell"><figcaption><span>/etc/pam.d/vsftpd</span></figcaption><table><tr><td class="code"><pre><span class="line">auth  required pam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed </span><br></pre></td></tr></table></figure>
<p>默认情况下，&#x2F;etc&#x2F;vsftpd&#x2F;ftpusers里面的用户是被拒绝登录的，确保要登录的用户不在此文件中</p>
<figure class="highlight shell"><figcaption><span>/etc/pam.d/vsftpd</span></figcaption><table><tr><td class="code"><pre><span class="line">auth       required    pam_shells.so  </span><br></pre></td></tr></table></figure>
<p>此配置指定，只允许登录shell为<code>/etc/shells</code>中的shell的用户登录<br>如果用户shell为<code>/sbin/nologin</code>，则不允许登录，可改为<code>pam_nologin.so</code></p>
<span id="more"></span>

<h3 id="500-OOPS-vsftpd-refusing-to-run-with-writable-root-inside-chroot"><a href="#500-OOPS-vsftpd-refusing-to-run-with-writable-root-inside-chroot" class="headerlink" title="500 OOPS: vsftpd: refusing to run with writable root inside chroot()"></a>500 OOPS: vsftpd: refusing to run with writable root inside chroot()</h3><p><strong>错误原因</strong>: 从2.3.5之后，vsftpd增强了安全检查，如果用户被限定在了其主目录下，则该用户的主目录不能再具有写权限了！如果检查发现还有写权限，就会报该错误。<br><strong>解决方法1</strong>： 用户主目录取消写权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod a-w /data/ftpdir</span><br></pre></td></tr></table></figure>

<p><strong>解决方法2</strong>： 配置文件中增加以下配置</p>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure>

<h3 id="500-OOPS-vsftpd-cannot-locate-user-specified-in-‘guest-username’-ftp"><a href="#500-OOPS-vsftpd-cannot-locate-user-specified-in-‘guest-username’-ftp" class="headerlink" title="500 OOPS: vsftpd: cannot locate user specified in ‘guest_username’:ftp"></a>500 OOPS: vsftpd: cannot locate user specified in ‘guest_username’:ftp</h3><p><strong>错误原因</strong>: 配置文件中启用了匿名用户登录，系统中没有ftp的匿名用户ftp<br><strong>解决方法1</strong>：<br>配置文件中禁用匿名用户登录，同时指定用户</p>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">anonymous_enable=NO</span><br><span class="line">ftp_username=nobody</span><br></pre></td></tr></table></figure>

<h3 id="550-Create-directory-operation-failed"><a href="#550-Create-directory-operation-failed" class="headerlink" title="550 Create directory operation failed"></a>550 Create directory operation failed</h3><p><strong>错误原因</strong>: 匿名登录的用户不允许在ftp根目录下面新建对象，可以在根目录下面创建文件夹，如pub，并给ftp为属主，在pub下面新建文件</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="/202207231311/" title="vsftpd 服务常用配置说明">vsftpd 服务常用配置说明</a>  
</li>
<li><a href="/202207251638/" title="vsftpd 虚拟用户配置说明">vsftpd 虚拟用户配置说明</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftpd 服务常用配置说明</title>
    <url>/202207231311/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3></blockquote>
<ul>
<li>Centos 7</li>
<li>vsftpd 3.0.2</li>
</ul>
<span id="more"></span>

<blockquote>
<h3 id="通用配置"><a href="#通用配置" class="headerlink" title="通用配置"></a>通用配置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名用户和本地用户是否能登录，匿名用户使用的登陆名为ftp或anonymous，口令为空，匿名用户不能离开匿名 用户家目录/var/ftp,且只能下载不能上传。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地用户的登录名为本地用户名，口令为此本地用户的口令；本地用户可以在自己家目录中进行读写操作；本地用户可以离开自家目录切换至有权限访问的其他目录，并在权限允许的情况下进行上传/下载。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认写在文件/etc/vsftpd.ftpusers中的本地用户禁止登陆。</span></span><br><span class="line">anonymous_enable=YES </span><br><span class="line">local_enable=YES </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">否允许登录用户有写权限。属于全局设置，默认值为YES。</span></span><br><span class="line">write_enable=YES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设置为NO，所有的文件都不能下载到本地，文件夹不受影响。默认值为YES。</span></span><br><span class="line">download_enable=YES/NO</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="匿名用户（anonymous）设置"><a href="#匿名用户（anonymous）设置" class="headerlink" title="匿名用户（anonymous）设置"></a>匿名用户（anonymous）设置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若是启动这项功能，则使用匿名登入时，不会询问密码。默认值为NO。</span></span><br><span class="line">no_anon_password=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义匿名登入的使用者名称。默认值为ftp。</span></span><br><span class="line">ftp_username=ftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用匿名登入时，所登入的目录。默认值为/var/ftp。注意ftp目录不能是777的权限属性，即匿名用户的家目录不能有777的权限。</span></span><br><span class="line">anon_root=/var/ftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设为YES，则允许匿名登入者有上传文件（非目录）的权限，只有在write_enable=YES时，此项才有效。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然，匿名用户必须要有对上层目录的写入权。默认值为NO。</span></span><br><span class="line">anon_upload_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设为YES，则允许匿名登入者下载可阅读的档案（可以下载到本机阅读，不能直接在FTP服务器中打开阅读）。默认值为YES。</span></span><br><span class="line">anon_world_readable_only=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设为YES，则允许匿名登入者有新增目录的权限，只有在write_enable=YES时，此项才有效。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然，匿名用户必须要有对上层目录的写入权。默认值为NO。</span></span><br><span class="line">anon_mkdir_write_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设为YES，则允许匿名登入者更多于上传或者建立目录之外的权限，譬如删除或者重命名。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果anon_upload_enable=NO，则匿名用户 不能上传文件，但可以删除或者重命名已经存在的文件；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果anon_mkdir_write_enable=NO，则匿名用户不能上传或者新建文件夹，但 可以删除或者重命名已经存在的文件夹。）默认值为NO。</span></span><br><span class="line">anon_other_write_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置是否改变匿名用户上传文件（非目录）的属主。默认值为NO。</span></span><br><span class="line">chown_uploads=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置匿名用户上传文件（非目录）的属主名。建议不要设置为root。</span></span><br><span class="line">chown_username=username</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置匿名登入者新增或上传档案时的<span class="built_in">umask</span> 值。默认值为077，则新建档案的对应权限为700。</span></span><br><span class="line">anon_umask=077</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若是启动这项功能，则必须提供一个档案/etc/vsftpd/banner_emails，内容为email address。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。默认值为NO。</span></span><br><span class="line">deny_email_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此文件用来输入email address，只有在deny_email_enable=YES时，才会使用到此档案。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。</span></span><br><span class="line">banned_email_file=/etc/vsftpd/banner_emails</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="本地用户-设置"><a href="#本地用户-设置" class="headerlink" title="本地用户 设置"></a>本地用户 设置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制是否允许本地用户登入，默认值为YES。</span></span><br><span class="line">local_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当本地用户登入时，将被更换到定义的目录下。默认值为各用户的家目录</span></span><br><span class="line">local_root=/home/username</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地用户新增档案时的<span class="built_in">umask</span> 值。默认值为077。</span></span><br><span class="line">local_umask=022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地用户上传档案后的档案权限，与<span class="built_in">chmod</span> 所使用的数值相同。默认值为0666。</span></span><br><span class="line">file_open_mode=0755</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="欢迎语设置"><a href="#欢迎语设置" class="headerlink" title="欢迎语设置"></a>欢迎语设置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果启动这个选项，那么使用者第一次进入一个目录时，会检查该目录下是否有.message这个档案</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有，则会出现此档案的内容，通常这个档案会放置欢迎话语，或是对该目录的说明。默认值为开启。</span></span><br><span class="line">dirmessage_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置目录消息文件，可将要显示的信息写入该文件。默认值为.message。</span></span><br><span class="line">message_file=.message</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当使用者登入时，会显示此设定所在的档案内容，通常为欢迎话语或是说明。默认值为无。如果欢迎信息较多，则使用该配置项。</span></span><br><span class="line">banner_file=/etc/vsftpd/banner</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里用来定义欢迎话语的字符串，banner_file是档案的形式，而ftpd_banner 则是字符串的形式。预设为无。</span></span><br><span class="line">ftpd_banner=Welcome to BOB&#x27;s FTP server</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="控制用户是否允许切换到上级目录"><a href="#控制用户是否允许切换到上级目录" class="headerlink" title="控制用户是否允许切换到上级目录"></a>控制用户是否允许切换到上级目录</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否将用户限制在用户主目录。默认值为NO。</span></span><br><span class="line">chroot_local_user=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在默认配置下(chroot_local_user=NO)，本地用户登入FTP后可以使用<span class="built_in">cd</span>命令切换到其他目录，这样会对系统带来安全隐患。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置是否启用chroot_list_file配置项指定的用户列表文件。默认值为NO。</span></span><br><span class="line">chroot_list_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于指定用户列表文件，该文件用于控制哪些用户可以切换到用户家目录的上级目录。</span></span><br><span class="line">chroot_list_file=/etc/vsftpd.chroot_list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 通过搭配能实现以下几种效果：</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 当chroot_local_user=YES, chroot_list_enable=YES时，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 当chroot_local_user=YES, chroot_list_enable=NO时，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有用户被限制在主目录，不启用chroot_list_file白名单，没有例外</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 当chroot_local_user=NO， chroot_list_enable=YES时</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有用户不限制在主目录，chroot_list_file中的用户例外，限制切换到主目录之外</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 当chroot_local_user=NO， chroot_list_enable=NO时</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有用户不限制在主目录,不启用chroot_list_file，没有任何例外</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="数据传输模式设置"><a href="#数据传输模式设置" class="headerlink" title="数据传输模式设置"></a>数据传输模式设置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">FTP在传输数据时，可以使用二进制方式，也可以使用ASCII模式来上传或下载数据。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置是否启用ASCII 模式上传数据。默认值为NO。</span></span><br><span class="line">ascii_upload_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置是否启用ASCII 模式下载数据。默认值为NO。</span></span><br><span class="line">ascii_download_enable=YES/NO</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="访问控制设置"><a href="#访问控制设置" class="headerlink" title="访问控制设置"></a>访问控制设置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">两种控制方式：一种控制主机访问，另一种控制用户访问。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置vsftpd是否与tcp wrapper相结合来进行主机的访问控制。默认值为YES。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果启用，则vsftpd服务器会检查/etc/hosts.allow 和/etc/hosts.deny 中的设置，来决定请求连接的主机，是否允许访问该FTP服务器。这两个文件可以起到简易的防火墙功能。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如：若要仅允许192.168.0.1—192.168.0.254的用户可以连接FTP服务器，则在/etc/hosts.allow文件中添加以下内容：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vsftpd:192.168.0. :allow</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">all:all :deny</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于用户的访问控制可以通过/etc目录下的vsftpd.user_list和ftpusers文件来实现。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制用户访问FTP的文件，里面写着用户名称。一个用户名称一行。</span></span><br><span class="line">userlist_file=/etc/vsftpd.user_list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否启用vsftpd.user_list文件。</span></span><br><span class="line">userlist_enable=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">决定vsftpd.user_list文件中的用户是否能够访问FTP服务器。userlist_enable=YES 才有效</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若设置为YES，则vsftpd.user_list文件中的用户不允许访问FTP，为黑名单，其他用户可以访问</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若设置为NO，则vsftpd.user_list文件中的用户能访问FTP，为白名单，其他用户不能访问</span></span><br><span class="line">userlist_deny=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/vsftpd/ftpusers文件专门用于定义不允许访问FTP服务器的用户列表，不受任何配置文件影响，里面的用户始终不允许方法vsftpd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认情况下vsftpd.user_list和ftpusers，这两个 文件已经预设置了一些不允许访问FTP服务器的系统内部账户。如果系统没有这两个文件，那么新建这两个文件，将用户添加进去即可。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="访问速率设置"><a href="#访问速率设置" class="headerlink" title="访问速率设置"></a>访问速率设置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置匿名登入者使用的最大传输速度，单位为B/s，0 表示不限制速度。默认值为0。</span></span><br><span class="line">anon_max_rate=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地用户使用的最大传输速度，单位为B/s，0 表示不限制速度。预设值为0。</span></span><br><span class="line">local_max_rate=0</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="超时时间设置"><a href="#超时时间设置" class="headerlink" title="超时时间设置"></a>超时时间设置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置建立FTP连接的超时时间，单位为秒。默认值为60。</span></span><br><span class="line">accept_timeout=60</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PORT 方式下建立数据连接的超时时间，单位为秒。默认值为60。</span></span><br><span class="line">connect_timeout=60</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置建立FTP数据连接的超时时间，单位为秒。默认值为120。</span></span><br><span class="line">data_connection_timeout=120</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置多长时间不对FTP服务器进行任何操作，则断开该FTP连接，单位为秒。默认值为300 。</span></span><br><span class="line">idle_session_timeout=300</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="日志文件设置"><a href="#日志文件设置" class="headerlink" title="日志文件设置"></a>日志文件设置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否启用上传/下载日志记录。如果启用，则上传与下载的信息将被完整纪录在xferlog_file 所定义的档案中。预设为开启</span></span><br><span class="line">xferlog_enable= YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置日志文件名和路径，默认值为/var/log/vsftpd.log。</span></span><br><span class="line">xferlog_file=/var/log/vsftpd.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果启用，则日志文件将会写成xferlog的标准格式，如同wu-ftpd 一般。默认值为关闭。</span></span><br><span class="line">xferlog_std_format=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果启用此选项，所有的FTP请求和响应都会被记录到日志中，默认日志文件在/var/log/vsftpd.log。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用此选项时，xferlog_std_format不能被激活。这个选项有助于调试。默认值为NO。</span></span><br><span class="line">log_ftp_protocol=YES|NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录日志</span></span><br><span class="line">dual_log_enable=YES</span><br><span class="line">vsftpd_log_file=/var/log/vsftpd.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志中的时间与系统时间保持一致</span></span><br><span class="line">use_localtime=YES</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="FTP的工作方式与端口设置"><a href="#FTP的工作方式与端口设置" class="headerlink" title="FTP的工作方式与端口设置"></a>FTP的工作方式与端口设置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">FTP有两种工作方式：PORT FTP（主动模式）和 PASV FTP（被动模式）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置FTP服务器建立连接所监听的端口，默认值为21。</span></span><br><span class="line">listen_port=21</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定FTP使用20端口进行数据传输，默认值为YES。</span></span><br><span class="line">connect_from_port_20=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置在PORT方式下，FTP数据连接使用的端口，默认值为20。</span></span><br><span class="line">ftp_data_port=20</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若设置为YES，则使用PASV工作模式；若设置为NO，则使用PORT模式。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认值为YES，即使用PASV工作模式。</span></span><br><span class="line">pasv_enable=YES/NO（YES）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在PASV工作模式下，数据连接可以使用的端口范围的最大端口，0 表示任意端口。默认值为0。</span></span><br><span class="line">pasv_max_port=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在PASV工作模式下，数据连接可以使用的端口范围的最小端口，0 表示任意端口。默认值为0。</span></span><br><span class="line">pasv_min_port=0</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="与连接相关的设置"><a href="#与连接相关的设置" class="headerlink" title="与连接相关的设置"></a>与连接相关的设置</h3></blockquote>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置vsftpd服务器是否以standalone模式运行。以standalone模式运行是一种较好的方式，此时listen必须设置为YES，此为默认值。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建议不要更改，有很多与服务器运行相关的配置命令，需要在此模式下才有效。若设置为NO，则vsftpd不是以独立的服务运行，要受到xinetd 服务的管控，功能上会受到限制。</span></span><br><span class="line">listen=YES/NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置vsftpd允许的最大连接数，默认值为0，表示不受限制。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若设置为100时，则同时允许有100个连接，超出的将被拒绝。只有在standalone模式运行才有效。</span></span><br><span class="line">max_clients=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置每个IP允许与FTP服务器同时建立连接的数目。默认值为0，表示不受限制。只有在standalone模式运行才有效。</span></span><br><span class="line">max_per_ip=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置FTP服务器在指定的IP地址上侦听用户的FTP请求。若不设置，则对服务器绑定的所有IP地址进行侦听。只有在standalone模式运行才有效。</span></span><br><span class="line">listen_address=IP地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置每个与FTP服务器的连接，是否以不同的进程表现出来。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认值为NO，此时使用ps aux |grep ftp只会有一个vsftpd的进程。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若设置为YES，则每个连接都会有一个vsftpd的进程。</span></span><br><span class="line">setproctitle_enable=YES/NO</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="虚拟用户相关配置"><a href="#虚拟用户相关配置" class="headerlink" title="虚拟用户相关配置"></a>虚拟用户相关配置</h3></blockquote>
<a href="/202207251638/" title="vsftpd虚拟用户配置过程参考">vsftpd虚拟用户配置过程参考</a>

<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用虚拟用户功能，必须允许本地用户登录</span></span><br><span class="line">local_enable=YES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用虚拟用户配置，所有非匿名用户登录将视为游客，将被映射为guest_username</span></span><br><span class="line">guest_enable=YES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户映射的本地用户</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主配置文件中必需有，否则报错</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">500 OOPS: vsftpd: cannot locate user specified <span class="keyword">in</span> <span class="string">&#x27;guest_username&#x27;</span>:ftp</span></span><br><span class="line">guest_username=virftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户独立配置文件目录</span></span><br><span class="line">user_config_dir=/etc/vsftpd/virtual_user_conf          </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户使用本地用户的权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认为NO，虚拟用户具有和匿名用户一样的权限</span></span><br><span class="line">virtual_use_local_privs=YES | NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户加载的pam模块，默认为`/etc/pam.d/vsftpd`</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pam_service_name=vsftpd_vu</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="虚拟用户配置文件"><a href="#虚拟用户配置文件" class="headerlink" title="虚拟用户配置文件"></a>虚拟用户配置文件</h3></blockquote>
<p>每个虚拟用户都需要一个单独的配置文件，虚拟用户配置文件在vsftpd配置中 <code>user_config_dir</code> 对应的目录(<code>/etc/vsftpd/virtual_user_conf</code>)下<br>文件名必须和用户名一样</p>
<figure class="highlight shell"><figcaption><span>user1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定虚拟用户根目录</span></span><br><span class="line">local_root=/home/ftpsite/user1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户是和本地用户有相同权限;NO：虚拟用户和匿名用户权限相同</span></span><br><span class="line">virtual_use_local_privs=YES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户对应的系统用户</span></span><br><span class="line">guest_username=virftp</span><br><span class="line"></span><br><span class="line">write_enable=YES</span><br><span class="line">lock_upload_files=NO</span><br><span class="line">anon_umask=022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">download_enable=NO</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">anon_upload_enable=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">anon_mkdir_write_enable=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">anon_other_write_enable=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chown_uploads=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chown_username=nono</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allow_anon_ssl=YES</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">force_anon_logins_ssl=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">force_anon_data_ssl=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cmds_allowed=CWD,LIST,MDTM,MKD,NLST,PASS,PASV,PORT,PWD,QUIT,RMD,RETR,SIZE,STOR,TYPE,USER,ACCT,APPE,CDUP,HELP,MODE,NOOP,REIN,STAT,STOU,STRU,SYST</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户将被锁定在自己的宿主目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chroot_local_user=YES</span>            </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftpd 虚拟用户配置说明</title>
    <url>/202207251638/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3></blockquote>
<ul>
<li>Centos 7</li>
<li>Vsftpd 3.0.2</li>
</ul>
<p>vsftpd虚拟用户通过映射系统用户权限的方式，使虚拟用户具有和本地系统用户一样的权限，或者灵活的控制虚拟用户的权限(不和本地用户权限相同，不能高于本地权限)，达到访问权限的灵活控制，同时防止大批vsftpd用户添加到系统账号库中，使系统用户管理变动臃肿。</p>
<span id="more"></span>

<h3 id="创建虚拟用户映射的系统用户"><a href="#创建虚拟用户映射的系统用户" class="headerlink" title="创建虚拟用户映射的系统用户"></a>创建虚拟用户映射的系统用户</h3><p>系统用户virtftp拥有对ftp的读写权限，假设ftp根目录为&#x2F;data&#x2F;vsftpd&#x2F;<br>创建ftp用户组和用户virtftp，ftp相关系统账号属于ftp组  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd ftp</span><br><span class="line">useradd -d /data/vsftpd -M -s /sbin/nologin -g ftp virtftp</span><br><span class="line">mkdir /data/vsftpd</span><br><span class="line">chown -R virtftp:ftp /data/vsftpd</span><br><span class="line">chmod -R 750 /data/vsftpd</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ftp根目录属于用户virtftp,用户组为ftp，设置权限750，使virtftp用户拥有读写权限</p>
</blockquote>
<h3 id="创建虚拟用户的口令库"><a href="#创建虚拟用户的口令库" class="headerlink" title="创建虚拟用户的口令库"></a>创建虚拟用户的口令库</h3><p>需要使用db_load命令根据原始口令文件(<code>/etc/vsftpd/passwd.txt</code>)生成db口令库文件，原始文件中奇数行为用户名，偶数行为密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db_load -T -t hash -f /etc/vsftpd/passwd.txt /etc/vsftpd/passwd.db</span><br><span class="line">chmod 600 /etc/vsftpd/passwd.db</span><br></pre></td></tr></table></figure>
<p>修改pam认证文件&#x2F;etc&#x2F;pam.d&#x2F;vsftpd,只保留以下2行<br>或者重新创建文件&#x2F;etc&#x2F;pam.d&#x2F;vsftpd_vu,并在<code>vsftpd.conf</code>中配置<code>pam_service_name=vsftpd_vu</code>)</p>
<figure class="highlight shell"><figcaption><span>vsftpd_vu</span></figcaption><table><tr><td class="code"><pre><span class="line">auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/passwd</span><br><span class="line">account required /lib64/security/pam_userdb.so db=/etc/vsftpd/passwd  </span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>db=/etc/vsftpd/passwd</code> 为<code>db_load</code>生产的文件，不要带后缀 <code>.db</code><br>如果认证发生错误，可检查日志文件：<code>/var/log/secure</code></p>
</blockquote>
<h3 id="配置-vsftpd-启用虚拟用户"><a href="#配置-vsftpd-启用虚拟用户" class="headerlink" title="配置 vsftpd 启用虚拟用户"></a>配置 vsftpd 启用虚拟用户</h3><p>修改vsftpd配置文件，默认为<code>/etc/vsftpd/vsftpd.conf</code> <a href="/202207231311/" title="vsftpd.conf常用配置文件说明">vsftpd.conf常用配置文件说明</a></p>
<figure class="highlight shell"><figcaption><span>vsftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用虚拟用户功能，必须允许本地用户</span></span><br><span class="line">local_enable=YES     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用虚拟用户配置，所有非匿名用户登录将视为游客，将被映射为guest_username</span>     </span><br><span class="line">guest_enable=YES     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主配置文件中必需有，否则报错</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">500 OOPS: vsftpd: cannot locate user specified <span class="keyword">in</span> <span class="string">&#x27;guest_username&#x27;</span>:ftp</span></span><br><span class="line">guest_username=virtftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户独立配置文件目录,每个虚拟用户有一个同名的配置文件于此目录下</span></span><br><span class="line">user_config_dir=/etc/vsftpd/virtual_user_conf          </span><br><span class="line">                        </span><br></pre></td></tr></table></figure>

<h3 id="配置虚拟用户配置文件"><a href="#配置虚拟用户配置文件" class="headerlink" title="配置虚拟用户配置文件"></a>配置虚拟用户配置文件</h3><p>虚拟用户配置文件位于 <code>vsftpd.conf</code> 配置 <code>user_config_dir</code> 指定的目录下，每个用户一个配置文件，配置文件和用户名同名<br>用户名，配置文件名，必须和口令文件中的用户名保持一致  </p>
<figure class="highlight shell"><figcaption><span>user1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定虚拟用户根目录</span></span><br><span class="line">local_root=/home/ftpsite/user1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户是和本地用户有相同权限;NO：虚拟用户和匿名用户权限相同</span>        </span><br><span class="line">virtual_use_local_privs=YES         </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户对应的系统用户</span></span><br><span class="line">guest_username=virtftp   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟用户将被锁定在自己的宿主目录</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">chroot_local_user=YES</span>    </span><br><span class="line">         </span><br><span class="line">write_enable=YES                               </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">lock_upload_files=NO</span></span><br><span class="line">anon_umask=022</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">download_enable=NO</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">anon_upload_enable=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">anon_mkdir_write_enable=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">anon_other_write_enable=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">chown_uploads=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">chown_username=nono</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">allow_anon_ssl=YES</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">force_anon_logins_ssl=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">force_anon_data_ssl=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">cmds_allowed=CWD,LIST,MDTM,MKD,NLST,PASS,PASV,PORT,PWD,QUIT,RMD,RETR,SIZE,STOR,TYPE,USER,ACCT,APPE,CDUP,HELP,MODE,NOOP,REIN,STAT,STOU,STRU,SYST</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="常用配置说明"><a href="#常用配置说明" class="headerlink" title="常用配置说明"></a>常用配置说明</h3><p>virtual_use_local_privs参数说明<br>当<code>virtual_use_local_privs=YES</code>时，虚拟用户和本地用户有相同的权限；<br>当<code>virtual_use_local_privs=NO</code> 时，虚拟用户和匿名用户有相同的权限，默认是NO。<br>当<code>virtual_use_local_privs=YES</code>，<code>write_enable=YES</code>时，虚拟用户具有写权限（上传、下载、删除、重命名）。<br>当<code>virtual_use_local_privs=NO</code>，<code>write_enable=YES</code>，<code>anon_world_readable_only=YES</code>，<code>anon_upload_enable=YES</code> 时，虚拟用户不能浏览目录，只能上传文件，无其他权限。<br>当<code>virtual_use_local_privs=NO</code>，<code>write_enable=YES</code>，<code>anon_world_readable_only=NO</code>，<code>anon_upload_enable=NO</code> 时，虚拟用户只能下载文件，无其他权限。<br>当<code>virtual_use_local_privs=NO</code>，<code>write_enable=YES</code>，<code>anon_world_readable_only=NO</code>，<code>anon_upload_enable=YES</code> 时，虚拟用户只能上传和下载文件，无其他权限。<br>当<code>virtual_use_local_privs=NO</code>，<code>write_enable=YES</code>，<code>anon_world_readable_only=NO</code>，<code>anon_mkdir_write_enable=YES</code> 时，虚拟用户只能下载文件和创建文件夹，无其他权限。<br>当<code>virtual_use_local_privs=NO</code>，<code>write_enable=YES</code>，<code>anon_world_readable_only=NO</code>，<code>anon_other_write_enable=YES</code> 时，虚拟用户只能下载、删除和重命名文件，无其他权限。  </p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title>网宿云cdn 预热脚本</title>
    <url>/202207251026/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>将源站的内容主动预取到 CDN 节点，用户首次访问可直接命中缓存，即提升首次访问速度，又能有效缓解源站压力。</p>
<ul>
<li>数据格式：请求和响应都支持 json&#x2F;xml，xml 的参数与 json 的参数基本一致，json 的参数是驼峰分隔，xml 的参数是“-”分隔，详见示例。</li>
<li>限制说明：每个账号的预取并发是 10，调高并发会增加回源的压力，请联系技术支持人员评估。</li>
</ul>
<span id="more"></span>

<h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">类型</th>
<th align="center">是否必填</th>
<th align="left">说明</th>
<th align="left">内部备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">urls</td>
<td align="center">Array</td>
<td align="center">是</td>
<td align="left">要预取到 CDN 节点的 url 集合，url 格式说明：<br/>1）URL 必须以’http:&#x2F;&#x2F;‘ 或 ‘https:&#x2F;&#x2F;‘ 开头，输入示例：<a href="http://www.a.com/image/test.png%E3%80%82">http://www.a.com/image/test.png。</a> <br/>2）每个 url 最大长度 2000 字符。<br/>3）每个 url 所在的域名必须是在我司加速的域名且有预取权限。<br/>4）url 中如果包含中文字符，则提交的 url 需要是中文转义后的url，采用 utf-8 方式转义。<br/>5）每日不超过 20000 条，不超过 200G 文件大小（账号粒度可调，联系技术支持人员调整）。<br/>6）每次接口调用 url 的总数不超过 400 条。</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">isRange</td>
<td align="center">Int</td>
<td align="center">否</td>
<td align="left">是否需要预取 range 段。<br/>1）默认为 0，表示预取完整的文件；<br/>2）1 表示预取文件 0~512KB 的 range 段（账号粒度可调，联系技术支持人员调整）。</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">aliasDomain</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="left">账号开启 ts 解析<br/>有值的话，m3u8 和生成的 ts 文件需要同时生成一份带别名的url</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">parentDir</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="left">一级目录，该参数和 aliasDomain 一起使用<br/>如果有值的话，是做为别名的一级目录</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="响应参数"><a href="#响应参数" class="headerlink" title="响应参数"></a>响应参数</h3><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x-cnc-request-id</td>
<td align="center">String</td>
<td align="left">本次请求的唯一标识,当接口调用异常时，可将 requestID 提供给网宿技术支持，便于排查接口的访问日志。</td>
</tr>
<tr>
<td align="center">Code</td>
<td align="center">Int</td>
<td align="left">表示任务创建结果的状态码，1 表示任务提交成功，0 表示任务提交失败</td>
</tr>
<tr>
<td align="center">Message</td>
<td align="center">String</td>
<td align="left">表示任务提交后，系统的响应消息</td>
</tr>
<tr>
<td align="center">itemId</td>
<td align="center">String</td>
<td align="left">调用一次接口并提交任务成功后，将返回一个 itemId，是当次提交任务的唯一标识，通过 itemId 可批量查询任务的状态（成功&#x2F;失败）。</td>
</tr>
</tbody></table>
<h3 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">username=&quot;username&quot;</span><br><span class="line">apiKey=&quot;apiKey&quot;</span><br><span class="line">date=`env LANG=&quot;en_US.UTF-8&quot; date -u &quot;+%a, %d %b %Y %H:%M:%S GMT&quot;`</span><br><span class="line">password=`echo -en &quot;$date&quot; | openssl dgst -sha1 -hmac $apiKey -binary | </span><br><span class="line">openssl enc -base64`</span><br><span class="line">curl -i --url &quot;https://open.chinanetcenter.com/ccm/fetch/ItemIdReceiver&quot; -X &quot;POST&quot; -u &quot;$username:$password&quot; \</span><br><span class="line"> -H &quot;Date:$date&quot; -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;</span><br><span class="line"> &quot;urls&quot;: [</span><br><span class="line"> &quot;http://www.testb.com/test/test1.txt&quot;,</span><br><span class="line"> &quot;http://www.testb.com/test/test2.txt&quot;</span><br><span class="line"> ],</span><br><span class="line">&quot;isRange&quot;:0</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://wcs.chinanetcenter.com/document/Tools/GenerateUploadToken"><code>apiKey</code> 生成链接</a></p>
</blockquote>
<p>正确的响应示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Fri, 26 Oct 2012 06:33:26 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8 x-cnc-request-id:&#123;id string auto generated by cloud server&#125;</span><br><span class="line">&#123;</span><br><span class="line"> &quot;Code&quot;: 1,</span><br><span class="line"> &quot;Message&quot;: &quot;success&quot;,</span><br><span class="line"> &quot;itemId&quot;: &quot;a2cfcc6fe79c4a8abcab806578f9bada&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://wcs.chinanetcenter.com/document/Tools/GenerateUploadToken">官网说明</a><br><a href="https://s.csms.tech/file/01%E6%8E%A8%E8%8D%90-%E9%A2%84%E5%8F%96%E6%96%87%E4%BB%B6.pdf">网宿cdn预热完整文档说明</a></p>
]]></content>
      <categories>
        <category>云平台</category>
        <category>网宿</category>
      </categories>
      <tags>
        <tag>云平台</tag>
        <tag>网宿</tag>
      </tags>
  </entry>
  <entry>
    <title>网宿云存储python sdk常用操作</title>
    <url>/f63bf868/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><p>Centos7</p>
<p>Python3</p>
<p>wcs-python3-sdk (5.0.35)</p>
<p># 网宿云python sdk, <code>pip3 install wcs-python3-sdk</code>， 安装后包含cli工具<code>wcscmd</code></p>
<h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wcscmd --configure [--config=FILE] </span><br></pre></td></tr></table></figure>

<p><code>--config=FILE  </code>配置文件存储路径，默认<code>~/.wcscfg</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[参考链接](https://github.com/Wangsu-Cloud-Storage/wcs-python-sdk)">[1]</span></a></sup></p>
<h3 id="wcscmd常用操作"><a href="#wcscmd常用操作" class="headerlink" title="wcscmd常用操作"></a>wcscmd常用操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wcscmd listbucket </span><br><span class="line">wcscmd stat wcs://BUCKET/OBJECT  \# 查询文件信息</span><br><span class="line">wcscmd deletePrefix wcs://BUCKET PREFIX  \# 根据前缀（文件路径，必须从头开始匹配，不需要最前面的/）删除目录或文件</span><br><span class="line">wcscmd put wcs://BUCKET/file file</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="python3-sdk操作"><a href="#python3-sdk操作" class="headerlink" title="python3 sdk操作"></a>python3 sdk操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wcs.commons.config <span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> wcs.services.client <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line">config_file = <span class="string">&quot;/root/.wcscfg&quot;</span></span><br><span class="line">cfg = Config(config_file)</span><br><span class="line">cli = Client(cfg)</span><br><span class="line">bucketName = <span class="string">&quot;TestBucket&quot;</span></span><br><span class="line">buckList = cli.bucket_list(bucketName, marker=<span class="string">&#x27;&#x27;</span>)    <span class="comment"># 列出bucket中的文件列表，每次最多获取1000个，第一页 `marker=&#x27;&#x27;`, 请求第一页的响应中marker的值为新的页的marker，可通过新的marker继续发起请求</span></span><br></pre></td></tr></table></figure>

<h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/Wangsu-Cloud-Storage/wcs-python-sdk">参考链接</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>云平台</category>
        <category>网宿</category>
      </categories>
      <tags>
        <tag>云平台</tag>
        <tag>网宿</tag>
      </tags>
  </entry>
  <entry>
    <title>windows远程登录失败</title>
    <url>/f5e030ac/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>远程登录windows失败，报错:</p>
<blockquote>
<p>由于没有远程桌面授权服务器可以提供许可证，远程会话连接已断开，请跟服务器管理员联系</p>
</blockquote>
<p><img src="https://i.csms.tech/img.png"></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li>打开cmd，执行以下命令远程登录无法登录的Windows主机<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mstsc /v:<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span> /admin</span><br></pre></td></tr></table></figure></li>
<li>打开注册表</li>
</ol>
<p><img src="https://i.csms.tech/img_1.png"><br>3. 找到路径： HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\RCM\GracePeriod.如果超过120天后RCM下面会有一个GracePeriod,先备份这项注册表，再删除除了默认的的注册表项。</p>
<ol start="4">
<li>重启电脑后生效.</li>
</ol>
]]></content>
      <categories>
        <category>Window</category>
        <category>常见错误</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
</search>
