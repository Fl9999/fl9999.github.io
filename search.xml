<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django+uwsgi+nginx配置示例</title>
    <url>/7d1a39d2/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>centos 7</li>
<li>Python 3.10</li>
<li>Django 4.0</li>
<li>uwsgi 2.0.20</li>
<li>nginx 1.20.1</li>
<li>venv<blockquote>
<p>示例中虚拟环境位于 <code>/opt/vb/</code>, Django工程目录位于 <code>/opt/vb/vb/</code> , 工程名称为vb</p>
</blockquote>
</li>
</ul>
<h3 id="uwsgi配置文件-uwsgi-ini-配置示例"><a href="#uwsgi配置文件-uwsgi-ini-配置示例" class="headerlink" title="uwsgi配置文件 (uwsgi.ini) 配置示例"></a>uwsgi配置文件 (uwsgi.ini) 配置示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket = 127.0.0.1:8081</span><br><span class="line">chdir = /opt/vb/vb</span><br><span class="line">wsgi-file = ./vb/wsgi.py</span><br><span class="line">master = true         //主进程</span><br><span class="line">vhost = true          //多站模式</span><br><span class="line">no-site = true        //多站模式时不设置入口模块和文件</span><br><span class="line">workers = 2           //子进程数</span><br><span class="line">reload-mercy = 10     </span><br><span class="line">vacuum = true         //退出、重启时清理文件</span><br><span class="line">max-requests = 1000   </span><br><span class="line">limit-as = 512</span><br><span class="line">buffer-size = 30000</span><br><span class="line">pidfile = uwsgi-8081.pid</span><br><span class="line">daemonize = uwsgi-8081.log</span><br><span class="line">pythonpath = /opt/vb/env/lib/python3.10/site-packages/</span><br></pre></td></tr></table></figure>

<h3 id="nginx-配置文件示例"><a href="#nginx-配置文件示例" class="headerlink" title="nginx 配置文件示例"></a>nginx 配置文件示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       server_name csms.tech;</span><br><span class="line"></span><br><span class="line">        location / &#123;            </span><br><span class="line">            include  uwsgi_params;</span><br><span class="line">            uwsgi_pass  127.0.0.1:8081;</span><br><span class="line">            uwsgi_param UWSGI_SCRIPT vb.wsgi;</span><br><span class="line">            uwsgi_param UWSGI_CHDIR /opt/vb/vb;       </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        location /static/ &#123;</span><br><span class="line">                alias /opt/vb/vb/staticCollects/;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log log/uwsgi.access.log main;</span><br><span class="line">        error_log log/uwsgi.error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="/d5da7d5e/" title="Django常见错误">Django常见错误</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>Django</tag>
        <tag>Uwsgi</tag>
      </tags>
  </entry>
  <entry>
    <title>Django常见错误</title>
    <url>/d5da7d5e/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><hr>
<h4 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h4><ul>
<li>centos7</li>
<li>python3.6</li>
</ul>
<h4 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h4><blockquote>
<p>django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.</p>
</blockquote>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>

<p>编辑文件<code>./python36/lib/python3.6/site-packages/django/db/backends/mysql/__init__.py</code>, 输入以下内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql </span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="环境信息-1"><a href="#环境信息-1" class="headerlink" title="环境信息"></a>环境信息</h4><ul>
<li>centos7</li>
<li>python3.6</li>
</ul>
<h4 id="报错信息-1"><a href="#报错信息-1" class="headerlink" title="报错信息"></a>报错信息</h4><p><code>django-admin runserver</code></p>
<blockquote>
<p>django.core.exceptions.ImproperlyConfigured: Requested setting DEBUG, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings</p>
</blockquote>
<h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>使用命令<br><code>python3 manage.py runserver</code></p>
<hr>
<h4 id="环境信息-2"><a href="#环境信息-2" class="headerlink" title="环境信息"></a>环境信息</h4><ul>
<li>centos7</li>
<li>python3.10</li>
<li>uwsgi 2.0.20</li>
<li>venv</li>
</ul>
<h4 id="报错信息-2"><a href="#报错信息-2" class="headerlink" title="报错信息"></a>报错信息</h4><p>uwsgi 启动后报错(查看uwsgi日志输出)</p>
<blockquote>
<p>from django.core.wsgi import get_wsgi_application<br>ModuleNotFoundError: No module named ‘django’</p>
</blockquote>
<h4 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h4><p>uwsgi配置文件(<code>uwsgi.ini</code> )中添加python路径, 在配置文件中添加如下配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pythonpath = /env/lib/python3<span class="number">.10</span>/site-packages/</span><br></pre></td></tr></table></figure>

<p>完整uwsgi配置文件示例(使用python venv模块创建虚拟环境情况下)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket = 127.0.0.1:8081</span><br><span class="line">chdir = /opt/vb/vb</span><br><span class="line">wsgi-file = ./vb/wsgi.py</span><br><span class="line">master = true         //主进程</span><br><span class="line">vhost = true          //多站模式</span><br><span class="line">no-site = true        //多站模式时不设置入口模块和文件</span><br><span class="line">workers = 2           //子进程数</span><br><span class="line">reload-mercy = 10     </span><br><span class="line">vacuum = true         //退出、重启时清理文件</span><br><span class="line">max-requests = 1000   </span><br><span class="line">limit-as = 512</span><br><span class="line">buffer-size = 30000</span><br><span class="line">pidfile = uwsgi-8081.pid</span><br><span class="line">daemonize = uwsgi-8081.log</span><br><span class="line">pythonpath = /opt/vb/env/lib/python3.10/site-packages/</span><br></pre></td></tr></table></figure>

<h4 id="报错信息-3"><a href="#报错信息-3" class="headerlink" title="报错信息"></a>报错信息</h4><p>uwsgi 启动后报错(查看uwsgi日志输出)</p>
<blockquote>
<p>unable to load app 0 (mountpoint&#x3D;’|’) (callable not found or import error)<br>— no python application found, check your startup logs for errors —</p>
</blockquote>
<h4 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h4><p>uwsgi配置文件(<code>uwsgi.ini</code> )中添加<code>wsgi.py</code>路径, 在配置文件中添加如下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsgi-file = ./vb/wsgi.py</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 模板中循环嵌套</title>
    <url>/c97b0902/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>模板中需要循环中循环，<code>&#123;% for i in alist %&#125;</code>,假如i是个元组或列表，需要继续循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> alist %&#125;</span><br><span class="line">	&#123;% <span class="keyword">with</span> temp=I %&#125;</span><br><span class="line">		&#123;% <span class="keyword">for</span> k <span class="keyword">in</span> temp %&#125;</span><br><span class="line">		    …</span><br><span class="line">		&#123;% endfor %&#125;</span><br><span class="line">	&#123;% endwith %&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>
<p>或使用如下方式，data &#x3D; [[1,2],[3,4]]：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> l <span class="keyword">in</span> data%&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% <span class="keyword">for</span> temp <span class="keyword">in</span> l % &#125;</span><br><span class="line">		&#123;% <span class="keyword">if</span> forloop.first % &#125;</span><br><span class="line">			<span class="string">&#x27;&#123;&#123;temp&#125;&#125;&#x27;</span>,</span><br><span class="line">		&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">			&#123;&#123;temp&#125;&#125;</span><br><span class="line">		&#123;% endif %&#125;</span><br><span class="line">	&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>ForeignKey</tag>
      </tags>
  </entry>
  <entry>
    <title>Django model外键的反向引用</title>
    <url>/dcca5850/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">	question_text=models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">	pub_date=models.DateTimeField(<span class="string">&#x27;datepublished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	def__str__(self):</span><br><span class="line">		returnself.question_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">	question=models.ForeignKey(Question,on_delete=models.CASCADE)</span><br><span class="line">	choice_text=models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">	votes=models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	def__str__(self):</span><br><span class="line">		returnself.choice_text</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上例中，Choice引用了Question作为外键，在模板中通过Question对象获取所有引用了Question对象的Choice对象，可以使用以下方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">	&lt;li&gt;&#123;&#123;choice.choice_text&#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>

<p>使用question.choice_set.all的方式获取所有引用question对象的Choice对象实例</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
        <category>model</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>ForeignKey</tag>
        <tag>Model</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo markdown常用语法</title>
    <url>/2215beeb/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图片名称](https://i.csms.tech/img_10.png [title])</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_10.png" alt="图片名称"></p>
<h3 id="url-链接"><a href="#url-链接" class="headerlink" title="url 链接"></a>url 链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[这是一个链接](https://csms.tech [title])</span><br></pre></td></tr></table></figure>
<p><a href="https://csms.tech/">这是一个链接</a></p>
<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;https://csms.tech&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://csms.tech/">https://csms.tech</a><br><a href="https://csms.tech/">https://csms.tech</a></p>
<h3 id="链接到本站其他文章的指定标题"><a href="#链接到本站其他文章的指定标题" class="headerlink" title="链接到本站其他文章的指定标题"></a>链接到本站其他文章的指定标题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[名称](https://csms.tech&#123;% post_path &#x27;文章文件名&#x27; %&#125;#id)</span><br></pre></td></tr></table></figure>
<p><code>&#123;% post_path 'Hexo-markdown-grammar' %&#125;</code> 的值为： <code>/2022/07/Hexo-markdown-grammar/</code><br><a href="https://csms.tech/2215beeb/#图片链接">跳转</a></p>
<h3 id="链接到标题之外的锚点"><a href="#链接到标题之外的锚点" class="headerlink" title="链接到标题之外的锚点"></a>链接到标题之外的锚点</h3><p>可以使用html标签先创建对应锚点，如<code>&lt;div id=&#39;1&#39;&gt;这是一个文章锚点&lt;/div&gt;</code></p>
<div id='1'>这是一个文章锚点</div>

<p><a href="#1">跳转到id&#x3D;1的锚点</a></p>
<h3 id="站内文章链接"><a href="#站内文章链接" class="headerlink" title="站内文章链接"></a>站内文章链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link &#x27;文章文件名&#x27; [&#x27;显示的名称, 默认为文章title&#x27;] %&#125;</span><br></pre></td></tr></table></figure>
<p>本篇文章 <a href="/2215beeb/" title="hexo markdown常用语法">hexo markdown常用语法</a></p>
<h3 id="note标签"><a href="#note标签" class="headerlink" title="note标签"></a>note标签</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;% note class %&#125;</span><br><span class="line">文本内容 (支持行内标签)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>支持的class包括：<code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code></p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight shell"><figcaption><span>代码块示例</span><a href="https://csms.tech">主页</a></figcaption><table><tr><td class="code"><pre><span class="line">```shell name url urlshowname</span><br><span class="line">log-bin=binlog</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/">Hexo Markdown 简明语法手册</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql从库提升为主库，原来的其他从库成为新的主库的从库</title>
    <url>/b12589a5/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Mysql 5.7</li>
</ul>
<h3 id="场景说明"><a href="#场景说明" class="headerlink" title="场景说明"></a>场景说明</h3><p>Mysql 一主多从的情况下，主库宕机（或其他无法使用的情况），将其中一台从库提升为主库，同时将原来其他的从库配置为新的主库的从库。  </p>
<div class="note primary"><p>主从恢复正常之前，数据库不应该有新的数据写入</p>
</div>

<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="确保所有从库已经执行了relay-log中的全部更新"><a href="#确保所有从库已经执行了relay-log中的全部更新" class="headerlink" title="确保所有从库已经执行了relay log中的全部更新"></a>确保所有从库已经执行了relay log中的全部更新</h4><p>登录mysql从库，在每个从库上，执行<code>stop slave io_thread</code>,停止IO线程, 通过以下2个命令之一检查从库relay log的执行情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show processlist;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_6.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_7.png">  </p>
<p>当输出中<code>Slave_SQL_Running_State</code> 为 <code>Slave has read all relay log; waiting for more updates</code>，表示更新都执行完毕。  </p>
<blockquote>
<ul>
<li>正常情况下，此时在每个从库上面查看slave状态(<code>show slave status\G</code>), 每个从库读取的主库的<code>Master_Log_File</code>和<code>Read_Master_Log_Pos</code>都应该是一样的，意味着所有的从库都已经更新到了主库宕机时的状态。此种情况下，可随便选择从库作为新的主库。<br><img src="https://i.csms.tech/img_8.png"></li>
<li>如果，从库上面查看slave状态，各个从库读取的主库的<code>Master_Log_File</code>和<code>Read_Master_Log_Pos</code>不一致，说明主库宕机之前各个从库和主库的主从延迟情况可能不一，导致各个从库的状态不一致，此种情况下，从数据完整性的角度考虑，应该选择position最大的一个从库，作为新选定的主库。对其他从库，应该通过从binlog中读取缺失的数据，补足数据。或者直接通过<a href="/94ee2c23/" title="备份恢复">备份恢复</a>的方式，和新选定的主库，重新建立主从连接。</li>
</ul>
</blockquote>
<h4 id="更新新的主库的配置"><a href="#更新新的主库的配置" class="headerlink" title="更新新的主库的配置"></a>更新新的主库的配置</h4><p>在新选定的主库上，配置文件(默认<code>/etc/my.cnf</code>)中开启binlog，如已配置，跳过</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">log-bin=mysql-bin</span><br></pre></td></tr></table></figure>
<p>新选定的主库上，如果配置了readonly，在配置文件(默认<code>/etc/my.cnf</code>)中取消readonly配置</p>
<figure class="highlight shell"><figcaption><span>/etc/my.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line">read_only=0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更改mysql配置文件后，重启mysql生效</p>
</blockquote>
<p>在新选定的主库上，执行以下命令，重置从库配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;  </span><br><span class="line">reset master;</span><br><span class="line">reset slave all;  </span><br></pre></td></tr></table></figure>
<p>在新选定的主库上，执行以下命令，创建具有同步权限的账号，如果已存在，跳过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to &#x27;repl&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>在新选定的主库上，执行以下命令，查看当前主库的master位置信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show master status\G</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_9.png"></p>
<blockquote>
<p>在主从重新建立之前，不应该有新的数据写入数据库，在此前提之下，多次查看master status，显示的<code>File</code>和<code>Position</code> 应该是确定不变的值，后续可根据此值，让其他从库和新选定的主库建立主从连接。  </p>
</blockquote>
<h4 id="建立新的主从"><a href="#建立新的主从" class="headerlink" title="建立新的主从"></a>建立新的主从</h4><p>在其他从库上，执行以下命令，和新选定的主库，建立主从连接，其中需要的<code>master_log_file</code>和<code>master_log_pos</code>从<a href="#%E6%9B%B4%E6%96%B0%E6%96%B0%E7%9A%84%E4%B8%BB%E5%BA%93%E7%9A%84%E9%85%8D%E7%BD%AE">上一步</a>中获得。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;123456&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000982&#x27;,master_log_pos=638932979;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>

<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab安装配置</title>
    <url>/8db58ebc/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://about.gitlab.com/install/#centos-7">安装步骤</a></p>
<blockquote>
<p>安装完成之后使用gitlab-ctl reconfigure启动服务<br>访问页面，默认使用root登录<br>每次重新更改配置，都需要使用reconfigure重新启动</p>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>启动所有 gitlab 组件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl start </span><br></pre></td></tr></table></figure>
<p>停止所有 gitlab 组件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl stop </span><br></pre></td></tr></table></figure>
<p>重启所有 gitlab 组件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl restart  </span><br></pre></td></tr></table></figure>
<p>查看服务状态；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl status    </span><br></pre></td></tr></table></figure>
<p>启动服务；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure    </span><br></pre></td></tr></table></figure>
<p>修改默认的配置文件；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/gitlab/gitlab.rb </span><br></pre></td></tr></table></figure>
<p>检查gitlab；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:check SANITIZE=true --trace  </span><br></pre></td></tr></table></figure>
<p>查看日志；  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl tail</span><br></pre></td></tr></table></figure>

<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="初始化空目录-通过git-init命令把这个目录变成Git可以管理的仓库"><a href="#初始化空目录-通过git-init命令把这个目录变成Git可以管理的仓库" class="headerlink" title="初始化空目录,通过git init命令把这个目录变成Git可以管理的仓库"></a>初始化空目录,通过<code>git init</code>命令把这个目录变成Git可以管理的仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<h4 id="已有文件的目录创建为git仓库"><a href="#已有文件的目录创建为git仓库" class="headerlink" title="已有文件的目录创建为git仓库"></a>已有文件的目录创建为git仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init </span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;XX&quot;</span><br><span class="line">git remote add origin https://a.com/p.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h4 id="更改git仓库地址"><a href="#更改git仓库地址" class="headerlink" title="更改git仓库地址"></a>更改git仓库地址</h4><ol>
<li>方法1  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://a.com/p.git</span><br></pre></td></tr></table></figure></li>
<li>方法2<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin https://a.com/p.git</span><br></pre></td></tr></table></figure></li>
<li>方法3<br>编辑<code>.git/config</code>文件, 修改 [remote “origin”]下面的url即可<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = true</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = https://a.com/p.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;main&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/main</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/master</span><br><span class="line">[pull]</span><br><span class="line">        rebase = true</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><p>查看当前分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure>
<p>查看所有分支，结果中<code>*</code>表示当前分支  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p>切换到指定分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b origin/master-dev</span><br></pre></td></tr></table></figure>
<p>切换主分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<h4 id="撤销当前工作区中对指定文件的修改"><a href="#撤销当前工作区中对指定文件的修改" class="headerlink" title="撤销当前工作区中对指定文件的修改"></a>撤销当前工作区中对指定文件的修改</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout FILE</span><br><span class="line">git checkout .</span><br></pre></td></tr></table></figure>

<h4 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h4><p>显示当前分支的commit历史</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
<p>查看git命令记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog --date=iso</span><br></pre></td></tr></table></figure>

<p>查看指定commit的代码变化记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git show 048bc53e65dda5</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_2.png"></p>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><blockquote>
<p>Git fatal: Unable to find remote helper for ‘https’</p>
</blockquote>
<p><strong>问题原因</strong>: 未安装curl-devel，安装curl-devel后重新编译<br><strong>解决方法</strong>：安装curl-devel后重新编译</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 添加 canvas-nest 特效</title>
    <url>/b12589273/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><p>os: linux 3.10.0-1160.62.1.el7.x86_64 CentOS Linux 7 (Core)<br>hexo: 6.2.0<br>hexo-cli: 4.3.0<br>node: 16.16.0</p>
<h3 id="安装canvas-nest"><a href="#安装canvas-nest" class="headerlink" title="安装canvas-nest"></a>安装canvas-nest</h3><p>参考 <a href="https://github.com/hustcc/canvas-nest.js#install">canva-nest官网</a> 安装</p>
<figure class="highlight shell"><figcaption><span>use npm</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install --save canvas-nest.js</span><br></pre></td></tr></table></figure>
<div class="note info"><p>可选操作，主要是为了生成<code>canvas-nest.js</code>文件</p>
</div>

<h3 id="配置Next"><a href="#配置Next" class="headerlink" title="配置Next"></a>配置Next</h3><p>编辑next配置文件，新增以下配置</p>
<figure class="highlight shell"><figcaption><span>_config.next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">background settings</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add canvas-nest effect</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest: </span><br><span class="line">  enable: true </span><br><span class="line">  url: https://s.csms.tech/js/canvas-nest.js</span><br><span class="line">  color: 0,0,255</span><br><span class="line">  opacity: 0.7</span><br><span class="line">  zIndex: -2</span><br><span class="line">  count: 99</span><br></pre></td></tr></table></figure>

<h3 id="引入canvas-nest-js"><a href="#引入canvas-nest-js" class="headerlink" title="引入canvas-nest.js"></a>引入canvas-nest.js</h3><p>编辑文件 <code>themes/next/layout/_layout.njk</code>, 在<code>&lt;/body&gt;</code> 之前新增以下内容</p>
<figure class="highlight shell"><figcaption><span>themes/next/layout/_layout.njk</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest.enable %&#125;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; color=&quot;&#123;&#123; theme.canvas_nest.color &#125;&#125;&quot; opacity=&#x27;&#123;&#123; theme.canvas_nest.opacity &#125;&#125;&#x27; zIndex=&quot;&#123;&#123; theme.canvas_nest.zIndex &#125;&#125;&quot; count=&quot;&#123;&#123; theme.canvas_nest.count &#125;&#125;&quot; src=&quot;&#123;&#123; theme.canvas_nest.url &#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>canvas-nest</tag>
      </tags>
  </entry>
  <entry>
    <title>inotify安装使用</title>
    <url>/512c7c5/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p>使用系统软件包管理器安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y inotify-tools</span><br></pre></td></tr></table></figure>
<p>安装后包含2个命令： <code>inotifywait </code>, <code>inotifywatch</code>,较为常用的命令是<code>inotifywait </code></p>
</li>
<li><p>编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz</span><br><span class="line">tar zxvf inotify-tools-3.14.tar.gz  </span><br><span class="line">cd inotify-tools-3.14</span><br><span class="line">./configure --prefix=/usr/local/inotify </span><br><span class="line">make</span><br><span class="line">make install  </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="inotifywait参数说明"><a href="#inotifywait参数说明" class="headerlink" title="inotifywait参数说明"></a>inotifywait参数说明</h3><p>语法：<br>inotifywait [-hcmrq] [-e modify,access…] [-t ] [–format ] [–timefmt ] [ … ]</p>
<blockquote>
<p>@<br>排除不需要监视的文件，可以是相对路径，也可以是绝对路径。<br>–-fromfile<br>从文件读取需要监视的文件或排除的文件，一个文件一行，排除的文件以@开头。<br>-m, –-monitor<br>接收到一个事情而不退出，无限期地执行。默认的行为是接收到一个事情后立即退出。<br>-d, –-daemon<br>跟–monitor一样，除了是在后台运行，需要指定-–outfile把事情输出到一个文件。也意味着使用了–-syslog。<br>-o, –-outfile<br>输出事情到一个文件而不是标准输出。<br>-s, –-syslog<br>输出错误信息到系统日志<br>-r, –-recursive<br>监视一个目录下的所有子目录。<br>-q, –-quiet<br>指定一次，不会输出详细信息，指定二次，除了致命错误，不会输出任何信息。<br>–-exclude<br>正则匹配需要排除的文件，大小写敏感。<br>–-excludei<br>正则匹配需要排除的文件，忽略大小写。<br>-t , –-timeout<br>设置超时时间，如果为0，则无限期地执行下去。<br>-e , –-event<br>指定监视的事件。<br>-c, –-csv<br>输出csv格式。<br>–-timefmt<br>指定时间格式，用于–-format选项中的%T格式。<br>–-format<br>指定输出格式。</p>
<blockquote>
<p>%w 表示发生事件的目录<br>%f 表示发生事件的文件<br>%e 表示发生的事件<br>%Xe 事件以“X”分隔<br>%T 使用由–-timefmt定义的时间格式</p>
</blockquote>
</blockquote>
<h3 id="可监听事件列表"><a href="#可监听事件列表" class="headerlink" title="可监听事件列表"></a>可监听事件列表</h3><p>access	文件读取<br>modify	文件更改。<br>attrib	文件属性更改，如权限，时间戳等。<br>close_write	以可写模式打开的文件被关闭，不代表此文件一定已经写入数据。<br>close_nowrite	以只读模式打开的文件被关闭。<br>close	文件被关闭，不管它是如何打开的。<br>open	文件打开。<br>moved_to	一个文件或目录移动到监听的目录，即使是在同一目录内移动，此事件也触发。<br>moved_from	一个文件或目录移出监听的目录，即使是在同一目录内移动，此事件也触发。<br>move	包括moved_to和 moved_from<br>move_self	文件或目录被移除，之后不再监听此文件或目录。<br>create	文件或目录创建<br>delete	文件或目录删除<br>delete_self	文件或目录移除，之后不再监听此文件或目录<br>unmount	文件系统取消挂载，之后不再监听此文件系统。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">inotifywait -m -r -e modify /source/ | while read dir action filename</span><br><span class="line">do </span><br><span class="line">  echo $&#123;dir&#125;</span><br><span class="line">  echo $&#123;action&#125;</span><br><span class="line">  echo $&#123;filename&#125;</span><br><span class="line">  rsync -a -u /source/ /dest/</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
        <category>inotify</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>inotify</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 主从恢复</title>
    <url>/94ee2c23/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>Centos 7</li>
<li>Mysql 5.7</li>
<li>Percona-XtraBackup-2.4.4</li>
</ul>
<h3 id="恢复方法1：mysqldump主库锁表备份恢复"><a href="#恢复方法1：mysqldump主库锁表备份恢复" class="headerlink" title="恢复方法1：mysqldump主库锁表备份恢复"></a>恢复方法1：mysqldump主库锁表备份恢复</h3><p><strong>前提</strong> ： 接受主库锁表操作，备份恢复过程中主库无法写入数据</p>
<h4 id="从库停止slave进程"><a href="#从库停止slave进程" class="headerlink" title="从库停止slave进程"></a>从库停止slave进程</h4><p>登录mysql从库，执行以下命令，停止slave进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure>

<h4 id="主库锁表"><a href="#主库锁表" class="headerlink" title="主库锁表"></a>主库锁表</h4><p>登录mysql主库，执行以下命令，对主库进行锁表操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FLUSH TABLES WITH READ LOCK;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行锁表操作后，不要退出mysql命令行，否则会自动解锁。</p>
</blockquote>
<p>执行以下命令，查看主库锁表后的binlog位置信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SHOW MASTER STATUS\G</span><br></pre></td></tr></table></figure>
<p><img src="https://i.csms.tech/img_3.png"></p>
<h4 id="备份主库数据库数据"><a href="#备份主库数据库数据" class="headerlink" title="备份主库数据库数据"></a>备份主库数据库数据</h4><p>执行以下命令备份数据库db1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --master-data=2 --databases db1 &gt; db1.sql</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>--master-data=2</code>  将日志名和位置写入到备份结果并注释，可以从备份文件中搜索<code>change master to</code>  查看binlog文件名和position</p>
</blockquote>
<p>主库备份完成后，可以解锁：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>

<h4 id="从库恢复主库的备份数据"><a href="#从库恢复主库的备份数据" class="headerlink" title="从库恢复主库的备份数据"></a>从库恢复主库的备份数据</h4><p>将主库的备份数据拷贝到从库，使用备份数据覆盖恢复从库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p db1 &lt; db1.sql</span><br></pre></td></tr></table></figure>
<p>从库恢复备份完成后，和主库建立主从连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;pswd&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000196&#x27;,master_log_pos=1037640668;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>
<p>配置完成后，通过以下命令，查看主从状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主要关注以下项：<br>Slave_IO_Running: Yes<br>Slave_SQL_Running: Yes<br>Seconds_Behind_Master: 0  </p>
</blockquote>
<p><img src="https://i.csms.tech/img_5.png"></p>
<h3 id="恢复方法2：mysqldump主库不锁表备份恢复"><a href="#恢复方法2：mysqldump主库不锁表备份恢复" class="headerlink" title="恢复方法2：mysqldump主库不锁表备份恢复"></a>恢复方法2：mysqldump主库不锁表备份恢复</h3><h4 id="从库停止slave进程-1"><a href="#从库停止slave进程-1" class="headerlink" title="从库停止slave进程"></a>从库停止slave进程</h4><p>登录mysql从库，执行以下命令，停止slave进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure>
<h4 id="备份主库数据库数据-1"><a href="#备份主库数据库数据-1" class="headerlink" title="备份主库数据库数据"></a>备份主库数据库数据</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --master-data=2 --single-transaction -R --databases db01 &gt; db01.sql</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>--master-data=2</code> : 实现将日志名和位置写入到备份结果并注释,db01.sql中会包含当前日志的文件名以及位置<br><code>--routines, -R</code>：导出存储过程和函数</p>
</blockquote>
<h4 id="从库导入备份"><a href="#从库导入备份" class="headerlink" title="从库导入备份"></a>从库导入备份</h4><p>将主库的备份数据拷贝到从库，并进行恢复</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p db01 &lt; db01.sql</span><br></pre></td></tr></table></figure>
<h4 id="备份文件中查看binlog日志文件名和position"><a href="#备份文件中查看binlog日志文件名和position" class="headerlink" title="备份文件中查看binlog日志文件名和position"></a>备份文件中查看binlog日志文件名和position</h4><p>在备份文件(<code>db01.sql</code>)中搜索<code>CHANGE MASTER TO </code>, 结果中可以获取到binlog日志文件名和position</p>
<h4 id="建立主从连接"><a href="#建立主从连接" class="headerlink" title="建立主从连接"></a>建立主从连接</h4><p>根据上一步获取到的binlog文件名和position信息，建立主从连接并启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;pswd&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000196&#x27;,master_log_pos=1037640668;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>
<p>通过命令<code>show slave status\G</code> 检查主从同步状态</p>
<h3 id="恢复方法3：-xbackup整库备份恢复"><a href="#恢复方法3：-xbackup整库备份恢复" class="headerlink" title="恢复方法3： xbackup整库备份恢复"></a>恢复方法3： xbackup整库备份恢复</h3><h4 id="xbackup安装"><a href="#xbackup安装" class="headerlink" title="xbackup安装"></a>xbackup安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y libaio-devel.x86_64 bzip2</span><br><span class="line">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.4/binary/tarball/percona-xtrabackup-2.4.4-Linux-x86_64.tar.gz</span><br><span class="line">tar -zxf percona-xtrabackup-2.4.4-Linux-x86_64.tar.gz</span><br><span class="line">cp percona-xtrabackup-2.4.4-Linux-x86_64/bin/* /usr/bin</span><br></pre></td></tr></table></figure>

<h4 id="主库整库备份"><a href="#主库整库备份" class="headerlink" title="主库整库备份"></a>主库整库备份</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">innobackupex --defaults-file=/etc/my.cnf --user=root --password=PASSWD --port=3306 --socket=/var/lib/mysql/mysql.sock  [--databases  &quot;db1 db2 &quot;] $&#123;backup_data_dir&#125;</span><br></pre></td></tr></table></figure>

<h4 id="从库整库恢复"><a href="#从库整库恢复" class="headerlink" title="从库整库恢复"></a>从库整库恢复</h4><p>拷贝主库备份数据到从库,在从库上执行以下命令恢复数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $&#123;backup_data_dir&#125;</span><br><span class="line"></span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --apply-log --use-memory=20000M $&#123;backup_data_dir&#125;</span><br><span class="line"></span><br><span class="line">cp -r $&#123;backup_data_dir&#125;/* $&#123;mysql_base_dir&#125;/data/</span><br></pre></td></tr></table></figure>

<h4 id="建立主从连接-1"><a href="#建立主从连接-1" class="headerlink" title="建立主从连接"></a>建立主从连接</h4><p>备份数据中的<code>xtrabackup_binlog_info</code>文件包含了从库建立主从连接时需要的binlog信息，根据此文件中的信息，在从库执行命令，建立主从连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;1.1.1.1&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;pswd&#x27;,master_port=3306,master_log_file=&#x27;mysql-bin.000196&#x27;,master_log_pos=1037640668;</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>
<p>通过命令<code>show slave status\G</code> 检查主从同步状态</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>主从</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs安装配置</title>
    <url>/647e4c1a/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/latest/node-v15.12.0-linux-x64.tar.gz</span><br><span class="line">tar -xf node-v15.12.0-linux-x64.tar.gz -C /usr/local</span><br><span class="line">ln -s /usr/local/node-v15.12.0-linux-x64/bin/* /bin/</span><br></pre></td></tr></table></figure>

<p>安装pm2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install pm2 -g</span><br><span class="line">npm install -g pm2@3.5.1    # 安装指定版本</span><br></pre></td></tr></table></figure>

<h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><blockquote>
<p>WARN EACCES user “root” does not have permission to access the dev dir “&#x2F;root&#x2F;.node-gyp&#x2F;11.15.0”<br>ERR! stack Error: EACCES: permission denied, mkdir ‘node_modules&#x2F;sqlite3&#x2F;.node-gyp’</p>
<p>[解决方法]：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --unsafe-perm</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>rsyncd 服务</title>
    <url>/36f703dc/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync [OPTION]... SRC DEST</span><br><span class="line">rsync [OPTION]... SRC [USER@]host:DEST</span><br><span class="line">rsync [OPTION]... [USER@]HOST:SRC DEST</span><br><span class="line">rsync [OPTION]... [USER@]HOST::SRC DEST</span><br><span class="line">rsync [OPTION]... SRC [USER@]HOST::DEST</span><br><span class="line">rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]</span><br></pre></td></tr></table></figure>

<p><code>:</code>   ssh方式进行备份，ssh非默认端口使用选项-e指定端口, <code>-e &#39;ssh -p 30000&#39;</code></p>
<p><code>::</code>   socket方式进行备份，rsync以服务方式监听，SRC&#x2F;DEST为配置中定义的模块[]</p>
<blockquote>
<ul>
<li>rsync命令使用中，如果源参数的末尾有斜线，只会复制指定目录的内容，而不复制目录本身，没有斜线，则会复制目录本身，包括目录</li>
<li>客户端免密登录时，需要在客户端建立密码文件：&#x2F;etc&#x2F;rsync.passwd，文件中只保存密码，权限为600，用选项–password-file指明存放密码的文件位置</li>
</ul>
</blockquote>
<h4 id="常用选项-OPTION"><a href="#常用选项-OPTION" class="headerlink" title="常用选项 [OPTION]"></a>常用选项 [OPTION]</h4><blockquote>
<p>-v, –verbose 详细模式输出。<br>-q, –quiet 精简输出模式。<br>-c, –checksum 打开校验开关，强制对文件传输进行校验。<br>-a, –archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。<br>-r, –recursive 对子目录以递归模式处理。<br>-R, –relative 使用相对路径信息。<br>-b, –backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为<del>filename。可以使用–suffix选项来指定不同的备份文件前缀。<br>–backup-dir 将备份文件(如</del>filename)存放在在目录下。<br>-suffix&#x3D;SUFFIX 定义备份文件前缀。<br>-u, –update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。<br>-l, –links 保留软链结。<br>-L, –copy-links 想对待常规文件一样处理软链结。<br>–copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结。<br>–safe-links 忽略指向SRC路径目录树以外的链结。<br>-H, –hard-links 保留硬链结。<br>-p, –perms 保持文件权限。<br>-o, –owner 保持文件属主信息。<br>-g, –group 保持文件属组信息。<br>-D, –devices 保持设备文件信息。<br>-t, –times 保持文件时间信息。<br>-S, –sparse 对稀疏文件进行特殊处理以节省DST的空间。<br>-n, –dry-run现实哪些文件将被传输。<br>-w, –whole-file 拷贝文件，不进行增量检测。<br>-x, –one-file-system 不要跨越文件系统边界。<br>-B, –block-size&#x3D;SIZE 检验算法使用的块尺寸，默认是700字节。<br>-e, –rsh&#x3D;command 指定使用rsh、ssh方式进行数据同步。<br>–rsync-path&#x3D;PATH 指定远程服务器上的rsync命令所在路径信息。<br>-C, –cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件。<br>–existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件。<br>–delete 删除那些DST中SRC没有的文件。<br>–delete-excluded 同样删除接收端那些被该选项指定排除的文件。<br>–delete-after 传输结束以后再删除。<br>–ignore-errors 及时出现IO错误也进行删除。<br>–max-delete&#x3D;NUM 最多删除NUM个文件。<br>–partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输。<br>–force 强制删除目录，即使不为空。<br>–numeric-ids 不将数字的用户和组id匹配为用户名和组名。<br>–timeout&#x3D;time ip超时时间，单位为秒。<br>-I, –ignore-times 不跳过那些有同样的时间和长度的文件。<br>–size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。<br>–modify-window&#x3D;NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0。<br>-T –temp-dir&#x3D;DIR 在DIR中创建临时文件。<br>–compare-dest&#x3D;DIR 同样比较DIR中的文件来决定是否需要备份。<br>-P 等同于 –partial。<br>–progress 显示备份过程。<br>-z, –compress 对备份的文件在传输时进行压缩处理。<br>–exclude PATTERN 指定排除不需要传输的文件模式。支持通配符<br>–include PATTERN 指定不排除而需要传输的文件模式。<br>–exclude-from&#x3D;FILE 排除FILE中指定模式的文件。<br>–include-from&#x3D;FILE 不排除FILE指定模式匹配的文件。<br>–version 打印版本信息。<br>–address 绑定到特定的地址。<br>–config&#x3D;FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件。<br>–port&#x3D;PORT 指定其他的rsync服务端口。<br>–blocking-io 对远程shell使用阻塞IO。<br>-stats 给出某些文件的传输状态。<br>–progress 在传输时现实传输过程。<br>–log-format&#x3D;formAT 指定日志文件格式。<br>–password-file&#x3D;FILE 从FILE中得到密码。<br>–bwlimit&#x3D;KBPS 限制I&#x2F;O带宽，KBytes per second。<br>-h, –help 显示帮助信息。</p>
</blockquote>
<h4 id="rsyncd-配置文件示例"><a href="#rsyncd-配置文件示例" class="headerlink" title="rsyncd 配置文件示例"></a>rsyncd 配置文件示例</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==该选项指定当模块传输文件时守护进程应该具有的uid、gid</span></span><br><span class="line">uid =root  </span><br><span class="line">gid = root</span><br><span class="line">port = 873</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#消息文件，客户端连接服务器的时显示给客户端</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">motd file = /etc/rsyncd.motd</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==安全相关</span></span><br><span class="line">use chroot = no  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==设置最大连接数</span></span><br><span class="line">max connections = 200  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==设置超时时间</span></span><br><span class="line">timeout = 300   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==定义进程文件</span></span><br><span class="line">pid file = /var/run/rsyncd.pid </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==定义锁文件</span>  </span><br><span class="line">lock file = /var/run/rsync.lock </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==定义日志文件</span> </span><br><span class="line">log file = /var/log/rsyncd.log  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#关闭解析</span></span> </span><br><span class="line">reverse lookup = no  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;==配置一个数据存储的模块</span></span><br><span class="line">[backup]      </span><br><span class="line">    #&lt;==模块备份数据路径</span><br><span class="line">    path = /data/www/videos/  </span><br><span class="line">    ignore errors</span><br><span class="line">    read only = false</span><br><span class="line">    list = false</span><br><span class="line">    #&lt;==配置登录权限，可以多个IP网段用逗号隔开</span><br><span class="line">    #hosts allow = 172.16.1.0/24,172.25.1.0/24  </span><br><span class="line">    #hosts deny = 0.0.0.0/32</span><br><span class="line">    #&lt;==配置服务登录用户（访问服务的权限）</span><br><span class="line">    auth users = rsync        </span><br><span class="line">    #&lt;==配置用户和密码文件,权限必须600，用户名:密码格式 </span><br><span class="line">    secrets file = /etc/rsync.server.password  </span><br><span class="line">    ##是否检查secrets file的权限</span><br><span class="line">    strict modes = yes </span><br></pre></td></tr></table></figure>

<h4 id="常用命令示例"><a href="#常用命令示例" class="headerlink" title="常用命令示例"></a>常用命令示例</h4><p>ssh模式同步，默认ssh端口非22是指定ssh端口，使用 <code>-e &#39;ssh -p 222&#39;</code> 选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -e &#x27;ssh -p 222&#x27; /data/wwwroot/  qqc@9.9.9.9:/home/wwwroot/</span><br></pre></td></tr></table></figure>

<p>Windows中使用方式，以类似 <code>/cygdrive/d/</code> 的方式指定d盘</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -c -r -u -t --timeout=300 -z --password-file C:\rsyncPasswd.txt /cygdrive/d/DATA/ rsync@0.0.0.0::zy/</span><br></pre></td></tr></table></figure>

<h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4>]]></content>
      <categories>
        <category>Linux</category>
        <category>常用服务</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>网宿云存储python sdk常用操作</title>
    <url>/f63bf868/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><p>Centos7</p>
<p>Python3</p>
<p>wcs-python3-sdk (5.0.35)</p>
<p># 网宿云python sdk, <code>pip3 install wcs-python3-sdk</code>， 安装后包含cli工具<code>wcscmd</code></p>
<h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wcscmd --configure [--config=FILE] </span><br></pre></td></tr></table></figure>

<p><code>--config=FILE  </code>配置文件存储路径，默认<code>~/.wcscfg</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[参考链接](https://github.com/Wangsu-Cloud-Storage/wcs-python-sdk)">[1]</span></a></sup></p>
<h3 id="wcscmd常用操作"><a href="#wcscmd常用操作" class="headerlink" title="wcscmd常用操作"></a>wcscmd常用操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wcscmd listbucket </span><br><span class="line">wcscmd stat wcs://BUCKET/OBJECT  \# 查询文件信息</span><br><span class="line">wcscmd deletePrefix wcs://BUCKET PREFIX  \# 根据前缀（文件路径，必须从头开始匹配，不需要最前面的/）删除目录或文件</span><br><span class="line">wcscmd put wcs://BUCKET/file file</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="python3-sdk操作"><a href="#python3-sdk操作" class="headerlink" title="python3 sdk操作"></a>python3 sdk操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wcs.commons.config <span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> wcs.services.client <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line">config_file = <span class="string">&quot;/root/.wcscfg&quot;</span></span><br><span class="line">cfg = Config(config_file)</span><br><span class="line">cli = Client(cfg)</span><br><span class="line">bucketName = <span class="string">&quot;TestBucket&quot;</span></span><br><span class="line">buckList = cli.bucket_list(bucketName, marker=<span class="string">&#x27;&#x27;</span>)    <span class="comment"># 列出bucket中的文件列表，每次最多获取1000个，第一页 `marker=&#x27;&#x27;`, 请求第一页的响应中marker的值为新的页的marker，可通过新的marker继续发起请求</span></span><br></pre></td></tr></table></figure>

<h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/Wangsu-Cloud-Storage/wcs-python-sdk">参考链接</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>云平台</category>
        <category>网宿</category>
      </categories>
      <tags>
        <tag>云平台</tag>
        <tag>网宿</tag>
      </tags>
  </entry>
  <entry>
    <title>windows远程登录失败</title>
    <url>/f5e030ac/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>远程登录windows失败，报错:</p>
<blockquote>
<p>由于没有远程桌面授权服务器可以提供许可证，远程会话连接已断开，请跟服务器管理员联系</p>
</blockquote>
<p><img src="https://i.csms.tech/img.png"></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li>打开cmd，执行以下命令远程登录无法登录的Windows主机<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mstsc /v:<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span> /admin</span><br></pre></td></tr></table></figure></li>
<li>打开注册表</li>
</ol>
<p><img src="https://i.csms.tech/img_1.png"><br>3. 找到路径： HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\RCM\GracePeriod.如果超过120天后RCM下面会有一个GracePeriod,先备份这项注册表，再删除除了默认的的注册表项。</p>
<ol start="4">
<li>重启电脑后生效.</li>
</ol>
]]></content>
      <categories>
        <category>Window</category>
        <category>常见错误</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
</search>
